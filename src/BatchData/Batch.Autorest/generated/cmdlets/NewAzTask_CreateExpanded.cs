// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;
    using Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell;
    using Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Cmdlets;
    using System;

    /// <summary>
    /// The maximum lifetime of a Task from addition to completion is 180 days. If a\nTask has not completed within 180 days of
    /// being added it will be terminated by\nthe Batch service and left in whatever state it was in at that time.
    /// </summary>
    /// <remarks>
    /// [OpenAPI] CreateTask=>POST:"/jobs/{jobId}/tasks"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"AzTask_CreateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(bool))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Description(@"The maximum lifetime of a Task from addition to completion is 180 days. If a\nTask has not completed within 180 days of being added it will be terminated by\nthe Batch service and left in whatever state it was in at that time.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Generated]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.HttpPath(Path = "/jobs/{jobId}/tasks", ApiVersion = "2024-07-01.20.0")]
    public partial class NewAzTask_CreateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IContext
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>A dictionary to carry over additional data for pipeline.</summary>
        private global::System.Collections.Generic.Dictionary<global::System.String,global::System.Object> _extensibleParameters = new System.Collections.Generic.Dictionary<string, object>();

        /// <summary>A buffer to record first returned object in response.</summary>
        private object _firstResponse = null;

        /// <summary>
        /// A flag to tell whether it is the first returned object in a call. Zero means no response yet. One means 1 returned object.
        /// Two means multiple returned objects in response.
        /// </summary>
        private int _responseSize = 0;

        /// <summary>Parameters for creating an Azure Batch Task.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskCreateOptions _taskBody = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchTaskCreateOptions();

        /// <summary>
        /// An opaque string representing the location of a Compute Node or a Task that has run previously. You can pass the affinityId
        /// of a Node to indicate that this Task needs to run on that Compute Node. Note that this is just a soft affinity. If the
        /// target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "An opaque string representing the location of a Compute Node or a Task that has run previously. You can pass the affinityId of a Node to indicate that this Task needs to run on that Compute Node. Note that this is just a soft affinity. If the target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An opaque string representing the location of a Compute Node or a Task that has run previously. You can pass the affinityId of a Node to indicate that this Task needs to run on that Compute Node. Note that this is just a soft affinity. If the target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere.",
        SerializedName = @"affinityId",
        PossibleTypes = new [] { typeof(string) })]
        public string AffinityInfoAffinityId { get => _taskBody.AffinityInfoAffinityId ?? null; set => _taskBody.AffinityInfoAffinityId = value; }

        /// <summary>
        /// A list of Packages that the Batch service will deploy to the Compute Node before running the command line. Application
        /// packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced
        /// package is already on the Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node
        /// is used. If a referenced Package cannot be installed, for example because the package has been deleted or because download
        /// failed, the Task fails.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A list of Packages that the Batch service will deploy to the Compute Node before running the command line. Application packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced package is already on the Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Package cannot be installed, for example because the package has been deleted or because download failed, the Task fails.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of Packages that the Batch service will deploy to the Compute Node before running the command line. Application packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced package is already on the Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Package cannot be installed, for example because the package has been deleted or because download failed, the Task fails.",
        SerializedName = @"applicationPackageReferences",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference[] ApplicationPackageReference { get => _taskBody.ApplicationPackageReference?.ToArray() ?? null /* fixedArrayOf */; set => _taskBody.ApplicationPackageReference = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchApplicationPackageReference>(value) : null); }

        /// <summary>
        /// The Batch resources to which the token grants access. The authentication token grants access to a limited set of Batch
        /// service operations. Currently the only supported value for the access property is 'job', which grants access to all operations
        /// related to the Job which contains the Task.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Batch resources to which the token grants access. The authentication token grants access to a limited set of Batch service operations. Currently the only supported value for the access property is 'job', which grants access to all operations related to the Job which contains the Task.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Batch resources to which the token grants access. The authentication token grants access to a limited set of Batch service operations. Currently the only supported value for the access property is 'job', which grants access to all operations related to the Job which contains the Task.",
        SerializedName = @"access",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("job")]
        public string[] AuthenticationTokenSettingAccess { get => _taskBody.AuthenticationTokenSettingAccess?.ToArray() ?? null /* fixedArrayOf */; set => _taskBody.AuthenticationTokenSettingAccess = (value != null ? new System.Collections.Generic.List<string>(value) : null); }

        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The elevation level of the auto user. The default value is nonAdmin.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The elevation level of the auto user. The default value is nonAdmin.",
        SerializedName = @"elevationLevel",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        public string AutoUserElevationLevel { get => _taskBody.AutoUserElevationLevel ?? null; set => _taskBody.AutoUserElevationLevel = value; }

        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        public string AutoUserScope { get => _taskBody.AutoUserScope ?? null; set => _taskBody.AutoUserScope = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>Accessor for cancellationTokenSource.</summary>
        public global::System.Threading.CancellationTokenSource CancellationTokenSource { get => _cancellationTokenSource ; set { _cancellationTokenSource = value; } }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Batch Client => Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.ClientAPI;

        /// <summary>Backing field for <see cref="ClientRequestId" /> property.</summary>
        private string _clientRequestId;

        /// <summary>
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The caller-generated request identity, in the form of a GUID with no decoration\nsuch as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The caller-generated request identity, in the form of a GUID with no decoration
        such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.",
        SerializedName = @"client-request-id",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Header)]
        public string ClientRequestId { get => this._clientRequestId; set => this._clientRequestId = value; }

        /// <summary>
        /// The command line of the Task. For multi-instance Tasks, the command line is executed as the primary Task, after the primary
        /// Task and all subtasks have finished executing the coordination command line. The command line does not run under a shell,
        /// and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage
        /// of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or
        /// "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to
        /// the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The command line of the Task. For multi-instance Tasks, the command line is executed as the primary Task, after the primary Task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The command line of the Task. For multi-instance Tasks, the command line is executed as the primary Task, after the primary Task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using ""cmd /c MyCommand"" in Windows or ""/bin/sh -c MyCommand"" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).",
        SerializedName = @"commandLine",
        PossibleTypes = new [] { typeof(string) })]
        public string CommandLine { get => _taskBody.CommandLine ?? null; set => _taskBody.CommandLine = value; }

        /// <summary>
        /// The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch
        /// service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch
        /// tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does
        /// not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without
        /// limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries).",
        SerializedName = @"maxTaskRetryCount",
        PossibleTypes = new [] { typeof(int) })]
        public int ConstraintMaxTaskRetryCount { get => _taskBody.ConstraintMaxTaskRetryCount ?? default(int); set => _taskBody.ConstraintMaxTaskRetryCount = value; }

        /// <summary>
        /// The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete
        /// within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the
        /// Task may run.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the Task may run.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete within the time limit, the Batch service terminates it. If this is not specified, there is no time limit on how long the Task may run.",
        SerializedName = @"maxWallClockTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        public global::System.TimeSpan ConstraintMaxWallClockTime { get => _taskBody.ConstraintMaxWallClockTime ?? default(global::System.TimeSpan); set => _taskBody.ConstraintMaxWallClockTime = value; }

        /// <summary>
        /// The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution.
        /// After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the
        /// Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution. After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution. After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.",
        SerializedName = @"retentionTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        public global::System.TimeSpan ConstraintRetentionTime { get => _taskBody.ConstraintRetentionTime ?? default(global::System.TimeSpan); set => _taskBody.ConstraintRetentionTime = value; }

        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if this array is set as empty.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if this array is set as empty.",
        SerializedName = @"containerHostBatchBindMounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry[] ContainerSettingContainerHostBatchBindMount { get => _taskBody.ContainerSettingContainerHostBatchBindMount?.ToArray() ?? null /* fixedArrayOf */; set => _taskBody.ContainerSettingContainerHostBatchBindMount = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>(value) : null); }

        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Additional options to the container create command. These additional options are supplied as arguments to the \"docker create\" command, in addition to those controlled by the Batch Service.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Additional options to the container create command. These additional options are supplied as arguments to the ""docker create"" command, in addition to those controlled by the Batch Service.",
        SerializedName = @"containerRunOptions",
        PossibleTypes = new [] { typeof(string) })]
        public string ContainerSettingContainerRunOption { get => _taskBody.ContainerSettingContainerRunOption ?? null; set => _taskBody.ContainerSettingContainerRunOption = value; }

        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified to \"docker pull\". If no tag is provided as part of the Image name, the tag \":latest\" is used as a default.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified to ""docker pull"". If no tag is provided as part of the Image name, the tag "":latest"" is used as a default.",
        SerializedName = @"imageName",
        PossibleTypes = new [] { typeof(string) })]
        public string ContainerSettingImageName { get => _taskBody.ContainerSettingImageName ?? null; set => _taskBody.ContainerSettingImageName = value; }

        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The location of the container Task working directory. The default is 'taskWorkingDirectory'.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The location of the container Task working directory. The default is 'taskWorkingDirectory'.",
        SerializedName = @"workingDirectory",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        public string ContainerSettingWorkingDirectory { get => _taskBody.ContainerSettingWorkingDirectory ?? null; set => _taskBody.ContainerSettingWorkingDirectory = value; }

        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent tasks.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent tasks.",
        SerializedName = @"dependencyAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        public string DefaultDependencyAction { get => _taskBody.DefaultDependencyAction ?? null; set => _taskBody.DefaultDependencyAction = value; }

        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions. If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions. If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"jobAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        public string DefaultJobAction { get => _taskBody.DefaultJobAction ?? null; set => _taskBody.DefaultJobAction = value; }

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>
        /// The list of Task IDs that this Task depends on. All Tasks in this list must complete successfully before the dependent
        /// Task can be scheduled. The taskIds collection is limited to 64000 characters total (i.e. the combined length of all Task
        /// IDs). If the taskIds collection exceeds the maximum length, the Add Task request fails with error code TaskDependencyListTooLong.
        /// In this case consider using Task ID ranges instead.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of Task IDs that this Task depends on. All Tasks in this list must complete successfully before the dependent Task can be scheduled. The taskIds collection is limited to 64000 characters total (i.e. the combined length of all Task IDs). If the taskIds collection exceeds the maximum length, the Add Task request fails with error code TaskDependencyListTooLong. In this case consider using Task ID ranges instead.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of Task IDs that this Task depends on. All Tasks in this list must complete successfully before the dependent Task can be scheduled. The taskIds collection is limited to 64000 characters total (i.e. the combined length of all Task IDs). If the taskIds collection exceeds the maximum length, the Add Task request fails with error code TaskDependencyListTooLong. In this case consider using Task ID ranges instead.",
        SerializedName = @"taskIds",
        PossibleTypes = new [] { typeof(string) })]
        public string[] DependOnTaskId { get => _taskBody.DependOnTaskId?.ToArray() ?? null /* fixedArrayOf */; set => _taskBody.DependOnTaskId = (value != null ? new System.Collections.Generic.List<string>(value) : null); }

        /// <summary>
        /// The list of Task ID ranges that this Task depends on. All Tasks in all ranges must complete successfully before the dependent
        /// Task can be scheduled.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of Task ID ranges that this Task depends on. All Tasks in all ranges must complete successfully before the dependent Task can be scheduled.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of Task ID ranges that this Task depends on. All Tasks in all ranges must complete successfully before the dependent Task can be scheduled.",
        SerializedName = @"taskIdRanges",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskIdRange) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskIdRange[] DependOnTaskIdRange { get => _taskBody.DependOnTaskIdRange?.ToArray() ?? null /* fixedArrayOf */; set => _taskBody.DependOnTaskIdRange = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchTaskIdRange>(value) : null); }

        /// <summary>
        /// A display name for the Task. The display name need not be unique and can contain any Unicode characters up to a maximum
        /// length of 1024.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A display name for the Task. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A display name for the Task. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        public string DisplayName { get => _taskBody.DisplayName ?? null; set => _taskBody.DisplayName = value; }

        /// <summary>Backing field for <see cref="Endpoint" /> property.</summary>
        private string _endpoint;

        /// <summary>
        /// Batch account endpoint (for example: https://batchaccount.eastus2.batch.azure.com).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Batch account endpoint (for example: https://batchaccount.eastus2.batch.azure.com).")]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Batch account endpoint (for example: https://batchaccount.eastus2.batch.azure.com).",
        SerializedName = @"endpoint",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Uri)]
        public string Endpoint { get => this._endpoint; set => this._endpoint = value; }

        /// <summary>A list of environment variable settings for the Task.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A list of environment variable settings for the Task.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of environment variable settings for the Task.",
        SerializedName = @"environmentSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting[] EnvironmentSetting { get => _taskBody.EnvironmentSetting?.ToArray() ?? null /* fixedArrayOf */; set => _taskBody.EnvironmentSetting = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>(value) : null); }

        /// <summary>
        /// A list of individual Task exit codes and how the Batch service should respond to them.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A list of individual Task exit codes and how the Batch service should respond to them.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of individual Task exit codes and how the Batch service should respond to them.",
        SerializedName = @"exitCodes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping[] ExitConditionExitCode { get => _taskBody.ExitConditionExitCode?.ToArray() ?? null /* fixedArrayOf */; set => _taskBody.ExitConditionExitCode = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeMapping>(value) : null); }

        /// <summary>
        /// A list of Task exit code ranges and how the Batch service should respond to them.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A list of Task exit code ranges and how the Batch service should respond to them.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of Task exit code ranges and how the Batch service should respond to them.",
        SerializedName = @"exitCodeRanges",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping[] ExitConditionExitCodeRange { get => _taskBody.ExitConditionExitCodeRange?.ToArray() ?? null /* fixedArrayOf */; set => _taskBody.ExitConditionExitCodeRange = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IExitCodeRangeMapping>(value) : null); }

        /// <summary>Accessor for extensibleParameters.</summary>
        public global::System.Collections.Generic.IDictionary<global::System.String,global::System.Object> ExtensibleParameters { get => _extensibleParameters ; }

        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent tasks.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent tasks.",
        SerializedName = @"dependencyAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        public string FileUploadErrorDependencyAction { get => _taskBody.FileUploadErrorDependencyAction ?? null; set => _taskBody.FileUploadErrorDependencyAction = value; }

        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions. If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions. If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"jobAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        public string FileUploadErrorJobAction { get => _taskBody.FileUploadErrorJobAction ?? null; set => _taskBody.FileUploadErrorJobAction = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>
        /// A string that uniquely identifies the Task within the Job. The ID can contain any combination of alphanumeric characters
        /// including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive
        /// (that is, you may not have two IDs within a Job that differ only by case).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "A string that uniquely identifies the Task within the Job. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within a Job that differ only by case).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"A string that uniquely identifies the Task within the Job. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within a Job that differ only by case).",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        public string Id { get => _taskBody.Id ?? null; set => _taskBody.Id = value; }

        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The ARM resource id of the user assigned identity.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ARM resource id of the user assigned identity.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        public string IdentityReferenceResourceId { get => _taskBody.IdentityReferenceResourceId ?? null; set => _taskBody.IdentityReferenceResourceId = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>Backing field for <see cref="JobId" /> property.</summary>
        private string _jobId;

        /// <summary>The ID of the Job to which the Task is to be created.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The ID of the Job to which the Task is to be created.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The ID of the Job to which the Task is to be created.",
        SerializedName = @"jobId",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Path)]
        public string JobId { get => this._jobId; set => this._jobId = value; }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>
        /// A list of files that the Batch service will download before running the coordination command line. The difference between
        /// common resource files and Task resource files is that common resource files are downloaded for all subtasks including
        /// the primary, whereas Task resource files are downloaded only for the primary. Also note that these resource files are
        /// not downloaded to the Task working directory, but instead are downloaded to the Task root directory (one directory above
        /// the working directory). There is a maximum size for the list of resource files. When the max size is exceeded, the request
        /// will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must
        /// be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A list of files that the Batch service will download before running the coordination command line. The difference between common resource files and Task resource files is that common resource files are downloaded for all subtasks including the primary, whereas Task resource files are downloaded only for the primary. Also note that these resource files are not downloaded to the Task working directory, but instead are downloaded to the Task root directory (one directory above the working directory). There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of files that the Batch service will download before running the coordination command line. The difference between common resource files and Task resource files is that common resource files are downloaded for all subtasks including the primary, whereas Task resource files are downloaded only for the primary. Also note that these resource files are not downloaded to the Task working directory, but instead are downloaded to the Task root directory (one directory above the working directory). There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.",
        SerializedName = @"commonResourceFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile[] MultiInstanceSettingCommonResourceFile { get => _taskBody.MultiInstanceSettingCommonResourceFile?.ToArray() ?? null /* fixedArrayOf */; set => _taskBody.MultiInstanceSettingCommonResourceFile = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(value) : null); }

        /// <summary>
        /// The command line to run on all the Compute Nodes to enable them to coordinate when the primary runs the main Task command.
        /// A typical coordination command line launches a background service and verifies that the service is ready to process inter-node
        /// messages.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The command line to run on all the Compute Nodes to enable them to coordinate when the primary runs the main Task command. A typical coordination command line launches a background service and verifies that the service is ready to process inter-node messages.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The command line to run on all the Compute Nodes to enable them to coordinate when the primary runs the main Task command. A typical coordination command line launches a background service and verifies that the service is ready to process inter-node messages.",
        SerializedName = @"coordinationCommandLine",
        PossibleTypes = new [] { typeof(string) })]
        public string MultiInstanceSettingCoordinationCommandLine { get => _taskBody.MultiInstanceSettingCoordinationCommandLine ?? null; set => _taskBody.MultiInstanceSettingCoordinationCommandLine = value; }

        /// <summary>The number of Compute Nodes required by the Task. If omitted, the default is 1.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The number of Compute Nodes required by the Task. If omitted, the default is 1.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of Compute Nodes required by the Task. If omitted, the default is 1.",
        SerializedName = @"numberOfInstances",
        PossibleTypes = new [] { typeof(int) })]
        public int MultiInstanceSettingNumberOfInstance { get => _taskBody.MultiInstanceSettingNumberOfInstance ?? default(int); set => _taskBody.MultiInstanceSettingNumberOfInstance = value; }

        /// <summary>Backing field for <see cref="Ocpdate" /> property.</summary>
        private string _ocpdate;

        /// <summary>
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The time the request was issued. Client libraries typically set this to the\ncurrent system clock time; set it explicitly if you are calling the REST API\ndirectly.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time the request was issued. Client libraries typically set this to the
        current system clock time; set it explicitly if you are calling the REST API
        directly.",
        SerializedName = @"ocp-date",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Header)]
        public string Ocpdate { get => this._ocpdate; set => this._ocpdate = value; }

        /// <summary>
        /// A list of files that the Batch service will upload from the Compute Node after running the command line. For multi-instance
        /// Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A list of files that the Batch service will upload from the Compute Node after running the command line. For multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of files that the Batch service will upload from the Compute Node after running the command line. For multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed.",
        SerializedName = @"outputFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile[] OutputFile { get => _taskBody.OutputFile?.ToArray() ?? null /* fixedArrayOf */; set => _taskBody.OutputFile = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IOutputFile>(value) : null); }

        /// <summary>
        /// When specified, forces the cmdlet return a 'bool' given that there isn't a return type by default.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Returns true when the command succeeds")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter PassThru { get; set; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>
        /// An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent
        /// tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent
        /// tasks.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent tasks.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent tasks.",
        SerializedName = @"dependencyAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("satisfy", "block")]
        public string PreProcessingErrorDependencyAction { get => _taskBody.PreProcessingErrorDependencyAction ?? null; set => _taskBody.PreProcessingErrorDependencyAction = value; }

        /// <summary>
        /// An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed
        /// property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions.
        /// If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request
        /// fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions. If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions. If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"jobAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("none", "disable", "terminate")]
        public string PreProcessingErrorJobAction { get => _taskBody.PreProcessingErrorJobAction ?? null; set => _taskBody.PreProcessingErrorJobAction = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>The password to log into the registry server.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The password to log into the registry server.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The password to log into the registry server.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        public System.Security.SecureString RegistryPassword { get => _taskBody.RegistryPassword ?? null; set => _taskBody.RegistryPassword = value; }

        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The registry URL. If omitted, the default is \"docker.io\".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The registry URL. If omitted, the default is ""docker.io"".",
        SerializedName = @"registryServer",
        PossibleTypes = new [] { typeof(string) })]
        public string RegistryServer { get => _taskBody.RegistryServer ?? null; set => _taskBody.RegistryServer = value; }

        /// <summary>The user name to log into the registry server.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The user name to log into the registry server.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The user name to log into the registry server.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        public string RegistryUsername { get => _taskBody.RegistryUsername ?? null; set => _taskBody.RegistryUsername = value; }

        /// <summary>
        /// The number of scheduling slots that the Task required to run. The default is 1. A Task can only be scheduled to run on
        /// a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this must be 1.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The number of scheduling slots that the Task required to run. The default is 1. A Task can only be scheduled to run on a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this must be 1.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of scheduling slots that the Task required to run. The default is 1. A Task can only be scheduled to run on a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this must be 1.",
        SerializedName = @"requiredSlots",
        PossibleTypes = new [] { typeof(int) })]
        public int RequiredSlot { get => _taskBody.RequiredSlot ?? default(int); set => _taskBody.RequiredSlot = value; }

        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. For multi-instance
        /// Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed. There is
        /// a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error
        /// code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can
        /// be achieved using .zip files, Application Packages, or Docker Containers.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A list of files that the Batch service will download to the Compute Node before running the command line. For multi-instance Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of files that the Batch service will download to the Compute Node before running the command line. For multi-instance Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.",
        SerializedName = @"resourceFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile[] ResourceFile { get => _taskBody.ResourceFile?.ToArray() ?? null /* fixedArrayOf */; set => _taskBody.ResourceFile = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(value) : null); }

        /// <summary>Backing field for <see cref="ReturnClientRequestId" /> property.</summary>
        private global::System.Management.Automation.SwitchParameter _returnClientRequestId;

        /// <summary>Whether the server should return the client-request-id in the response.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether the server should return the client-request-id in the response.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether the server should return the client-request-id in the response.",
        SerializedName = @"return-client-request-id",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Header)]
        public global::System.Management.Automation.SwitchParameter ReturnClientRequestId { get => this._returnClientRequestId; set => this._returnClientRequestId = value; }

        /// <summary>Backing field for <see cref="TimeOut" /> property.</summary>
        private int _timeOut;

        /// <summary>
        /// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
        /// is larger than 30, the default will be used instead.".
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\".")]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead."".",
        SerializedName = @"timeOut",
        PossibleTypes = new [] { typeof(int) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Query)]
        public int TimeOut { get => this._timeOut; set => this._timeOut = value; }

        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify one but not both.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify one but not both.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        public string UserIdentityUsername { get => _taskBody.UserIdentityUsername ?? null; set => _taskBody.UserIdentityUsername = value; }

        /// <summary>
        /// <c>overrideOnCreated</c> will be called before the regular onCreated has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="headers">the header result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ITasksCreateTaskCreatedResponseHeaders"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onCreated method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ITasksCreateTaskCreatedResponseHeaders> headers, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError">Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            if (1 ==_responseSize)
            {
                // Flush buffer
                WriteObject(_firstResponse);
            }
            var telemetryInfo = Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.GetTelemetryInfo?.Invoke(__correlationId);
            if (telemetryInfo != null)
            {
                telemetryInfo.TryGetValue("ShowSecretsWarning", out var showSecretsWarning);
                telemetryInfo.TryGetValue("SanitizedProperties", out var sanitizedProperties);
                telemetryInfo.TryGetValue("InvocationName", out var invocationName);
                if (showSecretsWarning == "true")
                {
                    if (string.IsNullOrEmpty(sanitizedProperties))
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing secrets. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                    else
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing the following secrets: {sanitizedProperties}. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                }
            }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.Progress:
                    {
                        var data = messageData();
                        int progress = (int)data.Value;
                        string activityMessage, statusDescription;
                        global::System.Management.Automation.ProgressRecordType recordType;
                        if (progress < 100)
                        {
                            activityMessage = "In progress";
                            statusDescription = "Checking operation status";
                            recordType = System.Management.Automation.ProgressRecordType.Processing;
                        }
                        else
                        {
                            activityMessage = "Completed";
                            statusDescription = "Completed";
                            recordType = System.Management.Automation.ProgressRecordType.Completed;
                        }
                        WriteProgress(new global::System.Management.Automation.ProgressRecord(1, activityMessage, statusDescription)
                        {
                            PercentComplete = progress,
                        RecordType = recordType
                        });
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.Signal(id, token, messageData, (i, t, m) => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(i, t, () => Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.EventDataConverter.ConvertFrom(m()) as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.EventData), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewAzTask_CreateExpanded" /> cmdlet class.
        /// </summary>
        public NewAzTask_CreateExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'TasksCreateTask' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName, this.ExtensibleParameters);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.TasksCreateTask(JobId, this.InvocationInformation.BoundParameters.ContainsKey("ClientRequestId") ? ClientRequestId : null, this.InvocationInformation.BoundParameters.ContainsKey("ReturnClientRequestId") ? ReturnClientRequestId : default(global::System.Management.Automation.SwitchParameter?), this.InvocationInformation.BoundParameters.ContainsKey("Ocpdate") ? Ocpdate : null, this.InvocationInformation.BoundParameters.ContainsKey("TimeOut") ? TimeOut : default(int?), Endpoint, _taskBody, onCreated, onDefault, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { JobId=JobId,TimeOut=this.InvocationInformation.BoundParameters.ContainsKey("TimeOut") ? TimeOut : default(int?),ClientRequestId=this.InvocationInformation.BoundParameters.ContainsKey("ClientRequestId") ? ClientRequestId : null,ReturnClientRequestId=this.InvocationInformation.BoundParameters.ContainsKey("ReturnClientRequestId") ? ReturnClientRequestId : default(global::System.Management.Automation.SwitchParameter?),Ocpdate=this.InvocationInformation.BoundParameters.ContainsKey("Ocpdate") ? Ocpdate : null,Endpoint=Endpoint})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <param name="sendToPipeline"></param>
        new protected void WriteObject(object sendToPipeline)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline);
        }

        /// <param name="sendToPipeline"></param>
        /// <param name="enumerateCollection"></param>
        new protected void WriteObject(object sendToPipeline, bool enumerateCollection)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline, enumerateCollection);
        }

        /// <summary>a delegate that is called when the remote service returns 201 (Created).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="headers">the header result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ITasksCreateTaskCreatedResponseHeaders"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.ITasksCreateTaskCreatedResponseHeaders> headers)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnCreated(responseMessage, headers, ref _returnNow);
                // if overrideOnCreated has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onCreated - response for 201 /
                if (true == MyInvocation?.BoundParameters?.ContainsKey("PassThru"))
                {
                    WriteObject(true);
                }
            }
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError">Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.MessageLang;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }
    }
}