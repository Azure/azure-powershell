// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Batch.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Extensions;
    using Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell;
    using Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Cmdlets;
    using System;

    /// <summary>
    /// The Batch service supports two ways to control the work done as part of a Job.\nIn the first approach, the user specifies
    /// a Job Manager Task. The Batch service\nlaunches this Task when it is ready to start the Job. The Job Manager Task\ncontrols
    /// all other Tasks that run under this Job, by using the Task APIs. In\nthe second approach, the user directly controls the
    /// execution of Tasks under an\nactive Job, by using the Task APIs. Also note: when naming Jobs, avoid\nincluding sensitive
    /// information such as user names or secret project names.\nThis information may appear in telemetry logs accessible to Microsoft
    /// Support\nengineers.
    /// </summary>
    /// <remarks>
    /// [OpenAPI] CreateJob=>POST:"/jobs"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"AzJob_CreateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(bool))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Description(@"The Batch service supports two ways to control the work done as part of a Job.\nIn the first approach, the user specifies a Job Manager Task. The Batch service\nlaunches this Task when it is ready to start the Job. The Job Manager Task\ncontrols all other Tasks that run under this Job, by using the Task APIs. In\nthe second approach, the user directly controls the execution of Tasks under an\nactive Job, by using the Task APIs. Also note: when naming Jobs, avoid\nincluding sensitive information such as user names or secret project names.\nThis information may appear in telemetry logs accessible to Microsoft Support\nengineers.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Generated]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.HttpPath(Path = "/jobs", ApiVersion = "2024-07-01.20.0")]
    public partial class NewAzJob_CreateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener,
        Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IContext
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>A dictionary to carry over additional data for pipeline.</summary>
        private global::System.Collections.Generic.Dictionary<global::System.String,global::System.Object> _extensibleParameters = new System.Collections.Generic.Dictionary<string, object>();

        /// <summary>A buffer to record first returned object in response.</summary>
        private object _firstResponse = null;

        /// <summary>Parameters for creating an Azure Batch Job.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobCreateOptions _jobBody = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.BatchJobCreateOptions();

        /// <summary>
        /// A flag to tell whether it is the first returned object in a call. Zero means no response yet. One means 1 returned object.
        /// Two means multiple returned objects in response.
        /// </summary>
        private int _responseSize = 0;

        /// <summary>
        /// The action the Batch service should take when all Tasks in the Job are in the completed state. Note that if a Job contains
        /// no Tasks, then all Tasks are considered complete. This option is therefore most commonly used with a Job Manager task;
        /// if you want to use automatic Job termination without a Job Manager, you should initially set onAllTasksComplete to noaction
        /// and update the Job properties to set onAllTasksComplete to terminatejob once you have finished adding Tasks. The default
        /// is noaction.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The action the Batch service should take when all Tasks in the Job are in the completed state. Note that if a Job contains no Tasks, then all Tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic Job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the Job properties to set onAllTasksComplete to terminatejob once you have finished adding Tasks. The default is noaction.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The action the Batch service should take when all Tasks in the Job are in the completed state. Note that if a Job contains no Tasks, then all Tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic Job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the Job properties to set onAllTasksComplete to terminatejob once you have finished adding Tasks. The default is noaction.",
        SerializedName = @"onAllTasksComplete",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("noaction", "terminatejob")]
        public string AllTasksCompleteMode { get => _jobBody.AllTasksCompleteMode ?? null; set => _jobBody.AllTasksCompleteMode = value; }

        /// <summary>
        /// Whether Tasks in this job can be preempted by other high priority jobs. If the value is set to True, other high priority
        /// jobs submitted to the system will take precedence and will be able requeue tasks from this job. You can update a job's
        /// allowTaskPreemption after it has been created using the update job API.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether Tasks in this job can be preempted by other high priority jobs. If the value is set to True, other high priority jobs submitted to the system will take precedence and will be able requeue tasks from this job. You can update a job's allowTaskPreemption after it has been created using the update job API.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether Tasks in this job can be preempted by other high priority jobs. If the value is set to True, other high priority jobs submitted to the system will take precedence and will be able requeue tasks from this job. You can update a job's allowTaskPreemption after it has been created using the update job API.",
        SerializedName = @"allowTaskPreemption",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter AllowTaskPreemption { get => _jobBody.AllowTaskPreemption ?? default(global::System.Management.Automation.SwitchParameter); set => _jobBody.AllowTaskPreemption = value; }

        /// <summary>
        /// A prefix to be added to the unique identifier when a Pool is automatically created. The Batch service assigns each auto
        /// Pool a unique identifier on creation. To distinguish between Pools created for different purposes, you can specify this
        /// element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A prefix to be added to the unique identifier when a Pool is automatically created. The Batch service assigns each auto Pool a unique identifier on creation. To distinguish between Pools created for different purposes, you can specify this element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A prefix to be added to the unique identifier when a Pool is automatically created. The Batch service assigns each auto Pool a unique identifier on creation. To distinguish between Pools created for different purposes, you can specify this element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.",
        SerializedName = @"autoPoolIdPrefix",
        PossibleTypes = new [] { typeof(string) })]
        public string AutoPoolSpecificationAutoPoolIdPrefix { get => _jobBody.AutoPoolSpecificationAutoPoolIdPrefix ?? null; set => _jobBody.AutoPoolSpecificationAutoPoolIdPrefix = value; }

        /// <summary>
        /// Whether to keep an auto Pool alive after its lifetime expires. If false, the Batch service deletes the Pool once its lifetime
        /// (as determined by the poolLifetimeOption setting) expires; that is, when the Job or Job Schedule completes. If true, the
        /// Batch service does not delete the Pool automatically. It is up to the user to delete auto Pools created with this option.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether to keep an auto Pool alive after its lifetime expires. If false, the Batch service deletes the Pool once its lifetime (as determined by the poolLifetimeOption setting) expires; that is, when the Job or Job Schedule completes. If true, the Batch service does not delete the Pool automatically. It is up to the user to delete auto Pools created with this option.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to keep an auto Pool alive after its lifetime expires. If false, the Batch service deletes the Pool once its lifetime (as determined by the poolLifetimeOption setting) expires; that is, when the Job or Job Schedule completes. If true, the Batch service does not delete the Pool automatically. It is up to the user to delete auto Pools created with this option.",
        SerializedName = @"keepAlive",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter AutoPoolSpecificationKeepAlive { get => _jobBody.AutoPoolSpecificationKeepAlive ?? default(global::System.Management.Automation.SwitchParameter); set => _jobBody.AutoPoolSpecificationKeepAlive = value; }

        /// <summary>The Pool specification for the auto Pool.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Pool specification for the auto Pool.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Pool specification for the auto Pool.",
        SerializedName = @"pool",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolSpecification) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchPoolSpecification AutoPoolSpecificationPool { get => _jobBody.AutoPoolSpecificationPool ?? null /* object */; set => _jobBody.AutoPoolSpecificationPool = value; }

        /// <summary>
        /// The minimum lifetime of created auto Pools, and how multiple Jobs on a schedule are assigned to Pools.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The minimum lifetime of created auto Pools, and how multiple Jobs on a schedule are assigned to Pools.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The minimum lifetime of created auto Pools, and how multiple Jobs on a schedule are assigned to Pools.",
        SerializedName = @"poolLifetimeOption",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("jobschedule", "job")]
        public string AutoPoolSpecificationPoolLifetimeOption { get => _jobBody.AutoPoolSpecificationPoolLifetimeOption ?? null; set => _jobBody.AutoPoolSpecificationPoolLifetimeOption = value; }

        /// <summary>The elevation level of the auto user. The default value is nonAdmin.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The elevation level of the auto user. The default value is nonAdmin.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The elevation level of the auto user. The default value is nonAdmin.",
        SerializedName = @"elevationLevel",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("nonadmin", "admin")]
        public string AutoUserElevationLevel { get => _jobBody.AutoUserElevationLevel ?? null; set => _jobBody.AutoUserElevationLevel = value; }

        /// <summary>
        /// The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified
        /// if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact
        /// other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should
        /// be accessible by StartTasks.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The scope for the auto user. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("task", "pool")]
        public string AutoUserScope { get => _jobBody.AutoUserScope ?? null; set => _jobBody.AutoUserScope = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>Accessor for cancellationTokenSource.</summary>
        public global::System.Threading.CancellationTokenSource CancellationTokenSource { get => _cancellationTokenSource ; set { _cancellationTokenSource = value; } }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Batch Client => Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.ClientAPI;

        /// <summary>Backing field for <see cref="ClientRequestId" /> property.</summary>
        private string _clientRequestId;

        /// <summary>
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The caller-generated request identity, in the form of a GUID with no decoration\nsuch as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The caller-generated request identity, in the form of a GUID with no decoration
        such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.",
        SerializedName = @"client-request-id",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Header)]
        public string ClientRequestId { get => this._clientRequestId; set => this._clientRequestId = value; }

        /// <summary>
        /// The list of common environment variable settings. These environment variables are set for all Tasks in the Job (including
        /// the Job Manager, Job Preparation and Job Release Tasks). Individual Tasks can override an environment setting specified
        /// here by specifying the same setting name with a different value.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of common environment variable settings. These environment variables are set for all Tasks in the Job (including the Job Manager, Job Preparation and Job Release Tasks). Individual Tasks can override an environment setting specified here by specifying the same setting name with a different value.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of common environment variable settings. These environment variables are set for all Tasks in the Job (including the Job Manager, Job Preparation and Job Release Tasks). Individual Tasks can override an environment setting specified here by specifying the same setting name with a different value.",
        SerializedName = @"commonEnvironmentSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting[] CommonEnvironmentSetting { get => _jobBody.CommonEnvironmentSetting?.ToArray() ?? null /* fixedArrayOf */; set => _jobBody.CommonEnvironmentSetting = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>(value) : null); }

        /// <summary>
        /// The maximum number of times each Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note
        /// that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry
        /// up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and
        /// 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1,
        /// the Batch service retries Tasks without limit. The default value is 0 (no retries).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The maximum number of times each Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1, the Batch service retries Tasks without limit. The default value is 0 (no retries).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum number of times each Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1, the Batch service retries Tasks without limit. The default value is 0 (no retries).",
        SerializedName = @"maxTaskRetryCount",
        PossibleTypes = new [] { typeof(int) })]
        public int ConstraintMaxTaskRetryCount { get => _jobBody.ConstraintMaxTaskRetryCount ?? default(int); set => _jobBody.ConstraintMaxTaskRetryCount = value; }

        /// <summary>
        /// The maximum elapsed time that the Job may run, measured from the time the Job is created. If the Job does not complete
        /// within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination
        /// reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may
        /// run.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The maximum elapsed time that the Job may run, measured from the time the Job is created. If the Job does not complete within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may run.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum elapsed time that the Job may run, measured from the time the Job is created. If the Job does not complete within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may run.",
        SerializedName = @"maxWallClockTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        public global::System.TimeSpan ConstraintMaxWallClockTime { get => _jobBody.ConstraintMaxWallClockTime ?? default(global::System.TimeSpan); set => _jobBody.ConstraintMaxWallClockTime = value; }

        /// <summary>
        /// The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire
        /// temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if
        /// this array is set as empty.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if this array is set as empty.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The paths you want to mounted to container task. If this array is null or be not present, container task will mount entire temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won't' mount any data paths into container if this array is set as empty.",
        SerializedName = @"containerHostBatchBindMounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry[] ContainerSettingContainerHostBatchBindMount { get => _jobBody.ContainerSettingContainerHostBatchBindMount?.ToArray() ?? null /* fixedArrayOf */; set => _jobBody.ContainerSettingContainerHostBatchBindMount = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IContainerHostBatchBindMountEntry>(value) : null); }

        /// <summary>
        /// Additional options to the container create command. These additional options are supplied as arguments to the "docker
        /// create" command, in addition to those controlled by the Batch Service.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Additional options to the container create command. These additional options are supplied as arguments to the \"docker create\" command, in addition to those controlled by the Batch Service.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Additional options to the container create command. These additional options are supplied as arguments to the ""docker create"" command, in addition to those controlled by the Batch Service.",
        SerializedName = @"containerRunOptions",
        PossibleTypes = new [] { typeof(string) })]
        public string ContainerSettingContainerRunOption { get => _jobBody.ContainerSettingContainerRunOption ?? null; set => _jobBody.ContainerSettingContainerRunOption = value; }

        /// <summary>
        /// The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified
        /// to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a default.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified to \"docker pull\". If no tag is provided as part of the Image name, the tag \":latest\" is used as a default.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Image to use to create the container in which the Task will run. This is the full Image reference, as would be specified to ""docker pull"". If no tag is provided as part of the Image name, the tag "":latest"" is used as a default.",
        SerializedName = @"imageName",
        PossibleTypes = new [] { typeof(string) })]
        public string ContainerSettingImageName { get => _jobBody.ContainerSettingImageName ?? null; set => _jobBody.ContainerSettingImageName = value; }

        /// <summary>
        /// The location of the container Task working directory. The default is 'taskWorkingDirectory'.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The location of the container Task working directory. The default is 'taskWorkingDirectory'.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The location of the container Task working directory. The default is 'taskWorkingDirectory'.",
        SerializedName = @"workingDirectory",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("taskWorkingDirectory", "containerImageDefault")]
        public string ContainerSettingWorkingDirectory { get => _jobBody.ContainerSettingWorkingDirectory ?? null; set => _jobBody.ContainerSettingWorkingDirectory = value; }

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>
        /// The display name for the Job. The display name need not be unique and can contain any Unicode characters up to a maximum
        /// length of 1024.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The display name for the Job. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The display name for the Job. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        public string DisplayName { get => _jobBody.DisplayName ?? null; set => _jobBody.DisplayName = value; }

        /// <summary>Backing field for <see cref="Endpoint" /> property.</summary>
        private string _endpoint;

        /// <summary>
        /// Batch account endpoint (for example: https://batchaccount.eastus2.batch.azure.com).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Batch account endpoint (for example: https://batchaccount.eastus2.batch.azure.com).")]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Batch account endpoint (for example: https://batchaccount.eastus2.batch.azure.com).",
        SerializedName = @"endpoint",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Uri)]
        public string Endpoint { get => this._endpoint; set => this._endpoint = value; }

        /// <summary>Accessor for extensibleParameters.</summary>
        public global::System.Collections.Generic.IDictionary<global::System.String,global::System.Object> ExtensibleParameters { get => _extensibleParameters ; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>
        /// A string that uniquely identifies the Job within the Account. The ID can contain any combination of alphanumeric characters
        /// including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive
        /// (that is, you may not have two IDs within an Account that differ only by case).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "A string that uniquely identifies the Job within the Account. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"A string that uniquely identifies the Job within the Account. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        public string Id { get => _jobBody.Id ?? null; set => _jobBody.Id = value; }

        /// <summary>The ARM resource id of the user assigned identity.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The ARM resource id of the user assigned identity.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ARM resource id of the user assigned identity.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        public string IdentityReferenceResourceId { get => _jobBody.IdentityReferenceResourceId ?? null; set => _jobBody.IdentityReferenceResourceId = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// Details of a Job Manager Task to be launched when the Job is started. If the Job does not specify a Job Manager Task,
        /// the user must explicitly add Tasks to the Job. If the Job does specify a Job Manager Task, the Batch service creates the
        /// Job Manager Task when the Job is created, and will try to schedule the Job Manager Task before scheduling other Tasks
        /// in the Job. The Job Manager Task's typical purpose is to control and/or monitor Job execution, for example by deciding
        /// what additional Tasks to run, determining when the work is complete, etc. (However, a Job Manager Task is not restricted
        /// to these activities - it is a fully-fledged Task in the system and perform whatever actions are required for the Job.)
        /// For example, a Job Manager Task might download a file specified as a parameter, analyze the contents of that file and
        /// submit additional Tasks based on those contents.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Details of a Job Manager Task to be launched when the Job is started. If the Job does not specify a Job Manager Task, the user must explicitly add Tasks to the Job. If the Job does specify a Job Manager Task, the Batch service creates the Job Manager Task when the Job is created, and will try to schedule the Job Manager Task before scheduling other Tasks in the Job. The Job Manager Task's typical purpose is to control and/or monitor Job execution, for example by deciding what additional Tasks to run, determining when the work is complete, etc. (However, a Job Manager Task is not restricted to these activities - it is a fully-fledged Task in the system and perform whatever actions are required for the Job.) For example, a Job Manager Task might download a file specified as a parameter, analyze the contents of that file and submit additional Tasks based on those contents.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Details of a Job Manager Task to be launched when the Job is started. If the Job does not specify a Job Manager Task, the user must explicitly add Tasks to the Job. If the Job does specify a Job Manager Task, the Batch service creates the Job Manager Task when the Job is created, and will try to schedule the Job Manager Task before scheduling other Tasks in the Job. The Job Manager Task's typical purpose is to control and/or monitor Job execution, for example by deciding what additional Tasks to run, determining when the work is complete, etc. (However, a Job Manager Task is not restricted to these activities - it is a fully-fledged Task in the system and perform whatever actions are required for the Job.) For example, a Job Manager Task might download a file specified as a parameter, analyze the contents of that file and submit additional Tasks based on those contents.",
        SerializedName = @"jobManagerTask",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTask) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobManagerTask JobManagerTask { get => _jobBody.JobManagerTask ?? null /* object */; set => _jobBody.JobManagerTask = value; }

        /// <summary>
        /// The Job Preparation Task. If a Job has a Job Preparation Task, the Batch service will run the Job Preparation Task on
        /// a Node before starting any Tasks of that Job on that Compute Node.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Job Preparation Task. If a Job has a Job Preparation Task, the Batch service will run the Job Preparation Task on a Node before starting any Tasks of that Job on that Compute Node.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Job Preparation Task. If a Job has a Job Preparation Task, the Batch service will run the Job Preparation Task on a Node before starting any Tasks of that Job on that Compute Node.",
        SerializedName = @"jobPreparationTask",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTask) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchJobPreparationTask JobPreparationTask { get => _jobBody.JobPreparationTask ?? null /* object */; set => _jobBody.JobPreparationTask = value; }

        /// <summary>
        /// The command line of the Job Release Task. The command line does not run under a shell, and therefore cannot take advantage
        /// of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke
        /// the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
        /// the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use
        /// the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The command line of the Job Release Task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The command line of the Job Release Task. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using ""cmd /c MyCommand"" in Windows or ""/bin/sh -c MyCommand"" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).",
        SerializedName = @"commandLine",
        PossibleTypes = new [] { typeof(string) })]
        public string JobReleaseTaskCommandLine { get => _jobBody.JobReleaseTaskCommandLine ?? null; set => _jobBody.JobReleaseTaskCommandLine = value; }

        /// <summary>A list of environment variable settings for the Job Release Task.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A list of environment variable settings for the Job Release Task.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of environment variable settings for the Job Release Task.",
        SerializedName = @"environmentSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting[] JobReleaseTaskEnvironmentSetting { get => _jobBody.JobReleaseTaskEnvironmentSetting?.ToArray() ?? null /* fixedArrayOf */; set => _jobBody.JobReleaseTaskEnvironmentSetting = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IEnvironmentSetting>(value) : null); }

        /// <summary>
        /// A string that uniquely identifies the Job Release Task within the Job. The ID can contain any combination of alphanumeric
        /// characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property,
        /// the Batch service assigns a default value of 'jobrelease'. No other Task in the Job can have the same ID as the Job Release
        /// Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask;
        /// if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A string that uniquely identifies the Job Release Task within the Job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobrelease'. No other Task in the Job can have the same ID as the Job Release Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A string that uniquely identifies the Job Release Task within the Job. The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobrelease'. No other Task in the Job can have the same ID as the Job Release Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        public string JobReleaseTaskId { get => _jobBody.JobReleaseTaskId ?? null; set => _jobBody.JobReleaseTaskId = value; }

        /// <summary>
        /// The maximum elapsed time that the Job Release Task may run on a given Compute Node, measured from the time the Task starts.
        /// If the Task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes.
        /// You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are
        /// calling the REST API directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The maximum elapsed time that the Job Release Task may run on a given Compute Node, measured from the time the Task starts. If the Task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes. You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum elapsed time that the Job Release Task may run on a given Compute Node, measured from the time the Task starts. If the Task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes. You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
        SerializedName = @"maxWallClockTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        public global::System.TimeSpan JobReleaseTaskMaxWallClockTime { get => _jobBody.JobReleaseTaskMaxWallClockTime ?? default(global::System.TimeSpan); set => _jobBody.JobReleaseTaskMaxWallClockTime = value; }

        /// <summary>
        /// A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum
        /// size for the list of resource files. When the max size is exceeded, the request will fail and the response error code
        /// will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
        /// using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's
        /// working directory.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's working directory.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's working directory.",
        SerializedName = @"resourceFiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile[] JobReleaseTaskResourceFile { get => _jobBody.JobReleaseTaskResourceFile?.ToArray() ?? null /* fixedArrayOf */; set => _jobBody.JobReleaseTaskResourceFile = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IResourceFile>(value) : null); }

        /// <summary>
        /// The minimum time to retain the Task directory for the Job Release Task on the Compute Node. After this time, the Batch
        /// service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained
        /// for 7 days unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The minimum time to retain the Task directory for the Job Release Task on the Compute Node. After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The minimum time to retain the Task directory for the Job Release Task on the Compute Node. After this time, the Batch service may delete the Task directory and all its contents. The default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted.",
        SerializedName = @"retentionTime",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        public global::System.TimeSpan JobReleaseTaskRetentionTime { get => _jobBody.JobReleaseTaskRetentionTime ?? default(global::System.TimeSpan); set => _jobBody.JobReleaseTaskRetentionTime = value; }

        /// <summary>
        /// The maximum number of tasks that can be executed in parallel for the job. The value of maxParallelTasks must be -1 or
        /// greater than 0 if specified. If not specified, the default value is -1, which means there's no limit to the number of
        /// tasks that can be run at once. You can update a job's maxParallelTasks after it has been created using the update job
        /// API.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The maximum number of tasks that can be executed in parallel for the job. The value of maxParallelTasks must be -1 or greater than 0 if specified. If not specified, the default value is -1, which means there's no limit to the number of tasks that can be run at once. You can update a job's maxParallelTasks after it has been created using the update job API.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum number of tasks that can be executed in parallel for the job. The value of maxParallelTasks must be -1 or greater than 0 if specified. If not specified, the default value is -1, which means there's no limit to the number of tasks that can be run at once. You can update a job's maxParallelTasks after it has been created using the update job API.",
        SerializedName = @"maxParallelTasks",
        PossibleTypes = new [] { typeof(int) })]
        public int MaxParallelTask { get => _jobBody.MaxParallelTask ?? default(int); set => _jobBody.MaxParallelTask = value; }

        /// <summary>
        /// A list of name-value pairs associated with the Job as metadata. The Batch service does not assign any meaning to metadata;
        /// it is solely for the use of user code.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A list of name-value pairs associated with the Job as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of name-value pairs associated with the Job as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code.",
        SerializedName = @"metadata",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem[] Metadata { get => _jobBody.Metadata?.ToArray() ?? null /* fixedArrayOf */; set => _jobBody.Metadata = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchMetadataItem>(value) : null); }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>
        /// Whether to withdraw Compute Nodes from the virtual network to DNC when the job is terminated or deleted. If true, nodes
        /// will remain joined to the virtual network to DNC. If false, nodes will automatically withdraw when the job ends. Defaults
        /// to false.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether to withdraw Compute Nodes from the virtual network to DNC when the job is terminated or deleted. If true, nodes will remain joined to the virtual network to DNC. If false, nodes will automatically withdraw when the job ends. Defaults to false.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to withdraw Compute Nodes from the virtual network to DNC when the job is terminated or deleted. If true, nodes will remain joined to the virtual network to DNC. If false, nodes will automatically withdraw when the job ends. Defaults to false.",
        SerializedName = @"skipWithdrawFromVNet",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter NetworkConfigurationSkipWithdrawFromVnet { get => _jobBody.NetworkConfigurationSkipWithdrawFromVnet ?? default(global::System.Management.Automation.SwitchParameter); set => _jobBody.NetworkConfigurationSkipWithdrawFromVnet = value; }

        /// <summary>
        /// The ARM resource identifier of the virtual network subnet which Compute Nodes running Tasks from the Job will join for
        /// the duration of the Task. The virtual network must be in the same region and subscription as the Azure Batch Account.
        /// The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes which will run Tasks
        /// from the Job. This can be up to the number of Compute Nodes in the Pool. The 'MicrosoftAzureBatch' service principal must
        /// have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet so that Azure
        /// Batch service can schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated
        /// Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch
        /// service will set the state of the Compute Nodes to unusable. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
        /// If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled
        /// for inbound communication from the Azure Batch service. For Pools created with a Virtual Machine configuration, enable
        /// ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. Port 443 is also required to be open for
        /// outbound connections for communications to Azure Storage. For more details see: https://learn.microsoft.com/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The ARM resource identifier of the virtual network subnet which Compute Nodes running Tasks from the Job will join for the duration of the Task. The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes which will run Tasks from the Job. This can be up to the number of Compute Nodes in the Pool. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet so that Azure Batch service can schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication from the Azure Batch service. For Pools created with a Virtual Machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. Port 443 is also required to be open for outbound connections for communications to Azure Storage. For more details see: https://learn.microsoft.com/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ARM resource identifier of the virtual network subnet which Compute Nodes running Tasks from the Job will join for the duration of the Task. The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes which will run Tasks from the Job. This can be up to the number of Compute Nodes in the Pool. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet so that Azure Batch service can schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication from the Azure Batch service. For Pools created with a Virtual Machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. Port 443 is also required to be open for outbound connections for communications to Azure Storage. For more details see: https://learn.microsoft.com/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.",
        SerializedName = @"subnetId",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkConfigurationSubnetId { get => _jobBody.NetworkConfigurationSubnetId ?? null; set => _jobBody.NetworkConfigurationSubnetId = value; }

        /// <summary>Backing field for <see cref="Ocpdate" /> property.</summary>
        private string _ocpdate;

        /// <summary>
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The time the request was issued. Client libraries typically set this to the\ncurrent system clock time; set it explicitly if you are calling the REST API\ndirectly.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time the request was issued. Client libraries typically set this to the
        current system clock time; set it explicitly if you are calling the REST API
        directly.",
        SerializedName = @"ocp-date",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Header)]
        public string Ocpdate { get => this._ocpdate; set => this._ocpdate = value; }

        /// <summary>
        /// When specified, forces the cmdlet return a 'bool' given that there isn't a return type by default.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Returns true when the command succeeds")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter PassThru { get; set; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>
        /// The ID of an existing Pool. All the Tasks of the Job will run on the specified Pool. You must ensure that the Pool referenced
        /// by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for
        /// the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it
        /// will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but
        /// not both.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The ID of an existing Pool. All the Tasks of the Job will run on the specified Pool. You must ensure that the Pool referenced by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but not both.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The ID of an existing Pool. All the Tasks of the Job will run on the specified Pool. You must ensure that the Pool referenced by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but not both.",
        SerializedName = @"poolId",
        PossibleTypes = new [] { typeof(string) })]
        public string PoolInfoPoolId { get => _jobBody.PoolInfoPoolId ?? null; set => _jobBody.PoolInfoPoolId = value; }

        /// <summary>
        /// The priority of the Job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being
        /// the highest priority. The default value is 0.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The priority of the Job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The priority of the Job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.",
        SerializedName = @"priority",
        PossibleTypes = new [] { typeof(int) })]
        public int Priority { get => _jobBody.Priority ?? default(int); set => _jobBody.Priority = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>The password to log into the registry server.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The password to log into the registry server.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The password to log into the registry server.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        public System.Security.SecureString RegistryPassword { get => _jobBody.RegistryPassword ?? null; set => _jobBody.RegistryPassword = value; }

        /// <summary>The registry URL. If omitted, the default is "docker.io".</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The registry URL. If omitted, the default is \"docker.io\".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The registry URL. If omitted, the default is ""docker.io"".",
        SerializedName = @"registryServer",
        PossibleTypes = new [] { typeof(string) })]
        public string RegistryServer { get => _jobBody.RegistryServer ?? null; set => _jobBody.RegistryServer = value; }

        /// <summary>The user name to log into the registry server.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The user name to log into the registry server.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The user name to log into the registry server.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        public string RegistryUsername { get => _jobBody.RegistryUsername ?? null; set => _jobBody.RegistryUsername = value; }

        /// <summary>Backing field for <see cref="ReturnClientRequestId" /> property.</summary>
        private global::System.Management.Automation.SwitchParameter _returnClientRequestId;

        /// <summary>Whether the server should return the client-request-id in the response.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether the server should return the client-request-id in the response.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether the server should return the client-request-id in the response.",
        SerializedName = @"return-client-request-id",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Header)]
        public global::System.Management.Automation.SwitchParameter ReturnClientRequestId { get => this._returnClientRequestId; set => this._returnClientRequestId = value; }

        /// <summary>
        /// The action the Batch service should take when any Task in the Job fails. A Task is considered to have failed if has a
        /// failureInfo. A failureInfo is set if the Task completes with a non-zero exit code after exhausting its retry count, or
        /// if there was an error starting the Task, for example due to a resource file download error. The default is noaction.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The action the Batch service should take when any Task in the Job fails. A Task is considered to have failed if has a failureInfo. A failureInfo is set if the Task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the Task, for example due to a resource file download error. The default is noaction.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The action the Batch service should take when any Task in the Job fails. A Task is considered to have failed if has a failureInfo. A failureInfo is set if the Task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the Task, for example due to a resource file download error. The default is noaction.",
        SerializedName = @"onTaskFailure",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.PSArgumentCompleterAttribute("noaction", "performexitoptionsjobaction")]
        public string TaskFailureMode { get => _jobBody.TaskFailureMode ?? null; set => _jobBody.TaskFailureMode = value; }

        /// <summary>Backing field for <see cref="TimeOut" /> property.</summary>
        private int _timeOut;

        /// <summary>
        /// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
        /// is larger than 30, the default will be used instead.".
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.\".")]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead."".",
        SerializedName = @"timeOut",
        PossibleTypes = new [] { typeof(int) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Query)]
        public int TimeOut { get => this._timeOut; set => this._timeOut = value; }

        /// <summary>
        /// The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive;
        /// you must specify one but not both.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify one but not both.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the user identity under which the Task is run. The userName and autoUser properties are mutually exclusive; you must specify one but not both.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        public string UserIdentityUsername { get => _jobBody.UserIdentityUsername ?? null; set => _jobBody.UserIdentityUsername = value; }

        /// <summary>
        /// Whether Tasks in the Job can define dependencies on each other. The default is false.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether Tasks in the Job can define dependencies on each other. The default is false.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Batch.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Batch.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether Tasks in the Job can define dependencies on each other. The default is false.",
        SerializedName = @"usesTaskDependencies",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter UsesTaskDependency { get => _jobBody.UsesTaskDependency ?? default(global::System.Management.Automation.SwitchParameter); set => _jobBody.UsesTaskDependency = value; }

        /// <summary>
        /// <c>overrideOnCreated</c> will be called before the regular onCreated has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="headers">the header result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IJobsCreateJobCreatedResponseHeaders"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onCreated method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IJobsCreateJobCreatedResponseHeaders> headers, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError">Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            if (1 ==_responseSize)
            {
                // Flush buffer
                WriteObject(_firstResponse);
            }
            var telemetryInfo = Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.GetTelemetryInfo?.Invoke(__correlationId);
            if (telemetryInfo != null)
            {
                telemetryInfo.TryGetValue("ShowSecretsWarning", out var showSecretsWarning);
                telemetryInfo.TryGetValue("SanitizedProperties", out var sanitizedProperties);
                telemetryInfo.TryGetValue("InvocationName", out var invocationName);
                if (showSecretsWarning == "true")
                {
                    if (string.IsNullOrEmpty(sanitizedProperties))
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing secrets. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                    else
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing the following secrets: {sanitizedProperties}. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                }
            }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.Progress:
                    {
                        var data = messageData();
                        int progress = (int)data.Value;
                        string activityMessage, statusDescription;
                        global::System.Management.Automation.ProgressRecordType recordType;
                        if (progress < 100)
                        {
                            activityMessage = "In progress";
                            statusDescription = "Checking operation status";
                            recordType = System.Management.Automation.ProgressRecordType.Processing;
                        }
                        else
                        {
                            activityMessage = "Completed";
                            statusDescription = "Completed";
                            recordType = System.Management.Automation.ProgressRecordType.Completed;
                        }
                        WriteProgress(new global::System.Management.Automation.ProgressRecord(1, activityMessage, statusDescription)
                        {
                            PercentComplete = progress,
                        RecordType = recordType
                        });
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.Signal(id, token, messageData, (i, t, m) => ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(i, t, () => Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.EventDataConverter.ConvertFrom(m()) as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.EventData), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewAzJob_CreateExpanded" /> cmdlet class.
        /// </summary>
        public NewAzJob_CreateExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'JobsCreateJob' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName, this.ExtensibleParameters);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.JobsCreateJob(this.InvocationInformation.BoundParameters.ContainsKey("ClientRequestId") ? ClientRequestId : null, this.InvocationInformation.BoundParameters.ContainsKey("ReturnClientRequestId") ? ReturnClientRequestId : default(global::System.Management.Automation.SwitchParameter?), this.InvocationInformation.BoundParameters.ContainsKey("Ocpdate") ? Ocpdate : null, this.InvocationInformation.BoundParameters.ContainsKey("TimeOut") ? TimeOut : default(int?), Endpoint, _jobBody, onCreated, onDefault, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { Endpoint=Endpoint,TimeOut=this.InvocationInformation.BoundParameters.ContainsKey("TimeOut") ? TimeOut : default(int?),ClientRequestId=this.InvocationInformation.BoundParameters.ContainsKey("ClientRequestId") ? ClientRequestId : null,ReturnClientRequestId=this.InvocationInformation.BoundParameters.ContainsKey("ReturnClientRequestId") ? ReturnClientRequestId : default(global::System.Management.Automation.SwitchParameter?),Ocpdate=this.InvocationInformation.BoundParameters.ContainsKey("Ocpdate") ? Ocpdate : null})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <param name="sendToPipeline"></param>
        new protected void WriteObject(object sendToPipeline)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline);
        }

        /// <param name="sendToPipeline"></param>
        /// <param name="enumerateCollection"></param>
        new protected void WriteObject(object sendToPipeline, bool enumerateCollection)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Batch.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline, enumerateCollection);
        }

        /// <summary>a delegate that is called when the remote service returns 201 (Created).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="headers">the header result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IJobsCreateJobCreatedResponseHeaders"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IJobsCreateJobCreatedResponseHeaders> headers)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnCreated(responseMessage, headers, ref _returnNow);
                // if overrideOnCreated has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onCreated - response for 201 /
                if (true == MyInvocation?.BoundParameters?.ContainsKey("PassThru"))
                {
                    WriteObject(true);
                }
            }
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError">Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.MessageLang;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.Batch.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.Batch.Models.IBatchError>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }
    }
}