// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ProviderHub.Support
{

    /// <summary>Argument completer implementation for SubscriptionTransitioningState.</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.ProviderHub.Support.SubscriptionTransitioningStateTypeConverter))]
    public partial struct SubscriptionTransitioningState :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Registered".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("Registered", "Registered", global::System.Management.Automation.CompletionResultType.ParameterValue, "Registered");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Unregistered".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("Unregistered", "Unregistered", global::System.Management.Automation.CompletionResultType.ParameterValue, "Unregistered");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Warned".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("Warned", "Warned", global::System.Management.Automation.CompletionResultType.ParameterValue, "Warned");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Suspended".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("Suspended", "Suspended", global::System.Management.Automation.CompletionResultType.ParameterValue, "Suspended");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Deleted".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("Deleted", "Deleted", global::System.Management.Automation.CompletionResultType.ParameterValue, "Deleted");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WarnedToRegistered".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("WarnedToRegistered", "WarnedToRegistered", global::System.Management.Automation.CompletionResultType.ParameterValue, "WarnedToRegistered");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WarnedToSuspended".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("WarnedToSuspended", "WarnedToSuspended", global::System.Management.Automation.CompletionResultType.ParameterValue, "WarnedToSuspended");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WarnedToDeleted".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("WarnedToDeleted", "WarnedToDeleted", global::System.Management.Automation.CompletionResultType.ParameterValue, "WarnedToDeleted");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WarnedToUnregistered".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("WarnedToUnregistered", "WarnedToUnregistered", global::System.Management.Automation.CompletionResultType.ParameterValue, "WarnedToUnregistered");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SuspendedToRegistered".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("SuspendedToRegistered", "SuspendedToRegistered", global::System.Management.Automation.CompletionResultType.ParameterValue, "SuspendedToRegistered");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SuspendedToWarned".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("SuspendedToWarned", "SuspendedToWarned", global::System.Management.Automation.CompletionResultType.ParameterValue, "SuspendedToWarned");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SuspendedToDeleted".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("SuspendedToDeleted", "SuspendedToDeleted", global::System.Management.Automation.CompletionResultType.ParameterValue, "SuspendedToDeleted");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SuspendedToUnregistered".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("SuspendedToUnregistered", "SuspendedToUnregistered", global::System.Management.Automation.CompletionResultType.ParameterValue, "SuspendedToUnregistered");
            }
        }
    }
}