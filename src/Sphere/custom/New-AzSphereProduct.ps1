
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a Product.
'.default' and '.unassigned' are system defined values and cannot be used for product name.
.Description
Create a Product.
'.default' and '.unassigned' are system defined values and cannot be used for product name.
.Example
New-AzSphereProduct -CatalogName newCatalog -Name MyProd815 -ResourceGroupName ps1-test -Description "Contoso DW100 models"

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Sphere.Models.ISphereIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Sphere.Models.IProduct
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

CATALOGINPUTOBJECT <ISphereIdentity>: Identity Parameter
  [CatalogName <String>]: Name of catalog
  [DeploymentName <String>]: Deployment name. Use .default for deployment creation and to get the current deployment for the associated device group.
  [DeviceGroupName <String>]: Name of device group.
  [DeviceName <String>]: Device name
  [Id <String>]: Resource identity path
  [ImageName <String>]: Image name. Use .default for image creation.
  [ProductName <String>]: Name of product.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SerialNumber <String>]: Serial number of the certificate. Use '.default' to get current active certificate.
  [SubscriptionId <String>]: The ID of the target subscription.

INPUTOBJECT <ISphereIdentity>: Identity Parameter
  [CatalogName <String>]: Name of catalog
  [DeploymentName <String>]: Deployment name. Use .default for deployment creation and to get the current deployment for the associated device group.
  [DeviceGroupName <String>]: Name of device group.
  [DeviceName <String>]: Device name
  [Id <String>]: Resource identity path
  [ImageName <String>]: Image name. Use .default for image creation.
  [ProductName <String>]: Name of product.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SerialNumber <String>]: Serial number of the certificate. Use '.default' to get current active certificate.
  [SubscriptionId <String>]: The ID of the target subscription.
.Link
https://learn.microsoft.com/powershell/module/az.sphere/new-azsphereproduct
#>
function New-AzSphereProduct {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Sphere.Models.IProduct])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Path')]
    [System.String]
    # Name of catalog
    ${CatalogName},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Parameter(ParameterSetName='CreateViaIdentityCatalogExpanded', Mandatory)]
    [Alias('ProductName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Path')]
    [System.String]
    # Name of product.
    ${Name},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(ParameterSetName='CreateViaIdentityCatalogExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Models.ISphereIdentity]
    # Identity Parameter
    # To construct, see NOTES section for CATALOGINPUTOBJECT properties and create a hash table.
    ${CatalogInputObject},

    [Parameter(ParameterSetName='CreateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Models.ISphereIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Body')]
    [System.String]
    # Description of the product
    ${Description},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        $mapping = @{
            CreateExpanded = 'Az.Sphere.private\New-AzSphereProduct_CreateExpanded';
            CreateViaIdentityCatalogExpanded = 'Az.Sphere.private\New-AzSphereProduct_CreateViaIdentityCatalogExpanded';
            CreateViaIdentityExpanded = 'Az.Sphere.private\New-AzSphereProduct_CreateViaIdentityExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId') ) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }

        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {

        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {

        throw
    }

}
end {
    try {
        $steppablePipeline.End()

    } catch {

        throw
    }
} 
}
