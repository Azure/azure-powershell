
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Counts devices in device group.
'.default' and '.unassigned' are system defined values and cannot be used for product or device group name.
.Description
Counts devices in device group.
'.default' and '.unassigned' are system defined values and cannot be used for product or device group name.
.Example
Invoke-AzSphereCountDeviceGroupDevice -CatalogName test2024 -ResourceGroupName joyer-test -DeviceGroupName testdevicegroup -ProductName product2024

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Sphere.Models.ISphereIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Sphere.Models.ICountDevicesResponse
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

CATALOGINPUTOBJECT <ISphereIdentity>: Identity Parameter
  [CatalogName <String>]: Name of catalog
  [DeploymentName <String>]: Deployment name. Use .default for deployment creation and to get the current deployment for the associated device group.
  [DeviceGroupName <String>]: Name of device group.
  [DeviceName <String>]: Device name
  [Id <String>]: Resource identity path
  [ImageName <String>]: Image name. Use an image GUID for GA versions of the API.
  [ProductName <String>]: Name of product.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SerialNumber <String>]: Serial number of the certificate. Use '.default' to get current active certificate.
  [SubscriptionId <String>]: The ID of the target subscription.

INPUTOBJECT <ISphereIdentity>: Identity Parameter
  [CatalogName <String>]: Name of catalog
  [DeploymentName <String>]: Deployment name. Use .default for deployment creation and to get the current deployment for the associated device group.
  [DeviceGroupName <String>]: Name of device group.
  [DeviceName <String>]: Device name
  [Id <String>]: Resource identity path
  [ImageName <String>]: Image name. Use an image GUID for GA versions of the API.
  [ProductName <String>]: Name of product.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SerialNumber <String>]: Serial number of the certificate. Use '.default' to get current active certificate.
  [SubscriptionId <String>]: The ID of the target subscription.

PRODUCTINPUTOBJECT <ISphereIdentity>: Identity Parameter
  [CatalogName <String>]: Name of catalog
  [DeploymentName <String>]: Deployment name. Use .default for deployment creation and to get the current deployment for the associated device group.
  [DeviceGroupName <String>]: Name of device group.
  [DeviceName <String>]: Device name
  [Id <String>]: Resource identity path
  [ImageName <String>]: Image name. Use an image GUID for GA versions of the API.
  [ProductName <String>]: Name of product.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SerialNumber <String>]: Serial number of the certificate. Use '.default' to get current active certificate.
  [SubscriptionId <String>]: The ID of the target subscription.
.Link
https://learn.microsoft.com/powershell/module/az.sphere/invoke-azspherecountdevicegroupdevice
#>
function Invoke-AzSphereCountDeviceGroupDevice {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Sphere.Models.ICountDevicesResponse])]
[CmdletBinding(DefaultParameterSetName='CountDevice', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='CountDevice', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Path')]
    [System.String]
    # Name of catalog
    ${CatalogName},

    [Parameter(ParameterSetName='CountDevice', Mandatory)]
    [Parameter(ParameterSetName='CountDeviceViaIdentityCatalog', Mandatory)]
    [Parameter(ParameterSetName='CountDeviceViaIdentityProduct', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Path')]
    [System.String]
    # Name of device group.
    ${DeviceGroupName},

    [Parameter(ParameterSetName='CountDevice', Mandatory)]
    [Parameter(ParameterSetName='CountDeviceViaIdentityCatalog', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Path')]
    [System.String]
    # Name of product.
    ${ProductName},

    [Parameter(ParameterSetName='CountDevice', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='CountDevice')]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(ParameterSetName='CountDeviceViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Models.ISphereIdentity]
    # Identity Parameter
    ${InputObject},

    [Parameter(ParameterSetName='CountDeviceViaIdentityCatalog', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Models.ISphereIdentity]
    # Identity Parameter
    ${CatalogInputObject},

    [Parameter(ParameterSetName='CountDeviceViaIdentityProduct', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Models.ISphereIdentity]
    # Identity Parameter
    ${ProductInputObject},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Sphere.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CountDevice = 'Az.Sphere.private\Invoke-AzSphereCountDeviceGroupDevice_CountDevice';
            CountDeviceViaIdentity = 'Az.Sphere.private\Invoke-AzSphereCountDeviceGroupDevice_CountDeviceViaIdentity';
            CountDeviceViaIdentityCatalog = 'Az.Sphere.private\Invoke-AzSphereCountDeviceGroupDevice_CountDeviceViaIdentityCatalog';
            CountDeviceViaIdentityProduct = 'Az.Sphere.private\Invoke-AzSphereCountDeviceGroupDevice_CountDeviceViaIdentityProduct';
        }
        if (('CountDevice') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId') ) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.Sphere.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.Sphere.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Sphere.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
