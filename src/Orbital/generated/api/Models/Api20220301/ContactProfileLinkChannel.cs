// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Orbital.Models.Api20220301
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Orbital.Runtime.Extensions;

    /// <summary>Contact Profile Link Channel.</summary>
    public partial class ContactProfileLinkChannel :
        Microsoft.Azure.PowerShell.Cmdlets.Orbital.Models.Api20220301.IContactProfileLinkChannel,
        Microsoft.Azure.PowerShell.Cmdlets.Orbital.Models.Api20220301.IContactProfileLinkChannelInternal
    {

        /// <summary>Backing field for <see cref="BandwidthMHz" /> property.</summary>
        private float _bandwidthMHz;

        /// <summary>Bandwidth in MHz.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Origin(Microsoft.Azure.PowerShell.Cmdlets.Orbital.PropertyOrigin.Owned)]
        public float BandwidthMHz { get => this._bandwidthMHz; set => this._bandwidthMHz = value; }

        /// <summary>Backing field for <see cref="CenterFrequencyMHz" /> property.</summary>
        private float _centerFrequencyMHz;

        /// <summary>Center Frequency in MHz.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Origin(Microsoft.Azure.PowerShell.Cmdlets.Orbital.PropertyOrigin.Owned)]
        public float CenterFrequencyMHz { get => this._centerFrequencyMHz; set => this._centerFrequencyMHz = value; }

        /// <summary>Backing field for <see cref="DecodingConfiguration" /> property.</summary>
        private string _decodingConfiguration;

        /// <summary>Currently unused.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Origin(Microsoft.Azure.PowerShell.Cmdlets.Orbital.PropertyOrigin.Owned)]
        public string DecodingConfiguration { get => this._decodingConfiguration; set => this._decodingConfiguration = value; }

        /// <summary>Backing field for <see cref="DemodulationConfiguration" /> property.</summary>
        private string _demodulationConfiguration;

        /// <summary>
        /// Copy of the modem configuration file such as Kratos QRadio or Kratos QuantumRx. Only valid for downlink directions. If
        /// provided, the modem connects to the customer endpoint and sends demodulated data instead of a VITA.49 stream.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Origin(Microsoft.Azure.PowerShell.Cmdlets.Orbital.PropertyOrigin.Owned)]
        public string DemodulationConfiguration { get => this._demodulationConfiguration; set => this._demodulationConfiguration = value; }

        /// <summary>Backing field for <see cref="EncodingConfiguration" /> property.</summary>
        private string _encodingConfiguration;

        /// <summary>Currently unused.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Origin(Microsoft.Azure.PowerShell.Cmdlets.Orbital.PropertyOrigin.Owned)]
        public string EncodingConfiguration { get => this._encodingConfiguration; set => this._encodingConfiguration = value; }

        /// <summary>Backing field for <see cref="EndPoint" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Orbital.Models.Api20220301.IEndPoint _endPoint;

        /// <summary>Customer End point to store/retrieve data during a contact.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Origin(Microsoft.Azure.PowerShell.Cmdlets.Orbital.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Orbital.Models.Api20220301.IEndPoint EndPoint { get => (this._endPoint = this._endPoint ?? new Microsoft.Azure.PowerShell.Cmdlets.Orbital.Models.Api20220301.EndPoint()); set => this._endPoint = value; }

        /// <summary>IP Address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Origin(Microsoft.Azure.PowerShell.Cmdlets.Orbital.PropertyOrigin.Inlined)]
        public string EndPointIPAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.Orbital.Models.Api20220301.IEndPointInternal)EndPoint).IPAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.Orbital.Models.Api20220301.IEndPointInternal)EndPoint).IPAddress = value ; }

        /// <summary>Name of an end point.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Origin(Microsoft.Azure.PowerShell.Cmdlets.Orbital.PropertyOrigin.Inlined)]
        public string EndPointName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Orbital.Models.Api20220301.IEndPointInternal)EndPoint).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Orbital.Models.Api20220301.IEndPointInternal)EndPoint).Name = value ; }

        /// <summary>TCP port to listen on to receive data.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Origin(Microsoft.Azure.PowerShell.Cmdlets.Orbital.PropertyOrigin.Inlined)]
        public string EndPointPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.Orbital.Models.Api20220301.IEndPointInternal)EndPoint).Port; set => ((Microsoft.Azure.PowerShell.Cmdlets.Orbital.Models.Api20220301.IEndPointInternal)EndPoint).Port = value ; }

        /// <summary>Protocol either UDP or TCP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Origin(Microsoft.Azure.PowerShell.Cmdlets.Orbital.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Orbital.Support.Protocol EndPointProtocol { get => ((Microsoft.Azure.PowerShell.Cmdlets.Orbital.Models.Api20220301.IEndPointInternal)EndPoint).Protocol; set => ((Microsoft.Azure.PowerShell.Cmdlets.Orbital.Models.Api20220301.IEndPointInternal)EndPoint).Protocol = value ; }

        /// <summary>Internal Acessors for EndPoint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Orbital.Models.Api20220301.IEndPoint Microsoft.Azure.PowerShell.Cmdlets.Orbital.Models.Api20220301.IContactProfileLinkChannelInternal.EndPoint { get => (this._endPoint = this._endPoint ?? new Microsoft.Azure.PowerShell.Cmdlets.Orbital.Models.Api20220301.EndPoint()); set { {_endPoint = value;} } }

        /// <summary>Backing field for <see cref="ModulationConfiguration" /> property.</summary>
        private string _modulationConfiguration;

        /// <summary>
        /// Copy of the modem configuration file such as Kratos QRadio. Only valid for uplink directions. If provided, the modem connects
        /// to the customer endpoint and accepts commands from the customer instead of a VITA.49 stream.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Origin(Microsoft.Azure.PowerShell.Cmdlets.Orbital.PropertyOrigin.Owned)]
        public string ModulationConfiguration { get => this._modulationConfiguration; set => this._modulationConfiguration = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Channel name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Origin(Microsoft.Azure.PowerShell.Cmdlets.Orbital.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Creates an new <see cref="ContactProfileLinkChannel" /> instance.</summary>
        public ContactProfileLinkChannel()
        {

        }
    }
    /// Contact Profile Link Channel.
    public partial interface IContactProfileLinkChannel :
        Microsoft.Azure.PowerShell.Cmdlets.Orbital.Runtime.IJsonSerializable
    {
        /// <summary>Bandwidth in MHz.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Bandwidth in MHz.",
        SerializedName = @"bandwidthMHz",
        PossibleTypes = new [] { typeof(float) })]
        float BandwidthMHz { get; set; }
        /// <summary>Center Frequency in MHz.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Center Frequency in MHz.",
        SerializedName = @"centerFrequencyMHz",
        PossibleTypes = new [] { typeof(float) })]
        float CenterFrequencyMHz { get; set; }
        /// <summary>Currently unused.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Currently unused.",
        SerializedName = @"decodingConfiguration",
        PossibleTypes = new [] { typeof(string) })]
        string DecodingConfiguration { get; set; }
        /// <summary>
        /// Copy of the modem configuration file such as Kratos QRadio or Kratos QuantumRx. Only valid for downlink directions. If
        /// provided, the modem connects to the customer endpoint and sends demodulated data instead of a VITA.49 stream.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Copy of the modem configuration file such as Kratos QRadio or Kratos QuantumRx. Only valid for downlink directions. If provided, the modem connects to the customer endpoint and sends demodulated data instead of a VITA.49 stream.",
        SerializedName = @"demodulationConfiguration",
        PossibleTypes = new [] { typeof(string) })]
        string DemodulationConfiguration { get; set; }
        /// <summary>Currently unused.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Currently unused.",
        SerializedName = @"encodingConfiguration",
        PossibleTypes = new [] { typeof(string) })]
        string EncodingConfiguration { get; set; }
        /// <summary>IP Address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"IP Address.",
        SerializedName = @"ipAddress",
        PossibleTypes = new [] { typeof(string) })]
        string EndPointIPAddress { get; set; }
        /// <summary>Name of an end point.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Name of an end point.",
        SerializedName = @"endPointName",
        PossibleTypes = new [] { typeof(string) })]
        string EndPointName { get; set; }
        /// <summary>TCP port to listen on to receive data.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"TCP port to listen on to receive data.",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(string) })]
        string EndPointPort { get; set; }
        /// <summary>Protocol either UDP or TCP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Protocol either UDP or TCP.",
        SerializedName = @"protocol",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Orbital.Support.Protocol) })]
        Microsoft.Azure.PowerShell.Cmdlets.Orbital.Support.Protocol EndPointProtocol { get; set; }
        /// <summary>
        /// Copy of the modem configuration file such as Kratos QRadio. Only valid for uplink directions. If provided, the modem connects
        /// to the customer endpoint and accepts commands from the customer instead of a VITA.49 stream.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Copy of the modem configuration file such as Kratos QRadio. Only valid for uplink directions. If provided, the modem connects to the customer endpoint and accepts commands from the customer instead of a VITA.49 stream.",
        SerializedName = @"modulationConfiguration",
        PossibleTypes = new [] { typeof(string) })]
        string ModulationConfiguration { get; set; }
        /// <summary>Channel name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Orbital.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Channel name.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }

    }
    /// Contact Profile Link Channel.
    internal partial interface IContactProfileLinkChannelInternal

    {
        /// <summary>Bandwidth in MHz.</summary>
        float BandwidthMHz { get; set; }
        /// <summary>Center Frequency in MHz.</summary>
        float CenterFrequencyMHz { get; set; }
        /// <summary>Currently unused.</summary>
        string DecodingConfiguration { get; set; }
        /// <summary>
        /// Copy of the modem configuration file such as Kratos QRadio or Kratos QuantumRx. Only valid for downlink directions. If
        /// provided, the modem connects to the customer endpoint and sends demodulated data instead of a VITA.49 stream.
        /// </summary>
        string DemodulationConfiguration { get; set; }
        /// <summary>Currently unused.</summary>
        string EncodingConfiguration { get; set; }
        /// <summary>Customer End point to store/retrieve data during a contact.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Orbital.Models.Api20220301.IEndPoint EndPoint { get; set; }
        /// <summary>IP Address.</summary>
        string EndPointIPAddress { get; set; }
        /// <summary>Name of an end point.</summary>
        string EndPointName { get; set; }
        /// <summary>TCP port to listen on to receive data.</summary>
        string EndPointPort { get; set; }
        /// <summary>Protocol either UDP or TCP.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Orbital.Support.Protocol EndPointProtocol { get; set; }
        /// <summary>
        /// Copy of the modem configuration file such as Kratos QRadio. Only valid for uplink directions. If provided, the modem connects
        /// to the customer endpoint and accepts commands from the customer instead of a VITA.49 stream.
        /// </summary>
        string ModulationConfiguration { get; set; }
        /// <summary>Channel name.</summary>
        string Name { get; set; }

    }
}