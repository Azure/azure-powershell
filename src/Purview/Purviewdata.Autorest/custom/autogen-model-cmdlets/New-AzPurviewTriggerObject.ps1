
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for Trigger.
.Description
Create an in-memory object for Trigger.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.Trigger
.Link
https://learn.microsoft.com/powershell/module/Az.Purview/new-azpurviewtriggerobject
#>
function New-AzPurviewTriggerObject {
    [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ModelCmdletAttribute()]
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.Trigger')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter()]
        [System.DateTime]
        $IncrementalScanStartTime,
        [Parameter()]
        [int]
        $Interval,
        [Parameter()]
        [System.DateTime]
        $RecurrenceEndTime,
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.PSArgumentCompleterAttribute("Week", "Month")]
        [string]
        $RecurrenceFrequency,
        [Parameter()]
        [string]
        $RecurrenceInterval,
        [Parameter(HelpMessage="Dictionary of <any>.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.IRecurrenceScheduleAdditionalProperties]
        $RecurrenceScheduleAdditionalProperty,
        [Parameter()]
        [int[]]
        $RecurrenceScheduleHour,
        [Parameter()]
        [int[]]
        $RecurrenceScheduleMinute,
        [Parameter()]
        [int[]]
        $RecurrenceScheduleMonthDay,
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.IRecurrenceScheduleOccurrence[]]
        $RecurrenceScheduleMonthlyOccurrence,
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.PSArgumentCompleterAttribute("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")]
        [string[]]
        $RecurrenceScheduleWeekDay,
        [Parameter()]
        [System.DateTime]
        $RecurrenceStartTime,
        [Parameter()]
        [string]
        $RecurrenceTimeZone,
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.PSArgumentCompleterAttribute("Full", "Incremental")]
        [string]
        $ScanLevel
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.Trigger]::New()

        if ($PSBoundParameters.ContainsKey('IncrementalScanStartTime')) {
            $Object.IncrementalScanStartTime = $IncrementalScanStartTime
        }
        if ($PSBoundParameters.ContainsKey('Interval')) {
            $Object.Interval = $Interval
        }
        if ($PSBoundParameters.ContainsKey('RecurrenceEndTime')) {
            $Object.RecurrenceEndTime = $RecurrenceEndTime
        }
        if ($PSBoundParameters.ContainsKey('RecurrenceFrequency')) {
            $Object.RecurrenceFrequency = $RecurrenceFrequency
        }
        if ($PSBoundParameters.ContainsKey('RecurrenceInterval')) {
            $Object.RecurrenceInterval = $RecurrenceInterval
        }
        if ($PSBoundParameters.ContainsKey('RecurrenceScheduleAdditionalProperty')) {
            $Object.RecurrenceScheduleAdditionalProperty = $RecurrenceScheduleAdditionalProperty
        }
        if ($PSBoundParameters.ContainsKey('RecurrenceScheduleHour')) {
            $Object.RecurrenceScheduleHour = $RecurrenceScheduleHour
        }
        if ($PSBoundParameters.ContainsKey('RecurrenceScheduleMinute')) {
            $Object.RecurrenceScheduleMinute = $RecurrenceScheduleMinute
        }
        if ($PSBoundParameters.ContainsKey('RecurrenceScheduleMonthDay')) {
            $Object.RecurrenceScheduleMonthDay = $RecurrenceScheduleMonthDay
        }
        if ($PSBoundParameters.ContainsKey('RecurrenceScheduleMonthlyOccurrence')) {
            $Object.RecurrenceScheduleMonthlyOccurrence = $RecurrenceScheduleMonthlyOccurrence
        }
        if ($PSBoundParameters.ContainsKey('RecurrenceScheduleWeekDay')) {
            $Object.RecurrenceScheduleWeekDay = $RecurrenceScheduleWeekDay
        }
        if ($PSBoundParameters.ContainsKey('RecurrenceStartTime')) {
            $Object.RecurrenceStartTime = $RecurrenceStartTime
        }
        if ($PSBoundParameters.ContainsKey('RecurrenceTimeZone')) {
            $Object.RecurrenceTimeZone = $RecurrenceTimeZone
        }
        if ($PSBoundParameters.ContainsKey('ScanLevel')) {
            $Object.ScanLevel = $ScanLevel
        }
        return $Object
    }
}

