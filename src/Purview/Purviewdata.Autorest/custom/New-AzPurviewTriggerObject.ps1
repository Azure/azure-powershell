
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for Trigger.
.Description
Create an in-memory object for Trigger.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.Api20211001Preview.Trigger
.Link
https://docs.microsoft.com/powershell/module/az.Purview/new-AzPurviewTriggerObject
#>
function New-AzPurviewTriggerObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.Api20211001Preview.Trigger')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter()]
        [System.DateTime]
        $IncrementalScanStartTime,
        [Parameter()]
        [int]
        $Interval,
        [Parameter()]
        [System.DateTime]
        $RecurrenceEndTime,
        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Support.TriggerFrequency])]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Support.TriggerFrequency]
        $RecurrenceFrequency,
        [Parameter()]
        [string]
        $RecurrenceInterval,
        [Parameter()]
        [System.DateTime]
        $RecurrenceStartTime,
        [Parameter()]
        [string]
        $RecurrenceTimeZone,
        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Support.ScanLevelType])]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Support.ScanLevelType]
        $ScanLevel,
        [Parameter(HelpMessage="Dictionary of <any>.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.Api20211001Preview.IRecurrenceScheduleAdditionalProperties]
        $ScheduleAdditionalProperty,
        [Parameter()]
        [int[]]
        $ScheduleHour,
        [Parameter()]
        [int[]]
        $ScheduleMinute,
        [Parameter()]
        [int[]]
        $ScheduleMonthDay,
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.Api20211001Preview.IRecurrenceScheduleOccurrence[]]
        $ScheduleMonthlyOccurrence,
        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Support.DaysOfWeek])]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Support.DaysOfWeek[]]
        $ScheduleWeekDay
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.Api20211001Preview.Trigger]::New()

        if ($PSBoundParameters.ContainsKey('IncrementalScanStartTime')) {
            $Object.IncrementalScanStartTime = $IncrementalScanStartTime
        }
        if ($PSBoundParameters.ContainsKey('Interval')) {
            $Object.Interval = $Interval
        }
        if ($PSBoundParameters.ContainsKey('RecurrenceEndTime')) {
            $Object.RecurrenceEndTime = $RecurrenceEndTime
        }
        if ($PSBoundParameters.ContainsKey('RecurrenceFrequency')) {
            $Object.RecurrenceFrequency = $RecurrenceFrequency
        }
        if ($PSBoundParameters.ContainsKey('RecurrenceInterval')) {
            $Object.RecurrenceInterval = $RecurrenceInterval
        }
        if ($PSBoundParameters.ContainsKey('RecurrenceStartTime')) {
            $Object.RecurrenceStartTime = $RecurrenceStartTime
        }
        if ($PSBoundParameters.ContainsKey('RecurrenceTimeZone')) {
            $Object.RecurrenceTimeZone = $RecurrenceTimeZone
        }
        if ($PSBoundParameters.ContainsKey('ScanLevel')) {
            $Object.ScanLevel = $ScanLevel
        }
        if ($PSBoundParameters.ContainsKey('ScheduleAdditionalProperty')) {
            $Object.ScheduleAdditionalProperty = $ScheduleAdditionalProperty
        }
        if ($PSBoundParameters.ContainsKey('ScheduleHour')) {
            $Object.ScheduleHour = $ScheduleHour
        }
        if ($PSBoundParameters.ContainsKey('ScheduleMinute')) {
            $Object.ScheduleMinute = $ScheduleMinute
        }
        if ($PSBoundParameters.ContainsKey('ScheduleMonthDay')) {
            $Object.ScheduleMonthDay = $ScheduleMonthDay
        }
        if ($PSBoundParameters.ContainsKey('ScheduleMonthlyOccurrence')) {
            $Object.ScheduleMonthlyOccurrence = $ScheduleMonthlyOccurrence
        }
        if ($PSBoundParameters.ContainsKey('ScheduleWeekDay')) {
            $Object.ScheduleWeekDay = $ScheduleWeekDay
        }
        return $Object
    }
}

