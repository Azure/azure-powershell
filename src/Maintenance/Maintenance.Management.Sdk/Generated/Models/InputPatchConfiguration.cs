// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Maintenance.Models
{
    using System.Linq;

    /// <summary>
    /// Input configuration for a patch run
    /// </summary>
    public partial class InputPatchConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the InputPatchConfiguration class.
        /// </summary>
        public InputPatchConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InputPatchConfiguration class.
        /// </summary>

        /// <param name="rebootSetting">Possible reboot preference as defined by the user based on which it would
        /// be decided to reboot the machine or not after the patch operation is
        /// completed.
        /// Possible values include: &#39;IfRequired&#39;, &#39;Never&#39;, &#39;Always&#39;</param>

        /// <param name="windowsParameters">Input parameters specific to patching a Windows machine. For Linux
        /// machines, do not pass this property.
        /// </param>

        /// <param name="linuxParameters">Input parameters specific to patching Linux machine. For Windows machines,
        /// do not pass this property.
        /// </param>
        public InputPatchConfiguration(string rebootSetting = default(string), InputWindowsParameters windowsParameters = default(InputWindowsParameters), InputLinuxParameters linuxParameters = default(InputLinuxParameters))

        {
            this.RebootSetting = rebootSetting;
            this.WindowsParameters = windowsParameters;
            this.LinuxParameters = linuxParameters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets possible reboot preference as defined by the user based on
        /// which it would be decided to reboot the machine or not after the patch
        /// operation is completed. Possible values include: &#39;IfRequired&#39;, &#39;Never&#39;, &#39;Always&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rebootSetting")]
        public string RebootSetting {get; set; }

        /// <summary>
        /// Gets or sets input parameters specific to patching a Windows machine. For
        /// Linux machines, do not pass this property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "windowsParameters")]
        public InputWindowsParameters WindowsParameters {get; set; }

        /// <summary>
        /// Gets or sets input parameters specific to patching Linux machine. For
        /// Windows machines, do not pass this property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "linuxParameters")]
        public InputLinuxParameters LinuxParameters {get; set; }
    }
}