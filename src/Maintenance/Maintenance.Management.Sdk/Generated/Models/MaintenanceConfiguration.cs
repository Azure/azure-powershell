// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Maintenance.Models
{
    using System.Linq;

    /// <summary>
    /// Maintenance configuration record type
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class MaintenanceConfiguration : Resource
    {
        /// <summary>
        /// Initializes a new instance of the MaintenanceConfiguration class.
        /// </summary>
        public MaintenanceConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MaintenanceConfiguration class.
        /// </summary>

        /// <param name="id">Fully qualified identifier of the resource
        /// </param>

        /// <param name="name">Name of the resource
        /// </param>

        /// <param name="type">Type of the resource
        /// </param>

        /// <param name="systemData">Azure Resource Manager metadata containing createdBy and modifiedBy
        /// information.
        /// </param>

        /// <param name="location">Gets or sets location of the resource
        /// </param>

        /// <param name="tags">Gets or sets tags of the resource
        /// </param>

        /// <param name="maintenanceScope">Gets or sets maintenanceScope of the configuration
        /// Possible values include: &#39;Host&#39;, &#39;Resource&#39;, &#39;OSImage&#39;, &#39;Extension&#39;,
        /// &#39;InGuestPatch&#39;, &#39;SQLDB&#39;, &#39;SQLManagedInstance&#39;</param>

        /// <param name="visibility">Gets or sets the visibility of the configuration. The default value is
        /// &#39;Custom&#39;
        /// Possible values include: &#39;Custom&#39;, &#39;Public&#39;</param>

        /// <param name="namespaceProperty">Gets or sets namespace of the resource
        /// </param>

        /// <param name="extensionProperties">Gets or sets extensionProperties of the maintenanceConfiguration
        /// </param>

        /// <param name="installPatches">The input parameters to be passed to the patch run operation.
        /// </param>

        /// <param name="duration">Duration of the maintenance window in HH:mm format. If not provided,
        /// default value will be used based on maintenance scope provided. Example:
        /// 05:00.
        /// </param>

        /// <param name="timeZone">Name of the timezone. List of timezones can be obtained by executing
        /// [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell. Example: Pacific
        /// Standard Time, UTC, W. Europe Standard Time, Korea Standard Time, Cen.
        /// Australia Standard Time.
        /// </param>

        /// <param name="recurEvery">Rate at which a Maintenance window is expected to recur. The rate can be
        /// expressed as daily, weekly, or monthly schedules. Daily schedule are
        /// formatted as recurEvery: [Frequency as integer][&#39;Day(s)&#39;]. If no frequency
        /// is provided, the default frequency is 1. Daily schedule examples are
        /// recurEvery: Day, recurEvery: 3Days.  Weekly schedule are formatted as
        /// recurEvery: [Frequency as integer][&#39;Week(s)&#39;] [Optional comma separated
        /// list of weekdays Monday-Sunday]. Weekly schedule examples are recurEvery:
        /// 3Weeks, recurEvery: Week Saturday,Sunday. Monthly schedules are formatted
        /// as [Frequency as integer][&#39;Month(s)&#39;] [Comma separated list of month days]
        /// or [Frequency as integer][&#39;Month(s)&#39;] [Week of Month (First, Second, Third,
        /// Fourth, Last)] [Weekday Monday-Sunday] [Optional Offset(No. of days)].
        /// Offset value must be between -6 to 6 inclusive. Monthly schedule examples
        /// are recurEvery: Month, recurEvery: 2Months, recurEvery: Month day23,day24,
        /// recurEvery: Month Last Sunday, recurEvery: Month Fourth Monday, recurEvery:
        /// Month Last Sunday Offset-3, recurEvery: Month Third Sunday Offset6.
        /// </param>

        /// <param name="startDateTime">Effective start date of the maintenance window in YYYY-MM-DD hh:mm format.
        /// The start date can be set to either the current date or future date. The
        /// window will be created in the time zone provided and adjusted to daylight
        /// savings according to that time zone.
        /// </param>

        /// <param name="expirationDateTime">Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm
        /// format. The window will be created in the time zone provided and adjusted
        /// to daylight savings according to that time zone. Expiration date must be
        /// set to a future date. If not provided, it will be set to the maximum
        /// datetime 9999-12-31 23:59:59.
        /// </param>
        public MaintenanceConfiguration(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string maintenanceScope = default(string), string visibility = default(string), string namespaceProperty = default(string), System.Collections.Generic.IDictionary<string, string> extensionProperties = default(System.Collections.Generic.IDictionary<string, string>), InputPatchConfiguration installPatches = default(InputPatchConfiguration), string duration = default(string), string timeZone = default(string), string recurEvery = default(string), string startDateTime = default(string), string expirationDateTime = default(string))

        : base(id, name, type, systemData)
        {
            this.Location = location;
            this.Tags = tags;
            this.MaintenanceScope = maintenanceScope;
            this.Visibility = visibility;
            this.NamespaceProperty = namespaceProperty;
            this.ExtensionProperties = extensionProperties;
            this.InstallPatches = installPatches;
            this.Duration = duration;
            this.TimeZone = timeZone;
            this.RecurEvery = recurEvery;
            this.StartDateTime = startDateTime;
            this.ExpirationDateTime = expirationDateTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets gets or sets location of the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location {get; set; }

        /// <summary>
        /// Gets or sets gets or sets tags of the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets or sets gets or sets maintenanceScope of the configuration Possible values include: &#39;Host&#39;, &#39;Resource&#39;, &#39;OSImage&#39;, &#39;Extension&#39;, &#39;InGuestPatch&#39;, &#39;SQLDB&#39;, &#39;SQLManagedInstance&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maintenanceScope")]
        public string MaintenanceScope {get; set; }

        /// <summary>
        /// Gets or sets gets or sets the visibility of the configuration. The default
        /// value is &#39;Custom&#39; Possible values include: &#39;Custom&#39;, &#39;Public&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.visibility")]
        public string Visibility {get; set; }

        /// <summary>
        /// Gets or sets gets or sets namespace of the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.namespace")]
        public string NamespaceProperty {get; set; }

        /// <summary>
        /// Gets or sets gets or sets extensionProperties of the
        /// maintenanceConfiguration
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.extensionProperties")]
        public System.Collections.Generic.IDictionary<string, string> ExtensionProperties {get; set; }

        /// <summary>
        /// Gets or sets the input parameters to be passed to the patch run operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.installPatches")]
        public InputPatchConfiguration InstallPatches {get; set; }

        /// <summary>
        /// Gets or sets duration of the maintenance window in HH:mm format. If not
        /// provided, default value will be used based on maintenance scope provided.
        /// Example: 05:00.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maintenanceWindow.duration")]
        public string Duration {get; set; }

        /// <summary>
        /// Gets or sets name of the timezone. List of timezones can be obtained by
        /// executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.
        /// Example: Pacific Standard Time, UTC, W. Europe Standard Time, Korea
        /// Standard Time, Cen. Australia Standard Time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maintenanceWindow.timeZone")]
        public string TimeZone {get; set; }

        /// <summary>
        /// Gets or sets rate at which a Maintenance window is expected to recur. The
        /// rate can be expressed as daily, weekly, or monthly schedules. Daily
        /// schedule are formatted as recurEvery: [Frequency as integer][&#39;Day(s)&#39;]. If
        /// no frequency is provided, the default frequency is 1. Daily schedule
        /// examples are recurEvery: Day, recurEvery: 3Days.  Weekly schedule are
        /// formatted as recurEvery: [Frequency as integer][&#39;Week(s)&#39;] [Optional comma
        /// separated list of weekdays Monday-Sunday]. Weekly schedule examples are
        /// recurEvery: 3Weeks, recurEvery: Week Saturday,Sunday. Monthly schedules are
        /// formatted as [Frequency as integer][&#39;Month(s)&#39;] [Comma separated list of
        /// month days] or [Frequency as integer][&#39;Month(s)&#39;] [Week of Month (First,
        /// Second, Third, Fourth, Last)] [Weekday Monday-Sunday] [Optional Offset(No.
        /// of days)]. Offset value must be between -6 to 6 inclusive. Monthly schedule
        /// examples are recurEvery: Month, recurEvery: 2Months, recurEvery: Month
        /// day23,day24, recurEvery: Month Last Sunday, recurEvery: Month Fourth
        /// Monday, recurEvery: Month Last Sunday Offset-3, recurEvery: Month Third
        /// Sunday Offset6.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maintenanceWindow.recurEvery")]
        public string RecurEvery {get; set; }

        /// <summary>
        /// Gets or sets effective start date of the maintenance window in YYYY-MM-DD
        /// hh:mm format. The start date can be set to either the current date or
        /// future date. The window will be created in the time zone provided and
        /// adjusted to daylight savings according to that time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maintenanceWindow.startDateTime")]
        public string StartDateTime {get; set; }

        /// <summary>
        /// Gets or sets effective expiration date of the maintenance window in
        /// YYYY-MM-DD hh:mm format. The window will be created in the time zone
        /// provided and adjusted to daylight savings according to that time zone.
        /// Expiration date must be set to a future date. If not provided, it will be
        /// set to the maximum datetime 9999-12-31 23:59:59.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maintenanceWindow.expirationDateTime")]
        public string ExpirationDateTime {get; set; }
    }
}