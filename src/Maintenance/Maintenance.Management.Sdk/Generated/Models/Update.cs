// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Maintenance.Models
{
    using System.Linq;

    /// <summary>
    /// Maintenance update on a resource
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Update
    {
        /// <summary>
        /// Initializes a new instance of the Update class.
        /// </summary>
        public Update()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Update class.
        /// </summary>

        /// <param name="maintenanceScope">The impact area
        /// Possible values include: &#39;Host&#39;, &#39;Resource&#39;, &#39;OSImage&#39;, &#39;Extension&#39;,
        /// &#39;InGuestPatch&#39;, &#39;SQLDB&#39;, &#39;SQLManagedInstance&#39;</param>

        /// <param name="impactType">The impact type
        /// Possible values include: &#39;None&#39;, &#39;Freeze&#39;, &#39;Restart&#39;, &#39;Redeploy&#39;</param>

        /// <param name="status">The status
        /// Possible values include: &#39;Pending&#39;, &#39;InProgress&#39;, &#39;Completed&#39;, &#39;RetryNow&#39;,
        /// &#39;RetryLater&#39;, &#39;NoUpdatesPending&#39;, &#39;Cancel&#39;, &#39;Cancelled&#39;</param>

        /// <param name="impactDurationInSec">Duration of impact in seconds
        /// </param>

        /// <param name="notBefore">Time when Azure will start force updates if not self-updated by customer
        /// before this time
        /// </param>

        /// <param name="resourceId">The resourceId
        /// </param>
        public Update(string maintenanceScope = default(string), string impactType = default(string), string status = default(string), int? impactDurationInSec = default(int?), System.DateTime? notBefore = default(System.DateTime?), string resourceId = default(string))

        {
            this.MaintenanceScope = maintenanceScope;
            this.ImpactType = impactType;
            this.Status = status;
            this.ImpactDurationInSec = impactDurationInSec;
            this.NotBefore = notBefore;
            this.ResourceId = resourceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the impact area Possible values include: &#39;Host&#39;, &#39;Resource&#39;, &#39;OSImage&#39;, &#39;Extension&#39;, &#39;InGuestPatch&#39;, &#39;SQLDB&#39;, &#39;SQLManagedInstance&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maintenanceScope")]
        public string MaintenanceScope {get; set; }

        /// <summary>
        /// Gets or sets the impact type Possible values include: &#39;None&#39;, &#39;Freeze&#39;, &#39;Restart&#39;, &#39;Redeploy&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "impactType")]
        public string ImpactType {get; set; }

        /// <summary>
        /// Gets or sets the status Possible values include: &#39;Pending&#39;, &#39;InProgress&#39;, &#39;Completed&#39;, &#39;RetryNow&#39;, &#39;RetryLater&#39;, &#39;NoUpdatesPending&#39;, &#39;Cancel&#39;, &#39;Cancelled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; set; }

        /// <summary>
        /// Gets or sets duration of impact in seconds
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "impactDurationInSec")]
        public int? ImpactDurationInSec {get; set; }

        /// <summary>
        /// Gets or sets time when Azure will start force updates if not self-updated
        /// by customer before this time
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "notBefore")]
        public System.DateTime? NotBefore {get; set; }

        /// <summary>
        /// Gets or sets the resourceId
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceId")]
        public string ResourceId {get; set; }
    }
}