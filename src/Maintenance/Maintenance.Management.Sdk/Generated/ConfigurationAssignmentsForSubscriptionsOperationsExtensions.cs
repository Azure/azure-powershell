// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Maintenance
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ConfigurationAssignmentsForSubscriptionsOperations
    /// </summary>
    public static partial class ConfigurationAssignmentsForSubscriptionsOperationsExtensions
    {
        /// <summary>
        /// Get configuration assignment for resource..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='configurationAssignmentName'>
        /// Configuration assignment name
        /// </param>
        public static ConfigurationAssignment Get(this IConfigurationAssignmentsForSubscriptionsOperations operations, string configurationAssignmentName)
        {
                return ((IConfigurationAssignmentsForSubscriptionsOperations)operations).GetAsync(configurationAssignmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get configuration assignment for resource..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='configurationAssignmentName'>
        /// Configuration assignment name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ConfigurationAssignment> GetAsync(this IConfigurationAssignmentsForSubscriptionsOperations operations, string configurationAssignmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(configurationAssignmentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Register configuration for resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='configurationAssignmentName'>
        /// Configuration assignment name
        /// </param>
        public static ConfigurationAssignment CreateOrUpdate(this IConfigurationAssignmentsForSubscriptionsOperations operations, string configurationAssignmentName, ConfigurationAssignment configurationAssignment)
        {
                return ((IConfigurationAssignmentsForSubscriptionsOperations)operations).CreateOrUpdateAsync(configurationAssignmentName, configurationAssignment).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Register configuration for resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='configurationAssignmentName'>
        /// Configuration assignment name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ConfigurationAssignment> CreateOrUpdateAsync(this IConfigurationAssignmentsForSubscriptionsOperations operations, string configurationAssignmentName, ConfigurationAssignment configurationAssignment, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(configurationAssignmentName, configurationAssignment, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Register configuration for resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='configurationAssignmentName'>
        /// Configuration assignment name
        /// </param>
        public static ConfigurationAssignment Update(this IConfigurationAssignmentsForSubscriptionsOperations operations, string configurationAssignmentName, ConfigurationAssignment configurationAssignment)
        {
                return ((IConfigurationAssignmentsForSubscriptionsOperations)operations).UpdateAsync(configurationAssignmentName, configurationAssignment).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Register configuration for resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='configurationAssignmentName'>
        /// Configuration assignment name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ConfigurationAssignment> UpdateAsync(this IConfigurationAssignmentsForSubscriptionsOperations operations, string configurationAssignmentName, ConfigurationAssignment configurationAssignment, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(configurationAssignmentName, configurationAssignment, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Unregister configuration for resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='configurationAssignmentName'>
        /// Unique configuration assignment name
        /// </param>
        public static ConfigurationAssignment Delete(this IConfigurationAssignmentsForSubscriptionsOperations operations, string configurationAssignmentName)
        {
                return ((IConfigurationAssignmentsForSubscriptionsOperations)operations).DeleteAsync(configurationAssignmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Unregister configuration for resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='configurationAssignmentName'>
        /// Unique configuration assignment name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ConfigurationAssignment> DeleteAsync(this IConfigurationAssignmentsForSubscriptionsOperations operations, string configurationAssignmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(configurationAssignmentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
