// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Maintenance
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ScheduledEventOperations
    /// </summary>
    public static partial class ScheduledEventOperationsExtensions
    {
        /// <summary>
        /// Post Scheduled Event Acknowledgement
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceType'>
        /// Resource type
        /// </param>
        /// <param name='resourceName'>
        /// Resource Name
        /// </param>
        /// <param name='scheduledEventId'>
        /// Scheduled Event Id. This is a GUID-formatted string (e.g.
        /// 00000000-0000-0000-0000-000000000000)
        /// </param>
        public static ScheduledEventApproveResponse Acknowledge(this IScheduledEventOperations operations, string resourceGroupName, string resourceType, string resourceName, string scheduledEventId)
        {
                return ((IScheduledEventOperations)operations).AcknowledgeAsync(resourceGroupName, resourceType, resourceName, scheduledEventId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Post Scheduled Event Acknowledgement
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceType'>
        /// Resource type
        /// </param>
        /// <param name='resourceName'>
        /// Resource Name
        /// </param>
        /// <param name='scheduledEventId'>
        /// Scheduled Event Id. This is a GUID-formatted string (e.g.
        /// 00000000-0000-0000-0000-000000000000)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ScheduledEventApproveResponse> AcknowledgeAsync(this IScheduledEventOperations operations, string resourceGroupName, string resourceType, string resourceName, string scheduledEventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.AcknowledgeWithHttpMessagesAsync(resourceGroupName, resourceType, resourceName, scheduledEventId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
