// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Maintenance
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for UpdatesOperations
    /// </summary>
    public static partial class UpdatesOperationsExtensions
    {
        /// <summary>
        /// Get updates to resources.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name
        /// </param>
        /// <param name='providerName'>
        /// Resource provider name
        /// </param>
        /// <param name='resourceParentType'>
        /// Resource parent type
        /// </param>
        /// <param name='resourceParentName'>
        /// Resource parent identifier
        /// </param>
        /// <param name='resourceType'>
        /// Resource type
        /// </param>
        /// <param name='resourceName'>
        /// Resource identifier
        /// </param>
        public static System.Collections.Generic.IEnumerable<Update> ListParent(this IUpdatesOperations operations, string resourceGroupName, string providerName, string resourceParentType, string resourceParentName, string resourceType, string resourceName)
        {
                return ((IUpdatesOperations)operations).ListParentAsync(resourceGroupName, providerName, resourceParentType, resourceParentName, resourceType, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get updates to resources.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name
        /// </param>
        /// <param name='providerName'>
        /// Resource provider name
        /// </param>
        /// <param name='resourceParentType'>
        /// Resource parent type
        /// </param>
        /// <param name='resourceParentName'>
        /// Resource parent identifier
        /// </param>
        /// <param name='resourceType'>
        /// Resource type
        /// </param>
        /// <param name='resourceName'>
        /// Resource identifier
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Update>> ListParentAsync(this IUpdatesOperations operations, string resourceGroupName, string providerName, string resourceParentType, string resourceParentName, string resourceType, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListParentWithHttpMessagesAsync(resourceGroupName, providerName, resourceParentType, resourceParentName, resourceType, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get updates to resources.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name
        /// </param>
        /// <param name='providerName'>
        /// Resource provider name
        /// </param>
        /// <param name='resourceType'>
        /// Resource type
        /// </param>
        /// <param name='resourceName'>
        /// Resource identifier
        /// </param>
        public static System.Collections.Generic.IEnumerable<Update> List(this IUpdatesOperations operations, string resourceGroupName, string providerName, string resourceType, string resourceName)
        {
                return ((IUpdatesOperations)operations).ListAsync(resourceGroupName, providerName, resourceType, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get updates to resources.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group name
        /// </param>
        /// <param name='providerName'>
        /// Resource provider name
        /// </param>
        /// <param name='resourceType'>
        /// Resource type
        /// </param>
        /// <param name='resourceName'>
        /// Resource identifier
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Update>> ListAsync(this IUpdatesOperations operations, string resourceGroupName, string providerName, string resourceType, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, providerName, resourceType, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
