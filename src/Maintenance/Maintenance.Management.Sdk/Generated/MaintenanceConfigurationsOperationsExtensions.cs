// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Maintenance
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for MaintenanceConfigurationsOperations
    /// </summary>
    public static partial class MaintenanceConfigurationsOperationsExtensions
    {
        /// <summary>
        /// Get Configuration record
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource Group Name
        /// </param>
        /// <param name='resourceName'>
        /// Maintenance Configuration Name
        /// </param>
        public static MaintenanceConfiguration Get(this IMaintenanceConfigurationsOperations operations, string resourceGroupName, string resourceName)
        {
                return ((IMaintenanceConfigurationsOperations)operations).GetAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get Configuration record
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource Group Name
        /// </param>
        /// <param name='resourceName'>
        /// Maintenance Configuration Name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MaintenanceConfiguration> GetAsync(this IMaintenanceConfigurationsOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or Update configuration record
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource Group Name
        /// </param>
        /// <param name='resourceName'>
        /// Maintenance Configuration Name
        /// </param>
        public static MaintenanceConfiguration CreateOrUpdate(this IMaintenanceConfigurationsOperations operations, string resourceGroupName, string resourceName, MaintenanceConfiguration configuration)
        {
                return ((IMaintenanceConfigurationsOperations)operations).CreateOrUpdateAsync(resourceGroupName, resourceName, configuration).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or Update configuration record
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource Group Name
        /// </param>
        /// <param name='resourceName'>
        /// Maintenance Configuration Name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MaintenanceConfiguration> CreateOrUpdateAsync(this IMaintenanceConfigurationsOperations operations, string resourceGroupName, string resourceName, MaintenanceConfiguration configuration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, configuration, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete Configuration record
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource Group Name
        /// </param>
        /// <param name='resourceName'>
        /// Maintenance Configuration Name
        /// </param>
        public static MaintenanceConfiguration Delete(this IMaintenanceConfigurationsOperations operations, string resourceGroupName, string resourceName)
        {
                return ((IMaintenanceConfigurationsOperations)operations).DeleteAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete Configuration record
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource Group Name
        /// </param>
        /// <param name='resourceName'>
        /// Maintenance Configuration Name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MaintenanceConfiguration> DeleteAsync(this IMaintenanceConfigurationsOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Patch configuration record
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource Group Name
        /// </param>
        /// <param name='resourceName'>
        /// Maintenance Configuration Name
        /// </param>
        public static MaintenanceConfiguration Update(this IMaintenanceConfigurationsOperations operations, string resourceGroupName, string resourceName, MaintenanceConfiguration configuration)
        {
                return ((IMaintenanceConfigurationsOperations)operations).UpdateAsync(resourceGroupName, resourceName, configuration).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Patch configuration record
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource Group Name
        /// </param>
        /// <param name='resourceName'>
        /// Maintenance Configuration Name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MaintenanceConfiguration> UpdateAsync(this IMaintenanceConfigurationsOperations operations, string resourceGroupName, string resourceName, MaintenanceConfiguration configuration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, resourceName, configuration, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get Configuration records within a subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static System.Collections.Generic.IEnumerable<MaintenanceConfiguration> List(this IMaintenanceConfigurationsOperations operations)
        {
                return ((IMaintenanceConfigurationsOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get Configuration records within a subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<MaintenanceConfiguration>> ListAsync(this IMaintenanceConfigurationsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
