// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for GatewayHostnameConfigurationOperations
    /// </summary>
    public static partial class GatewayHostnameConfigurationOperationsExtensions
    {
        /// <summary>
        /// Lists the collection of hostname configurations for the specified gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='gatewayId'>
        /// Gateway entity identifier. Must be unique in the current API Management
        /// service instance. Must not have value &#39;managed&#39;
        /// </param>
        public static Microsoft.Rest.Azure.IPage<GatewayHostnameConfigurationContract> ListByService(this IGatewayHostnameConfigurationOperations operations, string resourceGroupName, string serviceName, string gatewayId, Microsoft.Rest.Azure.OData.ODataQuery<GatewayHostnameConfigurationContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<GatewayHostnameConfigurationContract>))
        {
                return ((IGatewayHostnameConfigurationOperations)operations).ListByServiceAsync(resourceGroupName, serviceName, gatewayId, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the collection of hostname configurations for the specified gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='gatewayId'>
        /// Gateway entity identifier. Must be unique in the current API Management
        /// service instance. Must not have value &#39;managed&#39;
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<GatewayHostnameConfigurationContract>> ListByServiceAsync(this IGatewayHostnameConfigurationOperations operations, string resourceGroupName, string serviceName, string gatewayId, Microsoft.Rest.Azure.OData.ODataQuery<GatewayHostnameConfigurationContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<GatewayHostnameConfigurationContract>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByServiceWithHttpMessagesAsync(resourceGroupName, serviceName, gatewayId, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Checks that hostname configuration entity specified by identifier exists
        /// for specified Gateway entity.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='gatewayId'>
        /// Gateway entity identifier. Must be unique in the current API Management
        /// service instance. Must not have value &#39;managed&#39;
        /// </param>
        /// <param name='hcId'>
        /// Gateway hostname configuration identifier. Must be unique in the scope of
        /// parent Gateway entity.
        /// </param>
        public static bool GetEntityTag(this IGatewayHostnameConfigurationOperations operations, string resourceGroupName, string serviceName, string gatewayId, string hcId)
        {
                return ((IGatewayHostnameConfigurationOperations)operations).GetEntityTagAsync(resourceGroupName, serviceName, gatewayId, hcId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Checks that hostname configuration entity specified by identifier exists
        /// for specified Gateway entity.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='gatewayId'>
        /// Gateway entity identifier. Must be unique in the current API Management
        /// service instance. Must not have value &#39;managed&#39;
        /// </param>
        /// <param name='hcId'>
        /// Gateway hostname configuration identifier. Must be unique in the scope of
        /// parent Gateway entity.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<bool> GetEntityTagAsync(this IGatewayHostnameConfigurationOperations operations, string resourceGroupName, string serviceName, string gatewayId, string hcId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetEntityTagWithHttpMessagesAsync(resourceGroupName, serviceName, gatewayId, hcId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get details of a hostname configuration
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='gatewayId'>
        /// Gateway entity identifier. Must be unique in the current API Management
        /// service instance. Must not have value &#39;managed&#39;
        /// </param>
        /// <param name='hcId'>
        /// Gateway hostname configuration identifier. Must be unique in the scope of
        /// parent Gateway entity.
        /// </param>
        public static GatewayHostnameConfigurationContract Get(this IGatewayHostnameConfigurationOperations operations, string resourceGroupName, string serviceName, string gatewayId, string hcId)
        {
                return ((IGatewayHostnameConfigurationOperations)operations).GetAsync(resourceGroupName, serviceName, gatewayId, hcId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get details of a hostname configuration
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='gatewayId'>
        /// Gateway entity identifier. Must be unique in the current API Management
        /// service instance. Must not have value &#39;managed&#39;
        /// </param>
        /// <param name='hcId'>
        /// Gateway hostname configuration identifier. Must be unique in the scope of
        /// parent Gateway entity.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<GatewayHostnameConfigurationContract> GetAsync(this IGatewayHostnameConfigurationOperations operations, string resourceGroupName, string serviceName, string gatewayId, string hcId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serviceName, gatewayId, hcId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates of updates hostname configuration for a Gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='gatewayId'>
        /// Gateway entity identifier. Must be unique in the current API Management
        /// service instance. Must not have value &#39;managed&#39;
        /// </param>
        /// <param name='hcId'>
        /// Gateway hostname configuration identifier. Must be unique in the scope of
        /// parent Gateway entity.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. Not required when creating an entity, but required when
        /// updating an entity.
        /// </param>
        public static GatewayHostnameConfigurationContract CreateOrUpdate(this IGatewayHostnameConfigurationOperations operations, string resourceGroupName, string serviceName, string gatewayId, string hcId, GatewayHostnameConfigurationContract parameters, string ifMatch = default(string))
        {
                return ((IGatewayHostnameConfigurationOperations)operations).CreateOrUpdateAsync(resourceGroupName, serviceName, gatewayId, hcId, parameters, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates of updates hostname configuration for a Gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='gatewayId'>
        /// Gateway entity identifier. Must be unique in the current API Management
        /// service instance. Must not have value &#39;managed&#39;
        /// </param>
        /// <param name='hcId'>
        /// Gateway hostname configuration identifier. Must be unique in the scope of
        /// parent Gateway entity.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. Not required when creating an entity, but required when
        /// updating an entity.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<GatewayHostnameConfigurationContract> CreateOrUpdateAsync(this IGatewayHostnameConfigurationOperations operations, string resourceGroupName, string serviceName, string gatewayId, string hcId, GatewayHostnameConfigurationContract parameters, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceName, gatewayId, hcId, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the specified hostname configuration from the specified Gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='gatewayId'>
        /// Gateway entity identifier. Must be unique in the current API Management
        /// service instance. Must not have value &#39;managed&#39;
        /// </param>
        /// <param name='hcId'>
        /// Gateway hostname configuration identifier. Must be unique in the scope of
        /// parent Gateway entity.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        public static void Delete(this IGatewayHostnameConfigurationOperations operations, string resourceGroupName, string serviceName, string gatewayId, string hcId, string ifMatch)
        {
                ((IGatewayHostnameConfigurationOperations)operations).DeleteAsync(resourceGroupName, serviceName, gatewayId, hcId, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified hostname configuration from the specified Gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='gatewayId'>
        /// Gateway entity identifier. Must be unique in the current API Management
        /// service instance. Must not have value &#39;managed&#39;
        /// </param>
        /// <param name='hcId'>
        /// Gateway hostname configuration identifier. Must be unique in the scope of
        /// parent Gateway entity.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IGatewayHostnameConfigurationOperations operations, string resourceGroupName, string serviceName, string gatewayId, string hcId, string ifMatch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serviceName, gatewayId, hcId, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists the collection of hostname configurations for the specified gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<GatewayHostnameConfigurationContract> ListByServiceNext(this IGatewayHostnameConfigurationOperations operations, string nextPageLink)
        {
                return ((IGatewayHostnameConfigurationOperations)operations).ListByServiceNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the collection of hostname configurations for the specified gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<GatewayHostnameConfigurationContract>> ListByServiceNextAsync(this IGatewayHostnameConfigurationOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByServiceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
