// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ProductOperations
    /// </summary>
    public static partial class ProductOperationsExtensions
    {
        /// <summary>
        /// Lists a collection of products in the specified service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='expandGroups'>
        /// When set to true, the response contains an array of groups that have
        /// visibility to the product. The default is false.
        /// </param>
        /// <param name='tags'>
        /// Products which are part of a specific tag.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProductContract> ListByService(this IProductOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<ProductContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ProductContract>), bool? expandGroups = default(bool?), string tags = default(string))
        {
                return ((IProductOperations)operations).ListByServiceAsync(resourceGroupName, serviceName, odataQuery, expandGroups, tags).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists a collection of products in the specified service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='expandGroups'>
        /// When set to true, the response contains an array of groups that have
        /// visibility to the product. The default is false.
        /// </param>
        /// <param name='tags'>
        /// Products which are part of a specific tag.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProductContract>> ListByServiceAsync(this IProductOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<ProductContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ProductContract>), bool? expandGroups = default(bool?), string tags = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByServiceWithHttpMessagesAsync(resourceGroupName, serviceName, odataQuery, expandGroups, tags, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the entity state (Etag) version of the product specified by its
        /// identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static bool GetEntityTag(this IProductOperations operations, string resourceGroupName, string serviceName, string productId)
        {
                return ((IProductOperations)operations).GetEntityTagAsync(resourceGroupName, serviceName, productId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the entity state (Etag) version of the product specified by its
        /// identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<bool> GetEntityTagAsync(this IProductOperations operations, string resourceGroupName, string serviceName, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetEntityTagWithHttpMessagesAsync(resourceGroupName, serviceName, productId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the details of the product specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static ProductContract Get(this IProductOperations operations, string resourceGroupName, string serviceName, string productId)
        {
                return ((IProductOperations)operations).GetAsync(resourceGroupName, serviceName, productId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the details of the product specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProductContract> GetAsync(this IProductOperations operations, string resourceGroupName, string serviceName, string productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serviceName, productId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or Updates a product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. Not required when creating an entity, but required when
        /// updating an entity.
        /// </param>
        public static ProductContract CreateOrUpdate(this IProductOperations operations, string resourceGroupName, string serviceName, string productId, ProductContract parameters, string ifMatch = default(string))
        {
                return ((IProductOperations)operations).CreateOrUpdateAsync(resourceGroupName, serviceName, productId, parameters, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or Updates a product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. Not required when creating an entity, but required when
        /// updating an entity.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProductContract> CreateOrUpdateAsync(this IProductOperations operations, string resourceGroupName, string serviceName, string productId, ProductContract parameters, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceName, productId, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update existing product details.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        public static ProductContract Update(this IProductOperations operations, string resourceGroupName, string serviceName, string productId, string ifMatch, ProductUpdateParameters parameters)
        {
                return ((IProductOperations)operations).UpdateAsync(resourceGroupName, serviceName, productId, ifMatch, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update existing product details.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProductContract> UpdateAsync(this IProductOperations operations, string resourceGroupName, string serviceName, string productId, string ifMatch, ProductUpdateParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, serviceName, productId, ifMatch, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        /// <param name='deleteSubscriptions'>
        /// Delete existing subscriptions associated with the product or not.
        /// </param>
        public static void Delete(this IProductOperations operations, string resourceGroupName, string serviceName, string productId, string ifMatch, bool? deleteSubscriptions = default(bool?))
        {
                ((IProductOperations)operations).DeleteAsync(resourceGroupName, serviceName, productId, ifMatch, deleteSubscriptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        /// <param name='deleteSubscriptions'>
        /// Delete existing subscriptions associated with the product or not.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IProductOperations operations, string resourceGroupName, string serviceName, string productId, string ifMatch, bool? deleteSubscriptions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serviceName, productId, ifMatch, deleteSubscriptions, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists a collection of products associated with tags.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='includeNotTaggedProducts'>
        /// Include not tagged Products.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TagResourceContract> ListByTags(this IProductOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<TagResourceContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<TagResourceContract>), bool? includeNotTaggedProducts = default(bool?))
        {
                return ((IProductOperations)operations).ListByTagsAsync(resourceGroupName, serviceName, odataQuery, includeNotTaggedProducts).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists a collection of products associated with tags.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='includeNotTaggedProducts'>
        /// Include not tagged Products.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TagResourceContract>> ListByTagsAsync(this IProductOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<TagResourceContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<TagResourceContract>), bool? includeNotTaggedProducts = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByTagsWithHttpMessagesAsync(resourceGroupName, serviceName, odataQuery, includeNotTaggedProducts, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists a collection of products in the specified service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProductContract> ListByServiceNext(this IProductOperations operations, string nextPageLink)
        {
                return ((IProductOperations)operations).ListByServiceNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists a collection of products in the specified service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProductContract>> ListByServiceNextAsync(this IProductOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByServiceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists a collection of products associated with tags.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TagResourceContract> ListByTagsNext(this IProductOperations operations, string nextPageLink)
        {
                return ((IProductOperations)operations).ListByTagsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists a collection of products associated with tags.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TagResourceContract>> ListByTagsNextAsync(this IProductOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByTagsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
