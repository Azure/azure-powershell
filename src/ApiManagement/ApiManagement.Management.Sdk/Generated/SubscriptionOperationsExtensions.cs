// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for SubscriptionOperations
    /// </summary>
    public static partial class SubscriptionOperationsExtensions
    {
        /// <summary>
        /// Lists all subscriptions of the API Management service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SubscriptionContract> List(this ISubscriptionOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<SubscriptionContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<SubscriptionContract>))
        {
                return ((ISubscriptionOperations)operations).ListAsync(resourceGroupName, serviceName, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all subscriptions of the API Management service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SubscriptionContract>> ListAsync(this ISubscriptionOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<SubscriptionContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<SubscriptionContract>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, serviceName, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the entity state (Etag) version of the apimanagement subscription
        /// specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='sid'>
        /// Subscription entity Identifier. The entity represents the association
        /// between a user and a product in API Management.
        /// </param>
        public static bool GetEntityTag(this ISubscriptionOperations operations, string resourceGroupName, string serviceName, string sid)
        {
                return ((ISubscriptionOperations)operations).GetEntityTagAsync(resourceGroupName, serviceName, sid).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the entity state (Etag) version of the apimanagement subscription
        /// specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='sid'>
        /// Subscription entity Identifier. The entity represents the association
        /// between a user and a product in API Management.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<bool> GetEntityTagAsync(this ISubscriptionOperations operations, string resourceGroupName, string serviceName, string sid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetEntityTagWithHttpMessagesAsync(resourceGroupName, serviceName, sid, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the specified Subscription entity.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='sid'>
        /// Subscription entity Identifier. The entity represents the association
        /// between a user and a product in API Management.
        /// </param>
        public static SubscriptionContract Get(this ISubscriptionOperations operations, string resourceGroupName, string serviceName, string sid)
        {
                return ((ISubscriptionOperations)operations).GetAsync(resourceGroupName, serviceName, sid).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the specified Subscription entity.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='sid'>
        /// Subscription entity Identifier. The entity represents the association
        /// between a user and a product in API Management.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SubscriptionContract> GetAsync(this ISubscriptionOperations operations, string resourceGroupName, string serviceName, string sid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serviceName, sid, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates the subscription of specified user to the specified
        /// product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='sid'>
        /// Subscription entity Identifier. The entity represents the association
        /// between a user and a product in API Management.
        /// </param>
        /// <param name='notify'>
        /// Notify change in Subscription State.
        /// - If false, do not send any email notification for change of state of
        /// subscription
        /// - If true, send email notification of change of state of subscription
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. Not required when creating an entity, but required when
        /// updating an entity.
        /// </param>
        /// <param name='appType'>
        /// Determines the type of application which send the create user request.
        /// Default is legacy publisher portal.
        /// </param>
        public static SubscriptionContract CreateOrUpdate(this ISubscriptionOperations operations, string resourceGroupName, string serviceName, string sid, SubscriptionCreateParameters parameters, bool? notify = default(bool?), string ifMatch = default(string), string appType = default(string))
        {
                return ((ISubscriptionOperations)operations).CreateOrUpdateAsync(resourceGroupName, serviceName, sid, parameters, notify, ifMatch, appType).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates the subscription of specified user to the specified
        /// product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='sid'>
        /// Subscription entity Identifier. The entity represents the association
        /// between a user and a product in API Management.
        /// </param>
        /// <param name='notify'>
        /// Notify change in Subscription State.
        /// - If false, do not send any email notification for change of state of
        /// subscription
        /// - If true, send email notification of change of state of subscription
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. Not required when creating an entity, but required when
        /// updating an entity.
        /// </param>
        /// <param name='appType'>
        /// Determines the type of application which send the create user request.
        /// Default is legacy publisher portal.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SubscriptionContract> CreateOrUpdateAsync(this ISubscriptionOperations operations, string resourceGroupName, string serviceName, string sid, SubscriptionCreateParameters parameters, bool? notify = default(bool?), string ifMatch = default(string), string appType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceName, sid, parameters, notify, ifMatch, appType, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates the details of a subscription specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='sid'>
        /// Subscription entity Identifier. The entity represents the association
        /// between a user and a product in API Management.
        /// </param>
        /// <param name='notify'>
        /// Notify change in Subscription State.
        /// - If false, do not send any email notification for change of state of
        /// subscription
        /// - If true, send email notification of change of state of subscription
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        /// <param name='appType'>
        /// Determines the type of application which send the create user request.
        /// Default is legacy publisher portal.
        /// </param>
        public static SubscriptionContract Update(this ISubscriptionOperations operations, string resourceGroupName, string serviceName, string sid, string ifMatch, SubscriptionUpdateParameters parameters, bool? notify = default(bool?), string appType = default(string))
        {
                return ((ISubscriptionOperations)operations).UpdateAsync(resourceGroupName, serviceName, sid, ifMatch, parameters, notify, appType).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates the details of a subscription specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='sid'>
        /// Subscription entity Identifier. The entity represents the association
        /// between a user and a product in API Management.
        /// </param>
        /// <param name='notify'>
        /// Notify change in Subscription State.
        /// - If false, do not send any email notification for change of state of
        /// subscription
        /// - If true, send email notification of change of state of subscription
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        /// <param name='appType'>
        /// Determines the type of application which send the create user request.
        /// Default is legacy publisher portal.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SubscriptionContract> UpdateAsync(this ISubscriptionOperations operations, string resourceGroupName, string serviceName, string sid, string ifMatch, SubscriptionUpdateParameters parameters, bool? notify = default(bool?), string appType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, serviceName, sid, ifMatch, parameters, notify, appType, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the specified subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='sid'>
        /// Subscription entity Identifier. The entity represents the association
        /// between a user and a product in API Management.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        public static void Delete(this ISubscriptionOperations operations, string resourceGroupName, string serviceName, string sid, string ifMatch)
        {
                ((ISubscriptionOperations)operations).DeleteAsync(resourceGroupName, serviceName, sid, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='sid'>
        /// Subscription entity Identifier. The entity represents the association
        /// between a user and a product in API Management.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this ISubscriptionOperations operations, string resourceGroupName, string serviceName, string sid, string ifMatch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serviceName, sid, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Regenerates primary key of existing subscription of the API Management
        /// service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='sid'>
        /// Subscription entity Identifier. The entity represents the association
        /// between a user and a product in API Management.
        /// </param>
        public static void RegeneratePrimaryKey(this ISubscriptionOperations operations, string resourceGroupName, string serviceName, string sid)
        {
                ((ISubscriptionOperations)operations).RegeneratePrimaryKeyAsync(resourceGroupName, serviceName, sid).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Regenerates primary key of existing subscription of the API Management
        /// service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='sid'>
        /// Subscription entity Identifier. The entity represents the association
        /// between a user and a product in API Management.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RegeneratePrimaryKeyAsync(this ISubscriptionOperations operations, string resourceGroupName, string serviceName, string sid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RegeneratePrimaryKeyWithHttpMessagesAsync(resourceGroupName, serviceName, sid, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Regenerates secondary key of existing subscription of the API Management
        /// service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='sid'>
        /// Subscription entity Identifier. The entity represents the association
        /// between a user and a product in API Management.
        /// </param>
        public static void RegenerateSecondaryKey(this ISubscriptionOperations operations, string resourceGroupName, string serviceName, string sid)
        {
                ((ISubscriptionOperations)operations).RegenerateSecondaryKeyAsync(resourceGroupName, serviceName, sid).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Regenerates secondary key of existing subscription of the API Management
        /// service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='sid'>
        /// Subscription entity Identifier. The entity represents the association
        /// between a user and a product in API Management.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RegenerateSecondaryKeyAsync(this ISubscriptionOperations operations, string resourceGroupName, string serviceName, string sid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RegenerateSecondaryKeyWithHttpMessagesAsync(resourceGroupName, serviceName, sid, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets the specified Subscription keys.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='sid'>
        /// Subscription entity Identifier. The entity represents the association
        /// between a user and a product in API Management.
        /// </param>
        public static SubscriptionKeysContract ListSecrets(this ISubscriptionOperations operations, string resourceGroupName, string serviceName, string sid)
        {
                return ((ISubscriptionOperations)operations).ListSecretsAsync(resourceGroupName, serviceName, sid).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the specified Subscription keys.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='sid'>
        /// Subscription entity Identifier. The entity represents the association
        /// between a user and a product in API Management.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SubscriptionKeysContract> ListSecretsAsync(this ISubscriptionOperations operations, string resourceGroupName, string serviceName, string sid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSecretsWithHttpMessagesAsync(resourceGroupName, serviceName, sid, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all subscriptions of the API Management service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SubscriptionContract> ListNext(this ISubscriptionOperations operations, string nextPageLink)
        {
                return ((ISubscriptionOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all subscriptions of the API Management service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SubscriptionContract>> ListNextAsync(this ISubscriptionOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
