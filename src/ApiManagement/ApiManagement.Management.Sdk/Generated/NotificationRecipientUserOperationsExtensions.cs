// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for NotificationRecipientUserOperations
    /// </summary>
    public static partial class NotificationRecipientUserOperationsExtensions
    {
        /// <summary>
        /// Gets the list of the Notification Recipient User subscribed to the
        /// notification.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='notificationName'>
        /// Notification Name Identifier.
        /// </param>
        public static RecipientUserCollection ListByNotification(this INotificationRecipientUserOperations operations, string resourceGroupName, string serviceName, string notificationName)
        {
                return ((INotificationRecipientUserOperations)operations).ListByNotificationAsync(resourceGroupName, serviceName, notificationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of the Notification Recipient User subscribed to the
        /// notification.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='notificationName'>
        /// Notification Name Identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecipientUserCollection> ListByNotificationAsync(this INotificationRecipientUserOperations operations, string resourceGroupName, string serviceName, string notificationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByNotificationWithHttpMessagesAsync(resourceGroupName, serviceName, notificationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Determine if the Notification Recipient User is subscribed to the
        /// notification.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='notificationName'>
        /// Notification Name Identifier.
        /// </param>
        /// <param name='userId'>
        /// User identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static bool CheckEntityExists(this INotificationRecipientUserOperations operations, string resourceGroupName, string serviceName, string notificationName, string userId)
        {
                return ((INotificationRecipientUserOperations)operations).CheckEntityExistsAsync(resourceGroupName, serviceName, notificationName, userId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Determine if the Notification Recipient User is subscribed to the
        /// notification.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='notificationName'>
        /// Notification Name Identifier.
        /// </param>
        /// <param name='userId'>
        /// User identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<bool> CheckEntityExistsAsync(this INotificationRecipientUserOperations operations, string resourceGroupName, string serviceName, string notificationName, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckEntityExistsWithHttpMessagesAsync(resourceGroupName, serviceName, notificationName, userId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Adds the API Management User to the list of Recipients for the
        /// Notification.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='notificationName'>
        /// Notification Name Identifier.
        /// </param>
        /// <param name='userId'>
        /// User identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static RecipientUserContract CreateOrUpdate(this INotificationRecipientUserOperations operations, string resourceGroupName, string serviceName, string notificationName, string userId)
        {
                return ((INotificationRecipientUserOperations)operations).CreateOrUpdateAsync(resourceGroupName, serviceName, notificationName, userId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Adds the API Management User to the list of Recipients for the
        /// Notification.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='notificationName'>
        /// Notification Name Identifier.
        /// </param>
        /// <param name='userId'>
        /// User identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecipientUserContract> CreateOrUpdateAsync(this INotificationRecipientUserOperations operations, string resourceGroupName, string serviceName, string notificationName, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceName, notificationName, userId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Removes the API Management user from the list of Notification.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='notificationName'>
        /// Notification Name Identifier.
        /// </param>
        /// <param name='userId'>
        /// User identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static void Delete(this INotificationRecipientUserOperations operations, string resourceGroupName, string serviceName, string notificationName, string userId)
        {
                ((INotificationRecipientUserOperations)operations).DeleteAsync(resourceGroupName, serviceName, notificationName, userId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Removes the API Management user from the list of Notification.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='notificationName'>
        /// Notification Name Identifier.
        /// </param>
        /// <param name='userId'>
        /// User identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this INotificationRecipientUserOperations operations, string resourceGroupName, string serviceName, string notificationName, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serviceName, notificationName, userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
    }
}
