// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for UserSubscriptionOperations
    /// </summary>
    public static partial class UserSubscriptionOperationsExtensions
    {
        /// <summary>
        /// Lists the collection of subscriptions of the specified user.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='userId'>
        /// User identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SubscriptionContract> List(this IUserSubscriptionOperations operations, string resourceGroupName, string serviceName, string userId, Microsoft.Rest.Azure.OData.ODataQuery<SubscriptionContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<SubscriptionContract>))
        {
                return ((IUserSubscriptionOperations)operations).ListAsync(resourceGroupName, serviceName, userId, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the collection of subscriptions of the specified user.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='userId'>
        /// User identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SubscriptionContract>> ListAsync(this IUserSubscriptionOperations operations, string resourceGroupName, string serviceName, string userId, Microsoft.Rest.Azure.OData.ODataQuery<SubscriptionContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<SubscriptionContract>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, serviceName, userId, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the specified Subscription entity associated with a particular user.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='userId'>
        /// User identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='sid'>
        /// Subscription entity Identifier. The entity represents the association
        /// between a user and a product in API Management.
        /// </param>
        public static SubscriptionContract Get(this IUserSubscriptionOperations operations, string resourceGroupName, string serviceName, string userId, string sid)
        {
                return ((IUserSubscriptionOperations)operations).GetAsync(resourceGroupName, serviceName, userId, sid).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the specified Subscription entity associated with a particular user.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='userId'>
        /// User identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='sid'>
        /// Subscription entity Identifier. The entity represents the association
        /// between a user and a product in API Management.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SubscriptionContract> GetAsync(this IUserSubscriptionOperations operations, string resourceGroupName, string serviceName, string userId, string sid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serviceName, userId, sid, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the collection of subscriptions of the specified user.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SubscriptionContract> ListNext(this IUserSubscriptionOperations operations, string nextPageLink)
        {
                return ((IUserSubscriptionOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the collection of subscriptions of the specified user.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SubscriptionContract>> ListNextAsync(this IUserSubscriptionOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
