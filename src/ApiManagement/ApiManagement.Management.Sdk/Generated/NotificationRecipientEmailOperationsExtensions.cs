// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for NotificationRecipientEmailOperations
    /// </summary>
    public static partial class NotificationRecipientEmailOperationsExtensions
    {
        /// <summary>
        /// Gets the list of the Notification Recipient Emails subscribed to a
        /// notification.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='notificationName'>
        /// Notification Name Identifier.
        /// </param>
        public static RecipientEmailCollection ListByNotification(this INotificationRecipientEmailOperations operations, string resourceGroupName, string serviceName, string notificationName)
        {
                return ((INotificationRecipientEmailOperations)operations).ListByNotificationAsync(resourceGroupName, serviceName, notificationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of the Notification Recipient Emails subscribed to a
        /// notification.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='notificationName'>
        /// Notification Name Identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecipientEmailCollection> ListByNotificationAsync(this INotificationRecipientEmailOperations operations, string resourceGroupName, string serviceName, string notificationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByNotificationWithHttpMessagesAsync(resourceGroupName, serviceName, notificationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Determine if Notification Recipient Email subscribed to the notification.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='notificationName'>
        /// Notification Name Identifier.
        /// </param>
        /// <param name='email'>
        /// Email identifier.
        /// </param>
        public static bool CheckEntityExists(this INotificationRecipientEmailOperations operations, string resourceGroupName, string serviceName, string notificationName, string email)
        {
                return ((INotificationRecipientEmailOperations)operations).CheckEntityExistsAsync(resourceGroupName, serviceName, notificationName, email).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Determine if Notification Recipient Email subscribed to the notification.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='notificationName'>
        /// Notification Name Identifier.
        /// </param>
        /// <param name='email'>
        /// Email identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<bool> CheckEntityExistsAsync(this INotificationRecipientEmailOperations operations, string resourceGroupName, string serviceName, string notificationName, string email, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckEntityExistsWithHttpMessagesAsync(resourceGroupName, serviceName, notificationName, email, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Adds the Email address to the list of Recipients for the Notification.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='notificationName'>
        /// Notification Name Identifier.
        /// </param>
        /// <param name='email'>
        /// Email identifier.
        /// </param>
        public static RecipientEmailContract CreateOrUpdate(this INotificationRecipientEmailOperations operations, string resourceGroupName, string serviceName, string notificationName, string email)
        {
                return ((INotificationRecipientEmailOperations)operations).CreateOrUpdateAsync(resourceGroupName, serviceName, notificationName, email).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Adds the Email address to the list of Recipients for the Notification.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='notificationName'>
        /// Notification Name Identifier.
        /// </param>
        /// <param name='email'>
        /// Email identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecipientEmailContract> CreateOrUpdateAsync(this INotificationRecipientEmailOperations operations, string resourceGroupName, string serviceName, string notificationName, string email, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceName, notificationName, email, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Removes the email from the list of Notification.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='notificationName'>
        /// Notification Name Identifier.
        /// </param>
        /// <param name='email'>
        /// Email identifier.
        /// </param>
        public static void Delete(this INotificationRecipientEmailOperations operations, string resourceGroupName, string serviceName, string notificationName, string email)
        {
                ((INotificationRecipientEmailOperations)operations).DeleteAsync(resourceGroupName, serviceName, notificationName, email).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Removes the email from the list of Notification.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='notificationName'>
        /// Notification Name Identifier.
        /// </param>
        /// <param name='email'>
        /// Email identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this INotificationRecipientEmailOperations operations, string resourceGroupName, string serviceName, string notificationName, string email, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serviceName, notificationName, email, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
    }
}
