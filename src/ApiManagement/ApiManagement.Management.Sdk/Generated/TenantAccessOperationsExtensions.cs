// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for TenantAccessOperations
    /// </summary>
    public static partial class TenantAccessOperationsExtensions
    {
        /// <summary>
        /// Returns list of access infos - for Git and Management endpoints.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AccessInformationContract> ListByService(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<AccessInformationContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<AccessInformationContract>))
        {
                return ((ITenantAccessOperations)operations).ListByServiceAsync(resourceGroupName, serviceName, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns list of access infos - for Git and Management endpoints.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AccessInformationContract>> ListByServiceAsync(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<AccessInformationContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<AccessInformationContract>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByServiceWithHttpMessagesAsync(resourceGroupName, serviceName, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Tenant access metadata
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='accessName'>
        /// The identifier of the Access configuration.
        /// </param>
        public static bool GetEntityTag(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName)
        {
                return ((ITenantAccessOperations)operations).GetEntityTagAsync(resourceGroupName, serviceName, accessName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Tenant access metadata
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='accessName'>
        /// The identifier of the Access configuration.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<bool> GetEntityTagAsync(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetEntityTagWithHttpMessagesAsync(resourceGroupName, serviceName, accessName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get tenant access information details without secrets.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='accessName'>
        /// The identifier of the Access configuration.
        /// </param>
        public static AccessInformationContract Get(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName)
        {
                return ((ITenantAccessOperations)operations).GetAsync(resourceGroupName, serviceName, accessName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get tenant access information details without secrets.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='accessName'>
        /// The identifier of the Access configuration.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AccessInformationContract> GetAsync(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serviceName, accessName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update tenant access information details.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='accessName'>
        /// The identifier of the Access configuration.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        public static AccessInformationContract Create(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName, string ifMatch, AccessInformationCreateParameters parameters)
        {
                return ((ITenantAccessOperations)operations).CreateAsync(resourceGroupName, serviceName, accessName, ifMatch, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update tenant access information details.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='accessName'>
        /// The identifier of the Access configuration.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AccessInformationContract> CreateAsync(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName, string ifMatch, AccessInformationCreateParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, serviceName, accessName, ifMatch, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update tenant access information details.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='accessName'>
        /// The identifier of the Access configuration.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        public static AccessInformationContract Update(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName, string ifMatch, AccessInformationUpdateParameters parameters)
        {
                return ((ITenantAccessOperations)operations).UpdateAsync(resourceGroupName, serviceName, accessName, ifMatch, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update tenant access information details.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='accessName'>
        /// The identifier of the Access configuration.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AccessInformationContract> UpdateAsync(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName, string ifMatch, AccessInformationUpdateParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, serviceName, accessName, ifMatch, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Regenerate primary access key
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='accessName'>
        /// The identifier of the Access configuration.
        /// </param>
        public static void RegeneratePrimaryKey(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName)
        {
                ((ITenantAccessOperations)operations).RegeneratePrimaryKeyAsync(resourceGroupName, serviceName, accessName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Regenerate primary access key
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='accessName'>
        /// The identifier of the Access configuration.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RegeneratePrimaryKeyAsync(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RegeneratePrimaryKeyWithHttpMessagesAsync(resourceGroupName, serviceName, accessName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Regenerate secondary access key
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='accessName'>
        /// The identifier of the Access configuration.
        /// </param>
        public static void RegenerateSecondaryKey(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName)
        {
                ((ITenantAccessOperations)operations).RegenerateSecondaryKeyAsync(resourceGroupName, serviceName, accessName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Regenerate secondary access key
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='accessName'>
        /// The identifier of the Access configuration.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RegenerateSecondaryKeyAsync(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RegenerateSecondaryKeyWithHttpMessagesAsync(resourceGroupName, serviceName, accessName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Get tenant access information details.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='accessName'>
        /// The identifier of the Access configuration.
        /// </param>
        public static AccessInformationSecretsContract ListSecrets(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName)
        {
                return ((ITenantAccessOperations)operations).ListSecretsAsync(resourceGroupName, serviceName, accessName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get tenant access information details.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='accessName'>
        /// The identifier of the Access configuration.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AccessInformationSecretsContract> ListSecretsAsync(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSecretsWithHttpMessagesAsync(resourceGroupName, serviceName, accessName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns list of access infos - for Git and Management endpoints.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AccessInformationContract> ListByServiceNext(this ITenantAccessOperations operations, string nextPageLink)
        {
                return ((ITenantAccessOperations)operations).ListByServiceNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns list of access infos - for Git and Management endpoints.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AccessInformationContract>> ListByServiceNextAsync(this ITenantAccessOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByServiceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
