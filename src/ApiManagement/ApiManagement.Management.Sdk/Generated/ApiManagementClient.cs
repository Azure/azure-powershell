// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement
{
    using System.Linq;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Use these REST APIs for performing operations on entities like API,
    /// Product, and Subscription associated with your Azure API Management
    /// deployment.
    /// </summary>
    public partial class ApiManagementClient : Microsoft.Rest.ServiceClient<ApiManagementClient>, IApiManagementClient, IAzureClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }
        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; private set; }
        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; private set; }
        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        public Microsoft.Rest.ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// The API version to use for this operation.
        /// </summary>
        public string ApiVersion { get; private set; }

        /// <summary>
        /// Subscription credentials which uniquely identify Microsoft Azure
        /// subscription. The subscription ID forms part of the URI for every service
        /// call.
        /// </summary>
        public string SubscriptionId { get; set;}

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set;}

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default
        /// /// value is 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set;}

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When
        /// /// set to true a unique x-ms-client-request-id value is generated and
        /// /// included in each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set;}

        /// <summary>
        /// Gets the IApiOperations
        /// </summary>
        public virtual IApiOperations Api { get; private set; }
        /// <summary>
        /// Gets the IApiRevisionOperations
        /// </summary>
        public virtual IApiRevisionOperations ApiRevision { get; private set; }
        /// <summary>
        /// Gets the IApiReleaseOperations
        /// </summary>
        public virtual IApiReleaseOperations ApiRelease { get; private set; }
        /// <summary>
        /// Gets the IApiOperationOperations
        /// </summary>
        public virtual IApiOperationOperations ApiOperation { get; private set; }
        /// <summary>
        /// Gets the IApiOperationPolicyOperations
        /// </summary>
        public virtual IApiOperationPolicyOperations ApiOperationPolicy { get; private set; }
        /// <summary>
        /// Gets the ITagOperations
        /// </summary>
        public virtual ITagOperations Tag { get; private set; }
        /// <summary>
        /// Gets the IApiProductOperations
        /// </summary>
        public virtual IApiProductOperations ApiProduct { get; private set; }
        /// <summary>
        /// Gets the IApiPolicyOperations
        /// </summary>
        public virtual IApiPolicyOperations ApiPolicy { get; private set; }
        /// <summary>
        /// Gets the IApiSchemaOperations
        /// </summary>
        public virtual IApiSchemaOperations ApiSchema { get; private set; }
        /// <summary>
        /// Gets the IApiDiagnosticOperations
        /// </summary>
        public virtual IApiDiagnosticOperations ApiDiagnostic { get; private set; }
        /// <summary>
        /// Gets the IApiIssueOperations
        /// </summary>
        public virtual IApiIssueOperations ApiIssue { get; private set; }
        /// <summary>
        /// Gets the IApiIssueCommentOperations
        /// </summary>
        public virtual IApiIssueCommentOperations ApiIssueComment { get; private set; }
        /// <summary>
        /// Gets the IApiIssueAttachmentOperations
        /// </summary>
        public virtual IApiIssueAttachmentOperations ApiIssueAttachment { get; private set; }
        /// <summary>
        /// Gets the IApiTagDescriptionOperations
        /// </summary>
        public virtual IApiTagDescriptionOperations ApiTagDescription { get; private set; }
        /// <summary>
        /// Gets the IOperationOperations
        /// </summary>
        public virtual IOperationOperations Operation { get; private set; }
        /// <summary>
        /// Gets the IApiExportOperations
        /// </summary>
        public virtual IApiExportOperations ApiExport { get; private set; }
        /// <summary>
        /// Gets the IApiVersionSetOperations
        /// </summary>
        public virtual IApiVersionSetOperations ApiVersionSet { get; private set; }
        /// <summary>
        /// Gets the IAuthorizationServerOperations
        /// </summary>
        public virtual IAuthorizationServerOperations AuthorizationServer { get; private set; }
        /// <summary>
        /// Gets the IBackendOperations
        /// </summary>
        public virtual IBackendOperations Backend { get; private set; }
        /// <summary>
        /// Gets the ICacheOperations
        /// </summary>
        public virtual ICacheOperations Cache { get; private set; }
        /// <summary>
        /// Gets the ICertificateOperations
        /// </summary>
        public virtual ICertificateOperations Certificate { get; private set; }
        /// <summary>
        /// Gets the IContentTypeOperations
        /// </summary>
        public virtual IContentTypeOperations ContentType { get; private set; }
        /// <summary>
        /// Gets the IContentItemOperations
        /// </summary>
        public virtual IContentItemOperations ContentItem { get; private set; }
        /// <summary>
        /// Gets the IDeletedServicesOperations
        /// </summary>
        public virtual IDeletedServicesOperations DeletedServices { get; private set; }
        /// <summary>
        /// Gets the IApiManagementOperations
        /// </summary>
        public virtual IApiManagementOperations ApiManagementOperations { get; private set; }
        /// <summary>
        /// Gets the IApiManagementServiceSkusOperations
        /// </summary>
        public virtual IApiManagementServiceSkusOperations ApiManagementServiceSkus { get; private set; }
        /// <summary>
        /// Gets the IApiManagementServiceOperations
        /// </summary>
        public virtual IApiManagementServiceOperations ApiManagementService { get; private set; }
        /// <summary>
        /// Gets the IDiagnosticOperations
        /// </summary>
        public virtual IDiagnosticOperations Diagnostic { get; private set; }
        /// <summary>
        /// Gets the IEmailTemplateOperations
        /// </summary>
        public virtual IEmailTemplateOperations EmailTemplate { get; private set; }
        /// <summary>
        /// Gets the IGatewayOperations
        /// </summary>
        public virtual IGatewayOperations Gateway { get; private set; }
        /// <summary>
        /// Gets the IGatewayHostnameConfigurationOperations
        /// </summary>
        public virtual IGatewayHostnameConfigurationOperations GatewayHostnameConfiguration { get; private set; }
        /// <summary>
        /// Gets the IGatewayApiOperations
        /// </summary>
        public virtual IGatewayApiOperations GatewayApi { get; private set; }
        /// <summary>
        /// Gets the IGatewayCertificateAuthorityOperations
        /// </summary>
        public virtual IGatewayCertificateAuthorityOperations GatewayCertificateAuthority { get; private set; }
        /// <summary>
        /// Gets the IGroupOperations
        /// </summary>
        public virtual IGroupOperations Group { get; private set; }
        /// <summary>
        /// Gets the IGroupUserOperations
        /// </summary>
        public virtual IGroupUserOperations GroupUser { get; private set; }
        /// <summary>
        /// Gets the IIdentityProviderOperations
        /// </summary>
        public virtual IIdentityProviderOperations IdentityProvider { get; private set; }
        /// <summary>
        /// Gets the IIssueOperations
        /// </summary>
        public virtual IIssueOperations Issue { get; private set; }
        /// <summary>
        /// Gets the ILoggerOperations
        /// </summary>
        public virtual ILoggerOperations Logger { get; private set; }
        /// <summary>
        /// Gets the INamedValueOperations
        /// </summary>
        public virtual INamedValueOperations NamedValue { get; private set; }
        /// <summary>
        /// Gets the INetworkStatusOperations
        /// </summary>
        public virtual INetworkStatusOperations NetworkStatus { get; private set; }
        /// <summary>
        /// Gets the INotificationOperations
        /// </summary>
        public virtual INotificationOperations Notification { get; private set; }
        /// <summary>
        /// Gets the INotificationRecipientUserOperations
        /// </summary>
        public virtual INotificationRecipientUserOperations NotificationRecipientUser { get; private set; }
        /// <summary>
        /// Gets the INotificationRecipientEmailOperations
        /// </summary>
        public virtual INotificationRecipientEmailOperations NotificationRecipientEmail { get; private set; }
        /// <summary>
        /// Gets the IOpenIdConnectProviderOperations
        /// </summary>
        public virtual IOpenIdConnectProviderOperations OpenIdConnectProvider { get; private set; }
        /// <summary>
        /// Gets the IOutboundNetworkDependenciesEndpointsOperations
        /// </summary>
        public virtual IOutboundNetworkDependenciesEndpointsOperations OutboundNetworkDependenciesEndpoints { get; private set; }
        /// <summary>
        /// Gets the IPolicyOperations
        /// </summary>
        public virtual IPolicyOperations Policy { get; private set; }
        /// <summary>
        /// Gets the IPolicyDescriptionOperations
        /// </summary>
        public virtual IPolicyDescriptionOperations PolicyDescription { get; private set; }
        /// <summary>
        /// Gets the IPortalRevisionOperations
        /// </summary>
        public virtual IPortalRevisionOperations PortalRevision { get; private set; }
        /// <summary>
        /// Gets the IPortalSettingsOperations
        /// </summary>
        public virtual IPortalSettingsOperations PortalSettings { get; private set; }
        /// <summary>
        /// Gets the ISignInSettingsOperations
        /// </summary>
        public virtual ISignInSettingsOperations SignInSettings { get; private set; }
        /// <summary>
        /// Gets the ISignUpSettingsOperations
        /// </summary>
        public virtual ISignUpSettingsOperations SignUpSettings { get; private set; }
        /// <summary>
        /// Gets the IDelegationSettingsOperations
        /// </summary>
        public virtual IDelegationSettingsOperations DelegationSettings { get; private set; }
        /// <summary>
        /// Gets the IPrivateEndpointConnectionOperations
        /// </summary>
        public virtual IPrivateEndpointConnectionOperations PrivateEndpointConnection { get; private set; }
        /// <summary>
        /// Gets the IProductOperations
        /// </summary>
        public virtual IProductOperations Product { get; private set; }
        /// <summary>
        /// Gets the IProductApiOperations
        /// </summary>
        public virtual IProductApiOperations ProductApi { get; private set; }
        /// <summary>
        /// Gets the IProductGroupOperations
        /// </summary>
        public virtual IProductGroupOperations ProductGroup { get; private set; }
        /// <summary>
        /// Gets the IProductSubscriptionsOperations
        /// </summary>
        public virtual IProductSubscriptionsOperations ProductSubscriptions { get; private set; }
        /// <summary>
        /// Gets the IProductPolicyOperations
        /// </summary>
        public virtual IProductPolicyOperations ProductPolicy { get; private set; }
        /// <summary>
        /// Gets the IQuotaByCounterKeysOperations
        /// </summary>
        public virtual IQuotaByCounterKeysOperations QuotaByCounterKeys { get; private set; }
        /// <summary>
        /// Gets the IQuotaByPeriodKeysOperations
        /// </summary>
        public virtual IQuotaByPeriodKeysOperations QuotaByPeriodKeys { get; private set; }
        /// <summary>
        /// Gets the IRegionOperations
        /// </summary>
        public virtual IRegionOperations Region { get; private set; }
        /// <summary>
        /// Gets the IReportsOperations
        /// </summary>
        public virtual IReportsOperations Reports { get; private set; }
        /// <summary>
        /// Gets the IGlobalSchemaOperations
        /// </summary>
        public virtual IGlobalSchemaOperations GlobalSchema { get; private set; }
        /// <summary>
        /// Gets the ITenantSettingsOperations
        /// </summary>
        public virtual ITenantSettingsOperations TenantSettings { get; private set; }
        /// <summary>
        /// Gets the IApiManagementSkusOperations
        /// </summary>
        public virtual IApiManagementSkusOperations ApiManagementSkus { get; private set; }
        /// <summary>
        /// Gets the ISubscriptionOperations
        /// </summary>
        public virtual ISubscriptionOperations Subscription { get; private set; }
        /// <summary>
        /// Gets the ITagResourceOperations
        /// </summary>
        public virtual ITagResourceOperations TagResource { get; private set; }
        /// <summary>
        /// Gets the ITenantAccessOperations
        /// </summary>
        public virtual ITenantAccessOperations TenantAccess { get; private set; }
        /// <summary>
        /// Gets the ITenantAccessGitOperations
        /// </summary>
        public virtual ITenantAccessGitOperations TenantAccessGit { get; private set; }
        /// <summary>
        /// Gets the ITenantConfigurationOperations
        /// </summary>
        public virtual ITenantConfigurationOperations TenantConfiguration { get; private set; }
        /// <summary>
        /// Gets the IUserOperations
        /// </summary>
        public virtual IUserOperations User { get; private set; }
        /// <summary>
        /// Gets the IUserGroupOperations
        /// </summary>
        public virtual IUserGroupOperations UserGroup { get; private set; }
        /// <summary>
        /// Gets the IUserSubscriptionOperations
        /// </summary>
        public virtual IUserSubscriptionOperations UserSubscription { get; private set; }
        /// <summary>
        /// Gets the IUserIdentitiesOperations
        /// </summary>
        public virtual IUserIdentitiesOperations UserIdentities { get; private set; }
        /// <summary>
        /// Gets the IUserConfirmationPasswordOperations
        /// </summary>
        public virtual IUserConfirmationPasswordOperations UserConfirmationPassword { get; private set; }
        /// <summary>
        /// Initializes a new instance of the ApiManagementClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling ApiManagementClient.Dispose(). False: will not dispose provided httpClient</param>
        protected ApiManagementClient(System.Net.Http.HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the ApiManagementClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected ApiManagementClient(params System.Net.Http.DelegatingHandler[] handlers) : base(handlers)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the ApiManagementClient  class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected ApiManagementClient(System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the ApiManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected ApiManagementClient(System.Uri baseUri, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }
        /// <summary>
        /// Initializes a new instance of the ApiManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected ApiManagementClient(System.Uri baseUri, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
        
            this.BaseUri = baseUri;
        }
        /// <summary>
        /// Initializes a new instance of the ApiManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public ApiManagementClient(Microsoft.Rest.ServiceClientCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the ApiManagementClient class.
        /// </summary>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling ApiManagementClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public ApiManagementClient(Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the ApiManagementClient class.
        /// </summary>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public ApiManagementClient(Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the ApiManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public ApiManagementClient(System.Uri baseUri, Microsoft.Rest.ServiceClientCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers) 
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the ApiManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public ApiManagementClient(System.Uri baseUri, Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();

        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.Api = new ApiOperations(this);
            this.ApiRevision = new ApiRevisionOperations(this);
            this.ApiRelease = new ApiReleaseOperations(this);
            this.ApiOperation = new ApiOperationOperations(this);
            this.ApiOperationPolicy = new ApiOperationPolicyOperations(this);
            this.Tag = new TagOperations(this);
            this.ApiProduct = new ApiProductOperations(this);
            this.ApiPolicy = new ApiPolicyOperations(this);
            this.ApiSchema = new ApiSchemaOperations(this);
            this.ApiDiagnostic = new ApiDiagnosticOperations(this);
            this.ApiIssue = new ApiIssueOperations(this);
            this.ApiIssueComment = new ApiIssueCommentOperations(this);
            this.ApiIssueAttachment = new ApiIssueAttachmentOperations(this);
            this.ApiTagDescription = new ApiTagDescriptionOperations(this);
            this.Operation = new OperationOperations(this);
            this.ApiExport = new ApiExportOperations(this);
            this.ApiVersionSet = new ApiVersionSetOperations(this);
            this.AuthorizationServer = new AuthorizationServerOperations(this);
            this.Backend = new BackendOperations(this);
            this.Cache = new CacheOperations(this);
            this.Certificate = new CertificateOperations(this);
            this.ContentType = new ContentTypeOperations(this);
            this.ContentItem = new ContentItemOperations(this);
            this.DeletedServices = new DeletedServicesOperations(this);
            this.ApiManagementOperations = new ApiManagementOperations(this);
            this.ApiManagementServiceSkus = new ApiManagementServiceSkusOperations(this);
            this.ApiManagementService = new ApiManagementServiceOperations(this);
            this.Diagnostic = new DiagnosticOperations(this);
            this.EmailTemplate = new EmailTemplateOperations(this);
            this.Gateway = new GatewayOperations(this);
            this.GatewayHostnameConfiguration = new GatewayHostnameConfigurationOperations(this);
            this.GatewayApi = new GatewayApiOperations(this);
            this.GatewayCertificateAuthority = new GatewayCertificateAuthorityOperations(this);
            this.Group = new GroupOperations(this);
            this.GroupUser = new GroupUserOperations(this);
            this.IdentityProvider = new IdentityProviderOperations(this);
            this.Issue = new IssueOperations(this);
            this.Logger = new LoggerOperations(this);
            this.NamedValue = new NamedValueOperations(this);
            this.NetworkStatus = new NetworkStatusOperations(this);
            this.Notification = new NotificationOperations(this);
            this.NotificationRecipientUser = new NotificationRecipientUserOperations(this);
            this.NotificationRecipientEmail = new NotificationRecipientEmailOperations(this);
            this.OpenIdConnectProvider = new OpenIdConnectProviderOperations(this);
            this.OutboundNetworkDependenciesEndpoints = new OutboundNetworkDependenciesEndpointsOperations(this);
            this.Policy = new PolicyOperations(this);
            this.PolicyDescription = new PolicyDescriptionOperations(this);
            this.PortalRevision = new PortalRevisionOperations(this);
            this.PortalSettings = new PortalSettingsOperations(this);
            this.SignInSettings = new SignInSettingsOperations(this);
            this.SignUpSettings = new SignUpSettingsOperations(this);
            this.DelegationSettings = new DelegationSettingsOperations(this);
            this.PrivateEndpointConnection = new PrivateEndpointConnectionOperations(this);
            this.Product = new ProductOperations(this);
            this.ProductApi = new ProductApiOperations(this);
            this.ProductGroup = new ProductGroupOperations(this);
            this.ProductSubscriptions = new ProductSubscriptionsOperations(this);
            this.ProductPolicy = new ProductPolicyOperations(this);
            this.QuotaByCounterKeys = new QuotaByCounterKeysOperations(this);
            this.QuotaByPeriodKeys = new QuotaByPeriodKeysOperations(this);
            this.Region = new RegionOperations(this);
            this.Reports = new ReportsOperations(this);
            this.GlobalSchema = new GlobalSchemaOperations(this);
            this.TenantSettings = new TenantSettingsOperations(this);
            this.ApiManagementSkus = new ApiManagementSkusOperations(this);
            this.Subscription = new SubscriptionOperations(this);
            this.TagResource = new TagResourceOperations(this);
            this.TenantAccess = new TenantAccessOperations(this);
            this.TenantAccessGit = new TenantAccessGitOperations(this);
            this.TenantConfiguration = new TenantConfigurationOperations(this);
            this.User = new UserOperations(this);
            this.UserGroup = new UserGroupOperations(this);
            this.UserSubscription = new UserSubscriptionOperations(this);
            this.UserIdentities = new UserIdentitiesOperations(this);
            this.UserConfirmationPassword = new UserConfirmationPasswordOperations(this);
            this.BaseUri = new System.Uri("https://management.azure.com");
            this.ApiVersion = "2021-08-01";
            this.AcceptLanguage = "en-US";
            this.LongRunningOperationRetryTimeout = 30;
            this.GenerateClientRequestId = true;
            SerializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.TransformationJsonConverter());
            DeserializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.TransformationJsonConverter());
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Azure.CloudErrorJsonConverter());
        }
        /// <summary>
        /// Performs a connectivity check between the API Management service and a
        /// given destination, and returns metrics for the connection, as well as
        /// errors encountered while trying to establish it.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='connectivityCheckRequestParams'>
        /// Connectivity Check request parameters.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<ConnectivityCheckResponse>> PerformConnectivityCheckAsyncWithHttpMessagesAsync(string resourceGroupName, string serviceName, ConnectivityCheckRequest connectivityCheckRequestParams, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
                // Send Request
                Microsoft.Rest.Azure.AzureOperationResponse<ConnectivityCheckResponse> _response = await BeginPerformConnectivityCheckAsyncWithHttpMessagesAsync(resourceGroupName, serviceName, connectivityCheckRequestParams, customHeaders, cancellationToken).ConfigureAwait(false);
                return await this.GetPostOrDeleteOperationResultAsync(_response, customHeaders, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Performs a connectivity check between the API Management service and a
        /// given destination, and returns metrics for the connection, as well as
        /// errors encountered while trying to establish it.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='connectivityCheckRequestParams'>
        /// Connectivity Check request parameters.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<ConnectivityCheckResponse>> BeginPerformConnectivityCheckAsyncWithHttpMessagesAsync(string resourceGroupName, string serviceName, ConnectivityCheckRequest connectivityCheckRequestParams, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {



 
            if (connectivityCheckRequestParams == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "connectivityCheckRequestParams");
            }
            if (connectivityCheckRequestParams != null)
            {
                connectivityCheckRequestParams.Validate();
            }
            if (resourceGroupName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "resourceGroupName");
            }

            if (serviceName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "serviceName");
            }
            if (serviceName != null)
            {
                if (serviceName.Length > 50)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "serviceName", 50);
                }
                if (serviceName.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "serviceName", 1);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(serviceName, "^[a-zA-Z](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "serviceName", "^[a-zA-Z](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$");
                }
            }
            if (this.ApiVersion == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "this.ApiVersion");
            }

            if (this.SubscriptionId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "this.SubscriptionId");
            }

            // Tracing
            bool _shouldTrace = Microsoft.Rest.ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = Microsoft.Rest.ServiceClientTracing.NextInvocationId.ToString();
                System.Collections.Generic.Dictionary<string, object> tracingParameters = new System.Collections.Generic.Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serviceName", serviceName);

                tracingParameters.Add("connectivityCheckRequestParams", connectivityCheckRequestParams);

                tracingParameters.Add("cancellationToken", cancellationToken);
                Microsoft.Rest.ServiceClientTracing.Enter(_invocationId, this, "BeginPerformConnectivityCheckAsync", tracingParameters);
            }
            // Construct URL

            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/connectivityCheck").ToString();
            _url = _url.Replace("{resourceGroupName}", System.Uri.EscapeDataString(resourceGroupName));
            _url = _url.Replace("{serviceName}", System.Uri.EscapeDataString(serviceName));
            _url = _url.Replace("{subscriptionId}", System.Uri.EscapeDataString(this.SubscriptionId));

            System.Collections.Generic.List<string> _queryParameters = new System.Collections.Generic.List<string>();
            if (this.ApiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(this.ApiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += (_url.Contains("?") ? "&" : "?") + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new System.Net.Http.HttpRequestMessage();
            System.Net.Http.HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new System.Net.Http.HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (this.GenerateClientRequestId != null && this.GenerateClientRequestId.Value)
            {
                _httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", System.Guid.NewGuid().ToString());
            }
            if (this.AcceptLanguage != null)
            {
                if (_httpRequest.Headers.Contains("accept-language"))
                {
                    _httpRequest.Headers.Remove("accept-language");
                }
                _httpRequest.Headers.TryAddWithoutValidation("accept-language", this.AcceptLanguage);
            }

            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }
            // Serialize Request
            string _requestContent = null;
            if(connectivityCheckRequestParams != null)
            {
                _requestContent = Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(connectivityCheckRequestParams, this.SerializationSettings);
                _httpRequest.Content = new System.Net.Http.StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                Microsoft.Rest.ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                Microsoft.Rest.ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }

            System.Net.HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;

            if ((int)_statusCode != 200 && (int)_statusCode != 202)
            {
                var ex = new ErrorResponseException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    ErrorResponse _errorBody =  Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<ErrorResponse>(_responseContent, this.DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex.Body = _errorBody;
                    }
                }
                catch (Newtonsoft.Json.JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new Microsoft.Rest.HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new Microsoft.Rest.HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    Microsoft.Rest.ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new Microsoft.Rest.Azure.AzureOperationResponse<ConnectivityCheckResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            
            if (_httpResponse.Headers.Contains("x-ms-request-id"))
            {
                _result.RequestId = _httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<ConnectivityCheckResponse>(_responseContent, this.DeserializationSettings);
                }
                catch (Newtonsoft.Json.JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new Microsoft.Rest.SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                Microsoft.Rest.ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;





        }
    }
}