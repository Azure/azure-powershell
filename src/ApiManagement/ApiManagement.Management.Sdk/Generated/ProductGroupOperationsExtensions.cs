// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ProductGroupOperations
    /// </summary>
    public static partial class ProductGroupOperationsExtensions
    {
        /// <summary>
        /// Lists the collection of developer groups associated with the specified
        /// product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<GroupContract> ListByProduct(this IProductGroupOperations operations, string resourceGroupName, string serviceName, string productId, Microsoft.Rest.Azure.OData.ODataQuery<GroupContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<GroupContract>))
        {
                return ((IProductGroupOperations)operations).ListByProductAsync(resourceGroupName, serviceName, productId, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the collection of developer groups associated with the specified
        /// product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<GroupContract>> ListByProductAsync(this IProductGroupOperations operations, string resourceGroupName, string serviceName, string productId, Microsoft.Rest.Azure.OData.ODataQuery<GroupContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<GroupContract>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByProductWithHttpMessagesAsync(resourceGroupName, serviceName, productId, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Checks that Group entity specified by identifier is associated with the
        /// Product entity.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='groupId'>
        /// Group identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static bool CheckEntityExists(this IProductGroupOperations operations, string resourceGroupName, string serviceName, string productId, string groupId)
        {
                return ((IProductGroupOperations)operations).CheckEntityExistsAsync(resourceGroupName, serviceName, productId, groupId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Checks that Group entity specified by identifier is associated with the
        /// Product entity.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='groupId'>
        /// Group identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<bool> CheckEntityExistsAsync(this IProductGroupOperations operations, string resourceGroupName, string serviceName, string productId, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckEntityExistsWithHttpMessagesAsync(resourceGroupName, serviceName, productId, groupId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Adds the association between the specified developer group with the
        /// specified product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='groupId'>
        /// Group identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static GroupContract CreateOrUpdate(this IProductGroupOperations operations, string resourceGroupName, string serviceName, string productId, string groupId)
        {
                return ((IProductGroupOperations)operations).CreateOrUpdateAsync(resourceGroupName, serviceName, productId, groupId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Adds the association between the specified developer group with the
        /// specified product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='groupId'>
        /// Group identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<GroupContract> CreateOrUpdateAsync(this IProductGroupOperations operations, string resourceGroupName, string serviceName, string productId, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceName, productId, groupId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the association between the specified group and product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='groupId'>
        /// Group identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static void Delete(this IProductGroupOperations operations, string resourceGroupName, string serviceName, string productId, string groupId)
        {
                ((IProductGroupOperations)operations).DeleteAsync(resourceGroupName, serviceName, productId, groupId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the association between the specified group and product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='groupId'>
        /// Group identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IProductGroupOperations operations, string resourceGroupName, string serviceName, string productId, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serviceName, productId, groupId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists the collection of developer groups associated with the specified
        /// product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<GroupContract> ListByProductNext(this IProductGroupOperations operations, string nextPageLink)
        {
                return ((IProductGroupOperations)operations).ListByProductNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the collection of developer groups associated with the specified
        /// product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<GroupContract>> ListByProductNextAsync(this IProductGroupOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByProductNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
