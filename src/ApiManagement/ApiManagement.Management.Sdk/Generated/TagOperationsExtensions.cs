// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for TagOperations
    /// </summary>
    public static partial class TagOperationsExtensions
    {
        /// <summary>
        /// Lists all Tags associated with the Operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='operationId'>
        /// Operation identifier within an API. Must be unique in the current API
        /// Management service instance.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TagContract> ListByOperation(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, string operationId, Microsoft.Rest.Azure.OData.ODataQuery<TagContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<TagContract>))
        {
                return ((ITagOperations)operations).ListByOperationAsync(resourceGroupName, serviceName, apiId, operationId, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all Tags associated with the Operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='operationId'>
        /// Operation identifier within an API. Must be unique in the current API
        /// Management service instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TagContract>> ListByOperationAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, string operationId, Microsoft.Rest.Azure.OData.ODataQuery<TagContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<TagContract>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByOperationWithHttpMessagesAsync(resourceGroupName, serviceName, apiId, operationId, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the entity state version of the tag specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='operationId'>
        /// Operation identifier within an API. Must be unique in the current API
        /// Management service instance.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static bool GetEntityStateByOperation(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, string operationId, string tagId)
        {
                return ((ITagOperations)operations).GetEntityStateByOperationAsync(resourceGroupName, serviceName, apiId, operationId, tagId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the entity state version of the tag specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='operationId'>
        /// Operation identifier within an API. Must be unique in the current API
        /// Management service instance.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<bool> GetEntityStateByOperationAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, string operationId, string tagId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetEntityStateByOperationWithHttpMessagesAsync(resourceGroupName, serviceName, apiId, operationId, tagId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get tag associated with the Operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='operationId'>
        /// Operation identifier within an API. Must be unique in the current API
        /// Management service instance.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static TagContract GetByOperation(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, string operationId, string tagId)
        {
                return ((ITagOperations)operations).GetByOperationAsync(resourceGroupName, serviceName, apiId, operationId, tagId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get tag associated with the Operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='operationId'>
        /// Operation identifier within an API. Must be unique in the current API
        /// Management service instance.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TagContract> GetByOperationAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, string operationId, string tagId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetByOperationWithHttpMessagesAsync(resourceGroupName, serviceName, apiId, operationId, tagId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Assign tag to the Operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='operationId'>
        /// Operation identifier within an API. Must be unique in the current API
        /// Management service instance.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static TagContract AssignToOperation(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, string operationId, string tagId)
        {
                return ((ITagOperations)operations).AssignToOperationAsync(resourceGroupName, serviceName, apiId, operationId, tagId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Assign tag to the Operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='operationId'>
        /// Operation identifier within an API. Must be unique in the current API
        /// Management service instance.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TagContract> AssignToOperationAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, string operationId, string tagId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.AssignToOperationWithHttpMessagesAsync(resourceGroupName, serviceName, apiId, operationId, tagId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Detach the tag from the Operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='operationId'>
        /// Operation identifier within an API. Must be unique in the current API
        /// Management service instance.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static void DetachFromOperation(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, string operationId, string tagId)
        {
                ((ITagOperations)operations).DetachFromOperationAsync(resourceGroupName, serviceName, apiId, operationId, tagId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Detach the tag from the Operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='operationId'>
        /// Operation identifier within an API. Must be unique in the current API
        /// Management service instance.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DetachFromOperationAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, string operationId, string tagId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DetachFromOperationWithHttpMessagesAsync(resourceGroupName, serviceName, apiId, operationId, tagId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists all Tags associated with the API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TagContract> ListByApi(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, Microsoft.Rest.Azure.OData.ODataQuery<TagContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<TagContract>))
        {
                return ((ITagOperations)operations).ListByApiAsync(resourceGroupName, serviceName, apiId, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all Tags associated with the API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TagContract>> ListByApiAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, Microsoft.Rest.Azure.OData.ODataQuery<TagContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<TagContract>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByApiWithHttpMessagesAsync(resourceGroupName, serviceName, apiId, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the entity state version of the tag specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static bool GetEntityStateByApi(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, string tagId)
        {
                return ((ITagOperations)operations).GetEntityStateByApiAsync(resourceGroupName, serviceName, apiId, tagId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the entity state version of the tag specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<bool> GetEntityStateByApiAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, string tagId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetEntityStateByApiWithHttpMessagesAsync(resourceGroupName, serviceName, apiId, tagId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get tag associated with the API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static TagContract GetByApi(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, string tagId)
        {
                return ((ITagOperations)operations).GetByApiAsync(resourceGroupName, serviceName, apiId, tagId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get tag associated with the API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TagContract> GetByApiAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, string tagId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetByApiWithHttpMessagesAsync(resourceGroupName, serviceName, apiId, tagId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Assign tag to the Api.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static TagContract AssignToApi(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, string tagId)
        {
                return ((ITagOperations)operations).AssignToApiAsync(resourceGroupName, serviceName, apiId, tagId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Assign tag to the Api.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TagContract> AssignToApiAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, string tagId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.AssignToApiWithHttpMessagesAsync(resourceGroupName, serviceName, apiId, tagId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Detach the tag from the Api.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static void DetachFromApi(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, string tagId)
        {
                ((ITagOperations)operations).DetachFromApiAsync(resourceGroupName, serviceName, apiId, tagId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Detach the tag from the Api.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DetachFromApiAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string apiId, string tagId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DetachFromApiWithHttpMessagesAsync(resourceGroupName, serviceName, apiId, tagId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists all Tags associated with the Product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TagContract> ListByProduct(this ITagOperations operations, string resourceGroupName, string serviceName, string productId, Microsoft.Rest.Azure.OData.ODataQuery<TagContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<TagContract>))
        {
                return ((ITagOperations)operations).ListByProductAsync(resourceGroupName, serviceName, productId, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all Tags associated with the Product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TagContract>> ListByProductAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string productId, Microsoft.Rest.Azure.OData.ODataQuery<TagContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<TagContract>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByProductWithHttpMessagesAsync(resourceGroupName, serviceName, productId, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the entity state version of the tag specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static bool GetEntityStateByProduct(this ITagOperations operations, string resourceGroupName, string serviceName, string productId, string tagId)
        {
                return ((ITagOperations)operations).GetEntityStateByProductAsync(resourceGroupName, serviceName, productId, tagId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the entity state version of the tag specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<bool> GetEntityStateByProductAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string productId, string tagId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetEntityStateByProductWithHttpMessagesAsync(resourceGroupName, serviceName, productId, tagId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get tag associated with the Product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static TagContract GetByProduct(this ITagOperations operations, string resourceGroupName, string serviceName, string productId, string tagId)
        {
                return ((ITagOperations)operations).GetByProductAsync(resourceGroupName, serviceName, productId, tagId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get tag associated with the Product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TagContract> GetByProductAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string productId, string tagId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetByProductWithHttpMessagesAsync(resourceGroupName, serviceName, productId, tagId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Assign tag to the Product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static TagContract AssignToProduct(this ITagOperations operations, string resourceGroupName, string serviceName, string productId, string tagId)
        {
                return ((ITagOperations)operations).AssignToProductAsync(resourceGroupName, serviceName, productId, tagId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Assign tag to the Product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TagContract> AssignToProductAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string productId, string tagId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.AssignToProductWithHttpMessagesAsync(resourceGroupName, serviceName, productId, tagId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Detach the tag from the Product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static void DetachFromProduct(this ITagOperations operations, string resourceGroupName, string serviceName, string productId, string tagId)
        {
                ((ITagOperations)operations).DetachFromProductAsync(resourceGroupName, serviceName, productId, tagId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Detach the tag from the Product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='productId'>
        /// Product identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DetachFromProductAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string productId, string tagId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DetachFromProductWithHttpMessagesAsync(resourceGroupName, serviceName, productId, tagId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists a collection of tags defined within a service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='scope'>
        /// Scope like &#39;apis&#39;, &#39;products&#39; or &#39;apis/{apiId}
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TagContract> ListByService(this ITagOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<TagContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<TagContract>), string scope = default(string))
        {
                return ((ITagOperations)operations).ListByServiceAsync(resourceGroupName, serviceName, odataQuery, scope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists a collection of tags defined within a service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='scope'>
        /// Scope like &#39;apis&#39;, &#39;products&#39; or &#39;apis/{apiId}
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TagContract>> ListByServiceAsync(this ITagOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<TagContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<TagContract>), string scope = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByServiceWithHttpMessagesAsync(resourceGroupName, serviceName, odataQuery, scope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the entity state version of the tag specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static bool GetEntityState(this ITagOperations operations, string resourceGroupName, string serviceName, string tagId)
        {
                return ((ITagOperations)operations).GetEntityStateAsync(resourceGroupName, serviceName, tagId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the entity state version of the tag specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<bool> GetEntityStateAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string tagId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetEntityStateWithHttpMessagesAsync(resourceGroupName, serviceName, tagId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the details of the tag specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static TagContract Get(this ITagOperations operations, string resourceGroupName, string serviceName, string tagId)
        {
                return ((ITagOperations)operations).GetAsync(resourceGroupName, serviceName, tagId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the details of the tag specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TagContract> GetAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string tagId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serviceName, tagId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates a tag.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. Not required when creating an entity, but required when
        /// updating an entity.
        /// </param>
        public static TagContract CreateOrUpdate(this ITagOperations operations, string resourceGroupName, string serviceName, string tagId, TagCreateUpdateParameters parameters, string ifMatch = default(string))
        {
                return ((ITagOperations)operations).CreateOrUpdateAsync(resourceGroupName, serviceName, tagId, parameters, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a tag.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. Not required when creating an entity, but required when
        /// updating an entity.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TagContract> CreateOrUpdateAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string tagId, TagCreateUpdateParameters parameters, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceName, tagId, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates the details of the tag specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        public static TagContract Update(this ITagOperations operations, string resourceGroupName, string serviceName, string tagId, string ifMatch, TagCreateUpdateParameters parameters)
        {
                return ((ITagOperations)operations).UpdateAsync(resourceGroupName, serviceName, tagId, ifMatch, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates the details of the tag specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TagContract> UpdateAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string tagId, string ifMatch, TagCreateUpdateParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, serviceName, tagId, ifMatch, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes specific tag of the API Management service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        public static void Delete(this ITagOperations operations, string resourceGroupName, string serviceName, string tagId, string ifMatch)
        {
                ((ITagOperations)operations).DeleteAsync(resourceGroupName, serviceName, tagId, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes specific tag of the API Management service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='tagId'>
        /// Tag identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this ITagOperations operations, string resourceGroupName, string serviceName, string tagId, string ifMatch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serviceName, tagId, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists all Tags associated with the Operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TagContract> ListByOperationNext(this ITagOperations operations, string nextPageLink)
        {
                return ((ITagOperations)operations).ListByOperationNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all Tags associated with the Operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TagContract>> ListByOperationNextAsync(this ITagOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByOperationNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all Tags associated with the API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TagContract> ListByApiNext(this ITagOperations operations, string nextPageLink)
        {
                return ((ITagOperations)operations).ListByApiNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all Tags associated with the API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TagContract>> ListByApiNextAsync(this ITagOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByApiNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all Tags associated with the Product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TagContract> ListByProductNext(this ITagOperations operations, string nextPageLink)
        {
                return ((ITagOperations)operations).ListByProductNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all Tags associated with the Product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TagContract>> ListByProductNextAsync(this ITagOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByProductNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists a collection of tags defined within a service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TagContract> ListByServiceNext(this ITagOperations operations, string nextPageLink)
        {
                return ((ITagOperations)operations).ListByServiceNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists a collection of tags defined within a service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TagContract>> ListByServiceNextAsync(this ITagOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByServiceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
