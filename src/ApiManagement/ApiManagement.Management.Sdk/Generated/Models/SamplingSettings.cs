// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Sampling settings for Diagnostic.
    /// </summary>
    public partial class SamplingSettings
    {
        /// <summary>
        /// Initializes a new instance of the SamplingSettings class.
        /// </summary>
        public SamplingSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SamplingSettings class.
        /// </summary>

        /// <param name="samplingType">Sampling type.
        /// Possible values include: &#39;fixed&#39;</param>

        /// <param name="percentage">Rate of sampling for fixed-rate sampling.
        /// </param>
        public SamplingSettings(string samplingType = default(string), double? percentage = default(double?))

        {
            this.SamplingType = samplingType;
            this.Percentage = percentage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets sampling type. Possible values include: &#39;fixed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "samplingType")]
        public string SamplingType {get; set; }

        /// <summary>
        /// Gets or sets rate of sampling for fixed-rate sampling.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "percentage")]
        public double? Percentage {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.Percentage != null)
            {
                if (this.Percentage > 100)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "Percentage", 100);
                }
                if (this.Percentage < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Percentage", 0);
                }
            }
        }
    }
}