// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// A request to perform the connectivity check operation on a API Management
    /// service.
    /// </summary>
    public partial class ConnectivityCheckRequest
    {
        /// <summary>
        /// Initializes a new instance of the ConnectivityCheckRequest class.
        /// </summary>
        public ConnectivityCheckRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectivityCheckRequest class.
        /// </summary>

        /// <param name="source">Definitions about the connectivity check origin.
        /// </param>

        /// <param name="destination">The connectivity check operation destination.
        /// </param>

        /// <param name="preferredIPVersion">The IP version to be used. Only IPv4 is supported for now.
        /// Possible values include: &#39;IPv4&#39;</param>

        /// <param name="protocol">The request&#39;s protocol. Specific protocol configuration can be available
        /// based on this selection. The specified destination address must be coherent
        /// with this value.
        /// Possible values include: &#39;TCP&#39;, &#39;HTTP&#39;, &#39;HTTPS&#39;</param>

        /// <param name="protocolConfiguration">Protocol-specific configuration.
        /// </param>
        public ConnectivityCheckRequest(ConnectivityCheckRequestSource source, ConnectivityCheckRequestDestination destination, string preferredIPVersion = default(string), string protocol = default(string), ConnectivityCheckRequestProtocolConfiguration protocolConfiguration = default(ConnectivityCheckRequestProtocolConfiguration))

        {
            this.Source = source;
            this.Destination = destination;
            this.PreferredIPVersion = preferredIPVersion;
            this.Protocol = protocol;
            this.ProtocolConfiguration = protocolConfiguration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets definitions about the connectivity check origin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "source")]
        public ConnectivityCheckRequestSource Source {get; set; }

        /// <summary>
        /// Gets or sets the connectivity check operation destination.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destination")]
        public ConnectivityCheckRequestDestination Destination {get; set; }

        /// <summary>
        /// Gets or sets the IP version to be used. Only IPv4 is supported for now. Possible values include: &#39;IPv4&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "preferredIPVersion")]
        public string PreferredIPVersion {get; set; }

        /// <summary>
        /// Gets or sets the request&#39;s protocol. Specific protocol configuration can be
        /// available based on this selection. The specified destination address must
        /// be coherent with this value. Possible values include: &#39;TCP&#39;, &#39;HTTP&#39;, &#39;HTTPS&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets protocol-specific configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocolConfiguration")]
        public ConnectivityCheckRequestProtocolConfiguration ProtocolConfiguration {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Source == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Source");
            }
            if (this.Destination == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Destination");
            }
            if (this.Source != null)
            {
                this.Source.Validate();
            }
            if (this.Destination != null)
            {
                this.Destination.Validate();
            }



        }
    }
}