// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Details of the Credentials used to connect to Backend.
    /// </summary>
    public partial class BackendCredentialsContract
    {
        /// <summary>
        /// Initializes a new instance of the BackendCredentialsContract class.
        /// </summary>
        public BackendCredentialsContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BackendCredentialsContract class.
        /// </summary>

        /// <param name="certificateIds">List of Client Certificate Ids.
        /// </param>

        /// <param name="certificate">List of Client Certificate Thumbprints. Will be ignored if certificatesIds
        /// are provided.
        /// </param>

        /// <param name="query">Query Parameter description.
        /// </param>

        /// <param name="header">Header Parameter description.
        /// </param>

        /// <param name="authorization">Authorization header authentication
        /// </param>
        public BackendCredentialsContract(System.Collections.Generic.IList<string> certificateIds = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> certificate = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IDictionary<string, System.Collections.Generic.IList<string>> query = default(System.Collections.Generic.IDictionary<string, System.Collections.Generic.IList<string>>), System.Collections.Generic.IDictionary<string, System.Collections.Generic.IList<string>> header = default(System.Collections.Generic.IDictionary<string, System.Collections.Generic.IList<string>>), BackendAuthorizationHeaderCredentials authorization = default(BackendAuthorizationHeaderCredentials))

        {
            this.CertificateIds = certificateIds;
            this.Certificate = certificate;
            this.Query = query;
            this.Header = header;
            this.Authorization = authorization;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets list of Client Certificate Ids.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "certificateIds")]
        public System.Collections.Generic.IList<string> CertificateIds {get; set; }

        /// <summary>
        /// Gets or sets list of Client Certificate Thumbprints. Will be ignored if
        /// certificatesIds are provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "certificate")]
        public System.Collections.Generic.IList<string> Certificate {get; set; }

        /// <summary>
        /// Gets or sets query Parameter description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "query")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IList<string>> Query {get; set; }

        /// <summary>
        /// Gets or sets header Parameter description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "header")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IList<string>> Header {get; set; }

        /// <summary>
        /// Gets or sets authorization header authentication
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authorization")]
        public BackendAuthorizationHeaderCredentials Authorization {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.CertificateIds != null)
            {
                if (this.CertificateIds.Count > 32)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxItems, "CertificateIds", 32);
                }
            }
            if (this.Certificate != null)
            {
                if (this.Certificate.Count > 32)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxItems, "Certificate", 32);
                }
            }


            if (this.Authorization != null)
            {
                this.Authorization.Validate();
            }
        }
    }
}