// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Gateway hostname configuration details.
    /// </summary>
    public partial class GatewayHostnameConfigurationContractProperties
    {
        /// <summary>
        /// Initializes a new instance of the GatewayHostnameConfigurationContractProperties class.
        /// </summary>
        public GatewayHostnameConfigurationContractProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GatewayHostnameConfigurationContractProperties class.
        /// </summary>

        /// <param name="hostname">Hostname value. Supports valid domain name, partial or full wildcard
        /// </param>

        /// <param name="certificateId">Identifier of Certificate entity that will be used for TLS connection
        /// establishment
        /// </param>

        /// <param name="negotiateClientCertificate">Determines whether gateway requests client certificate
        /// </param>

        /// <param name="tls10Enabled">Specifies if TLS 1.0 is supported
        /// </param>

        /// <param name="tls11Enabled">Specifies if TLS 1.1 is supported
        /// </param>

        /// <param name="http2Enabled">Specifies if HTTP/2.0 is supported
        /// </param>
        public GatewayHostnameConfigurationContractProperties(string hostname = default(string), string certificateId = default(string), bool? negotiateClientCertificate = default(bool?), bool? tls10Enabled = default(bool?), bool? tls11Enabled = default(bool?), bool? http2Enabled = default(bool?))

        {
            this.Hostname = hostname;
            this.CertificateId = certificateId;
            this.NegotiateClientCertificate = negotiateClientCertificate;
            this.Tls10Enabled = tls10Enabled;
            this.Tls11Enabled = tls11Enabled;
            this.Http2Enabled = http2Enabled;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets hostname value. Supports valid domain name, partial or full
        /// wildcard
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostname")]
        public string Hostname {get; set; }

        /// <summary>
        /// Gets or sets identifier of Certificate entity that will be used for TLS
        /// connection establishment
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "certificateId")]
        public string CertificateId {get; set; }

        /// <summary>
        /// Gets or sets determines whether gateway requests client certificate
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "negotiateClientCertificate")]
        public bool? NegotiateClientCertificate {get; set; }

        /// <summary>
        /// Gets or sets specifies if TLS 1.0 is supported
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tls10Enabled")]
        public bool? Tls10Enabled {get; set; }

        /// <summary>
        /// Gets or sets specifies if TLS 1.1 is supported
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tls11Enabled")]
        public bool? Tls11Enabled {get; set; }

        /// <summary>
        /// Gets or sets specifies if HTTP/2.0 is supported
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "http2Enabled")]
        public bool? Http2Enabled {get; set; }
    }
}