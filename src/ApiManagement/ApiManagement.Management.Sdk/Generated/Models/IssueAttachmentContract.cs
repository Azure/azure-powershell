// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Issue Attachment Contract details.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class IssueAttachmentContract : Resource
    {
        /// <summary>
        /// Initializes a new instance of the IssueAttachmentContract class.
        /// </summary>
        public IssueAttachmentContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IssueAttachmentContract class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="title">Filename by which the binary data will be saved.
        /// </param>

        /// <param name="contentFormat">Either &#39;link&#39; if content is provided via an HTTP link or the MIME type of
        /// the Base64-encoded binary data provided in the &#39;content&#39; property.
        /// </param>

        /// <param name="content">An HTTP link or Base64-encoded binary data.
        /// </param>
        public IssueAttachmentContract(string id = default(string), string name = default(string), string type = default(string), string title = default(string), string contentFormat = default(string), string content = default(string))

        : base(id, name, type)
        {
            this.Title = title;
            this.ContentFormat = contentFormat;
            this.Content = content;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets filename by which the binary data will be saved.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.title")]
        public string Title {get; set; }

        /// <summary>
        /// Gets or sets either &#39;link&#39; if content is provided via an HTTP link or the
        /// MIME type of the Base64-encoded binary data provided in the &#39;content&#39;
        /// property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.contentFormat")]
        public string ContentFormat {get; set; }

        /// <summary>
        /// Gets or sets an HTTP link or Base64-encoded binary data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.content")]
        public string Content {get; set; }
    }
}