// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// NamedValue update Parameters.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class NamedValueUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the NamedValueUpdateParameters class.
        /// </summary>
        public NamedValueUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NamedValueUpdateParameters class.
        /// </summary>

        /// <param name="tags">Optional tags that when provided can be used to filter the NamedValue list.
        /// </param>

        /// <param name="secret">Determines whether the value is a secret and should be encrypted or not.
        /// Default value is false.
        /// </param>

        /// <param name="displayName">Unique name of NamedValue. It may contain only letters, digits, period,
        /// dash, and underscore characters.
        /// </param>

        /// <param name="value">Value of the NamedValue. Can contain policy expressions. It may not be
        /// empty or consist only of whitespace.
        /// </param>

        /// <param name="keyVault">KeyVault location details of the namedValue.
        /// </param>
        public NamedValueUpdateParameters(System.Collections.Generic.IList<string> tags = default(System.Collections.Generic.IList<string>), bool? secret = default(bool?), string displayName = default(string), string value = default(string), KeyVaultContractCreateProperties keyVault = default(KeyVaultContractCreateProperties))

        {
            this.Tags = tags;
            this.Secret = secret;
            this.DisplayName = displayName;
            this.Value = value;
            this.KeyVault = keyVault;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets optional tags that when provided can be used to filter the
        /// NamedValue list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.tags")]
        public System.Collections.Generic.IList<string> Tags {get; set; }

        /// <summary>
        /// Gets or sets determines whether the value is a secret and should be
        /// encrypted or not. Default value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.secret")]
        public bool? Secret {get; set; }

        /// <summary>
        /// Gets or sets unique name of NamedValue. It may contain only letters,
        /// digits, period, dash, and underscore characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets value of the NamedValue. Can contain policy expressions. It
        /// may not be empty or consist only of whitespace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.value")]
        public string Value {get; set; }

        /// <summary>
        /// Gets or sets keyVault location details of the namedValue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.keyVault")]
        public KeyVaultContractCreateProperties KeyVault {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Tags != null)
            {
                if (this.Tags.Count > 32)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxItems, "Tags", 32);
                }
            }
            if (this.DisplayName != null)
            {
                if (this.DisplayName.Length > 256)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "DisplayName", 256);
                }
                if (this.DisplayName.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "DisplayName", 1);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.DisplayName, "^[A-Za-z0-9-._]+$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "DisplayName", "^[A-Za-z0-9-._]+$");
                }
            }
            if (this.Value != null)
            {
                if (this.Value.Length > 4096)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Value", 4096);
                }
                if (this.Value.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "Value", 1);
                }
            }

        }
    }
}