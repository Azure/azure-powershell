// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Parameters supplied to the Create Backend operation.
    /// </summary>
    public partial class BackendContractProperties : BackendBaseParameters
    {
        /// <summary>
        /// Initializes a new instance of the BackendContractProperties class.
        /// </summary>
        public BackendContractProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BackendContractProperties class.
        /// </summary>

        /// <param name="title">Backend Title.
        /// </param>

        /// <param name="description">Backend Description.
        /// </param>

        /// <param name="resourceId">Management Uri of the Resource in External System. This url can be the Arm
        /// Resource Id of Logic Apps, Function Apps or API Apps.
        /// </param>

        /// <param name="properties">Backend Properties contract
        /// </param>

        /// <param name="credentials">Backend Credentials Contract Properties
        /// </param>

        /// <param name="proxy">Backend Proxy Contract Properties
        /// </param>

        /// <param name="tls">Backend TLS Properties
        /// </param>

        /// <param name="url">Runtime Url of the Backend.
        /// </param>

        /// <param name="protocol">Backend communication protocol.
        /// Possible values include: &#39;http&#39;, &#39;soap&#39;</param>
        public BackendContractProperties(string url, string protocol, string title = default(string), string description = default(string), string resourceId = default(string), BackendProperties properties = default(BackendProperties), BackendCredentialsContract credentials = default(BackendCredentialsContract), BackendProxyContract proxy = default(BackendProxyContract), BackendTlsProperties tls = default(BackendTlsProperties))

        : base(title, description, resourceId, properties, credentials, proxy, tls)
        {
            this.Url = url;
            this.Protocol = protocol;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets runtime Url of the Backend.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "url")]
        public string Url {get; set; }

        /// <summary>
        /// Gets or sets backend communication protocol. Possible values include: &#39;http&#39;, &#39;soap&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public string Protocol {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Url == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Url");
            }
            if (this.Protocol == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Protocol");
            }
            if (this.Url != null)
            {
                if (this.Url.Length > 2000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Url", 2000);
                }
                if (this.Url.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "Url", 1);
                }
            }

        }
    }
}