// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Operation parameters details.
    /// </summary>
    public partial class ParameterContract
    {
        /// <summary>
        /// Initializes a new instance of the ParameterContract class.
        /// </summary>
        public ParameterContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ParameterContract class.
        /// </summary>

        /// <param name="name">Parameter name.
        /// </param>

        /// <param name="description">Parameter description.
        /// </param>

        /// <param name="type">Parameter type.
        /// </param>

        /// <param name="defaultValue">Default parameter value.
        /// </param>

        /// <param name="required">Specifies whether parameter is required or not.
        /// </param>

        /// <param name="values">Parameter values.
        /// </param>

        /// <param name="schemaId">Schema identifier.
        /// </param>

        /// <param name="typeName">Type name defined by the schema.
        /// </param>

        /// <param name="examples">Exampled defined for the parameter.
        /// </param>
        public ParameterContract(string name, string type, string description = default(string), string defaultValue = default(string), bool? required = default(bool?), System.Collections.Generic.IList<string> values = default(System.Collections.Generic.IList<string>), string schemaId = default(string), string typeName = default(string), System.Collections.Generic.IDictionary<string, ParameterExampleContract> examples = default(System.Collections.Generic.IDictionary<string, ParameterExampleContract>))

        {
            this.Name = name;
            this.Description = description;
            this.Type = type;
            this.DefaultValue = defaultValue;
            this.Required = required;
            this.Values = values;
            this.SchemaId = schemaId;
            this.TypeName = typeName;
            this.Examples = examples;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets parameter name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets parameter description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets parameter type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; set; }

        /// <summary>
        /// Gets or sets default parameter value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultValue")]
        public string DefaultValue {get; set; }

        /// <summary>
        /// Gets or sets specifies whether parameter is required or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "required")]
        public bool? Required {get; set; }

        /// <summary>
        /// Gets or sets parameter values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "values")]
        public System.Collections.Generic.IList<string> Values {get; set; }

        /// <summary>
        /// Gets or sets schema identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "schemaId")]
        public string SchemaId {get; set; }

        /// <summary>
        /// Gets or sets type name defined by the schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeName")]
        public string TypeName {get; set; }

        /// <summary>
        /// Gets or sets exampled defined for the parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "examples")]
        public System.Collections.Generic.IDictionary<string, ParameterExampleContract> Examples {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (this.Type == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Type");
            }








        }
    }
}