// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Logger details.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class LoggerContract : Resource
    {
        /// <summary>
        /// Initializes a new instance of the LoggerContract class.
        /// </summary>
        public LoggerContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LoggerContract class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="loggerType">Logger type.
        /// Possible values include: &#39;azureEventHub&#39;, &#39;applicationInsights&#39;,
        /// &#39;azureMonitor&#39;</param>

        /// <param name="description">Logger description.
        /// </param>

        /// <param name="credentials">The name and SendRule connection string of the event hub for azureEventHub
        /// logger.
        /// Instrumentation key for applicationInsights logger.
        /// </param>

        /// <param name="isBuffered">Whether records are buffered in the logger before publishing. Default is
        /// assumed to be true.
        /// </param>

        /// <param name="resourceId">Azure Resource Id of a log target (either Azure Event Hub resource or Azure
        /// Application Insights resource).
        /// </param>
        public LoggerContract(string id = default(string), string name = default(string), string type = default(string), string loggerType = default(string), string description = default(string), System.Collections.Generic.IDictionary<string, string> credentials = default(System.Collections.Generic.IDictionary<string, string>), bool? isBuffered = default(bool?), string resourceId = default(string))

        : base(id, name, type)
        {
            this.LoggerType = loggerType;
            this.Description = description;
            this.Credentials = credentials;
            this.IsBuffered = isBuffered;
            this.ResourceId = resourceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets logger type. Possible values include: &#39;azureEventHub&#39;, &#39;applicationInsights&#39;, &#39;azureMonitor&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.loggerType")]
        public string LoggerType {get; set; }

        /// <summary>
        /// Gets or sets logger description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets the name and SendRule connection string of the event hub for
        /// azureEventHub logger.
        /// Instrumentation key for applicationInsights logger.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.credentials")]
        public System.Collections.Generic.IDictionary<string, string> Credentials {get; set; }

        /// <summary>
        /// Gets or sets whether records are buffered in the logger before publishing.
        /// Default is assumed to be true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isBuffered")]
        public bool? IsBuffered {get; set; }

        /// <summary>
        /// Gets or sets azure Resource Id of a log target (either Azure Event Hub
        /// resource or Azure Application Insights resource).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceId")]
        public string ResourceId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.Description != null)
            {
                if (this.Description.Length > 256)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Description", 256);
                }
            }


        }
    }
}