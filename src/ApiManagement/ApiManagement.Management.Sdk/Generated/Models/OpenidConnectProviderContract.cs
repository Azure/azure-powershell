// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// OpenId Connect Provider details.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class OpenidConnectProviderContract : Resource
    {
        /// <summary>
        /// Initializes a new instance of the OpenidConnectProviderContract class.
        /// </summary>
        public OpenidConnectProviderContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OpenidConnectProviderContract class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="displayName">User-friendly OpenID Connect Provider name.
        /// </param>

        /// <param name="description">User-friendly description of OpenID Connect Provider.
        /// </param>

        /// <param name="metadataEndpoint">Metadata endpoint URI.
        /// </param>

        /// <param name="clientId">Client ID of developer console which is the client application.
        /// </param>

        /// <param name="clientSecret">Client Secret of developer console which is the client application.
        /// </param>
        public OpenidConnectProviderContract(string id = default(string), string name = default(string), string type = default(string), string displayName = default(string), string description = default(string), string metadataEndpoint = default(string), string clientId = default(string), string clientSecret = default(string))

        : base(id, name, type)
        {
            this.DisplayName = displayName;
            this.Description = description;
            this.MetadataEndpoint = metadataEndpoint;
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets user-friendly OpenID Connect Provider name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets user-friendly description of OpenID Connect Provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets metadata endpoint URI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.metadataEndpoint")]
        public string MetadataEndpoint {get; set; }

        /// <summary>
        /// Gets or sets client ID of developer console which is the client
        /// application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.clientId")]
        public string ClientId {get; set; }

        /// <summary>
        /// Gets or sets client Secret of developer console which is the client
        /// application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.clientSecret")]
        public string ClientSecret {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DisplayName != null)
            {
                if (this.DisplayName.Length > 50)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "DisplayName", 50);
                }
            }




        }
    }
}