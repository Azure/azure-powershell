// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Parameter supplied to Update Api Management Service.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ApiManagementServiceUpdateParameters : ApimResource
    {
        /// <summary>
        /// Initializes a new instance of the ApiManagementServiceUpdateParameters class.
        /// </summary>
        public ApiManagementServiceUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApiManagementServiceUpdateParameters class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type for API Management resource is set to
        /// Microsoft.ApiManagement.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="sku">SKU properties of the API Management service.
        /// </param>

        /// <param name="identity">Managed service identity of the Api Management service.
        /// </param>

        /// <param name="etag">ETag of the resource.
        /// </param>

        /// <param name="zones">A list of availability zones denoting where the resource needs to come
        /// from.
        /// </param>

        /// <param name="platformVersion">Compute Platform Version running the service in this location.
        /// Possible values include: &#39;undetermined&#39;, &#39;stv1&#39;, &#39;stv2&#39;, &#39;mtv1&#39;</param>

        /// <param name="notificationSenderEmail">Email address from which the notification will be sent.
        /// </param>

        /// <param name="provisioningState">The current provisioning state of the API Management service which can be
        /// one of the following:
        /// Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
        /// </param>

        /// <param name="targetProvisioningState">The provisioning state of the API Management service, which is targeted by
        /// the long running operation started on the service.
        /// </param>

        /// <param name="createdAtUtc">Creation UTC date of the API Management service.The date conforms to the
        /// following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601
        /// standard.
        /// </param>

        /// <param name="gatewayUrl">Gateway URL of the API Management service.
        /// </param>

        /// <param name="gatewayRegionalUrl">Gateway URL of the API Management service in the Default Region.
        /// </param>

        /// <param name="portalUrl">Publisher portal endpoint Url of the API Management service.
        /// </param>

        /// <param name="managementApiUrl">Management API endpoint URL of the API Management service.
        /// </param>

        /// <param name="scmUrl">SCM endpoint URL of the API Management service.
        /// </param>

        /// <param name="developerPortalUrl">DEveloper Portal endpoint URL of the API Management service.
        /// </param>

        /// <param name="hostnameConfigurations">Custom hostname configuration of the API Management service.
        /// </param>

        /// <param name="publicIPAddresses">Public Static Load Balanced IP addresses of the API Management service in
        /// Primary region. Available only for Basic, Standard, Premium and Isolated
        /// SKU.
        /// </param>

        /// <param name="privateIPAddresses">Private Static Load Balanced IP addresses of the API Management service in
        /// Primary region which is deployed in an Internal Virtual Network. Available
        /// only for Basic, Standard, Premium and Isolated SKU.
        /// </param>

        /// <param name="publicIPAddressId">Public Standard SKU IP V4 based IP address to be associated with Virtual
        /// Network deployed service in the region. Supported only for Developer and
        /// Premium SKU being deployed in Virtual Network.
        /// </param>

        /// <param name="publicNetworkAccess">Whether or not public endpoint access is allowed for this API Management
        /// service.  Value is optional but if passed in, must be &#39;Enabled&#39; or
        /// &#39;Disabled&#39;. If &#39;Disabled&#39;, private endpoints are the exclusive access
        /// method. Default value is &#39;Enabled&#39;
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="virtualNetworkConfiguration">Virtual network configuration of the API Management service.
        /// </param>

        /// <param name="additionalLocations">Additional datacenter locations of the API Management service.
        /// </param>

        /// <param name="customProperties">Custom properties of the API Management service.&lt;/br&gt;Setting
        /// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`
        /// will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1
        /// and 1.2).&lt;/br&gt;Setting
        /// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can
        /// be used to disable just TLS 1.1.&lt;/br&gt;Setting
        /// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can
        /// be used to disable TLS 1.0 on an API Management service.&lt;/br&gt;Setting
        /// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11`
        /// can be used to disable just TLS 1.1 for communications with
        /// backends.&lt;/br&gt;Setting
        /// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10`
        /// can be used to disable TLS 1.0 for communications with
        /// backends.&lt;/br&gt;Setting
        /// `Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2` can
        /// be used to enable HTTP2 protocol on an API Management service.&lt;/br&gt;Not
        /// specifying any of these properties on PATCH operation will reset omitted
        /// properties&#39; values to their defaults. For all the settings except Http2 the
        /// default value is `True` if the service was created on or before April 1st
        /// 2018 and `False` otherwise. Http2 setting&#39;s default value is
        /// `False`.&lt;/br&gt;&lt;/br&gt;You can disable any of next ciphers by using settings
        /// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.[cipher_name]`:
        /// TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
        /// TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
        /// TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256,
        /// TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA,
        /// TLS_RSA_WITH_AES_128_CBC_SHA. For example,
        /// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256`:`false`.
        /// The default value is `true` for them.  Note: next ciphers can&#39;t be disabled
        /// since they are required by Azure CloudService internal components:
        /// TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384
        /// </param>

        /// <param name="certificates">List of Certificates that need to be installed in the API Management
        /// service. Max supported certificates that can be installed is 10.
        /// </param>

        /// <param name="enableClientCertificate">Property only meant to be used for Consumption SKU Service. This enforces a
        /// client certificate to be presented on each request to the gateway. This
        /// also enables the ability to authenticate the certificate in the policy on
        /// the gateway.
        /// </param>

        /// <param name="disableGateway">Property only valid for an Api Management service deployed in multiple
        /// locations. This can be used to disable the gateway in master region.
        /// </param>

        /// <param name="virtualNetworkType">The type of VPN in which API Management service needs to be configured in.
        /// None (Default Value) means the API Management service is not part of any
        /// Virtual Network, External means the API Management deployment is set up
        /// inside a Virtual Network having an Internet Facing Endpoint, and Internal
        /// means that API Management deployment is setup inside a Virtual Network
        /// having an Intranet Facing Endpoint only.
        /// Possible values include: &#39;None&#39;, &#39;External&#39;, &#39;Internal&#39;</param>

        /// <param name="apiVersionConstraint">Control Plane Apis version constraint for the API Management service.
        /// </param>

        /// <param name="restore">Undelete Api Management Service if it was previously soft-deleted. If this
        /// flag is specified and set to True all other properties will be ignored.
        /// </param>

        /// <param name="privateEndpointConnections">List of Private Endpoint Connections of this service.
        /// </param>

        /// <param name="publisherEmail">Publisher email.
        /// </param>

        /// <param name="publisherName">Publisher name.
        /// </param>
        public ApiManagementServiceUpdateParameters(string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), ApiManagementServiceSkuProperties sku = default(ApiManagementServiceSkuProperties), ApiManagementServiceIdentity identity = default(ApiManagementServiceIdentity), string etag = default(string), System.Collections.Generic.IList<string> zones = default(System.Collections.Generic.IList<string>), string platformVersion = default(string), string notificationSenderEmail = default(string), string provisioningState = default(string), string targetProvisioningState = default(string), System.DateTime? createdAtUtc = default(System.DateTime?), string gatewayUrl = default(string), string gatewayRegionalUrl = default(string), string portalUrl = default(string), string managementApiUrl = default(string), string scmUrl = default(string), string developerPortalUrl = default(string), System.Collections.Generic.IList<HostnameConfiguration> hostnameConfigurations = default(System.Collections.Generic.IList<HostnameConfiguration>), System.Collections.Generic.IList<string> publicIPAddresses = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> privateIPAddresses = default(System.Collections.Generic.IList<string>), string publicIPAddressId = default(string), string publicNetworkAccess = default(string), VirtualNetworkConfiguration virtualNetworkConfiguration = default(VirtualNetworkConfiguration), System.Collections.Generic.IList<AdditionalLocation> additionalLocations = default(System.Collections.Generic.IList<AdditionalLocation>), System.Collections.Generic.IDictionary<string, string> customProperties = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IList<CertificateConfiguration> certificates = default(System.Collections.Generic.IList<CertificateConfiguration>), bool? enableClientCertificate = default(bool?), bool? disableGateway = default(bool?), string virtualNetworkType = default(string), ApiVersionConstraint apiVersionConstraint = default(ApiVersionConstraint), bool? restore = default(bool?), System.Collections.Generic.IList<RemotePrivateEndpointConnectionWrapper> privateEndpointConnections = default(System.Collections.Generic.IList<RemotePrivateEndpointConnectionWrapper>), string publisherEmail = default(string), string publisherName = default(string))

        : base(id, name, type, tags)
        {
            this.Sku = sku;
            this.Identity = identity;
            this.Etag = etag;
            this.Zones = zones;
            this.PlatformVersion = platformVersion;
            this.NotificationSenderEmail = notificationSenderEmail;
            this.ProvisioningState = provisioningState;
            this.TargetProvisioningState = targetProvisioningState;
            this.CreatedAtUtc = createdAtUtc;
            this.GatewayUrl = gatewayUrl;
            this.GatewayRegionalUrl = gatewayRegionalUrl;
            this.PortalUrl = portalUrl;
            this.ManagementApiUrl = managementApiUrl;
            this.ScmUrl = scmUrl;
            this.DeveloperPortalUrl = developerPortalUrl;
            this.HostnameConfigurations = hostnameConfigurations;
            this.PublicIPAddresses = publicIPAddresses;
            this.PrivateIPAddresses = privateIPAddresses;
            this.PublicIPAddressId = publicIPAddressId;
            this.PublicNetworkAccess = publicNetworkAccess;
            this.VirtualNetworkConfiguration = virtualNetworkConfiguration;
            this.AdditionalLocations = additionalLocations;
            this.CustomProperties = customProperties;
            this.Certificates = certificates;
            this.EnableClientCertificate = enableClientCertificate;
            this.DisableGateway = disableGateway;
            this.VirtualNetworkType = virtualNetworkType;
            this.ApiVersionConstraint = apiVersionConstraint;
            this.Restore = restore;
            this.PrivateEndpointConnections = privateEndpointConnections;
            this.PublisherEmail = publisherEmail;
            this.PublisherName = publisherName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets sKU properties of the API Management service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sku")]
        public ApiManagementServiceSkuProperties Sku {get; set; }

        /// <summary>
        /// Gets or sets managed service identity of the Api Management service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public ApiManagementServiceIdentity Identity {get; set; }

        /// <summary>
        /// Gets eTag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets or sets a list of availability zones denoting where the resource needs
        /// to come from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "zones")]
        public System.Collections.Generic.IList<string> Zones {get; set; }

        /// <summary>
        /// Gets compute Platform Version running the service in this location. Possible values include: &#39;undetermined&#39;, &#39;stv1&#39;, &#39;stv2&#39;, &#39;mtv1&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.platformVersion")]
        public string PlatformVersion {get; private set; }

        /// <summary>
        /// Gets or sets email address from which the notification will be sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.notificationSenderEmail")]
        public string NotificationSenderEmail {get; set; }

        /// <summary>
        /// Gets the current provisioning state of the API Management service which can
        /// be one of the following:
        /// Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the API Management service, which is
        /// targeted by the long running operation started on the service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.targetProvisioningState")]
        public string TargetProvisioningState {get; private set; }

        /// <summary>
        /// Gets creation UTC date of the API Management service.The date conforms to
        /// the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601
        /// standard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.createdAtUtc")]
        public System.DateTime? CreatedAtUtc {get; private set; }

        /// <summary>
        /// Gets gateway URL of the API Management service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.gatewayUrl")]
        public string GatewayUrl {get; private set; }

        /// <summary>
        /// Gets gateway URL of the API Management service in the Default Region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.gatewayRegionalUrl")]
        public string GatewayRegionalUrl {get; private set; }

        /// <summary>
        /// Gets publisher portal endpoint Url of the API Management service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.portalUrl")]
        public string PortalUrl {get; private set; }

        /// <summary>
        /// Gets management API endpoint URL of the API Management service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.managementApiUrl")]
        public string ManagementApiUrl {get; private set; }

        /// <summary>
        /// Gets sCM endpoint URL of the API Management service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.scmUrl")]
        public string ScmUrl {get; private set; }

        /// <summary>
        /// Gets dEveloper Portal endpoint URL of the API Management service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.developerPortalUrl")]
        public string DeveloperPortalUrl {get; private set; }

        /// <summary>
        /// Gets or sets custom hostname configuration of the API Management service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hostnameConfigurations")]
        public System.Collections.Generic.IList<HostnameConfiguration> HostnameConfigurations {get; set; }

        /// <summary>
        /// Gets public Static Load Balanced IP addresses of the API Management service
        /// in Primary region. Available only for Basic, Standard, Premium and Isolated
        /// SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicIPAddresses")]
        public System.Collections.Generic.IList<string> PublicIPAddresses {get; private set; }

        /// <summary>
        /// Gets private Static Load Balanced IP addresses of the API Management
        /// service in Primary region which is deployed in an Internal Virtual Network.
        /// Available only for Basic, Standard, Premium and Isolated SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privateIPAddresses")]
        public System.Collections.Generic.IList<string> PrivateIPAddresses {get; private set; }

        /// <summary>
        /// Gets or sets public Standard SKU IP V4 based IP address to be associated
        /// with Virtual Network deployed service in the region. Supported only for
        /// Developer and Premium SKU being deployed in Virtual Network.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicIpAddressId")]
        public string PublicIPAddressId {get; set; }

        /// <summary>
        /// Gets or sets whether or not public endpoint access is allowed for this API
        /// Management service.  Value is optional but if passed in, must be &#39;Enabled&#39;
        /// or &#39;Disabled&#39;. If &#39;Disabled&#39;, private endpoints are the exclusive access
        /// method. Default value is &#39;Enabled&#39; Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess {get; set; }

        /// <summary>
        /// Gets or sets virtual network configuration of the API Management service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualNetworkConfiguration")]
        public VirtualNetworkConfiguration VirtualNetworkConfiguration {get; set; }

        /// <summary>
        /// Gets or sets additional datacenter locations of the API Management service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.additionalLocations")]
        public System.Collections.Generic.IList<AdditionalLocation> AdditionalLocations {get; set; }

        /// <summary>
        /// Gets or sets custom properties of the API Management service.&lt;/br&gt;Setting
        /// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168`
        /// will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1
        /// and 1.2).&lt;/br&gt;Setting
        /// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can
        /// be used to disable just TLS 1.1.&lt;/br&gt;Setting
        /// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can
        /// be used to disable TLS 1.0 on an API Management service.&lt;/br&gt;Setting
        /// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11`
        /// can be used to disable just TLS 1.1 for communications with
        /// backends.&lt;/br&gt;Setting
        /// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10`
        /// can be used to disable TLS 1.0 for communications with
        /// backends.&lt;/br&gt;Setting
        /// `Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2` can
        /// be used to enable HTTP2 protocol on an API Management service.&lt;/br&gt;Not
        /// specifying any of these properties on PATCH operation will reset omitted
        /// properties&#39; values to their defaults. For all the settings except Http2 the
        /// default value is `True` if the service was created on or before April 1st
        /// 2018 and `False` otherwise. Http2 setting&#39;s default value is
        /// `False`.&lt;/br&gt;&lt;/br&gt;You can disable any of next ciphers by using settings
        /// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.[cipher_name]`:
        /// TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
        /// TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
        /// TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256,
        /// TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA,
        /// TLS_RSA_WITH_AES_128_CBC_SHA. For example,
        /// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256`:`false`.
        /// The default value is `true` for them.  Note: next ciphers can&#39;t be disabled
        /// since they are required by Azure CloudService internal components:
        /// TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.customProperties")]
        public System.Collections.Generic.IDictionary<string, string> CustomProperties {get; set; }

        /// <summary>
        /// Gets or sets list of Certificates that need to be installed in the API
        /// Management service. Max supported certificates that can be installed is 10.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.certificates")]
        public System.Collections.Generic.IList<CertificateConfiguration> Certificates {get; set; }

        /// <summary>
        /// Gets or sets property only meant to be used for Consumption SKU Service.
        /// This enforces a client certificate to be presented on each request to the
        /// gateway. This also enables the ability to authenticate the certificate in
        /// the policy on the gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enableClientCertificate")]
        public bool? EnableClientCertificate {get; set; }

        /// <summary>
        /// Gets or sets property only valid for an Api Management service deployed in
        /// multiple locations. This can be used to disable the gateway in master
        /// region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.disableGateway")]
        public bool? DisableGateway {get; set; }

        /// <summary>
        /// Gets or sets the type of VPN in which API Management service needs to be
        /// configured in. None (Default Value) means the API Management service is not
        /// part of any Virtual Network, External means the API Management deployment
        /// is set up inside a Virtual Network having an Internet Facing Endpoint, and
        /// Internal means that API Management deployment is setup inside a Virtual
        /// Network having an Intranet Facing Endpoint only. Possible values include: &#39;None&#39;, &#39;External&#39;, &#39;Internal&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualNetworkType")]
        public string VirtualNetworkType {get; set; }

        /// <summary>
        /// Gets or sets control Plane Apis version constraint for the API Management
        /// service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.apiVersionConstraint")]
        public ApiVersionConstraint ApiVersionConstraint {get; set; }

        /// <summary>
        /// Gets or sets undelete Api Management Service if it was previously
        /// soft-deleted. If this flag is specified and set to True all other
        /// properties will be ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.restore")]
        public bool? Restore {get; set; }

        /// <summary>
        /// Gets or sets list of Private Endpoint Connections of this service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privateEndpointConnections")]
        public System.Collections.Generic.IList<RemotePrivateEndpointConnectionWrapper> PrivateEndpointConnections {get; set; }

        /// <summary>
        /// Gets or sets publisher email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publisherEmail")]
        public string PublisherEmail {get; set; }

        /// <summary>
        /// Gets or sets publisher name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publisherName")]
        public string PublisherName {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Sku != null)
            {
                this.Sku.Validate();
            }
            if (this.Identity != null)
            {
                this.Identity.Validate();
            }



            if (this.NotificationSenderEmail != null)
            {
                if (this.NotificationSenderEmail.Length > 100)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "NotificationSenderEmail", 100);
                }
            }








            if (this.HostnameConfigurations != null)
            {
                foreach (var element in this.HostnameConfigurations)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }




            if (this.VirtualNetworkConfiguration != null)
            {
                this.VirtualNetworkConfiguration.Validate();
            }
            if (this.AdditionalLocations != null)
            {
                foreach (var element in this.AdditionalLocations)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

            if (this.Certificates != null)
            {
                foreach (var element in this.Certificates)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }



            if (this.PublisherEmail != null)
            {
                if (this.PublisherEmail.Length > 100)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "PublisherEmail", 100);
                }
            }
            if (this.PublisherName != null)
            {
                if (this.PublisherName.Length > 100)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "PublisherName", 100);
                }
            }
        }
    }
}