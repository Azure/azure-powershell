// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Product profile.
    /// </summary>
    public partial class ProductTagResourceContractProperties : ProductEntityBaseParameters
    {
        /// <summary>
        /// Initializes a new instance of the ProductTagResourceContractProperties class.
        /// </summary>
        public ProductTagResourceContractProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProductTagResourceContractProperties class.
        /// </summary>

        /// <param name="description">Product description. May include HTML formatting tags.
        /// </param>

        /// <param name="terms">Product terms of use. Developers trying to subscribe to the product will be
        /// presented and required to accept these terms before they can complete the
        /// subscription process.
        /// </param>

        /// <param name="subscriptionRequired">Whether a product subscription is required for accessing APIs included in
        /// this product. If true, the product is referred to as &#34;protected&#34; and a
        /// valid subscription key is required for a request to an API included in the
        /// product to succeed. If false, the product is referred to as &#34;open&#34; and
        /// requests to an API included in the product can be made without a
        /// subscription key. If property is omitted when creating a new product it&#39;s
        /// value is assumed to be true.
        /// </param>

        /// <param name="approvalRequired">whether subscription approval is required. If false, new subscriptions will
        /// be approved automatically enabling developers to call the product’s APIs
        /// immediately after subscribing. If true, administrators must manually
        /// approve the subscription before the developer can any of the product’s
        /// APIs. Can be present only if subscriptionRequired property is present and
        /// has a value of false.
        /// </param>

        /// <param name="subscriptionsLimit">Whether the number of subscriptions a user can have to this product at the
        /// same time. Set to null or omit to allow unlimited per user subscriptions.
        /// Can be present only if subscriptionRequired property is present and has a
        /// value of false.
        /// </param>

        /// <param name="state">whether product is published or not. Published products are discoverable by
        /// users of developer portal. Non published products are visible only to
        /// administrators. Default state of Product is notPublished.
        /// Possible values include: &#39;notPublished&#39;, &#39;published&#39;</param>

        /// <param name="id">Identifier of the product in the form of /products/{productId}
        /// </param>

        /// <param name="name">Product name.
        /// </param>
        public ProductTagResourceContractProperties(string name, string description = default(string), string terms = default(string), bool? subscriptionRequired = default(bool?), bool? approvalRequired = default(bool?), int? subscriptionsLimit = default(int?), ProductState? state = default(ProductState?), string id = default(string))

        : base(description, terms, subscriptionRequired, approvalRequired, subscriptionsLimit, state)
        {
            this.Id = id;
            this.Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets identifier of the product in the form of /products/{productId}
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; set; }

        /// <summary>
        /// Gets or sets product name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }

            if (this.Name != null)
            {
                if (this.Name.Length > 300)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Name", 300);
                }
                if (this.Name.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "Name", 1);
                }
            }
        }
    }
}