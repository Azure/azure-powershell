// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Global Schema Contract details.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class GlobalSchemaContract : Resource
    {
        /// <summary>
        /// Initializes a new instance of the GlobalSchemaContract class.
        /// </summary>
        public GlobalSchemaContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GlobalSchemaContract class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="schemaType">Schema Type. Immutable.
        /// Possible values include: &#39;xml&#39;, &#39;json&#39;</param>

        /// <param name="description">Free-form schema entity description.
        /// </param>

        /// <param name="value">Json-encoded string for non json-based schema.
        /// </param>

        /// <param name="document">Global Schema document object for json-based schema formats(e.g. json
        /// schema).
        /// </param>
        public GlobalSchemaContract(string id = default(string), string name = default(string), string type = default(string), string schemaType = default(string), string description = default(string), object value = default(object), object document = default(object))

        : base(id, name, type)
        {
            this.SchemaType = schemaType;
            this.Description = description;
            this.Value = value;
            this.Document = document;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets schema Type. Immutable. Possible values include: &#39;xml&#39;, &#39;json&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.schemaType")]
        public string SchemaType {get; set; }

        /// <summary>
        /// Gets or sets free-form schema entity description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets json-encoded string for non json-based schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.value")]
        public object Value {get; set; }

        /// <summary>
        /// Gets or sets global Schema document object for json-based schema
        /// formats(e.g. json schema).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.document")]
        public object Document {get; set; }
    }
}