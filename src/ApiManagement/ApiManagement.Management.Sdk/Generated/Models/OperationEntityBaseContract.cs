// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// API Operation Entity Base Contract details.
    /// </summary>
    public partial class OperationEntityBaseContract
    {
        /// <summary>
        /// Initializes a new instance of the OperationEntityBaseContract class.
        /// </summary>
        public OperationEntityBaseContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OperationEntityBaseContract class.
        /// </summary>

        /// <param name="templateParameters">Collection of URL template parameters.
        /// </param>

        /// <param name="description">Description of the operation. May include HTML formatting tags.
        /// </param>

        /// <param name="request">An entity containing request details.
        /// </param>

        /// <param name="responses">Array of Operation responses.
        /// </param>

        /// <param name="policies">Operation Policies
        /// </param>
        public OperationEntityBaseContract(System.Collections.Generic.IList<ParameterContract> templateParameters = default(System.Collections.Generic.IList<ParameterContract>), string description = default(string), RequestContract request = default(RequestContract), System.Collections.Generic.IList<ResponseContract> responses = default(System.Collections.Generic.IList<ResponseContract>), string policies = default(string))

        {
            this.TemplateParameters = templateParameters;
            this.Description = description;
            this.Request = request;
            this.Responses = responses;
            this.Policies = policies;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets collection of URL template parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "templateParameters")]
        public System.Collections.Generic.IList<ParameterContract> TemplateParameters {get; set; }

        /// <summary>
        /// Gets or sets description of the operation. May include HTML formatting
        /// tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets an entity containing request details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "request")]
        public RequestContract Request {get; set; }

        /// <summary>
        /// Gets or sets array of Operation responses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "responses")]
        public System.Collections.Generic.IList<ResponseContract> Responses {get; set; }

        /// <summary>
        /// Gets or sets operation Policies
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policies")]
        public string Policies {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.TemplateParameters != null)
            {
                foreach (var element in this.TemplateParameters)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Description != null)
            {
                if (this.Description.Length > 1000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Description", 1000);
                }
            }

            if (this.Responses != null)
            {
                foreach (var element in this.Responses)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

        }
    }
}