// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Report data.
    /// </summary>
    public partial class ReportRecordContract
    {
        /// <summary>
        /// Initializes a new instance of the ReportRecordContract class.
        /// </summary>
        public ReportRecordContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReportRecordContract class.
        /// </summary>

        /// <param name="name">Name depending on report endpoint specifies product, API, operation or
        /// developer name.
        /// </param>

        /// <param name="timestamp">Start of aggregation period. The date conforms to the following format:
        /// `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        /// </param>

        /// <param name="interval">Length of aggregation period.  Interval must be multiple of 15 minutes and
        /// may not be zero. The value should be in ISO 8601 format
        /// (http://en.wikipedia.org/wiki/ISO_8601#Durations).
        /// </param>

        /// <param name="country">Country to which this record data is related.
        /// </param>

        /// <param name="region">Country region to which this record data is related.
        /// </param>

        /// <param name="zip">Zip code to which this record data is related.
        /// </param>

        /// <param name="userId">User identifier path. /users/{userId}
        /// </param>

        /// <param name="productId">Product identifier path. /products/{productId}
        /// </param>

        /// <param name="apiId">API identifier path. /apis/{apiId}
        /// </param>

        /// <param name="operationId">Operation identifier path. /apis/{apiId}/operations/{operationId}
        /// </param>

        /// <param name="apiRegion">API region identifier.
        /// </param>

        /// <param name="subscriptionId">Subscription identifier path. /subscriptions/{subscriptionId}
        /// </param>

        /// <param name="callCountSuccess">Number of successful calls. This includes calls returning HttpStatusCode &lt;=
        /// 301 and HttpStatusCode.NotModified and HttpStatusCode.TemporaryRedirect
        /// </param>

        /// <param name="callCountBlocked">Number of calls blocked due to invalid credentials. This includes calls
        /// returning HttpStatusCode.Unauthorized and HttpStatusCode.Forbidden and
        /// HttpStatusCode.TooManyRequests
        /// </param>

        /// <param name="callCountFailed">Number of calls failed due to proxy or backend errors. This includes calls
        /// returning HttpStatusCode.BadRequest(400) and any Code between
        /// HttpStatusCode.InternalServerError (500) and 600
        /// </param>

        /// <param name="callCountOther">Number of other calls.
        /// </param>

        /// <param name="callCountTotal">Total number of calls.
        /// </param>

        /// <param name="bandwidth">Bandwidth consumed.
        /// </param>

        /// <param name="cacheHitCount">Number of times when content was served from cache policy.
        /// </param>

        /// <param name="cacheMissCount">Number of times content was fetched from backend.
        /// </param>

        /// <param name="apiTimeAvg">Average time it took to process request.
        /// </param>

        /// <param name="apiTimeMin">Minimum time it took to process request.
        /// </param>

        /// <param name="apiTimeMax">Maximum time it took to process request.
        /// </param>

        /// <param name="serviceTimeAvg">Average time it took to process request on backend.
        /// </param>

        /// <param name="serviceTimeMin">Minimum time it took to process request on backend.
        /// </param>

        /// <param name="serviceTimeMax">Maximum time it took to process request on backend.
        /// </param>
        public ReportRecordContract(string name = default(string), System.DateTime? timestamp = default(System.DateTime?), string interval = default(string), string country = default(string), string region = default(string), string zip = default(string), string userId = default(string), string productId = default(string), string apiId = default(string), string operationId = default(string), string apiRegion = default(string), string subscriptionId = default(string), int? callCountSuccess = default(int?), int? callCountBlocked = default(int?), int? callCountFailed = default(int?), int? callCountOther = default(int?), int? callCountTotal = default(int?), long? bandwidth = default(long?), int? cacheHitCount = default(int?), int? cacheMissCount = default(int?), double? apiTimeAvg = default(double?), double? apiTimeMin = default(double?), double? apiTimeMax = default(double?), double? serviceTimeAvg = default(double?), double? serviceTimeMin = default(double?), double? serviceTimeMax = default(double?))

        {
            this.Name = name;
            this.Timestamp = timestamp;
            this.Interval = interval;
            this.Country = country;
            this.Region = region;
            this.Zip = zip;
            this.UserId = userId;
            this.ProductId = productId;
            this.ApiId = apiId;
            this.OperationId = operationId;
            this.ApiRegion = apiRegion;
            this.SubscriptionId = subscriptionId;
            this.CallCountSuccess = callCountSuccess;
            this.CallCountBlocked = callCountBlocked;
            this.CallCountFailed = callCountFailed;
            this.CallCountOther = callCountOther;
            this.CallCountTotal = callCountTotal;
            this.Bandwidth = bandwidth;
            this.CacheHitCount = cacheHitCount;
            this.CacheMissCount = cacheMissCount;
            this.ApiTimeAvg = apiTimeAvg;
            this.ApiTimeMin = apiTimeMin;
            this.ApiTimeMax = apiTimeMax;
            this.ServiceTimeAvg = serviceTimeAvg;
            this.ServiceTimeMin = serviceTimeMin;
            this.ServiceTimeMax = serviceTimeMax;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name depending on report endpoint specifies product, API,
        /// operation or developer name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets start of aggregation period. The date conforms to the
        /// following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601
        /// standard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timestamp")]
        public System.DateTime? Timestamp {get; set; }

        /// <summary>
        /// Gets or sets length of aggregation period.  Interval must be multiple of 15
        /// minutes and may not be zero. The value should be in ISO 8601 format
        /// (http://en.wikipedia.org/wiki/ISO_8601#Durations).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "interval")]
        public string Interval {get; set; }

        /// <summary>
        /// Gets or sets country to which this record data is related.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "country")]
        public string Country {get; set; }

        /// <summary>
        /// Gets or sets country region to which this record data is related.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "region")]
        public string Region {get; set; }

        /// <summary>
        /// Gets or sets zip code to which this record data is related.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "zip")]
        public string Zip {get; set; }

        /// <summary>
        /// Gets user identifier path. /users/{userId}
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userId")]
        public string UserId {get; private set; }

        /// <summary>
        /// Gets product identifier path. /products/{productId}
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "productId")]
        public string ProductId {get; private set; }

        /// <summary>
        /// Gets or sets aPI identifier path. /apis/{apiId}
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "apiId")]
        public string ApiId {get; set; }

        /// <summary>
        /// Gets or sets operation identifier path.
        /// /apis/{apiId}/operations/{operationId}
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operationId")]
        public string OperationId {get; set; }

        /// <summary>
        /// Gets or sets aPI region identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "apiRegion")]
        public string ApiRegion {get; set; }

        /// <summary>
        /// Gets or sets subscription identifier path. /subscriptions/{subscriptionId}
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subscriptionId")]
        public string SubscriptionId {get; set; }

        /// <summary>
        /// Gets or sets number of successful calls. This includes calls returning
        /// HttpStatusCode &lt;= 301 and HttpStatusCode.NotModified and
        /// HttpStatusCode.TemporaryRedirect
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "callCountSuccess")]
        public int? CallCountSuccess {get; set; }

        /// <summary>
        /// Gets or sets number of calls blocked due to invalid credentials. This
        /// includes calls returning HttpStatusCode.Unauthorized and
        /// HttpStatusCode.Forbidden and HttpStatusCode.TooManyRequests
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "callCountBlocked")]
        public int? CallCountBlocked {get; set; }

        /// <summary>
        /// Gets or sets number of calls failed due to proxy or backend errors. This
        /// includes calls returning HttpStatusCode.BadRequest(400) and any Code
        /// between HttpStatusCode.InternalServerError (500) and 600
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "callCountFailed")]
        public int? CallCountFailed {get; set; }

        /// <summary>
        /// Gets or sets number of other calls.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "callCountOther")]
        public int? CallCountOther {get; set; }

        /// <summary>
        /// Gets or sets total number of calls.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "callCountTotal")]
        public int? CallCountTotal {get; set; }

        /// <summary>
        /// Gets or sets bandwidth consumed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "bandwidth")]
        public long? Bandwidth {get; set; }

        /// <summary>
        /// Gets or sets number of times when content was served from cache policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cacheHitCount")]
        public int? CacheHitCount {get; set; }

        /// <summary>
        /// Gets or sets number of times content was fetched from backend.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cacheMissCount")]
        public int? CacheMissCount {get; set; }

        /// <summary>
        /// Gets or sets average time it took to process request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "apiTimeAvg")]
        public double? ApiTimeAvg {get; set; }

        /// <summary>
        /// Gets or sets minimum time it took to process request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "apiTimeMin")]
        public double? ApiTimeMin {get; set; }

        /// <summary>
        /// Gets or sets maximum time it took to process request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "apiTimeMax")]
        public double? ApiTimeMax {get; set; }

        /// <summary>
        /// Gets or sets average time it took to process request on backend.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceTimeAvg")]
        public double? ServiceTimeAvg {get; set; }

        /// <summary>
        /// Gets or sets minimum time it took to process request on backend.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceTimeMin")]
        public double? ServiceTimeMin {get; set; }

        /// <summary>
        /// Gets or sets maximum time it took to process request on backend.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceTimeMax")]
        public double? ServiceTimeMax {get; set; }
    }
}