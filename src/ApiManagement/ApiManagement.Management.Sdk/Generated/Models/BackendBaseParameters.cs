// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Backend entity base Parameter set.
    /// </summary>
    public partial class BackendBaseParameters
    {
        /// <summary>
        /// Initializes a new instance of the BackendBaseParameters class.
        /// </summary>
        public BackendBaseParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BackendBaseParameters class.
        /// </summary>

        /// <param name="title">Backend Title.
        /// </param>

        /// <param name="description">Backend Description.
        /// </param>

        /// <param name="resourceId">Management Uri of the Resource in External System. This url can be the Arm
        /// Resource Id of Logic Apps, Function Apps or API Apps.
        /// </param>

        /// <param name="properties">Backend Properties contract
        /// </param>

        /// <param name="credentials">Backend Credentials Contract Properties
        /// </param>

        /// <param name="proxy">Backend Proxy Contract Properties
        /// </param>

        /// <param name="tls">Backend TLS Properties
        /// </param>
        public BackendBaseParameters(string title = default(string), string description = default(string), string resourceId = default(string), BackendProperties properties = default(BackendProperties), BackendCredentialsContract credentials = default(BackendCredentialsContract), BackendProxyContract proxy = default(BackendProxyContract), BackendTlsProperties tls = default(BackendTlsProperties))

        {
            this.Title = title;
            this.Description = description;
            this.ResourceId = resourceId;
            this.Properties = properties;
            this.Credentials = credentials;
            this.Proxy = proxy;
            this.Tls = tls;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets backend Title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "title")]
        public string Title {get; set; }

        /// <summary>
        /// Gets or sets backend Description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets management Uri of the Resource in External System. This url
        /// can be the Arm Resource Id of Logic Apps, Function Apps or API Apps.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceId")]
        public string ResourceId {get; set; }

        /// <summary>
        /// Gets or sets backend Properties contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties")]
        public BackendProperties Properties {get; set; }

        /// <summary>
        /// Gets or sets backend Credentials Contract Properties
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "credentials")]
        public BackendCredentialsContract Credentials {get; set; }

        /// <summary>
        /// Gets or sets backend Proxy Contract Properties
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "proxy")]
        public BackendProxyContract Proxy {get; set; }

        /// <summary>
        /// Gets or sets backend TLS Properties
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tls")]
        public BackendTlsProperties Tls {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Title != null)
            {
                if (this.Title.Length > 300)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Title", 300);
                }
                if (this.Title.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "Title", 1);
                }
            }
            if (this.Description != null)
            {
                if (this.Description.Length > 2000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Description", 2000);
                }
                if (this.Description.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "Description", 1);
                }
            }
            if (this.ResourceId != null)
            {
                if (this.ResourceId.Length > 2000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "ResourceId", 2000);
                }
                if (this.ResourceId.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "ResourceId", 1);
                }
            }
            if (this.Properties != null)
            {
                this.Properties.Validate();
            }
            if (this.Credentials != null)
            {
                this.Credentials.Validate();
            }
            if (this.Proxy != null)
            {
                this.Proxy.Validate();
            }

        }
    }
}