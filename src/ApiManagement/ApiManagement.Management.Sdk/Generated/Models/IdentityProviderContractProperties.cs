// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// The external Identity Providers like Facebook, Google, Microsoft, Twitter
    /// or Azure Active Directory which can be used to enable access to the API
    /// Management service developer portal for all users.
    /// </summary>
    public partial class IdentityProviderContractProperties : IdentityProviderBaseParameters
    {
        /// <summary>
        /// Initializes a new instance of the IdentityProviderContractProperties class.
        /// </summary>
        public IdentityProviderContractProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IdentityProviderContractProperties class.
        /// </summary>

        /// <param name="type">Identity Provider Type identifier.
        /// Possible values include: &#39;facebook&#39;, &#39;google&#39;, &#39;microsoft&#39;, &#39;twitter&#39;,
        /// &#39;aad&#39;, &#39;aadB2C&#39;</param>

        /// <param name="signinTenant">The TenantId to use instead of Common when logging into Active Directory
        /// </param>

        /// <param name="allowedTenants">List of Allowed Tenants when configuring Azure Active Directory login.
        /// </param>

        /// <param name="authority">OpenID Connect discovery endpoint hostname for AAD or AAD B2C.
        /// </param>

        /// <param name="signupPolicyName">Signup Policy Name. Only applies to AAD B2C Identity Provider.
        /// </param>

        /// <param name="signinPolicyName">Signin Policy Name. Only applies to AAD B2C Identity Provider.
        /// </param>

        /// <param name="profileEditingPolicyName">Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.
        /// </param>

        /// <param name="passwordResetPolicyName">Password Reset Policy Name. Only applies to AAD B2C Identity Provider.
        /// </param>

        /// <param name="clientId">Client Id of the Application in the external Identity Provider. It is App
        /// ID for Facebook login, Client ID for Google login, App ID for Microsoft.
        /// </param>

        /// <param name="clientSecret">Client secret of the Application in external Identity Provider, used to
        /// authenticate login request. For example, it is App Secret for Facebook
        /// login, API Key for Google login, Public Key for Microsoft. This property
        /// will not be filled on &#39;GET&#39; operations! Use &#39;/listSecrets&#39; POST request to
        /// get the value.
        /// </param>
        public IdentityProviderContractProperties(string clientId, string type = default(string), string signinTenant = default(string), System.Collections.Generic.IList<string> allowedTenants = default(System.Collections.Generic.IList<string>), string authority = default(string), string signupPolicyName = default(string), string signinPolicyName = default(string), string profileEditingPolicyName = default(string), string passwordResetPolicyName = default(string), string clientSecret = default(string))

        : base(type, signinTenant, allowedTenants, authority, signupPolicyName, signinPolicyName, profileEditingPolicyName, passwordResetPolicyName)
        {
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets client Id of the Application in the external Identity
        /// Provider. It is App ID for Facebook login, Client ID for Google login, App
        /// ID for Microsoft.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientId")]
        public string ClientId {get; set; }

        /// <summary>
        /// Gets or sets client secret of the Application in external Identity
        /// Provider, used to authenticate login request. For example, it is App Secret
        /// for Facebook login, API Key for Google login, Public Key for Microsoft.
        /// This property will not be filled on &#39;GET&#39; operations! Use &#39;/listSecrets&#39;
        /// POST request to get the value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientSecret")]
        public string ClientSecret {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.ClientId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ClientId");
            }
            if (this.ClientId != null)
            {
                if (this.ClientId.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "ClientId", 1);
                }
            }
            if (this.ClientSecret != null)
            {
                if (this.ClientSecret.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "ClientSecret", 1);
                }
            }
        }
    }
}