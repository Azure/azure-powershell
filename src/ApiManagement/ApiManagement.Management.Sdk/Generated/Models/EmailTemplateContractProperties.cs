// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Email Template Contract properties.
    /// </summary>
    public partial class EmailTemplateContractProperties
    {
        /// <summary>
        /// Initializes a new instance of the EmailTemplateContractProperties class.
        /// </summary>
        public EmailTemplateContractProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmailTemplateContractProperties class.
        /// </summary>

        /// <param name="subject">Subject of the Template.
        /// </param>

        /// <param name="body">Email Template Body. This should be a valid XDocument
        /// </param>

        /// <param name="title">Title of the Template.
        /// </param>

        /// <param name="description">Description of the Email Template.
        /// </param>

        /// <param name="isDefault">Whether the template is the default template provided by API Management or
        /// has been edited.
        /// </param>

        /// <param name="parameters">Email Template Parameter values.
        /// </param>
        public EmailTemplateContractProperties(string subject, string body, string title = default(string), string description = default(string), bool? isDefault = default(bool?), System.Collections.Generic.IList<EmailTemplateParametersContractProperties> parameters = default(System.Collections.Generic.IList<EmailTemplateParametersContractProperties>))

        {
            this.Subject = subject;
            this.Body = body;
            this.Title = title;
            this.Description = description;
            this.IsDefault = isDefault;
            this.Parameters = parameters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets subject of the Template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subject")]
        public string Subject {get; set; }

        /// <summary>
        /// Gets or sets email Template Body. This should be a valid XDocument
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "body")]
        public string Body {get; set; }

        /// <summary>
        /// Gets or sets title of the Template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "title")]
        public string Title {get; set; }

        /// <summary>
        /// Gets or sets description of the Email Template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets whether the template is the default template provided by API
        /// Management or has been edited.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isDefault")]
        public bool? IsDefault {get; private set; }

        /// <summary>
        /// Gets or sets email Template Parameter values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "parameters")]
        public System.Collections.Generic.IList<EmailTemplateParametersContractProperties> Parameters {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Subject == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Subject");
            }
            if (this.Body == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Body");
            }
            if (this.Subject != null)
            {
                if (this.Subject.Length > 1000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Subject", 1000);
                }
                if (this.Subject.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "Subject", 1);
                }
            }
            if (this.Body != null)
            {
                if (this.Body.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "Body", 1);
                }
            }


            if (this.Parameters != null)
            {
                foreach (var element in this.Parameters)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}