// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// External OAuth authorization server settings.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class AuthorizationServerContract : Resource
    {
        /// <summary>
        /// Initializes a new instance of the AuthorizationServerContract class.
        /// </summary>
        public AuthorizationServerContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AuthorizationServerContract class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="description">Description of the authorization server. Can contain HTML formatting tags.
        /// </param>

        /// <param name="authorizationMethods">HTTP verbs supported by the authorization endpoint. GET must be always
        /// present. POST is optional.
        /// </param>

        /// <param name="clientAuthenticationMethod">Method of authentication supported by the token endpoint of this
        /// authorization server. Possible values are Basic and/or Body. When Body is
        /// specified, client credentials and other parameters are passed within the
        /// request body in the application/x-www-form-urlencoded format.
        /// </param>

        /// <param name="tokenBodyParameters">Additional parameters required by the token endpoint of this authorization
        /// server represented as an array of JSON objects with name and value string
        /// properties, i.e. {&#34;name&#34; : &#34;name value&#34;, &#34;value&#34;: &#34;a value&#34;}.
        /// </param>

        /// <param name="tokenEndpoint">OAuth token endpoint. Contains absolute URI to entity being referenced.
        /// </param>

        /// <param name="supportState">If true, authorization server will include state parameter from the
        /// authorization request to its response. Client may use state parameter to
        /// raise protocol security.
        /// </param>

        /// <param name="defaultScope">Access token scope that is going to be requested by default. Can be
        /// overridden at the API level. Should be provided in the form of a string
        /// containing space-delimited values.
        /// </param>

        /// <param name="bearerTokenSendingMethods">Specifies the mechanism by which access token is passed to the API.
        /// </param>

        /// <param name="resourceOwnerUsername">Can be optionally specified when resource owner password grant type is
        /// supported by this authorization server. Default resource owner username.
        /// </param>

        /// <param name="resourceOwnerPassword">Can be optionally specified when resource owner password grant type is
        /// supported by this authorization server. Default resource owner password.
        /// </param>

        /// <param name="displayName">User-friendly authorization server name.
        /// </param>

        /// <param name="clientRegistrationEndpoint">Optional reference to a page where client or app registration for this
        /// authorization server is performed. Contains absolute URL to entity being
        /// referenced.
        /// </param>

        /// <param name="authorizationEndpoint">OAuth authorization endpoint. See
        /// http://tools.ietf.org/html/rfc6749#section-3.2.
        /// </param>

        /// <param name="grantTypes">Form of an authorization grant, which the client uses to request the access
        /// token.
        /// </param>

        /// <param name="clientId">Client or app id registered with this authorization server.
        /// </param>

        /// <param name="clientSecret">Client or app secret registered with this authorization server. This
        /// property will not be filled on &#39;GET&#39; operations! Use &#39;/listSecrets&#39; POST
        /// request to get the value.
        /// </param>
        public AuthorizationServerContract(string id = default(string), string name = default(string), string type = default(string), string description = default(string), System.Collections.Generic.IList<AuthorizationMethod?> authorizationMethods = default(System.Collections.Generic.IList<AuthorizationMethod?>), System.Collections.Generic.IList<string> clientAuthenticationMethod = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<TokenBodyParameterContract> tokenBodyParameters = default(System.Collections.Generic.IList<TokenBodyParameterContract>), string tokenEndpoint = default(string), bool? supportState = default(bool?), string defaultScope = default(string), System.Collections.Generic.IList<string> bearerTokenSendingMethods = default(System.Collections.Generic.IList<string>), string resourceOwnerUsername = default(string), string resourceOwnerPassword = default(string), string displayName = default(string), string clientRegistrationEndpoint = default(string), string authorizationEndpoint = default(string), System.Collections.Generic.IList<string> grantTypes = default(System.Collections.Generic.IList<string>), string clientId = default(string), string clientSecret = default(string))

        : base(id, name, type)
        {
            this.Description = description;
            this.AuthorizationMethods = authorizationMethods;
            this.ClientAuthenticationMethod = clientAuthenticationMethod;
            this.TokenBodyParameters = tokenBodyParameters;
            this.TokenEndpoint = tokenEndpoint;
            this.SupportState = supportState;
            this.DefaultScope = defaultScope;
            this.BearerTokenSendingMethods = bearerTokenSendingMethods;
            this.ResourceOwnerUsername = resourceOwnerUsername;
            this.ResourceOwnerPassword = resourceOwnerPassword;
            this.DisplayName = displayName;
            this.ClientRegistrationEndpoint = clientRegistrationEndpoint;
            this.AuthorizationEndpoint = authorizationEndpoint;
            this.GrantTypes = grantTypes;
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets description of the authorization server. Can contain HTML
        /// formatting tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets hTTP verbs supported by the authorization endpoint. GET must
        /// be always present. POST is optional.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.authorizationMethods")]
        public System.Collections.Generic.IList<AuthorizationMethod?> AuthorizationMethods {get; set; }

        /// <summary>
        /// Gets or sets method of authentication supported by the token endpoint of
        /// this authorization server. Possible values are Basic and/or Body. When Body
        /// is specified, client credentials and other parameters are passed within the
        /// request body in the application/x-www-form-urlencoded format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.clientAuthenticationMethod")]
        public System.Collections.Generic.IList<string> ClientAuthenticationMethod {get; set; }

        /// <summary>
        /// Gets or sets additional parameters required by the token endpoint of this
        /// authorization server represented as an array of JSON objects with name and
        /// value string properties, i.e. {&#34;name&#34; : &#34;name value&#34;, &#34;value&#34;: &#34;a value&#34;}.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.tokenBodyParameters")]
        public System.Collections.Generic.IList<TokenBodyParameterContract> TokenBodyParameters {get; set; }

        /// <summary>
        /// Gets or sets oAuth token endpoint. Contains absolute URI to entity being
        /// referenced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.tokenEndpoint")]
        public string TokenEndpoint {get; set; }

        /// <summary>
        /// Gets or sets if true, authorization server will include state parameter
        /// from the authorization request to its response. Client may use state
        /// parameter to raise protocol security.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.supportState")]
        public bool? SupportState {get; set; }

        /// <summary>
        /// Gets or sets access token scope that is going to be requested by default.
        /// Can be overridden at the API level. Should be provided in the form of a
        /// string containing space-delimited values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.defaultScope")]
        public string DefaultScope {get; set; }

        /// <summary>
        /// Gets or sets specifies the mechanism by which access token is passed to the
        /// API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.bearerTokenSendingMethods")]
        public System.Collections.Generic.IList<string> BearerTokenSendingMethods {get; set; }

        /// <summary>
        /// Gets or sets can be optionally specified when resource owner password grant
        /// type is supported by this authorization server. Default resource owner
        /// username.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceOwnerUsername")]
        public string ResourceOwnerUsername {get; set; }

        /// <summary>
        /// Gets or sets can be optionally specified when resource owner password grant
        /// type is supported by this authorization server. Default resource owner
        /// password.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceOwnerPassword")]
        public string ResourceOwnerPassword {get; set; }

        /// <summary>
        /// Gets or sets user-friendly authorization server name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets optional reference to a page where client or app registration
        /// for this authorization server is performed. Contains absolute URL to entity
        /// being referenced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.clientRegistrationEndpoint")]
        public string ClientRegistrationEndpoint {get; set; }

        /// <summary>
        /// Gets or sets oAuth authorization endpoint. See
        /// http://tools.ietf.org/html/rfc6749#section-3.2.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.authorizationEndpoint")]
        public string AuthorizationEndpoint {get; set; }

        /// <summary>
        /// Gets or sets form of an authorization grant, which the client uses to
        /// request the access token.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.grantTypes")]
        public System.Collections.Generic.IList<string> GrantTypes {get; set; }

        /// <summary>
        /// Gets or sets client or app id registered with this authorization server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.clientId")]
        public string ClientId {get; set; }

        /// <summary>
        /// Gets or sets client or app secret registered with this authorization
        /// server. This property will not be filled on &#39;GET&#39; operations! Use
        /// &#39;/listSecrets&#39; POST request to get the value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.clientSecret")]
        public string ClientSecret {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {



            if (this.TokenBodyParameters != null)
            {
                foreach (var element in this.TokenBodyParameters)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }





            if (this.DisplayName != null)
            {
                if (this.DisplayName.Length > 50)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "DisplayName", 50);
                }
                if (this.DisplayName.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "DisplayName", 1);
                }
            }





        }
    }
}