// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// User details.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class UserContract : Resource
    {
        /// <summary>
        /// Initializes a new instance of the UserContract class.
        /// </summary>
        public UserContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserContract class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="state">Account state. Specifies whether the user is active or not. Blocked users
        /// are unable to sign into the developer portal or call any APIs of subscribed
        /// products. Default state is Active.
        /// Possible values include: &#39;active&#39;, &#39;blocked&#39;, &#39;pending&#39;, &#39;deleted&#39;</param>

        /// <param name="note">Optional note about a user set by the administrator.
        /// </param>

        /// <param name="identities">Collection of user identities.
        /// </param>

        /// <param name="firstName">First name.
        /// </param>

        /// <param name="lastName">Last name.
        /// </param>

        /// <param name="email">Email address.
        /// </param>

        /// <param name="registrationDate">Date of user registration. The date conforms to the following format:
        /// `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        /// </param>

        /// <param name="groups">Collection of groups user is part of.
        /// </param>
        public UserContract(string id = default(string), string name = default(string), string type = default(string), string state = default(string), string note = default(string), System.Collections.Generic.IList<UserIdentityContract> identities = default(System.Collections.Generic.IList<UserIdentityContract>), string firstName = default(string), string lastName = default(string), string email = default(string), System.DateTime? registrationDate = default(System.DateTime?), System.Collections.Generic.IList<GroupContractProperties> groups = default(System.Collections.Generic.IList<GroupContractProperties>))

        : base(id, name, type)
        {
            this.State = state;
            this.Note = note;
            this.Identities = identities;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Email = email;
            this.RegistrationDate = registrationDate;
            this.Groups = groups;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets account state. Specifies whether the user is active or not.
        /// Blocked users are unable to sign into the developer portal or call any APIs
        /// of subscribed products. Default state is Active. Possible values include: &#39;active&#39;, &#39;blocked&#39;, &#39;pending&#39;, &#39;deleted&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.state")]
        public string State {get; set; }

        /// <summary>
        /// Gets or sets optional note about a user set by the administrator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.note")]
        public string Note {get; set; }

        /// <summary>
        /// Gets or sets collection of user identities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.identities")]
        public System.Collections.Generic.IList<UserIdentityContract> Identities {get; set; }

        /// <summary>
        /// Gets or sets first name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.firstName")]
        public string FirstName {get; set; }

        /// <summary>
        /// Gets or sets last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.lastName")]
        public string LastName {get; set; }

        /// <summary>
        /// Gets or sets email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.email")]
        public string Email {get; set; }

        /// <summary>
        /// Gets or sets date of user registration. The date conforms to the following
        /// format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.registrationDate")]
        public System.DateTime? RegistrationDate {get; set; }

        /// <summary>
        /// Gets collection of groups user is part of.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.groups")]
        public System.Collections.Generic.IList<GroupContractProperties> Groups {get; private set; }
    }
}