// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Operation request/response representation details.
    /// </summary>
    public partial class RepresentationContract
    {
        /// <summary>
        /// Initializes a new instance of the RepresentationContract class.
        /// </summary>
        public RepresentationContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RepresentationContract class.
        /// </summary>

        /// <param name="contentType">Specifies a registered or custom content type for this representation, e.g.
        /// application/xml.
        /// </param>

        /// <param name="schemaId">Schema identifier. Applicable only if &#39;contentType&#39; value is neither
        /// &#39;application/x-www-form-urlencoded&#39; nor &#39;multipart/form-data&#39;.
        /// </param>

        /// <param name="typeName">Type name defined by the schema. Applicable only if &#39;contentType&#39; value is
        /// neither &#39;application/x-www-form-urlencoded&#39; nor &#39;multipart/form-data&#39;.
        /// </param>

        /// <param name="formParameters">Collection of form parameters. Required if &#39;contentType&#39; value is either
        /// &#39;application/x-www-form-urlencoded&#39; or &#39;multipart/form-data&#39;..
        /// </param>

        /// <param name="examples">Exampled defined for the representation.
        /// </param>
        public RepresentationContract(string contentType, string schemaId = default(string), string typeName = default(string), System.Collections.Generic.IList<ParameterContract> formParameters = default(System.Collections.Generic.IList<ParameterContract>), System.Collections.Generic.IDictionary<string, ParameterExampleContract> examples = default(System.Collections.Generic.IDictionary<string, ParameterExampleContract>))

        {
            this.ContentType = contentType;
            this.SchemaId = schemaId;
            this.TypeName = typeName;
            this.FormParameters = formParameters;
            this.Examples = examples;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets specifies a registered or custom content type for this
        /// representation, e.g. application/xml.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "contentType")]
        public string ContentType {get; set; }

        /// <summary>
        /// Gets or sets schema identifier. Applicable only if &#39;contentType&#39; value is
        /// neither &#39;application/x-www-form-urlencoded&#39; nor &#39;multipart/form-data&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "schemaId")]
        public string SchemaId {get; set; }

        /// <summary>
        /// Gets or sets type name defined by the schema. Applicable only if
        /// &#39;contentType&#39; value is neither &#39;application/x-www-form-urlencoded&#39; nor
        /// &#39;multipart/form-data&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeName")]
        public string TypeName {get; set; }

        /// <summary>
        /// Gets or sets collection of form parameters. Required if &#39;contentType&#39; value
        /// is either &#39;application/x-www-form-urlencoded&#39; or &#39;multipart/form-data&#39;..
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "formParameters")]
        public System.Collections.Generic.IList<ParameterContract> FormParameters {get; set; }

        /// <summary>
        /// Gets or sets exampled defined for the representation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "examples")]
        public System.Collections.Generic.IDictionary<string, ParameterExampleContract> Examples {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ContentType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ContentType");
            }



            if (this.FormParameters != null)
            {
                foreach (var element in this.FormParameters)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

        }
    }
}