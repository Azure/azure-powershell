// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Parameters supplied to the Create User operation.
    /// </summary>
    public partial class UserCreateParameterProperties : UserEntityBaseParameters
    {
        /// <summary>
        /// Initializes a new instance of the UserCreateParameterProperties class.
        /// </summary>
        public UserCreateParameterProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserCreateParameterProperties class.
        /// </summary>

        /// <param name="state">Account state. Specifies whether the user is active or not. Blocked users
        /// are unable to sign into the developer portal or call any APIs of subscribed
        /// products. Default state is Active.
        /// Possible values include: &#39;active&#39;, &#39;blocked&#39;, &#39;pending&#39;, &#39;deleted&#39;</param>

        /// <param name="note">Optional note about a user set by the administrator.
        /// </param>

        /// <param name="identities">Collection of user identities.
        /// </param>

        /// <param name="email">Email address. Must not be empty and must be unique within the service
        /// instance.
        /// </param>

        /// <param name="firstName">First name.
        /// </param>

        /// <param name="lastName">Last name.
        /// </param>

        /// <param name="password">User Password. If no value is provided, a default password is generated.
        /// </param>

        /// <param name="appType">Determines the type of application which send the create user request.
        /// Default is legacy portal.
        /// Possible values include: &#39;portal&#39;, &#39;developerPortal&#39;</param>

        /// <param name="confirmation">Determines the type of confirmation e-mail that will be sent to the newly
        /// created user.
        /// Possible values include: &#39;signup&#39;, &#39;invite&#39;</param>
        public UserCreateParameterProperties(string email, string firstName, string lastName, string state = default(string), string note = default(string), System.Collections.Generic.IList<UserIdentityContract> identities = default(System.Collections.Generic.IList<UserIdentityContract>), string password = default(string), string appType = default(string), string confirmation = default(string))

        : base(state, note, identities)
        {
            this.Email = email;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Password = password;
            this.AppType = appType;
            this.Confirmation = confirmation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets email address. Must not be empty and must be unique within the
        /// service instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "email")]
        public string Email {get; set; }

        /// <summary>
        /// Gets or sets first name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "firstName")]
        public string FirstName {get; set; }

        /// <summary>
        /// Gets or sets last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastName")]
        public string LastName {get; set; }

        /// <summary>
        /// Gets or sets user Password. If no value is provided, a default password is
        /// generated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public string Password {get; set; }

        /// <summary>
        /// Gets or sets determines the type of application which send the create user
        /// request. Default is legacy portal. Possible values include: &#39;portal&#39;, &#39;developerPortal&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "appType")]
        public string AppType {get; set; }

        /// <summary>
        /// Gets or sets determines the type of confirmation e-mail that will be sent
        /// to the newly created user. Possible values include: &#39;signup&#39;, &#39;invite&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "confirmation")]
        public string Confirmation {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Email == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Email");
            }
            if (this.FirstName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "FirstName");
            }
            if (this.LastName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "LastName");
            }
            if (this.Email != null)
            {
                if (this.Email.Length > 254)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Email", 254);
                }
                if (this.Email.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "Email", 1);
                }
            }
            if (this.FirstName != null)
            {
                if (this.FirstName.Length > 100)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "FirstName", 100);
                }
                if (this.FirstName.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "FirstName", 1);
                }
            }
            if (this.LastName != null)
            {
                if (this.LastName.Length > 100)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "LastName", 100);
                }
                if (this.LastName.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "LastName", 1);
                }
            }



        }
    }
}