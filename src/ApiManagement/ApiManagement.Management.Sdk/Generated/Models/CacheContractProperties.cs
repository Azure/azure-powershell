// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of the Cache contract.
    /// </summary>
    public partial class CacheContractProperties
    {
        /// <summary>
        /// Initializes a new instance of the CacheContractProperties class.
        /// </summary>
        public CacheContractProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CacheContractProperties class.
        /// </summary>

        /// <param name="description">Cache description
        /// </param>

        /// <param name="connectionString">Runtime connection string to cache
        /// </param>

        /// <param name="useFromLocation">Location identifier to use cache from (should be either &#39;default&#39; or valid
        /// Azure region identifier)
        /// </param>

        /// <param name="resourceId">Original uri of entity in external system cache points to
        /// </param>
        public CacheContractProperties(string connectionString, string useFromLocation, string description = default(string), string resourceId = default(string))

        {
            this.Description = description;
            this.ConnectionString = connectionString;
            this.UseFromLocation = useFromLocation;
            this.ResourceId = resourceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets cache description
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets runtime connection string to cache
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionString")]
        public string ConnectionString {get; set; }

        /// <summary>
        /// Gets or sets location identifier to use cache from (should be either
        /// &#39;default&#39; or valid Azure region identifier)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "useFromLocation")]
        public string UseFromLocation {get; set; }

        /// <summary>
        /// Gets or sets original uri of entity in external system cache points to
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceId")]
        public string ResourceId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ConnectionString == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ConnectionString");
            }
            if (this.UseFromLocation == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "UseFromLocation");
            }
            if (this.Description != null)
            {
                if (this.Description.Length > 2000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Description", 2000);
                }
            }
            if (this.ConnectionString != null)
            {
                if (this.ConnectionString.Length > 300)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "ConnectionString", 300);
                }
            }
            if (this.UseFromLocation != null)
            {
                if (this.UseFromLocation.Length > 256)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "UseFromLocation", 256);
                }
            }
            if (this.ResourceId != null)
            {
                if (this.ResourceId.Length > 2000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "ResourceId", 2000);
                }
            }
        }
    }
}