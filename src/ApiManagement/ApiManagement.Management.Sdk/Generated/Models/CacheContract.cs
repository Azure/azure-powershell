// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Cache details.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class CacheContract : Resource
    {
        /// <summary>
        /// Initializes a new instance of the CacheContract class.
        /// </summary>
        public CacheContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CacheContract class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="description">Cache description
        /// </param>

        /// <param name="connectionString">Runtime connection string to cache
        /// </param>

        /// <param name="useFromLocation">Location identifier to use cache from (should be either &#39;default&#39; or valid
        /// Azure region identifier)
        /// </param>

        /// <param name="resourceId">Original uri of entity in external system cache points to
        /// </param>
        public CacheContract(string id = default(string), string name = default(string), string type = default(string), string description = default(string), string connectionString = default(string), string useFromLocation = default(string), string resourceId = default(string))

        : base(id, name, type)
        {
            this.Description = description;
            this.ConnectionString = connectionString;
            this.UseFromLocation = useFromLocation;
            this.ResourceId = resourceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets cache description
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets runtime connection string to cache
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.connectionString")]
        public string ConnectionString {get; set; }

        /// <summary>
        /// Gets or sets location identifier to use cache from (should be either
        /// &#39;default&#39; or valid Azure region identifier)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.useFromLocation")]
        public string UseFromLocation {get; set; }

        /// <summary>
        /// Gets or sets original uri of entity in external system cache points to
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceId")]
        public string ResourceId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Description != null)
            {
                if (this.Description.Length > 2000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Description", 2000);
                }
            }
            if (this.ConnectionString != null)
            {
                if (this.ConnectionString.Length > 300)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "ConnectionString", 300);
                }
            }
            if (this.UseFromLocation != null)
            {
                if (this.UseFromLocation.Length > 256)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "UseFromLocation", 256);
                }
            }
            if (this.ResourceId != null)
            {
                if (this.ResourceId.Length > 2000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "ResourceId", 2000);
                }
            }
        }
    }
}