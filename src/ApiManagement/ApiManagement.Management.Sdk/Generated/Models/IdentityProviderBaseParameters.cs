// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Identity Provider Base Parameter Properties.
    /// </summary>
    public partial class IdentityProviderBaseParameters
    {
        /// <summary>
        /// Initializes a new instance of the IdentityProviderBaseParameters class.
        /// </summary>
        public IdentityProviderBaseParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IdentityProviderBaseParameters class.
        /// </summary>

        /// <param name="type">Identity Provider Type identifier.
        /// Possible values include: &#39;facebook&#39;, &#39;google&#39;, &#39;microsoft&#39;, &#39;twitter&#39;,
        /// &#39;aad&#39;, &#39;aadB2C&#39;</param>

        /// <param name="signinTenant">The TenantId to use instead of Common when logging into Active Directory
        /// </param>

        /// <param name="allowedTenants">List of Allowed Tenants when configuring Azure Active Directory login.
        /// </param>

        /// <param name="authority">OpenID Connect discovery endpoint hostname for AAD or AAD B2C.
        /// </param>

        /// <param name="signupPolicyName">Signup Policy Name. Only applies to AAD B2C Identity Provider.
        /// </param>

        /// <param name="signinPolicyName">Signin Policy Name. Only applies to AAD B2C Identity Provider.
        /// </param>

        /// <param name="profileEditingPolicyName">Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.
        /// </param>

        /// <param name="passwordResetPolicyName">Password Reset Policy Name. Only applies to AAD B2C Identity Provider.
        /// </param>
        public IdentityProviderBaseParameters(string type = default(string), string signinTenant = default(string), System.Collections.Generic.IList<string> allowedTenants = default(System.Collections.Generic.IList<string>), string authority = default(string), string signupPolicyName = default(string), string signinPolicyName = default(string), string profileEditingPolicyName = default(string), string passwordResetPolicyName = default(string))

        {
            this.Type = type;
            this.SigninTenant = signinTenant;
            this.AllowedTenants = allowedTenants;
            this.Authority = authority;
            this.SignupPolicyName = signupPolicyName;
            this.SigninPolicyName = signinPolicyName;
            this.ProfileEditingPolicyName = profileEditingPolicyName;
            this.PasswordResetPolicyName = passwordResetPolicyName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets identity Provider Type identifier. Possible values include: &#39;facebook&#39;, &#39;google&#39;, &#39;microsoft&#39;, &#39;twitter&#39;, &#39;aad&#39;, &#39;aadB2C&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; set; }

        /// <summary>
        /// Gets or sets the TenantId to use instead of Common when logging into Active
        /// Directory
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "signinTenant")]
        public string SigninTenant {get; set; }

        /// <summary>
        /// Gets or sets list of Allowed Tenants when configuring Azure Active
        /// Directory login.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowedTenants")]
        public System.Collections.Generic.IList<string> AllowedTenants {get; set; }

        /// <summary>
        /// Gets or sets openID Connect discovery endpoint hostname for AAD or AAD B2C.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authority")]
        public string Authority {get; set; }

        /// <summary>
        /// Gets or sets signup Policy Name. Only applies to AAD B2C Identity Provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "signupPolicyName")]
        public string SignupPolicyName {get; set; }

        /// <summary>
        /// Gets or sets signin Policy Name. Only applies to AAD B2C Identity Provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "signinPolicyName")]
        public string SigninPolicyName {get; set; }

        /// <summary>
        /// Gets or sets profile Editing Policy Name. Only applies to AAD B2C Identity
        /// Provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "profileEditingPolicyName")]
        public string ProfileEditingPolicyName {get; set; }

        /// <summary>
        /// Gets or sets password Reset Policy Name. Only applies to AAD B2C Identity
        /// Provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "passwordResetPolicyName")]
        public string PasswordResetPolicyName {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.AllowedTenants != null)
            {
                if (this.AllowedTenants.Count > 32)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxItems, "AllowedTenants", 32);
                }
            }

            if (this.SignupPolicyName != null)
            {
                if (this.SignupPolicyName.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "SignupPolicyName", 1);
                }
            }
            if (this.SigninPolicyName != null)
            {
                if (this.SigninPolicyName.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "SigninPolicyName", 1);
                }
            }
            if (this.ProfileEditingPolicyName != null)
            {
                if (this.ProfileEditingPolicyName.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "ProfileEditingPolicyName", 1);
                }
            }
            if (this.PasswordResetPolicyName != null)
            {
                if (this.PasswordResetPolicyName.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "PasswordResetPolicyName", 1);
                }
            }
        }
    }
}