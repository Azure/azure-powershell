// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for GatewayApiOperations
    /// </summary>
    public static partial class GatewayApiOperationsExtensions
    {
        /// <summary>
        /// Lists a collection of the APIs associated with a gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='gatewayId'>
        /// Gateway entity identifier. Must be unique in the current API Management
        /// service instance. Must not have value &#39;managed&#39;
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ApiContract> ListByService(this IGatewayApiOperations operations, string resourceGroupName, string serviceName, string gatewayId, Microsoft.Rest.Azure.OData.ODataQuery<ApiContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ApiContract>))
        {
                return ((IGatewayApiOperations)operations).ListByServiceAsync(resourceGroupName, serviceName, gatewayId, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists a collection of the APIs associated with a gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='gatewayId'>
        /// Gateway entity identifier. Must be unique in the current API Management
        /// service instance. Must not have value &#39;managed&#39;
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ApiContract>> ListByServiceAsync(this IGatewayApiOperations operations, string resourceGroupName, string serviceName, string gatewayId, Microsoft.Rest.Azure.OData.ODataQuery<ApiContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ApiContract>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByServiceWithHttpMessagesAsync(resourceGroupName, serviceName, gatewayId, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Checks that API entity specified by identifier is associated with the
        /// Gateway entity.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='gatewayId'>
        /// Gateway entity identifier. Must be unique in the current API Management
        /// service instance. Must not have value &#39;managed&#39;
        /// </param>
        /// <param name='apiId'>
        /// API identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static bool GetEntityTag(this IGatewayApiOperations operations, string resourceGroupName, string serviceName, string gatewayId, string apiId)
        {
                return ((IGatewayApiOperations)operations).GetEntityTagAsync(resourceGroupName, serviceName, gatewayId, apiId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Checks that API entity specified by identifier is associated with the
        /// Gateway entity.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='gatewayId'>
        /// Gateway entity identifier. Must be unique in the current API Management
        /// service instance. Must not have value &#39;managed&#39;
        /// </param>
        /// <param name='apiId'>
        /// API identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<bool> GetEntityTagAsync(this IGatewayApiOperations operations, string resourceGroupName, string serviceName, string gatewayId, string apiId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetEntityTagWithHttpMessagesAsync(resourceGroupName, serviceName, gatewayId, apiId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Adds an API to the specified Gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='gatewayId'>
        /// Gateway entity identifier. Must be unique in the current API Management
        /// service instance. Must not have value &#39;managed&#39;
        /// </param>
        /// <param name='apiId'>
        /// API identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static ApiContract CreateOrUpdate(this IGatewayApiOperations operations, string resourceGroupName, string serviceName, string gatewayId, string apiId, AssociationContract parameters = default(AssociationContract))
        {
                return ((IGatewayApiOperations)operations).CreateOrUpdateAsync(resourceGroupName, serviceName, gatewayId, apiId, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Adds an API to the specified Gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='gatewayId'>
        /// Gateway entity identifier. Must be unique in the current API Management
        /// service instance. Must not have value &#39;managed&#39;
        /// </param>
        /// <param name='apiId'>
        /// API identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ApiContract> CreateOrUpdateAsync(this IGatewayApiOperations operations, string resourceGroupName, string serviceName, string gatewayId, string apiId, AssociationContract parameters = default(AssociationContract), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceName, gatewayId, apiId, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the specified API from the specified Gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='gatewayId'>
        /// Gateway entity identifier. Must be unique in the current API Management
        /// service instance. Must not have value &#39;managed&#39;
        /// </param>
        /// <param name='apiId'>
        /// API identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        public static void Delete(this IGatewayApiOperations operations, string resourceGroupName, string serviceName, string gatewayId, string apiId)
        {
                ((IGatewayApiOperations)operations).DeleteAsync(resourceGroupName, serviceName, gatewayId, apiId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified API from the specified Gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='gatewayId'>
        /// Gateway entity identifier. Must be unique in the current API Management
        /// service instance. Must not have value &#39;managed&#39;
        /// </param>
        /// <param name='apiId'>
        /// API identifier. Must be unique in the current API Management service
        /// instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IGatewayApiOperations operations, string resourceGroupName, string serviceName, string gatewayId, string apiId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serviceName, gatewayId, apiId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists a collection of the APIs associated with a gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ApiContract> ListByServiceNext(this IGatewayApiOperations operations, string nextPageLink)
        {
                return ((IGatewayApiOperations)operations).ListByServiceNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists a collection of the APIs associated with a gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ApiContract>> ListByServiceNextAsync(this IGatewayApiOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByServiceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
