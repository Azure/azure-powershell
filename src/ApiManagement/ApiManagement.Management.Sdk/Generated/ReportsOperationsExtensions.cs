// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ReportsOperations
    /// </summary>
    public static partial class ReportsOperationsExtensions
    {
        /// <summary>
        /// Lists report records by API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReportRecordContract> ListByApi(this IReportsOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract>))
        {
                return ((IReportsOperations)operations).ListByApiAsync(resourceGroupName, serviceName, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists report records by API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReportRecordContract>> ListByApiAsync(this IReportsOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByApiWithHttpMessagesAsync(resourceGroupName, serviceName, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists report records by User.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReportRecordContract> ListByUser(this IReportsOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract>))
        {
                return ((IReportsOperations)operations).ListByUserAsync(resourceGroupName, serviceName, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists report records by User.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReportRecordContract>> ListByUserAsync(this IReportsOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByUserWithHttpMessagesAsync(resourceGroupName, serviceName, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists report records by API Operations.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReportRecordContract> ListByOperation(this IReportsOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract>))
        {
                return ((IReportsOperations)operations).ListByOperationAsync(resourceGroupName, serviceName, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists report records by API Operations.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReportRecordContract>> ListByOperationAsync(this IReportsOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByOperationWithHttpMessagesAsync(resourceGroupName, serviceName, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists report records by Product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReportRecordContract> ListByProduct(this IReportsOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract>))
        {
                return ((IReportsOperations)operations).ListByProductAsync(resourceGroupName, serviceName, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists report records by Product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReportRecordContract>> ListByProductAsync(this IReportsOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByProductWithHttpMessagesAsync(resourceGroupName, serviceName, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists report records by geography.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReportRecordContract> ListByGeo(this IReportsOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract>))
        {
                return ((IReportsOperations)operations).ListByGeoAsync(resourceGroupName, serviceName, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists report records by geography.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReportRecordContract>> ListByGeoAsync(this IReportsOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByGeoWithHttpMessagesAsync(resourceGroupName, serviceName, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists report records by subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReportRecordContract> ListBySubscription(this IReportsOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract>))
        {
                return ((IReportsOperations)operations).ListBySubscriptionAsync(resourceGroupName, serviceName, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists report records by subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReportRecordContract>> ListBySubscriptionAsync(this IReportsOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(resourceGroupName, serviceName, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists report records by Time.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='interval'>
        /// By time interval. Interval must be multiple of 15 minutes and may not be
        /// zero. The value should be in ISO  8601 format
        /// (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to
        /// convert TimeSpan to a valid interval string: XmlConvert.ToString(new
        /// TimeSpan(hours, minutes, seconds)).
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReportRecordContract> ListByTime(this IReportsOperations operations, string resourceGroupName, string serviceName, System.TimeSpan interval, Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract>))
        {
                return ((IReportsOperations)operations).ListByTimeAsync(resourceGroupName, serviceName, interval, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists report records by Time.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='interval'>
        /// By time interval. Interval must be multiple of 15 minutes and may not be
        /// zero. The value should be in ISO  8601 format
        /// (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to
        /// convert TimeSpan to a valid interval string: XmlConvert.ToString(new
        /// TimeSpan(hours, minutes, seconds)).
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReportRecordContract>> ListByTimeAsync(this IReportsOperations operations, string resourceGroupName, string serviceName, System.TimeSpan interval, Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ReportRecordContract>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByTimeWithHttpMessagesAsync(resourceGroupName, serviceName, interval, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists report records by Request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        public static System.Collections.Generic.IEnumerable<RequestReportRecordContract> ListByRequest(this IReportsOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<RequestReportRecordContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<RequestReportRecordContract>))
        {
                return ((IReportsOperations)operations).ListByRequestAsync(resourceGroupName, serviceName, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists report records by Request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<RequestReportRecordContract>> ListByRequestAsync(this IReportsOperations operations, string resourceGroupName, string serviceName, Microsoft.Rest.Azure.OData.ODataQuery<RequestReportRecordContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<RequestReportRecordContract>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByRequestWithHttpMessagesAsync(resourceGroupName, serviceName, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists report records by API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReportRecordContract> ListByApiNext(this IReportsOperations operations, string nextPageLink)
        {
                return ((IReportsOperations)operations).ListByApiNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists report records by API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReportRecordContract>> ListByApiNextAsync(this IReportsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByApiNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists report records by User.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReportRecordContract> ListByUserNext(this IReportsOperations operations, string nextPageLink)
        {
                return ((IReportsOperations)operations).ListByUserNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists report records by User.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReportRecordContract>> ListByUserNextAsync(this IReportsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByUserNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists report records by API Operations.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReportRecordContract> ListByOperationNext(this IReportsOperations operations, string nextPageLink)
        {
                return ((IReportsOperations)operations).ListByOperationNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists report records by API Operations.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReportRecordContract>> ListByOperationNextAsync(this IReportsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByOperationNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists report records by Product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReportRecordContract> ListByProductNext(this IReportsOperations operations, string nextPageLink)
        {
                return ((IReportsOperations)operations).ListByProductNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists report records by Product.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReportRecordContract>> ListByProductNextAsync(this IReportsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByProductNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists report records by geography.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReportRecordContract> ListByGeoNext(this IReportsOperations operations, string nextPageLink)
        {
                return ((IReportsOperations)operations).ListByGeoNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists report records by geography.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReportRecordContract>> ListByGeoNextAsync(this IReportsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByGeoNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists report records by subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReportRecordContract> ListBySubscriptionNext(this IReportsOperations operations, string nextPageLink)
        {
                return ((IReportsOperations)operations).ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists report records by subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReportRecordContract>> ListBySubscriptionNextAsync(this IReportsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists report records by Time.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReportRecordContract> ListByTimeNext(this IReportsOperations operations, string nextPageLink)
        {
                return ((IReportsOperations)operations).ListByTimeNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists report records by Time.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReportRecordContract>> ListByTimeNextAsync(this IReportsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByTimeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
