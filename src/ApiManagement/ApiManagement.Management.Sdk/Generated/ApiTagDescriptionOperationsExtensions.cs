// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ApiTagDescriptionOperations
    /// </summary>
    public static partial class ApiTagDescriptionOperationsExtensions
    {
        /// <summary>
        /// Lists all Tags descriptions in scope of API. Model similar to swagger -
        /// tagDescription is defined on API level but tag may be assigned to the
        /// Operations
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TagDescriptionContract> ListByService(this IApiTagDescriptionOperations operations, string resourceGroupName, string serviceName, string apiId, Microsoft.Rest.Azure.OData.ODataQuery<TagDescriptionContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<TagDescriptionContract>))
        {
                return ((IApiTagDescriptionOperations)operations).ListByServiceAsync(resourceGroupName, serviceName, apiId, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all Tags descriptions in scope of API. Model similar to swagger -
        /// tagDescription is defined on API level but tag may be assigned to the
        /// Operations
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TagDescriptionContract>> ListByServiceAsync(this IApiTagDescriptionOperations operations, string resourceGroupName, string serviceName, string apiId, Microsoft.Rest.Azure.OData.ODataQuery<TagDescriptionContract> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<TagDescriptionContract>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByServiceWithHttpMessagesAsync(resourceGroupName, serviceName, apiId, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the entity state version of the tag specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='tagDescriptionId'>
        /// Tag description identifier. Used when creating tagDescription for API/Tag
        /// association. Based on API and Tag names.
        /// </param>
        public static bool GetEntityTag(this IApiTagDescriptionOperations operations, string resourceGroupName, string serviceName, string apiId, string tagDescriptionId)
        {
                return ((IApiTagDescriptionOperations)operations).GetEntityTagAsync(resourceGroupName, serviceName, apiId, tagDescriptionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the entity state version of the tag specified by its identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='tagDescriptionId'>
        /// Tag description identifier. Used when creating tagDescription for API/Tag
        /// association. Based on API and Tag names.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<bool> GetEntityTagAsync(this IApiTagDescriptionOperations operations, string resourceGroupName, string serviceName, string apiId, string tagDescriptionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetEntityTagWithHttpMessagesAsync(resourceGroupName, serviceName, apiId, tagDescriptionId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get Tag description in scope of API
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='tagDescriptionId'>
        /// Tag description identifier. Used when creating tagDescription for API/Tag
        /// association. Based on API and Tag names.
        /// </param>
        public static TagDescriptionContract Get(this IApiTagDescriptionOperations operations, string resourceGroupName, string serviceName, string apiId, string tagDescriptionId)
        {
                return ((IApiTagDescriptionOperations)operations).GetAsync(resourceGroupName, serviceName, apiId, tagDescriptionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get Tag description in scope of API
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='tagDescriptionId'>
        /// Tag description identifier. Used when creating tagDescription for API/Tag
        /// association. Based on API and Tag names.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TagDescriptionContract> GetAsync(this IApiTagDescriptionOperations operations, string resourceGroupName, string serviceName, string apiId, string tagDescriptionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serviceName, apiId, tagDescriptionId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create/Update tag description in scope of the Api.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='tagDescriptionId'>
        /// Tag description identifier. Used when creating tagDescription for API/Tag
        /// association. Based on API and Tag names.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. Not required when creating an entity, but required when
        /// updating an entity.
        /// </param>
        public static TagDescriptionContract CreateOrUpdate(this IApiTagDescriptionOperations operations, string resourceGroupName, string serviceName, string apiId, string tagDescriptionId, TagDescriptionCreateParameters parameters, string ifMatch = default(string))
        {
                return ((IApiTagDescriptionOperations)operations).CreateOrUpdateAsync(resourceGroupName, serviceName, apiId, tagDescriptionId, parameters, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create/Update tag description in scope of the Api.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='tagDescriptionId'>
        /// Tag description identifier. Used when creating tagDescription for API/Tag
        /// association. Based on API and Tag names.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. Not required when creating an entity, but required when
        /// updating an entity.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TagDescriptionContract> CreateOrUpdateAsync(this IApiTagDescriptionOperations operations, string resourceGroupName, string serviceName, string apiId, string tagDescriptionId, TagDescriptionCreateParameters parameters, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceName, apiId, tagDescriptionId, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete tag description for the Api.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='tagDescriptionId'>
        /// Tag description identifier. Used when creating tagDescription for API/Tag
        /// association. Based on API and Tag names.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        public static void Delete(this IApiTagDescriptionOperations operations, string resourceGroupName, string serviceName, string apiId, string tagDescriptionId, string ifMatch)
        {
                ((IApiTagDescriptionOperations)operations).DeleteAsync(resourceGroupName, serviceName, apiId, tagDescriptionId, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete tag description for the Api.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the API Management service.
        /// </param>
        /// <param name='apiId'>
        /// API revision identifier. Must be unique in the current API Management
        /// service instance. Non-current revision has ;rev=n as a suffix where n is
        /// the revision number.
        /// </param>
        /// <param name='tagDescriptionId'>
        /// Tag description identifier. Used when creating tagDescription for API/Tag
        /// association. Based on API and Tag names.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the Entity. ETag should match the current entity state from the
        /// header response of the GET request or it should be * for unconditional
        /// update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IApiTagDescriptionOperations operations, string resourceGroupName, string serviceName, string apiId, string tagDescriptionId, string ifMatch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serviceName, apiId, tagDescriptionId, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists all Tags descriptions in scope of API. Model similar to swagger -
        /// tagDescription is defined on API level but tag may be assigned to the
        /// Operations
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TagDescriptionContract> ListByServiceNext(this IApiTagDescriptionOperations operations, string nextPageLink)
        {
                return ((IApiTagDescriptionOperations)operations).ListByServiceNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all Tags descriptions in scope of API. Model similar to swagger -
        /// tagDescription is defined on API level but tag may be assigned to the
        /// Operations
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TagDescriptionContract>> ListByServiceNextAsync(this IApiTagDescriptionOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByServiceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
