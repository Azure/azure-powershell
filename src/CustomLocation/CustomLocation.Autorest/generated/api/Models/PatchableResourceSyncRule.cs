// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Runtime.Extensions;

    /// <summary>The Resource Sync Rules patchable resource definition.</summary>
    public partial class PatchableResourceSyncRule :
        Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IPatchableResourceSyncRule,
        Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IPatchableResourceSyncRuleInternal
    {

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRuleProperties Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IPatchableResourceSyncRuleInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.ResourceSyncRuleProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IPatchableResourceSyncRuleInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRulePropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRulePropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for Selector</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRulePropertiesSelector Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IPatchableResourceSyncRuleInternal.Selector { get => ((Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRulePropertiesInternal)Property).Selector; set => ((Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRulePropertiesInternal)Property).Selector = value; }

        /// <summary>Priority represents a priority of the Resource Sync Rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Origin(Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.PropertyOrigin.Inlined)]
        public int? Priority { get => ((Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRulePropertiesInternal)Property).Priority; set => ((Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRulePropertiesInternal)Property).Priority = value ?? default(int); }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRuleProperties _property;

        /// <summary>The Resource Sync Rules patchable properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Origin(Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRuleProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.ResourceSyncRuleProperties()); set => this._property = value; }

        /// <summary>Provisioning State for the Resource Sync Rule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Origin(Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.PropertyOrigin.Inlined)]
        public string ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRulePropertiesInternal)Property).ProvisioningState; }

        /// <summary>
        /// MatchExpressions is a list of resource selector requirements. Valid operators include In, NotIn, Exists, and DoesNotExist.
        /// The values set must be non-empty in the case of In and NotIn. The values set must be empty in the case of Exists and DoesNotExist.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Origin(Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IMatchExpressionsProperties> SelectorMatchExpression { get => ((Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRulePropertiesInternal)Property).SelectorMatchExpression; set => ((Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRulePropertiesInternal)Property).SelectorMatchExpression = value ?? null /* arrayOf */; }

        /// <summary>
        /// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of
        /// matchExpressions, whose key field is 'key', the operator is 'In', and the values array contains only 'value'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Origin(Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRulePropertiesSelectorMatchLabels SelectorMatchLabel { get => ((Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRulePropertiesInternal)Property).SelectorMatchLabel; set => ((Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRulePropertiesInternal)Property).SelectorMatchLabel = value ?? null /* model class */; }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IPatchableResourceSyncRuleTags _tag;

        /// <summary>Resource tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Origin(Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IPatchableResourceSyncRuleTags Tag { get => (this._tag = this._tag ?? new Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.PatchableResourceSyncRuleTags()); set => this._tag = value; }

        /// <summary>
        /// For an unmapped custom resource, its labels will be used to find matching resource sync rules. If this resource sync rule
        /// is one of the matching rules with highest priority, then the unmapped custom resource will be projected to the target
        /// resource group associated with this resource sync rule. The user creating this resource sync rule should have write permissions
        /// on the target resource group and this write permission will be validated when creating the resource sync rule.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Origin(Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.PropertyOrigin.Inlined)]
        public string TargetResourceGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRulePropertiesInternal)Property).TargetResourceGroup; set => ((Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRulePropertiesInternal)Property).TargetResourceGroup = value ?? null; }

        /// <summary>Creates an new <see cref="PatchableResourceSyncRule" /> instance.</summary>
        public PatchableResourceSyncRule()
        {

        }
    }
    /// The Resource Sync Rules patchable resource definition.
    public partial interface IPatchableResourceSyncRule :
        Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Runtime.IJsonSerializable
    {
        /// <summary>Priority represents a priority of the Resource Sync Rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Priority represents a priority of the Resource Sync Rule",
        SerializedName = @"priority",
        PossibleTypes = new [] { typeof(int) })]
        int? Priority { get; set; }
        /// <summary>Provisioning State for the Resource Sync Rule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provisioning State for the Resource Sync Rule.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get;  }
        /// <summary>
        /// MatchExpressions is a list of resource selector requirements. Valid operators include In, NotIn, Exists, and DoesNotExist.
        /// The values set must be non-empty in the case of In and NotIn. The values set must be empty in the case of Exists and DoesNotExist.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"MatchExpressions is a list of resource selector requirements. Valid operators include In, NotIn, Exists, and DoesNotExist. The values set must be non-empty in the case of In and NotIn. The values set must be empty in the case of Exists and DoesNotExist.",
        SerializedName = @"matchExpressions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IMatchExpressionsProperties) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IMatchExpressionsProperties> SelectorMatchExpression { get; set; }
        /// <summary>
        /// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of
        /// matchExpressions, whose key field is 'key', the operator is 'In', and the values array contains only 'value'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is 'key', the operator is 'In', and the values array contains only 'value'.",
        SerializedName = @"matchLabels",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRulePropertiesSelectorMatchLabels) })]
        Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRulePropertiesSelectorMatchLabels SelectorMatchLabel { get; set; }
        /// <summary>Resource tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource tags",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IPatchableResourceSyncRuleTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IPatchableResourceSyncRuleTags Tag { get; set; }
        /// <summary>
        /// For an unmapped custom resource, its labels will be used to find matching resource sync rules. If this resource sync rule
        /// is one of the matching rules with highest priority, then the unmapped custom resource will be projected to the target
        /// resource group associated with this resource sync rule. The user creating this resource sync rule should have write permissions
        /// on the target resource group and this write permission will be validated when creating the resource sync rule.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"For an unmapped custom resource, its labels will be used to find matching resource sync rules. If this resource sync rule is one of the matching rules with highest priority, then the unmapped custom resource will be projected to the target resource group associated with this resource sync rule. The user creating this resource sync rule should have write permissions on the target resource group and this write permission will be validated when creating the resource sync rule.",
        SerializedName = @"targetResourceGroup",
        PossibleTypes = new [] { typeof(string) })]
        string TargetResourceGroup { get; set; }

    }
    /// The Resource Sync Rules patchable resource definition.
    internal partial interface IPatchableResourceSyncRuleInternal

    {
        /// <summary>Priority represents a priority of the Resource Sync Rule</summary>
        int? Priority { get; set; }
        /// <summary>The Resource Sync Rules patchable properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRuleProperties Property { get; set; }
        /// <summary>Provisioning State for the Resource Sync Rule.</summary>
        string ProvisioningState { get; set; }
        /// <summary>
        /// A label selector is composed of two parts, matchLabels and matchExpressions. The first part, matchLabels is a map of {key,value}
        /// pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is
        /// 'key', the operator is 'In', and the values array contains only 'value'. The second part, matchExpressions is a list of
        /// resource selector requirements. Valid operators include In, NotIn, Exists, and DoesNotExist. The values set must be non-empty
        /// in the case of In and NotIn. The values set must be empty in the case of Exists and DoesNotExist. All of the requirements,
        /// from both matchLabels and matchExpressions must all be satisfied in order to match.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRulePropertiesSelector Selector { get; set; }
        /// <summary>
        /// MatchExpressions is a list of resource selector requirements. Valid operators include In, NotIn, Exists, and DoesNotExist.
        /// The values set must be non-empty in the case of In and NotIn. The values set must be empty in the case of Exists and DoesNotExist.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IMatchExpressionsProperties> SelectorMatchExpression { get; set; }
        /// <summary>
        /// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of
        /// matchExpressions, whose key field is 'key', the operator is 'In', and the values array contains only 'value'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IResourceSyncRulePropertiesSelectorMatchLabels SelectorMatchLabel { get; set; }
        /// <summary>Resource tags</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.IPatchableResourceSyncRuleTags Tag { get; set; }
        /// <summary>
        /// For an unmapped custom resource, its labels will be used to find matching resource sync rules. If this resource sync rule
        /// is one of the matching rules with highest priority, then the unmapped custom resource will be projected to the target
        /// resource group associated with this resource sync rule. The user creating this resource sync rule should have write permissions
        /// on the target resource group and this write permission will be validated when creating the resource sync rule.
        /// </summary>
        string TargetResourceGroup { get; set; }

    }
}