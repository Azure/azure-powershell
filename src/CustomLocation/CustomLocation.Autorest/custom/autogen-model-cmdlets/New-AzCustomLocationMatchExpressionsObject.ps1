
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for MatchExpressionsProperties.
.Description
Create an in-memory object for MatchExpressionsProperties.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.MatchExpressionsProperties
.Link
https://learn.microsoft.com/powershell/module/Az.CustomLocation/new-azcustomlocationmatchexpressionsobject
#>
function New-AzCustomLocationMatchExpressionsObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.MatchExpressionsProperties')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="Key is the label key that the selector applies to.")]
        [string]
        $Key,
        [Parameter(HelpMessage="The Operator field represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.")]
        [string]
        $Operator,
        [Parameter(HelpMessage="The label value.")]
        [string[]]
        $Value
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.CustomLocation.Models.MatchExpressionsProperties]::New()

        if ($PSBoundParameters.ContainsKey('Key')) {
            $Object.Key = $Key
        }
        if ($PSBoundParameters.ContainsKey('Operator')) {
            $Object.Operator = $Operator
        }
        if ($PSBoundParameters.ContainsKey('Value')) {
            $Object.Value = $Value
        }
        return $Object
    }
}

