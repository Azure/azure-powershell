// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Extensions;

    /// <summary>Crypto certificate properties</summary>
    public partial class CryptoCertificate :
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificate,
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateInternal
    {

        /// <summary>Backing field for <see cref="CryptoCertId" /> property.</summary>
        private string _cryptoCertId;

        /// <summary>ID for the certificate result.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public string CryptoCertId { get => this._cryptoCertId; set => this._cryptoCertId = value; }

        /// <summary>Backing field for <see cref="Encoding" /> property.</summary>
        private string _encoding;

        /// <summary>Encoding used for the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public string Encoding { get => this._encoding; set => this._encoding = value; }

        /// <summary>Backing field for <see cref="ExpirationDate" /> property.</summary>
        private global::System.DateTime? _expirationDate;

        /// <summary>Expiration date for the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public global::System.DateTime? ExpirationDate { get => this._expirationDate; set => this._expirationDate = value; }

        /// <summary>Backing field for <see cref="FilePath" /> property.</summary>
        private System.Collections.Generic.List<string> _filePath;

        /// <summary>List of files where this certificate was found.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> FilePath { get => this._filePath; }

        /// <summary>Backing field for <see cref="Fingerprint" /> property.</summary>
        private string _fingerprint;

        /// <summary>Fingerprint of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public string Fingerprint { get => this._fingerprint; set => this._fingerprint = value; }

        /// <summary>Backing field for <see cref="IsExpired" /> property.</summary>
        private bool? _isExpired;

        /// <summary>Indicates if the certificate is expired.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public bool? IsExpired { get => this._isExpired; set => this._isExpired = value; }

        /// <summary>Backing field for <see cref="IsSelfSigned" /> property.</summary>
        private bool? _isSelfSigned;

        /// <summary>Indicates if the certificate is self-signed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public bool? IsSelfSigned { get => this._isSelfSigned; set => this._isSelfSigned = value; }

        /// <summary>Backing field for <see cref="IsShortKeySize" /> property.</summary>
        private bool? _isShortKeySize;

        /// <summary>
        /// Indicates the certificate's key size is considered too small to be secure for the key algorithm.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public bool? IsShortKeySize { get => this._isShortKeySize; set => this._isShortKeySize = value; }

        /// <summary>Backing field for <see cref="IsWeakSignature" /> property.</summary>
        private bool? _isWeakSignature;

        /// <summary>Indicates the signature algorithm used is insecure.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public bool? IsWeakSignature { get => this._isWeakSignature; set => this._isWeakSignature = value; }

        /// <summary>Backing field for <see cref="IssuedDate" /> property.</summary>
        private global::System.DateTime? _issuedDate;

        /// <summary>Issue date for the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public global::System.DateTime? IssuedDate { get => this._issuedDate; set => this._issuedDate = value; }

        /// <summary>Backing field for <see cref="Issuer" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntity _issuer;

        /// <summary>Issuer information of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntity Issuer { get => (this._issuer = this._issuer ?? new Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.CryptoCertificateEntity()); set => this._issuer = value; }

        /// <summary>Common name of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Inlined)]
        public string IssuerCommonName { get => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Issuer).CommonName; set => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Issuer).CommonName = value ?? null; }

        /// <summary>Country code of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Inlined)]
        public string IssuerCountry { get => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Issuer).Country; set => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Issuer).Country = value ?? null; }

        /// <summary>Organization of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Inlined)]
        public string IssuerOrganization { get => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Issuer).Organization; set => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Issuer).Organization = value ?? null; }

        /// <summary>The organizational unit of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Inlined)]
        public string IssuerOrganizationalUnit { get => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Issuer).OrganizationalUnit; set => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Issuer).OrganizationalUnit = value ?? null; }

        /// <summary>Geographical state or province of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Inlined)]
        public string IssuerState { get => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Issuer).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Issuer).State = value ?? null; }

        /// <summary>Backing field for <see cref="KeyAlgorithm" /> property.</summary>
        private string _keyAlgorithm;

        /// <summary>Key algorithm used in the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public string KeyAlgorithm { get => this._keyAlgorithm; set => this._keyAlgorithm = value; }

        /// <summary>Backing field for <see cref="KeySize" /> property.</summary>
        private long? _keySize;

        /// <summary>Size of the certificate's key in bits</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? KeySize { get => this._keySize; set => this._keySize = value; }

        /// <summary>Internal Acessors for FilePath</summary>
        System.Collections.Generic.List<string> Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateInternal.FilePath { get => this._filePath; set { {_filePath = value;} } }

        /// <summary>Internal Acessors for Issuer</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntity Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateInternal.Issuer { get => (this._issuer = this._issuer ?? new Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.CryptoCertificateEntity()); set { {_issuer = value;} } }

        /// <summary>Internal Acessors for PairedKey</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IPairedKey Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateInternal.PairedKey { get => (this._pairedKey = this._pairedKey ?? new Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.PairedKey()); set { {_pairedKey = value;} } }

        /// <summary>Internal Acessors for Subject</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntity Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateInternal.Subject { get => (this._subject = this._subject ?? new Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.CryptoCertificateEntity()); set { {_subject = value;} } }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Name of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="PairedKey" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IPairedKey _pairedKey;

        /// <summary>A matching paired private key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IPairedKey PairedKey { get => (this._pairedKey = this._pairedKey ?? new Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.PairedKey()); set => this._pairedKey = value; }

        /// <summary>ID of the paired key or certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Inlined)]
        public string PairedKeyId { get => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IPairedKeyInternal)PairedKey).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IPairedKeyInternal)PairedKey).Id = value ?? null; }

        /// <summary>The type indicating whether the paired object is a key or certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Inlined)]
        public string PairedKeyType { get => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IPairedKeyInternal)PairedKey).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IPairedKeyInternal)PairedKey).Type = value ?? null; }

        /// <summary>Backing field for <see cref="Role" /> property.</summary>
        private string _role;

        /// <summary>Role of the certificate (Root CA, etc)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public string Role { get => this._role; set => this._role = value; }

        /// <summary>Backing field for <see cref="SerialNumber" /> property.</summary>
        private string _serialNumber;

        /// <summary>Serial number of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public string SerialNumber { get => this._serialNumber; set => this._serialNumber = value; }

        /// <summary>Backing field for <see cref="SignatureAlgorithm" /> property.</summary>
        private string _signatureAlgorithm;

        /// <summary>The signature algorithm used in the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public string SignatureAlgorithm { get => this._signatureAlgorithm; set => this._signatureAlgorithm = value; }

        /// <summary>Backing field for <see cref="Subject" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntity _subject;

        /// <summary>Subject information of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntity Subject { get => (this._subject = this._subject ?? new Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.CryptoCertificateEntity()); set => this._subject = value; }

        /// <summary>Common name of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Inlined)]
        public string SubjectCommonName { get => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Subject).CommonName; set => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Subject).CommonName = value ?? null; }

        /// <summary>Country code of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Inlined)]
        public string SubjectCountry { get => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Subject).Country; set => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Subject).Country = value ?? null; }

        /// <summary>Organization of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Inlined)]
        public string SubjectOrganization { get => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Subject).Organization; set => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Subject).Organization = value ?? null; }

        /// <summary>The organizational unit of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Inlined)]
        public string SubjectOrganizationalUnit { get => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Subject).OrganizationalUnit; set => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Subject).OrganizationalUnit = value ?? null; }

        /// <summary>Geographical state or province of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Inlined)]
        public string SubjectState { get => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Subject).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntityInternal)Subject).State = value ?? null; }

        /// <summary>Backing field for <see cref="Usage" /> property.</summary>
        private System.Collections.Generic.List<string> _usage;

        /// <summary>List of functions the certificate can fulfill.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> Usage { get => this._usage; set => this._usage = value; }

        /// <summary>Creates an new <see cref="CryptoCertificate" /> instance.</summary>
        public CryptoCertificate()
        {

        }
    }
    /// Crypto certificate properties
    public partial interface ICryptoCertificate :
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.IJsonSerializable
    {
        /// <summary>ID for the certificate result.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"ID for the certificate result.",
        SerializedName = @"cryptoCertId",
        PossibleTypes = new [] { typeof(string) })]
        string CryptoCertId { get; set; }
        /// <summary>Encoding used for the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Encoding used for the certificate.",
        SerializedName = @"encoding",
        PossibleTypes = new [] { typeof(string) })]
        string Encoding { get; set; }
        /// <summary>Expiration date for the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Expiration date for the certificate.",
        SerializedName = @"expirationDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExpirationDate { get; set; }
        /// <summary>List of files where this certificate was found.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"List of files where this certificate was found.",
        SerializedName = @"filePaths",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> FilePath { get;  }
        /// <summary>Fingerprint of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Fingerprint of the certificate.",
        SerializedName = @"fingerprint",
        PossibleTypes = new [] { typeof(string) })]
        string Fingerprint { get; set; }
        /// <summary>Indicates if the certificate is expired.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates if the certificate is expired.",
        SerializedName = @"isExpired",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsExpired { get; set; }
        /// <summary>Indicates if the certificate is self-signed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates if the certificate is self-signed.",
        SerializedName = @"isSelfSigned",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsSelfSigned { get; set; }
        /// <summary>
        /// Indicates the certificate's key size is considered too small to be secure for the key algorithm.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates the certificate's key size is considered too small to be secure for the key algorithm.",
        SerializedName = @"isShortKeySize",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsShortKeySize { get; set; }
        /// <summary>Indicates the signature algorithm used is insecure.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates the signature algorithm used is insecure.",
        SerializedName = @"isWeakSignature",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsWeakSignature { get; set; }
        /// <summary>Issue date for the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Issue date for the certificate.",
        SerializedName = @"issuedDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? IssuedDate { get; set; }
        /// <summary>Common name of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Common name of the certificate entity.",
        SerializedName = @"commonName",
        PossibleTypes = new [] { typeof(string) })]
        string IssuerCommonName { get; set; }
        /// <summary>Country code of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Country code of the certificate entity.",
        SerializedName = @"country",
        PossibleTypes = new [] { typeof(string) })]
        string IssuerCountry { get; set; }
        /// <summary>Organization of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Organization of the certificate entity.",
        SerializedName = @"organization",
        PossibleTypes = new [] { typeof(string) })]
        string IssuerOrganization { get; set; }
        /// <summary>The organizational unit of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The organizational unit of the certificate entity.",
        SerializedName = @"organizationalUnit",
        PossibleTypes = new [] { typeof(string) })]
        string IssuerOrganizationalUnit { get; set; }
        /// <summary>Geographical state or province of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Geographical state or province of the certificate entity.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        string IssuerState { get; set; }
        /// <summary>Key algorithm used in the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Key algorithm used in the certificate.",
        SerializedName = @"keyAlgorithm",
        PossibleTypes = new [] { typeof(string) })]
        string KeyAlgorithm { get; set; }
        /// <summary>Size of the certificate's key in bits</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Size of the certificate's key in bits",
        SerializedName = @"keySize",
        PossibleTypes = new [] { typeof(long) })]
        long? KeySize { get; set; }
        /// <summary>Name of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Name of the certificate.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>ID of the paired key or certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"ID of the paired key or certificate.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string PairedKeyId { get; set; }
        /// <summary>The type indicating whether the paired object is a key or certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The type indicating whether the paired object is a key or certificate.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string PairedKeyType { get; set; }
        /// <summary>Role of the certificate (Root CA, etc)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Role of the certificate (Root CA, etc)",
        SerializedName = @"role",
        PossibleTypes = new [] { typeof(string) })]
        string Role { get; set; }
        /// <summary>Serial number of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Serial number of the certificate.",
        SerializedName = @"serialNumber",
        PossibleTypes = new [] { typeof(string) })]
        string SerialNumber { get; set; }
        /// <summary>The signature algorithm used in the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The signature algorithm used in the certificate.",
        SerializedName = @"signatureAlgorithm",
        PossibleTypes = new [] { typeof(string) })]
        string SignatureAlgorithm { get; set; }
        /// <summary>Common name of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Common name of the certificate entity.",
        SerializedName = @"commonName",
        PossibleTypes = new [] { typeof(string) })]
        string SubjectCommonName { get; set; }
        /// <summary>Country code of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Country code of the certificate entity.",
        SerializedName = @"country",
        PossibleTypes = new [] { typeof(string) })]
        string SubjectCountry { get; set; }
        /// <summary>Organization of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Organization of the certificate entity.",
        SerializedName = @"organization",
        PossibleTypes = new [] { typeof(string) })]
        string SubjectOrganization { get; set; }
        /// <summary>The organizational unit of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The organizational unit of the certificate entity.",
        SerializedName = @"organizationalUnit",
        PossibleTypes = new [] { typeof(string) })]
        string SubjectOrganizationalUnit { get; set; }
        /// <summary>Geographical state or province of the certificate entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Geographical state or province of the certificate entity.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        string SubjectState { get; set; }
        /// <summary>List of functions the certificate can fulfill.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of functions the certificate can fulfill.",
        SerializedName = @"usage",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> Usage { get; set; }

    }
    /// Crypto certificate properties
    internal partial interface ICryptoCertificateInternal

    {
        /// <summary>ID for the certificate result.</summary>
        string CryptoCertId { get; set; }
        /// <summary>Encoding used for the certificate.</summary>
        string Encoding { get; set; }
        /// <summary>Expiration date for the certificate.</summary>
        global::System.DateTime? ExpirationDate { get; set; }
        /// <summary>List of files where this certificate was found.</summary>
        System.Collections.Generic.List<string> FilePath { get; set; }
        /// <summary>Fingerprint of the certificate.</summary>
        string Fingerprint { get; set; }
        /// <summary>Indicates if the certificate is expired.</summary>
        bool? IsExpired { get; set; }
        /// <summary>Indicates if the certificate is self-signed.</summary>
        bool? IsSelfSigned { get; set; }
        /// <summary>
        /// Indicates the certificate's key size is considered too small to be secure for the key algorithm.
        /// </summary>
        bool? IsShortKeySize { get; set; }
        /// <summary>Indicates the signature algorithm used is insecure.</summary>
        bool? IsWeakSignature { get; set; }
        /// <summary>Issue date for the certificate.</summary>
        global::System.DateTime? IssuedDate { get; set; }
        /// <summary>Issuer information of the certificate.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntity Issuer { get; set; }
        /// <summary>Common name of the certificate entity.</summary>
        string IssuerCommonName { get; set; }
        /// <summary>Country code of the certificate entity.</summary>
        string IssuerCountry { get; set; }
        /// <summary>Organization of the certificate entity.</summary>
        string IssuerOrganization { get; set; }
        /// <summary>The organizational unit of the certificate entity.</summary>
        string IssuerOrganizationalUnit { get; set; }
        /// <summary>Geographical state or province of the certificate entity.</summary>
        string IssuerState { get; set; }
        /// <summary>Key algorithm used in the certificate.</summary>
        string KeyAlgorithm { get; set; }
        /// <summary>Size of the certificate's key in bits</summary>
        long? KeySize { get; set; }
        /// <summary>Name of the certificate.</summary>
        string Name { get; set; }
        /// <summary>A matching paired private key.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IPairedKey PairedKey { get; set; }
        /// <summary>ID of the paired key or certificate.</summary>
        string PairedKeyId { get; set; }
        /// <summary>The type indicating whether the paired object is a key or certificate.</summary>
        string PairedKeyType { get; set; }
        /// <summary>Role of the certificate (Root CA, etc)</summary>
        string Role { get; set; }
        /// <summary>Serial number of the certificate.</summary>
        string SerialNumber { get; set; }
        /// <summary>The signature algorithm used in the certificate.</summary>
        string SignatureAlgorithm { get; set; }
        /// <summary>Subject information of the certificate.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoCertificateEntity Subject { get; set; }
        /// <summary>Common name of the certificate entity.</summary>
        string SubjectCommonName { get; set; }
        /// <summary>Country code of the certificate entity.</summary>
        string SubjectCountry { get; set; }
        /// <summary>Organization of the certificate entity.</summary>
        string SubjectOrganization { get; set; }
        /// <summary>The organizational unit of the certificate entity.</summary>
        string SubjectOrganizationalUnit { get; set; }
        /// <summary>Geographical state or province of the certificate entity.</summary>
        string SubjectState { get; set; }
        /// <summary>List of functions the certificate can fulfill.</summary>
        System.Collections.Generic.List<string> Usage { get; set; }

    }
}