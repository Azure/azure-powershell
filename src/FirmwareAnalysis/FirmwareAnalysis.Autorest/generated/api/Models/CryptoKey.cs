// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Extensions;

    /// <summary>Crypto key properties</summary>
    public partial class CryptoKey :
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoKey,
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoKeyInternal
    {

        /// <summary>Backing field for <see cref="FilePath" /> property.</summary>
        private System.Collections.Generic.List<string> _filePath;

        /// <summary>List of files where this key was found.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> FilePath { get => this._filePath; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>ID for the key result.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public string Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="IsShortKeySize" /> property.</summary>
        private bool? _isShortKeySize;

        /// <summary>Indicates the key size is considered too small to be secure for the algorithm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public bool? IsShortKeySize { get => this._isShortKeySize; set => this._isShortKeySize = value; }

        /// <summary>Backing field for <see cref="KeyAlgorithm" /> property.</summary>
        private string _keyAlgorithm;

        /// <summary>Key algorithm name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public string KeyAlgorithm { get => this._keyAlgorithm; set => this._keyAlgorithm = value; }

        /// <summary>Backing field for <see cref="KeySize" /> property.</summary>
        private long? _keySize;

        /// <summary>Size of the key in bits.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? KeySize { get => this._keySize; set => this._keySize = value; }

        /// <summary>Backing field for <see cref="KeyType" /> property.</summary>
        private string _keyType;

        /// <summary>Type of the key (public or private).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public string KeyType { get => this._keyType; set => this._keyType = value; }

        /// <summary>Internal Acessors for FilePath</summary>
        System.Collections.Generic.List<string> Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoKeyInternal.FilePath { get => this._filePath; set { {_filePath = value;} } }

        /// <summary>Internal Acessors for PairedKey</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IPairedKey Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoKeyInternal.PairedKey { get => (this._pairedKey = this._pairedKey ?? new Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.PairedKey()); set { {_pairedKey = value;} } }

        /// <summary>Backing field for <see cref="PairedKey" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IPairedKey _pairedKey;

        /// <summary>A matching paired key or certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IPairedKey PairedKey { get => (this._pairedKey = this._pairedKey ?? new Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.PairedKey()); set => this._pairedKey = value; }

        /// <summary>ID of the paired key or certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Inlined)]
        public string PairedKeyId { get => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IPairedKeyInternal)PairedKey).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IPairedKeyInternal)PairedKey).Id = value ?? null; }

        /// <summary>The type indicating whether the paired object is a key or certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Inlined)]
        public string PairedKeyType { get => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IPairedKeyInternal)PairedKey).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IPairedKeyInternal)PairedKey).Type = value ?? null; }

        /// <summary>Backing field for <see cref="Usage" /> property.</summary>
        private System.Collections.Generic.List<string> _usage;

        /// <summary>Functions the key can fulfill.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> Usage { get => this._usage; set => this._usage = value; }

        /// <summary>Creates an new <see cref="CryptoKey" /> instance.</summary>
        public CryptoKey()
        {

        }
    }
    /// Crypto key properties
    public partial interface ICryptoKey :
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.IJsonSerializable
    {
        /// <summary>List of files where this key was found.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"List of files where this key was found.",
        SerializedName = @"filePaths",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> FilePath { get;  }
        /// <summary>ID for the key result.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"ID for the key result.",
        SerializedName = @"cryptoKeyId",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get; set; }
        /// <summary>Indicates the key size is considered too small to be secure for the algorithm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates the key size is considered too small to be secure for the algorithm.",
        SerializedName = @"isShortKeySize",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsShortKeySize { get; set; }
        /// <summary>Key algorithm name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Key algorithm name.",
        SerializedName = @"keyAlgorithm",
        PossibleTypes = new [] { typeof(string) })]
        string KeyAlgorithm { get; set; }
        /// <summary>Size of the key in bits.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Size of the key in bits.",
        SerializedName = @"keySize",
        PossibleTypes = new [] { typeof(long) })]
        long? KeySize { get; set; }
        /// <summary>Type of the key (public or private).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Type of the key (public or private).",
        SerializedName = @"keyType",
        PossibleTypes = new [] { typeof(string) })]
        string KeyType { get; set; }
        /// <summary>ID of the paired key or certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"ID of the paired key or certificate.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string PairedKeyId { get; set; }
        /// <summary>The type indicating whether the paired object is a key or certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The type indicating whether the paired object is a key or certificate.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string PairedKeyType { get; set; }
        /// <summary>Functions the key can fulfill.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Functions the key can fulfill.",
        SerializedName = @"usage",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> Usage { get; set; }

    }
    /// Crypto key properties
    internal partial interface ICryptoKeyInternal

    {
        /// <summary>List of files where this key was found.</summary>
        System.Collections.Generic.List<string> FilePath { get; set; }
        /// <summary>ID for the key result.</summary>
        string Id { get; set; }
        /// <summary>Indicates the key size is considered too small to be secure for the algorithm.</summary>
        bool? IsShortKeySize { get; set; }
        /// <summary>Key algorithm name.</summary>
        string KeyAlgorithm { get; set; }
        /// <summary>Size of the key in bits.</summary>
        long? KeySize { get; set; }
        /// <summary>Type of the key (public or private).</summary>
        string KeyType { get; set; }
        /// <summary>A matching paired key or certificate.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IPairedKey PairedKey { get; set; }
        /// <summary>ID of the paired key or certificate.</summary>
        string PairedKeyId { get; set; }
        /// <summary>The type indicating whether the paired object is a key or certificate.</summary>
        string PairedKeyType { get; set; }
        /// <summary>Functions the key can fulfill.</summary>
        System.Collections.Generic.List<string> Usage { get; set; }

    }
}