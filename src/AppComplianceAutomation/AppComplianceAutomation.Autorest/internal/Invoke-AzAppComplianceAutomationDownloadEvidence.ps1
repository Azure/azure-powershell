
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Download evidence file.
.Description
Download evidence file.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Models.IAppComplianceAutomationIdentity
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Models.IEvidenceFileDownloadRequest
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Models.IEvidenceFileDownloadResponse
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODY <IEvidenceFileDownloadRequest>: Evidence file's download request.
  [OfferGuid <String>]: The offerGuid which mapping to the reports.
  [ReportCreatorTenantId <String>]: Tenant id.

INPUTOBJECT <IAppComplianceAutomationIdentity>: Identity Parameter
  [EvidenceName <String>]: The evidence name.
  [Id <String>]: Resource identity path
  [ReportName <String>]: Report Name.
  [ScopingConfigurationName <String>]: The scoping configuration of the specific report.
  [SnapshotName <String>]: Snapshot Name.
  [WebhookName <String>]: Webhook Name.

REPORTINPUTOBJECT <IAppComplianceAutomationIdentity>: Identity Parameter
  [EvidenceName <String>]: The evidence name.
  [Id <String>]: Resource identity path
  [ReportName <String>]: Report Name.
  [ScopingConfigurationName <String>]: The scoping configuration of the specific report.
  [SnapshotName <String>]: Snapshot Name.
  [WebhookName <String>]: Webhook Name.
.Link
https://learn.microsoft.com/powershell/module/az.appcomplianceautomation/invoke-azappcomplianceautomationdownloadevidence
#>
function Invoke-AzAppComplianceAutomationDownloadEvidence {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Models.IEvidenceFileDownloadResponse])]
[CmdletBinding(DefaultParameterSetName='DownloadExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Download', Mandatory)]
    [Parameter(ParameterSetName='DownloadExpanded', Mandatory)]
    [Parameter(ParameterSetName='DownloadViaIdentityReport', Mandatory)]
    [Parameter(ParameterSetName='DownloadViaIdentityReportExpanded', Mandatory)]
    [Parameter(ParameterSetName='DownloadViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='DownloadViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Category('Path')]
    [System.String]
    # The evidence name.
    ${EvidenceName},

    [Parameter(ParameterSetName='Download', Mandatory)]
    [Parameter(ParameterSetName='DownloadExpanded', Mandatory)]
    [Parameter(ParameterSetName='DownloadViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='DownloadViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Category('Path')]
    [System.String]
    # Report Name.
    ${ReportName},

    [Parameter(ParameterSetName='DownloadViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DownloadViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Models.IAppComplianceAutomationIdentity]
    # Identity Parameter
    ${InputObject},

    [Parameter(ParameterSetName='DownloadViaIdentityReport', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DownloadViaIdentityReportExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Models.IAppComplianceAutomationIdentity]
    # Identity Parameter
    ${ReportInputObject},

    [Parameter(ParameterSetName='Download', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DownloadViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='DownloadViaIdentityReport', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Models.IEvidenceFileDownloadRequest]
    # Evidence file's download request.
    ${Body},

    [Parameter(ParameterSetName='DownloadExpanded')]
    [Parameter(ParameterSetName='DownloadViaIdentityExpanded')]
    [Parameter(ParameterSetName='DownloadViaIdentityReportExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Category('Body')]
    [System.String]
    # The offerGuid which mapping to the reports.
    ${OfferGuid},

    [Parameter(ParameterSetName='DownloadExpanded')]
    [Parameter(ParameterSetName='DownloadViaIdentityExpanded')]
    [Parameter(ParameterSetName='DownloadViaIdentityReportExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Category('Body')]
    [System.String]
    # Tenant id.
    ${ReportCreatorTenantId},

    [Parameter(ParameterSetName='DownloadViaJsonFilePath', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Category('Body')]
    [System.String]
    # Path of Json file supplied to the Download operation
    ${JsonFilePath},

    [Parameter(ParameterSetName='DownloadViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Category('Body')]
    [System.String]
    # Json string supplied to the Download operation
    ${JsonString},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AppComplianceAutomation.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        $mapping = @{
            Download = 'Az.AppComplianceAutomation.private\Invoke-AzAppComplianceAutomationDownloadEvidence_Download';
            DownloadExpanded = 'Az.AppComplianceAutomation.private\Invoke-AzAppComplianceAutomationDownloadEvidence_DownloadExpanded';
            DownloadViaIdentity = 'Az.AppComplianceAutomation.private\Invoke-AzAppComplianceAutomationDownloadEvidence_DownloadViaIdentity';
            DownloadViaIdentityExpanded = 'Az.AppComplianceAutomation.private\Invoke-AzAppComplianceAutomationDownloadEvidence_DownloadViaIdentityExpanded';
            DownloadViaIdentityReport = 'Az.AppComplianceAutomation.private\Invoke-AzAppComplianceAutomationDownloadEvidence_DownloadViaIdentityReport';
            DownloadViaIdentityReportExpanded = 'Az.AppComplianceAutomation.private\Invoke-AzAppComplianceAutomationDownloadEvidence_DownloadViaIdentityReportExpanded';
            DownloadViaJsonFilePath = 'Az.AppComplianceAutomation.private\Invoke-AzAppComplianceAutomationDownloadEvidence_DownloadViaJsonFilePath';
            DownloadViaJsonString = 'Az.AppComplianceAutomation.private\Invoke-AzAppComplianceAutomationDownloadEvidence_DownloadViaJsonString';
        }

        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {

        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {

        throw
    }

}
end {
    try {
        $steppablePipeline.End()

    } catch {

        throw
    }
} 
}
