// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Extensions;

    /// <summary>Describes the properties of an AssessPatches result.</summary>
    public partial class MachineAssessPatchesResult :
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResult,
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal
    {

        /// <summary>Backing field for <see cref="AssessmentActivityId" /> property.</summary>
        private string _assessmentActivityId;

        /// <summary>The activity ID of the operation that produced this result.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public string AssessmentActivityId { get => this._assessmentActivityId; }

        /// <summary>Backing field for <see cref="AvailablePatchCountByClassification" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassification _availablePatchCountByClassification;

        /// <summary>
        /// Summarization of patches available for installation on the machine by classification.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassification AvailablePatchCountByClassification { get => (this._availablePatchCountByClassification = this._availablePatchCountByClassification ?? new Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.AvailablePatchCountByClassification()); set => this._availablePatchCountByClassification = value; }

        /// <summary>Number of critical patches available for installation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public int? AvailablePatchCountByClassificationCritical { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).Critical; }

        /// <summary>Number of definition patches available for installation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public int? AvailablePatchCountByClassificationDefinition { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).Definition; }

        /// <summary>Number of feature pack patches available for installation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public int? AvailablePatchCountByClassificationFeaturePack { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).FeaturePack; }

        /// <summary>Number of other patches available for installation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public int? AvailablePatchCountByClassificationOther { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).Other; }

        /// <summary>Number of security patches available for installation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public int? AvailablePatchCountByClassificationSecurity { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).Security; }

        /// <summary>Number of service pack patches available for installation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public int? AvailablePatchCountByClassificationServicePack { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).ServicePack; }

        /// <summary>Number of tools patches available for installation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public int? AvailablePatchCountByClassificationTool { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).Tool; }

        /// <summary>Number of updates category patches available for installation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public int? AvailablePatchCountByClassificationUpdate { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).Update; }

        /// <summary>Number of update Rollup patches available for installation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public int? AvailablePatchCountByClassificationUpdateRollup { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).UpdateRollup; }

        /// <summary>Backing field for <see cref="ErrorDetail" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetail _errorDetail;

        /// <summary>
        /// The errors that were encountered during execution of the operation. The details array contains the list of them.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetail ErrorDetail { get => (this._errorDetail = this._errorDetail ?? new Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.ErrorDetail()); }

        /// <summary>The error additional info.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20.IErrorAdditionalInfo[] ErrorDetailAdditionalInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetailInternal)ErrorDetail).AdditionalInfo; }

        /// <summary>The error code.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public string ErrorDetailCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetailInternal)ErrorDetail).Code; }

        /// <summary>The error message.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public string ErrorDetailMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetailInternal)ErrorDetail).Message; }

        /// <summary>The error target.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public string ErrorDetailTarget { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetailInternal)ErrorDetail).Target; }

        /// <summary>The error details.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetail[] ErrorDetailsDetails { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetailInternal)ErrorDetail).Detail; }

        /// <summary>Backing field for <see cref="LastModifiedDateTime" /> property.</summary>
        private global::System.DateTime? _lastModifiedDateTime;

        /// <summary>The UTC timestamp when the operation finished.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public global::System.DateTime? LastModifiedDateTime { get => this._lastModifiedDateTime; }

        /// <summary>Internal Acessors for AssessmentActivityId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.AssessmentActivityId { get => this._assessmentActivityId; set { {_assessmentActivityId = value;} } }

        /// <summary>Internal Acessors for AvailablePatchCountByClassification</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassification Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.AvailablePatchCountByClassification { get => (this._availablePatchCountByClassification = this._availablePatchCountByClassification ?? new Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.AvailablePatchCountByClassification()); set { {_availablePatchCountByClassification = value;} } }

        /// <summary>Internal Acessors for AvailablePatchCountByClassificationCritical</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.AvailablePatchCountByClassificationCritical { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).Critical; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).Critical = value; }

        /// <summary>Internal Acessors for AvailablePatchCountByClassificationDefinition</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.AvailablePatchCountByClassificationDefinition { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).Definition; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).Definition = value; }

        /// <summary>Internal Acessors for AvailablePatchCountByClassificationFeaturePack</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.AvailablePatchCountByClassificationFeaturePack { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).FeaturePack; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).FeaturePack = value; }

        /// <summary>Internal Acessors for AvailablePatchCountByClassificationOther</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.AvailablePatchCountByClassificationOther { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).Other; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).Other = value; }

        /// <summary>Internal Acessors for AvailablePatchCountByClassificationSecurity</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.AvailablePatchCountByClassificationSecurity { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).Security; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).Security = value; }

        /// <summary>Internal Acessors for AvailablePatchCountByClassificationServicePack</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.AvailablePatchCountByClassificationServicePack { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).ServicePack; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).ServicePack = value; }

        /// <summary>Internal Acessors for AvailablePatchCountByClassificationTool</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.AvailablePatchCountByClassificationTool { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).Tool; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).Tool = value; }

        /// <summary>Internal Acessors for AvailablePatchCountByClassificationUpdate</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.AvailablePatchCountByClassificationUpdate { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).Update; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).Update = value; }

        /// <summary>Internal Acessors for AvailablePatchCountByClassificationUpdateRollup</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.AvailablePatchCountByClassificationUpdateRollup { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).UpdateRollup; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassificationInternal)AvailablePatchCountByClassification).UpdateRollup = value; }

        /// <summary>Internal Acessors for ErrorDetail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetail Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.ErrorDetail { get => (this._errorDetail = this._errorDetail ?? new Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.ErrorDetail()); set { {_errorDetail = value;} } }

        /// <summary>Internal Acessors for ErrorDetailAdditionalInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20.IErrorAdditionalInfo[] Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.ErrorDetailAdditionalInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetailInternal)ErrorDetail).AdditionalInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetailInternal)ErrorDetail).AdditionalInfo = value; }

        /// <summary>Internal Acessors for ErrorDetailCode</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.ErrorDetailCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetailInternal)ErrorDetail).Code; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetailInternal)ErrorDetail).Code = value; }

        /// <summary>Internal Acessors for ErrorDetailMessage</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.ErrorDetailMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetailInternal)ErrorDetail).Message; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetailInternal)ErrorDetail).Message = value; }

        /// <summary>Internal Acessors for ErrorDetailTarget</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.ErrorDetailTarget { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetailInternal)ErrorDetail).Target; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetailInternal)ErrorDetail).Target = value; }

        /// <summary>Internal Acessors for ErrorDetailsDetails</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetail[] Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.ErrorDetailsDetails { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetailInternal)ErrorDetail).Detail; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetailInternal)ErrorDetail).Detail = value; }

        /// <summary>Internal Acessors for LastModifiedDateTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.LastModifiedDateTime { get => this._lastModifiedDateTime; set { {_lastModifiedDateTime = value;} } }

        /// <summary>Internal Acessors for OSType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.OSType? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.OSType { get => this._oSType; set { {_oSType = value;} } }

        /// <summary>Internal Acessors for PatchServiceUsed</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchServiceUsed? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.PatchServiceUsed { get => this._patchServiceUsed; set { {_patchServiceUsed = value;} } }

        /// <summary>Internal Acessors for RebootPending</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.RebootPending { get => this._rebootPending; set { {_rebootPending = value;} } }

        /// <summary>Internal Acessors for StartDateTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.StartDateTime { get => this._startDateTime; set { {_startDateTime = value;} } }

        /// <summary>Internal Acessors for StartedBy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchOperationStartedBy? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.StartedBy { get => this._startedBy; set { {_startedBy = value;} } }

        /// <summary>Internal Acessors for Status</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchOperationStatus? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineAssessPatchesResultInternal.Status { get => this._status; set { {_status = value;} } }

        /// <summary>Backing field for <see cref="OSType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.OSType? _oSType;

        /// <summary>The operating system type of the machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.OSType? OSType { get => this._oSType; }

        /// <summary>Backing field for <see cref="PatchServiceUsed" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchServiceUsed? _patchServiceUsed;

        /// <summary>Specifies the patch service used for the operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchServiceUsed? PatchServiceUsed { get => this._patchServiceUsed; }

        /// <summary>Backing field for <see cref="RebootPending" /> property.</summary>
        private bool? _rebootPending;

        /// <summary>
        /// The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation
        /// but the reboot has not yet occurred.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public bool? RebootPending { get => this._rebootPending; }

        /// <summary>Backing field for <see cref="StartDateTime" /> property.</summary>
        private global::System.DateTime? _startDateTime;

        /// <summary>The UTC timestamp when the operation began.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public global::System.DateTime? StartDateTime { get => this._startDateTime; }

        /// <summary>Backing field for <see cref="StartedBy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchOperationStartedBy? _startedBy;

        /// <summary>Indicates if operation was triggered by user or by platform.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchOperationStartedBy? StartedBy { get => this._startedBy; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchOperationStatus? _status;

        /// <summary>
        /// The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that
        /// point it will become "Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchOperationStatus? Status { get => this._status; }

        /// <summary>Creates an new <see cref="MachineAssessPatchesResult" /> instance.</summary>
        public MachineAssessPatchesResult()
        {

        }
    }
    /// Describes the properties of an AssessPatches result.
    public partial interface IMachineAssessPatchesResult :
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.IJsonSerializable
    {
        /// <summary>The activity ID of the operation that produced this result.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The activity ID of the operation that produced this result.",
        SerializedName = @"assessmentActivityId",
        PossibleTypes = new [] { typeof(string) })]
        string AssessmentActivityId { get;  }
        /// <summary>Number of critical patches available for installation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Number of critical patches available for installation.",
        SerializedName = @"critical",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailablePatchCountByClassificationCritical { get;  }
        /// <summary>Number of definition patches available for installation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Number of definition patches available for installation.",
        SerializedName = @"definition",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailablePatchCountByClassificationDefinition { get;  }
        /// <summary>Number of feature pack patches available for installation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Number of feature pack patches available for installation.",
        SerializedName = @"featurePack",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailablePatchCountByClassificationFeaturePack { get;  }
        /// <summary>Number of other patches available for installation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Number of other patches available for installation.",
        SerializedName = @"other",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailablePatchCountByClassificationOther { get;  }
        /// <summary>Number of security patches available for installation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Number of security patches available for installation.",
        SerializedName = @"security",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailablePatchCountByClassificationSecurity { get;  }
        /// <summary>Number of service pack patches available for installation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Number of service pack patches available for installation.",
        SerializedName = @"servicePack",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailablePatchCountByClassificationServicePack { get;  }
        /// <summary>Number of tools patches available for installation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Number of tools patches available for installation.",
        SerializedName = @"tools",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailablePatchCountByClassificationTool { get;  }
        /// <summary>Number of updates category patches available for installation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Number of updates category patches available for installation.",
        SerializedName = @"updates",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailablePatchCountByClassificationUpdate { get;  }
        /// <summary>Number of update Rollup patches available for installation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Number of update Rollup patches available for installation.",
        SerializedName = @"updateRollup",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailablePatchCountByClassificationUpdateRollup { get;  }
        /// <summary>The error additional info.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The error additional info.",
        SerializedName = @"additionalInfo",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20.IErrorAdditionalInfo) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20.IErrorAdditionalInfo[] ErrorDetailAdditionalInfo { get;  }
        /// <summary>The error code.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The error code.",
        SerializedName = @"code",
        PossibleTypes = new [] { typeof(string) })]
        string ErrorDetailCode { get;  }
        /// <summary>The error message.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The error message.",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string ErrorDetailMessage { get;  }
        /// <summary>The error target.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The error target.",
        SerializedName = @"target",
        PossibleTypes = new [] { typeof(string) })]
        string ErrorDetailTarget { get;  }
        /// <summary>The error details.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The error details.",
        SerializedName = @"details",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetail) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetail[] ErrorDetailsDetails { get;  }
        /// <summary>The UTC timestamp when the operation finished.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The UTC timestamp when the operation finished.",
        SerializedName = @"lastModifiedDateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastModifiedDateTime { get;  }
        /// <summary>The operating system type of the machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The operating system type of the machine.",
        SerializedName = @"osType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.OSType) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.OSType? OSType { get;  }
        /// <summary>Specifies the patch service used for the operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies the patch service used for the operation.",
        SerializedName = @"patchServiceUsed",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchServiceUsed) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchServiceUsed? PatchServiceUsed { get;  }
        /// <summary>
        /// The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation
        /// but the reboot has not yet occurred.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred.",
        SerializedName = @"rebootPending",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RebootPending { get;  }
        /// <summary>The UTC timestamp when the operation began.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The UTC timestamp when the operation began.",
        SerializedName = @"startDateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? StartDateTime { get;  }
        /// <summary>Indicates if operation was triggered by user or by platform.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Indicates if operation was triggered by user or by platform.",
        SerializedName = @"startedBy",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchOperationStartedBy) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchOperationStartedBy? StartedBy { get;  }
        /// <summary>
        /// The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that
        /// point it will become "Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The overall success or failure status of the operation. It remains ""InProgress"" until the operation completes. At that point it will become ""Unknown"", ""Failed"", ""Succeeded"", or ""CompletedWithWarnings.""",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchOperationStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchOperationStatus? Status { get;  }

    }
    /// Describes the properties of an AssessPatches result.
    internal partial interface IMachineAssessPatchesResultInternal

    {
        /// <summary>The activity ID of the operation that produced this result.</summary>
        string AssessmentActivityId { get; set; }
        /// <summary>
        /// Summarization of patches available for installation on the machine by classification.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAvailablePatchCountByClassification AvailablePatchCountByClassification { get; set; }
        /// <summary>Number of critical patches available for installation.</summary>
        int? AvailablePatchCountByClassificationCritical { get; set; }
        /// <summary>Number of definition patches available for installation.</summary>
        int? AvailablePatchCountByClassificationDefinition { get; set; }
        /// <summary>Number of feature pack patches available for installation.</summary>
        int? AvailablePatchCountByClassificationFeaturePack { get; set; }
        /// <summary>Number of other patches available for installation.</summary>
        int? AvailablePatchCountByClassificationOther { get; set; }
        /// <summary>Number of security patches available for installation.</summary>
        int? AvailablePatchCountByClassificationSecurity { get; set; }
        /// <summary>Number of service pack patches available for installation.</summary>
        int? AvailablePatchCountByClassificationServicePack { get; set; }
        /// <summary>Number of tools patches available for installation.</summary>
        int? AvailablePatchCountByClassificationTool { get; set; }
        /// <summary>Number of updates category patches available for installation.</summary>
        int? AvailablePatchCountByClassificationUpdate { get; set; }
        /// <summary>Number of update Rollup patches available for installation.</summary>
        int? AvailablePatchCountByClassificationUpdateRollup { get; set; }
        /// <summary>
        /// The errors that were encountered during execution of the operation. The details array contains the list of them.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetail ErrorDetail { get; set; }
        /// <summary>The error additional info.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20.IErrorAdditionalInfo[] ErrorDetailAdditionalInfo { get; set; }
        /// <summary>The error code.</summary>
        string ErrorDetailCode { get; set; }
        /// <summary>The error message.</summary>
        string ErrorDetailMessage { get; set; }
        /// <summary>The error target.</summary>
        string ErrorDetailTarget { get; set; }
        /// <summary>The error details.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetail[] ErrorDetailsDetails { get; set; }
        /// <summary>The UTC timestamp when the operation finished.</summary>
        global::System.DateTime? LastModifiedDateTime { get; set; }
        /// <summary>The operating system type of the machine.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.OSType? OSType { get; set; }
        /// <summary>Specifies the patch service used for the operation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchServiceUsed? PatchServiceUsed { get; set; }
        /// <summary>
        /// The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation
        /// but the reboot has not yet occurred.
        /// </summary>
        bool? RebootPending { get; set; }
        /// <summary>The UTC timestamp when the operation began.</summary>
        global::System.DateTime? StartDateTime { get; set; }
        /// <summary>Indicates if operation was triggered by user or by platform.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchOperationStartedBy? StartedBy { get; set; }
        /// <summary>
        /// The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that
        /// point it will become "Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchOperationStatus? Status { get; set; }

    }
}