// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Extensions;

    /// <summary>Input for InstallPatches on a Windows VM, as directly received by the API</summary>
    public partial class WindowsParameters :
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IWindowsParameters,
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IWindowsParametersInternal
    {

        /// <summary>Backing field for <see cref="ClassificationsToInclude" /> property.</summary>
        private System.Collections.Generic.List<string> _classificationsToInclude;

        /// <summary>The update classifications to select when installing patches for Windows.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> ClassificationsToInclude { get => this._classificationsToInclude; set => this._classificationsToInclude = value; }

        /// <summary>Backing field for <see cref="ExcludeKbsRequiringReboot" /> property.</summary>
        private bool? _excludeKbsRequiringReboot;

        /// <summary>
        /// Filters out Kbs that don't have an InstallationRebootBehavior of 'NeverReboots' when this is set to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public bool? ExcludeKbsRequiringReboot { get => this._excludeKbsRequiringReboot; set => this._excludeKbsRequiringReboot = value; }

        /// <summary>Backing field for <see cref="KbNumbersToExclude" /> property.</summary>
        private System.Collections.Generic.List<string> _kbNumbersToExclude;

        /// <summary>Kbs to exclude in the patch operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> KbNumbersToExclude { get => this._kbNumbersToExclude; set => this._kbNumbersToExclude = value; }

        /// <summary>Backing field for <see cref="KbNumbersToInclude" /> property.</summary>
        private System.Collections.Generic.List<string> _kbNumbersToInclude;

        /// <summary>Kbs to include in the patch operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> KbNumbersToInclude { get => this._kbNumbersToInclude; set => this._kbNumbersToInclude = value; }

        /// <summary>Backing field for <see cref="MaxPatchPublishDate" /> property.</summary>
        private global::System.DateTime? _maxPatchPublishDate;

        /// <summary>
        /// This is used to install patches that were published on or before this given max published date.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public global::System.DateTime? MaxPatchPublishDate { get => this._maxPatchPublishDate; set => this._maxPatchPublishDate = value; }

        /// <summary>Creates an new <see cref="WindowsParameters" /> instance.</summary>
        public WindowsParameters()
        {

        }
    }
    /// Input for InstallPatches on a Windows VM, as directly received by the API
    public partial interface IWindowsParameters :
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.IJsonSerializable
    {
        /// <summary>The update classifications to select when installing patches for Windows.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The update classifications to select when installing patches for Windows.",
        SerializedName = @"classificationsToInclude",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PSArgumentCompleterAttribute("Critical", "Security", "UpdateRollUp", "FeaturePack", "ServicePack", "Definition", "Tools", "Updates")]
        System.Collections.Generic.List<string> ClassificationsToInclude { get; set; }
        /// <summary>
        /// Filters out Kbs that don't have an InstallationRebootBehavior of 'NeverReboots' when this is set to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Filters out Kbs that don't have an InstallationRebootBehavior of 'NeverReboots' when this is set to true.",
        SerializedName = @"excludeKbsRequiringReboot",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ExcludeKbsRequiringReboot { get; set; }
        /// <summary>Kbs to exclude in the patch operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Kbs to exclude in the patch operation",
        SerializedName = @"kbNumbersToExclude",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> KbNumbersToExclude { get; set; }
        /// <summary>Kbs to include in the patch operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Kbs to include in the patch operation",
        SerializedName = @"kbNumbersToInclude",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> KbNumbersToInclude { get; set; }
        /// <summary>
        /// This is used to install patches that were published on or before this given max published date.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"This is used to install patches that were published on or before this given max published date.",
        SerializedName = @"maxPatchPublishDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? MaxPatchPublishDate { get; set; }

    }
    /// Input for InstallPatches on a Windows VM, as directly received by the API
    internal partial interface IWindowsParametersInternal

    {
        /// <summary>The update classifications to select when installing patches for Windows.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PSArgumentCompleterAttribute("Critical", "Security", "UpdateRollUp", "FeaturePack", "ServicePack", "Definition", "Tools", "Updates")]
        System.Collections.Generic.List<string> ClassificationsToInclude { get; set; }
        /// <summary>
        /// Filters out Kbs that don't have an InstallationRebootBehavior of 'NeverReboots' when this is set to true.
        /// </summary>
        bool? ExcludeKbsRequiringReboot { get; set; }
        /// <summary>Kbs to exclude in the patch operation</summary>
        System.Collections.Generic.List<string> KbNumbersToExclude { get; set; }
        /// <summary>Kbs to include in the patch operation</summary>
        System.Collections.Generic.List<string> KbNumbersToInclude { get; set; }
        /// <summary>
        /// This is used to install patches that were published on or before this given max published date.
        /// </summary>
        global::System.DateTime? MaxPatchPublishDate { get; set; }

    }
}