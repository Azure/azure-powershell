// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models
{
    using Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.PowerShell;

    /// <summary>License Profile Instance View in Machine Properties.</summary>
    [System.ComponentModel.TypeConverter(typeof(LicenseProfileMachineInstanceViewTypeConverter))]
    public partial class LicenseProfileMachineInstanceView
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.LicenseProfileMachineInstanceView"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceView"
        /// />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceView DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new LicenseProfileMachineInstanceView(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.LicenseProfileMachineInstanceView"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceView"
        /// />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceView DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new LicenseProfileMachineInstanceView(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="LicenseProfileMachineInstanceView" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>
        /// an instance of the <see cref="LicenseProfileMachineInstanceView" /> model class.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceView FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.LicenseProfileMachineInstanceView"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal LicenseProfileMachineInstanceView(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("SoftwareAssurance"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).SoftwareAssurance = (Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewSoftwareAssurance) content.GetValueForProperty("SoftwareAssurance",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).SoftwareAssurance, Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.LicenseProfileMachineInstanceViewSoftwareAssuranceTypeConverter.ConvertFrom);
            }
            if (content.Contains("EsuProfile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfile = (Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewEsuProperties) content.GetValueForProperty("EsuProfile",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfile, Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.LicenseProfileMachineInstanceViewEsuPropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("ProductProfile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfile = (Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileArmProductProfileProperties) content.GetValueForProperty("ProductProfile",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfile, Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.LicenseProfileArmProductProfilePropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("LicenseStatus"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).LicenseStatus = (string) content.GetValueForProperty("LicenseStatus",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).LicenseStatus, global::System.Convert.ToString);
            }
            if (content.Contains("LicenseChannel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).LicenseChannel = (string) content.GetValueForProperty("LicenseChannel",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).LicenseChannel, global::System.Convert.ToString);
            }
            if (content.Contains("EsuProfileEsuEligibility"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileEsuEligibility = (string) content.GetValueForProperty("EsuProfileEsuEligibility",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileEsuEligibility, global::System.Convert.ToString);
            }
            if (content.Contains("SoftwareAssuranceCustomer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).SoftwareAssuranceCustomer = (bool?) content.GetValueForProperty("SoftwareAssuranceCustomer",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).SoftwareAssuranceCustomer, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("EsuProfileAssignedLicenseImmutableId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileAssignedLicenseImmutableId = (string) content.GetValueForProperty("EsuProfileAssignedLicenseImmutableId",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileAssignedLicenseImmutableId, global::System.Convert.ToString);
            }
            if (content.Contains("EsuProfileEsuKey"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileEsuKey = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IEsuKey>) content.GetValueForProperty("EsuProfileEsuKey",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileEsuKey, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IEsuKey>(__y, Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.EsuKeyTypeConverter.ConvertFrom));
            }
            if (content.Contains("EsuProfileServerType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileServerType = (string) content.GetValueForProperty("EsuProfileServerType",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileServerType, global::System.Convert.ToString);
            }
            if (content.Contains("EsuProfileEsuKeyState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileEsuKeyState = (string) content.GetValueForProperty("EsuProfileEsuKeyState",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileEsuKeyState, global::System.Convert.ToString);
            }
            if (content.Contains("EsuProfileLicenseAssignmentState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileLicenseAssignmentState = (string) content.GetValueForProperty("EsuProfileLicenseAssignmentState",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileLicenseAssignmentState, global::System.Convert.ToString);
            }
            if (content.Contains("EsuProfileAssignedLicense"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileAssignedLicense = (Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicense) content.GetValueForProperty("EsuProfileAssignedLicense",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileAssignedLicense, Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.LicenseTypeConverter.ConvertFrom);
            }
            if (content.Contains("ProductProfileSubscriptionStatus"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileSubscriptionStatus = (string) content.GetValueForProperty("ProductProfileSubscriptionStatus",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileSubscriptionStatus, global::System.Convert.ToString);
            }
            if (content.Contains("ProductProfileProductType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileProductType = (string) content.GetValueForProperty("ProductProfileProductType",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileProductType, global::System.Convert.ToString);
            }
            if (content.Contains("ProductProfileBillingStartDate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileBillingStartDate = (global::System.DateTime?) content.GetValueForProperty("ProductProfileBillingStartDate",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileBillingStartDate, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ProductProfileEnrollmentDate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileEnrollmentDate = (global::System.DateTime?) content.GetValueForProperty("ProductProfileEnrollmentDate",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileEnrollmentDate, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ProductProfileDisenrollmentDate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileDisenrollmentDate = (global::System.DateTime?) content.GetValueForProperty("ProductProfileDisenrollmentDate",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileDisenrollmentDate, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ProductProfileProductFeature"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileProductFeature = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IProductFeature>) content.GetValueForProperty("ProductProfileProductFeature",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileProductFeature, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IProductFeature>(__y, Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ProductFeatureTypeConverter.ConvertFrom));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.LicenseProfileMachineInstanceView"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal LicenseProfileMachineInstanceView(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("SoftwareAssurance"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).SoftwareAssurance = (Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewSoftwareAssurance) content.GetValueForProperty("SoftwareAssurance",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).SoftwareAssurance, Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.LicenseProfileMachineInstanceViewSoftwareAssuranceTypeConverter.ConvertFrom);
            }
            if (content.Contains("EsuProfile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfile = (Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewEsuProperties) content.GetValueForProperty("EsuProfile",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfile, Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.LicenseProfileMachineInstanceViewEsuPropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("ProductProfile"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfile = (Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileArmProductProfileProperties) content.GetValueForProperty("ProductProfile",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfile, Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.LicenseProfileArmProductProfilePropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("LicenseStatus"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).LicenseStatus = (string) content.GetValueForProperty("LicenseStatus",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).LicenseStatus, global::System.Convert.ToString);
            }
            if (content.Contains("LicenseChannel"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).LicenseChannel = (string) content.GetValueForProperty("LicenseChannel",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).LicenseChannel, global::System.Convert.ToString);
            }
            if (content.Contains("EsuProfileEsuEligibility"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileEsuEligibility = (string) content.GetValueForProperty("EsuProfileEsuEligibility",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileEsuEligibility, global::System.Convert.ToString);
            }
            if (content.Contains("SoftwareAssuranceCustomer"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).SoftwareAssuranceCustomer = (bool?) content.GetValueForProperty("SoftwareAssuranceCustomer",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).SoftwareAssuranceCustomer, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("EsuProfileAssignedLicenseImmutableId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileAssignedLicenseImmutableId = (string) content.GetValueForProperty("EsuProfileAssignedLicenseImmutableId",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileAssignedLicenseImmutableId, global::System.Convert.ToString);
            }
            if (content.Contains("EsuProfileEsuKey"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileEsuKey = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IEsuKey>) content.GetValueForProperty("EsuProfileEsuKey",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileEsuKey, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IEsuKey>(__y, Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.EsuKeyTypeConverter.ConvertFrom));
            }
            if (content.Contains("EsuProfileServerType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileServerType = (string) content.GetValueForProperty("EsuProfileServerType",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileServerType, global::System.Convert.ToString);
            }
            if (content.Contains("EsuProfileEsuKeyState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileEsuKeyState = (string) content.GetValueForProperty("EsuProfileEsuKeyState",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileEsuKeyState, global::System.Convert.ToString);
            }
            if (content.Contains("EsuProfileLicenseAssignmentState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileLicenseAssignmentState = (string) content.GetValueForProperty("EsuProfileLicenseAssignmentState",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileLicenseAssignmentState, global::System.Convert.ToString);
            }
            if (content.Contains("EsuProfileAssignedLicense"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileAssignedLicense = (Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicense) content.GetValueForProperty("EsuProfileAssignedLicense",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).EsuProfileAssignedLicense, Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.LicenseTypeConverter.ConvertFrom);
            }
            if (content.Contains("ProductProfileSubscriptionStatus"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileSubscriptionStatus = (string) content.GetValueForProperty("ProductProfileSubscriptionStatus",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileSubscriptionStatus, global::System.Convert.ToString);
            }
            if (content.Contains("ProductProfileProductType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileProductType = (string) content.GetValueForProperty("ProductProfileProductType",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileProductType, global::System.Convert.ToString);
            }
            if (content.Contains("ProductProfileBillingStartDate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileBillingStartDate = (global::System.DateTime?) content.GetValueForProperty("ProductProfileBillingStartDate",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileBillingStartDate, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ProductProfileEnrollmentDate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileEnrollmentDate = (global::System.DateTime?) content.GetValueForProperty("ProductProfileEnrollmentDate",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileEnrollmentDate, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ProductProfileDisenrollmentDate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileDisenrollmentDate = (global::System.DateTime?) content.GetValueForProperty("ProductProfileDisenrollmentDate",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileDisenrollmentDate, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ProductProfileProductFeature"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileProductFeature = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IProductFeature>) content.GetValueForProperty("ProductProfileProductFeature",((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewInternal)this).ProductProfileProductFeature, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IProductFeature>(__y, Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ProductFeatureTypeConverter.ConvertFrom));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// License Profile Instance View in Machine Properties.
    [System.ComponentModel.TypeConverter(typeof(LicenseProfileMachineInstanceViewTypeConverter))]
    public partial interface ILicenseProfileMachineInstanceView

    {

    }
}