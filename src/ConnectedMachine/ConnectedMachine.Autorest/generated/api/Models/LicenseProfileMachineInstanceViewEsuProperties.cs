// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Extensions;

    /// <summary>Properties for the Machine ESU profile.</summary>
    public partial class LicenseProfileMachineInstanceViewEsuProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewEsuProperties,
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileMachineInstanceViewEsuPropertiesInternal,
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileArmEsuPropertiesWithoutAssignedLicense"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileArmEsuPropertiesWithoutAssignedLicense __licenseProfileArmEsuPropertiesWithoutAssignedLicense = new Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.LicenseProfileArmEsuPropertiesWithoutAssignedLicense();

        /// <summary>Backing field for <see cref="AssignedLicense" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicense _assignedLicense;

        /// <summary>The assigned license resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicense AssignedLicense { get => (this._assignedLicense = this._assignedLicense ?? new Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.License()); set => this._assignedLicense = value; }

        /// <summary>The guid id of the license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inherited)]
        public string AssignedLicenseImmutableId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileStorageModelEsuPropertiesInternal)__licenseProfileArmEsuPropertiesWithoutAssignedLicense).AssignedLicenseImmutableId; }

        /// <summary>Indicates the eligibility state of Esu.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inherited)]
        public string EsuEligibility { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileArmEsuPropertiesWithoutAssignedLicenseInternal)__licenseProfileArmEsuPropertiesWithoutAssignedLicense).EsuEligibility; }

        /// <summary>The list of ESU keys.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inherited)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IEsuKey> EsuKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileStorageModelEsuPropertiesInternal)__licenseProfileArmEsuPropertiesWithoutAssignedLicense).EsuKey; }

        /// <summary>Indicates whether there is an ESU Key currently active for the machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inherited)]
        public string EsuKeyState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileArmEsuPropertiesWithoutAssignedLicenseInternal)__licenseProfileArmEsuPropertiesWithoutAssignedLicense).EsuKeyState; }

        /// <summary>Backing field for <see cref="LicenseAssignmentState" /> property.</summary>
        private string _licenseAssignmentState;

        /// <summary>Describes the license assignment state (Assigned or NotAssigned).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public string LicenseAssignmentState { get => this._licenseAssignmentState; set => this._licenseAssignmentState = value; }

        /// <summary>Internal Acessors for EsuEligibility</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileArmEsuPropertiesWithoutAssignedLicenseInternal.EsuEligibility { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileArmEsuPropertiesWithoutAssignedLicenseInternal)__licenseProfileArmEsuPropertiesWithoutAssignedLicense).EsuEligibility; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileArmEsuPropertiesWithoutAssignedLicenseInternal)__licenseProfileArmEsuPropertiesWithoutAssignedLicense).EsuEligibility = value; }

        /// <summary>Internal Acessors for EsuKeyState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileArmEsuPropertiesWithoutAssignedLicenseInternal.EsuKeyState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileArmEsuPropertiesWithoutAssignedLicenseInternal)__licenseProfileArmEsuPropertiesWithoutAssignedLicense).EsuKeyState; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileArmEsuPropertiesWithoutAssignedLicenseInternal)__licenseProfileArmEsuPropertiesWithoutAssignedLicense).EsuKeyState = value; }

        /// <summary>Internal Acessors for ServerType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileArmEsuPropertiesWithoutAssignedLicenseInternal.ServerType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileArmEsuPropertiesWithoutAssignedLicenseInternal)__licenseProfileArmEsuPropertiesWithoutAssignedLicense).ServerType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileArmEsuPropertiesWithoutAssignedLicenseInternal)__licenseProfileArmEsuPropertiesWithoutAssignedLicense).ServerType = value; }

        /// <summary>Internal Acessors for AssignedLicenseImmutableId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileStorageModelEsuPropertiesInternal.AssignedLicenseImmutableId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileStorageModelEsuPropertiesInternal)__licenseProfileArmEsuPropertiesWithoutAssignedLicense).AssignedLicenseImmutableId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileStorageModelEsuPropertiesInternal)__licenseProfileArmEsuPropertiesWithoutAssignedLicense).AssignedLicenseImmutableId = value; }

        /// <summary>Internal Acessors for EsuKey</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IEsuKey> Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileStorageModelEsuPropertiesInternal.EsuKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileStorageModelEsuPropertiesInternal)__licenseProfileArmEsuPropertiesWithoutAssignedLicense).EsuKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileStorageModelEsuPropertiesInternal)__licenseProfileArmEsuPropertiesWithoutAssignedLicense).EsuKey = value; }

        /// <summary>The type of the Esu servers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inherited)]
        public string ServerType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileArmEsuPropertiesWithoutAssignedLicenseInternal)__licenseProfileArmEsuPropertiesWithoutAssignedLicense).ServerType; }

        /// <summary>
        /// Creates an new <see cref="LicenseProfileMachineInstanceViewEsuProperties" /> instance.
        /// </summary>
        public LicenseProfileMachineInstanceViewEsuProperties()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__licenseProfileArmEsuPropertiesWithoutAssignedLicense), __licenseProfileArmEsuPropertiesWithoutAssignedLicense);
            await eventListener.AssertObjectIsValid(nameof(__licenseProfileArmEsuPropertiesWithoutAssignedLicense), __licenseProfileArmEsuPropertiesWithoutAssignedLicense);
        }
    }
    /// Properties for the Machine ESU profile.
    public partial interface ILicenseProfileMachineInstanceViewEsuProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileArmEsuPropertiesWithoutAssignedLicense
    {
        /// <summary>The assigned license resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The assigned license resource.",
        SerializedName = @"assignedLicense",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicense) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicense AssignedLicense { get; set; }
        /// <summary>Describes the license assignment state (Assigned or NotAssigned).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Describes the license assignment state (Assigned or NotAssigned).",
        SerializedName = @"licenseAssignmentState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PSArgumentCompleterAttribute("Assigned", "NotAssigned")]
        string LicenseAssignmentState { get; set; }

    }
    /// Properties for the Machine ESU profile.
    internal partial interface ILicenseProfileMachineInstanceViewEsuPropertiesInternal :
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicenseProfileArmEsuPropertiesWithoutAssignedLicenseInternal
    {
        /// <summary>The assigned license resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILicense AssignedLicense { get; set; }
        /// <summary>Describes the license assignment state (Assigned or NotAssigned).</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PSArgumentCompleterAttribute("Assigned", "NotAssigned")]
        string LicenseAssignmentState { get; set; }

    }
}