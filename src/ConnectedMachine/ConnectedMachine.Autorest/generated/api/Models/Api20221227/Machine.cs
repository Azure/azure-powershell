// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Extensions;

    /// <summary>Describes a hybrid machine.</summary>
    public partial class Machine :
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachine,
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal,
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.ITrackedResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.TrackedResource();

        /// <summary>Specifies the AD fully qualified display name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string AdFqdn { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AdFqdn; }

        /// <summary>
        /// Name of configuration mode to use. Modes are pre-defined configurations of security controls, extension allowlists and
        /// guest configuration, maintained by Microsoft.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.AgentConfigurationMode? AgentConfigurationConfigMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationConfigMode; }

        /// <summary>Array of extensions that are allowed to be installed or updated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IConfigurationExtension[] AgentConfigurationExtensionsAllowList { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationExtensionsAllowList; }

        /// <summary>Array of extensions that are blocked (cannot be installed or updated)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IConfigurationExtension[] AgentConfigurationExtensionsBlockList { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationExtensionsBlockList; }

        /// <summary>Specifies whether the extension service is enabled or disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string AgentConfigurationExtensionsEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationExtensionsEnabled; }

        /// <summary>Specified whether the guest configuration service is enabled or disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string AgentConfigurationGuestConfigurationEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationGuestConfigurationEnabled; }

        /// <summary>Specifies the list of ports that the agent will be able to listen on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string[] AgentConfigurationIncomingConnectionsPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationIncomingConnectionsPort; }

        /// <summary>List of service names which should not use the specified proxy server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string[] AgentConfigurationProxyBypass { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationProxyBypass; }

        /// <summary>Specifies the URL of the proxy to be used.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string AgentConfigurationProxyUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationProxyUrl; }

        /// <summary>The correlation ID passed in from RSM per upgrade.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string AgentUpgradeCorrelationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentUpgradeCorrelationId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentUpgradeCorrelationId = value ?? null; }

        /// <summary>Specifies the version info w.r.t AgentUpgrade for the machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string AgentUpgradeDesiredVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentUpgradeDesiredVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentUpgradeDesiredVersion = value ?? null; }

        /// <summary>Specifies if RSM should try to upgrade this machine</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public bool? AgentUpgradeEnableAutomaticUpgrade { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentUpgradeEnableAutomaticUpgrade; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentUpgradeEnableAutomaticUpgrade = value ?? default(bool); }

        /// <summary>Failure message of last upgrade attempt if any.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string AgentUpgradeLastAttemptMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentUpgradeLastAttemptMessage; }

        /// <summary>Specifies the status of Agent Upgrade.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.LastAttemptStatusEnum? AgentUpgradeLastAttemptStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentUpgradeLastAttemptStatus; }

        /// <summary>Timestamp of last upgrade attempt</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string AgentUpgradeLastAttemptTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentUpgradeLastAttemptTimestamp; }

        /// <summary>The hybrid machine agent full version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string AgentVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentVersion; }

        /// <summary>
        /// Public Key that the client provides to be used during initial resource onboarding
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string ClientPublicKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ClientPublicKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ClientPublicKey = value ?? null; }

        /// <summary>Specifies the cloud provider (Azure/AWS/GCP...).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string CloudMetadataProvider { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).CloudMetadataProvider; }

        /// <summary>Detected properties from the machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IDetectedProperties DetectedProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).DetectedProperty; }

        /// <summary>Specifies the hybrid machine display name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).DisplayName; }

        /// <summary>Specifies the DNS fully qualified display name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string DnsFqdn { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).DnsFqdn; }

        /// <summary>Specifies the Windows domain name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string DomainName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).DomainName; }

        /// <summary>Details about the error state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetail[] ErrorDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ErrorDetail; }

        /// <summary>Machine Extensions information (deprecated field)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineExtensionInstanceView[] Extension { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).Extension; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).Extension = value ?? null /* arrayOf */; }

        /// <summary>The behavior of the service when the Arc-enabled machine starts up.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string ExtensionServiceStartupType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ExtensionServiceStartupType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ExtensionServiceStartupType = value ?? null; }

        /// <summary>The current status of the service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string ExtensionServiceStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ExtensionServiceStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ExtensionServiceStatus = value ?? null; }

        /// <summary>Specifies the hybrid machine FQDN.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string Fqdn { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).MachineFqdn; }

        /// <summary>The behavior of the service when the Arc-enabled machine starts up.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string GuestConfigurationServiceStartupType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).GuestConfigurationServiceStartupType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).GuestConfigurationServiceStartupType = value ?? null; }

        /// <summary>The current status of the service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string GuestConfigurationServiceStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).GuestConfigurationServiceStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).GuestConfigurationServiceStatus = value ?? null; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).Id; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IIdentity _identity;

        /// <summary>Identity for the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        internal Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.Identity()); set => this._identity = value; }

        /// <summary>The principal ID of resource identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IIdentityInternal)Identity).PrincipalId; }

        /// <summary>The tenant ID of resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IIdentityInternal)Identity).TenantId; }

        /// <summary>The identity type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.ResourceIdentityType? IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IIdentityInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IIdentityInternal)Identity).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.ResourceIdentityType)""); }

        /// <summary>The time of the last status change.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public global::System.DateTime? LastStatusChange { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).LastStatusChange; }

        /// <summary>Specifies the assessment mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.AssessmentModeTypes? LinuxConfigurationPatchSettingsAssessmentMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).LinuxConfigurationPatchSettingsAssessmentMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).LinuxConfigurationPatchSettingsAssessmentMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.AssessmentModeTypes)""); }

        /// <summary>Specifies the patch mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchModeTypes? LinuxConfigurationPatchSettingsPatchMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).LinuxConfigurationPatchSettingsPatchMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).LinuxConfigurationPatchSettingsPatchMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchModeTypes)""); }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.FormatTable(Index = 2)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.ITrackedResourceInternal)__trackedResource).Location = value ; }

        /// <summary>The city or locality where the resource is located.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string LocationDataCity { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).LocationDataCity; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).LocationDataCity = value ?? null; }

        /// <summary>The country or region where the resource is located</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string LocationDataCountryOrRegion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).LocationDataCountryOrRegion; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).LocationDataCountryOrRegion = value ?? null; }

        /// <summary>The district, state, or province where the resource is located.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string LocationDataDistrict { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).LocationDataDistrict; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).LocationDataDistrict = value ?? null; }

        /// <summary>A canonical name for the geographic or physical location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string LocationDataName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).LocationDataName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).LocationDataName = value ?? null; }

        /// <summary>Internal Acessors for AdFqdn</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.AdFqdn { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AdFqdn; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AdFqdn = value; }

        /// <summary>Internal Acessors for AgentConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAgentConfiguration Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.AgentConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfiguration = value; }

        /// <summary>Internal Acessors for AgentConfigurationConfigMode</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.AgentConfigurationMode? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.AgentConfigurationConfigMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationConfigMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationConfigMode = value; }

        /// <summary>Internal Acessors for AgentConfigurationExtensionsAllowList</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IConfigurationExtension[] Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.AgentConfigurationExtensionsAllowList { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationExtensionsAllowList; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationExtensionsAllowList = value; }

        /// <summary>Internal Acessors for AgentConfigurationExtensionsBlockList</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IConfigurationExtension[] Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.AgentConfigurationExtensionsBlockList { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationExtensionsBlockList; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationExtensionsBlockList = value; }

        /// <summary>Internal Acessors for AgentConfigurationExtensionsEnabled</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.AgentConfigurationExtensionsEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationExtensionsEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationExtensionsEnabled = value; }

        /// <summary>Internal Acessors for AgentConfigurationGuestConfigurationEnabled</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.AgentConfigurationGuestConfigurationEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationGuestConfigurationEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationGuestConfigurationEnabled = value; }

        /// <summary>Internal Acessors for AgentConfigurationIncomingConnectionsPort</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.AgentConfigurationIncomingConnectionsPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationIncomingConnectionsPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationIncomingConnectionsPort = value; }

        /// <summary>Internal Acessors for AgentConfigurationProxyBypass</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.AgentConfigurationProxyBypass { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationProxyBypass; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationProxyBypass = value; }

        /// <summary>Internal Acessors for AgentConfigurationProxyUrl</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.AgentConfigurationProxyUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationProxyUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentConfigurationProxyUrl = value; }

        /// <summary>Internal Acessors for AgentUpgrade</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAgentUpgrade Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.AgentUpgrade { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentUpgrade; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentUpgrade = value; }

        /// <summary>Internal Acessors for AgentUpgradeLastAttemptMessage</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.AgentUpgradeLastAttemptMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentUpgradeLastAttemptMessage; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentUpgradeLastAttemptMessage = value; }

        /// <summary>Internal Acessors for AgentUpgradeLastAttemptStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.LastAttemptStatusEnum? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.AgentUpgradeLastAttemptStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentUpgradeLastAttemptStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentUpgradeLastAttemptStatus = value; }

        /// <summary>Internal Acessors for AgentUpgradeLastAttemptTimestamp</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.AgentUpgradeLastAttemptTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentUpgradeLastAttemptTimestamp; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentUpgradeLastAttemptTimestamp = value; }

        /// <summary>Internal Acessors for AgentVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.AgentVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).AgentVersion = value; }

        /// <summary>Internal Acessors for CloudMetadata</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.ICloudMetadata Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.CloudMetadata { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).CloudMetadata; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).CloudMetadata = value; }

        /// <summary>Internal Acessors for CloudMetadataProvider</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.CloudMetadataProvider { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).CloudMetadataProvider; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).CloudMetadataProvider = value; }

        /// <summary>Internal Acessors for DetectedProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IDetectedProperties Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.DetectedProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).DetectedProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).DetectedProperty = value; }

        /// <summary>Internal Acessors for DisplayName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).DisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).DisplayName = value; }

        /// <summary>Internal Acessors for DnsFqdn</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.DnsFqdn { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).DnsFqdn; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).DnsFqdn = value; }

        /// <summary>Internal Acessors for DomainName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.DomainName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).DomainName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).DomainName = value; }

        /// <summary>Internal Acessors for ErrorDetail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetail[] Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.ErrorDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ErrorDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ErrorDetail = value; }

        /// <summary>Internal Acessors for Fqdn</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.Fqdn { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).MachineFqdn; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).MachineFqdn = value; }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IIdentity Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.Identity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IIdentityInternal)Identity).PrincipalId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IIdentityInternal)Identity).PrincipalId = value; }

        /// <summary>Internal Acessors for IdentityTenantId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IIdentityInternal)Identity).TenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IIdentityInternal)Identity).TenantId = value; }

        /// <summary>Internal Acessors for LastStatusChange</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.LastStatusChange { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).LastStatusChange; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).LastStatusChange = value; }

        /// <summary>Internal Acessors for LinuxConfigurationPatchSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IPatchSettings Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.LinuxConfigurationPatchSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).LinuxConfigurationPatchSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).LinuxConfigurationPatchSetting = value; }

        /// <summary>Internal Acessors for LocationData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.ILocationData Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.LocationData { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).LocationData; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).LocationData = value; }

        /// <summary>Internal Acessors for OSName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.OSName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSName = value; }

        /// <summary>Internal Acessors for OSProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IOSProfile Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.OSProfile { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSProfile; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSProfile = value; }

        /// <summary>Internal Acessors for OSProfileComputerName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.OSProfileComputerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSProfileComputerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSProfileComputerName = value; }

        /// <summary>Internal Acessors for OSProfileLinuxConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IOSProfileLinuxConfiguration Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.OSProfileLinuxConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSProfileLinuxConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSProfileLinuxConfiguration = value; }

        /// <summary>Internal Acessors for OSProfileWindowsConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IOSProfileWindowsConfiguration Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.OSProfileWindowsConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSProfileWindowsConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSProfileWindowsConfiguration = value; }

        /// <summary>Internal Acessors for OSSku</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.OSSku { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSSku; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSSku = value; }

        /// <summary>Internal Acessors for OSVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.OSVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSVersion = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineProperties Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.MachineProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for Resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineExtension[] Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.Resource { get => this._resource; set { {_resource = value;} } }

        /// <summary>Internal Acessors for ServiceStatuses</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IServiceStatuses Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.ServiceStatuses { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ServiceStatuses; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ServiceStatuses = value; }

        /// <summary>Internal Acessors for ServiceStatusesExtensionService</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IServiceStatus Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.ServiceStatusesExtensionService { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ServiceStatusesExtensionService; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ServiceStatusesExtensionService = value; }

        /// <summary>Internal Acessors for ServiceStatusesGuestConfigurationService</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IServiceStatus Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.ServiceStatusesGuestConfigurationService { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ServiceStatusesGuestConfigurationService; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ServiceStatusesGuestConfigurationService = value; }

        /// <summary>Internal Acessors for Status</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.StatusTypes? Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.Status { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).Status; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).Status = value; }

        /// <summary>Internal Acessors for VMUuid</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.VMUuid { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).VMUuid; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).VMUuid = value; }

        /// <summary>Internal Acessors for WindowConfigurationPatchSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IPatchSettings Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineInternal.WindowConfigurationPatchSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).WindowConfigurationPatchSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).WindowConfigurationPatchSetting = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.ISystemData Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).SystemData = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).Type = value; }

        /// <summary>Specifies whether any MS SQL instance is discovered on the machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string MssqlDiscovered { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).MssqlDiscovered; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).MssqlDiscovered = value ?? null; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.FormatTable(Index = 1)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).Name; }

        /// <summary>The Operating System running on the hybrid machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string OSName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSName; }

        /// <summary>Specifies the host OS name of the hybrid machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string OSProfileComputerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSProfileComputerName; }

        /// <summary>Specifies the Operating System product SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string OSSku { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSSku; }

        /// <summary>The type of Operating System (windows/linux).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.FormatTable(Index = 3)]
        public string OSType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSType = value ?? null; }

        /// <summary>The version of Operating System running on the hybrid machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string OSVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).OSVersion; }

        /// <summary>
        /// The resource id of the parent cluster (Azure HCI) this machine is assigned to, if any.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string ParentClusterResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ParentClusterResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ParentClusterResourceId = value ?? null; }

        /// <summary>The resource id of the private link scope this machine is assigned to, if any.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string PrivateLinkScopeResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).PrivateLinkScopeResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).PrivateLinkScopeResourceId = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineProperties _property;

        /// <summary>Hybrid Compute Machine properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        internal Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.MachineProperties()); set => this._property = value; }

        /// <summary>The provisioning state, which only appears in the response.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.FormatTable(Index = 5)]
        public string ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).ProvisioningState; }

        /// <summary>Backing field for <see cref="Resource" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineExtension[] _resource;

        /// <summary>The list of extensions affiliated to the machine</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineExtension[] Resource { get => this._resource; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.FormatTable(Index = 0)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>The status of the hybrid machine agent.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.FormatTable(Index = 4)]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.StatusTypes? Status { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).Status; }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).SystemData; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.CreatedByType)""); }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IResourceInternal)__trackedResource).Type; }

        /// <summary>Specifies the hybrid machine unique ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string VMId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).VMId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).VMId = value ?? null; }

        /// <summary>Specifies the Arc Machine's unique SMBIOS ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public string VMUuid { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).VMUuid; }

        /// <summary>Specifies the assessment mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.AssessmentModeTypes? WindowsConfigurationPatchSettingsAssessmentMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).WindowsConfigurationPatchSettingsAssessmentMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).WindowsConfigurationPatchSettingsAssessmentMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.AssessmentModeTypes)""); }

        /// <summary>Specifies the patch mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchModeTypes? WindowsConfigurationPatchSettingsPatchMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).WindowsConfigurationPatchSettingsPatchMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachinePropertiesInternal)Property).WindowsConfigurationPatchSettingsPatchMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchModeTypes)""); }

        /// <summary>Creates an new <see cref="Machine" /> instance.</summary>
        public Machine()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// Describes a hybrid machine.
    public partial interface IMachine :
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.ITrackedResource
    {
        /// <summary>Specifies the AD fully qualified display name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies the AD fully qualified display name.",
        SerializedName = @"adFqdn",
        PossibleTypes = new [] { typeof(string) })]
        string AdFqdn { get;  }
        /// <summary>
        /// Name of configuration mode to use. Modes are pre-defined configurations of security controls, extension allowlists and
        /// guest configuration, maintained by Microsoft.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Name of configuration mode to use. Modes are pre-defined configurations of security controls, extension allowlists and guest configuration, maintained by Microsoft.",
        SerializedName = @"configMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.AgentConfigurationMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.AgentConfigurationMode? AgentConfigurationConfigMode { get;  }
        /// <summary>Array of extensions that are allowed to be installed or updated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Array of extensions that are allowed to be installed or updated.",
        SerializedName = @"extensionsAllowList",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IConfigurationExtension) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IConfigurationExtension[] AgentConfigurationExtensionsAllowList { get;  }
        /// <summary>Array of extensions that are blocked (cannot be installed or updated)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Array of extensions that are blocked (cannot be installed or updated)",
        SerializedName = @"extensionsBlockList",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IConfigurationExtension) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IConfigurationExtension[] AgentConfigurationExtensionsBlockList { get;  }
        /// <summary>Specifies whether the extension service is enabled or disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies whether the extension service is enabled or disabled.",
        SerializedName = @"extensionsEnabled",
        PossibleTypes = new [] { typeof(string) })]
        string AgentConfigurationExtensionsEnabled { get;  }
        /// <summary>Specified whether the guest configuration service is enabled or disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specified whether the guest configuration service is enabled or disabled.",
        SerializedName = @"guestConfigurationEnabled",
        PossibleTypes = new [] { typeof(string) })]
        string AgentConfigurationGuestConfigurationEnabled { get;  }
        /// <summary>Specifies the list of ports that the agent will be able to listen on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies the list of ports that the agent will be able to listen on.",
        SerializedName = @"incomingConnectionsPorts",
        PossibleTypes = new [] { typeof(string) })]
        string[] AgentConfigurationIncomingConnectionsPort { get;  }
        /// <summary>List of service names which should not use the specified proxy server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"List of service names which should not use the specified proxy server.",
        SerializedName = @"proxyBypass",
        PossibleTypes = new [] { typeof(string) })]
        string[] AgentConfigurationProxyBypass { get;  }
        /// <summary>Specifies the URL of the proxy to be used.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies the URL of the proxy to be used.",
        SerializedName = @"proxyUrl",
        PossibleTypes = new [] { typeof(string) })]
        string AgentConfigurationProxyUrl { get;  }
        /// <summary>The correlation ID passed in from RSM per upgrade.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The correlation ID passed in from RSM per upgrade.",
        SerializedName = @"correlationId",
        PossibleTypes = new [] { typeof(string) })]
        string AgentUpgradeCorrelationId { get; set; }
        /// <summary>Specifies the version info w.r.t AgentUpgrade for the machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the version info w.r.t AgentUpgrade for the machine.",
        SerializedName = @"desiredVersion",
        PossibleTypes = new [] { typeof(string) })]
        string AgentUpgradeDesiredVersion { get; set; }
        /// <summary>Specifies if RSM should try to upgrade this machine</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies if RSM should try to upgrade this machine",
        SerializedName = @"enableAutomaticUpgrade",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AgentUpgradeEnableAutomaticUpgrade { get; set; }
        /// <summary>Failure message of last upgrade attempt if any.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Failure message of last upgrade attempt if any.",
        SerializedName = @"lastAttemptMessage",
        PossibleTypes = new [] { typeof(string) })]
        string AgentUpgradeLastAttemptMessage { get;  }
        /// <summary>Specifies the status of Agent Upgrade.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies the status of Agent Upgrade.",
        SerializedName = @"lastAttemptStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.LastAttemptStatusEnum) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.LastAttemptStatusEnum? AgentUpgradeLastAttemptStatus { get;  }
        /// <summary>Timestamp of last upgrade attempt</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Timestamp of last upgrade attempt",
        SerializedName = @"lastAttemptTimestamp",
        PossibleTypes = new [] { typeof(string) })]
        string AgentUpgradeLastAttemptTimestamp { get;  }
        /// <summary>The hybrid machine agent full version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The hybrid machine agent full version.",
        SerializedName = @"agentVersion",
        PossibleTypes = new [] { typeof(string) })]
        string AgentVersion { get;  }
        /// <summary>
        /// Public Key that the client provides to be used during initial resource onboarding
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Public Key that the client provides to be used during initial resource onboarding",
        SerializedName = @"clientPublicKey",
        PossibleTypes = new [] { typeof(string) })]
        string ClientPublicKey { get; set; }
        /// <summary>Specifies the cloud provider (Azure/AWS/GCP...).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies the cloud provider (Azure/AWS/GCP...).",
        SerializedName = @"provider",
        PossibleTypes = new [] { typeof(string) })]
        string CloudMetadataProvider { get;  }
        /// <summary>Detected properties from the machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Detected properties from the machine.",
        SerializedName = @"detectedProperties",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IDetectedProperties) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IDetectedProperties DetectedProperty { get;  }
        /// <summary>Specifies the hybrid machine display name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies the hybrid machine display name.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get;  }
        /// <summary>Specifies the DNS fully qualified display name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies the DNS fully qualified display name.",
        SerializedName = @"dnsFqdn",
        PossibleTypes = new [] { typeof(string) })]
        string DnsFqdn { get;  }
        /// <summary>Specifies the Windows domain name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies the Windows domain name.",
        SerializedName = @"domainName",
        PossibleTypes = new [] { typeof(string) })]
        string DomainName { get;  }
        /// <summary>Details about the error state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Details about the error state.",
        SerializedName = @"errorDetails",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetail) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetail[] ErrorDetail { get;  }
        /// <summary>Machine Extensions information (deprecated field)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Machine Extensions information (deprecated field)",
        SerializedName = @"extensions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineExtensionInstanceView) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineExtensionInstanceView[] Extension { get; set; }
        /// <summary>The behavior of the service when the Arc-enabled machine starts up.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The behavior of the service when the Arc-enabled machine starts up.",
        SerializedName = @"startupType",
        PossibleTypes = new [] { typeof(string) })]
        string ExtensionServiceStartupType { get; set; }
        /// <summary>The current status of the service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The current status of the service.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        string ExtensionServiceStatus { get; set; }
        /// <summary>Specifies the hybrid machine FQDN.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies the hybrid machine FQDN.",
        SerializedName = @"machineFqdn",
        PossibleTypes = new [] { typeof(string) })]
        string Fqdn { get;  }
        /// <summary>The behavior of the service when the Arc-enabled machine starts up.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The behavior of the service when the Arc-enabled machine starts up.",
        SerializedName = @"startupType",
        PossibleTypes = new [] { typeof(string) })]
        string GuestConfigurationServiceStartupType { get; set; }
        /// <summary>The current status of the service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The current status of the service.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        string GuestConfigurationServiceStatus { get; set; }
        /// <summary>The principal ID of resource identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The principal ID of resource identity.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>The tenant ID of resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The tenant ID of resource.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityTenantId { get;  }
        /// <summary>The identity type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity type.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.ResourceIdentityType) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.ResourceIdentityType? IdentityType { get; set; }
        /// <summary>The time of the last status change.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The time of the last status change.",
        SerializedName = @"lastStatusChange",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastStatusChange { get;  }
        /// <summary>Specifies the assessment mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the assessment mode.",
        SerializedName = @"assessmentMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.AssessmentModeTypes) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.AssessmentModeTypes? LinuxConfigurationPatchSettingsAssessmentMode { get; set; }
        /// <summary>Specifies the patch mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the patch mode.",
        SerializedName = @"patchMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchModeTypes) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchModeTypes? LinuxConfigurationPatchSettingsPatchMode { get; set; }
        /// <summary>The city or locality where the resource is located.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The city or locality where the resource is located.",
        SerializedName = @"city",
        PossibleTypes = new [] { typeof(string) })]
        string LocationDataCity { get; set; }
        /// <summary>The country or region where the resource is located</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The country or region where the resource is located",
        SerializedName = @"countryOrRegion",
        PossibleTypes = new [] { typeof(string) })]
        string LocationDataCountryOrRegion { get; set; }
        /// <summary>The district, state, or province where the resource is located.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The district, state, or province where the resource is located.",
        SerializedName = @"district",
        PossibleTypes = new [] { typeof(string) })]
        string LocationDataDistrict { get; set; }
        /// <summary>A canonical name for the geographic or physical location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A canonical name for the geographic or physical location.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string LocationDataName { get; set; }
        /// <summary>Specifies whether any MS SQL instance is discovered on the machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether any MS SQL instance is discovered on the machine.",
        SerializedName = @"mssqlDiscovered",
        PossibleTypes = new [] { typeof(string) })]
        string MssqlDiscovered { get; set; }
        /// <summary>The Operating System running on the hybrid machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The Operating System running on the hybrid machine.",
        SerializedName = @"osName",
        PossibleTypes = new [] { typeof(string) })]
        string OSName { get;  }
        /// <summary>Specifies the host OS name of the hybrid machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies the host OS name of the hybrid machine.",
        SerializedName = @"computerName",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileComputerName { get;  }
        /// <summary>Specifies the Operating System product SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies the Operating System product SKU.",
        SerializedName = @"osSku",
        PossibleTypes = new [] { typeof(string) })]
        string OSSku { get;  }
        /// <summary>The type of Operating System (windows/linux).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of Operating System (windows/linux).",
        SerializedName = @"osType",
        PossibleTypes = new [] { typeof(string) })]
        string OSType { get; set; }
        /// <summary>The version of Operating System running on the hybrid machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The version of Operating System running on the hybrid machine.",
        SerializedName = @"osVersion",
        PossibleTypes = new [] { typeof(string) })]
        string OSVersion { get;  }
        /// <summary>
        /// The resource id of the parent cluster (Azure HCI) this machine is assigned to, if any.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource id of the parent cluster (Azure HCI) this machine is assigned to, if any.",
        SerializedName = @"parentClusterResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string ParentClusterResourceId { get; set; }
        /// <summary>The resource id of the private link scope this machine is assigned to, if any.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource id of the private link scope this machine is assigned to, if any.",
        SerializedName = @"privateLinkScopeResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string PrivateLinkScopeResourceId { get; set; }
        /// <summary>The provisioning state, which only appears in the response.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The provisioning state, which only appears in the response.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get;  }
        /// <summary>The list of extensions affiliated to the machine</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The list of extensions affiliated to the machine",
        SerializedName = @"resources",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineExtension) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineExtension[] Resource { get;  }
        /// <summary>The status of the hybrid machine agent.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The status of the hybrid machine agent.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.StatusTypes) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.StatusTypes? Status { get;  }
        /// <summary>Specifies the hybrid machine unique ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the hybrid machine unique ID.",
        SerializedName = @"vmId",
        PossibleTypes = new [] { typeof(string) })]
        string VMId { get; set; }
        /// <summary>Specifies the Arc Machine's unique SMBIOS ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies the Arc Machine's unique SMBIOS ID",
        SerializedName = @"vmUuid",
        PossibleTypes = new [] { typeof(string) })]
        string VMUuid { get;  }
        /// <summary>Specifies the assessment mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the assessment mode.",
        SerializedName = @"assessmentMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.AssessmentModeTypes) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.AssessmentModeTypes? WindowsConfigurationPatchSettingsAssessmentMode { get; set; }
        /// <summary>Specifies the patch mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the patch mode.",
        SerializedName = @"patchMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchModeTypes) })]
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchModeTypes? WindowsConfigurationPatchSettingsPatchMode { get; set; }

    }
    /// Describes a hybrid machine.
    internal partial interface IMachineInternal :
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.ITrackedResourceInternal
    {
        /// <summary>Specifies the AD fully qualified display name.</summary>
        string AdFqdn { get; set; }
        /// <summary>
        /// Configurable properties that the user can set locally via the azcmagent config command, or remotely via ARM.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAgentConfiguration AgentConfiguration { get; set; }
        /// <summary>
        /// Name of configuration mode to use. Modes are pre-defined configurations of security controls, extension allowlists and
        /// guest configuration, maintained by Microsoft.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.AgentConfigurationMode? AgentConfigurationConfigMode { get; set; }
        /// <summary>Array of extensions that are allowed to be installed or updated.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IConfigurationExtension[] AgentConfigurationExtensionsAllowList { get; set; }
        /// <summary>Array of extensions that are blocked (cannot be installed or updated)</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IConfigurationExtension[] AgentConfigurationExtensionsBlockList { get; set; }
        /// <summary>Specifies whether the extension service is enabled or disabled.</summary>
        string AgentConfigurationExtensionsEnabled { get; set; }
        /// <summary>Specified whether the guest configuration service is enabled or disabled.</summary>
        string AgentConfigurationGuestConfigurationEnabled { get; set; }
        /// <summary>Specifies the list of ports that the agent will be able to listen on.</summary>
        string[] AgentConfigurationIncomingConnectionsPort { get; set; }
        /// <summary>List of service names which should not use the specified proxy server.</summary>
        string[] AgentConfigurationProxyBypass { get; set; }
        /// <summary>Specifies the URL of the proxy to be used.</summary>
        string AgentConfigurationProxyUrl { get; set; }
        /// <summary>The info of the machine w.r.t Agent Upgrade</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IAgentUpgrade AgentUpgrade { get; set; }
        /// <summary>The correlation ID passed in from RSM per upgrade.</summary>
        string AgentUpgradeCorrelationId { get; set; }
        /// <summary>Specifies the version info w.r.t AgentUpgrade for the machine.</summary>
        string AgentUpgradeDesiredVersion { get; set; }
        /// <summary>Specifies if RSM should try to upgrade this machine</summary>
        bool? AgentUpgradeEnableAutomaticUpgrade { get; set; }
        /// <summary>Failure message of last upgrade attempt if any.</summary>
        string AgentUpgradeLastAttemptMessage { get; set; }
        /// <summary>Specifies the status of Agent Upgrade.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.LastAttemptStatusEnum? AgentUpgradeLastAttemptStatus { get; set; }
        /// <summary>Timestamp of last upgrade attempt</summary>
        string AgentUpgradeLastAttemptTimestamp { get; set; }
        /// <summary>The hybrid machine agent full version.</summary>
        string AgentVersion { get; set; }
        /// <summary>
        /// Public Key that the client provides to be used during initial resource onboarding
        /// </summary>
        string ClientPublicKey { get; set; }
        /// <summary>The metadata of the cloud environment (Azure/GCP/AWS/OCI...).</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.ICloudMetadata CloudMetadata { get; set; }
        /// <summary>Specifies the cloud provider (Azure/AWS/GCP...).</summary>
        string CloudMetadataProvider { get; set; }
        /// <summary>Detected properties from the machine.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IDetectedProperties DetectedProperty { get; set; }
        /// <summary>Specifies the hybrid machine display name.</summary>
        string DisplayName { get; set; }
        /// <summary>Specifies the DNS fully qualified display name.</summary>
        string DnsFqdn { get; set; }
        /// <summary>Specifies the Windows domain name.</summary>
        string DomainName { get; set; }
        /// <summary>Details about the error state.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IErrorDetail[] ErrorDetail { get; set; }
        /// <summary>Machine Extensions information (deprecated field)</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineExtensionInstanceView[] Extension { get; set; }
        /// <summary>The behavior of the service when the Arc-enabled machine starts up.</summary>
        string ExtensionServiceStartupType { get; set; }
        /// <summary>The current status of the service.</summary>
        string ExtensionServiceStatus { get; set; }
        /// <summary>Specifies the hybrid machine FQDN.</summary>
        string Fqdn { get; set; }
        /// <summary>The behavior of the service when the Arc-enabled machine starts up.</summary>
        string GuestConfigurationServiceStartupType { get; set; }
        /// <summary>The current status of the service.</summary>
        string GuestConfigurationServiceStatus { get; set; }
        /// <summary>Identity for the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.IIdentity Identity { get; set; }
        /// <summary>The principal ID of resource identity.</summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>The tenant ID of resource.</summary>
        string IdentityTenantId { get; set; }
        /// <summary>The identity type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.ResourceIdentityType? IdentityType { get; set; }
        /// <summary>The time of the last status change.</summary>
        global::System.DateTime? LastStatusChange { get; set; }
        /// <summary>Specifies the patch settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IPatchSettings LinuxConfigurationPatchSetting { get; set; }
        /// <summary>Specifies the assessment mode.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.AssessmentModeTypes? LinuxConfigurationPatchSettingsAssessmentMode { get; set; }
        /// <summary>Specifies the patch mode.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchModeTypes? LinuxConfigurationPatchSettingsPatchMode { get; set; }
        /// <summary>Metadata pertaining to the geographic location of the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api30.ILocationData LocationData { get; set; }
        /// <summary>The city or locality where the resource is located.</summary>
        string LocationDataCity { get; set; }
        /// <summary>The country or region where the resource is located</summary>
        string LocationDataCountryOrRegion { get; set; }
        /// <summary>The district, state, or province where the resource is located.</summary>
        string LocationDataDistrict { get; set; }
        /// <summary>A canonical name for the geographic or physical location.</summary>
        string LocationDataName { get; set; }
        /// <summary>Specifies whether any MS SQL instance is discovered on the machine.</summary>
        string MssqlDiscovered { get; set; }
        /// <summary>The Operating System running on the hybrid machine.</summary>
        string OSName { get; set; }
        /// <summary>Specifies the operating system settings for the hybrid machine.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IOSProfile OSProfile { get; set; }
        /// <summary>Specifies the host OS name of the hybrid machine.</summary>
        string OSProfileComputerName { get; set; }
        /// <summary>Specifies the linux configuration for update management.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IOSProfileLinuxConfiguration OSProfileLinuxConfiguration { get; set; }
        /// <summary>Specifies the windows configuration for update management.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IOSProfileWindowsConfiguration OSProfileWindowsConfiguration { get; set; }
        /// <summary>Specifies the Operating System product SKU.</summary>
        string OSSku { get; set; }
        /// <summary>The type of Operating System (windows/linux).</summary>
        string OSType { get; set; }
        /// <summary>The version of Operating System running on the hybrid machine.</summary>
        string OSVersion { get; set; }
        /// <summary>
        /// The resource id of the parent cluster (Azure HCI) this machine is assigned to, if any.
        /// </summary>
        string ParentClusterResourceId { get; set; }
        /// <summary>The resource id of the private link scope this machine is assigned to, if any.</summary>
        string PrivateLinkScopeResourceId { get; set; }
        /// <summary>Hybrid Compute Machine properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineProperties Property { get; set; }
        /// <summary>The provisioning state, which only appears in the response.</summary>
        string ProvisioningState { get; set; }
        /// <summary>The list of extensions affiliated to the machine</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IMachineExtension[] Resource { get; set; }
        /// <summary>Statuses of dependent services that are reported back to ARM.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IServiceStatuses ServiceStatuses { get; set; }
        /// <summary>The state of the extension service on the Arc-enabled machine.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IServiceStatus ServiceStatusesExtensionService { get; set; }
        /// <summary>The state of the guest configuration service on the Arc-enabled machine.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IServiceStatus ServiceStatusesGuestConfigurationService { get; set; }
        /// <summary>The status of the hybrid machine agent.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.StatusTypes? Status { get; set; }
        /// <summary>Specifies the hybrid machine unique ID.</summary>
        string VMId { get; set; }
        /// <summary>Specifies the Arc Machine's unique SMBIOS ID</summary>
        string VMUuid { get; set; }
        /// <summary>Specifies the patch settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.Api20221227.IPatchSettings WindowConfigurationPatchSetting { get; set; }
        /// <summary>Specifies the assessment mode.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.AssessmentModeTypes? WindowsConfigurationPatchSettingsAssessmentMode { get; set; }
        /// <summary>Specifies the patch mode.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Support.PatchModeTypes? WindowsConfigurationPatchSettingsPatchMode { get; set; }

    }
}