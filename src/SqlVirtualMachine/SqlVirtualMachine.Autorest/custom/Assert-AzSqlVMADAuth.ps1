
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Validates a SQL virtual machine Entra Authentication.
.Description
Validates a SQL virtual machine Entra Authentication.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.ISqlVirtualMachineIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachine
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <ISqlVirtualMachineIdentity>: Identity Parameter
  [AvailabilityGroupListenerName <String>]: Name of the availability group listener.
  [Id <String>]: Resource identity path
  [ResourceGroupName <String>]: Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  [SqlVirtualMachineGroupName <String>]: Name of the SQL virtual machine group.
  [SqlVirtualMachineName <String>]: Name of the SQL virtual machine.
  [SubscriptionId <String>]: Subscription ID that identifies an Azure subscription.

.Link
https://learn.microsoft.com/powershell/module/az.sqlvirtualmachine/Assert-AzSqlVMADAuth
#>
function Assert-AzSqlVMADAuth {
[CmdletBinding(DefaultParameterSetName='AssertExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
[OutputType([bool])]
param(
    [Parameter(ParameterSetName='AssertExpanded', Mandatory)]
    [Alias('SqlVirtualMachineName', 'SqlVMName')]
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Path')]
    [System.String]
    # Name of the SQL virtual machine.
    ${Name},

    [Parameter(ParameterSetName='AssertExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Path')]
    [System.String]
    # Name of the resource group that contains the resource.
    # You can obtain this value from the Azure Resource Manager API or the portal.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='AssertExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Subscription ID that identifies an Azure subscription.
    ${SubscriptionId},

    [Parameter(ParameterSetName='AssertViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.ISqlVirtualMachineIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},
	
    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
    [System.String]
    # The client Id of the Managed Identity to query Microsoft Graph API.
    # An empty string must be used for the system assigned Managed Identity
    ${AzureAdAuthenticationSettingClientId},	

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

process {
	try {
        $hasInputObject = $PSBoundParameters.Remove('InputObject')

        $hasAzureAdAuthenticationSettingClientId = $PSBoundParameters.Remove('AzureAdAuthenticationSettingClientId')
        
        $hasAsJob = $PSBoundParameters.Remove('AsJob')
        $null = $PSBoundParameters.Remove('WhatIf')
        $null = $PSBoundParameters.Remove('Confirm')

        if($hasInputObject){
            $sqlvm = Get-AzSqlVM -InputObject $InputObject @PSBoundParameters
        }else{
		    $sqlvm = Get-AzSqlVM @PSBoundParameters
        }
        $null = $PSBoundParameters.Remove('InputObject')
        $null = $PSBoundParameters.Remove('ResourceGroupName')
        $null = $PSBoundParameters.Remove('Name')
        $null = $PSBoundParameters.Remove('SubscriptionId')		
		
        if ($hasAsJob) {
            $PSBoundParameters.Add('AsJob', $true)
        }				
		
        if ($PSCmdlet.ShouldProcess("SQL virtual machine $($sqlvm.Name)", "Assert")) {
           Assert-All -VmName $sqlvm.Name -ResourceGroup $sqlvm.ResourceGroupName -MsiClientId $AzureAdAuthenticationSettingClientId
    	   Write-Output $true
           return
        }
    } catch {
        throw
    }
}
}

<#
    .SYNOPSIS
    Given a VM, check if it's eligible for Azure AD authentication
	
	.Description
	Given a VM, check if it's eligible for Azure AD authentication

    .PARAMETER VmName
    Name of the VM

    .PARAMETER ResourceGroup
    Name of the resource group

    .OUTPUTS
    bool if the validation passed or not
#>
function Assert-All {	
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.DoNotExportAttribute()]
    param(
    [Parameter(Mandatory = $true)]
    [string] $VmName,
    [Parameter(Mandatory = $true)]
    [string] $ResourceGroup,
    [Parameter(Mandatory = $false)]
    [string] $MsiClientId)

	
		    # All validations go here
			# validate the SQL VM supports Azure AD authentication, i.e. it is on Windows platform and is SQL 2022 or later
			$null = Assert-AzureADAuthenticationSupportedOnSqlVM -ResourceGroupName $ResourceGroup -SqlVirtualMachineName $VmName
	        # validate the MSI is valid on the Azure virtual machine
			$PrincipalId = Assert-MsiValidOnVm -ResourceGroupName $ResourceGroup -SqlVirtualMachineName $VmName -MsiClientId $MsiClientId
			# validate the MSI has appropriate permission to query Microsoft Graph API
			$null = Assert-MsiWithEnoughPermission -PrincipalId $PrincipalId
            Write-Host "Sql virtual machine $($sqlvm.Name) is valid for Azure AD authentication."
}

<#
    .SYNOPSIS
    Check if SQL VM version is minimum SQL2022
	
	.Description
	Check if SQL VM version is minimum SQL2022

    .PARAMETER SqlVirtualMachineName
    Name of the VM

    .PARAMETER ResourceGroupName
    Name of the resource group
#>
function Assert-AzureADAuthenticationSupportedOnSqlVM {
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.DoNotExportAttribute()]
    param(
        [Parameter(Mandatory = $true)]
        [string] $ResourceGroupName,
        [Parameter(Mandatory = $true)]
        [string] $SqlVirtualMachineName
    )

    try {
		$accountmodule = Get-Module Az.Accounts 
		if ($accountmodule -ne $null -and $accountmodule.Version -lt [System.Version]"2.19.0") 
		{ 
			Write-Error "This module requires Az.Accounts version 2.19.0. An earlier version of Az.Accounts is imported in the current PowerShell session. Please open a new session before importing this module. This error could indicate that multiple incompatible versions of the Azure PowerShell cmdlets are installed on your system. Please see https://aka.ms/azps-version-error for troubleshooting information." -ErrorAction Stop 
		} 
		elseif ($accountmodule -eq $null) 
		{ 
			Install-Module -Name Az.Accounts -Scope CurrentUser -AllowClobber -Force 
			Import-Module Az.Accounts -MinimumVersion 2.19.0
		}

		$computemodule = Get-Module Az.Compute
		if ($computemodule -eq $null) 
		{ 
			Install-Module -Name Az.Compute -Scope CurrentUser -AllowClobber -Force
			Import-Module Az.Compute 
		}
		
		# Get the SQL VM instance
		$statuses = Get-AzVMExtension -ResourceGroupName $ResourceGroupName -VMName $SqlVirtualMachineName -Name "SqlIaasExtension" -Status
		$resourceProviderPluginStatus = $statuses.SubStatuses | Where-Object { $_.Code -like "*Resource Provider Plugin*" }

		if ($resourceProviderPluginStatus) {
			$sqlVersion = $resourceProviderPluginStatus | Select-Object @{Name='SqlVersion'; Expression={$_.Message | ConvertFrom-Json | Select-Object -ExpandProperty SqlVersion}}
			$osVersion = $resourceProviderPluginStatus | Select-Object @{Name='OSVersion'; Expression={$_.Message | ConvertFrom-Json | Select-Object -ExpandProperty OSVersion}}
		} else {
			throw "Unable to validate sql version from extension status."
		}
    }
    catch {
        throw "Unable to validate Azure AD authentication due to an error: $_"
    }

    # Construct error message for unsupported SQL server version or OS platform.
    $unsupportedError = "Azure AD authentication requires SQL Server 2022 on Windows platform, but the current version of this SQL VM is $($sqlVersion.SqlVersion) - $($osVersion.OSVersion)"
	
    if (-not $sqlVersion -or -not $osVersion) {
        throw $unsupportedError
    }

	try {
		$intVersion = [int]($sqlVersion.SqlVersion.Substring(3))
	}
	catch {
		throw $unsupportedError
	}

	if ($intVersion -lt 2022 -or -not $osVersion.OSVersion.StartsWith("WS")) {
		$unsupportedError += "`n Recommendation: Upgrade SQL Server to SQL Server 2022 or later."
		throw $unsupportedError
	}
}

<#
    .SYNOPSIS
    Validate the provided MSI is associated with SQL VM or not
	
	.Description
	Validate the provided MSI is associated with SQL VM or not

    .PARAMETER SqlVirtualMachineName
    Name of the VM

    .PARAMETER ResourceGroupName
    Name of the resource group
	
	.PARAMETER MsiClientId
    Msi Client Id
#>
function Assert-MsiValidOnVm {
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.DoNotExportAttribute()]
    param(
        [Parameter(Mandatory = $true)]
        [string] $ResourceGroupName,
        [Parameter(Mandatory = $true)]
        [string] $SqlVirtualMachineName,
        [Parameter(Mandatory = $false)]
        [string] $MsiClientId
    )

    try {
        # Get the VM instance
        $vm = Get-AzVM -ResourceGroupName $ResourceGroupName -Name $SqlVirtualMachineName
    }
    catch {
        throw "Unable to validate Azure AD authentication due to retrieving the Azure virtual machine instance encountering an error: $_"
    }

    # The system-assigned MSI case.
    if (-not $MsiClientId) {
        if ($vm.Identity -eq $null -or $vm.Identity.PrincipalId -eq $null) {
            $azError = "Enable Azure AD authentication with system-assigned managed identity, but the system-assigned managed identity is not enabled on this Azure virtual machine."
            $azError += "`n Recommendation: Enable the system-assigned managed identity on the Azure virtual machine: $SqlVirtualMachineName."
            throw $azError
        }

        return $vm.Identity.PrincipalId
    }

    # The user-assigned MSI case.
    if ($vm.Identity -eq $null -or $vm.Identity.UserAssignedIdentities -eq $null) {
        $azError = "Enable Azure AD authentication with user-assigned managed identity $MsiClientId, but the managed identity is not attached to this Azure virtual machine."
        $azError += "`n Recommendation: Attach the user-assigned managed identity $MsiClientId to the Azure virtual machine $SqlVirtualMachineName."
        throw $azError
    }

    foreach ($umi in $vm.Identity.UserAssignedIdentities.Values) {
        if ($umi.ClientId -eq $MsiClientId) {
            return $umi.PrincipalId
        }
    }
	
	$azError = "Enable Azure AD authentication with user-assigned managed identity $MsiClientId, but the managed identity is not attached to this Azure virtual machine."
	$azError += "`n Recommendation: Attach the user-assigned managed identity $MsiClientId to the Azure virtual machine $SqlVirtualMachineName."
	throw $azError

}

<#
    .SYNOPSIS
    Validate the provided MSI has required permissions or not
	
	.Description
	Validate the provided MSI has required permissions or not
	
	.PARAMETER PrincipalId
    Msi Principal Id
#>
function Assert-MsiWithEnoughPermission {    
    [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.DoNotExportAttribute()]
    param(
        [Parameter(Mandatory = $true)]
        [string] $PrincipalId
    )    
		# Install and connect to Microsoft Graph
		Install-Module Microsoft.Graph.Authentication -Scope CurrentUser -AllowClobber -Force

		# Install and import Microsoft.Graph.Applications module
		Install-Module -Name Microsoft.Graph.Applications -Scope CurrentUser -AllowClobber -Force
		Import-Module Microsoft.Graph.Applications

		#connect to Microsoft graph
		Connect-MgGraphViaToken
		
		# Get directory roles assigned to the MSI
		$directoryRoles = Get-DirectoryRoleList -PrincipalId $PrincipalId

		# Check if the MSI has the "Directory Readers" role
		if ($directoryRoles.DisplayName -contains "Directory Readers") {
			return
		}

		# Retrieve app role IDs for required roles
		$appRoleIdMap = Find-RoleId

		# Retrieve all assigned app role IDs for the MSI
		$allAssignedRoleIds = (Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $PrincipalId).AppRoleId

		# Find missing roles
		$missingRoles = @("User.Read.All", "Application.Read.All", "GroupMember.Read.All") | Where-Object { $appRoleIdMap[$_] -notin $allAssignedRoleIds }

		if ($missingRoles.Count -gt 0) {
			$azError = "The managed identity is lacking the following roles for Azure AD authentication: $($missingRoles -join ', ')."
			$azError += "`n Recommendation: Grant the managed identity EITHER the Directory.Readers role OR the three App roles 'User.Read.All', 'Application.Read.All', 'GroupMember.Read.All'"
			throw $azError
		}		
}

  
function Connect-MgGraphViaToken {
      <#
      .SYNOPSIS
      Function for connecting to the Microsoft Graph.
      This option is unavailable with official Connect-MgGraph command.

      .DESCRIPTION
      Function for connecting to the Microsoft Graph.
      This option is unavailable with official Connect-MgGraph command.

      .EXAMPLE
      $cred = Get-Credential
      Connect-MgGraphViaToken
      #>
      [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.DoNotExportAttribute()]
      param()	  
		try {
			# Retrieve token for MSGraph
			$token = (Get-AzAccessToken -ResourceTypeName MSGraph -ErrorAction Stop).Token

			# Convert token string to secure string if new version of Connect-MgGraph is used
			if ((Get-Help Connect-MgGraph -Parameter accesstoken).Type.Name -eq "SecureString") {
				$token = ConvertTo-SecureString $token -AsPlainText -Force
			}

			# Use token for connecting to Microsoft Graph
			$null = Connect-MgGraph -AccessToken $token -ErrorAction Stop
		}
		catch {
			throw "Error connecting to Microsoft Graph: $_"
		}
}

function Find-RoleId {
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.DoNotExportAttribute()]
        param()
		try {
			$servicePrincipals = Get-MgServicePrincipal -Filter "displayName eq 'Microsoft Graph'"
		}
		catch {
			throw "Querying Microsoft Graph API failed to find the service principal of Microsoft Graph Application: $_"
		}

		# If we failed to find the Microsoft Graph service application, fail the validation.
		if (!$servicePrincipals) {
			throw "Querying Microsoft Graph API failed to find the service principal of Microsoft Graph Application"
		}

		$appRoleIdMap = @{
			"User.Read.All"        = $null
			"Application.Read.All" = $null
			"GroupMember.Read.All" = $null
		}

		foreach ($appRole in $servicePrincipals.appRoles) {
			$roleName = $appRole.value
			if ($appRoleIdMap.ContainsKey($roleName)) {
				$appRoleIdMap[$roleName] = $appRole.id
			}
		}

		# If we failed to find all role definitions, fail the validation.
		$missingRoleDefs = $appRoleIdMap.Keys | Where-Object { $appRoleIdMap[$_] -eq $null }

		if ($missingRoleDefs) {
			$errorMessage = "Querying Microsoft Graph API failed to find the following roles: $($missingRoleDefs -join ', ')"
			Write-Warning $errorMessage
			throw $errorMessage
		}

		return $appRoleIdMap
}

function Get-DirectoryRoleList {	    
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.DoNotExportAttribute()]
        param(
        [Parameter(Mandatory = $true)]
        [string] $PrincipalId
		)
	
		try {
			$RoleList = Get-MgServicePrincipalTransitiveMemberOfAsDirectoryRole -ServicePrincipalId $PrincipalId
			return $RoleList
		}
		catch {
			throw "Microsoft Graph API Error: $_"
		}
}
