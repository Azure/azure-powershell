// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Extensions;

    /// <summary>A SQL virtual machine.</summary>
    public partial class SqlVirtualMachine :
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachine,
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal,
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITrackedResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.TrackedResource();

        /// <summary>Enable or disable R services (SQL 2016 onwards).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? AdditionalFeatureServerConfigurationIsRServicesEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AdditionalFeatureServerConfigurationIsRServicesEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AdditionalFeatureServerConfigurationIsRServicesEnabled = value ?? default(bool); }

        /// <summary>Enable or disable SQL best practices Assessment feature on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? AssessmentSettingEnable { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AssessmentSettingEnable; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AssessmentSettingEnable = value ?? default(bool); }

        /// <summary>Run SQL best practices Assessment immediately on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? AssessmentSettingRunImmediately { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AssessmentSettingRunImmediately; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AssessmentSettingRunImmediately = value ?? default(bool); }

        /// <summary>Backup schedule type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.BackupScheduleType? AutoBackupSettingBackupScheduleType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingBackupScheduleType; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingBackupScheduleType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.BackupScheduleType)""); }

        /// <summary>Include or exclude system databases from auto backup.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? AutoBackupSettingBackupSystemDb { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingBackupSystemDb; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingBackupSystemDb = value ?? default(bool); }

        /// <summary>Days of the week for the backups when FullBackupFrequency is set to Weekly.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AutoBackupDaysOfWeek[] AutoBackupSettingDaysOfWeek { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingDaysOfWeek; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingDaysOfWeek = value ?? null /* arrayOf */; }

        /// <summary>Enable or disable autobackup on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? AutoBackupSettingEnable { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingEnable; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingEnable = value ?? default(bool); }

        /// <summary>Enable or disable encryption for backup on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? AutoBackupSettingEnableEncryption { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingEnableEncryption; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingEnableEncryption = value ?? default(bool); }

        /// <summary>
        /// Frequency of full backups. In both cases, full backups begin during the next scheduled time window.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.FullBackupFrequencyType? AutoBackupSettingFullBackupFrequency { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingFullBackupFrequency; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingFullBackupFrequency = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.FullBackupFrequencyType)""); }

        /// <summary>Start time of a given day during which full backups can take place. 0-23 hours.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? AutoBackupSettingFullBackupStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingFullBackupStartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingFullBackupStartTime = value ?? default(int); }

        /// <summary>
        /// Duration of the time window of a given day during which full backups can take place. 1-23 hours.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? AutoBackupSettingFullBackupWindowHour { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingFullBackupWindowHour; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingFullBackupWindowHour = value ?? default(int); }

        /// <summary>Frequency of log backups. 5-60 minutes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? AutoBackupSettingLogBackupFrequency { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingLogBackupFrequency; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingLogBackupFrequency = value ?? default(int); }

        /// <summary>Password for encryption on backup.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public System.Security.SecureString AutoBackupSettingPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingPassword = value ?? null; }

        /// <summary>Retention period of backup: 1-90 days.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? AutoBackupSettingRetentionPeriod { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingRetentionPeriod; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingRetentionPeriod = value ?? default(int); }

        /// <summary>Storage account key where backup will be taken to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string AutoBackupSettingStorageAccessKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingStorageAccessKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingStorageAccessKey = value ?? null; }

        /// <summary>Storage account url where backup will be taken to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string AutoBackupSettingStorageAccountUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingStorageAccountUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingStorageAccountUrl = value ?? null; }

        /// <summary>Storage container name where backup will be taken to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string AutoBackupSettingStorageContainerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingStorageContainerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSettingStorageContainerName = value ?? null; }

        /// <summary>Day of week to apply the patch on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DayOfWeek? AutoPatchingSettingDayOfWeek { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoPatchingSettingDayOfWeek; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoPatchingSettingDayOfWeek = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DayOfWeek)""); }

        /// <summary>Enable or disable autopatching on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? AutoPatchingSettingEnable { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoPatchingSettingEnable; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoPatchingSettingEnable = value ?? default(bool); }

        /// <summary>Duration of patching.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? AutoPatchingSettingMaintenanceWindowDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoPatchingSettingMaintenanceWindowDuration; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoPatchingSettingMaintenanceWindowDuration = value ?? default(int); }

        /// <summary>Hour of the day when patching is initiated. Local VM time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? AutoPatchingSettingMaintenanceWindowStartingHour { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoPatchingSettingMaintenanceWindowStartingHour; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoPatchingSettingMaintenanceWindowStartingHour = value ?? default(int); }

        /// <summary>
        /// The client Id of the Managed Identity to query Microsoft Graph API. An empty string must be used for the system assigned
        /// Managed Identity
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string AzureAdAuthenticationSettingClientId { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AzureAdAuthenticationSettingClientId; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AzureAdAuthenticationSettingClientId = value ?? null; }

        /// <summary>Enable automatic upgrade of Sql IaaS extension Agent.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? EnableAutomaticUpgrade { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).EnableAutomaticUpgrade; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).EnableAutomaticUpgrade = value ?? default(bool); }

        /// <summary>
        /// ARM resource id of the SQL virtual machine group this SQL virtual machine is or will be part of.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string GroupResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlVirtualMachineGroupResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlVirtualMachineGroupResourceId = value ?? null; }

        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceInternal)__trackedResource).Id; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceIdentity _identity;

        /// <summary>Azure Active Directory identity of the server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ResourceIdentity()); set => this._identity = value; }

        /// <summary>The Azure Active Directory principal id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceIdentityInternal)Identity).PrincipalId; }

        /// <summary>The Azure Active Directory tenant id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceIdentityInternal)Identity).TenantId; }

        /// <summary>
        /// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory
        /// principal for the resource.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.IdentityType? IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceIdentityInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceIdentityInternal)Identity).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.IdentityType)""); }

        /// <summary>Azure Key Vault url.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string KeyVaultCredentialSettingAzureKeyVaultUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).KeyVaultCredentialSettingAzureKeyVaultUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).KeyVaultCredentialSettingAzureKeyVaultUrl = value ?? null; }

        /// <summary>Credential name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string KeyVaultCredentialSettingCredentialName { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).KeyVaultCredentialSettingCredentialName; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).KeyVaultCredentialSettingCredentialName = value ?? null; }

        /// <summary>Enable or disable key vault credential setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? KeyVaultCredentialSettingEnable { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).KeyVaultCredentialSettingEnable; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).KeyVaultCredentialSettingEnable = value ?? default(bool); }

        /// <summary>Service principal name to access key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string KeyVaultCredentialSettingServicePrincipalName { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).KeyVaultCredentialSettingServicePrincipalName; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).KeyVaultCredentialSettingServicePrincipalName = value ?? null; }

        /// <summary>Service principal name secret to access key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string KeyVaultCredentialSettingServicePrincipalSecret { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).KeyVaultCredentialSettingServicePrincipalSecret; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).KeyVaultCredentialSettingServicePrincipalSecret = value ?? null; }

        /// <summary>SQL IaaS Agent least privilege mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.LeastPrivilegeMode? LeastPrivilegeMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).LeastPrivilegeMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).LeastPrivilegeMode = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.LeastPrivilegeMode)""); }

        /// <summary>Resource location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITrackedResourceInternal)__trackedResource).Location = value ; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceInternal)__trackedResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceInternal)__trackedResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceInternal)__trackedResource).Type = value; }

        /// <summary>Internal Acessors for AssessmentSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.AssessmentSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AssessmentSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AssessmentSetting = value; }

        /// <summary>Internal Acessors for AssessmentSettingSchedule</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISchedule Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.AssessmentSettingSchedule { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AssessmentSettingSchedule; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AssessmentSettingSchedule = value; }

        /// <summary>Internal Acessors for AutoBackupSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.AutoBackupSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoBackupSetting = value; }

        /// <summary>Internal Acessors for AutoPatchingSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoPatchingSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.AutoPatchingSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoPatchingSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).AutoPatchingSetting = value; }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceIdentity Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ResourceIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceIdentityInternal)Identity).PrincipalId; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceIdentityInternal)Identity).PrincipalId = value; }

        /// <summary>Internal Acessors for IdentityTenantId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceIdentityInternal)Identity).TenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceIdentityInternal)Identity).TenantId = value; }

        /// <summary>Internal Acessors for KeyVaultCredentialSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IKeyVaultCredentialSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.KeyVaultCredentialSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).KeyVaultCredentialSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).KeyVaultCredentialSetting = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineProperties Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.SqlVirtualMachineProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>
        /// Internal Acessors for ServerConfigurationManagementSettingAdditionalFeaturesServerConfiguration
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAdditionalFeaturesServerConfigurations Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.ServerConfigurationManagementSettingAdditionalFeaturesServerConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ServerConfigurationManagementSettingAdditionalFeaturesServerConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ServerConfigurationManagementSettingAdditionalFeaturesServerConfiguration = value; }

        /// <summary>
        /// Internal Acessors for ServerConfigurationManagementSettingAzureAdAuthenticationSetting
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAadAuthenticationSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.ServerConfigurationManagementSettingAzureAdAuthenticationSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ServerConfigurationManagementSettingAzureAdAuthenticationSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ServerConfigurationManagementSettingAzureAdAuthenticationSetting = value; }

        /// <summary>
        /// Internal Acessors for ServerConfigurationManagementSettingSqlConnectivityUpdateSetting
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlConnectivityUpdateSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.ServerConfigurationManagementSettingSqlConnectivityUpdateSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ServerConfigurationManagementSettingSqlConnectivityUpdateSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ServerConfigurationManagementSettingSqlConnectivityUpdateSetting = value; }

        /// <summary>Internal Acessors for ServerConfigurationManagementSettingSqlInstanceSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlInstanceSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.ServerConfigurationManagementSettingSqlInstanceSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ServerConfigurationManagementSettingSqlInstanceSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ServerConfigurationManagementSettingSqlInstanceSetting = value; }

        /// <summary>
        /// Internal Acessors for ServerConfigurationManagementSettingSqlStorageUpdateSetting
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageUpdateSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.ServerConfigurationManagementSettingSqlStorageUpdateSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ServerConfigurationManagementSettingSqlStorageUpdateSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ServerConfigurationManagementSettingSqlStorageUpdateSetting = value; }

        /// <summary>
        /// Internal Acessors for ServerConfigurationManagementSettingSqlWorkloadTypeUpdateSetting
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlWorkloadTypeUpdateSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.ServerConfigurationManagementSettingSqlWorkloadTypeUpdateSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ServerConfigurationManagementSettingSqlWorkloadTypeUpdateSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ServerConfigurationManagementSettingSqlWorkloadTypeUpdateSetting = value; }

        /// <summary>Internal Acessors for ServerConfigurationsManagementSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.ServerConfigurationsManagementSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ServerConfigurationsManagementSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ServerConfigurationsManagementSetting = value; }

        /// <summary>Internal Acessors for StorageConfigurationSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.StorageConfigurationSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).StorageConfigurationSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).StorageConfigurationSetting = value; }

        /// <summary>Internal Acessors for StorageConfigurationSettingSqlDataSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.StorageConfigurationSettingSqlDataSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).StorageConfigurationSettingSqlDataSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).StorageConfigurationSettingSqlDataSetting = value; }

        /// <summary>Internal Acessors for StorageConfigurationSettingSqlLogSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.StorageConfigurationSettingSqlLogSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).StorageConfigurationSettingSqlLogSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).StorageConfigurationSettingSqlLogSetting = value; }

        /// <summary>Internal Acessors for StorageConfigurationSettingSqlTempDbSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.StorageConfigurationSettingSqlTempDbSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).StorageConfigurationSettingSqlTempDbSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).StorageConfigurationSettingSqlTempDbSetting = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20.ISystemData Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.SystemData { get => (this._systemData = this._systemData ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20.SystemData()); set { {_systemData = value;} } }

        /// <summary>Internal Acessors for TroubleshootingStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatus Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.TroubleshootingStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).TroubleshootingStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).TroubleshootingStatus = value; }

        /// <summary>Internal Acessors for TroubleshootingStatusEndTimeUtc</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.TroubleshootingStatusEndTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).TroubleshootingStatusEndTimeUtc; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).TroubleshootingStatusEndTimeUtc = value; }

        /// <summary>Internal Acessors for TroubleshootingStatusLastTriggerTimeUtc</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.TroubleshootingStatusLastTriggerTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).TroubleshootingStatusLastTriggerTimeUtc; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).TroubleshootingStatusLastTriggerTimeUtc = value; }

        /// <summary>Internal Acessors for TroubleshootingStatusProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingAdditionalProperties Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.TroubleshootingStatusProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).TroubleshootingStatusProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).TroubleshootingStatusProperty = value; }

        /// <summary>Internal Acessors for TroubleshootingStatusRootCause</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.TroubleshootingStatusRootCause { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).TroubleshootingStatusRootCause; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).TroubleshootingStatusRootCause = value; }

        /// <summary>Internal Acessors for TroubleshootingStatusStartTimeUtc</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.TroubleshootingStatusStartTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).TroubleshootingStatusStartTimeUtc; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).TroubleshootingStatusStartTimeUtc = value; }

        /// <summary>Internal Acessors for TroubleshootingStatusTroubleshootingScenario</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.TroubleshootingScenario? Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.TroubleshootingStatusTroubleshootingScenario { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).TroubleshootingStatusTroubleshootingScenario; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).TroubleshootingStatusTroubleshootingScenario = value; }

        /// <summary>Internal Acessors for UnhealthyReplicaInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IUnhealthyReplicaInfo Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.UnhealthyReplicaInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).UnhealthyReplicaInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).UnhealthyReplicaInfo = value; }

        /// <summary>Internal Acessors for WsfcDomainCredentials</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IWsfcDomainCredentials Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineInternal.WsfcDomainCredentials { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).WsfcDomainCredentials; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).WsfcDomainCredentials = value; }

        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceInternal)__trackedResource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineProperties _property;

        /// <summary>Resource properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.SqlVirtualMachineProperties()); set => this._property = value; }

        /// <summary>Provisioning state to track the async operation status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ProvisioningState; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>Day of the week to run assessment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AssessmentDayOfWeek? ScheduleDayOfWeek { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ScheduleDayOfWeek; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ScheduleDayOfWeek = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AssessmentDayOfWeek)""); }

        /// <summary>Enable or disable assessment schedule on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? ScheduleEnable { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ScheduleEnable; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ScheduleEnable = value ?? default(bool); }

        /// <summary>
        /// Occurrence of the DayOfWeek day within a month to schedule assessment. Takes values: 1,2,3,4 and -1. Use -1 for last DayOfWeek
        /// day of the month
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? ScheduleMonthlyOccurrence { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ScheduleMonthlyOccurrence; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ScheduleMonthlyOccurrence = value ?? default(int); }

        /// <summary>Time of the day in HH:mm format. Eg. 17:30</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string ScheduleStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ScheduleStartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ScheduleStartTime = value ?? null; }

        /// <summary>Number of weeks to schedule between 2 assessment runs. Takes value from 1-6</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? ScheduleWeeklyInterval { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ScheduleWeeklyInterval; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).ScheduleWeeklyInterval = value ?? default(int); }

        /// <summary>SQL Server connectivity option.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.ConnectivityType? SqlConnectivityUpdateSettingConnectivityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlConnectivityUpdateSettingConnectivityType; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlConnectivityUpdateSettingConnectivityType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.ConnectivityType)""); }

        /// <summary>SQL Server port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlConnectivityUpdateSettingPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlConnectivityUpdateSettingPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlConnectivityUpdateSettingPort = value ?? default(int); }

        /// <summary>SQL Server sysadmin login password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public System.Security.SecureString SqlConnectivityUpdateSettingSqlAuthUpdatePassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlConnectivityUpdateSettingSqlAuthUpdatePassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlConnectivityUpdateSettingSqlAuthUpdatePassword = value ?? null; }

        /// <summary>SQL Server sysadmin login to create.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string SqlConnectivityUpdateSettingSqlAuthUpdateUserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlConnectivityUpdateSettingSqlAuthUpdateUserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlConnectivityUpdateSettingSqlAuthUpdateUserName = value ?? null; }

        /// <summary>SQL Server default file path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string SqlDataSettingDefaultFilePath { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlDataSettingDefaultFilePath; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlDataSettingDefaultFilePath = value ?? null; }

        /// <summary>Logical Unit Numbers for the disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int[] SqlDataSettingLun { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlDataSettingLun; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlDataSettingLun = value ?? null /* arrayOf */; }

        /// <summary>SQL image offer. Examples include SQL2016-WS2016, SQL2017-WS2016.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string SqlImageOffer { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlImageOffer; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlImageOffer = value ?? null; }

        /// <summary>SQL Server edition type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlImageSku? SqlImageSku { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlImageSku; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlImageSku = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlImageSku)""); }

        /// <summary>SQL Server Collation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string SqlInstanceSettingCollation { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlInstanceSettingCollation; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlInstanceSettingCollation = value ?? null; }

        /// <summary>SQL Server IFI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? SqlInstanceSettingIsIfiEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlInstanceSettingIsIfiEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlInstanceSettingIsIfiEnabled = value ?? default(bool); }

        /// <summary>SQL Server LPIM.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? SqlInstanceSettingIsLpimEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlInstanceSettingIsLpimEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlInstanceSettingIsLpimEnabled = value ?? default(bool); }

        /// <summary>SQL Server Optimize for Adhoc workloads.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? SqlInstanceSettingIsOptimizeForAdHocWorkloadsEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlInstanceSettingIsOptimizeForAdHocWorkloadsEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlInstanceSettingIsOptimizeForAdHocWorkloadsEnabled = value ?? default(bool); }

        /// <summary>SQL Server MAXDOP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlInstanceSettingMaxDop { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlInstanceSettingMaxDop; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlInstanceSettingMaxDop = value ?? default(int); }

        /// <summary>SQL Server maximum memory.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlInstanceSettingMaxServerMemoryMb { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlInstanceSettingMaxServerMemoryMb; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlInstanceSettingMaxServerMemoryMb = value ?? default(int); }

        /// <summary>SQL Server minimum memory.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlInstanceSettingMinServerMemoryMb { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlInstanceSettingMinServerMemoryMb; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlInstanceSettingMinServerMemoryMb = value ?? default(int); }

        /// <summary>SQL Server default file path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string SqlLogSettingDefaultFilePath { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlLogSettingDefaultFilePath; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlLogSettingDefaultFilePath = value ?? null; }

        /// <summary>Logical Unit Numbers for the disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int[] SqlLogSettingLun { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlLogSettingLun; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlLogSettingLun = value ?? null /* arrayOf */; }

        /// <summary>SQL Server Management type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlManagementMode? SqlManagement { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlManagement; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlManagement = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlManagementMode)""); }

        /// <summary>SQL Server license type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlServerLicenseType? SqlServerLicenseType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlServerLicenseType; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlServerLicenseType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlServerLicenseType)""); }

        /// <summary>Disk configuration to apply to SQL Server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType? SqlStorageUpdateSettingDiskConfigurationType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlStorageUpdateSettingDiskConfigurationType; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlStorageUpdateSettingDiskConfigurationType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType)""); }

        /// <summary>Virtual machine disk count.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlStorageUpdateSettingDiskCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlStorageUpdateSettingDiskCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlStorageUpdateSettingDiskCount = value ?? default(int); }

        /// <summary>Device id of the first disk to be updated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlStorageUpdateSettingStartingDeviceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlStorageUpdateSettingStartingDeviceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlStorageUpdateSettingStartingDeviceId = value ?? default(int); }

        /// <summary>SQL Server tempdb data file count</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlTempDbSettingDataFileCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlTempDbSettingDataFileCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlTempDbSettingDataFileCount = value ?? default(int); }

        /// <summary>SQL Server tempdb data file size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlTempDbSettingDataFileSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlTempDbSettingDataFileSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlTempDbSettingDataFileSize = value ?? default(int); }

        /// <summary>SQL Server tempdb data file autoGrowth size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlTempDbSettingDataGrowth { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlTempDbSettingDataGrowth; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlTempDbSettingDataGrowth = value ?? default(int); }

        /// <summary>SQL Server default file path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string SqlTempDbSettingDefaultFilePath { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlTempDbSettingDefaultFilePath; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlTempDbSettingDefaultFilePath = value ?? null; }

        /// <summary>SQL Server tempdb log file size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlTempDbSettingLogFileSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlTempDbSettingLogFileSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlTempDbSettingLogFileSize = value ?? default(int); }

        /// <summary>SQL Server tempdb log file autoGrowth size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlTempDbSettingLogGrowth { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlTempDbSettingLogGrowth; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlTempDbSettingLogGrowth = value ?? default(int); }

        /// <summary>Logical Unit Numbers for the disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int[] SqlTempDbSettingLun { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlTempDbSettingLun; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlTempDbSettingLun = value ?? null /* arrayOf */; }

        /// <summary>SQL Server tempdb persist folder choice</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? SqlTempDbSettingPersistFolder { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlTempDbSettingPersistFolder; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlTempDbSettingPersistFolder = value ?? default(bool); }

        /// <summary>SQL Server tempdb persist folder location</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string SqlTempDbSettingPersistFolderPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlTempDbSettingPersistFolderPath; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlTempDbSettingPersistFolderPath = value ?? null; }

        /// <summary>SQL Server workload type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlWorkloadType? SqlWorkloadTypeUpdateSettingSqlWorkloadType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlWorkloadTypeUpdateSettingSqlWorkloadType; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).SqlWorkloadTypeUpdateSettingSqlWorkloadType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlWorkloadType)""); }

        /// <summary>Disk configuration to apply to SQL Server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType? StorageConfigurationSettingDiskConfigurationType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).StorageConfigurationSettingDiskConfigurationType; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).StorageConfigurationSettingDiskConfigurationType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType)""); }

        /// <summary>SQL Server SystemDb Storage on DataPool if true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? StorageConfigurationSettingSqlSystemDbOnDataDisk { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).StorageConfigurationSettingSqlSystemDbOnDataDisk; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).StorageConfigurationSettingSqlSystemDbOnDataDisk = value ?? default(bool); }

        /// <summary>Storage workload type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.StorageWorkloadType? StorageConfigurationSettingStorageWorkloadType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).StorageConfigurationSettingStorageWorkloadType; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).StorageConfigurationSettingStorageWorkloadType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.StorageWorkloadType)""); }

        /// <summary>Backing field for <see cref="SystemData" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20.ISystemData _systemData;

        /// <summary>Metadata pertaining to creation and last modification of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20.ISystemData SystemData { get => (this._systemData = this._systemData ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20.SystemData()); }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20.ISystemDataInternal)SystemData).CreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20.ISystemDataInternal)SystemData).CreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20.ISystemDataInternal)SystemData).CreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20.ISystemDataInternal)SystemData).CreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20.ISystemDataInternal)SystemData).CreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20.ISystemDataInternal)SystemData).CreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20.ISystemDataInternal)SystemData).LastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20.ISystemDataInternal)SystemData).LastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20.ISystemDataInternal)SystemData).LastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20.ISystemDataInternal)SystemData).LastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20.ISystemDataInternal)SystemData).LastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20.ISystemDataInternal)SystemData).LastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.CreatedByType)""); }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>End time in UTC timezone.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public global::System.DateTime? TroubleshootingStatusEndTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).TroubleshootingStatusEndTimeUtc; }

        /// <summary>Last troubleshooting trigger time in UTC timezone</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public global::System.DateTime? TroubleshootingStatusLastTriggerTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).TroubleshootingStatusLastTriggerTimeUtc; }

        /// <summary>Root cause of the issue</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string TroubleshootingStatusRootCause { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).TroubleshootingStatusRootCause; }

        /// <summary>Start time in UTC timezone.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public global::System.DateTime? TroubleshootingStatusStartTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).TroubleshootingStatusStartTimeUtc; }

        /// <summary>SQL VM troubleshooting scenario.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.TroubleshootingScenario? TroubleshootingStatusTroubleshootingScenario { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).TroubleshootingStatusTroubleshootingScenario; }

        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceInternal)__trackedResource).Type; }

        /// <summary>The name of the availability group</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string UnhealthyReplicaInfoAvailabilityGroupName { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).UnhealthyReplicaInfoAvailabilityGroupName; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).UnhealthyReplicaInfoAvailabilityGroupName = value ?? null; }

        /// <summary>
        /// ARM Resource id of underlying virtual machine created from SQL marketplace image.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string VirtualMachineResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).VirtualMachineResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).VirtualMachineResourceId = value ?? null; }

        /// <summary>Cluster bootstrap account password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public System.Security.SecureString WsfcDomainCredentialsClusterBootstrapAccountPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).WsfcDomainCredentialsClusterBootstrapAccountPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).WsfcDomainCredentialsClusterBootstrapAccountPassword = value ?? null; }

        /// <summary>Cluster operator account password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public System.Security.SecureString WsfcDomainCredentialsClusterOperatorAccountPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).WsfcDomainCredentialsClusterOperatorAccountPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).WsfcDomainCredentialsClusterOperatorAccountPassword = value ?? null; }

        /// <summary>SQL service account password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public System.Security.SecureString WsfcDomainCredentialsSqlServiceAccountPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).WsfcDomainCredentialsSqlServiceAccountPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).WsfcDomainCredentialsSqlServiceAccountPassword = value ?? null; }

        /// <summary>
        /// Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string WsfcStaticIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).WsfcStaticIP; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal)Property).WsfcStaticIP = value ?? null; }

        /// <summary>Creates an new <see cref="SqlVirtualMachine" /> instance.</summary>
        public SqlVirtualMachine()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// A SQL virtual machine.
    public partial interface ISqlVirtualMachine :
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITrackedResource
    {
        /// <summary>Enable or disable R services (SQL 2016 onwards).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable or disable R services (SQL 2016 onwards).",
        SerializedName = @"isRServicesEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AdditionalFeatureServerConfigurationIsRServicesEnabled { get; set; }
        /// <summary>Enable or disable SQL best practices Assessment feature on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable or disable SQL best practices Assessment feature on SQL virtual machine.",
        SerializedName = @"enable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AssessmentSettingEnable { get; set; }
        /// <summary>Run SQL best practices Assessment immediately on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Run SQL best practices Assessment immediately on SQL virtual machine.",
        SerializedName = @"runImmediately",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AssessmentSettingRunImmediately { get; set; }
        /// <summary>Backup schedule type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Backup schedule type.",
        SerializedName = @"backupScheduleType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.BackupScheduleType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.BackupScheduleType? AutoBackupSettingBackupScheduleType { get; set; }
        /// <summary>Include or exclude system databases from auto backup.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Include or exclude system databases from auto backup.",
        SerializedName = @"backupSystemDbs",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoBackupSettingBackupSystemDb { get; set; }
        /// <summary>Days of the week for the backups when FullBackupFrequency is set to Weekly.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Days of the week for the backups when FullBackupFrequency is set to Weekly.",
        SerializedName = @"daysOfWeek",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AutoBackupDaysOfWeek) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AutoBackupDaysOfWeek[] AutoBackupSettingDaysOfWeek { get; set; }
        /// <summary>Enable or disable autobackup on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable or disable autobackup on SQL virtual machine.",
        SerializedName = @"enable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoBackupSettingEnable { get; set; }
        /// <summary>Enable or disable encryption for backup on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable or disable encryption for backup on SQL virtual machine.",
        SerializedName = @"enableEncryption",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoBackupSettingEnableEncryption { get; set; }
        /// <summary>
        /// Frequency of full backups. In both cases, full backups begin during the next scheduled time window.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Frequency of full backups. In both cases, full backups begin during the next scheduled time window.",
        SerializedName = @"fullBackupFrequency",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.FullBackupFrequencyType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.FullBackupFrequencyType? AutoBackupSettingFullBackupFrequency { get; set; }
        /// <summary>Start time of a given day during which full backups can take place. 0-23 hours.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Start time of a given day during which full backups can take place. 0-23 hours.",
        SerializedName = @"fullBackupStartTime",
        PossibleTypes = new [] { typeof(int) })]
        int? AutoBackupSettingFullBackupStartTime { get; set; }
        /// <summary>
        /// Duration of the time window of a given day during which full backups can take place. 1-23 hours.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Duration of the time window of a given day during which full backups can take place. 1-23 hours.",
        SerializedName = @"fullBackupWindowHours",
        PossibleTypes = new [] { typeof(int) })]
        int? AutoBackupSettingFullBackupWindowHour { get; set; }
        /// <summary>Frequency of log backups. 5-60 minutes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Frequency of log backups. 5-60 minutes.",
        SerializedName = @"logBackupFrequency",
        PossibleTypes = new [] { typeof(int) })]
        int? AutoBackupSettingLogBackupFrequency { get; set; }
        /// <summary>Password for encryption on backup.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password for encryption on backup.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString AutoBackupSettingPassword { get; set; }
        /// <summary>Retention period of backup: 1-90 days.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Retention period of backup: 1-90 days.",
        SerializedName = @"retentionPeriod",
        PossibleTypes = new [] { typeof(int) })]
        int? AutoBackupSettingRetentionPeriod { get; set; }
        /// <summary>Storage account key where backup will be taken to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage account key where backup will be taken to.",
        SerializedName = @"storageAccessKey",
        PossibleTypes = new [] { typeof(string) })]
        string AutoBackupSettingStorageAccessKey { get; set; }
        /// <summary>Storage account url where backup will be taken to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage account url where backup will be taken to.",
        SerializedName = @"storageAccountUrl",
        PossibleTypes = new [] { typeof(string) })]
        string AutoBackupSettingStorageAccountUrl { get; set; }
        /// <summary>Storage container name where backup will be taken to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage container name where backup will be taken to.",
        SerializedName = @"storageContainerName",
        PossibleTypes = new [] { typeof(string) })]
        string AutoBackupSettingStorageContainerName { get; set; }
        /// <summary>Day of week to apply the patch on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Day of week to apply the patch on.",
        SerializedName = @"dayOfWeek",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DayOfWeek) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DayOfWeek? AutoPatchingSettingDayOfWeek { get; set; }
        /// <summary>Enable or disable autopatching on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable or disable autopatching on SQL virtual machine.",
        SerializedName = @"enable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoPatchingSettingEnable { get; set; }
        /// <summary>Duration of patching.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Duration of patching.",
        SerializedName = @"maintenanceWindowDuration",
        PossibleTypes = new [] { typeof(int) })]
        int? AutoPatchingSettingMaintenanceWindowDuration { get; set; }
        /// <summary>Hour of the day when patching is initiated. Local VM time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Hour of the day when patching is initiated. Local VM time.",
        SerializedName = @"maintenanceWindowStartingHour",
        PossibleTypes = new [] { typeof(int) })]
        int? AutoPatchingSettingMaintenanceWindowStartingHour { get; set; }
        /// <summary>
        /// The client Id of the Managed Identity to query Microsoft Graph API. An empty string must be used for the system assigned
        /// Managed Identity
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The client Id of the Managed Identity to query Microsoft Graph API. An empty string must be used for the system assigned Managed Identity",
        SerializedName = @"clientId",
        PossibleTypes = new [] { typeof(string) })]
        string AzureAdAuthenticationSettingClientId { get; set; }
        /// <summary>Enable automatic upgrade of Sql IaaS extension Agent.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable automatic upgrade of Sql IaaS extension Agent.",
        SerializedName = @"enableAutomaticUpgrade",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableAutomaticUpgrade { get; set; }
        /// <summary>
        /// ARM resource id of the SQL virtual machine group this SQL virtual machine is or will be part of.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ARM resource id of the SQL virtual machine group this SQL virtual machine is or will be part of.",
        SerializedName = @"sqlVirtualMachineGroupResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string GroupResourceId { get; set; }
        /// <summary>The Azure Active Directory principal id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The Azure Active Directory principal id.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>The Azure Active Directory tenant id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The Azure Active Directory tenant id.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityTenantId { get;  }
        /// <summary>
        /// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory
        /// principal for the resource.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.IdentityType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.IdentityType? IdentityType { get; set; }
        /// <summary>Azure Key Vault url.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure Key Vault url.",
        SerializedName = @"azureKeyVaultUrl",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultCredentialSettingAzureKeyVaultUrl { get; set; }
        /// <summary>Credential name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Credential name.",
        SerializedName = @"credentialName",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultCredentialSettingCredentialName { get; set; }
        /// <summary>Enable or disable key vault credential setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable or disable key vault credential setting.",
        SerializedName = @"enable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? KeyVaultCredentialSettingEnable { get; set; }
        /// <summary>Service principal name to access key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Service principal name to access key vault.",
        SerializedName = @"servicePrincipalName",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultCredentialSettingServicePrincipalName { get; set; }
        /// <summary>Service principal name secret to access key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Service principal name secret to access key vault.",
        SerializedName = @"servicePrincipalSecret",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultCredentialSettingServicePrincipalSecret { get; set; }
        /// <summary>SQL IaaS Agent least privilege mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL IaaS Agent least privilege mode.",
        SerializedName = @"leastPrivilegeMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.LeastPrivilegeMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.LeastPrivilegeMode? LeastPrivilegeMode { get; set; }
        /// <summary>Provisioning state to track the async operation status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Provisioning state to track the async operation status.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get;  }
        /// <summary>Day of the week to run assessment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Day of the week to run assessment.",
        SerializedName = @"dayOfWeek",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AssessmentDayOfWeek) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AssessmentDayOfWeek? ScheduleDayOfWeek { get; set; }
        /// <summary>Enable or disable assessment schedule on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable or disable assessment schedule on SQL virtual machine.",
        SerializedName = @"enable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ScheduleEnable { get; set; }
        /// <summary>
        /// Occurrence of the DayOfWeek day within a month to schedule assessment. Takes values: 1,2,3,4 and -1. Use -1 for last DayOfWeek
        /// day of the month
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Occurrence of the DayOfWeek day within a month to schedule assessment. Takes values: 1,2,3,4 and -1. Use -1 for last DayOfWeek day of the month",
        SerializedName = @"monthlyOccurrence",
        PossibleTypes = new [] { typeof(int) })]
        int? ScheduleMonthlyOccurrence { get; set; }
        /// <summary>Time of the day in HH:mm format. Eg. 17:30</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Time of the day in HH:mm format. Eg. 17:30",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(string) })]
        string ScheduleStartTime { get; set; }
        /// <summary>Number of weeks to schedule between 2 assessment runs. Takes value from 1-6</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of weeks to schedule between 2 assessment runs. Takes value from 1-6",
        SerializedName = @"weeklyInterval",
        PossibleTypes = new [] { typeof(int) })]
        int? ScheduleWeeklyInterval { get; set; }
        /// <summary>SQL Server connectivity option.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server connectivity option.",
        SerializedName = @"connectivityType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.ConnectivityType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.ConnectivityType? SqlConnectivityUpdateSettingConnectivityType { get; set; }
        /// <summary>SQL Server port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server port.",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlConnectivityUpdateSettingPort { get; set; }
        /// <summary>SQL Server sysadmin login password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server sysadmin login password.",
        SerializedName = @"sqlAuthUpdatePassword",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString SqlConnectivityUpdateSettingSqlAuthUpdatePassword { get; set; }
        /// <summary>SQL Server sysadmin login to create.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server sysadmin login to create.",
        SerializedName = @"sqlAuthUpdateUserName",
        PossibleTypes = new [] { typeof(string) })]
        string SqlConnectivityUpdateSettingSqlAuthUpdateUserName { get; set; }
        /// <summary>SQL Server default file path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server default file path",
        SerializedName = @"defaultFilePath",
        PossibleTypes = new [] { typeof(string) })]
        string SqlDataSettingDefaultFilePath { get; set; }
        /// <summary>Logical Unit Numbers for the disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Logical Unit Numbers for the disks.",
        SerializedName = @"luns",
        PossibleTypes = new [] { typeof(int) })]
        int[] SqlDataSettingLun { get; set; }
        /// <summary>SQL image offer. Examples include SQL2016-WS2016, SQL2017-WS2016.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL image offer. Examples include SQL2016-WS2016, SQL2017-WS2016.",
        SerializedName = @"sqlImageOffer",
        PossibleTypes = new [] { typeof(string) })]
        string SqlImageOffer { get; set; }
        /// <summary>SQL Server edition type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server edition type.",
        SerializedName = @"sqlImageSku",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlImageSku) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlImageSku? SqlImageSku { get; set; }
        /// <summary>SQL Server Collation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server Collation.",
        SerializedName = @"collation",
        PossibleTypes = new [] { typeof(string) })]
        string SqlInstanceSettingCollation { get; set; }
        /// <summary>SQL Server IFI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server IFI.",
        SerializedName = @"isIfiEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SqlInstanceSettingIsIfiEnabled { get; set; }
        /// <summary>SQL Server LPIM.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server LPIM.",
        SerializedName = @"isLpimEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SqlInstanceSettingIsLpimEnabled { get; set; }
        /// <summary>SQL Server Optimize for Adhoc workloads.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server Optimize for Adhoc workloads.",
        SerializedName = @"isOptimizeForAdHocWorkloadsEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SqlInstanceSettingIsOptimizeForAdHocWorkloadsEnabled { get; set; }
        /// <summary>SQL Server MAXDOP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server MAXDOP.",
        SerializedName = @"maxDop",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlInstanceSettingMaxDop { get; set; }
        /// <summary>SQL Server maximum memory.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server maximum memory.",
        SerializedName = @"maxServerMemoryMB",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlInstanceSettingMaxServerMemoryMb { get; set; }
        /// <summary>SQL Server minimum memory.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server minimum memory.",
        SerializedName = @"minServerMemoryMB",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlInstanceSettingMinServerMemoryMb { get; set; }
        /// <summary>SQL Server default file path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server default file path",
        SerializedName = @"defaultFilePath",
        PossibleTypes = new [] { typeof(string) })]
        string SqlLogSettingDefaultFilePath { get; set; }
        /// <summary>Logical Unit Numbers for the disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Logical Unit Numbers for the disks.",
        SerializedName = @"luns",
        PossibleTypes = new [] { typeof(int) })]
        int[] SqlLogSettingLun { get; set; }
        /// <summary>SQL Server Management type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server Management type.",
        SerializedName = @"sqlManagement",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlManagementMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlManagementMode? SqlManagement { get; set; }
        /// <summary>SQL Server license type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server license type.",
        SerializedName = @"sqlServerLicenseType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlServerLicenseType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlServerLicenseType? SqlServerLicenseType { get; set; }
        /// <summary>Disk configuration to apply to SQL Server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Disk configuration to apply to SQL Server.",
        SerializedName = @"diskConfigurationType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType? SqlStorageUpdateSettingDiskConfigurationType { get; set; }
        /// <summary>Virtual machine disk count.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Virtual machine disk count.",
        SerializedName = @"diskCount",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlStorageUpdateSettingDiskCount { get; set; }
        /// <summary>Device id of the first disk to be updated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Device id of the first disk to be updated.",
        SerializedName = @"startingDeviceId",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlStorageUpdateSettingStartingDeviceId { get; set; }
        /// <summary>SQL Server tempdb data file count</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb data file count",
        SerializedName = @"dataFileCount",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlTempDbSettingDataFileCount { get; set; }
        /// <summary>SQL Server tempdb data file size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb data file size",
        SerializedName = @"dataFileSize",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlTempDbSettingDataFileSize { get; set; }
        /// <summary>SQL Server tempdb data file autoGrowth size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb data file autoGrowth size",
        SerializedName = @"dataGrowth",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlTempDbSettingDataGrowth { get; set; }
        /// <summary>SQL Server default file path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server default file path",
        SerializedName = @"defaultFilePath",
        PossibleTypes = new [] { typeof(string) })]
        string SqlTempDbSettingDefaultFilePath { get; set; }
        /// <summary>SQL Server tempdb log file size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb log file size",
        SerializedName = @"logFileSize",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlTempDbSettingLogFileSize { get; set; }
        /// <summary>SQL Server tempdb log file autoGrowth size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb log file autoGrowth size",
        SerializedName = @"logGrowth",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlTempDbSettingLogGrowth { get; set; }
        /// <summary>Logical Unit Numbers for the disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Logical Unit Numbers for the disks.",
        SerializedName = @"luns",
        PossibleTypes = new [] { typeof(int) })]
        int[] SqlTempDbSettingLun { get; set; }
        /// <summary>SQL Server tempdb persist folder choice</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb persist folder choice",
        SerializedName = @"persistFolder",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SqlTempDbSettingPersistFolder { get; set; }
        /// <summary>SQL Server tempdb persist folder location</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb persist folder location",
        SerializedName = @"persistFolderPath",
        PossibleTypes = new [] { typeof(string) })]
        string SqlTempDbSettingPersistFolderPath { get; set; }
        /// <summary>SQL Server workload type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server workload type.",
        SerializedName = @"sqlWorkloadType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlWorkloadType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlWorkloadType? SqlWorkloadTypeUpdateSettingSqlWorkloadType { get; set; }
        /// <summary>Disk configuration to apply to SQL Server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Disk configuration to apply to SQL Server.",
        SerializedName = @"diskConfigurationType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType? StorageConfigurationSettingDiskConfigurationType { get; set; }
        /// <summary>SQL Server SystemDb Storage on DataPool if true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server SystemDb Storage on DataPool if true.",
        SerializedName = @"sqlSystemDbOnDataDisk",
        PossibleTypes = new [] { typeof(bool) })]
        bool? StorageConfigurationSettingSqlSystemDbOnDataDisk { get; set; }
        /// <summary>Storage workload type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage workload type.",
        SerializedName = @"storageWorkloadType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.StorageWorkloadType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.StorageWorkloadType? StorageConfigurationSettingStorageWorkloadType { get; set; }
        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The timestamp of resource creation (UTC).",
        SerializedName = @"createdAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SystemDataCreatedAt { get; set; }
        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity that created the resource.",
        SerializedName = @"createdBy",
        PossibleTypes = new [] { typeof(string) })]
        string SystemDataCreatedBy { get; set; }
        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity that created the resource.",
        SerializedName = @"createdByType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.CreatedByType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.CreatedByType? SystemDataCreatedByType { get; set; }
        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The timestamp of resource last modification (UTC)",
        SerializedName = @"lastModifiedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SystemDataLastModifiedAt { get; set; }
        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity that last modified the resource.",
        SerializedName = @"lastModifiedBy",
        PossibleTypes = new [] { typeof(string) })]
        string SystemDataLastModifiedBy { get; set; }
        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity that last modified the resource.",
        SerializedName = @"lastModifiedByType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.CreatedByType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.CreatedByType? SystemDataLastModifiedByType { get; set; }
        /// <summary>End time in UTC timezone.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"End time in UTC timezone.",
        SerializedName = @"endTimeUtc",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? TroubleshootingStatusEndTimeUtc { get;  }
        /// <summary>Last troubleshooting trigger time in UTC timezone</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Last troubleshooting trigger time in UTC timezone",
        SerializedName = @"lastTriggerTimeUtc",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? TroubleshootingStatusLastTriggerTimeUtc { get;  }
        /// <summary>Root cause of the issue</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Root cause of the issue",
        SerializedName = @"rootCause",
        PossibleTypes = new [] { typeof(string) })]
        string TroubleshootingStatusRootCause { get;  }
        /// <summary>Start time in UTC timezone.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Start time in UTC timezone.",
        SerializedName = @"startTimeUtc",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? TroubleshootingStatusStartTimeUtc { get;  }
        /// <summary>SQL VM troubleshooting scenario.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"SQL VM troubleshooting scenario.",
        SerializedName = @"troubleshootingScenario",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.TroubleshootingScenario) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.TroubleshootingScenario? TroubleshootingStatusTroubleshootingScenario { get;  }
        /// <summary>The name of the availability group</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the availability group",
        SerializedName = @"availabilityGroupName",
        PossibleTypes = new [] { typeof(string) })]
        string UnhealthyReplicaInfoAvailabilityGroupName { get; set; }
        /// <summary>
        /// ARM Resource id of underlying virtual machine created from SQL marketplace image.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ARM Resource id of underlying virtual machine created from SQL marketplace image.",
        SerializedName = @"virtualMachineResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualMachineResourceId { get; set; }
        /// <summary>Cluster bootstrap account password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Cluster bootstrap account password.",
        SerializedName = @"clusterBootstrapAccountPassword",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString WsfcDomainCredentialsClusterBootstrapAccountPassword { get; set; }
        /// <summary>Cluster operator account password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Cluster operator account password.",
        SerializedName = @"clusterOperatorAccountPassword",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString WsfcDomainCredentialsClusterOperatorAccountPassword { get; set; }
        /// <summary>SQL service account password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL service account password.",
        SerializedName = @"sqlServiceAccountPassword",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString WsfcDomainCredentialsSqlServiceAccountPassword { get; set; }
        /// <summary>
        /// Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.",
        SerializedName = @"wsfcStaticIp",
        PossibleTypes = new [] { typeof(string) })]
        string WsfcStaticIP { get; set; }

    }
    /// A SQL virtual machine.
    internal partial interface ISqlVirtualMachineInternal :
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITrackedResourceInternal
    {
        /// <summary>Enable or disable R services (SQL 2016 onwards).</summary>
        bool? AdditionalFeatureServerConfigurationIsRServicesEnabled { get; set; }
        /// <summary>SQL best practices Assessment Settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettings AssessmentSetting { get; set; }
        /// <summary>Enable or disable SQL best practices Assessment feature on SQL virtual machine.</summary>
        bool? AssessmentSettingEnable { get; set; }
        /// <summary>Run SQL best practices Assessment immediately on SQL virtual machine.</summary>
        bool? AssessmentSettingRunImmediately { get; set; }
        /// <summary>Schedule for SQL best practices Assessment.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISchedule AssessmentSettingSchedule { get; set; }
        /// <summary>Auto backup settings for SQL Server.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettings AutoBackupSetting { get; set; }
        /// <summary>Backup schedule type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.BackupScheduleType? AutoBackupSettingBackupScheduleType { get; set; }
        /// <summary>Include or exclude system databases from auto backup.</summary>
        bool? AutoBackupSettingBackupSystemDb { get; set; }
        /// <summary>Days of the week for the backups when FullBackupFrequency is set to Weekly.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AutoBackupDaysOfWeek[] AutoBackupSettingDaysOfWeek { get; set; }
        /// <summary>Enable or disable autobackup on SQL virtual machine.</summary>
        bool? AutoBackupSettingEnable { get; set; }
        /// <summary>Enable or disable encryption for backup on SQL virtual machine.</summary>
        bool? AutoBackupSettingEnableEncryption { get; set; }
        /// <summary>
        /// Frequency of full backups. In both cases, full backups begin during the next scheduled time window.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.FullBackupFrequencyType? AutoBackupSettingFullBackupFrequency { get; set; }
        /// <summary>Start time of a given day during which full backups can take place. 0-23 hours.</summary>
        int? AutoBackupSettingFullBackupStartTime { get; set; }
        /// <summary>
        /// Duration of the time window of a given day during which full backups can take place. 1-23 hours.
        /// </summary>
        int? AutoBackupSettingFullBackupWindowHour { get; set; }
        /// <summary>Frequency of log backups. 5-60 minutes.</summary>
        int? AutoBackupSettingLogBackupFrequency { get; set; }
        /// <summary>Password for encryption on backup.</summary>
        System.Security.SecureString AutoBackupSettingPassword { get; set; }
        /// <summary>Retention period of backup: 1-90 days.</summary>
        int? AutoBackupSettingRetentionPeriod { get; set; }
        /// <summary>Storage account key where backup will be taken to.</summary>
        string AutoBackupSettingStorageAccessKey { get; set; }
        /// <summary>Storage account url where backup will be taken to.</summary>
        string AutoBackupSettingStorageAccountUrl { get; set; }
        /// <summary>Storage container name where backup will be taken to.</summary>
        string AutoBackupSettingStorageContainerName { get; set; }
        /// <summary>
        /// Auto patching settings for applying critical security updates to SQL virtual machine.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoPatchingSettings AutoPatchingSetting { get; set; }
        /// <summary>Day of week to apply the patch on.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DayOfWeek? AutoPatchingSettingDayOfWeek { get; set; }
        /// <summary>Enable or disable autopatching on SQL virtual machine.</summary>
        bool? AutoPatchingSettingEnable { get; set; }
        /// <summary>Duration of patching.</summary>
        int? AutoPatchingSettingMaintenanceWindowDuration { get; set; }
        /// <summary>Hour of the day when patching is initiated. Local VM time.</summary>
        int? AutoPatchingSettingMaintenanceWindowStartingHour { get; set; }
        /// <summary>
        /// The client Id of the Managed Identity to query Microsoft Graph API. An empty string must be used for the system assigned
        /// Managed Identity
        /// </summary>
        string AzureAdAuthenticationSettingClientId { get; set; }
        /// <summary>Enable automatic upgrade of Sql IaaS extension Agent.</summary>
        bool? EnableAutomaticUpgrade { get; set; }
        /// <summary>
        /// ARM resource id of the SQL virtual machine group this SQL virtual machine is or will be part of.
        /// </summary>
        string GroupResourceId { get; set; }
        /// <summary>Azure Active Directory identity of the server.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IResourceIdentity Identity { get; set; }
        /// <summary>The Azure Active Directory principal id.</summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>The Azure Active Directory tenant id.</summary>
        string IdentityTenantId { get; set; }
        /// <summary>
        /// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory
        /// principal for the resource.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.IdentityType? IdentityType { get; set; }
        /// <summary>Key vault credential settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IKeyVaultCredentialSettings KeyVaultCredentialSetting { get; set; }
        /// <summary>Azure Key Vault url.</summary>
        string KeyVaultCredentialSettingAzureKeyVaultUrl { get; set; }
        /// <summary>Credential name.</summary>
        string KeyVaultCredentialSettingCredentialName { get; set; }
        /// <summary>Enable or disable key vault credential setting.</summary>
        bool? KeyVaultCredentialSettingEnable { get; set; }
        /// <summary>Service principal name to access key vault.</summary>
        string KeyVaultCredentialSettingServicePrincipalName { get; set; }
        /// <summary>Service principal name secret to access key vault.</summary>
        string KeyVaultCredentialSettingServicePrincipalSecret { get; set; }
        /// <summary>SQL IaaS Agent least privilege mode.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.LeastPrivilegeMode? LeastPrivilegeMode { get; set; }
        /// <summary>Resource properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineProperties Property { get; set; }
        /// <summary>Provisioning state to track the async operation status.</summary>
        string ProvisioningState { get; set; }
        /// <summary>Day of the week to run assessment.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AssessmentDayOfWeek? ScheduleDayOfWeek { get; set; }
        /// <summary>Enable or disable assessment schedule on SQL virtual machine.</summary>
        bool? ScheduleEnable { get; set; }
        /// <summary>
        /// Occurrence of the DayOfWeek day within a month to schedule assessment. Takes values: 1,2,3,4 and -1. Use -1 for last DayOfWeek
        /// day of the month
        /// </summary>
        int? ScheduleMonthlyOccurrence { get; set; }
        /// <summary>Time of the day in HH:mm format. Eg. 17:30</summary>
        string ScheduleStartTime { get; set; }
        /// <summary>Number of weeks to schedule between 2 assessment runs. Takes value from 1-6</summary>
        int? ScheduleWeeklyInterval { get; set; }
        /// <summary>Additional SQL feature settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAdditionalFeaturesServerConfigurations ServerConfigurationManagementSettingAdditionalFeaturesServerConfiguration { get; set; }
        /// <summary>Azure AD authentication Settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAadAuthenticationSettings ServerConfigurationManagementSettingAzureAdAuthenticationSetting { get; set; }
        /// <summary>SQL connectivity type settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlConnectivityUpdateSettings ServerConfigurationManagementSettingSqlConnectivityUpdateSetting { get; set; }
        /// <summary>SQL Instance settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlInstanceSettings ServerConfigurationManagementSettingSqlInstanceSetting { get; set; }
        /// <summary>SQL storage update settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageUpdateSettings ServerConfigurationManagementSettingSqlStorageUpdateSetting { get; set; }
        /// <summary>SQL workload type settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlWorkloadTypeUpdateSettings ServerConfigurationManagementSettingSqlWorkloadTypeUpdateSetting { get; set; }
        /// <summary>SQL Server configuration management settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettings ServerConfigurationsManagementSetting { get; set; }
        /// <summary>SQL Server connectivity option.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.ConnectivityType? SqlConnectivityUpdateSettingConnectivityType { get; set; }
        /// <summary>SQL Server port.</summary>
        int? SqlConnectivityUpdateSettingPort { get; set; }
        /// <summary>SQL Server sysadmin login password.</summary>
        System.Security.SecureString SqlConnectivityUpdateSettingSqlAuthUpdatePassword { get; set; }
        /// <summary>SQL Server sysadmin login to create.</summary>
        string SqlConnectivityUpdateSettingSqlAuthUpdateUserName { get; set; }
        /// <summary>SQL Server default file path</summary>
        string SqlDataSettingDefaultFilePath { get; set; }
        /// <summary>Logical Unit Numbers for the disks.</summary>
        int[] SqlDataSettingLun { get; set; }
        /// <summary>SQL image offer. Examples include SQL2016-WS2016, SQL2017-WS2016.</summary>
        string SqlImageOffer { get; set; }
        /// <summary>SQL Server edition type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlImageSku? SqlImageSku { get; set; }
        /// <summary>SQL Server Collation.</summary>
        string SqlInstanceSettingCollation { get; set; }
        /// <summary>SQL Server IFI.</summary>
        bool? SqlInstanceSettingIsIfiEnabled { get; set; }
        /// <summary>SQL Server LPIM.</summary>
        bool? SqlInstanceSettingIsLpimEnabled { get; set; }
        /// <summary>SQL Server Optimize for Adhoc workloads.</summary>
        bool? SqlInstanceSettingIsOptimizeForAdHocWorkloadsEnabled { get; set; }
        /// <summary>SQL Server MAXDOP.</summary>
        int? SqlInstanceSettingMaxDop { get; set; }
        /// <summary>SQL Server maximum memory.</summary>
        int? SqlInstanceSettingMaxServerMemoryMb { get; set; }
        /// <summary>SQL Server minimum memory.</summary>
        int? SqlInstanceSettingMinServerMemoryMb { get; set; }
        /// <summary>SQL Server default file path</summary>
        string SqlLogSettingDefaultFilePath { get; set; }
        /// <summary>Logical Unit Numbers for the disks.</summary>
        int[] SqlLogSettingLun { get; set; }
        /// <summary>SQL Server Management type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlManagementMode? SqlManagement { get; set; }
        /// <summary>SQL Server license type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlServerLicenseType? SqlServerLicenseType { get; set; }
        /// <summary>Disk configuration to apply to SQL Server.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType? SqlStorageUpdateSettingDiskConfigurationType { get; set; }
        /// <summary>Virtual machine disk count.</summary>
        int? SqlStorageUpdateSettingDiskCount { get; set; }
        /// <summary>Device id of the first disk to be updated.</summary>
        int? SqlStorageUpdateSettingStartingDeviceId { get; set; }
        /// <summary>SQL Server tempdb data file count</summary>
        int? SqlTempDbSettingDataFileCount { get; set; }
        /// <summary>SQL Server tempdb data file size</summary>
        int? SqlTempDbSettingDataFileSize { get; set; }
        /// <summary>SQL Server tempdb data file autoGrowth size</summary>
        int? SqlTempDbSettingDataGrowth { get; set; }
        /// <summary>SQL Server default file path</summary>
        string SqlTempDbSettingDefaultFilePath { get; set; }
        /// <summary>SQL Server tempdb log file size</summary>
        int? SqlTempDbSettingLogFileSize { get; set; }
        /// <summary>SQL Server tempdb log file autoGrowth size</summary>
        int? SqlTempDbSettingLogGrowth { get; set; }
        /// <summary>Logical Unit Numbers for the disks.</summary>
        int[] SqlTempDbSettingLun { get; set; }
        /// <summary>SQL Server tempdb persist folder choice</summary>
        bool? SqlTempDbSettingPersistFolder { get; set; }
        /// <summary>SQL Server tempdb persist folder location</summary>
        string SqlTempDbSettingPersistFolderPath { get; set; }
        /// <summary>SQL Server workload type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlWorkloadType? SqlWorkloadTypeUpdateSettingSqlWorkloadType { get; set; }
        /// <summary>Storage Configuration Settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettings StorageConfigurationSetting { get; set; }
        /// <summary>Disk configuration to apply to SQL Server.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType? StorageConfigurationSettingDiskConfigurationType { get; set; }
        /// <summary>SQL Server Data Storage Settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettings StorageConfigurationSettingSqlDataSetting { get; set; }
        /// <summary>SQL Server Log Storage Settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettings StorageConfigurationSettingSqlLogSetting { get; set; }
        /// <summary>SQL Server SystemDb Storage on DataPool if true.</summary>
        bool? StorageConfigurationSettingSqlSystemDbOnDataDisk { get; set; }
        /// <summary>SQL Server TempDb Storage Settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettings StorageConfigurationSettingSqlTempDbSetting { get; set; }
        /// <summary>Storage workload type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.StorageWorkloadType? StorageConfigurationSettingStorageWorkloadType { get; set; }
        /// <summary>Metadata pertaining to creation and last modification of the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20.ISystemData SystemData { get; set; }
        /// <summary>The timestamp of resource creation (UTC).</summary>
        global::System.DateTime? SystemDataCreatedAt { get; set; }
        /// <summary>The identity that created the resource.</summary>
        string SystemDataCreatedBy { get; set; }
        /// <summary>The type of identity that created the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.CreatedByType? SystemDataCreatedByType { get; set; }
        /// <summary>The timestamp of resource last modification (UTC)</summary>
        global::System.DateTime? SystemDataLastModifiedAt { get; set; }
        /// <summary>The identity that last modified the resource.</summary>
        string SystemDataLastModifiedBy { get; set; }
        /// <summary>The type of identity that last modified the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.CreatedByType? SystemDataLastModifiedByType { get; set; }
        /// <summary>Troubleshooting status</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatus TroubleshootingStatus { get; set; }
        /// <summary>End time in UTC timezone.</summary>
        global::System.DateTime? TroubleshootingStatusEndTimeUtc { get; set; }
        /// <summary>Last troubleshooting trigger time in UTC timezone</summary>
        global::System.DateTime? TroubleshootingStatusLastTriggerTimeUtc { get; set; }
        /// <summary>Troubleshooting properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingAdditionalProperties TroubleshootingStatusProperty { get; set; }
        /// <summary>Root cause of the issue</summary>
        string TroubleshootingStatusRootCause { get; set; }
        /// <summary>Start time in UTC timezone.</summary>
        global::System.DateTime? TroubleshootingStatusStartTimeUtc { get; set; }
        /// <summary>SQL VM troubleshooting scenario.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.TroubleshootingScenario? TroubleshootingStatusTroubleshootingScenario { get; set; }
        /// <summary>The unhealthy replica information</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IUnhealthyReplicaInfo UnhealthyReplicaInfo { get; set; }
        /// <summary>The name of the availability group</summary>
        string UnhealthyReplicaInfoAvailabilityGroupName { get; set; }
        /// <summary>
        /// ARM Resource id of underlying virtual machine created from SQL marketplace image.
        /// </summary>
        string VirtualMachineResourceId { get; set; }
        /// <summary>
        /// Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IWsfcDomainCredentials WsfcDomainCredentials { get; set; }
        /// <summary>Cluster bootstrap account password.</summary>
        System.Security.SecureString WsfcDomainCredentialsClusterBootstrapAccountPassword { get; set; }
        /// <summary>Cluster operator account password.</summary>
        System.Security.SecureString WsfcDomainCredentialsClusterOperatorAccountPassword { get; set; }
        /// <summary>SQL service account password.</summary>
        System.Security.SecureString WsfcDomainCredentialsSqlServiceAccountPassword { get; set; }
        /// <summary>
        /// Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
        /// </summary>
        string WsfcStaticIP { get; set; }

    }
}