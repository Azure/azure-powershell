// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Extensions;

    /// <summary>Storage Configurations for SQL Data, Log and TempDb.</summary>
    public partial class StorageConfigurationSettings :
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettings,
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal
    {

        /// <summary>Backing field for <see cref="DiskConfigurationType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType? _diskConfigurationType;

        /// <summary>Disk configuration to apply to SQL Server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType? DiskConfigurationType { get => this._diskConfigurationType; set => this._diskConfigurationType = value; }

        /// <summary>Internal Acessors for SqlDataSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal.SqlDataSetting { get => (this._sqlDataSetting = this._sqlDataSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.SqlStorageSettings()); set { {_sqlDataSetting = value;} } }

        /// <summary>Internal Acessors for SqlLogSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal.SqlLogSetting { get => (this._sqlLogSetting = this._sqlLogSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.SqlStorageSettings()); set { {_sqlLogSetting = value;} } }

        /// <summary>Internal Acessors for SqlTempDbSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal.SqlTempDbSetting { get => (this._sqlTempDbSetting = this._sqlTempDbSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.SqlTempDbSettings()); set { {_sqlTempDbSetting = value;} } }

        /// <summary>Backing field for <see cref="SqlDataSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettings _sqlDataSetting;

        /// <summary>SQL Server Data Storage Settings.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettings SqlDataSetting { get => (this._sqlDataSetting = this._sqlDataSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.SqlStorageSettings()); set => this._sqlDataSetting = value; }

        /// <summary>SQL Server default file path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string SqlDataSettingDefaultFilePath { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettingsInternal)SqlDataSetting).DefaultFilePath; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettingsInternal)SqlDataSetting).DefaultFilePath = value ?? null; }

        /// <summary>Logical Unit Numbers for the disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int[] SqlDataSettingLun { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettingsInternal)SqlDataSetting).Lun; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettingsInternal)SqlDataSetting).Lun = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="SqlLogSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettings _sqlLogSetting;

        /// <summary>SQL Server Log Storage Settings.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettings SqlLogSetting { get => (this._sqlLogSetting = this._sqlLogSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.SqlStorageSettings()); set => this._sqlLogSetting = value; }

        /// <summary>SQL Server default file path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string SqlLogSettingDefaultFilePath { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettingsInternal)SqlLogSetting).DefaultFilePath; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettingsInternal)SqlLogSetting).DefaultFilePath = value ?? null; }

        /// <summary>Logical Unit Numbers for the disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int[] SqlLogSettingLun { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettingsInternal)SqlLogSetting).Lun; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettingsInternal)SqlLogSetting).Lun = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="SqlSystemDbOnDataDisk" /> property.</summary>
        private bool? _sqlSystemDbOnDataDisk;

        /// <summary>SQL Server SystemDb Storage on DataPool if true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        public bool? SqlSystemDbOnDataDisk { get => this._sqlSystemDbOnDataDisk; set => this._sqlSystemDbOnDataDisk = value; }

        /// <summary>Backing field for <see cref="SqlTempDbSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettings _sqlTempDbSetting;

        /// <summary>SQL Server TempDb Storage Settings.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettings SqlTempDbSetting { get => (this._sqlTempDbSetting = this._sqlTempDbSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.SqlTempDbSettings()); set => this._sqlTempDbSetting = value; }

        /// <summary>SQL Server tempdb data file count</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlTempDbSettingDataFileCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettingsInternal)SqlTempDbSetting).DataFileCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettingsInternal)SqlTempDbSetting).DataFileCount = value ?? default(int); }

        /// <summary>SQL Server tempdb data file size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlTempDbSettingDataFileSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettingsInternal)SqlTempDbSetting).DataFileSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettingsInternal)SqlTempDbSetting).DataFileSize = value ?? default(int); }

        /// <summary>SQL Server tempdb data file autoGrowth size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlTempDbSettingDataGrowth { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettingsInternal)SqlTempDbSetting).DataGrowth; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettingsInternal)SqlTempDbSetting).DataGrowth = value ?? default(int); }

        /// <summary>SQL Server default file path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string SqlTempDbSettingDefaultFilePath { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettingsInternal)SqlTempDbSetting).DefaultFilePath; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettingsInternal)SqlTempDbSetting).DefaultFilePath = value ?? null; }

        /// <summary>SQL Server tempdb log file size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlTempDbSettingLogFileSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettingsInternal)SqlTempDbSetting).LogFileSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettingsInternal)SqlTempDbSetting).LogFileSize = value ?? default(int); }

        /// <summary>SQL Server tempdb log file autoGrowth size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlTempDbSettingLogGrowth { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettingsInternal)SqlTempDbSetting).LogGrowth; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettingsInternal)SqlTempDbSetting).LogGrowth = value ?? default(int); }

        /// <summary>Logical Unit Numbers for the disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int[] SqlTempDbSettingLun { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettingsInternal)SqlTempDbSetting).Lun; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettingsInternal)SqlTempDbSetting).Lun = value ?? null /* arrayOf */; }

        /// <summary>SQL Server tempdb persist folder choice</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? SqlTempDbSettingPersistFolder { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettingsInternal)SqlTempDbSetting).PersistFolder; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettingsInternal)SqlTempDbSetting).PersistFolder = value ?? default(bool); }

        /// <summary>SQL Server tempdb persist folder location</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string SqlTempDbSettingPersistFolderPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettingsInternal)SqlTempDbSetting).PersistFolderPath; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettingsInternal)SqlTempDbSetting).PersistFolderPath = value ?? null; }

        /// <summary>Backing field for <see cref="StorageWorkloadType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.StorageWorkloadType? _storageWorkloadType;

        /// <summary>Storage workload type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.StorageWorkloadType? StorageWorkloadType { get => this._storageWorkloadType; set => this._storageWorkloadType = value; }

        /// <summary>Creates an new <see cref="StorageConfigurationSettings" /> instance.</summary>
        public StorageConfigurationSettings()
        {

        }
    }
    /// Storage Configurations for SQL Data, Log and TempDb.
    public partial interface IStorageConfigurationSettings :
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.IJsonSerializable
    {
        /// <summary>Disk configuration to apply to SQL Server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Disk configuration to apply to SQL Server.",
        SerializedName = @"diskConfigurationType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType? DiskConfigurationType { get; set; }
        /// <summary>SQL Server default file path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server default file path",
        SerializedName = @"defaultFilePath",
        PossibleTypes = new [] { typeof(string) })]
        string SqlDataSettingDefaultFilePath { get; set; }
        /// <summary>Logical Unit Numbers for the disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Logical Unit Numbers for the disks.",
        SerializedName = @"luns",
        PossibleTypes = new [] { typeof(int) })]
        int[] SqlDataSettingLun { get; set; }
        /// <summary>SQL Server default file path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server default file path",
        SerializedName = @"defaultFilePath",
        PossibleTypes = new [] { typeof(string) })]
        string SqlLogSettingDefaultFilePath { get; set; }
        /// <summary>Logical Unit Numbers for the disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Logical Unit Numbers for the disks.",
        SerializedName = @"luns",
        PossibleTypes = new [] { typeof(int) })]
        int[] SqlLogSettingLun { get; set; }
        /// <summary>SQL Server SystemDb Storage on DataPool if true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server SystemDb Storage on DataPool if true.",
        SerializedName = @"sqlSystemDbOnDataDisk",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SqlSystemDbOnDataDisk { get; set; }
        /// <summary>SQL Server tempdb data file count</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb data file count",
        SerializedName = @"dataFileCount",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlTempDbSettingDataFileCount { get; set; }
        /// <summary>SQL Server tempdb data file size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb data file size",
        SerializedName = @"dataFileSize",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlTempDbSettingDataFileSize { get; set; }
        /// <summary>SQL Server tempdb data file autoGrowth size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb data file autoGrowth size",
        SerializedName = @"dataGrowth",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlTempDbSettingDataGrowth { get; set; }
        /// <summary>SQL Server default file path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server default file path",
        SerializedName = @"defaultFilePath",
        PossibleTypes = new [] { typeof(string) })]
        string SqlTempDbSettingDefaultFilePath { get; set; }
        /// <summary>SQL Server tempdb log file size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb log file size",
        SerializedName = @"logFileSize",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlTempDbSettingLogFileSize { get; set; }
        /// <summary>SQL Server tempdb log file autoGrowth size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb log file autoGrowth size",
        SerializedName = @"logGrowth",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlTempDbSettingLogGrowth { get; set; }
        /// <summary>Logical Unit Numbers for the disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Logical Unit Numbers for the disks.",
        SerializedName = @"luns",
        PossibleTypes = new [] { typeof(int) })]
        int[] SqlTempDbSettingLun { get; set; }
        /// <summary>SQL Server tempdb persist folder choice</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb persist folder choice",
        SerializedName = @"persistFolder",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SqlTempDbSettingPersistFolder { get; set; }
        /// <summary>SQL Server tempdb persist folder location</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb persist folder location",
        SerializedName = @"persistFolderPath",
        PossibleTypes = new [] { typeof(string) })]
        string SqlTempDbSettingPersistFolderPath { get; set; }
        /// <summary>Storage workload type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage workload type.",
        SerializedName = @"storageWorkloadType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.StorageWorkloadType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.StorageWorkloadType? StorageWorkloadType { get; set; }

    }
    /// Storage Configurations for SQL Data, Log and TempDb.
    internal partial interface IStorageConfigurationSettingsInternal

    {
        /// <summary>Disk configuration to apply to SQL Server.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType? DiskConfigurationType { get; set; }
        /// <summary>SQL Server Data Storage Settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettings SqlDataSetting { get; set; }
        /// <summary>SQL Server default file path</summary>
        string SqlDataSettingDefaultFilePath { get; set; }
        /// <summary>Logical Unit Numbers for the disks.</summary>
        int[] SqlDataSettingLun { get; set; }
        /// <summary>SQL Server Log Storage Settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettings SqlLogSetting { get; set; }
        /// <summary>SQL Server default file path</summary>
        string SqlLogSettingDefaultFilePath { get; set; }
        /// <summary>Logical Unit Numbers for the disks.</summary>
        int[] SqlLogSettingLun { get; set; }
        /// <summary>SQL Server SystemDb Storage on DataPool if true.</summary>
        bool? SqlSystemDbOnDataDisk { get; set; }
        /// <summary>SQL Server TempDb Storage Settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettings SqlTempDbSetting { get; set; }
        /// <summary>SQL Server tempdb data file count</summary>
        int? SqlTempDbSettingDataFileCount { get; set; }
        /// <summary>SQL Server tempdb data file size</summary>
        int? SqlTempDbSettingDataFileSize { get; set; }
        /// <summary>SQL Server tempdb data file autoGrowth size</summary>
        int? SqlTempDbSettingDataGrowth { get; set; }
        /// <summary>SQL Server default file path</summary>
        string SqlTempDbSettingDefaultFilePath { get; set; }
        /// <summary>SQL Server tempdb log file size</summary>
        int? SqlTempDbSettingLogFileSize { get; set; }
        /// <summary>SQL Server tempdb log file autoGrowth size</summary>
        int? SqlTempDbSettingLogGrowth { get; set; }
        /// <summary>Logical Unit Numbers for the disks.</summary>
        int[] SqlTempDbSettingLun { get; set; }
        /// <summary>SQL Server tempdb persist folder choice</summary>
        bool? SqlTempDbSettingPersistFolder { get; set; }
        /// <summary>SQL Server tempdb persist folder location</summary>
        string SqlTempDbSettingPersistFolderPath { get; set; }
        /// <summary>Storage workload type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.StorageWorkloadType? StorageWorkloadType { get; set; }

    }
}