// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    /// <summary>
    /// The consistency policy for the Cosmos DB database account.
    /// </summary>
    public partial class ConsistencyPolicy
    {
        /// <summary>
        /// Initializes a new instance of the ConsistencyPolicy class.
        /// </summary>
        public ConsistencyPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConsistencyPolicy class.
        /// </summary>

        /// <param name="defaultConsistencyLevel">The default consistency level and configuration settings of the Cosmos DB
        /// account.
        /// Possible values include: 'Eventual', 'Session', 'BoundedStaleness',
        /// 'Strong', 'ConsistentPrefix'</param>

        /// <param name="maxStalenessPrefix">When used with the Bounded Staleness consistency level, this value
        /// represents the number of stale requests tolerated. Accepted range for this
        /// value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set
        /// to &#39;BoundedStaleness&#39;.
        /// </param>

        /// <param name="maxIntervalInSeconds">When used with the Bounded Staleness consistency level, this value
        /// represents the time amount of staleness (in seconds) tolerated. Accepted
        /// range for this value is 5 - 86400. Required when defaultConsistencyPolicy
        /// is set to &#39;BoundedStaleness&#39;.
        /// </param>
        public ConsistencyPolicy(DefaultConsistencyLevel defaultConsistencyLevel, long? maxStalenessPrefix = default(long?), int? maxIntervalInSeconds = default(int?))

        {
            this.DefaultConsistencyLevel = defaultConsistencyLevel;
            this.MaxStalenessPrefix = maxStalenessPrefix;
            this.MaxIntervalInSeconds = maxIntervalInSeconds;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the default consistency level and configuration settings of
        /// the Cosmos DB account. Possible values include: &#39;Eventual&#39;, &#39;Session&#39;, &#39;BoundedStaleness&#39;, &#39;Strong&#39;, &#39;ConsistentPrefix&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultConsistencyLevel")]
        public DefaultConsistencyLevel DefaultConsistencyLevel {get; set; }

        /// <summary>
        /// Gets or sets when used with the Bounded Staleness consistency level, this
        /// value represents the number of stale requests tolerated. Accepted range for
        /// this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is
        /// set to &#39;BoundedStaleness&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxStalenessPrefix")]
        public long? MaxStalenessPrefix {get; set; }

        /// <summary>
        /// Gets or sets when used with the Bounded Staleness consistency level, this
        /// value represents the time amount of staleness (in seconds) tolerated.
        /// Accepted range for this value is 5 - 86400. Required when
        /// defaultConsistencyPolicy is set to &#39;BoundedStaleness&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxIntervalInSeconds")]
        public int? MaxIntervalInSeconds {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.MaxStalenessPrefix != null)
            {
                if (this.MaxStalenessPrefix > 2147483647)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "MaxStalenessPrefix", 2147483647);
                }
                if (this.MaxStalenessPrefix < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MaxStalenessPrefix", 1);
                }
            }
            if (this.MaxIntervalInSeconds != null)
            {
                if (this.MaxIntervalInSeconds > 86400)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "MaxIntervalInSeconds", 86400);
                }
                if (this.MaxIntervalInSeconds < 5)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MaxIntervalInSeconds", 5);
                }
            }
        }
    }
}