// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    /// <summary>
    /// Cosmos DB indexing policy
    /// </summary>
    public partial class IndexingPolicy
    {
        /// <summary>
        /// Initializes a new instance of the IndexingPolicy class.
        /// </summary>
        public IndexingPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IndexingPolicy class.
        /// </summary>

        /// <param name="automatic">Indicates if the indexing policy is automatic
        /// </param>

        /// <param name="indexingMode">Indicates the indexing mode.
        /// Possible values include: 'consistent', 'lazy', 'none'</param>

        /// <param name="includedPaths">List of paths to include in the indexing
        /// </param>

        /// <param name="excludedPaths">List of paths to exclude from indexing
        /// </param>

        /// <param name="compositeIndexes">List of composite path list
        /// </param>

        /// <param name="spatialIndexes">List of spatial specifics
        /// </param>
        public IndexingPolicy(bool? automatic = default(bool?), string indexingMode = default(string), System.Collections.Generic.IList<IncludedPath> includedPaths = default(System.Collections.Generic.IList<IncludedPath>), System.Collections.Generic.IList<ExcludedPath> excludedPaths = default(System.Collections.Generic.IList<ExcludedPath>), System.Collections.Generic.IList<System.Collections.Generic.IList<CompositePath>> compositeIndexes = default(System.Collections.Generic.IList<System.Collections.Generic.IList<CompositePath>>), System.Collections.Generic.IList<SpatialSpec> spatialIndexes = default(System.Collections.Generic.IList<SpatialSpec>))

        {
            this.Automatic = automatic;
            this.IndexingMode = indexingMode;
            this.IncludedPaths = includedPaths;
            this.ExcludedPaths = excludedPaths;
            this.CompositeIndexes = compositeIndexes;
            this.SpatialIndexes = spatialIndexes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets indicates if the indexing policy is automatic
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "automatic")]
        public bool? Automatic {get; set; }

        /// <summary>
        /// Gets or sets indicates the indexing mode. Possible values include: &#39;consistent&#39;, &#39;lazy&#39;, &#39;none&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "indexingMode")]
        public string IndexingMode {get; set; }

        /// <summary>
        /// Gets or sets list of paths to include in the indexing
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "includedPaths")]
        public System.Collections.Generic.IList<IncludedPath> IncludedPaths {get; set; }

        /// <summary>
        /// Gets or sets list of paths to exclude from indexing
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "excludedPaths")]
        public System.Collections.Generic.IList<ExcludedPath> ExcludedPaths {get; set; }

        /// <summary>
        /// Gets or sets list of composite path list
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "compositeIndexes")]
        public System.Collections.Generic.IList<System.Collections.Generic.IList<CompositePath>> CompositeIndexes {get; set; }

        /// <summary>
        /// Gets or sets list of spatial specifics
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "spatialIndexes")]
        public System.Collections.Generic.IList<SpatialSpec> SpatialIndexes {get; set; }
    }
}