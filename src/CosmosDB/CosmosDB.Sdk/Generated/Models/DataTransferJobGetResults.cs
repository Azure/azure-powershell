// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    /// <summary>
    /// A Cosmos DB Data Transfer Job
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class DataTransferJobGetResults : ARMProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the DataTransferJobGetResults class.
        /// </summary>
        public DataTransferJobGetResults()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataTransferJobGetResults class.
        /// </summary>

        /// <param name="id">The unique resource identifier of the database account.
        /// </param>

        /// <param name="name">The name of the database account.
        /// </param>

        /// <param name="type">The type of Azure resource.
        /// </param>

        /// <param name="jobName">Job Name
        /// </param>

        /// <param name="source">Source DataStore details
        /// </param>

        /// <param name="destination">Destination DataStore details
        /// </param>

        /// <param name="status">Job Status
        /// </param>

        /// <param name="processedCount">Processed Count.
        /// </param>

        /// <param name="totalCount">Total Count.
        /// </param>

        /// <param name="lastUpdatedUtcTime">Last Updated Time (ISO-8601 format).
        /// </param>

        /// <param name="workerCount">Worker count
        /// </param>

        /// <param name="error">Error response for Faulted job
        /// </param>
        public DataTransferJobGetResults(string id = default(string), string name = default(string), string type = default(string), string jobName = default(string), DataTransferDataSourceSink source = default(DataTransferDataSourceSink), DataTransferDataSourceSink destination = default(DataTransferDataSourceSink), string status = default(string), long? processedCount = default(long?), long? totalCount = default(long?), System.DateTime? lastUpdatedUtcTime = default(System.DateTime?), int? workerCount = default(int?), ErrorResponse error = default(ErrorResponse))

        : base(id, name, type)
        {
            this.JobName = jobName;
            this.Source = source;
            this.Destination = destination;
            this.Status = status;
            this.ProcessedCount = processedCount;
            this.TotalCount = totalCount;
            this.LastUpdatedUtcTime = lastUpdatedUtcTime;
            this.WorkerCount = workerCount;
            this.Error = error;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets job Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.jobName")]
        public string JobName {get; private set; }

        /// <summary>
        /// Gets or sets source DataStore details
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.source")]
        public DataTransferDataSourceSink Source {get; set; }

        /// <summary>
        /// Gets or sets destination DataStore details
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.destination")]
        public DataTransferDataSourceSink Destination {get; set; }

        /// <summary>
        /// Gets job Status
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public string Status {get; private set; }

        /// <summary>
        /// Gets processed Count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.processedCount")]
        public long? ProcessedCount {get; private set; }

        /// <summary>
        /// Gets total Count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.totalCount")]
        public long? TotalCount {get; private set; }

        /// <summary>
        /// Gets last Updated Time (ISO-8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.lastUpdatedUtcTime")]
        public System.DateTime? LastUpdatedUtcTime {get; private set; }

        /// <summary>
        /// Gets or sets worker count
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.workerCount")]
        public int? WorkerCount {get; set; }

        /// <summary>
        /// Gets error response for Faulted job
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.error")]
        public ErrorResponse Error {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {




            if (this.WorkerCount != null)
            {
                if (this.WorkerCount < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "WorkerCount", 0);
                }
            }

        }
    }
}