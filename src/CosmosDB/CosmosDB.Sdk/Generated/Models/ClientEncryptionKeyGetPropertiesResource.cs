// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    public partial class ClientEncryptionKeyGetPropertiesResource
    {
        /// <summary>
        /// Initializes a new instance of the ClientEncryptionKeyGetPropertiesResource class.
        /// </summary>
        public ClientEncryptionKeyGetPropertiesResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClientEncryptionKeyGetPropertiesResource class.
        /// </summary>

        /// <param name="id">Name of the ClientEncryptionKey
        /// </param>

        /// <param name="encryptionAlgorithm">Encryption algorithm that will be used along with this client encryption
        /// key to encrypt/decrypt data.
        /// </param>

        /// <param name="wrappedDataEncryptionKey">Wrapped (encrypted) form of the key represented as a byte array.
        /// </param>

        /// <param name="keyWrapMetadata">Metadata for the wrapping provider that can be used to unwrap the wrapped
        /// client encryption key.
        /// </param>

        /// <param name="rid">A system generated property. A unique identifier.
        /// </param>

        /// <param name="ts">A system generated property that denotes the last updated timestamp of the
        /// resource.
        /// </param>

        /// <param name="etag">A system generated property representing the resource etag required for
        /// optimistic concurrency control.
        /// </param>
        public ClientEncryptionKeyGetPropertiesResource(string id = default(string), string encryptionAlgorithm = default(string), byte[] wrappedDataEncryptionKey = default(byte[]), KeyWrapMetadata keyWrapMetadata = default(KeyWrapMetadata), string rid = default(string), double? ts = default(double?), string etag = default(string))

        {
            this.Id = id;
            this.EncryptionAlgorithm = encryptionAlgorithm;
            this.WrappedDataEncryptionKey = wrappedDataEncryptionKey;
            this.KeyWrapMetadata = keyWrapMetadata;
            this.Rid = rid;
            this.Ts = ts;
            this.Etag = etag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of the ClientEncryptionKey
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; set; }

        /// <summary>
        /// Gets or sets encryption algorithm that will be used along with this client
        /// encryption key to encrypt/decrypt data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptionAlgorithm")]
        public string EncryptionAlgorithm {get; set; }

        /// <summary>
        /// Gets or sets wrapped (encrypted) form of the key represented as a byte
        /// array.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "wrappedDataEncryptionKey")]
        public byte[] WrappedDataEncryptionKey {get; set; }

        /// <summary>
        /// Gets or sets metadata for the wrapping provider that can be used to unwrap
        /// the wrapped client encryption key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keyWrapMetadata")]
        public KeyWrapMetadata KeyWrapMetadata {get; set; }

        /// <summary>
        /// Gets a system generated property. A unique identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "_rid")]
        public string Rid {get; private set; }

        /// <summary>
        /// Gets a system generated property that denotes the last updated timestamp of
        /// the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "_ts")]
        public double? Ts {get; private set; }

        /// <summary>
        /// Gets a system generated property representing the resource etag required
        /// for optimistic concurrency control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "_etag")]
        public string Etag {get; private set; }
    }
}