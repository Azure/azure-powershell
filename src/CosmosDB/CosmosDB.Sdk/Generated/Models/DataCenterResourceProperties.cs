// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of a managed Cassandra data center.
    /// </summary>
    public partial class DataCenterResourceProperties
    {
        /// <summary>
        /// Initializes a new instance of the DataCenterResourceProperties class.
        /// </summary>
        public DataCenterResourceProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataCenterResourceProperties class.
        /// </summary>

        /// <param name="provisioningState">The status of the resource at the time the operation was called.
        /// Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded',
        /// 'Failed', 'Canceled'</param>

        /// <param name="dataCenterLocation">The region this data center should be created in.
        /// </param>

        /// <param name="delegatedSubnetId">Resource id of a subnet the nodes in this data center should have their
        /// network interfaces connected to. The subnet must be in the same region
        /// specified in &#39;dataCenterLocation&#39; and must be able to route to the subnet
        /// specified in the cluster&#39;s &#39;delegatedManagementSubnetId&#39; property. This
        /// resource id will be of the form &#39;/subscriptions/&lt;subscription
        /// id&gt;/resourceGroups/&lt;resource
        /// group&gt;/providers/Microsoft.Network/virtualNetworks/&lt;virtual
        /// network&gt;/subnets/&lt;subnet&gt;&#39;.
        /// </param>

        /// <param name="nodeCount">The number of nodes the data center should have. This is the desired
        /// number. After it is set, it may take some time for the data center to be
        /// scaled to match. To monitor the number of nodes and their status, use the
        /// fetchNodeStatus method on the cluster.
        /// </param>

        /// <param name="seedNodes">IP addresses for seed nodes in this data center. This is for reference.
        /// Generally you will want to use the seedNodes property on the cluster, which
        /// aggregates the seed nodes from all data centers in the cluster.
        /// </param>

        /// <param name="base64EncodedCassandraYamlFragment">A fragment of a cassandra.yaml configuration file to be included in the
        /// cassandra.yaml for all nodes in this data center. The fragment should be
        /// Base64 encoded, and only a subset of keys are allowed.
        /// </param>

        /// <param name="managedDiskCustomerKeyUri">Key uri to use for encryption of managed disks. Ensure the system assigned
        /// identity of the cluster has been assigned appropriate permissions(key
        /// get/wrap/unwrap permissions) on the key.
        /// </param>

        /// <param name="backupStorageCustomerKeyUri">Indicates the Key Uri of the customer key to use for encryption of the
        /// backup storage account.
        /// </param>

        /// <param name="sku">Virtual Machine SKU used for data centers. Default value is
        /// Standard_DS14_v2
        /// </param>

        /// <param name="diskSku">Disk SKU used for data centers. Default value is P30.
        /// </param>

        /// <param name="diskCapacity">Number of disks attached to each node. Default is 4.
        /// </param>

        /// <param name="availabilityZone">If the data center has Availability Zone support, apply it to the Virtual
        /// Machine ScaleSet that host the cassandra data center virtual machines.
        /// </param>

        /// <param name="authenticationMethodLdapProperties">Ldap authentication method properties. This feature is in preview.
        /// </param>

        /// <param name="deallocated">Whether the data center has been deallocated.
        /// </param>

        /// <param name="provisionError">Error related to resource provisioning.
        /// </param>
        public DataCenterResourceProperties(string provisioningState = default(string), string dataCenterLocation = default(string), string delegatedSubnetId = default(string), int? nodeCount = default(int?), System.Collections.Generic.IList<SeedNode> seedNodes = default(System.Collections.Generic.IList<SeedNode>), string base64EncodedCassandraYamlFragment = default(string), string managedDiskCustomerKeyUri = default(string), string backupStorageCustomerKeyUri = default(string), string sku = default(string), string diskSku = default(string), int? diskCapacity = default(int?), bool? availabilityZone = default(bool?), AuthenticationMethodLdapProperties authenticationMethodLdapProperties = default(AuthenticationMethodLdapProperties), bool? deallocated = default(bool?), CassandraError provisionError = default(CassandraError))

        {
            this.ProvisioningState = provisioningState;
            this.DataCenterLocation = dataCenterLocation;
            this.DelegatedSubnetId = delegatedSubnetId;
            this.NodeCount = nodeCount;
            this.SeedNodes = seedNodes;
            this.Base64EncodedCassandraYamlFragment = base64EncodedCassandraYamlFragment;
            this.ManagedDiskCustomerKeyUri = managedDiskCustomerKeyUri;
            this.BackupStorageCustomerKeyUri = backupStorageCustomerKeyUri;
            this.Sku = sku;
            this.DiskSku = diskSku;
            this.DiskCapacity = diskCapacity;
            this.AvailabilityZone = availabilityZone;
            this.AuthenticationMethodLdapProperties = authenticationMethodLdapProperties;
            this.Deallocated = deallocated;
            this.ProvisionError = provisionError;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the status of the resource at the time the operation was
        /// called. Possible values include: &#39;Creating&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; set; }

        /// <summary>
        /// Gets or sets the region this data center should be created in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataCenterLocation")]
        public string DataCenterLocation {get; set; }

        /// <summary>
        /// Gets or sets resource id of a subnet the nodes in this data center should
        /// have their network interfaces connected to. The subnet must be in the same
        /// region specified in &#39;dataCenterLocation&#39; and must be able to route to the
        /// subnet specified in the cluster&#39;s &#39;delegatedManagementSubnetId&#39; property.
        /// This resource id will be of the form &#39;/subscriptions/&lt;subscription
        /// id&gt;/resourceGroups/&lt;resource
        /// group&gt;/providers/Microsoft.Network/virtualNetworks/&lt;virtual
        /// network&gt;/subnets/&lt;subnet&gt;&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "delegatedSubnetId")]
        public string DelegatedSubnetId {get; set; }

        /// <summary>
        /// Gets or sets the number of nodes the data center should have. This is the
        /// desired number. After it is set, it may take some time for the data center
        /// to be scaled to match. To monitor the number of nodes and their status, use
        /// the fetchNodeStatus method on the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nodeCount")]
        public int? NodeCount {get; set; }

        /// <summary>
        /// Gets iP addresses for seed nodes in this data center. This is for
        /// reference. Generally you will want to use the seedNodes property on the
        /// cluster, which aggregates the seed nodes from all data centers in the
        /// cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "seedNodes")]
        public System.Collections.Generic.IList<SeedNode> SeedNodes {get; private set; }

        /// <summary>
        /// Gets or sets a fragment of a cassandra.yaml configuration file to be
        /// included in the cassandra.yaml for all nodes in this data center. The
        /// fragment should be Base64 encoded, and only a subset of keys are allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "base64EncodedCassandraYamlFragment")]
        public string Base64EncodedCassandraYamlFragment {get; set; }

        /// <summary>
        /// Gets or sets key uri to use for encryption of managed disks. Ensure the
        /// system assigned identity of the cluster has been assigned appropriate
        /// permissions(key get/wrap/unwrap permissions) on the key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "managedDiskCustomerKeyUri")]
        public string ManagedDiskCustomerKeyUri {get; set; }

        /// <summary>
        /// Gets or sets indicates the Key Uri of the customer key to use for
        /// encryption of the backup storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupStorageCustomerKeyUri")]
        public string BackupStorageCustomerKeyUri {get; set; }

        /// <summary>
        /// Gets or sets virtual Machine SKU used for data centers. Default value is
        /// Standard_DS14_v2
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sku")]
        public string Sku {get; set; }

        /// <summary>
        /// Gets or sets disk SKU used for data centers. Default value is P30.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskSku")]
        public string DiskSku {get; set; }

        /// <summary>
        /// Gets or sets number of disks attached to each node. Default is 4.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskCapacity")]
        public int? DiskCapacity {get; set; }

        /// <summary>
        /// Gets or sets if the data center has Availability Zone support, apply it to
        /// the Virtual Machine ScaleSet that host the cassandra data center virtual
        /// machines.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "availabilityZone")]
        public bool? AvailabilityZone {get; set; }

        /// <summary>
        /// Gets or sets ldap authentication method properties. This feature is in
        /// preview.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authenticationMethodLdapProperties")]
        public AuthenticationMethodLdapProperties AuthenticationMethodLdapProperties {get; set; }

        /// <summary>
        /// Gets or sets whether the data center has been deallocated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deallocated")]
        public bool? Deallocated {get; set; }

        /// <summary>
        /// Gets or sets error related to resource provisioning.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisionError")]
        public CassandraError ProvisionError {get; set; }
    }
}