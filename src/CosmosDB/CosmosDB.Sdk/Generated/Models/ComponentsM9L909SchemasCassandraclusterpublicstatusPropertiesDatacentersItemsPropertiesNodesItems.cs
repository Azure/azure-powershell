// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    public partial class ComponentsM9L909SchemasCassandraclusterpublicstatusPropertiesDatacentersItemsPropertiesNodesItems
    {
        /// <summary>
        /// Initializes a new instance of the ComponentsM9L909SchemasCassandraclusterpublicstatusPropertiesDatacentersItemsPropertiesNodesItems class.
        /// </summary>
        public ComponentsM9L909SchemasCassandraclusterpublicstatusPropertiesDatacentersItemsPropertiesNodesItems()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ComponentsM9L909SchemasCassandraclusterpublicstatusPropertiesDatacentersItemsPropertiesNodesItems class.
        /// </summary>

        /// <param name="address">The node&#39;s IP address.
        /// </param>

        /// <param name="state">The state of the node in Cassandra ring.
        /// Possible values include: 'Normal', 'Leaving', 'Joining', 'Moving',
        /// 'Stopped'</param>

        /// <param name="status">
        /// </param>

        /// <param name="cassandraProcessStatus">Cassandra service status on this node
        /// </param>

        /// <param name="load">The amount of file system data in the data directory (e.g., 47.66 kB),
        /// excluding all content in the snapshots subdirectories. Because all SSTable
        /// data files are included, any data that is not cleaned up (such as
        /// TTL-expired cells or tombstones) is counted.
        /// </param>

        /// <param name="tokens">List of tokens this node covers.
        /// </param>

        /// <param name="size">
        /// </param>

        /// <param name="hostId">The network ID of the node.
        /// </param>

        /// <param name="rack">The rack this node is part of.
        /// </param>

        /// <param name="timestamp">The timestamp when these statistics were captured.
        /// </param>

        /// <param name="diskUsedKb">The amount of disk used, in kB, of the directory /var/lib/cassandra.
        /// </param>

        /// <param name="diskFreeKb">The amount of disk free, in kB, of the directory /var/lib/cassandra.
        /// </param>

        /// <param name="memoryUsedKb">Used memory (calculated as total - free - buffers - cache), in kB.
        /// </param>

        /// <param name="memoryBuffersAndCachedKb">Memory used by kernel buffers (Buffers in /proc/meminfo) and page cache and
        /// slabs (Cached and SReclaimable in /proc/meminfo), in kB.
        /// </param>

        /// <param name="memoryFreeKb">Unused memory (MemFree and SwapFree in /proc/meminfo), in kB.
        /// </param>

        /// <param name="memoryTotalKb">Total installed memory (MemTotal and SwapTotal in /proc/meminfo), in kB.
        /// </param>

        /// <param name="cpuUsage">A float representing the current system-wide CPU utilization as a
        /// percentage.
        /// </param>
        public ComponentsM9L909SchemasCassandraclusterpublicstatusPropertiesDatacentersItemsPropertiesNodesItems(string address = default(string), string state = default(string), string status = default(string), string cassandraProcessStatus = default(string), string load = default(string), System.Collections.Generic.IList<string> tokens = default(System.Collections.Generic.IList<string>), int? size = default(int?), string hostId = default(string), string rack = default(string), string timestamp = default(string), long? diskUsedKb = default(long?), long? diskFreeKb = default(long?), long? memoryUsedKb = default(long?), long? memoryBuffersAndCachedKb = default(long?), long? memoryFreeKb = default(long?), long? memoryTotalKb = default(long?), double? cpuUsage = default(double?))

        {
            this.Address = address;
            this.State = state;
            this.Status = status;
            this.CassandraProcessStatus = cassandraProcessStatus;
            this.Load = load;
            this.Tokens = tokens;
            this.Size = size;
            this.HostId = hostId;
            this.Rack = rack;
            this.Timestamp = timestamp;
            this.DiskUsedKb = diskUsedKb;
            this.DiskFreeKb = diskFreeKb;
            this.MemoryUsedKb = memoryUsedKb;
            this.MemoryBuffersAndCachedKb = memoryBuffersAndCachedKb;
            this.MemoryFreeKb = memoryFreeKb;
            this.MemoryTotalKb = memoryTotalKb;
            this.CpuUsage = cpuUsage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the node&#39;s IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "address")]
        public string Address {get; set; }

        /// <summary>
        /// Gets or sets the state of the node in Cassandra ring. Possible values include: &#39;Normal&#39;, &#39;Leaving&#39;, &#39;Joining&#39;, &#39;Moving&#39;, &#39;Stopped&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; set; }

        /// <summary>
        /// Gets or sets cassandra service status on this node
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cassandraProcessStatus")]
        public string CassandraProcessStatus {get; set; }

        /// <summary>
        /// Gets or sets the amount of file system data in the data directory (e.g.,
        /// 47.66 kB), excluding all content in the snapshots subdirectories. Because
        /// all SSTable data files are included, any data that is not cleaned up (such
        /// as TTL-expired cells or tombstones) is counted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "load")]
        public string Load {get; set; }

        /// <summary>
        /// Gets or sets list of tokens this node covers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tokens")]
        public System.Collections.Generic.IList<string> Tokens {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "size")]
        public int? Size {get; set; }

        /// <summary>
        /// Gets or sets the network ID of the node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostID")]
        public string HostId {get; set; }

        /// <summary>
        /// Gets or sets the rack this node is part of.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rack")]
        public string Rack {get; set; }

        /// <summary>
        /// Gets or sets the timestamp when these statistics were captured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timestamp")]
        public string Timestamp {get; set; }

        /// <summary>
        /// Gets or sets the amount of disk used, in kB, of the directory
        /// /var/lib/cassandra.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskUsedKB")]
        public long? DiskUsedKb {get; set; }

        /// <summary>
        /// Gets or sets the amount of disk free, in kB, of the directory
        /// /var/lib/cassandra.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskFreeKB")]
        public long? DiskFreeKb {get; set; }

        /// <summary>
        /// Gets or sets used memory (calculated as total - free - buffers - cache), in
        /// kB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "memoryUsedKB")]
        public long? MemoryUsedKb {get; set; }

        /// <summary>
        /// Gets or sets memory used by kernel buffers (Buffers in /proc/meminfo) and
        /// page cache and slabs (Cached and SReclaimable in /proc/meminfo), in kB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "memoryBuffersAndCachedKB")]
        public long? MemoryBuffersAndCachedKb {get; set; }

        /// <summary>
        /// Gets or sets unused memory (MemFree and SwapFree in /proc/meminfo), in kB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "memoryFreeKB")]
        public long? MemoryFreeKb {get; set; }

        /// <summary>
        /// Gets or sets total installed memory (MemTotal and SwapTotal in
        /// /proc/meminfo), in kB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "memoryTotalKB")]
        public long? MemoryTotalKb {get; set; }

        /// <summary>
        /// Gets or sets a float representing the current system-wide CPU utilization
        /// as a percentage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cpuUsage")]
        public double? CpuUsage {get; set; }
    }
}