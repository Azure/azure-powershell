// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    /// <summary>
    /// Azure Cosmos DB Mongo Role Definition resource object.
    /// </summary>
    public partial class MongoRoleDefinitionResource
    {
        /// <summary>
        /// Initializes a new instance of the MongoRoleDefinitionResource class.
        /// </summary>
        public MongoRoleDefinitionResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MongoRoleDefinitionResource class.
        /// </summary>

        /// <param name="roleName">A user-friendly name for the Role Definition. Must be unique for the
        /// database account.
        /// </param>

        /// <param name="type">Indicates whether the Role Definition was built-in or user created.
        /// Possible values include: &#39;BuiltInRole&#39;, &#39;CustomRole&#39;</param>

        /// <param name="databaseName">The database name for which access is being granted for this Role
        /// Definition.
        /// </param>

        /// <param name="privileges">A set of privileges contained by the Role Definition. This will allow
        /// application of this Role Definition on the entire database account or any
        /// underlying Database / Collection. Scopes higher than Database are not
        /// enforceable as privilege.
        /// </param>

        /// <param name="roles">The set of roles inherited by this Role Definition.
        /// </param>
        public MongoRoleDefinitionResource(string roleName = default(string), MongoRoleDefinitionType? type = default(MongoRoleDefinitionType?), string databaseName = default(string), System.Collections.Generic.IList<Privilege> privileges = default(System.Collections.Generic.IList<Privilege>), System.Collections.Generic.IList<Role> roles = default(System.Collections.Generic.IList<Role>))

        {
            this.RoleName = roleName;
            this.Type = type;
            this.DatabaseName = databaseName;
            this.Privileges = privileges;
            this.Roles = roles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a user-friendly name for the Role Definition. Must be unique
        /// for the database account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "roleName")]
        public string RoleName {get; set; }

        /// <summary>
        /// Gets or sets indicates whether the Role Definition was built-in or user
        /// created. Possible values include: &#39;BuiltInRole&#39;, &#39;CustomRole&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public MongoRoleDefinitionType? Type {get; set; }

        /// <summary>
        /// Gets or sets the database name for which access is being granted for this
        /// Role Definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName {get; set; }

        /// <summary>
        /// Gets or sets a set of privileges contained by the Role Definition. This
        /// will allow application of this Role Definition on the entire database
        /// account or any underlying Database / Collection. Scopes higher than
        /// Database are not enforceable as privilege.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privileges")]
        public System.Collections.Generic.IList<Privilege> Privileges {get; set; }

        /// <summary>
        /// Gets or sets the set of roles inherited by this Role Definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "roles")]
        public System.Collections.Generic.IList<Role> Roles {get; set; }
    }
}