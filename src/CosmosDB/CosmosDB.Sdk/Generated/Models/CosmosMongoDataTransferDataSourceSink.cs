// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A CosmosDB Mongo API data source/sink
    /// </summary>
    public partial class CosmosMongoDataTransferDataSourceSink
    {
        /// <summary>
        /// Initializes a new instance of the
        /// CosmosMongoDataTransferDataSourceSink class.
        /// </summary>
        public CosmosMongoDataTransferDataSourceSink()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// CosmosMongoDataTransferDataSourceSink class.
        /// </summary>
        /// <param name="component">Possible values include:
        /// 'CosmosDBCassandra', 'CosmosDBMongo', 'CosmosDBSql',
        /// 'AzureBlobStorage'</param>
        public CosmosMongoDataTransferDataSourceSink(string component, string databaseName, string collectionName, string remoteAccountName = default(string))
        {
            Component = component;
            RemoteAccountName = remoteAccountName;
            DatabaseName = databaseName;
            CollectionName = collectionName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'CosmosDBCassandra',
        /// 'CosmosDBMongo', 'CosmosDBSql', 'AzureBlobStorage'
        /// </summary>
        [JsonProperty(PropertyName = "component")]
        public string Component { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "remoteAccountName")]
        public string RemoteAccountName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "collectionName")]
        public string CollectionName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Component == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Component");
            }
            if (DatabaseName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DatabaseName");
            }
            if (CollectionName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CollectionName");
            }
        }
    }
}
