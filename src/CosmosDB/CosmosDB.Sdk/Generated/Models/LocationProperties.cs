// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    /// <summary>
    /// Cosmos DB location metadata
    /// </summary>
    public partial class LocationProperties
    {
        /// <summary>
        /// Initializes a new instance of the LocationProperties class.
        /// </summary>
        public LocationProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LocationProperties class.
        /// </summary>

        /// <param name="supportsAvailabilityZone">Flag indicating whether the location supports availability zones or not.
        /// </param>

        /// <param name="isResidencyRestricted">Flag indicating whether the location is residency sensitive.
        /// </param>

        /// <param name="backupStorageRedundancies">The properties of available backup storage redundancies.
        /// </param>

        /// <param name="isSubscriptionRegionAccessAllowedForRegular">Flag indicating whether the subscription have access in region for
        /// Non-Availability Zones.
        /// </param>

        /// <param name="isSubscriptionRegionAccessAllowedForAz">Flag indicating whether the subscription have access in region for
        /// Availability Zones(Az).
        /// </param>

        /// <param name="status">Enum to indicate current buildout status of the region.
        /// Possible values include: 'Uninitialized', 'Initializing',
        /// 'InternallyReady', 'Online', 'Deleting'</param>
        public LocationProperties(bool? supportsAvailabilityZone = default(bool?), bool? isResidencyRestricted = default(bool?), System.Collections.Generic.IList<string> backupStorageRedundancies = default(System.Collections.Generic.IList<string>), bool? isSubscriptionRegionAccessAllowedForRegular = default(bool?), bool? isSubscriptionRegionAccessAllowedForAz = default(bool?), string status = default(string))

        {
            this.SupportsAvailabilityZone = supportsAvailabilityZone;
            this.IsResidencyRestricted = isResidencyRestricted;
            this.BackupStorageRedundancies = backupStorageRedundancies;
            this.IsSubscriptionRegionAccessAllowedForRegular = isSubscriptionRegionAccessAllowedForRegular;
            this.IsSubscriptionRegionAccessAllowedForAz = isSubscriptionRegionAccessAllowedForAz;
            this.Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets flag indicating whether the location supports availability zones or
        /// not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supportsAvailabilityZone")]
        public bool? SupportsAvailabilityZone {get; private set; }

        /// <summary>
        /// Gets flag indicating whether the location is residency sensitive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isResidencyRestricted")]
        public bool? IsResidencyRestricted {get; private set; }

        /// <summary>
        /// Gets the properties of available backup storage redundancies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupStorageRedundancies")]
        public System.Collections.Generic.IList<string> BackupStorageRedundancies {get; private set; }

        /// <summary>
        /// Gets flag indicating whether the subscription have access in region for
        /// Non-Availability Zones.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isSubscriptionRegionAccessAllowedForRegular")]
        public bool? IsSubscriptionRegionAccessAllowedForRegular {get; private set; }

        /// <summary>
        /// Gets flag indicating whether the subscription have access in region for
        /// Availability Zones(Az).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isSubscriptionRegionAccessAllowedForAz")]
        public bool? IsSubscriptionRegionAccessAllowedForAz {get; private set; }

        /// <summary>
        /// Gets enum to indicate current buildout status of the region. Possible values include: &#39;Uninitialized&#39;, &#39;Initializing&#39;, &#39;InternallyReady&#39;, &#39;Online&#39;, &#39;Deleting&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; private set; }
    }
}