// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    /// <summary>
    /// Properties to update Azure Cosmos DB database accounts.
    /// </summary>
    public partial class DatabaseAccountUpdateProperties
    {
        /// <summary>
        /// Initializes a new instance of the DatabaseAccountUpdateProperties class.
        /// </summary>
        public DatabaseAccountUpdateProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatabaseAccountUpdateProperties class.
        /// </summary>

        /// <param name="consistencyPolicy">The consistency policy for the Cosmos DB account.
        /// </param>

        /// <param name="locations">An array that contains the georeplication locations enabled for the Cosmos
        /// DB account.
        /// </param>

        /// <param name="ipRules">List of IpRules.
        /// </param>

        /// <param name="isVirtualNetworkFilterEnabled">Flag to indicate whether to enable/disable Virtual Network ACL rules.
        /// </param>

        /// <param name="enableAutomaticFailover">Enables automatic failover of the write region in the rare event that the
        /// region is unavailable due to an outage. Automatic failover will result in a
        /// new write region for the account and is chosen based on the failover
        /// priorities configured for the account.
        /// </param>

        /// <param name="capabilities">List of Cosmos DB capabilities for the account
        /// </param>

        /// <param name="virtualNetworkRules">List of Virtual Network ACL rules configured for the Cosmos DB account.
        /// </param>

        /// <param name="enableMultipleWriteLocations">Enables the account to write in multiple locations
        /// </param>

        /// <param name="enableCassandraConnector">Enables the cassandra connector on the Cosmos DB C* account
        /// </param>

        /// <param name="connectorOffer">The cassandra connector offer type for the Cosmos DB database C* account.
        /// Possible values include: 'Small'</param>

        /// <param name="disableKeyBasedMetadataWriteAccess">Disable write operations on metadata resources (databases, containers,
        /// throughput) via account keys
        /// </param>

        /// <param name="keyVaultKeyUri">The URI of the key vault
        /// </param>

        /// <param name="defaultIdentity">The default identity for accessing key vault used in features like customer
        /// managed keys. The default identity needs to be explicitly set by the users.
        /// It can be &#34;FirstPartyIdentity&#34;, &#34;SystemAssignedIdentity&#34; and more.
        /// </param>

        /// <param name="publicNetworkAccess">Whether requests from Public Network are allowed
        /// Possible values include: 'Enabled', 'Disabled', 'SecuredByPerimeter'</param>

        /// <param name="enableFreeTier">Flag to indicate whether Free Tier is enabled.
        /// </param>

        /// <param name="apiProperties">API specific properties. Currently, supported only for MongoDB API.
        /// </param>

        /// <param name="enableAnalyticalStorage">Flag to indicate whether to enable storage analytics.
        /// </param>

        /// <param name="analyticalStorageConfiguration">Analytical storage specific properties.
        /// </param>

        /// <param name="backupPolicy">The object representing the policy for taking backups on an account.
        /// </param>

        /// <param name="cors">The CORS policy for the Cosmos DB database account.
        /// </param>

        /// <param name="networkAclBypass">Indicates what services are allowed to bypass firewall checks.
        /// Possible values include: 'None', 'AzureServices'</param>

        /// <param name="networkAclBypassResourceIds">An array that contains the Resource Ids for Network Acl Bypass for the
        /// Cosmos DB account.
        /// </param>

        /// <param name="disableLocalAuth">Opt-out of local authentication and ensure only MSI and AAD can be used
        /// exclusively for authentication.
        /// </param>

        /// <param name="capacity">The object that represents all properties related to capacity enforcement
        /// on an account.
        /// </param>

        /// <param name="keysMetadata">This property is ignored during the update operation, as the metadata is
        /// read-only. The object represents the metadata for the Account Keys of the
        /// Cosmos DB account.
        /// </param>

        /// <param name="enablePartitionMerge">Flag to indicate enabling/disabling of Partition Merge feature on the
        /// account
        /// </param>

        /// <param name="minimalTlsVersion">Indicates the minimum allowed Tls version. The default value is Tls 1.2.
        /// Cassandra and Mongo APIs only work with Tls 1.2.
        /// Possible values include: 'Tls', 'Tls11', 'Tls12'</param>

        /// <param name="enableBurstCapacity">Flag to indicate enabling/disabling of Burst Capacity Preview feature on
        /// the account
        /// </param>

        /// <param name="customerManagedKeyStatus">Indicates the status of the Customer Managed Key feature on the account. In
        /// case there are errors, the property provides troubleshooting guidance.
        /// Possible values include: 'Access to your account is currently revoked
        /// because the Azure Cosmos DB service is unable to obtain the AAD
        /// authentication token for the account's default identity; for more details
        /// about this error and how to restore access to your account please visit
        /// https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#azure-active-directory-token-acquisition-error
        /// (4000).', 'Access to your account is currently revoked because the Azure
        /// Cosmos DB account's key vault key URI does not follow the expected format;
        /// for more details about this error and how to restore access to your account
        /// please visit
        /// https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#improper-syntax-detected-on-the-key-vault-uri-property
        /// (4006).', 'Access to your account is currently revoked because the current
        /// default identity no longer has permission to the associated Key Vault key;
        /// for more details about this error and how to restore access to your account
        /// please visit
        /// https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#default-identity-is-unauthorized-to-access-the-azure-key-vault-key
        /// (4002).', 'Access to your account is currently revoked because the Azure
        /// Key Vault DNS name specified by the account's keyvaultkeyuri property could
        /// not be resolved; for more details about this error and how to restore
        /// access to your account please visit
        /// https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#unable-to-resolve-the-key-vaults-dns
        /// (4009).', 'Access to your account is currently revoked because the
        /// correspondent key is not found on the specified Key Vault; for more details
        /// about this error and how to restore access to your account please visit
        /// https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#azure-key-vault-resource-not-found
        /// (4003).', 'Access to your account is currently revoked because the Azure
        /// Cosmos DB service is unable to wrap or unwrap the key; for more details
        /// about this error and how to restore access to your account please visit
        /// https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#internal-unwrapping-procedure-error
        /// (4005).', 'Access to your account is currently revoked because the Azure
        /// Cosmos DB account has an undefined default identity; for more details about
        /// this error and how to restore access to your account please visit
        /// https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#invalid-azure-cosmos-db-default-identity
        /// (4015).', 'Access to your account is currently revoked because the access
        /// rules are blocking outbound requests to the Azure Key Vault service; for
        /// more details about this error and how to restore access to your account
        /// please visit
        /// https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide
        /// (4016).', 'Access to your account is currently revoked because the
        /// correspondent Azure Key Vault was not found; for more details about this
        /// error and how to restore access to your account please visit
        /// https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#azure-key-vault-resource-not-found
        /// (4017).', 'Access to your account is currently revoked; for more details
        /// about this error and how to restore access to your account please visit
        /// https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide',
        /// 'Access to the configured customer managed key confirmed.'</param>
        public DatabaseAccountUpdateProperties(ConsistencyPolicy consistencyPolicy = default(ConsistencyPolicy), System.Collections.Generic.IList<Location> locations = default(System.Collections.Generic.IList<Location>), System.Collections.Generic.IList<IpAddressOrRange> ipRules = default(System.Collections.Generic.IList<IpAddressOrRange>), bool? isVirtualNetworkFilterEnabled = default(bool?), bool? enableAutomaticFailover = default(bool?), System.Collections.Generic.IList<Capability> capabilities = default(System.Collections.Generic.IList<Capability>), System.Collections.Generic.IList<VirtualNetworkRule> virtualNetworkRules = default(System.Collections.Generic.IList<VirtualNetworkRule>), bool? enableMultipleWriteLocations = default(bool?), bool? enableCassandraConnector = default(bool?), string connectorOffer = default(string), bool? disableKeyBasedMetadataWriteAccess = default(bool?), string keyVaultKeyUri = default(string), string defaultIdentity = default(string), string publicNetworkAccess = default(string), bool? enableFreeTier = default(bool?), ApiProperties apiProperties = default(ApiProperties), bool? enableAnalyticalStorage = default(bool?), AnalyticalStorageConfiguration analyticalStorageConfiguration = default(AnalyticalStorageConfiguration), BackupPolicy backupPolicy = default(BackupPolicy), System.Collections.Generic.IList<CorsPolicy> cors = default(System.Collections.Generic.IList<CorsPolicy>), NetworkAclBypass? networkAclBypass = default(NetworkAclBypass?), System.Collections.Generic.IList<string> networkAclBypassResourceIds = default(System.Collections.Generic.IList<string>), bool? disableLocalAuth = default(bool?), Capacity capacity = default(Capacity), DatabaseAccountKeysMetadata keysMetadata = default(DatabaseAccountKeysMetadata), bool? enablePartitionMerge = default(bool?), string minimalTlsVersion = default(string), bool? enableBurstCapacity = default(bool?), string customerManagedKeyStatus = default(string))

        {
            this.ConsistencyPolicy = consistencyPolicy;
            this.Locations = locations;
            this.IPRules = ipRules;
            this.IsVirtualNetworkFilterEnabled = isVirtualNetworkFilterEnabled;
            this.EnableAutomaticFailover = enableAutomaticFailover;
            this.Capabilities = capabilities;
            this.VirtualNetworkRules = virtualNetworkRules;
            this.EnableMultipleWriteLocations = enableMultipleWriteLocations;
            this.EnableCassandraConnector = enableCassandraConnector;
            this.ConnectorOffer = connectorOffer;
            this.DisableKeyBasedMetadataWriteAccess = disableKeyBasedMetadataWriteAccess;
            this.KeyVaultKeyUri = keyVaultKeyUri;
            this.DefaultIdentity = defaultIdentity;
            this.PublicNetworkAccess = publicNetworkAccess;
            this.EnableFreeTier = enableFreeTier;
            this.ApiProperties = apiProperties;
            this.EnableAnalyticalStorage = enableAnalyticalStorage;
            this.AnalyticalStorageConfiguration = analyticalStorageConfiguration;
            this.BackupPolicy = backupPolicy;
            this.Cors = cors;
            this.NetworkAclBypass = networkAclBypass;
            this.NetworkAclBypassResourceIds = networkAclBypassResourceIds;
            this.DisableLocalAuth = disableLocalAuth;
            this.Capacity = capacity;
            this.KeysMetadata = keysMetadata;
            this.EnablePartitionMerge = enablePartitionMerge;
            this.MinimalTlsVersion = minimalTlsVersion;
            this.EnableBurstCapacity = enableBurstCapacity;
            this.CustomerManagedKeyStatus = customerManagedKeyStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the consistency policy for the Cosmos DB account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "consistencyPolicy")]
        public ConsistencyPolicy ConsistencyPolicy {get; set; }

        /// <summary>
        /// Gets or sets an array that contains the georeplication locations enabled
        /// for the Cosmos DB account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "locations")]
        public System.Collections.Generic.IList<Location> Locations {get; set; }

        /// <summary>
        /// Gets or sets list of IpRules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipRules")]
        public System.Collections.Generic.IList<IpAddressOrRange> IPRules {get; set; }

        /// <summary>
        /// Gets or sets flag to indicate whether to enable/disable Virtual Network ACL
        /// rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isVirtualNetworkFilterEnabled")]
        public bool? IsVirtualNetworkFilterEnabled {get; set; }

        /// <summary>
        /// Gets or sets enables automatic failover of the write region in the rare
        /// event that the region is unavailable due to an outage. Automatic failover
        /// will result in a new write region for the account and is chosen based on
        /// the failover priorities configured for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableAutomaticFailover")]
        public bool? EnableAutomaticFailover {get; set; }

        /// <summary>
        /// Gets or sets list of Cosmos DB capabilities for the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "capabilities")]
        public System.Collections.Generic.IList<Capability> Capabilities {get; set; }

        /// <summary>
        /// Gets or sets list of Virtual Network ACL rules configured for the Cosmos DB
        /// account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "virtualNetworkRules")]
        public System.Collections.Generic.IList<VirtualNetworkRule> VirtualNetworkRules {get; set; }

        /// <summary>
        /// Gets or sets enables the account to write in multiple locations
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableMultipleWriteLocations")]
        public bool? EnableMultipleWriteLocations {get; set; }

        /// <summary>
        /// Gets or sets enables the cassandra connector on the Cosmos DB C* account
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableCassandraConnector")]
        public bool? EnableCassandraConnector {get; set; }

        /// <summary>
        /// Gets or sets the cassandra connector offer type for the Cosmos DB database
        /// C* account. Possible values include: &#39;Small&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectorOffer")]
        public string ConnectorOffer {get; set; }

        /// <summary>
        /// Gets or sets disable write operations on metadata resources (databases,
        /// containers, throughput) via account keys
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disableKeyBasedMetadataWriteAccess")]
        public bool? DisableKeyBasedMetadataWriteAccess {get; set; }

        /// <summary>
        /// Gets or sets the URI of the key vault
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keyVaultKeyUri")]
        public string KeyVaultKeyUri {get; set; }

        /// <summary>
        /// Gets or sets the default identity for accessing key vault used in features
        /// like customer managed keys. The default identity needs to be explicitly set
        /// by the users. It can be &#34;FirstPartyIdentity&#34;, &#34;SystemAssignedIdentity&#34; and
        /// more.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultIdentity")]
        public string DefaultIdentity {get; set; }

        /// <summary>
        /// Gets or sets whether requests from Public Network are allowed Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;, &#39;SecuredByPerimeter&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publicNetworkAccess")]
        public string PublicNetworkAccess {get; set; }

        /// <summary>
        /// Gets or sets flag to indicate whether Free Tier is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableFreeTier")]
        public bool? EnableFreeTier {get; set; }

        /// <summary>
        /// Gets or sets aPI specific properties. Currently, supported only for MongoDB
        /// API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "apiProperties")]
        public ApiProperties ApiProperties {get; set; }

        /// <summary>
        /// Gets or sets flag to indicate whether to enable storage analytics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableAnalyticalStorage")]
        public bool? EnableAnalyticalStorage {get; set; }

        /// <summary>
        /// Gets or sets analytical storage specific properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "analyticalStorageConfiguration")]
        public AnalyticalStorageConfiguration AnalyticalStorageConfiguration {get; set; }

        /// <summary>
        /// Gets or sets the object representing the policy for taking backups on an
        /// account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupPolicy")]
        public BackupPolicy BackupPolicy {get; set; }

        /// <summary>
        /// Gets or sets the CORS policy for the Cosmos DB database account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cors")]
        public System.Collections.Generic.IList<CorsPolicy> Cors {get; set; }

        /// <summary>
        /// Gets or sets indicates what services are allowed to bypass firewall checks. Possible values include: &#39;None&#39;, &#39;AzureServices&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkAclBypass")]
        public NetworkAclBypass? NetworkAclBypass {get; set; }

        /// <summary>
        /// Gets or sets an array that contains the Resource Ids for Network Acl Bypass
        /// for the Cosmos DB account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkAclBypassResourceIds")]
        public System.Collections.Generic.IList<string> NetworkAclBypassResourceIds {get; set; }

        /// <summary>
        /// Gets or sets opt-out of local authentication and ensure only MSI and AAD
        /// can be used exclusively for authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disableLocalAuth")]
        public bool? DisableLocalAuth {get; set; }

        /// <summary>
        /// Gets or sets the object that represents all properties related to capacity
        /// enforcement on an account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "capacity")]
        public Capacity Capacity {get; set; }

        /// <summary>
        /// Gets this property is ignored during the update operation, as the metadata
        /// is read-only. The object represents the metadata for the Account Keys of
        /// the Cosmos DB account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keysMetadata")]
        public DatabaseAccountKeysMetadata KeysMetadata {get; private set; }

        /// <summary>
        /// Gets or sets flag to indicate enabling/disabling of Partition Merge feature
        /// on the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enablePartitionMerge")]
        public bool? EnablePartitionMerge {get; set; }

        /// <summary>
        /// Gets or sets indicates the minimum allowed Tls version. The default value
        /// is Tls 1.2. Cassandra and Mongo APIs only work with Tls 1.2. Possible values include: &#39;Tls&#39;, &#39;Tls11&#39;, &#39;Tls12&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minimalTlsVersion")]
        public string MinimalTlsVersion {get; set; }

        /// <summary>
        /// Gets or sets flag to indicate enabling/disabling of Burst Capacity Preview
        /// feature on the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableBurstCapacity")]
        public bool? EnableBurstCapacity {get; set; }

        /// <summary>
        /// Gets or sets indicates the status of the Customer Managed Key feature on
        /// the account. In case there are errors, the property provides
        /// troubleshooting guidance. Possible values include: &#39;Access to your account is currently revoked because the Azure Cosmos DB service is unable to obtain the AAD authentication token for the account&#39;s default identity; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#azure-active-directory-token-acquisition-error (4000).&#39;, &#39;Access to your account is currently revoked because the Azure Cosmos DB account&#39;s key vault key URI does not follow the expected format; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#improper-syntax-detected-on-the-key-vault-uri-property (4006).&#39;, &#39;Access to your account is currently revoked because the current default identity no longer has permission to the associated Key Vault key; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#default-identity-is-unauthorized-to-access-the-azure-key-vault-key (4002).&#39;, &#39;Access to your account is currently revoked because the Azure Key Vault DNS name specified by the account&#39;s keyvaultkeyuri property could not be resolved; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#unable-to-resolve-the-key-vaults-dns (4009).&#39;, &#39;Access to your account is currently revoked because the correspondent key is not found on the specified Key Vault; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#azure-key-vault-resource-not-found (4003).&#39;, &#39;Access to your account is currently revoked because the Azure Cosmos DB service is unable to wrap or unwrap the key; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#internal-unwrapping-procedure-error (4005).&#39;, &#39;Access to your account is currently revoked because the Azure Cosmos DB account has an undefined default identity; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#invalid-azure-cosmos-db-default-identity (4015).&#39;, &#39;Access to your account is currently revoked because the access rules are blocking outbound requests to the Azure Key Vault service; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide (4016).&#39;, &#39;Access to your account is currently revoked because the correspondent Azure Key Vault was not found; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide#azure-key-vault-resource-not-found (4017).&#39;, &#39;Access to your account is currently revoked; for more details about this error and how to restore access to your account please visit https://learn.microsoft.com/en-us/azure/cosmos-db/cmk-troubleshooting-guide&#39;, &#39;Access to the configured customer managed key confirmed.&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customerManagedKeyStatus")]
        public string CustomerManagedKeyStatus {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ConsistencyPolicy != null)
            {
                this.ConsistencyPolicy.Validate();
            }
            if (this.Locations != null)
            {
                foreach (var element in this.Locations)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }










            if (this.Cors != null)
            {
                foreach (var element in this.Cors)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }


            if (this.Capacity != null)
            {
                this.Capacity.Validate();
            }



        }
    }
}