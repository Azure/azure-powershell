// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of a managed Cassandra cluster.
    /// </summary>
    public partial class ClusterResourceProperties
    {
        /// <summary>
        /// Initializes a new instance of the ClusterResourceProperties class.
        /// </summary>
        public ClusterResourceProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterResourceProperties class.
        /// </summary>

        /// <param name="provisioningState">The status of the resource at the time the operation was called.
        /// Possible values include: &#39;Creating&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Succeeded&#39;,
        /// &#39;Failed&#39;, &#39;Canceled&#39;</param>

        /// <param name="restoreFromBackupId">To create an empty cluster, omit this field or set it to null. To restore a
        /// backup into a new cluster, set this field to the resource id of the backup.
        /// </param>

        /// <param name="delegatedManagementSubnetId">Resource id of a subnet that this cluster&#39;s management service should have
        /// its network interface attached to. The subnet must be routable to all
        /// subnets that will be delegated to data centers. The resource id must be of
        /// the form &#39;/subscriptions/&lt;subscription id&gt;/resourceGroups/&lt;resource
        /// group&gt;/providers/Microsoft.Network/virtualNetworks/&lt;virtual
        /// network&gt;/subnets/&lt;subnet&gt;&#39;
        /// </param>

        /// <param name="cassandraVersion">Which version of Cassandra should this cluster converge to running (e.g.,
        /// 3.11). When updated, the cluster may take some time to migrate to the new
        /// version.
        /// </param>

        /// <param name="clusterNameOverride">If you need to set the clusterName property in cassandra.yaml to something
        /// besides the resource name of the cluster, set the value to use on this
        /// property.
        /// </param>

        /// <param name="authenticationMethod">Which authentication method Cassandra should use to authenticate clients.
        /// &#39;None&#39; turns off authentication, so should not be used except in
        /// emergencies. &#39;Cassandra&#39; is the default password based authentication. The
        /// default is &#39;Cassandra&#39;.
        /// Possible values include: &#39;None&#39;, &#39;Cassandra&#39;, &#39;Ldap&#39;</param>

        /// <param name="initialCassandraAdminPassword">Initial password for clients connecting as admin to the cluster. Should be
        /// changed after cluster creation. Returns null on GET. This field only
        /// applies when the authenticationMethod field is &#39;Cassandra&#39;.
        /// </param>

        /// <param name="prometheusEndpoint">Hostname or IP address where the Prometheus endpoint containing data about
        /// the managed Cassandra nodes can be reached.
        /// </param>

        /// <param name="repairEnabled">Should automatic repairs run on this cluster? If omitted, this is true, and
        /// should stay true unless you are running a hybrid cluster where you are
        /// already doing your own repairs.
        /// </param>

        /// <param name="autoReplicate">The form of AutoReplicate that is being used by this cluster.
        /// Possible values include: &#39;None&#39;, &#39;SystemKeyspaces&#39;, &#39;AllKeyspaces&#39;</param>

        /// <param name="clientCertificates">List of TLS certificates used to authorize clients connecting to the
        /// cluster. All connections are TLS encrypted whether clientCertificates is
        /// set or not, but if clientCertificates is set, the managed Cassandra cluster
        /// will reject all connections not bearing a TLS client certificate that can
        /// be validated from one or more of the public certificates in this property.
        /// </param>

        /// <param name="externalGossipCertificates">List of TLS certificates used to authorize gossip from unmanaged data
        /// centers. The TLS certificates of all nodes in unmanaged data centers must
        /// be verifiable using one of the certificates provided in this property.
        /// </param>

        /// <param name="gossipCertificates">List of TLS certificates that unmanaged nodes must trust for gossip with
        /// managed nodes. All managed nodes will present TLS client certificates that
        /// are verifiable using one of the certificates provided in this property.
        /// </param>

        /// <param name="externalSeedNodes">List of IP addresses of seed nodes in unmanaged data centers. These will be
        /// added to the seed node lists of all managed nodes.
        /// </param>

        /// <param name="seedNodes">List of IP addresses of seed nodes in the managed data centers. These
        /// should be added to the seed node lists of all unmanaged nodes.
        /// </param>

        /// <param name="externalDataCenters">List of the data center names for unmanaged data centers in this cluster to
        /// be included in auto-replication.
        /// </param>

        /// <param name="hoursBetweenBackups">(Deprecated) Number of hours to wait between taking a backup of the
        /// cluster.
        /// </param>

        /// <param name="deallocated">Whether the cluster and associated data centers has been deallocated.
        /// </param>

        /// <param name="cassandraAuditLoggingEnabled">Whether Cassandra audit logging is enabled
        /// </param>

        /// <param name="clusterType">Type of the cluster. If set to Production, some operations might not be
        /// permitted on cluster.
        /// Possible values include: &#39;Production&#39;, &#39;NonProduction&#39;</param>

        /// <param name="provisionError">Error related to resource provisioning.
        /// </param>

        /// <param name="extensions">Extensions to be added or updated on cluster.
        /// </param>

        /// <param name="backupSchedules">List of backup schedules that define when you want to back up your data.
        /// </param>

        /// <param name="scheduledEventStrategy">How the nodes in the cluster react to scheduled events
        /// Possible values include: &#39;Ignore&#39;, &#39;StopAny&#39;, &#39;StopByRack&#39;</param>

        /// <param name="azureConnectionMethod">How to connect to the azure services needed for running the cluster
        /// Possible values include: &#39;None&#39;, &#39;VPN&#39;</param>

        /// <param name="privateLinkResourceId">If the Connection Method is Vpn, this is the Id of the private link
        /// resource that the datacenters need to connect to.
        /// </param>
        public ClusterResourceProperties(string provisioningState = default(string), string restoreFromBackupId = default(string), string delegatedManagementSubnetId = default(string), string cassandraVersion = default(string), string clusterNameOverride = default(string), string authenticationMethod = default(string), string initialCassandraAdminPassword = default(string), SeedNode prometheusEndpoint = default(SeedNode), bool? repairEnabled = default(bool?), string autoReplicate = default(string), System.Collections.Generic.IList<Certificate> clientCertificates = default(System.Collections.Generic.IList<Certificate>), System.Collections.Generic.IList<Certificate> externalGossipCertificates = default(System.Collections.Generic.IList<Certificate>), System.Collections.Generic.IList<Certificate> gossipCertificates = default(System.Collections.Generic.IList<Certificate>), System.Collections.Generic.IList<SeedNode> externalSeedNodes = default(System.Collections.Generic.IList<SeedNode>), System.Collections.Generic.IList<SeedNode> seedNodes = default(System.Collections.Generic.IList<SeedNode>), System.Collections.Generic.IList<string> externalDataCenters = default(System.Collections.Generic.IList<string>), int? hoursBetweenBackups = default(int?), bool? deallocated = default(bool?), bool? cassandraAuditLoggingEnabled = default(bool?), string clusterType = default(string), CassandraError provisionError = default(CassandraError), System.Collections.Generic.IList<string> extensions = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<BackupSchedule> backupSchedules = default(System.Collections.Generic.IList<BackupSchedule>), string scheduledEventStrategy = default(string), string azureConnectionMethod = default(string), string privateLinkResourceId = default(string))

        {
            this.ProvisioningState = provisioningState;
            this.RestoreFromBackupId = restoreFromBackupId;
            this.DelegatedManagementSubnetId = delegatedManagementSubnetId;
            this.CassandraVersion = cassandraVersion;
            this.ClusterNameOverride = clusterNameOverride;
            this.AuthenticationMethod = authenticationMethod;
            this.InitialCassandraAdminPassword = initialCassandraAdminPassword;
            this.PrometheusEndpoint = prometheusEndpoint;
            this.RepairEnabled = repairEnabled;
            this.AutoReplicate = autoReplicate;
            this.ClientCertificates = clientCertificates;
            this.ExternalGossipCertificates = externalGossipCertificates;
            this.GossipCertificates = gossipCertificates;
            this.ExternalSeedNodes = externalSeedNodes;
            this.SeedNodes = seedNodes;
            this.ExternalDataCenters = externalDataCenters;
            this.HoursBetweenBackups = hoursBetweenBackups;
            this.Deallocated = deallocated;
            this.CassandraAuditLoggingEnabled = cassandraAuditLoggingEnabled;
            this.ClusterType = clusterType;
            this.ProvisionError = provisionError;
            this.Extensions = extensions;
            this.BackupSchedules = backupSchedules;
            this.ScheduledEventStrategy = scheduledEventStrategy;
            this.AzureConnectionMethod = azureConnectionMethod;
            this.PrivateLinkResourceId = privateLinkResourceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the status of the resource at the time the operation was
        /// called. Possible values include: &#39;Creating&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; set; }

        /// <summary>
        /// Gets or sets to create an empty cluster, omit this field or set it to null.
        /// To restore a backup into a new cluster, set this field to the resource id
        /// of the backup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "restoreFromBackupId")]
        public string RestoreFromBackupId {get; set; }

        /// <summary>
        /// Gets or sets resource id of a subnet that this cluster&#39;s management service
        /// should have its network interface attached to. The subnet must be routable
        /// to all subnets that will be delegated to data centers. The resource id must
        /// be of the form &#39;/subscriptions/&lt;subscription id&gt;/resourceGroups/&lt;resource
        /// group&gt;/providers/Microsoft.Network/virtualNetworks/&lt;virtual
        /// network&gt;/subnets/&lt;subnet&gt;&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "delegatedManagementSubnetId")]
        public string DelegatedManagementSubnetId {get; set; }

        /// <summary>
        /// Gets or sets which version of Cassandra should this cluster converge to
        /// running (e.g., 3.11). When updated, the cluster may take some time to
        /// migrate to the new version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cassandraVersion")]
        public string CassandraVersion {get; set; }

        /// <summary>
        /// Gets or sets if you need to set the clusterName property in cassandra.yaml
        /// to something besides the resource name of the cluster, set the value to use
        /// on this property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clusterNameOverride")]
        public string ClusterNameOverride {get; set; }

        /// <summary>
        /// Gets or sets which authentication method Cassandra should use to
        /// authenticate clients. &#39;None&#39; turns off authentication, so should not be
        /// used except in emergencies. &#39;Cassandra&#39; is the default password based
        /// authentication. The default is &#39;Cassandra&#39;. Possible values include: &#39;None&#39;, &#39;Cassandra&#39;, &#39;Ldap&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authenticationMethod")]
        public string AuthenticationMethod {get; set; }

        /// <summary>
        /// Gets or sets initial password for clients connecting as admin to the
        /// cluster. Should be changed after cluster creation. Returns null on GET.
        /// This field only applies when the authenticationMethod field is &#39;Cassandra&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "initialCassandraAdminPassword")]
        public string InitialCassandraAdminPassword {get; set; }

        /// <summary>
        /// Gets or sets hostname or IP address where the Prometheus endpoint
        /// containing data about the managed Cassandra nodes can be reached.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "prometheusEndpoint")]
        public SeedNode PrometheusEndpoint {get; set; }

        /// <summary>
        /// Gets or sets should automatic repairs run on this cluster? If omitted, this
        /// is true, and should stay true unless you are running a hybrid cluster where
        /// you are already doing your own repairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "repairEnabled")]
        public bool? RepairEnabled {get; set; }

        /// <summary>
        /// Gets or sets the form of AutoReplicate that is being used by this cluster. Possible values include: &#39;None&#39;, &#39;SystemKeyspaces&#39;, &#39;AllKeyspaces&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoReplicate")]
        public string AutoReplicate {get; set; }

        /// <summary>
        /// Gets or sets list of TLS certificates used to authorize clients connecting
        /// to the cluster. All connections are TLS encrypted whether
        /// clientCertificates is set or not, but if clientCertificates is set, the
        /// managed Cassandra cluster will reject all connections not bearing a TLS
        /// client certificate that can be validated from one or more of the public
        /// certificates in this property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientCertificates")]
        public System.Collections.Generic.IList<Certificate> ClientCertificates {get; set; }

        /// <summary>
        /// Gets or sets list of TLS certificates used to authorize gossip from
        /// unmanaged data centers. The TLS certificates of all nodes in unmanaged data
        /// centers must be verifiable using one of the certificates provided in this
        /// property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "externalGossipCertificates")]
        public System.Collections.Generic.IList<Certificate> ExternalGossipCertificates {get; set; }

        /// <summary>
        /// Gets list of TLS certificates that unmanaged nodes must trust for gossip
        /// with managed nodes. All managed nodes will present TLS client certificates
        /// that are verifiable using one of the certificates provided in this
        /// property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "gossipCertificates")]
        public System.Collections.Generic.IList<Certificate> GossipCertificates {get; private set; }

        /// <summary>
        /// Gets or sets list of IP addresses of seed nodes in unmanaged data centers.
        /// These will be added to the seed node lists of all managed nodes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "externalSeedNodes")]
        public System.Collections.Generic.IList<SeedNode> ExternalSeedNodes {get; set; }

        /// <summary>
        /// Gets list of IP addresses of seed nodes in the managed data centers. These
        /// should be added to the seed node lists of all unmanaged nodes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "seedNodes")]
        public System.Collections.Generic.IList<SeedNode> SeedNodes {get; private set; }

        /// <summary>
        /// Gets or sets list of the data center names for unmanaged data centers in
        /// this cluster to be included in auto-replication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "externalDataCenters")]
        public System.Collections.Generic.IList<string> ExternalDataCenters {get; set; }

        /// <summary>
        /// Gets or sets (Deprecated) Number of hours to wait between taking a backup
        /// of the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hoursBetweenBackups")]
        public int? HoursBetweenBackups {get; set; }

        /// <summary>
        /// Gets or sets whether the cluster and associated data centers has been
        /// deallocated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deallocated")]
        public bool? Deallocated {get; set; }

        /// <summary>
        /// Gets or sets whether Cassandra audit logging is enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cassandraAuditLoggingEnabled")]
        public bool? CassandraAuditLoggingEnabled {get; set; }

        /// <summary>
        /// Gets or sets type of the cluster. If set to Production, some operations
        /// might not be permitted on cluster. Possible values include: &#39;Production&#39;, &#39;NonProduction&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clusterType")]
        public string ClusterType {get; set; }

        /// <summary>
        /// Gets or sets error related to resource provisioning.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisionError")]
        public CassandraError ProvisionError {get; set; }

        /// <summary>
        /// Gets or sets extensions to be added or updated on cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "extensions")]
        public System.Collections.Generic.IList<string> Extensions {get; set; }

        /// <summary>
        /// Gets or sets list of backup schedules that define when you want to back up
        /// your data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupSchedules")]
        public System.Collections.Generic.IList<BackupSchedule> BackupSchedules {get; set; }

        /// <summary>
        /// Gets or sets how the nodes in the cluster react to scheduled events Possible values include: &#39;Ignore&#39;, &#39;StopAny&#39;, &#39;StopByRack&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "scheduledEventStrategy")]
        public string ScheduledEventStrategy {get; set; }

        /// <summary>
        /// Gets or sets how to connect to the azure services needed for running the
        /// cluster Possible values include: &#39;None&#39;, &#39;VPN&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azureConnectionMethod")]
        public string AzureConnectionMethod {get; set; }

        /// <summary>
        /// Gets if the Connection Method is Vpn, this is the Id of the private link
        /// resource that the datacenters need to connect to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateLinkResourceId")]
        public string PrivateLinkResourceId {get; private set; }
    }
}