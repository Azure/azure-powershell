// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    /// <summary>
    /// Parameters to create and update an Azure Cosmos DB SQL Role Definition.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SqlRoleDefinitionCreateUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the SqlRoleDefinitionCreateUpdateParameters class.
        /// </summary>
        public SqlRoleDefinitionCreateUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SqlRoleDefinitionCreateUpdateParameters class.
        /// </summary>

        /// <param name="roleName">A user-friendly name for the Role Definition. Must be unique for the
        /// database account.
        /// </param>

        /// <param name="type">Indicates whether the Role Definition was built-in or user created.
        /// Possible values include: 'BuiltInRole', 'CustomRole'</param>

        /// <param name="assignableScopes">A set of fully qualified Scopes at or below which Role Assignments may be
        /// created using this Role Definition. This will allow application of this
        /// Role Definition on the entire database account or any underlying Database /
        /// Collection. Must have at least one element. Scopes higher than Database
        /// account are not enforceable as assignable Scopes. Note that resources
        /// referenced in assignable Scopes need not exist.
        /// </param>

        /// <param name="permissions">The set of operations allowed through this Role Definition.
        /// </param>
        public SqlRoleDefinitionCreateUpdateParameters(string roleName = default(string), RoleDefinitionType? type = default(RoleDefinitionType?), System.Collections.Generic.IList<string> assignableScopes = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<Permission> permissions = default(System.Collections.Generic.IList<Permission>))

        {
            this.RoleName = roleName;
            this.Type = type;
            this.AssignableScopes = assignableScopes;
            this.Permissions = permissions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a user-friendly name for the Role Definition. Must be unique
        /// for the database account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.roleName")]
        public string RoleName {get; set; }

        /// <summary>
        /// Gets or sets indicates whether the Role Definition was built-in or user
        /// created. Possible values include: &#39;BuiltInRole&#39;, &#39;CustomRole&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.type")]
        public RoleDefinitionType? Type {get; set; }

        /// <summary>
        /// Gets or sets a set of fully qualified Scopes at or below which Role
        /// Assignments may be created using this Role Definition. This will allow
        /// application of this Role Definition on the entire database account or any
        /// underlying Database / Collection. Must have at least one element. Scopes
        /// higher than Database account are not enforceable as assignable Scopes. Note
        /// that resources referenced in assignable Scopes need not exist.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.assignableScopes")]
        public System.Collections.Generic.IList<string> AssignableScopes {get; set; }

        /// <summary>
        /// Gets or sets the set of operations allowed through this Role Definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.permissions")]
        public System.Collections.Generic.IList<Permission> Permissions {get; set; }
    }
}