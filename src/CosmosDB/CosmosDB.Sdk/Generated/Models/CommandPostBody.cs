// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    /// <summary>
    /// Specification of which command to run where
    /// </summary>
    public partial class CommandPostBody
    {
        /// <summary>
        /// Initializes a new instance of the CommandPostBody class.
        /// </summary>
        public CommandPostBody()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CommandPostBody class.
        /// </summary>

        /// <param name="command">The command which should be run
        /// </param>

        /// <param name="arguments">The arguments for the command to be run
        /// </param>

        /// <param name="host">IP address of the cassandra host to run the command on
        /// </param>

        /// <param name="cassandraStopStart">If true, stops cassandra before executing the command and then start it
        /// again
        /// </param>

        /// <param name="readwrite">If true, allows the command to *write* to the cassandra directory,
        /// otherwise read-only.
        /// </param>
        public CommandPostBody(string command, string host, System.Collections.Generic.IDictionary<string, string> arguments = default(System.Collections.Generic.IDictionary<string, string>), bool? cassandraStopStart = default(bool?), bool? readwrite = default(bool?))

        {
            this.Command = command;
            this.Arguments = arguments;
            this.Host = host;
            this.CassandraStopStart = cassandraStopStart;
            this.Readwrite = readwrite;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the command which should be run
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "command")]
        public string Command {get; set; }

        /// <summary>
        /// Gets or sets the arguments for the command to be run
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "arguments")]
        public System.Collections.Generic.IDictionary<string, string> Arguments {get; set; }

        /// <summary>
        /// Gets or sets iP address of the cassandra host to run the command on
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "host")]
        public string Host {get; set; }

        /// <summary>
        /// Gets or sets if true, stops cassandra before executing the command and then
        /// start it again
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cassandra-stop-start")]
        public bool? CassandraStopStart {get; set; }

        /// <summary>
        /// Gets or sets if true, allows the command to *write* to the cassandra
        /// directory, otherwise read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "readwrite")]
        public bool? Readwrite {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Command == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Command");
            }
            if (this.Host == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Host");
            }



        }
    }
}