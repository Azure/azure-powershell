// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    public partial class AuthenticationMethodLdapProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ServerHostname))
            {
                writer.WritePropertyName("serverHostname");
                writer.WriteStringValue(ServerHostname);
            }
            if (Optional.IsDefined(ServerPort))
            {
                writer.WritePropertyName("serverPort");
                writer.WriteNumberValue(ServerPort.Value);
            }
            if (Optional.IsDefined(ServiceUserDistinguishedName))
            {
                writer.WritePropertyName("serviceUserDistinguishedName");
                writer.WriteStringValue(ServiceUserDistinguishedName);
            }
            if (Optional.IsDefined(ServiceUserPassword))
            {
                writer.WritePropertyName("serviceUserPassword");
                writer.WriteStringValue(ServiceUserPassword);
            }
            if (Optional.IsDefined(SearchBaseDistinguishedName))
            {
                writer.WritePropertyName("searchBaseDistinguishedName");
                writer.WriteStringValue(SearchBaseDistinguishedName);
            }
            if (Optional.IsDefined(SearchFilterTemplate))
            {
                writer.WritePropertyName("searchFilterTemplate");
                writer.WriteStringValue(SearchFilterTemplate);
            }
            if (Optional.IsCollectionDefined(ServerCertificates))
            {
                writer.WritePropertyName("serverCertificates");
                writer.WriteStartArray();
                foreach (var item in ServerCertificates)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static AuthenticationMethodLdapProperties DeserializeAuthenticationMethodLdapProperties(JsonElement element)
        {
            Optional<string> serverHostname = default;
            Optional<int> serverPort = default;
            Optional<string> serviceUserDistinguishedName = default;
            Optional<string> serviceUserPassword = default;
            Optional<string> searchBaseDistinguishedName = default;
            Optional<string> searchFilterTemplate = default;
            Optional<IList<Certificate>> serverCertificates = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("serverHostname"))
                {
                    serverHostname = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serverPort"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    serverPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("serviceUserDistinguishedName"))
                {
                    serviceUserDistinguishedName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serviceUserPassword"))
                {
                    serviceUserPassword = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("searchBaseDistinguishedName"))
                {
                    searchBaseDistinguishedName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("searchFilterTemplate"))
                {
                    searchFilterTemplate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serverCertificates"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Certificate> array = new List<Certificate>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Certificate.DeserializeCertificate(item));
                    }
                    serverCertificates = array;
                    continue;
                }
            }
            return new AuthenticationMethodLdapProperties(serverHostname.Value, Optional.ToNullable(serverPort), serviceUserDistinguishedName.Value, serviceUserPassword.Value, searchBaseDistinguishedName.Value, searchFilterTemplate.Value, Optional.ToList(serverCertificates));
        }
    }
}
