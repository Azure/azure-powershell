// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Microsoft.Azure.Management.CosmosDB.Models;

namespace Microsoft.Azure.Management.CosmosDB
{
    /// <summary>
    /// A Class representing a NotebookWorkspace along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="NotebookWorkspaceResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetNotebookWorkspaceResource method.
    /// Otherwise you can get one from its parent resource <see cref="DatabaseAccountGetResultResource" /> using the GetNotebookWorkspace method.
    /// </summary>
    public partial class NotebookWorkspaceResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="NotebookWorkspaceResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string accountName, NotebookWorkspaceName notebookWorkspaceName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces/{notebookWorkspaceName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _notebookWorkspaceClientDiagnostics;
        private readonly NotebookWorkspacesRestOperations _notebookWorkspaceRestClient;
        private readonly NotebookWorkspaceData _data;

        /// <summary> Initializes a new instance of the <see cref="NotebookWorkspaceResource"/> class for mocking. </summary>
        protected NotebookWorkspaceResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "NotebookWorkspaceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal NotebookWorkspaceResource(ArmClient client, NotebookWorkspaceData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="NotebookWorkspaceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal NotebookWorkspaceResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _notebookWorkspaceClientDiagnostics = new ClientDiagnostics("Microsoft.Azure.Management.CosmosDB", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string notebookWorkspaceApiVersion);
            _notebookWorkspaceRestClient = new NotebookWorkspacesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, notebookWorkspaceApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.DocumentDB/databaseAccounts/notebookWorkspaces";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual NotebookWorkspaceData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets the notebook workspace for a Cosmos DB account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces/{notebookWorkspaceName}
        /// Operation Id: NotebookWorkspaces_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotebookWorkspaceResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _notebookWorkspaceClientDiagnostics.CreateScope("NotebookWorkspaceResource.Get");
            scope.Start();
            try
            {
                var response = await _notebookWorkspaceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new NotebookWorkspaceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the notebook workspace for a Cosmos DB account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces/{notebookWorkspaceName}
        /// Operation Id: NotebookWorkspaces_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotebookWorkspaceResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _notebookWorkspaceClientDiagnostics.CreateScope("NotebookWorkspaceResource.Get");
            scope.Start();
            try
            {
                var response = _notebookWorkspaceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new NotebookWorkspaceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the notebook workspace for a Cosmos DB account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces/{notebookWorkspaceName}
        /// Operation Id: NotebookWorkspaces_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="Azure.WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="Azure.WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _notebookWorkspaceClientDiagnostics.CreateScope("NotebookWorkspaceResource.Delete");
            scope.Start();
            try
            {
                var response = await _notebookWorkspaceRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new CosmosDBArmOperation(_notebookWorkspaceClientDiagnostics, Pipeline, _notebookWorkspaceRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the notebook workspace for a Cosmos DB account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces/{notebookWorkspaceName}
        /// Operation Id: NotebookWorkspaces_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="Azure.WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="Azure.WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _notebookWorkspaceClientDiagnostics.CreateScope("NotebookWorkspaceResource.Delete");
            scope.Start();
            try
            {
                var response = _notebookWorkspaceRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new CosmosDBArmOperation(_notebookWorkspaceClientDiagnostics, Pipeline, _notebookWorkspaceRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates the notebook workspace for a Cosmos DB account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces/{notebookWorkspaceName}
        /// Operation Id: NotebookWorkspaces_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="Azure.WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="Azure.WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> The notebook workspace to create for the current database account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<ArmOperation<NotebookWorkspaceResource>> UpdateAsync(WaitUntil waitUntil, NotebookWorkspaceCreateOrUpdateContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _notebookWorkspaceClientDiagnostics.CreateScope("NotebookWorkspaceResource.Update");
            scope.Start();
            try
            {
                var response = await _notebookWorkspaceRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, content, cancellationToken).ConfigureAwait(false);
                var operation = new CosmosDBArmOperation<NotebookWorkspaceResource>(new NotebookWorkspaceOperationSource(Client), _notebookWorkspaceClientDiagnostics, Pipeline, _notebookWorkspaceRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates the notebook workspace for a Cosmos DB account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces/{notebookWorkspaceName}
        /// Operation Id: NotebookWorkspaces_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="Azure.WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="Azure.WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> The notebook workspace to create for the current database account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual ArmOperation<NotebookWorkspaceResource> Update(WaitUntil waitUntil, NotebookWorkspaceCreateOrUpdateContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _notebookWorkspaceClientDiagnostics.CreateScope("NotebookWorkspaceResource.Update");
            scope.Start();
            try
            {
                var response = _notebookWorkspaceRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, content, cancellationToken);
                var operation = new CosmosDBArmOperation<NotebookWorkspaceResource>(new NotebookWorkspaceOperationSource(Client), _notebookWorkspaceClientDiagnostics, Pipeline, _notebookWorkspaceRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieves the connection info for the notebook workspace
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces/{notebookWorkspaceName}/listConnectionInfo
        /// Operation Id: NotebookWorkspaces_ListConnectionInfo
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotebookWorkspaceConnectionInfoResult>> GetConnectionInfoAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _notebookWorkspaceClientDiagnostics.CreateScope("NotebookWorkspaceResource.GetConnectionInfo");
            scope.Start();
            try
            {
                var response = await _notebookWorkspaceRestClient.ListConnectionInfoAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieves the connection info for the notebook workspace
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces/{notebookWorkspaceName}/listConnectionInfo
        /// Operation Id: NotebookWorkspaces_ListConnectionInfo
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotebookWorkspaceConnectionInfoResult> GetConnectionInfo(CancellationToken cancellationToken = default)
        {
            using var scope = _notebookWorkspaceClientDiagnostics.CreateScope("NotebookWorkspaceResource.GetConnectionInfo");
            scope.Start();
            try
            {
                var response = _notebookWorkspaceRestClient.ListConnectionInfo(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Regenerates the auth token for the notebook workspace
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces/{notebookWorkspaceName}/regenerateAuthToken
        /// Operation Id: NotebookWorkspaces_RegenerateAuthToken
        /// </summary>
        /// <param name="waitUntil"> <see cref="Azure.WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="Azure.WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> RegenerateAuthTokenAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _notebookWorkspaceClientDiagnostics.CreateScope("NotebookWorkspaceResource.RegenerateAuthToken");
            scope.Start();
            try
            {
                var response = await _notebookWorkspaceRestClient.RegenerateAuthTokenAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new CosmosDBArmOperation(_notebookWorkspaceClientDiagnostics, Pipeline, _notebookWorkspaceRestClient.CreateRegenerateAuthTokenRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Regenerates the auth token for the notebook workspace
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces/{notebookWorkspaceName}/regenerateAuthToken
        /// Operation Id: NotebookWorkspaces_RegenerateAuthToken
        /// </summary>
        /// <param name="waitUntil"> <see cref="Azure.WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="Azure.WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation RegenerateAuthToken(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _notebookWorkspaceClientDiagnostics.CreateScope("NotebookWorkspaceResource.RegenerateAuthToken");
            scope.Start();
            try
            {
                var response = _notebookWorkspaceRestClient.RegenerateAuthToken(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new CosmosDBArmOperation(_notebookWorkspaceClientDiagnostics, Pipeline, _notebookWorkspaceRestClient.CreateRegenerateAuthTokenRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Starts the notebook workspace
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces/{notebookWorkspaceName}/start
        /// Operation Id: NotebookWorkspaces_Start
        /// </summary>
        /// <param name="waitUntil"> <see cref="Azure.WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="Azure.WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> StartAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _notebookWorkspaceClientDiagnostics.CreateScope("NotebookWorkspaceResource.Start");
            scope.Start();
            try
            {
                var response = await _notebookWorkspaceRestClient.StartAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new CosmosDBArmOperation(_notebookWorkspaceClientDiagnostics, Pipeline, _notebookWorkspaceRestClient.CreateStartRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Starts the notebook workspace
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/notebookWorkspaces/{notebookWorkspaceName}/start
        /// Operation Id: NotebookWorkspaces_Start
        /// </summary>
        /// <param name="waitUntil"> <see cref="Azure.WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="Azure.WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Start(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _notebookWorkspaceClientDiagnostics.CreateScope("NotebookWorkspaceResource.Start");
            scope.Start();
            try
            {
                var response = _notebookWorkspaceRestClient.Start(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new CosmosDBArmOperation(_notebookWorkspaceClientDiagnostics, Pipeline, _notebookWorkspaceRestClient.CreateStartRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
