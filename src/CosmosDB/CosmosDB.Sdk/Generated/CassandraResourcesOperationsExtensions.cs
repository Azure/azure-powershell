// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.CosmosDB
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for CassandraResourcesOperations
    /// </summary>
    public static partial class CassandraResourcesOperationsExtensions
    {
        /// <summary>
        /// Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        public static System.Collections.Generic.IEnumerable<CassandraKeyspaceGetResults> ListCassandraKeyspaces(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName)
        {
                return ((ICassandraResourcesOperations)operations).ListCassandraKeyspacesAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<CassandraKeyspaceGetResults>> ListCassandraKeyspacesAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListCassandraKeyspacesWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        public static CassandraKeyspaceGetResults GetCassandraKeyspace(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName)
        {
                return ((ICassandraResourcesOperations)operations).GetCassandraKeyspaceAsync(resourceGroupName, accountName, keyspaceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CassandraKeyspaceGetResults> GetCassandraKeyspaceAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetCassandraKeyspaceWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update an Azure Cosmos DB Cassandra keyspace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        public static CassandraKeyspaceGetResults CreateUpdateCassandraKeyspace(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters)
        {
                return ((ICassandraResourcesOperations)operations).CreateUpdateCassandraKeyspaceAsync(resourceGroupName, accountName, keyspaceName, createUpdateCassandraKeyspaceParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update an Azure Cosmos DB Cassandra keyspace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CassandraKeyspaceGetResults> CreateUpdateCassandraKeyspaceAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateUpdateCassandraKeyspaceWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, createUpdateCassandraKeyspaceParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing Azure Cosmos DB Cassandra keyspace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        public static CassandraResourcesDeleteCassandraKeyspaceHeaders DeleteCassandraKeyspace(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName)
        {
                return ((ICassandraResourcesOperations)operations).DeleteCassandraKeyspaceAsync(resourceGroupName, accountName, keyspaceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Azure Cosmos DB Cassandra keyspace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CassandraResourcesDeleteCassandraKeyspaceHeaders> DeleteCassandraKeyspaceAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteCassandraKeyspaceWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        public static ThroughputSettingsGetResults GetCassandraKeyspaceThroughput(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName)
        {
                return ((ICassandraResourcesOperations)operations).GetCassandraKeyspaceThroughputAsync(resourceGroupName, accountName, keyspaceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> GetCassandraKeyspaceThroughputAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetCassandraKeyspaceThroughputWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        public static ThroughputSettingsGetResults UpdateCassandraKeyspaceThroughput(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, ThroughputSettingsUpdateParameters updateThroughputParameters)
        {
                return ((ICassandraResourcesOperations)operations).UpdateCassandraKeyspaceThroughputAsync(resourceGroupName, accountName, keyspaceName, updateThroughputParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> UpdateCassandraKeyspaceThroughputAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, ThroughputSettingsUpdateParameters updateThroughputParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateCassandraKeyspaceThroughputWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, updateThroughputParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Migrate an Azure Cosmos DB Cassandra Keyspace from manual throughput to autoscale
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        public static ThroughputSettingsGetResults MigrateCassandraKeyspaceToAutoscale(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName)
        {
                return ((ICassandraResourcesOperations)operations).MigrateCassandraKeyspaceToAutoscaleAsync(resourceGroupName, accountName, keyspaceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Migrate an Azure Cosmos DB Cassandra Keyspace from manual throughput to autoscale
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> MigrateCassandraKeyspaceToAutoscaleAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.MigrateCassandraKeyspaceToAutoscaleWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Migrate an Azure Cosmos DB Cassandra Keyspace from autoscale to manual throughput
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        public static ThroughputSettingsGetResults MigrateCassandraKeyspaceToManualThroughput(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName)
        {
                return ((ICassandraResourcesOperations)operations).MigrateCassandraKeyspaceToManualThroughputAsync(resourceGroupName, accountName, keyspaceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Migrate an Azure Cosmos DB Cassandra Keyspace from autoscale to manual throughput
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> MigrateCassandraKeyspaceToManualThroughputAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.MigrateCassandraKeyspaceToManualThroughputWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the Cassandra table under an existing Azure Cosmos DB database account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        public static System.Collections.Generic.IEnumerable<CassandraTableGetResults> ListCassandraTables(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName)
        {
                return ((ICassandraResourcesOperations)operations).ListCassandraTablesAsync(resourceGroupName, accountName, keyspaceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the Cassandra table under an existing Azure Cosmos DB database account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<CassandraTableGetResults>> ListCassandraTablesAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListCassandraTablesWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the Cassandra table under an existing Azure Cosmos DB database account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        public static CassandraTableGetResults GetCassandraTable(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName)
        {
                return ((ICassandraResourcesOperations)operations).GetCassandraTableAsync(resourceGroupName, accountName, keyspaceName, tableName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the Cassandra table under an existing Azure Cosmos DB database account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CassandraTableGetResults> GetCassandraTableAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetCassandraTableWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, tableName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update an Azure Cosmos DB Cassandra Table
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        public static CassandraTableGetResults CreateUpdateCassandraTable(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters)
        {
                return ((ICassandraResourcesOperations)operations).CreateUpdateCassandraTableAsync(resourceGroupName, accountName, keyspaceName, tableName, createUpdateCassandraTableParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update an Azure Cosmos DB Cassandra Table
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CassandraTableGetResults> CreateUpdateCassandraTableAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateUpdateCassandraTableWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, tableName, createUpdateCassandraTableParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing Azure Cosmos DB Cassandra table.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        public static CassandraResourcesDeleteCassandraTableHeaders DeleteCassandraTable(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName)
        {
                return ((ICassandraResourcesOperations)operations).DeleteCassandraTableAsync(resourceGroupName, accountName, keyspaceName, tableName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Azure Cosmos DB Cassandra table.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CassandraResourcesDeleteCassandraTableHeaders> DeleteCassandraTableAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteCassandraTableWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, tableName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        public static ThroughputSettingsGetResults GetCassandraTableThroughput(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName)
        {
                return ((ICassandraResourcesOperations)operations).GetCassandraTableThroughputAsync(resourceGroupName, accountName, keyspaceName, tableName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> GetCassandraTableThroughputAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetCassandraTableThroughputWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, tableName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update RUs per second of an Azure Cosmos DB Cassandra table
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        public static ThroughputSettingsGetResults UpdateCassandraTableThroughput(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName, ThroughputSettingsUpdateParameters updateThroughputParameters)
        {
                return ((ICassandraResourcesOperations)operations).UpdateCassandraTableThroughputAsync(resourceGroupName, accountName, keyspaceName, tableName, updateThroughputParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update RUs per second of an Azure Cosmos DB Cassandra table
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> UpdateCassandraTableThroughputAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName, ThroughputSettingsUpdateParameters updateThroughputParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateCassandraTableThroughputWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, tableName, updateThroughputParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Migrate an Azure Cosmos DB Cassandra table from manual throughput to autoscale
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        public static ThroughputSettingsGetResults MigrateCassandraTableToAutoscale(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName)
        {
                return ((ICassandraResourcesOperations)operations).MigrateCassandraTableToAutoscaleAsync(resourceGroupName, accountName, keyspaceName, tableName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Migrate an Azure Cosmos DB Cassandra table from manual throughput to autoscale
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> MigrateCassandraTableToAutoscaleAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.MigrateCassandraTableToAutoscaleWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, tableName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Migrate an Azure Cosmos DB Cassandra table from autoscale to manual throughput
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        public static ThroughputSettingsGetResults MigrateCassandraTableToManualThroughput(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName)
        {
                return ((ICassandraResourcesOperations)operations).MigrateCassandraTableToManualThroughputAsync(resourceGroupName, accountName, keyspaceName, tableName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Migrate an Azure Cosmos DB Cassandra table from autoscale to manual throughput
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> MigrateCassandraTableToManualThroughputAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.MigrateCassandraTableToManualThroughputWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, tableName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update an Azure Cosmos DB Cassandra keyspace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        public static CassandraKeyspaceGetResults BeginCreateUpdateCassandraKeyspace(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters)
        {
                return ((ICassandraResourcesOperations)operations).BeginCreateUpdateCassandraKeyspaceAsync(resourceGroupName, accountName, keyspaceName, createUpdateCassandraKeyspaceParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update an Azure Cosmos DB Cassandra keyspace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CassandraKeyspaceGetResults> BeginCreateUpdateCassandraKeyspaceAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateUpdateCassandraKeyspaceWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, createUpdateCassandraKeyspaceParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing Azure Cosmos DB Cassandra keyspace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        public static CassandraResourcesDeleteCassandraKeyspaceHeaders BeginDeleteCassandraKeyspace(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName)
        {
                return ((ICassandraResourcesOperations)operations).BeginDeleteCassandraKeyspaceAsync(resourceGroupName, accountName, keyspaceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Azure Cosmos DB Cassandra keyspace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CassandraResourcesDeleteCassandraKeyspaceHeaders> BeginDeleteCassandraKeyspaceAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteCassandraKeyspaceWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        public static ThroughputSettingsGetResults BeginUpdateCassandraKeyspaceThroughput(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, ThroughputSettingsUpdateParameters updateThroughputParameters)
        {
                return ((ICassandraResourcesOperations)operations).BeginUpdateCassandraKeyspaceThroughputAsync(resourceGroupName, accountName, keyspaceName, updateThroughputParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> BeginUpdateCassandraKeyspaceThroughputAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, ThroughputSettingsUpdateParameters updateThroughputParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateCassandraKeyspaceThroughputWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, updateThroughputParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Migrate an Azure Cosmos DB Cassandra Keyspace from manual throughput to autoscale
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        public static ThroughputSettingsGetResults BeginMigrateCassandraKeyspaceToAutoscale(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName)
        {
                return ((ICassandraResourcesOperations)operations).BeginMigrateCassandraKeyspaceToAutoscaleAsync(resourceGroupName, accountName, keyspaceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Migrate an Azure Cosmos DB Cassandra Keyspace from manual throughput to autoscale
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> BeginMigrateCassandraKeyspaceToAutoscaleAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginMigrateCassandraKeyspaceToAutoscaleWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Migrate an Azure Cosmos DB Cassandra Keyspace from autoscale to manual throughput
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        public static ThroughputSettingsGetResults BeginMigrateCassandraKeyspaceToManualThroughput(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName)
        {
                return ((ICassandraResourcesOperations)operations).BeginMigrateCassandraKeyspaceToManualThroughputAsync(resourceGroupName, accountName, keyspaceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Migrate an Azure Cosmos DB Cassandra Keyspace from autoscale to manual throughput
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> BeginMigrateCassandraKeyspaceToManualThroughputAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginMigrateCassandraKeyspaceToManualThroughputWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update an Azure Cosmos DB Cassandra Table
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        public static CassandraTableGetResults BeginCreateUpdateCassandraTable(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters)
        {
                return ((ICassandraResourcesOperations)operations).BeginCreateUpdateCassandraTableAsync(resourceGroupName, accountName, keyspaceName, tableName, createUpdateCassandraTableParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update an Azure Cosmos DB Cassandra Table
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CassandraTableGetResults> BeginCreateUpdateCassandraTableAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateUpdateCassandraTableWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, tableName, createUpdateCassandraTableParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing Azure Cosmos DB Cassandra table.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        public static CassandraResourcesDeleteCassandraTableHeaders BeginDeleteCassandraTable(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName)
        {
                return ((ICassandraResourcesOperations)operations).BeginDeleteCassandraTableAsync(resourceGroupName, accountName, keyspaceName, tableName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Azure Cosmos DB Cassandra table.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CassandraResourcesDeleteCassandraTableHeaders> BeginDeleteCassandraTableAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteCassandraTableWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, tableName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Update RUs per second of an Azure Cosmos DB Cassandra table
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        public static ThroughputSettingsGetResults BeginUpdateCassandraTableThroughput(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName, ThroughputSettingsUpdateParameters updateThroughputParameters)
        {
                return ((ICassandraResourcesOperations)operations).BeginUpdateCassandraTableThroughputAsync(resourceGroupName, accountName, keyspaceName, tableName, updateThroughputParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update RUs per second of an Azure Cosmos DB Cassandra table
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> BeginUpdateCassandraTableThroughputAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName, ThroughputSettingsUpdateParameters updateThroughputParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateCassandraTableThroughputWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, tableName, updateThroughputParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Migrate an Azure Cosmos DB Cassandra table from manual throughput to autoscale
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        public static ThroughputSettingsGetResults BeginMigrateCassandraTableToAutoscale(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName)
        {
                return ((ICassandraResourcesOperations)operations).BeginMigrateCassandraTableToAutoscaleAsync(resourceGroupName, accountName, keyspaceName, tableName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Migrate an Azure Cosmos DB Cassandra table from manual throughput to autoscale
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> BeginMigrateCassandraTableToAutoscaleAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginMigrateCassandraTableToAutoscaleWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, tableName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Migrate an Azure Cosmos DB Cassandra table from autoscale to manual throughput
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        public static ThroughputSettingsGetResults BeginMigrateCassandraTableToManualThroughput(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName)
        {
                return ((ICassandraResourcesOperations)operations).BeginMigrateCassandraTableToManualThroughputAsync(resourceGroupName, accountName, keyspaceName, tableName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Migrate an Azure Cosmos DB Cassandra table from autoscale to manual throughput
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='keyspaceName'>
        /// Cosmos DB keyspace name.
        /// </param>
        /// <param name='tableName'>
        /// Cosmos DB table name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> BeginMigrateCassandraTableToManualThroughputAsync(this ICassandraResourcesOperations operations, string resourceGroupName, string accountName, string keyspaceName, string tableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginMigrateCassandraTableToManualThroughputWithHttpMessagesAsync(resourceGroupName, accountName, keyspaceName, tableName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
