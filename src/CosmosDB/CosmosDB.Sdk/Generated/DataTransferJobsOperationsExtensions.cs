// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.CosmosDB
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DataTransferJobsOperations
    /// </summary>
    public static partial class DataTransferJobsOperationsExtensions
    {
        /// <summary>
        /// Creates a Data Transfer Job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='jobName'>
        /// Name of the Data Transfer Job
        /// </param>
        public static DataTransferJobGetResults Create(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName, CreateJobRequest jobCreateParameters)
        {
                return ((IDataTransferJobsOperations)operations).CreateAsync(resourceGroupName, accountName, jobName, jobCreateParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a Data Transfer Job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='jobName'>
        /// Name of the Data Transfer Job
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataTransferJobGetResults> CreateAsync(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName, CreateJobRequest jobCreateParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, jobName, jobCreateParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a Data Transfer Job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='jobName'>
        /// Name of the Data Transfer Job
        /// </param>
        public static DataTransferJobGetResults Get(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName)
        {
                return ((IDataTransferJobsOperations)operations).GetAsync(resourceGroupName, accountName, jobName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a Data Transfer Job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='jobName'>
        /// Name of the Data Transfer Job
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataTransferJobGetResults> GetAsync(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, jobName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Pause a Data Transfer Job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='jobName'>
        /// Name of the Data Transfer Job
        /// </param>
        public static DataTransferJobGetResults Pause(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName)
        {
                return ((IDataTransferJobsOperations)operations).PauseAsync(resourceGroupName, accountName, jobName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Pause a Data Transfer Job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='jobName'>
        /// Name of the Data Transfer Job
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataTransferJobGetResults> PauseAsync(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.PauseWithHttpMessagesAsync(resourceGroupName, accountName, jobName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Resumes a Data Transfer Job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='jobName'>
        /// Name of the Data Transfer Job
        /// </param>
        public static DataTransferJobGetResults Resume(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName)
        {
                return ((IDataTransferJobsOperations)operations).ResumeAsync(resourceGroupName, accountName, jobName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Resumes a Data Transfer Job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='jobName'>
        /// Name of the Data Transfer Job
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataTransferJobGetResults> ResumeAsync(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ResumeWithHttpMessagesAsync(resourceGroupName, accountName, jobName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Cancels a Data Transfer Job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='jobName'>
        /// Name of the Data Transfer Job
        /// </param>
        public static DataTransferJobGetResults Cancel(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName)
        {
                return ((IDataTransferJobsOperations)operations).CancelAsync(resourceGroupName, accountName, jobName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Cancels a Data Transfer Job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='jobName'>
        /// Name of the Data Transfer Job
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataTransferJobGetResults> CancelAsync(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CancelWithHttpMessagesAsync(resourceGroupName, accountName, jobName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Completes a Data Transfer Online Job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='jobName'>
        /// Name of the Data Transfer Job
        /// </param>
        public static DataTransferJobGetResults Complete(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName)
        {
                return ((IDataTransferJobsOperations)operations).CompleteAsync(resourceGroupName, accountName, jobName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Completes a Data Transfer Online Job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='jobName'>
        /// Name of the Data Transfer Job
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataTransferJobGetResults> CompleteAsync(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CompleteWithHttpMessagesAsync(resourceGroupName, accountName, jobName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a list of Data Transfer jobs.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DataTransferJobGetResults> ListByDatabaseAccount(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName)
        {
                return ((IDataTransferJobsOperations)operations).ListByDatabaseAccountAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of Data Transfer jobs.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DataTransferJobGetResults>> ListByDatabaseAccountAsync(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByDatabaseAccountWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a list of Data Transfer jobs.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DataTransferJobGetResults> ListByDatabaseAccountNext(this IDataTransferJobsOperations operations, string nextPageLink)
        {
                return ((IDataTransferJobsOperations)operations).ListByDatabaseAccountNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of Data Transfer jobs.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DataTransferJobGetResults>> ListByDatabaseAccountNextAsync(this IDataTransferJobsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByDatabaseAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
