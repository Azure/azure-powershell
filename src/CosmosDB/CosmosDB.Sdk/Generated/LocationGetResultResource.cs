// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Microsoft.Azure.Management.CosmosDB
{
    /// <summary>
    /// A Class representing a LocationGetResult along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="LocationGetResultResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetLocationGetResultResource method.
    /// Otherwise you can get one from its parent resource <see cref="SubscriptionResource" /> using the GetLocationGetResult method.
    /// </summary>
    public partial class LocationGetResultResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="LocationGetResultResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, AzureLocation location)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _locationGetResultLocationsClientDiagnostics;
        private readonly LocationsRestOperations _locationGetResultLocationsRestClient;
        private readonly LocationGetResultData _data;

        /// <summary> Initializes a new instance of the <see cref="LocationGetResultResource"/> class for mocking. </summary>
        protected LocationGetResultResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "LocationGetResultResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal LocationGetResultResource(ArmClient client, LocationGetResultData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="LocationGetResultResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal LocationGetResultResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _locationGetResultLocationsClientDiagnostics = new ClientDiagnostics("Microsoft.Azure.Management.CosmosDB", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string locationGetResultLocationsApiVersion);
            _locationGetResultLocationsRestClient = new LocationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, locationGetResultLocationsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.DocumentDB/locations";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual LocationGetResultData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of RestorableDatabaseAccountGetResultResources in the LocationGetResult. </summary>
        /// <returns> An object representing collection of RestorableDatabaseAccountGetResultResources and their operations over a RestorableDatabaseAccountGetResultResource. </returns>
        public virtual RestorableDatabaseAccountGetResultCollection GetRestorableDatabaseAccountGetResults()
        {
            return GetCachedClient(Client => new RestorableDatabaseAccountGetResultCollection(Client, Id));
        }

        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB restorable database account.  This call requires &apos;Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read/*&apos; permission.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}
        /// Operation Id: RestorableDatabaseAccounts_GetByLocation
        /// </summary>
        /// <param name="instanceId"> The instanceId GUID of a restorable database account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<RestorableDatabaseAccountGetResultResource>> GetRestorableDatabaseAccountGetResultAsync(string instanceId, CancellationToken cancellationToken = default)
        {
            return await GetRestorableDatabaseAccountGetResults().GetAsync(instanceId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB restorable database account.  This call requires &apos;Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read/*&apos; permission.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}
        /// Operation Id: RestorableDatabaseAccounts_GetByLocation
        /// </summary>
        /// <param name="instanceId"> The instanceId GUID of a restorable database account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instanceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<RestorableDatabaseAccountGetResultResource> GetRestorableDatabaseAccountGetResult(string instanceId, CancellationToken cancellationToken = default)
        {
            return GetRestorableDatabaseAccountGetResults().Get(instanceId, cancellationToken);
        }

        /// <summary>
        /// Get the properties of an existing Cosmos DB location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}
        /// Operation Id: Locations_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<LocationGetResultResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _locationGetResultLocationsClientDiagnostics.CreateScope("LocationGetResultResource.Get");
            scope.Start();
            try
            {
                var response = await _locationGetResultLocationsRestClient.GetAsync(Id.SubscriptionId, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new LocationGetResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the properties of an existing Cosmos DB location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}
        /// Operation Id: Locations_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<LocationGetResultResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _locationGetResultLocationsClientDiagnostics.CreateScope("LocationGetResultResource.Get");
            scope.Start();
            try
            {
                var response = _locationGetResultLocationsRestClient.Get(Id.SubscriptionId, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new LocationGetResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
