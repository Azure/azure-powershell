// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Microsoft.Azure.Management.CosmosDB
{
    /// <summary> A class to add extension methods to Microsoft.Azure.Management.CosmosDB. </summary>
    public static partial class CosmosDBExtensions
    {
        private static TenantResourceExtensionClient GetExtensionClient(TenantResource tenantResource)
        {
            return tenantResource.GetCachedClient((client) =>
            {
                return new TenantResourceExtensionClient(client, tenantResource.Id);
            }
            );
        }

        /// <summary>
        /// Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the &apos;-&apos; character, and must be between 3 and 50 characters.
        /// Request Path: /providers/Microsoft.DocumentDB/databaseAccountNames/{accountName}
        /// Operation Id: DatabaseAccounts_CheckNameExists
        /// </summary>
        /// <param name="tenantResource"> The <see cref="Azure.ResourceManager.Resources.TenantResource" /> instance the method will execute against. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        public static async Task<Response<bool>> CheckNameExistsDatabaseAccountAsync(this TenantResource tenantResource, string accountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            return await GetExtensionClient(tenantResource).CheckNameExistsDatabaseAccountAsync(accountName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the &apos;-&apos; character, and must be between 3 and 50 characters.
        /// Request Path: /providers/Microsoft.DocumentDB/databaseAccountNames/{accountName}
        /// Operation Id: DatabaseAccounts_CheckNameExists
        /// </summary>
        /// <param name="tenantResource"> The <see cref="Azure.ResourceManager.Resources.TenantResource" /> instance the method will execute against. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        public static Response<bool> CheckNameExistsDatabaseAccount(this TenantResource tenantResource, string accountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            return GetExtensionClient(tenantResource).CheckNameExistsDatabaseAccount(accountName, cancellationToken);
        }

        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of LocationGetResultResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of LocationGetResultResources and their operations over a LocationGetResultResource. </returns>
        public static LocationGetResultCollection GetLocationGetResults(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetLocationGetResults();
        }

        /// <summary>
        /// Get the properties of an existing Cosmos DB location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}
        /// Operation Id: Locations_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> Cosmos DB region, with spaces between words and each word capitalized. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<LocationGetResultResource>> GetLocationGetResultAsync(this SubscriptionResource subscriptionResource, string location, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetLocationGetResults().GetAsync(location, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the properties of an existing Cosmos DB location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}
        /// Operation Id: Locations_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> Cosmos DB region, with spaces between words and each word capitalized. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<LocationGetResultResource> GetLocationGetResult(this SubscriptionResource subscriptionResource, string location, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetLocationGetResults().Get(location, cancellationToken);
        }

        /// <summary>
        /// Lists all the Azure Cosmos DB database accounts available under the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts
        /// Operation Id: DatabaseAccounts_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DatabaseAccountGetResultResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<DatabaseAccountGetResultResource> GetDatabaseAccountGetResultsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetDatabaseAccountGetResultsAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all the Azure Cosmos DB database accounts available under the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts
        /// Operation Id: DatabaseAccounts_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DatabaseAccountGetResultResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<DatabaseAccountGetResultResource> GetDatabaseAccountGetResults(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetDatabaseAccountGetResults(cancellationToken);
        }

        /// <summary>
        /// List all managed Cassandra clusters in this subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/cassandraClusters
        /// Operation Id: CassandraClusters_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ClusterResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ClusterResource> GetClusterResourcesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetClusterResourcesAsync(cancellationToken);
        }

        /// <summary>
        /// List all managed Cassandra clusters in this subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/cassandraClusters
        /// Operation Id: CassandraClusters_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ClusterResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ClusterResource> GetClusterResources(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetClusterResources(cancellationToken);
        }

        /// <summary>
        /// Lists all the restorable Azure Cosmos DB database accounts available under the subscription. This call requires &apos;Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read&apos; permission.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/restorableDatabaseAccounts
        /// Operation Id: RestorableDatabaseAccounts_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="RestorableDatabaseAccountGetResultResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<RestorableDatabaseAccountGetResultResource> GetRestorableDatabaseAccountGetResultsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetRestorableDatabaseAccountGetResultsAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all the restorable Azure Cosmos DB database accounts available under the subscription. This call requires &apos;Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read&apos; permission.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/restorableDatabaseAccounts
        /// Operation Id: RestorableDatabaseAccounts_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="RestorableDatabaseAccountGetResultResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<RestorableDatabaseAccountGetResultResource> GetRestorableDatabaseAccountGetResults(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetRestorableDatabaseAccountGetResults(cancellationToken);
        }

        private static ResourceGroupResourceExtensionClient GetExtensionClient(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient((client) =>
            {
                return new ResourceGroupResourceExtensionClient(client, resourceGroupResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of DatabaseAccountGetResultResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of DatabaseAccountGetResultResources and their operations over a DatabaseAccountGetResultResource. </returns>
        public static DatabaseAccountGetResultCollection GetDatabaseAccountGetResults(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetDatabaseAccountGetResults();
        }

        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB database account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}
        /// Operation Id: DatabaseAccounts_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<DatabaseAccountGetResultResource>> GetDatabaseAccountGetResultAsync(this ResourceGroupResource resourceGroupResource, string accountName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetDatabaseAccountGetResults().GetAsync(accountName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB database account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}
        /// Operation Id: DatabaseAccounts_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<DatabaseAccountGetResultResource> GetDatabaseAccountGetResult(this ResourceGroupResource resourceGroupResource, string accountName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetDatabaseAccountGetResults().Get(accountName, cancellationToken);
        }

        /// <summary> Gets a collection of ClusterResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ClusterResources and their operations over a ClusterResource. </returns>
        public static ClusterResourceCollection GetClusterResources(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetClusterResources();
        }

        /// <summary>
        /// Get the properties of a managed Cassandra cluster.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}
        /// Operation Id: CassandraClusters_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="clusterName"> Managed Cassandra cluster name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="clusterName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="clusterName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ClusterResource>> GetClusterResourceAsync(this ResourceGroupResource resourceGroupResource, string clusterName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetClusterResources().GetAsync(clusterName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the properties of a managed Cassandra cluster.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}
        /// Operation Id: CassandraClusters_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="clusterName"> Managed Cassandra cluster name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="clusterName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="clusterName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ClusterResource> GetClusterResource(this ResourceGroupResource resourceGroupResource, string clusterName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetClusterResources().Get(clusterName, cancellationToken);
        }

        #region DatabaseAccountGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountGetResultResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountGetResultResource" /> object. </returns>
        public static DatabaseAccountGetResultResource GetDatabaseAccountGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountGetResultResource.ValidateResourceId(id);
                return new DatabaseAccountGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region GraphResourceGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="GraphResourceGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="GraphResourceGetResultResource.CreateResourceIdentifier" /> to create a <see cref="GraphResourceGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="GraphResourceGetResultResource" /> object. </returns>
        public static GraphResourceGetResultResource GetGraphResourceGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                GraphResourceGetResultResource.ValidateResourceId(id);
                return new GraphResourceGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region SqlDatabaseGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="SqlDatabaseGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlDatabaseGetResultResource.CreateResourceIdentifier" /> to create a <see cref="SqlDatabaseGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlDatabaseGetResultResource" /> object. </returns>
        public static SqlDatabaseGetResultResource GetSqlDatabaseGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlDatabaseGetResultResource.ValidateResourceId(id);
                return new SqlDatabaseGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountSqlDatabaseThroughputSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountSqlDatabaseThroughputSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountSqlDatabaseThroughputSettingResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountSqlDatabaseThroughputSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountSqlDatabaseThroughputSettingResource" /> object. </returns>
        public static DatabaseAccountSqlDatabaseThroughputSettingResource GetDatabaseAccountSqlDatabaseThroughputSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountSqlDatabaseThroughputSettingResource.ValidateResourceId(id);
                return new DatabaseAccountSqlDatabaseThroughputSettingResource(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountSqlDatabaseContainerThroughputSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountSqlDatabaseContainerThroughputSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountSqlDatabaseContainerThroughputSettingResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountSqlDatabaseContainerThroughputSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountSqlDatabaseContainerThroughputSettingResource" /> object. </returns>
        public static DatabaseAccountSqlDatabaseContainerThroughputSettingResource GetDatabaseAccountSqlDatabaseContainerThroughputSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountSqlDatabaseContainerThroughputSettingResource.ValidateResourceId(id);
                return new DatabaseAccountSqlDatabaseContainerThroughputSettingResource(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountMongodbDatabaseThroughputSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountMongodbDatabaseThroughputSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountMongodbDatabaseThroughputSettingResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountMongodbDatabaseThroughputSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountMongodbDatabaseThroughputSettingResource" /> object. </returns>
        public static DatabaseAccountMongodbDatabaseThroughputSettingResource GetDatabaseAccountMongodbDatabaseThroughputSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountMongodbDatabaseThroughputSettingResource.ValidateResourceId(id);
                return new DatabaseAccountMongodbDatabaseThroughputSettingResource(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountMongodbDatabaseCollectionThroughputSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountMongodbDatabaseCollectionThroughputSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountMongodbDatabaseCollectionThroughputSettingResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountMongodbDatabaseCollectionThroughputSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountMongodbDatabaseCollectionThroughputSettingResource" /> object. </returns>
        public static DatabaseAccountMongodbDatabaseCollectionThroughputSettingResource GetDatabaseAccountMongodbDatabaseCollectionThroughputSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountMongodbDatabaseCollectionThroughputSettingResource.ValidateResourceId(id);
                return new DatabaseAccountMongodbDatabaseCollectionThroughputSettingResource(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountTableThroughputSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountTableThroughputSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountTableThroughputSettingResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountTableThroughputSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountTableThroughputSettingResource" /> object. </returns>
        public static DatabaseAccountTableThroughputSettingResource GetDatabaseAccountTableThroughputSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountTableThroughputSettingResource.ValidateResourceId(id);
                return new DatabaseAccountTableThroughputSettingResource(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountCassandraKeyspaceThroughputSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountCassandraKeyspaceThroughputSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountCassandraKeyspaceThroughputSettingResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountCassandraKeyspaceThroughputSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountCassandraKeyspaceThroughputSettingResource" /> object. </returns>
        public static DatabaseAccountCassandraKeyspaceThroughputSettingResource GetDatabaseAccountCassandraKeyspaceThroughputSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountCassandraKeyspaceThroughputSettingResource.ValidateResourceId(id);
                return new DatabaseAccountCassandraKeyspaceThroughputSettingResource(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountCassandraKeyspaceTableThroughputSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountCassandraKeyspaceTableThroughputSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountCassandraKeyspaceTableThroughputSettingResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountCassandraKeyspaceTableThroughputSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountCassandraKeyspaceTableThroughputSettingResource" /> object. </returns>
        public static DatabaseAccountCassandraKeyspaceTableThroughputSettingResource GetDatabaseAccountCassandraKeyspaceTableThroughputSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountCassandraKeyspaceTableThroughputSettingResource.ValidateResourceId(id);
                return new DatabaseAccountCassandraKeyspaceTableThroughputSettingResource(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountCassandraKeyspaceViewThroughputSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountCassandraKeyspaceViewThroughputSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountCassandraKeyspaceViewThroughputSettingResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountCassandraKeyspaceViewThroughputSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountCassandraKeyspaceViewThroughputSettingResource" /> object. </returns>
        public static DatabaseAccountCassandraKeyspaceViewThroughputSettingResource GetDatabaseAccountCassandraKeyspaceViewThroughputSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountCassandraKeyspaceViewThroughputSettingResource.ValidateResourceId(id);
                return new DatabaseAccountCassandraKeyspaceViewThroughputSettingResource(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountGremlinDatabaseThroughputSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountGremlinDatabaseThroughputSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountGremlinDatabaseThroughputSettingResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountGremlinDatabaseThroughputSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountGremlinDatabaseThroughputSettingResource" /> object. </returns>
        public static DatabaseAccountGremlinDatabaseThroughputSettingResource GetDatabaseAccountGremlinDatabaseThroughputSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountGremlinDatabaseThroughputSettingResource.ValidateResourceId(id);
                return new DatabaseAccountGremlinDatabaseThroughputSettingResource(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountGremlinDatabaseGraphThroughputSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountGremlinDatabaseGraphThroughputSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountGremlinDatabaseGraphThroughputSettingResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountGremlinDatabaseGraphThroughputSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountGremlinDatabaseGraphThroughputSettingResource" /> object. </returns>
        public static DatabaseAccountGremlinDatabaseGraphThroughputSettingResource GetDatabaseAccountGremlinDatabaseGraphThroughputSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountGremlinDatabaseGraphThroughputSettingResource.ValidateResourceId(id);
                return new DatabaseAccountGremlinDatabaseGraphThroughputSettingResource(client, id);
            }
            );
        }
        #endregion

        #region ClientEncryptionKeyGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="ClientEncryptionKeyGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ClientEncryptionKeyGetResultResource.CreateResourceIdentifier" /> to create a <see cref="ClientEncryptionKeyGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ClientEncryptionKeyGetResultResource" /> object. </returns>
        public static ClientEncryptionKeyGetResultResource GetClientEncryptionKeyGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ClientEncryptionKeyGetResultResource.ValidateResourceId(id);
                return new ClientEncryptionKeyGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region SqlContainerGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="SqlContainerGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlContainerGetResultResource.CreateResourceIdentifier" /> to create a <see cref="SqlContainerGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlContainerGetResultResource" /> object. </returns>
        public static SqlContainerGetResultResource GetSqlContainerGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlContainerGetResultResource.ValidateResourceId(id);
                return new SqlContainerGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region SqlStoredProcedureGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="SqlStoredProcedureGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlStoredProcedureGetResultResource.CreateResourceIdentifier" /> to create a <see cref="SqlStoredProcedureGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlStoredProcedureGetResultResource" /> object. </returns>
        public static SqlStoredProcedureGetResultResource GetSqlStoredProcedureGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlStoredProcedureGetResultResource.ValidateResourceId(id);
                return new SqlStoredProcedureGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region SqlUserDefinedFunctionGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="SqlUserDefinedFunctionGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlUserDefinedFunctionGetResultResource.CreateResourceIdentifier" /> to create a <see cref="SqlUserDefinedFunctionGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlUserDefinedFunctionGetResultResource" /> object. </returns>
        public static SqlUserDefinedFunctionGetResultResource GetSqlUserDefinedFunctionGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlUserDefinedFunctionGetResultResource.ValidateResourceId(id);
                return new SqlUserDefinedFunctionGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region SqlTriggerGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="SqlTriggerGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlTriggerGetResultResource.CreateResourceIdentifier" /> to create a <see cref="SqlTriggerGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlTriggerGetResultResource" /> object. </returns>
        public static SqlTriggerGetResultResource GetSqlTriggerGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlTriggerGetResultResource.ValidateResourceId(id);
                return new SqlTriggerGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region SqlRoleDefinitionGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="SqlRoleDefinitionGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlRoleDefinitionGetResultResource.CreateResourceIdentifier" /> to create a <see cref="SqlRoleDefinitionGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlRoleDefinitionGetResultResource" /> object. </returns>
        public static SqlRoleDefinitionGetResultResource GetSqlRoleDefinitionGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlRoleDefinitionGetResultResource.ValidateResourceId(id);
                return new SqlRoleDefinitionGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region SqlRoleAssignmentGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="SqlRoleAssignmentGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlRoleAssignmentGetResultResource.CreateResourceIdentifier" /> to create a <see cref="SqlRoleAssignmentGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlRoleAssignmentGetResultResource" /> object. </returns>
        public static SqlRoleAssignmentGetResultResource GetSqlRoleAssignmentGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlRoleAssignmentGetResultResource.ValidateResourceId(id);
                return new SqlRoleAssignmentGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region MongoDBDatabaseGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="MongoDBDatabaseGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="MongoDBDatabaseGetResultResource.CreateResourceIdentifier" /> to create a <see cref="MongoDBDatabaseGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MongoDBDatabaseGetResultResource" /> object. </returns>
        public static MongoDBDatabaseGetResultResource GetMongoDBDatabaseGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                MongoDBDatabaseGetResultResource.ValidateResourceId(id);
                return new MongoDBDatabaseGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region MongoDBCollectionGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="MongoDBCollectionGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="MongoDBCollectionGetResultResource.CreateResourceIdentifier" /> to create a <see cref="MongoDBCollectionGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MongoDBCollectionGetResultResource" /> object. </returns>
        public static MongoDBCollectionGetResultResource GetMongoDBCollectionGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                MongoDBCollectionGetResultResource.ValidateResourceId(id);
                return new MongoDBCollectionGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region MongoDBRoleDefinitionResource
        /// <summary>
        /// Gets an object representing a <see cref="MongoDBRoleDefinitionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="MongoDBRoleDefinitionResource.CreateResourceIdentifier" /> to create a <see cref="MongoDBRoleDefinitionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MongoDBRoleDefinitionResource" /> object. </returns>
        public static MongoDBRoleDefinitionResource GetMongoDBRoleDefinitionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                MongoDBRoleDefinitionResource.ValidateResourceId(id);
                return new MongoDBRoleDefinitionResource(client, id);
            }
            );
        }
        #endregion

        #region MongoDBUserDefinitionResource
        /// <summary>
        /// Gets an object representing a <see cref="MongoDBUserDefinitionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="MongoDBUserDefinitionResource.CreateResourceIdentifier" /> to create a <see cref="MongoDBUserDefinitionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MongoDBUserDefinitionResource" /> object. </returns>
        public static MongoDBUserDefinitionResource GetMongoDBUserDefinitionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                MongoDBUserDefinitionResource.ValidateResourceId(id);
                return new MongoDBUserDefinitionResource(client, id);
            }
            );
        }
        #endregion

        #region TableGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="TableGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="TableGetResultResource.CreateResourceIdentifier" /> to create a <see cref="TableGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="TableGetResultResource" /> object. </returns>
        public static TableGetResultResource GetTableGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                TableGetResultResource.ValidateResourceId(id);
                return new TableGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region CassandraKeyspaceGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="CassandraKeyspaceGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CassandraKeyspaceGetResultResource.CreateResourceIdentifier" /> to create a <see cref="CassandraKeyspaceGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CassandraKeyspaceGetResultResource" /> object. </returns>
        public static CassandraKeyspaceGetResultResource GetCassandraKeyspaceGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CassandraKeyspaceGetResultResource.ValidateResourceId(id);
                return new CassandraKeyspaceGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region CassandraTableGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="CassandraTableGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CassandraTableGetResultResource.CreateResourceIdentifier" /> to create a <see cref="CassandraTableGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CassandraTableGetResultResource" /> object. </returns>
        public static CassandraTableGetResultResource GetCassandraTableGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CassandraTableGetResultResource.ValidateResourceId(id);
                return new CassandraTableGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region CassandraViewGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="CassandraViewGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CassandraViewGetResultResource.CreateResourceIdentifier" /> to create a <see cref="CassandraViewGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CassandraViewGetResultResource" /> object. </returns>
        public static CassandraViewGetResultResource GetCassandraViewGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CassandraViewGetResultResource.ValidateResourceId(id);
                return new CassandraViewGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region GremlinDatabaseGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="GremlinDatabaseGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="GremlinDatabaseGetResultResource.CreateResourceIdentifier" /> to create a <see cref="GremlinDatabaseGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="GremlinDatabaseGetResultResource" /> object. </returns>
        public static GremlinDatabaseGetResultResource GetGremlinDatabaseGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                GremlinDatabaseGetResultResource.ValidateResourceId(id);
                return new GremlinDatabaseGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region GremlinGraphGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="GremlinGraphGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="GremlinGraphGetResultResource.CreateResourceIdentifier" /> to create a <see cref="GremlinGraphGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="GremlinGraphGetResultResource" /> object. </returns>
        public static GremlinGraphGetResultResource GetGremlinGraphGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                GremlinGraphGetResultResource.ValidateResourceId(id);
                return new GremlinGraphGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region LocationGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="LocationGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LocationGetResultResource.CreateResourceIdentifier" /> to create a <see cref="LocationGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="LocationGetResultResource" /> object. </returns>
        public static LocationGetResultResource GetLocationGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                LocationGetResultResource.ValidateResourceId(id);
                return new LocationGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region DataTransferJobGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="DataTransferJobGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DataTransferJobGetResultResource.CreateResourceIdentifier" /> to create a <see cref="DataTransferJobGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DataTransferJobGetResultResource" /> object. </returns>
        public static DataTransferJobGetResultResource GetDataTransferJobGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DataTransferJobGetResultResource.ValidateResourceId(id);
                return new DataTransferJobGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region ClusterResource
        /// <summary>
        /// Gets an object representing a <see cref="ClusterResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ClusterResource.CreateResourceIdentifier" /> to create a <see cref="ClusterResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ClusterResource" /> object. </returns>
        public static ClusterResource GetClusterResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ClusterResource.ValidateResourceId(id);
                return new ClusterResource(client, id);
            }
            );
        }
        #endregion

        #region BackupResource
        /// <summary>
        /// Gets an object representing a <see cref="BackupResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="BackupResource.CreateResourceIdentifier" /> to create a <see cref="BackupResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="BackupResource" /> object. </returns>
        public static BackupResource GetBackupResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                BackupResource.ValidateResourceId(id);
                return new BackupResource(client, id);
            }
            );
        }
        #endregion

        #region DataCenterResource
        /// <summary>
        /// Gets an object representing a <see cref="DataCenterResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DataCenterResource.CreateResourceIdentifier" /> to create a <see cref="DataCenterResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DataCenterResource" /> object. </returns>
        public static DataCenterResource GetDataCenterResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DataCenterResource.ValidateResourceId(id);
                return new DataCenterResource(client, id);
            }
            );
        }
        #endregion

        #region NotebookWorkspaceResource
        /// <summary>
        /// Gets an object representing a <see cref="NotebookWorkspaceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="NotebookWorkspaceResource.CreateResourceIdentifier" /> to create a <see cref="NotebookWorkspaceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NotebookWorkspaceResource" /> object. </returns>
        public static NotebookWorkspaceResource GetNotebookWorkspaceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                NotebookWorkspaceResource.ValidateResourceId(id);
                return new NotebookWorkspaceResource(client, id);
            }
            );
        }
        #endregion

        #region RestorableDatabaseAccountGetResultResource
        /// <summary>
        /// Gets an object representing a <see cref="RestorableDatabaseAccountGetResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="RestorableDatabaseAccountGetResultResource.CreateResourceIdentifier" /> to create a <see cref="RestorableDatabaseAccountGetResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RestorableDatabaseAccountGetResultResource" /> object. </returns>
        public static RestorableDatabaseAccountGetResultResource GetRestorableDatabaseAccountGetResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                RestorableDatabaseAccountGetResultResource.ValidateResourceId(id);
                return new RestorableDatabaseAccountGetResultResource(client, id);
            }
            );
        }
        #endregion

        #region ServiceResource
        /// <summary>
        /// Gets an object representing a <see cref="ServiceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceResource.CreateResourceIdentifier" /> to create a <see cref="ServiceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceResource" /> object. </returns>
        public static ServiceResource GetServiceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServiceResource.ValidateResourceId(id);
                return new ServiceResource(client, id);
            }
            );
        }
        #endregion
    }
}
