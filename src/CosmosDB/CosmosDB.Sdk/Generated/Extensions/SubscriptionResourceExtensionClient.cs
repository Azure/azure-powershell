// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Microsoft.Azure.Management.CosmosDB
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _databaseAccountGetResultDatabaseAccountsClientDiagnostics;
        private DatabaseAccountsRestOperations _databaseAccountGetResultDatabaseAccountsRestClient;
        private ClientDiagnostics _clusterResourceCassandraClustersClientDiagnostics;
        private CassandraClustersRestOperations _clusterResourceCassandraClustersRestClient;
        private ClientDiagnostics _restorableDatabaseAccountGetResultRestorableDatabaseAccountsClientDiagnostics;
        private RestorableDatabaseAccountsRestOperations _restorableDatabaseAccountGetResultRestorableDatabaseAccountsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics DatabaseAccountGetResultDatabaseAccountsClientDiagnostics => _databaseAccountGetResultDatabaseAccountsClientDiagnostics ??= new ClientDiagnostics("Microsoft.Azure.Management.CosmosDB", DatabaseAccountGetResultResource.ResourceType.Namespace, Diagnostics);
        private DatabaseAccountsRestOperations DatabaseAccountGetResultDatabaseAccountsRestClient => _databaseAccountGetResultDatabaseAccountsRestClient ??= new DatabaseAccountsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(DatabaseAccountGetResultResource.ResourceType));
        private ClientDiagnostics ClusterResourceCassandraClustersClientDiagnostics => _clusterResourceCassandraClustersClientDiagnostics ??= new ClientDiagnostics("Microsoft.Azure.Management.CosmosDB", ClusterResource.ResourceType.Namespace, Diagnostics);
        private CassandraClustersRestOperations ClusterResourceCassandraClustersRestClient => _clusterResourceCassandraClustersRestClient ??= new CassandraClustersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ClusterResource.ResourceType));
        private ClientDiagnostics RestorableDatabaseAccountGetResultRestorableDatabaseAccountsClientDiagnostics => _restorableDatabaseAccountGetResultRestorableDatabaseAccountsClientDiagnostics ??= new ClientDiagnostics("Microsoft.Azure.Management.CosmosDB", RestorableDatabaseAccountGetResultResource.ResourceType.Namespace, Diagnostics);
        private RestorableDatabaseAccountsRestOperations RestorableDatabaseAccountGetResultRestorableDatabaseAccountsRestClient => _restorableDatabaseAccountGetResultRestorableDatabaseAccountsRestClient ??= new RestorableDatabaseAccountsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(RestorableDatabaseAccountGetResultResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of LocationGetResultResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of LocationGetResultResources and their operations over a LocationGetResultResource. </returns>
        public virtual LocationGetResultCollection GetLocationGetResults()
        {
            return GetCachedClient(Client => new LocationGetResultCollection(Client, Id));
        }

        /// <summary>
        /// Lists all the Azure Cosmos DB database accounts available under the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts
        /// Operation Id: DatabaseAccounts_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DatabaseAccountGetResultResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DatabaseAccountGetResultResource> GetDatabaseAccountGetResultsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<DatabaseAccountGetResultResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DatabaseAccountGetResultDatabaseAccountsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetDatabaseAccountGetResults");
                scope.Start();
                try
                {
                    var response = await DatabaseAccountGetResultDatabaseAccountsRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DatabaseAccountGetResultResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Lists all the Azure Cosmos DB database accounts available under the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts
        /// Operation Id: DatabaseAccounts_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DatabaseAccountGetResultResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DatabaseAccountGetResultResource> GetDatabaseAccountGetResults(CancellationToken cancellationToken = default)
        {
            Page<DatabaseAccountGetResultResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DatabaseAccountGetResultDatabaseAccountsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetDatabaseAccountGetResults");
                scope.Start();
                try
                {
                    var response = DatabaseAccountGetResultDatabaseAccountsRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DatabaseAccountGetResultResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// List all managed Cassandra clusters in this subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/cassandraClusters
        /// Operation Id: CassandraClusters_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ClusterResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ClusterResource> GetClusterResourcesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ClusterResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ClusterResourceCassandraClustersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetClusterResources");
                scope.Start();
                try
                {
                    var response = await ClusterResourceCassandraClustersRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ClusterResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// List all managed Cassandra clusters in this subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/cassandraClusters
        /// Operation Id: CassandraClusters_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ClusterResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ClusterResource> GetClusterResources(CancellationToken cancellationToken = default)
        {
            Page<ClusterResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ClusterResourceCassandraClustersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetClusterResources");
                scope.Start();
                try
                {
                    var response = ClusterResourceCassandraClustersRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ClusterResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Lists all the restorable Azure Cosmos DB database accounts available under the subscription. This call requires &apos;Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read&apos; permission.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/restorableDatabaseAccounts
        /// Operation Id: RestorableDatabaseAccounts_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="RestorableDatabaseAccountGetResultResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<RestorableDatabaseAccountGetResultResource> GetRestorableDatabaseAccountGetResultsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<RestorableDatabaseAccountGetResultResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = RestorableDatabaseAccountGetResultRestorableDatabaseAccountsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetRestorableDatabaseAccountGetResults");
                scope.Start();
                try
                {
                    var response = await RestorableDatabaseAccountGetResultRestorableDatabaseAccountsRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new RestorableDatabaseAccountGetResultResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Lists all the restorable Azure Cosmos DB database accounts available under the subscription. This call requires &apos;Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read&apos; permission.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/restorableDatabaseAccounts
        /// Operation Id: RestorableDatabaseAccounts_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="RestorableDatabaseAccountGetResultResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<RestorableDatabaseAccountGetResultResource> GetRestorableDatabaseAccountGetResults(CancellationToken cancellationToken = default)
        {
            Page<RestorableDatabaseAccountGetResultResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = RestorableDatabaseAccountGetResultRestorableDatabaseAccountsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetRestorableDatabaseAccountGetResults");
                scope.Start();
                try
                {
                    var response = RestorableDatabaseAccountGetResultRestorableDatabaseAccountsRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new RestorableDatabaseAccountGetResultResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }
    }
}
