// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB
{
    using System.Linq;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Azure Cosmos DB Database Service Resource Provider REST API
    /// </summary>
    public partial class CosmosDBManagementClient : Microsoft.Rest.ServiceClient<CosmosDBManagementClient>, ICosmosDBManagementClient, IAzureClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }
        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; private set; }
        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; private set; }
        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        public Microsoft.Rest.ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// The API version to use for this operation.
        /// </summary>
        public string ApiVersion { get; private set; }

        /// <summary>
        /// The ID of the target subscription.
        /// </summary>
        public string SubscriptionId { get; set;}

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set;}

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default
        /// value is 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set;}

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When 
        /// set to true a unique x-ms-client-request-id value is generated and 
        /// included in each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set;}

        /// <summary>
        /// Gets the IDatabaseAccountsOperations
        /// </summary>
        public virtual IDatabaseAccountsOperations DatabaseAccounts { get; private set; }
        /// <summary>
        /// Gets the IOperations
        /// </summary>
        public virtual IOperations Operations { get; private set; }
        /// <summary>
        /// Gets the IDatabaseOperations
        /// </summary>
        public virtual IDatabaseOperations Database { get; private set; }
        /// <summary>
        /// Gets the ICollectionOperations
        /// </summary>
        public virtual ICollectionOperations Collection { get; private set; }
        /// <summary>
        /// Gets the ICollectionRegionOperations
        /// </summary>
        public virtual ICollectionRegionOperations CollectionRegion { get; private set; }
        /// <summary>
        /// Gets the IDatabaseAccountRegionOperations
        /// </summary>
        public virtual IDatabaseAccountRegionOperations DatabaseAccountRegion { get; private set; }
        /// <summary>
        /// Gets the IPercentileSourceTargetOperations
        /// </summary>
        public virtual IPercentileSourceTargetOperations PercentileSourceTarget { get; private set; }
        /// <summary>
        /// Gets the IPercentileTargetOperations
        /// </summary>
        public virtual IPercentileTargetOperations PercentileTarget { get; private set; }
        /// <summary>
        /// Gets the IPercentileOperations
        /// </summary>
        public virtual IPercentileOperations Percentile { get; private set; }
        /// <summary>
        /// Gets the ICollectionPartitionRegionOperations
        /// </summary>
        public virtual ICollectionPartitionRegionOperations CollectionPartitionRegion { get; private set; }
        /// <summary>
        /// Gets the ICollectionPartitionOperations
        /// </summary>
        public virtual ICollectionPartitionOperations CollectionPartition { get; private set; }
        /// <summary>
        /// Gets the IPartitionKeyRangeIdOperations
        /// </summary>
        public virtual IPartitionKeyRangeIdOperations PartitionKeyRangeId { get; private set; }
        /// <summary>
        /// Gets the IPartitionKeyRangeIdRegionOperations
        /// </summary>
        public virtual IPartitionKeyRangeIdRegionOperations PartitionKeyRangeIdRegion { get; private set; }
        /// <summary>
        /// Gets the ISqlResourcesOperations
        /// </summary>
        public virtual ISqlResourcesOperations SqlResources { get; private set; }
        /// <summary>
        /// Gets the IMongoDbResourcesOperations
        /// </summary>
        public virtual IMongoDbResourcesOperations MongoDbResources { get; private set; }
        /// <summary>
        /// Gets the ITableResourcesOperations
        /// </summary>
        public virtual ITableResourcesOperations TableResources { get; private set; }
        /// <summary>
        /// Gets the ICassandraResourcesOperations
        /// </summary>
        public virtual ICassandraResourcesOperations CassandraResources { get; private set; }
        /// <summary>
        /// Gets the IGremlinResourcesOperations
        /// </summary>
        public virtual IGremlinResourcesOperations GremlinResources { get; private set; }
        /// <summary>
        /// Gets the ILocationsOperations
        /// </summary>
        public virtual ILocationsOperations Locations { get; private set; }
        /// <summary>
        /// Gets the ICassandraClustersOperations
        /// </summary>
        public virtual ICassandraClustersOperations CassandraClusters { get; private set; }
        /// <summary>
        /// Gets the ICassandraDataCentersOperations
        /// </summary>
        public virtual ICassandraDataCentersOperations CassandraDataCenters { get; private set; }
        /// <summary>
        /// Gets the INotebookWorkspacesOperations
        /// </summary>
        public virtual INotebookWorkspacesOperations NotebookWorkspaces { get; private set; }
        /// <summary>
        /// Gets the IPrivateEndpointConnectionsOperations
        /// </summary>
        public virtual IPrivateEndpointConnectionsOperations PrivateEndpointConnections { get; private set; }
        /// <summary>
        /// Gets the IPrivateLinkResourcesOperations
        /// </summary>
        public virtual IPrivateLinkResourcesOperations PrivateLinkResources { get; private set; }
        /// <summary>
        /// Gets the IRestorableDatabaseAccountsOperations
        /// </summary>
        public virtual IRestorableDatabaseAccountsOperations RestorableDatabaseAccounts { get; private set; }
        /// <summary>
        /// Gets the IRestorableSqlDatabasesOperations
        /// </summary>
        public virtual IRestorableSqlDatabasesOperations RestorableSqlDatabases { get; private set; }
        /// <summary>
        /// Gets the IRestorableSqlContainersOperations
        /// </summary>
        public virtual IRestorableSqlContainersOperations RestorableSqlContainers { get; private set; }
        /// <summary>
        /// Gets the IRestorableSqlResourcesOperations
        /// </summary>
        public virtual IRestorableSqlResourcesOperations RestorableSqlResources { get; private set; }
        /// <summary>
        /// Gets the IRestorableMongodbDatabasesOperations
        /// </summary>
        public virtual IRestorableMongodbDatabasesOperations RestorableMongodbDatabases { get; private set; }
        /// <summary>
        /// Gets the IRestorableMongodbCollectionsOperations
        /// </summary>
        public virtual IRestorableMongodbCollectionsOperations RestorableMongodbCollections { get; private set; }
        /// <summary>
        /// Gets the IRestorableMongodbResourcesOperations
        /// </summary>
        public virtual IRestorableMongodbResourcesOperations RestorableMongodbResources { get; private set; }
        /// <summary>
        /// Gets the IRestorableGremlinDatabasesOperations
        /// </summary>
        public virtual IRestorableGremlinDatabasesOperations RestorableGremlinDatabases { get; private set; }
        /// <summary>
        /// Gets the IRestorableGremlinGraphsOperations
        /// </summary>
        public virtual IRestorableGremlinGraphsOperations RestorableGremlinGraphs { get; private set; }
        /// <summary>
        /// Gets the IRestorableGremlinResourcesOperations
        /// </summary>
        public virtual IRestorableGremlinResourcesOperations RestorableGremlinResources { get; private set; }
        /// <summary>
        /// Gets the IRestorableTablesOperations
        /// </summary>
        public virtual IRestorableTablesOperations RestorableTables { get; private set; }
        /// <summary>
        /// Gets the IRestorableTableResourcesOperations
        /// </summary>
        public virtual IRestorableTableResourcesOperations RestorableTableResources { get; private set; }
        /// <summary>
        /// Gets the IServiceOperations
        /// </summary>
        public virtual IServiceOperations Service { get; private set; }
        /// <summary>
        /// Initializes a new instance of the CosmosDBManagementClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling CosmosDBManagementClient.Dispose(). False: will not dispose provided httpClient</param>
        protected CosmosDBManagementClient(System.Net.Http.HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the CosmosDBManagementClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected CosmosDBManagementClient(params System.Net.Http.DelegatingHandler[] handlers) : base(handlers)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the CosmosDBManagementClient  class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected CosmosDBManagementClient(System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the CosmosDBManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected CosmosDBManagementClient(System.Uri baseUri, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }
        /// <summary>
        /// Initializes a new instance of the CosmosDBManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected CosmosDBManagementClient(System.Uri baseUri, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
        
            this.BaseUri = baseUri;
        }
        /// <summary>
        /// Initializes a new instance of the CosmosDBManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public CosmosDBManagementClient(Microsoft.Rest.ServiceClientCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the CosmosDBManagementClient class.
        /// </summary>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling CosmosDBManagementClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public CosmosDBManagementClient(Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the CosmosDBManagementClient class.
        /// </summary>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public CosmosDBManagementClient(Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the CosmosDBManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public CosmosDBManagementClient(System.Uri baseUri, Microsoft.Rest.ServiceClientCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers) 
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the CosmosDBManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public CosmosDBManagementClient(System.Uri baseUri, Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();

        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.DatabaseAccounts = new DatabaseAccountsOperations(this);
            this.Operations = new Operations(this);
            this.Database = new DatabaseOperations(this);
            this.Collection = new CollectionOperations(this);
            this.CollectionRegion = new CollectionRegionOperations(this);
            this.DatabaseAccountRegion = new DatabaseAccountRegionOperations(this);
            this.PercentileSourceTarget = new PercentileSourceTargetOperations(this);
            this.PercentileTarget = new PercentileTargetOperations(this);
            this.Percentile = new PercentileOperations(this);
            this.CollectionPartitionRegion = new CollectionPartitionRegionOperations(this);
            this.CollectionPartition = new CollectionPartitionOperations(this);
            this.PartitionKeyRangeId = new PartitionKeyRangeIdOperations(this);
            this.PartitionKeyRangeIdRegion = new PartitionKeyRangeIdRegionOperations(this);
            this.SqlResources = new SqlResourcesOperations(this);
            this.MongoDbResources = new MongoDbResourcesOperations(this);
            this.TableResources = new TableResourcesOperations(this);
            this.CassandraResources = new CassandraResourcesOperations(this);
            this.GremlinResources = new GremlinResourcesOperations(this);
            this.Locations = new LocationsOperations(this);
            this.CassandraClusters = new CassandraClustersOperations(this);
            this.CassandraDataCenters = new CassandraDataCentersOperations(this);
            this.NotebookWorkspaces = new NotebookWorkspacesOperations(this);
            this.PrivateEndpointConnections = new PrivateEndpointConnectionsOperations(this);
            this.PrivateLinkResources = new PrivateLinkResourcesOperations(this);
            this.RestorableDatabaseAccounts = new RestorableDatabaseAccountsOperations(this);
            this.RestorableSqlDatabases = new RestorableSqlDatabasesOperations(this);
            this.RestorableSqlContainers = new RestorableSqlContainersOperations(this);
            this.RestorableSqlResources = new RestorableSqlResourcesOperations(this);
            this.RestorableMongodbDatabases = new RestorableMongodbDatabasesOperations(this);
            this.RestorableMongodbCollections = new RestorableMongodbCollectionsOperations(this);
            this.RestorableMongodbResources = new RestorableMongodbResourcesOperations(this);
            this.RestorableGremlinDatabases = new RestorableGremlinDatabasesOperations(this);
            this.RestorableGremlinGraphs = new RestorableGremlinGraphsOperations(this);
            this.RestorableGremlinResources = new RestorableGremlinResourcesOperations(this);
            this.RestorableTables = new RestorableTablesOperations(this);
            this.RestorableTableResources = new RestorableTableResourcesOperations(this);
            this.Service = new ServiceOperations(this);
            this.BaseUri = new System.Uri("https://management.azure.com");
            this.ApiVersion = "2023-09-15";
            this.AcceptLanguage = "en-US";
            this.LongRunningOperationRetryTimeout = 30;
            this.GenerateClientRequestId = true;
            SerializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.TransformationJsonConverter());
            DeserializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<BackupPolicy>("type"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<BackupPolicy>("type"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<ServiceResourceProperties>("serviceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<ServiceResourceProperties>("serviceType"));
            CustomInitialize();
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.TransformationJsonConverter());
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Azure.CloudErrorJsonConverter());
        }
    }
}