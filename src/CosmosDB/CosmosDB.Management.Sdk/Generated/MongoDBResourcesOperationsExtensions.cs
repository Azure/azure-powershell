// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.CosmosDB
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for MongoDbResourcesOperations
    /// </summary>
    public static partial class MongoDbResourcesOperationsExtensions
    {
        /// <summary>
        /// Lists the MongoDB databases under an existing Azure Cosmos DB database
        /// account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        public static System.Collections.Generic.IEnumerable<MongoDBDatabaseGetResults> ListMongoDBDatabases(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName)
        {
                return ((IMongoDbResourcesOperations)operations).ListMongoDBDatabasesAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the MongoDB databases under an existing Azure Cosmos DB database
        /// account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<MongoDBDatabaseGetResults>> ListMongoDBDatabasesAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListMongoDBDatabasesWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the MongoDB databases under an existing Azure Cosmos DB database
        /// account with the provided name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        public static MongoDBDatabaseGetResults GetMongoDBDatabase(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName)
        {
                return ((IMongoDbResourcesOperations)operations).GetMongoDBDatabaseAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the MongoDB databases under an existing Azure Cosmos DB database
        /// account with the provided name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoDBDatabaseGetResults> GetMongoDBDatabaseAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetMongoDBDatabaseWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or updates Azure Cosmos DB MongoDB database
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        public static MongoDBDatabaseGetResults CreateUpdateMongoDBDatabase(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters)
        {
                return ((IMongoDbResourcesOperations)operations).CreateUpdateMongoDBDatabaseAsync(resourceGroupName, accountName, databaseName, createUpdateMongoDBDatabaseParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or updates Azure Cosmos DB MongoDB database
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoDBDatabaseGetResults> CreateUpdateMongoDBDatabaseAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateUpdateMongoDBDatabaseWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, createUpdateMongoDBDatabaseParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing Azure Cosmos DB MongoDB database.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        public static MongoDbResourcesDeleteMongoDbdatabaseHeaders DeleteMongoDBDatabase(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName)
        {
                return ((IMongoDbResourcesOperations)operations).DeleteMongoDBDatabaseAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Azure Cosmos DB MongoDB database.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoDbResourcesDeleteMongoDbdatabaseHeaders> DeleteMongoDBDatabaseAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteMongoDBDatabaseWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Gets the RUs per second of the MongoDB database under an existing Azure
        /// Cosmos DB database account with the provided name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        public static ThroughputSettingsGetResults GetMongoDBDatabaseThroughput(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName)
        {
                return ((IMongoDbResourcesOperations)operations).GetMongoDBDatabaseThroughputAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the RUs per second of the MongoDB database under an existing Azure
        /// Cosmos DB database account with the provided name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> GetMongoDBDatabaseThroughputAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetMongoDBDatabaseThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update RUs per second of the an Azure Cosmos DB MongoDB database
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        public static ThroughputSettingsGetResults UpdateMongoDBDatabaseThroughput(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, ThroughputSettingsUpdateParameters updateThroughputParameters)
        {
                return ((IMongoDbResourcesOperations)operations).UpdateMongoDBDatabaseThroughputAsync(resourceGroupName, accountName, databaseName, updateThroughputParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update RUs per second of the an Azure Cosmos DB MongoDB database
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> UpdateMongoDBDatabaseThroughputAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, ThroughputSettingsUpdateParameters updateThroughputParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateMongoDBDatabaseThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, updateThroughputParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Migrate an Azure Cosmos DB MongoDB database from manual throughput to
        /// autoscale
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        public static ThroughputSettingsGetResults MigrateMongoDBDatabaseToAutoscale(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName)
        {
                return ((IMongoDbResourcesOperations)operations).MigrateMongoDBDatabaseToAutoscaleAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Migrate an Azure Cosmos DB MongoDB database from manual throughput to
        /// autoscale
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> MigrateMongoDBDatabaseToAutoscaleAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.MigrateMongoDBDatabaseToAutoscaleWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Migrate an Azure Cosmos DB MongoDB database from autoscale to manual
        /// throughput
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        public static ThroughputSettingsGetResults MigrateMongoDBDatabaseToManualThroughput(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName)
        {
                return ((IMongoDbResourcesOperations)operations).MigrateMongoDBDatabaseToManualThroughputAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Migrate an Azure Cosmos DB MongoDB database from autoscale to manual
        /// throughput
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> MigrateMongoDBDatabaseToManualThroughputAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.MigrateMongoDBDatabaseToManualThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the MongoDB collection under an existing Azure Cosmos DB database
        /// account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        public static System.Collections.Generic.IEnumerable<MongoDBCollectionGetResults> ListMongoDBCollections(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName)
        {
                return ((IMongoDbResourcesOperations)operations).ListMongoDBCollectionsAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the MongoDB collection under an existing Azure Cosmos DB database
        /// account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<MongoDBCollectionGetResults>> ListMongoDBCollectionsAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListMongoDBCollectionsWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the MongoDB collection under an existing Azure Cosmos DB database
        /// account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        public static MongoDBCollectionGetResults GetMongoDBCollection(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName)
        {
                return ((IMongoDbResourcesOperations)operations).GetMongoDBCollectionAsync(resourceGroupName, accountName, databaseName, collectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the MongoDB collection under an existing Azure Cosmos DB database
        /// account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoDBCollectionGetResults> GetMongoDBCollectionAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetMongoDBCollectionWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update an Azure Cosmos DB MongoDB Collection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        public static MongoDBCollectionGetResults CreateUpdateMongoDBCollection(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters)
        {
                return ((IMongoDbResourcesOperations)operations).CreateUpdateMongoDBCollectionAsync(resourceGroupName, accountName, databaseName, collectionName, createUpdateMongoDBCollectionParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update an Azure Cosmos DB MongoDB Collection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoDBCollectionGetResults> CreateUpdateMongoDBCollectionAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateUpdateMongoDBCollectionWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, createUpdateMongoDBCollectionParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing Azure Cosmos DB MongoDB Collection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        public static MongoDbResourcesDeleteMongoDbcollectionHeaders DeleteMongoDBCollection(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName)
        {
                return ((IMongoDbResourcesOperations)operations).DeleteMongoDBCollectionAsync(resourceGroupName, accountName, databaseName, collectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Azure Cosmos DB MongoDB Collection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoDbResourcesDeleteMongoDbcollectionHeaders> DeleteMongoDBCollectionAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteMongoDBCollectionWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Gets the RUs per second of the MongoDB collection under an existing Azure
        /// Cosmos DB database account with the provided name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        public static ThroughputSettingsGetResults GetMongoDBCollectionThroughput(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName)
        {
                return ((IMongoDbResourcesOperations)operations).GetMongoDBCollectionThroughputAsync(resourceGroupName, accountName, databaseName, collectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the RUs per second of the MongoDB collection under an existing Azure
        /// Cosmos DB database account with the provided name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> GetMongoDBCollectionThroughputAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetMongoDBCollectionThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update the RUs per second of an Azure Cosmos DB MongoDB collection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        public static ThroughputSettingsGetResults UpdateMongoDBCollectionThroughput(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, ThroughputSettingsUpdateParameters updateThroughputParameters)
        {
                return ((IMongoDbResourcesOperations)operations).UpdateMongoDBCollectionThroughputAsync(resourceGroupName, accountName, databaseName, collectionName, updateThroughputParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update the RUs per second of an Azure Cosmos DB MongoDB collection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> UpdateMongoDBCollectionThroughputAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, ThroughputSettingsUpdateParameters updateThroughputParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateMongoDBCollectionThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, updateThroughputParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Migrate an Azure Cosmos DB MongoDB collection from manual throughput to
        /// autoscale
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        public static ThroughputSettingsGetResults MigrateMongoDBCollectionToAutoscale(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName)
        {
                return ((IMongoDbResourcesOperations)operations).MigrateMongoDBCollectionToAutoscaleAsync(resourceGroupName, accountName, databaseName, collectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Migrate an Azure Cosmos DB MongoDB collection from manual throughput to
        /// autoscale
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> MigrateMongoDBCollectionToAutoscaleAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.MigrateMongoDBCollectionToAutoscaleWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual
        /// throughput
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        public static ThroughputSettingsGetResults MigrateMongoDBCollectionToManualThroughput(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName)
        {
                return ((IMongoDbResourcesOperations)operations).MigrateMongoDBCollectionToManualThroughputAsync(resourceGroupName, accountName, databaseName, collectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual
        /// throughput
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> MigrateMongoDBCollectionToManualThroughputAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.MigrateMongoDBCollectionToManualThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB Mongo Role
        /// Definition with the given Id.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoRoleDefinitionId'>
        /// The ID for the Role Definition {dbName.roleName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        public static MongoRoleDefinitionGetResults GetMongoRoleDefinition(this IMongoDbResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName)
        {
                return ((IMongoDbResourcesOperations)operations).GetMongoRoleDefinitionAsync(mongoRoleDefinitionId, resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB Mongo Role
        /// Definition with the given Id.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoRoleDefinitionId'>
        /// The ID for the Role Definition {dbName.roleName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoRoleDefinitionGetResults> GetMongoRoleDefinitionAsync(this IMongoDbResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetMongoRoleDefinitionWithHttpMessagesAsync(mongoRoleDefinitionId, resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates an Azure Cosmos DB Mongo Role Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoRoleDefinitionId'>
        /// The ID for the Role Definition {dbName.roleName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        public static MongoRoleDefinitionGetResults CreateUpdateMongoRoleDefinition(this IMongoDbResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName, MongoRoleDefinitionCreateUpdateParameters createUpdateMongoRoleDefinitionParameters)
        {
                return ((IMongoDbResourcesOperations)operations).CreateUpdateMongoRoleDefinitionAsync(mongoRoleDefinitionId, resourceGroupName, accountName, createUpdateMongoRoleDefinitionParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates an Azure Cosmos DB Mongo Role Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoRoleDefinitionId'>
        /// The ID for the Role Definition {dbName.roleName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoRoleDefinitionGetResults> CreateUpdateMongoRoleDefinitionAsync(this IMongoDbResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName, MongoRoleDefinitionCreateUpdateParameters createUpdateMongoRoleDefinitionParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateUpdateMongoRoleDefinitionWithHttpMessagesAsync(mongoRoleDefinitionId, resourceGroupName, accountName, createUpdateMongoRoleDefinitionParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing Azure Cosmos DB Mongo Role Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoRoleDefinitionId'>
        /// The ID for the Role Definition {dbName.roleName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        public static void DeleteMongoRoleDefinition(this IMongoDbResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName)
        {
                ((IMongoDbResourcesOperations)operations).DeleteMongoRoleDefinitionAsync(mongoRoleDefinitionId, resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Azure Cosmos DB Mongo Role Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoRoleDefinitionId'>
        /// The ID for the Role Definition {dbName.roleName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteMongoRoleDefinitionAsync(this IMongoDbResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteMongoRoleDefinitionWithHttpMessagesAsync(mongoRoleDefinitionId, resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Retrieves the list of all Azure Cosmos DB Mongo Role Definitions.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        public static System.Collections.Generic.IEnumerable<MongoRoleDefinitionGetResults> ListMongoRoleDefinitions(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName)
        {
                return ((IMongoDbResourcesOperations)operations).ListMongoRoleDefinitionsAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves the list of all Azure Cosmos DB Mongo Role Definitions.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<MongoRoleDefinitionGetResults>> ListMongoRoleDefinitionsAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListMongoRoleDefinitionsWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB Mongo User
        /// Definition with the given Id.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoUserDefinitionId'>
        /// The ID for the User Definition {dbName.userName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        public static MongoUserDefinitionGetResults GetMongoUserDefinition(this IMongoDbResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName)
        {
                return ((IMongoDbResourcesOperations)operations).GetMongoUserDefinitionAsync(mongoUserDefinitionId, resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB Mongo User
        /// Definition with the given Id.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoUserDefinitionId'>
        /// The ID for the User Definition {dbName.userName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoUserDefinitionGetResults> GetMongoUserDefinitionAsync(this IMongoDbResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetMongoUserDefinitionWithHttpMessagesAsync(mongoUserDefinitionId, resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates an Azure Cosmos DB Mongo User Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoUserDefinitionId'>
        /// The ID for the User Definition {dbName.userName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        public static MongoUserDefinitionGetResults CreateUpdateMongoUserDefinition(this IMongoDbResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName, MongoUserDefinitionCreateUpdateParameters createUpdateMongoUserDefinitionParameters)
        {
                return ((IMongoDbResourcesOperations)operations).CreateUpdateMongoUserDefinitionAsync(mongoUserDefinitionId, resourceGroupName, accountName, createUpdateMongoUserDefinitionParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates an Azure Cosmos DB Mongo User Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoUserDefinitionId'>
        /// The ID for the User Definition {dbName.userName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoUserDefinitionGetResults> CreateUpdateMongoUserDefinitionAsync(this IMongoDbResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName, MongoUserDefinitionCreateUpdateParameters createUpdateMongoUserDefinitionParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateUpdateMongoUserDefinitionWithHttpMessagesAsync(mongoUserDefinitionId, resourceGroupName, accountName, createUpdateMongoUserDefinitionParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing Azure Cosmos DB Mongo User Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoUserDefinitionId'>
        /// The ID for the User Definition {dbName.userName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        public static void DeleteMongoUserDefinition(this IMongoDbResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName)
        {
                ((IMongoDbResourcesOperations)operations).DeleteMongoUserDefinitionAsync(mongoUserDefinitionId, resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Azure Cosmos DB Mongo User Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoUserDefinitionId'>
        /// The ID for the User Definition {dbName.userName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteMongoUserDefinitionAsync(this IMongoDbResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteMongoUserDefinitionWithHttpMessagesAsync(mongoUserDefinitionId, resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Retrieves the list of all Azure Cosmos DB Mongo User Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        public static System.Collections.Generic.IEnumerable<MongoUserDefinitionGetResults> ListMongoUserDefinitions(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName)
        {
                return ((IMongoDbResourcesOperations)operations).ListMongoUserDefinitionsAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves the list of all Azure Cosmos DB Mongo User Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<MongoUserDefinitionGetResults>> ListMongoUserDefinitionsAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListMongoUserDefinitionsWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Retrieves continuous backup information for a Mongodb collection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        public static BackupInformation RetrieveContinuousBackupInformation(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, ContinuousBackupRestoreLocation location)
        {
                return ((IMongoDbResourcesOperations)operations).RetrieveContinuousBackupInformationAsync(resourceGroupName, accountName, databaseName, collectionName, location).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves continuous backup information for a Mongodb collection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupInformation> RetrieveContinuousBackupInformationAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, ContinuousBackupRestoreLocation location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.RetrieveContinuousBackupInformationWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, location, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or updates Azure Cosmos DB MongoDB database
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        public static MongoDBDatabaseGetResults BeginCreateUpdateMongoDBDatabase(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters)
        {
                return ((IMongoDbResourcesOperations)operations).BeginCreateUpdateMongoDBDatabaseAsync(resourceGroupName, accountName, databaseName, createUpdateMongoDBDatabaseParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or updates Azure Cosmos DB MongoDB database
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoDBDatabaseGetResults> BeginCreateUpdateMongoDBDatabaseAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateUpdateMongoDBDatabaseWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, createUpdateMongoDBDatabaseParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing Azure Cosmos DB MongoDB database.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        public static MongoDbResourcesDeleteMongoDbdatabaseHeaders BeginDeleteMongoDBDatabase(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName)
        {
                return ((IMongoDbResourcesOperations)operations).BeginDeleteMongoDBDatabaseAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Azure Cosmos DB MongoDB database.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoDbResourcesDeleteMongoDbdatabaseHeaders> BeginDeleteMongoDBDatabaseAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteMongoDBDatabaseWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Update RUs per second of the an Azure Cosmos DB MongoDB database
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        public static ThroughputSettingsGetResults BeginUpdateMongoDBDatabaseThroughput(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, ThroughputSettingsUpdateParameters updateThroughputParameters)
        {
                return ((IMongoDbResourcesOperations)operations).BeginUpdateMongoDBDatabaseThroughputAsync(resourceGroupName, accountName, databaseName, updateThroughputParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update RUs per second of the an Azure Cosmos DB MongoDB database
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> BeginUpdateMongoDBDatabaseThroughputAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, ThroughputSettingsUpdateParameters updateThroughputParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateMongoDBDatabaseThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, updateThroughputParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Migrate an Azure Cosmos DB MongoDB database from manual throughput to
        /// autoscale
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        public static ThroughputSettingsGetResults BeginMigrateMongoDBDatabaseToAutoscale(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName)
        {
                return ((IMongoDbResourcesOperations)operations).BeginMigrateMongoDBDatabaseToAutoscaleAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Migrate an Azure Cosmos DB MongoDB database from manual throughput to
        /// autoscale
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> BeginMigrateMongoDBDatabaseToAutoscaleAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginMigrateMongoDBDatabaseToAutoscaleWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Migrate an Azure Cosmos DB MongoDB database from autoscale to manual
        /// throughput
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        public static ThroughputSettingsGetResults BeginMigrateMongoDBDatabaseToManualThroughput(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName)
        {
                return ((IMongoDbResourcesOperations)operations).BeginMigrateMongoDBDatabaseToManualThroughputAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Migrate an Azure Cosmos DB MongoDB database from autoscale to manual
        /// throughput
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> BeginMigrateMongoDBDatabaseToManualThroughputAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginMigrateMongoDBDatabaseToManualThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update an Azure Cosmos DB MongoDB Collection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        public static MongoDBCollectionGetResults BeginCreateUpdateMongoDBCollection(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters)
        {
                return ((IMongoDbResourcesOperations)operations).BeginCreateUpdateMongoDBCollectionAsync(resourceGroupName, accountName, databaseName, collectionName, createUpdateMongoDBCollectionParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update an Azure Cosmos DB MongoDB Collection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoDBCollectionGetResults> BeginCreateUpdateMongoDBCollectionAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateUpdateMongoDBCollectionWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, createUpdateMongoDBCollectionParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing Azure Cosmos DB MongoDB Collection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        public static MongoDbResourcesDeleteMongoDbcollectionHeaders BeginDeleteMongoDBCollection(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName)
        {
                return ((IMongoDbResourcesOperations)operations).BeginDeleteMongoDBCollectionAsync(resourceGroupName, accountName, databaseName, collectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Azure Cosmos DB MongoDB Collection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoDbResourcesDeleteMongoDbcollectionHeaders> BeginDeleteMongoDBCollectionAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteMongoDBCollectionWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Update the RUs per second of an Azure Cosmos DB MongoDB collection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        public static ThroughputSettingsGetResults BeginUpdateMongoDBCollectionThroughput(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, ThroughputSettingsUpdateParameters updateThroughputParameters)
        {
                return ((IMongoDbResourcesOperations)operations).BeginUpdateMongoDBCollectionThroughputAsync(resourceGroupName, accountName, databaseName, collectionName, updateThroughputParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update the RUs per second of an Azure Cosmos DB MongoDB collection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> BeginUpdateMongoDBCollectionThroughputAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, ThroughputSettingsUpdateParameters updateThroughputParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateMongoDBCollectionThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, updateThroughputParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Migrate an Azure Cosmos DB MongoDB collection from manual throughput to
        /// autoscale
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        public static ThroughputSettingsGetResults BeginMigrateMongoDBCollectionToAutoscale(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName)
        {
                return ((IMongoDbResourcesOperations)operations).BeginMigrateMongoDBCollectionToAutoscaleAsync(resourceGroupName, accountName, databaseName, collectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Migrate an Azure Cosmos DB MongoDB collection from manual throughput to
        /// autoscale
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> BeginMigrateMongoDBCollectionToAutoscaleAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginMigrateMongoDBCollectionToAutoscaleWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual
        /// throughput
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        public static ThroughputSettingsGetResults BeginMigrateMongoDBCollectionToManualThroughput(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName)
        {
                return ((IMongoDbResourcesOperations)operations).BeginMigrateMongoDBCollectionToManualThroughputAsync(resourceGroupName, accountName, databaseName, collectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual
        /// throughput
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ThroughputSettingsGetResults> BeginMigrateMongoDBCollectionToManualThroughputAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginMigrateMongoDBCollectionToManualThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates an Azure Cosmos DB Mongo Role Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoRoleDefinitionId'>
        /// The ID for the Role Definition {dbName.roleName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        public static MongoRoleDefinitionGetResults BeginCreateUpdateMongoRoleDefinition(this IMongoDbResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName, MongoRoleDefinitionCreateUpdateParameters createUpdateMongoRoleDefinitionParameters)
        {
                return ((IMongoDbResourcesOperations)operations).BeginCreateUpdateMongoRoleDefinitionAsync(mongoRoleDefinitionId, resourceGroupName, accountName, createUpdateMongoRoleDefinitionParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates an Azure Cosmos DB Mongo Role Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoRoleDefinitionId'>
        /// The ID for the Role Definition {dbName.roleName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoRoleDefinitionGetResults> BeginCreateUpdateMongoRoleDefinitionAsync(this IMongoDbResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName, MongoRoleDefinitionCreateUpdateParameters createUpdateMongoRoleDefinitionParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateUpdateMongoRoleDefinitionWithHttpMessagesAsync(mongoRoleDefinitionId, resourceGroupName, accountName, createUpdateMongoRoleDefinitionParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing Azure Cosmos DB Mongo Role Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoRoleDefinitionId'>
        /// The ID for the Role Definition {dbName.roleName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        public static void BeginDeleteMongoRoleDefinition(this IMongoDbResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName)
        {
                ((IMongoDbResourcesOperations)operations).BeginDeleteMongoRoleDefinitionAsync(mongoRoleDefinitionId, resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Azure Cosmos DB Mongo Role Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoRoleDefinitionId'>
        /// The ID for the Role Definition {dbName.roleName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteMongoRoleDefinitionAsync(this IMongoDbResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteMongoRoleDefinitionWithHttpMessagesAsync(mongoRoleDefinitionId, resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Creates or updates an Azure Cosmos DB Mongo User Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoUserDefinitionId'>
        /// The ID for the User Definition {dbName.userName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        public static MongoUserDefinitionGetResults BeginCreateUpdateMongoUserDefinition(this IMongoDbResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName, MongoUserDefinitionCreateUpdateParameters createUpdateMongoUserDefinitionParameters)
        {
                return ((IMongoDbResourcesOperations)operations).BeginCreateUpdateMongoUserDefinitionAsync(mongoUserDefinitionId, resourceGroupName, accountName, createUpdateMongoUserDefinitionParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates an Azure Cosmos DB Mongo User Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoUserDefinitionId'>
        /// The ID for the User Definition {dbName.userName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoUserDefinitionGetResults> BeginCreateUpdateMongoUserDefinitionAsync(this IMongoDbResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName, MongoUserDefinitionCreateUpdateParameters createUpdateMongoUserDefinitionParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateUpdateMongoUserDefinitionWithHttpMessagesAsync(mongoUserDefinitionId, resourceGroupName, accountName, createUpdateMongoUserDefinitionParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing Azure Cosmos DB Mongo User Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoUserDefinitionId'>
        /// The ID for the User Definition {dbName.userName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        public static void BeginDeleteMongoUserDefinition(this IMongoDbResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName)
        {
                ((IMongoDbResourcesOperations)operations).BeginDeleteMongoUserDefinitionAsync(mongoUserDefinitionId, resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Azure Cosmos DB Mongo User Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='mongoUserDefinitionId'>
        /// The ID for the User Definition {dbName.userName}.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteMongoUserDefinitionAsync(this IMongoDbResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteMongoUserDefinitionWithHttpMessagesAsync(mongoUserDefinitionId, resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Retrieves continuous backup information for a Mongodb collection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        public static BackupInformation BeginRetrieveContinuousBackupInformation(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, ContinuousBackupRestoreLocation location)
        {
                return ((IMongoDbResourcesOperations)operations).BeginRetrieveContinuousBackupInformationAsync(resourceGroupName, accountName, databaseName, collectionName, location).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves continuous backup information for a Mongodb collection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='databaseName'>
        /// Cosmos DB database name.
        /// </param>
        /// <param name='collectionName'>
        /// Cosmos DB collection name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupInformation> BeginRetrieveContinuousBackupInformationAsync(this IMongoDbResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, ContinuousBackupRestoreLocation location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginRetrieveContinuousBackupInformationWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, location, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
