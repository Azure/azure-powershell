// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.CosmosDB
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for FleetOperations
    /// </summary>
    public static partial class FleetOperationsExtensions
    {
        /// <summary>
        /// Lists all the fleets under the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<FleetResource> List(this IFleetOperations operations)
        {
                return ((IFleetOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the fleets under the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<FleetResource>> ListAsync(this IFleetOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all the fleets under the specified subscription and resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<FleetResource> ListByResourceGroup(this IFleetOperations operations, string resourceGroupName)
        {
                return ((IFleetOperations)operations).ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the fleets under the specified subscription and resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<FleetResource>> ListByResourceGroupAsync(this IFleetOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB fleet under a
        /// subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='fleetName'>
        /// Cosmos DB fleet name. Needs to be unique under a subscription.
        /// </param>
        public static FleetResource Get(this IFleetOperations operations, string resourceGroupName, string fleetName)
        {
                return ((IFleetOperations)operations).GetAsync(resourceGroupName, fleetName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB fleet under a
        /// subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='fleetName'>
        /// Cosmos DB fleet name. Needs to be unique under a subscription.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FleetResource> GetAsync(this IFleetOperations operations, string resourceGroupName, string fleetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, fleetName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates an Azure Cosmos DB fleet under a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='fleetName'>
        /// Cosmos DB fleet name. Needs to be unique under a subscription.
        /// </param>
        public static FleetResource Create(this IFleetOperations operations, string resourceGroupName, string fleetName, FleetResource body)
        {
                return ((IFleetOperations)operations).CreateAsync(resourceGroupName, fleetName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates an Azure Cosmos DB fleet under a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='fleetName'>
        /// Cosmos DB fleet name. Needs to be unique under a subscription.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FleetResource> CreateAsync(this IFleetOperations operations, string resourceGroupName, string fleetName, FleetResource body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, fleetName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates the properties of an existing Azure Cosmos DB Fleet.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='fleetName'>
        /// Cosmos DB fleet name. Needs to be unique under a subscription.
        /// </param>
        public static FleetResource Update(this IFleetOperations operations, string resourceGroupName, string fleetName, FleetResourceUpdate body = default(FleetResourceUpdate))
        {
                return ((IFleetOperations)operations).UpdateAsync(resourceGroupName, fleetName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates the properties of an existing Azure Cosmos DB Fleet.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='fleetName'>
        /// Cosmos DB fleet name. Needs to be unique under a subscription.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FleetResource> UpdateAsync(this IFleetOperations operations, string resourceGroupName, string fleetName, FleetResourceUpdate body = default(FleetResourceUpdate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, fleetName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing Azure Cosmos DB Fleet.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='fleetName'>
        /// Cosmos DB fleet name. Needs to be unique under a subscription.
        /// </param>
        public static FleetDeleteHeaders Delete(this IFleetOperations operations, string resourceGroupName, string fleetName)
        {
                return ((IFleetOperations)operations).DeleteAsync(resourceGroupName, fleetName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Azure Cosmos DB Fleet.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='fleetName'>
        /// Cosmos DB fleet name. Needs to be unique under a subscription.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FleetDeleteHeaders> DeleteAsync(this IFleetOperations operations, string resourceGroupName, string fleetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, fleetName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Deletes an existing Azure Cosmos DB Fleet.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='fleetName'>
        /// Cosmos DB fleet name. Needs to be unique under a subscription.
        /// </param>
        public static FleetDeleteHeaders BeginDelete(this IFleetOperations operations, string resourceGroupName, string fleetName)
        {
                return ((IFleetOperations)operations).BeginDeleteAsync(resourceGroupName, fleetName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Azure Cosmos DB Fleet.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='fleetName'>
        /// Cosmos DB fleet name. Needs to be unique under a subscription.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FleetDeleteHeaders> BeginDeleteAsync(this IFleetOperations operations, string resourceGroupName, string fleetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, fleetName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Lists all the fleets under the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<FleetResource> ListNext(this IFleetOperations operations, string nextPageLink)
        {
                return ((IFleetOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the fleets under the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<FleetResource>> ListNextAsync(this IFleetOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all the fleets under the specified subscription and resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<FleetResource> ListByResourceGroupNext(this IFleetOperations operations, string nextPageLink)
        {
                return ((IFleetOperations)operations).ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the fleets under the specified subscription and resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<FleetResource>> ListByResourceGroupNextAsync(this IFleetOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
