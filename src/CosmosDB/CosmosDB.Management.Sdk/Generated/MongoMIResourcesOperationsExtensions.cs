// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.CosmosDB
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for MongoMiResourcesOperations
    /// </summary>
    public static partial class MongoMiResourcesOperationsExtensions
    {
        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB MongoMI Role
        /// Definition with the given Id.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The GUID for the Role Definition.
        /// </param>
        public static MongoMIRoleDefinitionResource GetMongoMIRoleDefinition(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleDefinitionId)
        {
                return ((IMongoMiResourcesOperations)operations).GetMongoMIRoleDefinitionAsync(resourceGroupName, accountName, roleDefinitionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB MongoMI Role
        /// Definition with the given Id.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The GUID for the Role Definition.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoMIRoleDefinitionResource> GetMongoMIRoleDefinitionAsync(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleDefinitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetMongoMIRoleDefinitionWithHttpMessagesAsync(resourceGroupName, accountName, roleDefinitionId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates an Azure Cosmos DB MongoMI Role Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The GUID for the Role Definition.
        /// </param>
        public static MongoMIRoleDefinitionResource CreateUpdateMongoMIRoleDefinition(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleDefinitionId, MongoMIRoleDefinitionResource createUpdateMongoMIRoleDefinitionParameters)
        {
                return ((IMongoMiResourcesOperations)operations).CreateUpdateMongoMIRoleDefinitionAsync(resourceGroupName, accountName, roleDefinitionId, createUpdateMongoMIRoleDefinitionParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates an Azure Cosmos DB MongoMI Role Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The GUID for the Role Definition.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoMIRoleDefinitionResource> CreateUpdateMongoMIRoleDefinitionAsync(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleDefinitionId, MongoMIRoleDefinitionResource createUpdateMongoMIRoleDefinitionParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateUpdateMongoMIRoleDefinitionWithHttpMessagesAsync(resourceGroupName, accountName, roleDefinitionId, createUpdateMongoMIRoleDefinitionParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing Azure Cosmos DB MongoMI Role Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The GUID for the Role Definition.
        /// </param>
        public static MongoMiResourcesDeleteMongoMiroleDefinitionHeaders DeleteMongoMIRoleDefinition(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleDefinitionId)
        {
                return ((IMongoMiResourcesOperations)operations).DeleteMongoMIRoleDefinitionAsync(resourceGroupName, accountName, roleDefinitionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Azure Cosmos DB MongoMI Role Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The GUID for the Role Definition.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoMiResourcesDeleteMongoMiroleDefinitionHeaders> DeleteMongoMIRoleDefinitionAsync(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleDefinitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteMongoMIRoleDefinitionWithHttpMessagesAsync(resourceGroupName, accountName, roleDefinitionId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Retrieves the list of all Azure Cosmos DB MongoMI Role Definitions.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        public static System.Collections.Generic.IEnumerable<MongoMIRoleDefinitionResource> ListMongoMIRoleDefinitions(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName)
        {
                return ((IMongoMiResourcesOperations)operations).ListMongoMIRoleDefinitionsAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves the list of all Azure Cosmos DB MongoMI Role Definitions.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<MongoMIRoleDefinitionResource>> ListMongoMIRoleDefinitionsAsync(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListMongoMIRoleDefinitionsWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB MongoMI Role
        /// Assignment with the given Id.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleAssignmentId'>
        /// The GUID for the Role Assignment.
        /// </param>
        public static MongoMIRoleAssignmentResource GetMongoMIRoleAssignment(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleAssignmentId)
        {
                return ((IMongoMiResourcesOperations)operations).GetMongoMIRoleAssignmentAsync(resourceGroupName, accountName, roleAssignmentId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB MongoMI Role
        /// Assignment with the given Id.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleAssignmentId'>
        /// The GUID for the Role Assignment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoMIRoleAssignmentResource> GetMongoMIRoleAssignmentAsync(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleAssignmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetMongoMIRoleAssignmentWithHttpMessagesAsync(resourceGroupName, accountName, roleAssignmentId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleAssignmentId'>
        /// The GUID for the Role Assignment.
        /// </param>
        public static MongoMIRoleAssignmentResource CreateUpdateMongoMIRoleAssignment(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleAssignmentId, MongoMIRoleAssignmentResource createUpdateMongoMIRoleAssignmentParameters)
        {
                return ((IMongoMiResourcesOperations)operations).CreateUpdateMongoMIRoleAssignmentAsync(resourceGroupName, accountName, roleAssignmentId, createUpdateMongoMIRoleAssignmentParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleAssignmentId'>
        /// The GUID for the Role Assignment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoMIRoleAssignmentResource> CreateUpdateMongoMIRoleAssignmentAsync(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleAssignmentId, MongoMIRoleAssignmentResource createUpdateMongoMIRoleAssignmentParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateUpdateMongoMIRoleAssignmentWithHttpMessagesAsync(resourceGroupName, accountName, roleAssignmentId, createUpdateMongoMIRoleAssignmentParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleAssignmentId'>
        /// The GUID for the Role Assignment.
        /// </param>
        public static MongoMiResourcesDeleteMongoMiroleAssignmentHeaders DeleteMongoMIRoleAssignment(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleAssignmentId)
        {
                return ((IMongoMiResourcesOperations)operations).DeleteMongoMIRoleAssignmentAsync(resourceGroupName, accountName, roleAssignmentId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleAssignmentId'>
        /// The GUID for the Role Assignment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoMiResourcesDeleteMongoMiroleAssignmentHeaders> DeleteMongoMIRoleAssignmentAsync(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleAssignmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteMongoMIRoleAssignmentWithHttpMessagesAsync(resourceGroupName, accountName, roleAssignmentId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Retrieves the list of all Azure Cosmos DB MongoMI Role Assignments.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        public static System.Collections.Generic.IEnumerable<MongoMIRoleAssignmentResource> ListMongoMIRoleAssignments(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName)
        {
                return ((IMongoMiResourcesOperations)operations).ListMongoMIRoleAssignmentsAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves the list of all Azure Cosmos DB MongoMI Role Assignments.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<MongoMIRoleAssignmentResource>> ListMongoMIRoleAssignmentsAsync(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListMongoMIRoleAssignmentsWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates an Azure Cosmos DB MongoMI Role Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The GUID for the Role Definition.
        /// </param>
        public static MongoMIRoleDefinitionResource BeginCreateUpdateMongoMIRoleDefinition(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleDefinitionId, MongoMIRoleDefinitionResource createUpdateMongoMIRoleDefinitionParameters)
        {
                return ((IMongoMiResourcesOperations)operations).BeginCreateUpdateMongoMIRoleDefinitionAsync(resourceGroupName, accountName, roleDefinitionId, createUpdateMongoMIRoleDefinitionParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates an Azure Cosmos DB MongoMI Role Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The GUID for the Role Definition.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoMIRoleDefinitionResource> BeginCreateUpdateMongoMIRoleDefinitionAsync(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleDefinitionId, MongoMIRoleDefinitionResource createUpdateMongoMIRoleDefinitionParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateUpdateMongoMIRoleDefinitionWithHttpMessagesAsync(resourceGroupName, accountName, roleDefinitionId, createUpdateMongoMIRoleDefinitionParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing Azure Cosmos DB MongoMI Role Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The GUID for the Role Definition.
        /// </param>
        public static MongoMiResourcesDeleteMongoMiroleDefinitionHeaders BeginDeleteMongoMIRoleDefinition(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleDefinitionId)
        {
                return ((IMongoMiResourcesOperations)operations).BeginDeleteMongoMIRoleDefinitionAsync(resourceGroupName, accountName, roleDefinitionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Azure Cosmos DB MongoMI Role Definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The GUID for the Role Definition.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoMiResourcesDeleteMongoMiroleDefinitionHeaders> BeginDeleteMongoMIRoleDefinitionAsync(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleDefinitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteMongoMIRoleDefinitionWithHttpMessagesAsync(resourceGroupName, accountName, roleDefinitionId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleAssignmentId'>
        /// The GUID for the Role Assignment.
        /// </param>
        public static MongoMIRoleAssignmentResource BeginCreateUpdateMongoMIRoleAssignment(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleAssignmentId, MongoMIRoleAssignmentResource createUpdateMongoMIRoleAssignmentParameters)
        {
                return ((IMongoMiResourcesOperations)operations).BeginCreateUpdateMongoMIRoleAssignmentAsync(resourceGroupName, accountName, roleAssignmentId, createUpdateMongoMIRoleAssignmentParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates an Azure Cosmos DB MongoMI Role Assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleAssignmentId'>
        /// The GUID for the Role Assignment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoMIRoleAssignmentResource> BeginCreateUpdateMongoMIRoleAssignmentAsync(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleAssignmentId, MongoMIRoleAssignmentResource createUpdateMongoMIRoleAssignmentParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateUpdateMongoMIRoleAssignmentWithHttpMessagesAsync(resourceGroupName, accountName, roleAssignmentId, createUpdateMongoMIRoleAssignmentParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleAssignmentId'>
        /// The GUID for the Role Assignment.
        /// </param>
        public static MongoMiResourcesDeleteMongoMiroleAssignmentHeaders BeginDeleteMongoMIRoleAssignment(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleAssignmentId)
        {
                return ((IMongoMiResourcesOperations)operations).BeginDeleteMongoMIRoleAssignmentAsync(resourceGroupName, accountName, roleAssignmentId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Azure Cosmos DB MongoMI Role Assignment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// Cosmos DB database account name.
        /// </param>
        /// <param name='roleAssignmentId'>
        /// The GUID for the Role Assignment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MongoMiResourcesDeleteMongoMiroleAssignmentHeaders> BeginDeleteMongoMIRoleAssignmentAsync(this IMongoMiResourcesOperations operations, string resourceGroupName, string accountName, string roleAssignmentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteMongoMIRoleAssignmentWithHttpMessagesAsync(resourceGroupName, accountName, roleAssignmentId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
    }
}
