// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    public partial class VectorIndex
    {
        /// <summary>
        /// Initializes a new instance of the VectorIndex class.
        /// </summary>
        public VectorIndex()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VectorIndex class.
        /// </summary>

        /// <param name="path">The path to the vector field in the document.
        /// </param>

        /// <param name="type">The index type of the vector. Currently, flat, diskANN, and quantizedFlat
        /// are supported.
        /// Possible values include: &#39;flat&#39;, &#39;diskANN&#39;, &#39;quantizedFlat&#39;</param>
        public VectorIndex(string path, string type)

        {
            this.Path = path;
            this.Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the path to the vector field in the document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "path")]
        public string Path {get; set; }

        /// <summary>
        /// Gets or sets the index type of the vector. Currently, flat, diskANN, and
        /// quantizedFlat are supported. Possible values include: &#39;flat&#39;, &#39;diskANN&#39;, &#39;quantizedFlat&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Path == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Path");
            }
            if (this.Type == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Type");
            }


        }
    }
}