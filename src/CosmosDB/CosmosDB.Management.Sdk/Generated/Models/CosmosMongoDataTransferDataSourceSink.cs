// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    /// <summary>
    /// A CosmosDB Mongo API data source/sink
    /// </summary>
    [Newtonsoft.Json.JsonObject("CosmosDBMongo")]
    public partial class CosmosMongoDataTransferDataSourceSink : BaseCosmosDataTransferDataSourceSink
    {
        /// <summary>
        /// Initializes a new instance of the CosmosMongoDataTransferDataSourceSink class.
        /// </summary>
        public CosmosMongoDataTransferDataSourceSink()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CosmosMongoDataTransferDataSourceSink class.
        /// </summary>

        /// <param name="remoteAccountName">
        /// </param>

        /// <param name="databaseName">
        /// </param>

        /// <param name="collectionName">
        /// </param>
        public CosmosMongoDataTransferDataSourceSink(string databaseName, string collectionName, string remoteAccountName = default(string))

        : base(remoteAccountName)
        {
            this.DatabaseName = databaseName;
            this.CollectionName = collectionName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "collectionName")]
        public string CollectionName {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DatabaseName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DatabaseName");
            }
            if (this.CollectionName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "CollectionName");
            }


        }
    }
}