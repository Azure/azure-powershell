// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    /// <summary>
    /// Azure Cosmos DB Mongo User Definition resource object.
    /// </summary>
    public partial class MongoUserDefinitionResource
    {
        /// <summary>
        /// Initializes a new instance of the MongoUserDefinitionResource class.
        /// </summary>
        public MongoUserDefinitionResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MongoUserDefinitionResource class.
        /// </summary>

        /// <param name="userName">The user name for User Definition.
        /// </param>

        /// <param name="password">The password for User Definition. Response does not contain user password.
        /// </param>

        /// <param name="databaseName">The database name for which access is being granted for this User
        /// Definition.
        /// </param>

        /// <param name="customData">A custom definition for the USer Definition.
        /// </param>

        /// <param name="roles">The set of roles inherited by the User Definition.
        /// </param>

        /// <param name="mechanisms">The Mongo Auth mechanism. For now, we only support auth mechanism
        /// SCRAM-SHA-256.
        /// </param>
        public MongoUserDefinitionResource(string userName = default(string), string password = default(string), string databaseName = default(string), string customData = default(string), System.Collections.Generic.IList<Role> roles = default(System.Collections.Generic.IList<Role>), string mechanisms = default(string))

        {
            this.UserName = userName;
            this.Password = password;
            this.DatabaseName = databaseName;
            this.CustomData = customData;
            this.Roles = roles;
            this.Mechanisms = mechanisms;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the user name for User Definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userName")]
        public string UserName {get; set; }

        /// <summary>
        /// Gets or sets the password for User Definition. Response does not contain
        /// user password.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public string Password {get; set; }

        /// <summary>
        /// Gets or sets the database name for which access is being granted for this
        /// User Definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName {get; set; }

        /// <summary>
        /// Gets or sets a custom definition for the USer Definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customData")]
        public string CustomData {get; set; }

        /// <summary>
        /// Gets or sets the set of roles inherited by the User Definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "roles")]
        public System.Collections.Generic.IList<Role> Roles {get; set; }

        /// <summary>
        /// Gets or sets the Mongo Auth mechanism. For now, we only support auth
        /// mechanism SCRAM-SHA-256.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mechanisms")]
        public string Mechanisms {get; set; }
    }
}