// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    /// <summary>
    /// An Azure Cosmos DB Fleetspace.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class FleetspaceResource : ProxyResourceAutoGenerated
    {
        /// <summary>
        /// Initializes a new instance of the FleetspaceResource class.
        /// </summary>
        public FleetspaceResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FleetspaceResource class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. E.g.
        /// &#34;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#34;
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="systemData">Azure Resource Manager metadata containing createdBy and modifiedBy
        /// information.
        /// </param>

        /// <param name="provisioningState">A provisioning state of the Fleetspace.
        /// Possible values include: &#39;Uninitialized&#39;, &#39;Initializing&#39;,
        /// &#39;InternallyReady&#39;, &#39;Online&#39;, &#39;Deleting&#39;, &#39;Creating&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;,
        /// &#39;Canceled&#39;, &#39;Updating&#39;</param>

        /// <param name="fleetspaceApiKind">The kind of API this fleetspace belongs to. Acceptable values: &#39;NoSQL&#39;
        /// Possible values include: &#39;NoSQL&#39;</param>

        /// <param name="throughputPoolConfiguration">Configuration for throughput pool in the fleetspace.
        /// </param>
        public FleetspaceResource(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string provisioningState = default(string), string fleetspaceApiKind = default(string), FleetspacePropertiesThroughputPoolConfiguration throughputPoolConfiguration = default(FleetspacePropertiesThroughputPoolConfiguration))

        : base(id, name, type, systemData)
        {
            this.ProvisioningState = provisioningState;
            this.FleetspaceApiKind = fleetspaceApiKind;
            this.ThroughputPoolConfiguration = throughputPoolConfiguration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a provisioning state of the Fleetspace. Possible values include: &#39;Uninitialized&#39;, &#39;Initializing&#39;, &#39;InternallyReady&#39;, &#39;Online&#39;, &#39;Deleting&#39;, &#39;Creating&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;Updating&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; set; }

        /// <summary>
        /// Gets or sets the kind of API this fleetspace belongs to. Acceptable values:
        /// &#39;NoSQL&#39; Possible values include: &#39;NoSQL&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.fleetspaceApiKind")]
        public string FleetspaceApiKind {get; set; }

        /// <summary>
        /// Gets or sets configuration for throughput pool in the fleetspace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.throughputPoolConfiguration")]
        public FleetspacePropertiesThroughputPoolConfiguration ThroughputPoolConfiguration {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.ThroughputPoolConfiguration != null)
            {
                this.ThroughputPoolConfiguration.Validate();
            }
        }
    }
}