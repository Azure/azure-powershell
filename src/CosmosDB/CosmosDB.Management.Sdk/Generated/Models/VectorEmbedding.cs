// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    /// <summary>
    /// Represents a vector embedding. A vector embedding is used to define a
    /// vector field in the documents.
    /// </summary>
    public partial class VectorEmbedding
    {
        /// <summary>
        /// Initializes a new instance of the VectorEmbedding class.
        /// </summary>
        public VectorEmbedding()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VectorEmbedding class.
        /// </summary>

        /// <param name="path">The path to the vector field in the document.
        /// </param>

        /// <param name="dataType">Indicates the data type of vector.
        /// Possible values include: &#39;float32&#39;, &#39;uint8&#39;, &#39;int8&#39;</param>

        /// <param name="distanceFunction">The distance function to use for distance calculation in between vectors.
        /// Possible values include: &#39;euclidean&#39;, &#39;cosine&#39;, &#39;dotproduct&#39;</param>

        /// <param name="dimensions">The number of dimensions in the vector.
        /// </param>
        public VectorEmbedding(string path, string dataType, string distanceFunction, int dimensions)

        {
            this.Path = path;
            this.DataType = dataType;
            this.DistanceFunction = distanceFunction;
            this.Dimensions = dimensions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the path to the vector field in the document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "path")]
        public string Path {get; set; }

        /// <summary>
        /// Gets or sets indicates the data type of vector. Possible values include: &#39;float32&#39;, &#39;uint8&#39;, &#39;int8&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataType")]
        public string DataType {get; set; }

        /// <summary>
        /// Gets or sets the distance function to use for distance calculation in
        /// between vectors. Possible values include: &#39;euclidean&#39;, &#39;cosine&#39;, &#39;dotproduct&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "distanceFunction")]
        public string DistanceFunction {get; set; }

        /// <summary>
        /// Gets or sets the number of dimensions in the vector.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dimensions")]
        public int Dimensions {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Path == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Path");
            }
            if (this.DataType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DataType");
            }
            if (this.DistanceFunction == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DistanceFunction");
            }



        }
    }
}