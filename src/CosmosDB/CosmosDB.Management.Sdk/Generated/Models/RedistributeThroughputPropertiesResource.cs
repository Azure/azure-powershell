// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    /// <summary>
    /// Resource to redistribute throughput for Azure Cosmos DB resource
    /// </summary>
    public partial class RedistributeThroughputPropertiesResource
    {
        /// <summary>
        /// Initializes a new instance of the RedistributeThroughputPropertiesResource class.
        /// </summary>
        public RedistributeThroughputPropertiesResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RedistributeThroughputPropertiesResource class.
        /// </summary>

        /// <param name="throughputPolicy">ThroughputPolicy to apply for throughput redistribution
        /// Possible values include: &#39;none&#39;, &#39;equal&#39;, &#39;custom&#39;</param>

        /// <param name="targetPhysicalPartitionThroughputInfo">Array of PhysicalPartitionThroughputInfoResource objects.
        /// </param>

        /// <param name="sourcePhysicalPartitionThroughputInfo">Array of PhysicalPartitionThroughputInfoResource objects.
        /// </param>
        public RedistributeThroughputPropertiesResource(string throughputPolicy, System.Collections.Generic.IList<PhysicalPartitionThroughputInfoResource> targetPhysicalPartitionThroughputInfo, System.Collections.Generic.IList<PhysicalPartitionThroughputInfoResource> sourcePhysicalPartitionThroughputInfo)

        {
            this.ThroughputPolicy = throughputPolicy;
            this.TargetPhysicalPartitionThroughputInfo = targetPhysicalPartitionThroughputInfo;
            this.SourcePhysicalPartitionThroughputInfo = sourcePhysicalPartitionThroughputInfo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets throughputPolicy to apply for throughput redistribution Possible values include: &#39;none&#39;, &#39;equal&#39;, &#39;custom&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "throughputPolicy")]
        public string ThroughputPolicy {get; set; }

        /// <summary>
        /// Gets or sets array of PhysicalPartitionThroughputInfoResource objects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetPhysicalPartitionThroughputInfo")]
        public System.Collections.Generic.IList<PhysicalPartitionThroughputInfoResource> TargetPhysicalPartitionThroughputInfo {get; set; }

        /// <summary>
        /// Gets or sets array of PhysicalPartitionThroughputInfoResource objects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourcePhysicalPartitionThroughputInfo")]
        public System.Collections.Generic.IList<PhysicalPartitionThroughputInfoResource> SourcePhysicalPartitionThroughputInfo {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ThroughputPolicy == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ThroughputPolicy");
            }
            if (this.TargetPhysicalPartitionThroughputInfo == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TargetPhysicalPartitionThroughputInfo");
            }
            if (this.SourcePhysicalPartitionThroughputInfo == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SourcePhysicalPartitionThroughputInfo");
            }

            if (this.TargetPhysicalPartitionThroughputInfo != null)
            {
                foreach (var element in this.TargetPhysicalPartitionThroughputInfo)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.SourcePhysicalPartitionThroughputInfo != null)
            {
                foreach (var element in this.SourcePhysicalPartitionThroughputInfo)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}