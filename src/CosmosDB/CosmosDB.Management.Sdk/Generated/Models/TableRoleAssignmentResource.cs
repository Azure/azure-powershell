// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    /// <summary>
    /// Parameters to create and update an Azure Cosmos DB Table Role Assignment.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class TableRoleAssignmentResource : ProxyResourceAutoGenerated
    {
        /// <summary>
        /// Initializes a new instance of the TableRoleAssignmentResource class.
        /// </summary>
        public TableRoleAssignmentResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TableRoleAssignmentResource class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. E.g.
        /// &#34;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#34;
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="systemData">Azure Resource Manager metadata containing createdBy and modifiedBy
        /// information.
        /// </param>

        /// <param name="roleDefinitionId">The unique identifier for the associated Role Definition.
        /// </param>

        /// <param name="scope">The data plane resource path for which access is being granted through this
        /// Table Role Assignment.
        /// </param>

        /// <param name="principalId">The unique identifier for the associated AAD principal in the AAD graph to
        /// which access is being granted through this Table Role Assignment. Tenant ID
        /// for the principal is inferred using the tenant associated with the
        /// subscription.
        /// </param>

        /// <param name="provisioningState">Provisioning state of the resource.
        /// </param>
        public TableRoleAssignmentResource(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string roleDefinitionId = default(string), string scope = default(string), string principalId = default(string), string provisioningState = default(string))

        : base(id, name, type, systemData)
        {
            this.RoleDefinitionId = roleDefinitionId;
            this.Scope = scope;
            this.PrincipalId = principalId;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the unique identifier for the associated Role Definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.roleDefinitionId")]
        public string RoleDefinitionId {get; set; }

        /// <summary>
        /// Gets or sets the data plane resource path for which access is being granted
        /// through this Table Role Assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.scope")]
        public string Scope {get; set; }

        /// <summary>
        /// Gets or sets the unique identifier for the associated AAD principal in the
        /// AAD graph to which access is being granted through this Table Role
        /// Assignment. Tenant ID for the principal is inferred using the tenant
        /// associated with the subscription.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.principalId")]
        public string PrincipalId {get; set; }

        /// <summary>
        /// Gets provisioning state of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }
    }
}