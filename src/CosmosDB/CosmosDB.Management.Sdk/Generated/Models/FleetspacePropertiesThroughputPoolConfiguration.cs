// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    /// <summary>
    /// Configuration for throughput pool in the fleetspace.
    /// </summary>
    public partial class FleetspacePropertiesThroughputPoolConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the FleetspacePropertiesThroughputPoolConfiguration class.
        /// </summary>
        public FleetspacePropertiesThroughputPoolConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FleetspacePropertiesThroughputPoolConfiguration class.
        /// </summary>

        /// <param name="minThroughput">Minimum throughput for the pool.
        /// </param>

        /// <param name="maxThroughput">Maximum throughput for the pool.
        /// </param>

        /// <param name="serviceTier">Service Tier for the fleetspace. GeneralPurpose types refers to single
        /// write region accounts that can be added to this fleetspace, whereas
        /// BusinessCritical refers to multi write region.
        /// Possible values include: &#39;GeneralPurpose&#39;, &#39;BusinessCritical&#39;</param>

        /// <param name="dataRegions">List of data regions assigned to the fleetspace. Eg [westus2]
        /// </param>
        public FleetspacePropertiesThroughputPoolConfiguration(int? minThroughput = default(int?), int? maxThroughput = default(int?), string serviceTier = default(string), System.Collections.Generic.IList<string> dataRegions = default(System.Collections.Generic.IList<string>))

        {
            this.MinThroughput = minThroughput;
            this.MaxThroughput = maxThroughput;
            this.ServiceTier = serviceTier;
            this.DataRegions = dataRegions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets minimum throughput for the pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minThroughput")]
        public int? MinThroughput {get; set; }

        /// <summary>
        /// Gets or sets maximum throughput for the pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxThroughput")]
        public int? MaxThroughput {get; set; }

        /// <summary>
        /// Gets or sets service Tier for the fleetspace. GeneralPurpose types refers
        /// to single write region accounts that can be added to this fleetspace,
        /// whereas BusinessCritical refers to multi write region. Possible values include: &#39;GeneralPurpose&#39;, &#39;BusinessCritical&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceTier")]
        public string ServiceTier {get; set; }

        /// <summary>
        /// Gets or sets list of data regions assigned to the fleetspace. Eg [westus2]
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataRegions")]
        public System.Collections.Generic.IList<string> DataRegions {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.DataRegions != null)
            {
                if (this.DataRegions.Count < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinItems, "DataRegions", 1);
                }
            }
        }
    }
}