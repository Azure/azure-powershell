// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using System.Linq;

    /// <summary>
    /// The configuration of the partition key to be used for partitioning data
    /// into multiple partitions
    /// </summary>
    public partial class ContainerPartitionKey
    {
        /// <summary>
        /// Initializes a new instance of the ContainerPartitionKey class.
        /// </summary>
        public ContainerPartitionKey()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ContainerPartitionKey class.
        /// </summary>

        /// <param name="paths">List of paths using which data within the container can be partitioned
        /// </param>

        /// <param name="kind">Indicates the kind of algorithm used for partitioning. For MultiHash,
        /// multiple partition keys (upto three maximum) are supported for container
        /// create
        /// Possible values include: &#39;Hash&#39;, &#39;Range&#39;, &#39;MultiHash&#39;</param>

        /// <param name="version">Indicates the version of the partition key definition
        /// </param>

        /// <param name="systemKey">Indicates if the container is using a system generated partition key
        /// </param>
        public ContainerPartitionKey(System.Collections.Generic.IList<string> paths = default(System.Collections.Generic.IList<string>), string kind = default(string), int? version = default(int?), bool? systemKey = default(bool?))

        {
            this.Paths = paths;
            this.Kind = kind;
            this.Version = version;
            this.SystemKey = systemKey;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets list of paths using which data within the container can be
        /// partitioned
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "paths")]
        public System.Collections.Generic.IList<string> Paths {get; set; }

        /// <summary>
        /// Gets or sets indicates the kind of algorithm used for partitioning. For
        /// MultiHash, multiple partition keys (upto three maximum) are supported for
        /// container create Possible values include: &#39;Hash&#39;, &#39;Range&#39;, &#39;MultiHash&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "kind")]
        public string Kind {get; set; }

        /// <summary>
        /// Gets or sets indicates the version of the partition key definition
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "version")]
        public int? Version {get; set; }

        /// <summary>
        /// Gets indicates if the container is using a system generated partition key
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "systemKey")]
        public bool? SystemKey {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.Version != null)
            {
                if (this.Version > 2)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "Version", 2);
                }
                if (this.Version < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Version", 1);
                }
            }
        }
    }
}