
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates a new server or updates an existing server.
The update action will overwrite the existing server.
.Description
Creates a new server or updates an existing server.
The update action will overwrite the existing server.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.MySql.Models.IMySqlIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.MySql.Models.IServer
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IMySqlIdentity>: Identity Parameter
  [AdvancedThreatProtectionName <String>]: The name of the Advanced Threat Protection state.
  [BackupName <String>]: The name of the backup.
  [ConfigurationName <String>]: The name of the server configuration.
  [DatabaseName <String>]: The name of the database.
  [FirewallRuleName <String>]: The name of the server firewall rule.
  [Id <String>]: Resource identity path
  [LocationName <String>]: The name of the location.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SecurityAlertPolicyName <String>]: The name of the security alert policy.
  [ServerName <String>]: The name of the server.
  [SubscriptionId <String>]: The ID of the target subscription.
  [VirtualNetworkRuleName <String>]: The name of the virtual network rule.
.Link
https://learn.microsoft.com/powershell/module/az.mysql/new-azmysqlserver
#>
function New-AzMySqlServer {
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.MySql.Models.IServer])]
    [CmdletBinding(DefaultParameterSetName = 'CreateExpanded', PositionalBinding = $false, SupportsShouldProcess, ConfirmImpact = 'Medium')]
    param(
        [Parameter(ParameterSetName = 'CreateExpanded', Mandatory)]
        [Parameter(ParameterSetName = 'CreateViaJsonFilePath', Mandatory)]
        [Parameter(ParameterSetName = 'CreateViaJsonString', Mandatory)]
        [Alias('ServerName')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Path')]
        [System.String]
        # The name of the server.
        ${Name},

        [Parameter(ParameterSetName = 'CreateExpanded', Mandatory)]
        [Parameter(ParameterSetName = 'CreateViaJsonFilePath', Mandatory)]
        [Parameter(ParameterSetName = 'CreateViaJsonString', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Path')]
        [System.String]
        # The name of the resource group.
        # The name is case insensitive.
        ${ResourceGroupName},

        [Parameter(ParameterSetName = 'CreateExpanded')]
        [Parameter(ParameterSetName = 'CreateViaJsonFilePath')]
        [Parameter(ParameterSetName = 'CreateViaJsonString')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Runtime.DefaultInfo(Script = '(Get-AzContext).Subscription.Id')]
        [System.String]
        # The ID of the target subscription.
        ${SubscriptionId},

        [Parameter(ParameterSetName = 'CreateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Models.IMySqlIdentity]
        # Identity Parameter
        ${InputObject},

        [Parameter(ParameterSetName = 'CreateExpanded', Mandatory)]
        [Parameter(ParameterSetName = 'CreateViaIdentityExpanded', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
        [System.String]
        # The location the resource resides in.
        ${Location},

        [Parameter(ParameterSetName = 'CreateExpanded')]
        [Parameter(ParameterSetName = 'CreateViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
        [System.Int32]
        # Backup retention days for the server.
        # Day count is between 7 and 35.
        ${BackupRetentionDay},

        [Parameter(ParameterSetName = 'CreateExpanded')]
        [Parameter(ParameterSetName = 'CreateViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
        [System.String]
        # Enable Geo-redundant or not for server backup.
        ${GeoRedundantBackup},

        [Parameter(ParameterSetName = 'CreateExpanded')]
        [Parameter(ParameterSetName = 'CreateViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.PSArgumentCompleterAttribute("SystemAssigned")]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
        [System.String]
        # The identity type.
        # Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
        ${IdentityType},

        [Parameter(ParameterSetName = 'CreateExpanded')]
        [Parameter(ParameterSetName = 'CreateViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
        [System.String]
        # Status showing whether the server enabled infrastructure encryption.
        ${InfrastructureEncryption},

        [Parameter(ParameterSetName = 'CreateExpanded')]
        [Parameter(ParameterSetName = 'CreateViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.PSArgumentCompleterAttribute("TLS1_0", "TLS1_1", "TLS1_2", "TLSEnforcementDisabled")]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
        [System.String]
        # Enforce a minimal Tls version for the server.
        ${MinimalTlsVersion},

        [Parameter(ParameterSetName = 'CreateExpanded')]
        [Parameter(ParameterSetName = 'CreateViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
        [System.String]
        # Whether or not public network access is allowed for this server.
        # Value is optional but if passed in, must be 'Enabled' or 'Disabled'
        ${PublicNetworkAccess},

        [Parameter(ParameterSetName = 'CreateExpanded', Mandatory)]
        [Parameter(ParameterSetName = 'CreateViaIdentityExpanded', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
        [System.String]
        # The name of the sku, typically, tier + family + cores, e.g.
        # B_Gen4_1, GP_Gen5_8.
        ${Sku},

        [Parameter(ParameterSetName = 'CreateExpanded')]
        [Parameter(ParameterSetName = 'CreateViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
        [System.String]
        # Enable ssl enforcement or not when connect to server.
        ${SslEnforcement},

        [Parameter(ParameterSetName = 'CreateExpanded')]
        [Parameter(ParameterSetName = 'CreateViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
        [System.String]
        # Enable Storage Auto Grow.
        ${StorageAutoGrow},

        [Parameter(ParameterSetName = 'CreateExpanded')]
        [Parameter(ParameterSetName = 'CreateViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
        [System.Int32]
        # Max storage allowed for a server.
        ${StorageInMb},

        [Parameter(ParameterSetName = 'CreateExpanded')]
        [Parameter(ParameterSetName = 'CreateViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Runtime.Info(PossibleTypes = ([Microsoft.Azure.PowerShell.Cmdlets.MySql.Models.IServerForCreateTags]))]
        [System.Collections.Hashtable]
        # Application-specific metadata in the form of key-value pairs.
        ${Tag},

        [Parameter(ParameterSetName = 'CreateExpanded')]
        [Parameter(ParameterSetName = 'CreateViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.PSArgumentCompleterAttribute("5.6", "5.7", "8.0", "8.0.21")]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
        [System.String]
        # Server version.
        ${Version},

        [Parameter(ParameterSetName = 'CreateViaJsonFilePath', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
        [System.String]
        # Path of Json file supplied to the Create operation
        ${JsonFilePath},

        [Parameter(ParameterSetName = 'CreateViaJsonString', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
        [System.String]
        # Json string supplied to the Create operation
        ${JsonString},

        [Parameter(Mandatory, HelpMessage = 'Administrator username for the server. Once set, it cannot be changed.')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
        [System.String]
        ${AdministratorUserName},

        [Parameter(Mandatory, HelpMessage = 'The password of the administrator. Minimum 8 characters and maximum 128 characters. Password must contain characters from three of the following categories: English uppercase letters, English lowercase letters, numbers, and non-alphanumeric characters.')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Body')]
        [System.Security.SecureString]
        [ValidateNotNullOrEmpty()]
        ${AdministratorLoginPassword},

        [Parameter()]
        [Alias('AzureRMContext', 'AzureCredential')]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Azure')]
        [System.Management.Automation.PSObject]
        # The DefaultProfile parameter is not functional.
        # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
        ${DefaultProfile},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command as a job
        ${AsJob},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Wait for .NET debugger to attach
        ${Break},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be appended to the front of the pipeline
        ${HttpPipelineAppend},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be prepended to the front of the pipeline
        ${HttpPipelinePrepend},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command asynchronously
        ${NoWait},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Runtime')]
        [System.Uri]
        # The URI for the proxy server to use
        ${Proxy},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Runtime')]
        [System.Management.Automation.PSCredential]
        # Credentials for a proxy server to use for the remote call
        ${ProxyCredential},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.MySql.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Use the default credentials for the proxy
        ${ProxyUseDefaultCredentials}
    )

    process {
        try {
            $Parameter = [Microsoft.Azure.PowerShell.Cmdlets.MySql.Models.ServerForCreate]::new()
            $Parameter.Sku = [Microsoft.Azure.PowerShell.Cmdlets.MySql.Models.Sku]::new()
            $Parameter.Property = [Microsoft.Azure.PowerShell.Cmdlets.MySql.Models.ServerPropertiesForDefaultCreate]::new()
            $Parameter.Property.StorageProfile = [Microsoft.Azure.PowerShell.Cmdlets.MySql.Models.StorageProfile]::new()

            if ($PSBoundParameters.ContainsKey('SslEnforcement')) {
                $Parameter.Property.SslEnforcement = $PSBoundParameters['SslEnforcement']
                $null = $PSBoundParameters.Remove('SslEnforcement')
            }
            else {
                $Parameter.Property.SslEnforcement = "Enabled"
            }
  
            if ($PSBoundParameters.ContainsKey('MinimalTlsVersion')) {
                $Parameter.Property.MinimalTlsVersion = $PSBoundParameters['MinimalTlsVersion']
                $null = $PSBoundParameters.Remove('MinimalTlsVersion')
            }

            if ($PSBoundParameters.ContainsKey('Version')) {
                $Parameter.Property.Version = $PSBoundParameters['Version']
                $null = $PSBoundParameters.Remove('Version')
            }

            $Parameter.Property.CreateMode = "Default"

            if ($PSBoundParameters.ContainsKey('Sku')) {
                $Parameter.Sku.Name = $PSBoundParameters['Sku']
                $null = $PSBoundParameters.Remove('Sku')
            }

            if ($PSBoundParameters.ContainsKey('BackupRetentionDay')) {
                $Parameter.Property.StorageProfile.BackupRetentionDay = $PSBoundParameters['BackupRetentionDay']
                $null = $PSBoundParameters.Remove('BackupRetentionDay')
            }
  
            if ($PSBoundParameters.ContainsKey('GeoRedundantBackup')) {
                $Parameter.Property.StorageProfile.GeoRedundantBackup = $PSBoundParameters['GeoRedundantBackup']
                $null = $PSBoundParameters.Remove('GeoRedundantBackup')
            }
  
            if ($PSBoundParameters.ContainsKey('StorageAutoGrow')) {
                $Parameter.Property.StorageProfile.StorageAutoGrow = $PSBoundParameters['StorageAutoGrow']
                $null = $PSBoundParameters.Remove('StorageAutoGrow')
            }
  
            if ($PSBoundParameters.ContainsKey('StorageInMb')) {
                $Parameter.Property.StorageProfile.StorageMb = $PSBoundParameters['StorageInMb']
                $null = $PSBoundParameters.Remove('StorageInMb')
            }

            $Parameter.Property.AdministratorLogin = $PSBoundParameters['AdministratorUserName']
            $null = $PSBoundParameters.Remove('AdministratorUserName')
  
            $Parameter.Property.AdministratorLoginPassword = $PSBoundParameters['AdministratorLoginPassword']
            $null = $PSBoundParameters.Remove('AdministratorLoginPassword')
  
            $PSBoundParameters.Add('Property', $Parameter.Property)
            $PSBoundParameters.Add('Sku', $Parameter.Sku)
            Az.MySql.internal\New-AzMySqlServer @PSBoundParameters
        }
        catch {
            throw
        }
    }
}
