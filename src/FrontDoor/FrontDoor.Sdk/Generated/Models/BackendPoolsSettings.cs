// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.698)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using System.Linq;

    /// <summary>
    /// Settings that apply to all backend pools.
    /// </summary>
    public partial class BackendPoolsSettings
    {
        /// <summary>
        /// Initializes a new instance of the BackendPoolsSettings class.
        /// </summary>
        public BackendPoolsSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BackendPoolsSettings class.
        /// </summary>

        /// <param name="enforceCertificateNameCheck">Whether to enforce certificate name check on HTTPS requests to all backend
        /// pools. No effect on non-HTTPS requests.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="sendRecvTimeoutSeconds">Send and receive timeout on forwarding request to the backend. When timeout
        /// is reached, the request fails and returns.
        /// </param>
        public BackendPoolsSettings(string enforceCertificateNameCheck = default(string), int? sendRecvTimeoutSeconds = default(int?))

        {
            this.EnforceCertificateNameCheck = enforceCertificateNameCheck;
            this.SendRecvTimeoutSeconds = sendRecvTimeoutSeconds;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets whether to enforce certificate name check on HTTPS requests to
        /// all backend pools. No effect on non-HTTPS requests. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enforceCertificateNameCheck")]
        public string EnforceCertificateNameCheck {get; set; }

        /// <summary>
        /// Gets or sets send and receive timeout on forwarding request to the backend.
        /// When timeout is reached, the request fails and returns.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sendRecvTimeoutSeconds")]
        public int? SendRecvTimeoutSeconds {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.SendRecvTimeoutSeconds != null)
            {
                if (this.SendRecvTimeoutSeconds < 16)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "SendRecvTimeoutSeconds", 16);
                }
            }
        }
    }
}