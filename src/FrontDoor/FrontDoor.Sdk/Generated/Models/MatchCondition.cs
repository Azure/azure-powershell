// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.698)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using System.Linq;

    /// <summary>
    /// Define a match condition.
    /// </summary>
    public partial class MatchCondition
    {
        /// <summary>
        /// Initializes a new instance of the MatchCondition class.
        /// </summary>
        public MatchCondition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MatchCondition class.
        /// </summary>

        /// <param name="matchVariable">Request variable to compare with.
        /// Possible values include: &#39;RemoteAddr&#39;, &#39;RequestMethod&#39;, &#39;QueryString&#39;,
        /// &#39;PostArgs&#39;, &#39;RequestUri&#39;, &#39;RequestHeader&#39;, &#39;RequestBody&#39;, &#39;Cookies&#39;,
        /// &#39;SocketAddr&#39;</param>

        /// <param name="selector">Match against a specific key from the QueryString, PostArgs, RequestHeader
        /// or Cookies variables. Default is null.
        /// </param>

        /// <param name="operatorProperty">Comparison type to use for matching with the variable value.
        /// Possible values include: &#39;Any&#39;, &#39;IPMatch&#39;, &#39;GeoMatch&#39;, &#39;Equal&#39;, &#39;Contains&#39;,
        /// &#39;LessThan&#39;, &#39;GreaterThan&#39;, &#39;LessThanOrEqual&#39;, &#39;GreaterThanOrEqual&#39;,
        /// &#39;BeginsWith&#39;, &#39;EndsWith&#39;, &#39;RegEx&#39;</param>

        /// <param name="negateCondition">Describes if the result of this condition should be negated.
        /// </param>

        /// <param name="matchValue">List of possible match values.
        /// </param>

        /// <param name="transforms">List of transforms.
        /// </param>
        public MatchCondition(string matchVariable, string operatorProperty, System.Collections.Generic.IList<string> matchValue, string selector = default(string), bool? negateCondition = default(bool?), System.Collections.Generic.IList<string> transforms = default(System.Collections.Generic.IList<string>))

        {
            this.MatchVariable = matchVariable;
            this.Selector = selector;
            this.OperatorProperty = operatorProperty;
            this.NegateCondition = negateCondition;
            this.MatchValue = matchValue;
            this.Transforms = transforms;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets request variable to compare with. Possible values include: &#39;RemoteAddr&#39;, &#39;RequestMethod&#39;, &#39;QueryString&#39;, &#39;PostArgs&#39;, &#39;RequestUri&#39;, &#39;RequestHeader&#39;, &#39;RequestBody&#39;, &#39;Cookies&#39;, &#39;SocketAddr&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "matchVariable")]
        public string MatchVariable {get; set; }

        /// <summary>
        /// Gets or sets match against a specific key from the QueryString, PostArgs,
        /// RequestHeader or Cookies variables. Default is null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "selector")]
        public string Selector {get; set; }

        /// <summary>
        /// Gets or sets comparison type to use for matching with the variable value. Possible values include: &#39;Any&#39;, &#39;IPMatch&#39;, &#39;GeoMatch&#39;, &#39;Equal&#39;, &#39;Contains&#39;, &#39;LessThan&#39;, &#39;GreaterThan&#39;, &#39;LessThanOrEqual&#39;, &#39;GreaterThanOrEqual&#39;, &#39;BeginsWith&#39;, &#39;EndsWith&#39;, &#39;RegEx&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operator")]
        public string OperatorProperty {get; set; }

        /// <summary>
        /// Gets or sets describes if the result of this condition should be negated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "negateCondition")]
        public bool? NegateCondition {get; set; }

        /// <summary>
        /// Gets or sets list of possible match values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "matchValue")]
        public System.Collections.Generic.IList<string> MatchValue {get; set; }

        /// <summary>
        /// Gets or sets list of transforms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "transforms")]
        public System.Collections.Generic.IList<string> Transforms {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.MatchVariable == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MatchVariable");
            }
            if (this.OperatorProperty == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "OperatorProperty");
            }
            if (this.MatchValue == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MatchValue");
            }





        }
    }
}