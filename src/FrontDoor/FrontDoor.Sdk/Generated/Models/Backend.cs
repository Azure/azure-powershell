// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.698)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using System.Linq;

    /// <summary>
    /// Backend address of a frontDoor load balancer.
    /// </summary>
    public partial class Backend
    {
        /// <summary>
        /// Initializes a new instance of the Backend class.
        /// </summary>
        public Backend()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Backend class.
        /// </summary>

        /// <param name="address">Location of the backend (IP address or FQDN)
        /// </param>

        /// <param name="privateLinkAlias">The Alias of the Private Link resource. Populating this optional field
        /// indicates that this backend is &#39;Private&#39;
        /// </param>

        /// <param name="privateLinkResourceId">The Resource Id of the Private Link resource. Populating this optional
        /// field indicates that this backend is &#39;Private&#39;
        /// </param>

        /// <param name="privateLinkLocation">The location of the Private Link resource. Required only if
        /// &#39;privateLinkResourceId&#39; is populated
        /// </param>

        /// <param name="privateEndpointStatus">The Approval status for the connection to the Private Link
        /// Possible values include: &#39;Pending&#39;, &#39;Approved&#39;, &#39;Rejected&#39;, &#39;Disconnected&#39;,
        /// &#39;Timeout&#39;</param>

        /// <param name="privateLinkApprovalMessage">A custom message to be included in the approval request to connect to the
        /// Private Link
        /// </param>

        /// <param name="httpPort">The HTTP TCP port number. Must be between 1 and 65535.
        /// </param>

        /// <param name="httpsPort">The HTTPS TCP port number. Must be between 1 and 65535.
        /// </param>

        /// <param name="enabledState">Whether to enable use of this backend. Permitted values are &#39;Enabled&#39; or
        /// &#39;Disabled&#39;
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="priority">Priority to use for load balancing. Higher priorities will not be used for
        /// load balancing if any lower priority backend is healthy.
        /// </param>

        /// <param name="weight">Weight of this endpoint for load balancing purposes.
        /// </param>

        /// <param name="backendHostHeader">The value to use as the host header sent to the backend. If blank or
        /// unspecified, this defaults to the incoming host.
        /// </param>
        public Backend(string address = default(string), string privateLinkAlias = default(string), string privateLinkResourceId = default(string), string privateLinkLocation = default(string), string privateEndpointStatus = default(string), string privateLinkApprovalMessage = default(string), int? httpPort = default(int?), int? httpsPort = default(int?), string enabledState = default(string), int? priority = default(int?), int? weight = default(int?), string backendHostHeader = default(string))

        {
            this.Address = address;
            this.PrivateLinkAlias = privateLinkAlias;
            this.PrivateLinkResourceId = privateLinkResourceId;
            this.PrivateLinkLocation = privateLinkLocation;
            this.PrivateEndpointStatus = privateEndpointStatus;
            this.PrivateLinkApprovalMessage = privateLinkApprovalMessage;
            this.HttpPort = httpPort;
            this.HttpsPort = httpsPort;
            this.EnabledState = enabledState;
            this.Priority = priority;
            this.Weight = weight;
            this.BackendHostHeader = backendHostHeader;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets location of the backend (IP address or FQDN)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "address")]
        public string Address {get; set; }

        /// <summary>
        /// Gets or sets the Alias of the Private Link resource. Populating this
        /// optional field indicates that this backend is &#39;Private&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateLinkAlias")]
        public string PrivateLinkAlias {get; set; }

        /// <summary>
        /// Gets or sets the Resource Id of the Private Link resource. Populating this
        /// optional field indicates that this backend is &#39;Private&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateLinkResourceId")]
        public string PrivateLinkResourceId {get; set; }

        /// <summary>
        /// Gets or sets the location of the Private Link resource. Required only if
        /// &#39;privateLinkResourceId&#39; is populated
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateLinkLocation")]
        public string PrivateLinkLocation {get; set; }

        /// <summary>
        /// Gets the Approval status for the connection to the Private Link Possible values include: &#39;Pending&#39;, &#39;Approved&#39;, &#39;Rejected&#39;, &#39;Disconnected&#39;, &#39;Timeout&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateEndpointStatus")]
        public string PrivateEndpointStatus {get; private set; }

        /// <summary>
        /// Gets or sets a custom message to be included in the approval request to
        /// connect to the Private Link
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateLinkApprovalMessage")]
        public string PrivateLinkApprovalMessage {get; set; }

        /// <summary>
        /// Gets or sets the HTTP TCP port number. Must be between 1 and 65535.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "httpPort")]
        public int? HttpPort {get; set; }

        /// <summary>
        /// Gets or sets the HTTPS TCP port number. Must be between 1 and 65535.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "httpsPort")]
        public int? HttpsPort {get; set; }

        /// <summary>
        /// Gets or sets whether to enable use of this backend. Permitted values are
        /// &#39;Enabled&#39; or &#39;Disabled&#39; Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enabledState")]
        public string EnabledState {get; set; }

        /// <summary>
        /// Gets or sets priority to use for load balancing. Higher priorities will not
        /// be used for load balancing if any lower priority backend is healthy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "priority")]
        public int? Priority {get; set; }

        /// <summary>
        /// Gets or sets weight of this endpoint for load balancing purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "weight")]
        public int? Weight {get; set; }

        /// <summary>
        /// Gets or sets the value to use as the host header sent to the backend. If
        /// blank or unspecified, this defaults to the incoming host.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backendHostHeader")]
        public string BackendHostHeader {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {






            if (this.HttpPort != null)
            {
                if (this.HttpPort > 65535)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "HttpPort", 65535);
                }
                if (this.HttpPort < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "HttpPort", 1);
                }
            }
            if (this.HttpsPort != null)
            {
                if (this.HttpsPort > 65535)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "HttpsPort", 65535);
                }
                if (this.HttpsPort < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "HttpsPort", 1);
                }
            }

            if (this.Priority != null)
            {
                if (this.Priority > 5)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "Priority", 5);
                }
                if (this.Priority < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Priority", 1);
                }
            }
            if (this.Weight != null)
            {
                if (this.Weight > 1000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "Weight", 1000);
                }
                if (this.Weight < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Weight", 1);
                }
            }

        }
    }
}