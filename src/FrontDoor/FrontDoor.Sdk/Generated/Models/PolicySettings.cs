// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines top-level WebApplicationFirewallPolicy configuration settings.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PolicySettings
    {
        /// <summary>
        /// Initializes a new instance of the PolicySettings class.
        /// </summary>
        public PolicySettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PolicySettings class.
        /// </summary>
        /// <param name="enabledState">Describes if the policy is in enabled or
        /// disabled state. Defaults to Enabled if not specified. Possible
        /// values include: 'Disabled', 'Enabled'</param>
        /// <param name="mode">Describes if it is in detection mode or
        /// prevention mode at policy level. Possible values include:
        /// 'Prevention', 'Detection'</param>
        /// <param name="redirectUrl">If action type is redirect, this field
        /// represents redirect URL for the client.</param>
        /// <param name="customBlockResponseStatusCode">If the action type is
        /// block, customer can override the response status code.</param>
        /// <param name="customBlockResponseBody">If the action type is block,
        /// customer can override the response body. The body must be specified
        /// in base64 encoding.</param>
        /// <param name="requestBodyCheck">Describes if policy managed rules
        /// will inspect the request body content. Possible values include:
        /// 'Disabled', 'Enabled'</param>
        /// <param name="javascriptChallengeExpirationInMinutes">Defines the
        /// JavaScript challenge cookie validity lifetime in minutes. This
        /// setting is only applicable to Premium_AzureFrontDoor. Value must be
        /// an integer between 5 and 1440 with the default value being
        /// 30.</param>
        /// <param name="state">State of the log scrubbing config. Default
        /// value is Enabled. Possible values include: 'Enabled',
        /// 'Disabled'</param>
        /// <param name="scrubbingRules">List of log scrubbing rules applied to
        /// the Web Application Firewall logs.</param>
        public PolicySettings(string enabledState = default(string), string mode = default(string), string redirectUrl = default(string), int? customBlockResponseStatusCode = default(int?), string customBlockResponseBody = default(string), string requestBodyCheck = default(string), int? javascriptChallengeExpirationInMinutes = default(int?), string state = default(string), IList<WebApplicationFirewallScrubbingRules> scrubbingRules = default(IList<WebApplicationFirewallScrubbingRules>))
        {
            EnabledState = enabledState;
            Mode = mode;
            RedirectUrl = redirectUrl;
            CustomBlockResponseStatusCode = customBlockResponseStatusCode;
            CustomBlockResponseBody = customBlockResponseBody;
            RequestBodyCheck = requestBodyCheck;
            JavascriptChallengeExpirationInMinutes = javascriptChallengeExpirationInMinutes;
            State = state;
            ScrubbingRules = scrubbingRules;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets describes if the policy is in enabled or disabled
        /// state. Defaults to Enabled if not specified. Possible values
        /// include: 'Disabled', 'Enabled'
        /// </summary>
        [JsonProperty(PropertyName = "enabledState")]
        public string EnabledState { get; set; }

        /// <summary>
        /// Gets or sets describes if it is in detection mode or prevention
        /// mode at policy level. Possible values include: 'Prevention',
        /// 'Detection'
        /// </summary>
        [JsonProperty(PropertyName = "mode")]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or sets if action type is redirect, this field represents
        /// redirect URL for the client.
        /// </summary>
        [JsonProperty(PropertyName = "redirectUrl")]
        public string RedirectUrl { get; set; }

        /// <summary>
        /// Gets or sets if the action type is block, customer can override the
        /// response status code.
        /// </summary>
        [JsonProperty(PropertyName = "customBlockResponseStatusCode")]
        public int? CustomBlockResponseStatusCode { get; set; }

        /// <summary>
        /// Gets or sets if the action type is block, customer can override the
        /// response body. The body must be specified in base64 encoding.
        /// </summary>
        [JsonProperty(PropertyName = "customBlockResponseBody")]
        public string CustomBlockResponseBody { get; set; }

        /// <summary>
        /// Gets or sets describes if policy managed rules will inspect the
        /// request body content. Possible values include: 'Disabled',
        /// 'Enabled'
        /// </summary>
        [JsonProperty(PropertyName = "requestBodyCheck")]
        public string RequestBodyCheck { get; set; }

        /// <summary>
        /// Gets or sets defines the JavaScript challenge cookie validity
        /// lifetime in minutes. This setting is only applicable to
        /// Premium_AzureFrontDoor. Value must be an integer between 5 and 1440
        /// with the default value being 30.
        /// </summary>
        [JsonProperty(PropertyName = "javascriptChallengeExpirationInMinutes")]
        public int? JavascriptChallengeExpirationInMinutes { get; set; }

        /// <summary>
        /// Gets or sets state of the log scrubbing config. Default value is
        /// Enabled. Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "logScrubbing.state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets list of log scrubbing rules applied to the Web
        /// Application Firewall logs.
        /// </summary>
        [JsonProperty(PropertyName = "logScrubbing.scrubbingRules")]
        public IList<WebApplicationFirewallScrubbingRules> ScrubbingRules { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CustomBlockResponseBody != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(CustomBlockResponseBody, "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "CustomBlockResponseBody", "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$");
                }
            }
            if (JavascriptChallengeExpirationInMinutes != null)
            {
                if (JavascriptChallengeExpirationInMinutes > 1440)
                {
                    throw new ValidationException(ValidationRules.InclusiveMaximum, "JavascriptChallengeExpirationInMinutes", 1440);
                }
                if (JavascriptChallengeExpirationInMinutes < 5)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "JavascriptChallengeExpirationInMinutes", 5);
                }
            }
            if (ScrubbingRules != null)
            {
                foreach (var element in ScrubbingRules)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
