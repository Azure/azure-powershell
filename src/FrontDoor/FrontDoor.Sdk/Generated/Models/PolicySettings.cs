// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.698)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using System.Linq;

    /// <summary>
    /// Defines top-level WebApplicationFirewallPolicy configuration settings.
    /// </summary>
    public partial class PolicySettings
    {
        /// <summary>
        /// Initializes a new instance of the PolicySettings class.
        /// </summary>
        public PolicySettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PolicySettings class.
        /// </summary>

        /// <param name="enabledState">Describes if the policy is in enabled or disabled state. Defaults to
        /// Enabled if not specified.
        /// Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;</param>

        /// <param name="mode">Describes if it is in detection mode or prevention mode at policy level.
        /// Possible values include: &#39;Prevention&#39;, &#39;Detection&#39;</param>

        /// <param name="redirectUrl">If action type is redirect, this field represents redirect URL for the
        /// client.
        /// </param>

        /// <param name="customBlockResponseStatusCode">If the action type is block, customer can override the response status
        /// code.
        /// </param>

        /// <param name="customBlockResponseBody">If the action type is block, customer can override the response body. The
        /// body must be specified in base64 encoding.
        /// </param>

        /// <param name="requestBodyCheck">Describes if policy managed rules will inspect the request body content.
        /// Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;</param>

        /// <param name="javascriptChallengeExpirationInMinutes">Defines the JavaScript challenge cookie validity lifetime in minutes. This
        /// setting is only applicable to Premium_AzureFrontDoor. Value must be an
        /// integer between 5 and 1440 with the default value being 30.
        /// </param>

        /// <param name="logScrubbing">Defines rules that scrub sensitive fields in the Web Application Firewall
        /// logs.
        /// </param>
        public PolicySettings(string enabledState = default(string), string mode = default(string), string redirectUrl = default(string), int? customBlockResponseStatusCode = default(int?), string customBlockResponseBody = default(string), string requestBodyCheck = default(string), int? javascriptChallengeExpirationInMinutes = default(int?), PolicySettingsLogScrubbing logScrubbing = default(PolicySettingsLogScrubbing))

        {
            this.EnabledState = enabledState;
            this.Mode = mode;
            this.RedirectUrl = redirectUrl;
            this.CustomBlockResponseStatusCode = customBlockResponseStatusCode;
            this.CustomBlockResponseBody = customBlockResponseBody;
            this.RequestBodyCheck = requestBodyCheck;
            this.JavascriptChallengeExpirationInMinutes = javascriptChallengeExpirationInMinutes;
            this.LogScrubbing = logScrubbing;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets describes if the policy is in enabled or disabled state.
        /// Defaults to Enabled if not specified. Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enabledState")]
        public string EnabledState {get; set; }

        /// <summary>
        /// Gets or sets describes if it is in detection mode or prevention mode at
        /// policy level. Possible values include: &#39;Prevention&#39;, &#39;Detection&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mode")]
        public string Mode {get; set; }

        /// <summary>
        /// Gets or sets if action type is redirect, this field represents redirect URL
        /// for the client.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "redirectUrl")]
        public string RedirectUrl {get; set; }

        /// <summary>
        /// Gets or sets if the action type is block, customer can override the
        /// response status code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customBlockResponseStatusCode")]
        public int? CustomBlockResponseStatusCode {get; set; }

        /// <summary>
        /// Gets or sets if the action type is block, customer can override the
        /// response body. The body must be specified in base64 encoding.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customBlockResponseBody")]
        public string CustomBlockResponseBody {get; set; }

        /// <summary>
        /// Gets or sets describes if policy managed rules will inspect the request
        /// body content. Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requestBodyCheck")]
        public string RequestBodyCheck {get; set; }

        /// <summary>
        /// Gets or sets defines the JavaScript challenge cookie validity lifetime in
        /// minutes. This setting is only applicable to Premium_AzureFrontDoor. Value
        /// must be an integer between 5 and 1440 with the default value being 30.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "javascriptChallengeExpirationInMinutes")]
        public int? JavascriptChallengeExpirationInMinutes {get; set; }

        /// <summary>
        /// Gets or sets defines rules that scrub sensitive fields in the Web
        /// Application Firewall logs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "logScrubbing")]
        public PolicySettingsLogScrubbing LogScrubbing {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {



            if (this.CustomBlockResponseBody != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.CustomBlockResponseBody, "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "CustomBlockResponseBody", "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$");
                }
            }

            if (this.JavascriptChallengeExpirationInMinutes != null)
            {
                if (this.JavascriptChallengeExpirationInMinutes > 1440)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "JavascriptChallengeExpirationInMinutes", 1440);
                }
                if (this.JavascriptChallengeExpirationInMinutes < 5)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "JavascriptChallengeExpirationInMinutes", 5);
                }
            }

        }
    }
}