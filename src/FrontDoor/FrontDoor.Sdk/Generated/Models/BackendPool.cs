// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.698)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using System.Linq;

    /// <summary>
    /// A backend pool is a collection of backends that can be routed to.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class BackendPool : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the BackendPool class.
        /// </summary>
        public BackendPool()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BackendPool class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="backends">The set of backends for this pool
        /// </param>

        /// <param name="loadBalancingSettings">Load balancing settings for a backend pool
        /// </param>

        /// <param name="healthProbeSettings">L7 health probe settings for a backend pool
        /// </param>

        /// <param name="resourceState">Resource status.
        /// Possible values include: &#39;Creating&#39;, &#39;Enabling&#39;, &#39;Enabled&#39;, &#39;Disabling&#39;,
        /// &#39;Disabled&#39;, &#39;Deleting&#39;, &#39;Migrating&#39;, &#39;Migrated&#39;</param>
        public BackendPool(string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IList<Backend> backends = default(System.Collections.Generic.IList<Backend>), SubResource loadBalancingSettings = default(SubResource), SubResource healthProbeSettings = default(SubResource), string resourceState = default(string))

        : base(id)
        {
            this.Name = name;
            this.Type = type;
            this.Backends = backends;
            this.LoadBalancingSettings = loadBalancingSettings;
            this.HealthProbeSettings = healthProbeSettings;
            this.ResourceState = resourceState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets resource name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets resource type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets or sets the set of backends for this pool
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.backends")]
        public System.Collections.Generic.IList<Backend> Backends {get; set; }

        /// <summary>
        /// Gets or sets load balancing settings for a backend pool
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.loadBalancingSettings")]
        public SubResource LoadBalancingSettings {get; set; }

        /// <summary>
        /// Gets or sets l7 health probe settings for a backend pool
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.healthProbeSettings")]
        public SubResource HealthProbeSettings {get; set; }

        /// <summary>
        /// Gets resource status. Possible values include: &#39;Creating&#39;, &#39;Enabling&#39;, &#39;Enabled&#39;, &#39;Disabling&#39;, &#39;Disabled&#39;, &#39;Deleting&#39;, &#39;Migrating&#39;, &#39;Migrated&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceState")]
        public string ResourceState {get; private set; }
    }
}