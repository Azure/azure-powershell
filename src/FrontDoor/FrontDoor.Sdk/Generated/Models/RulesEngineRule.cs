// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.698)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using System.Linq;

    /// <summary>
    /// Contains a list of match conditions, and an action on how to modify the
    /// request/response. If multiple rules match, the actions from one rule that
    /// conflict with a previous rule overwrite for a singular action, or append in
    /// the case of headers manipulation.
    /// </summary>
    public partial class RulesEngineRule
    {
        /// <summary>
        /// Initializes a new instance of the RulesEngineRule class.
        /// </summary>
        public RulesEngineRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RulesEngineRule class.
        /// </summary>

        /// <param name="name">A name to refer to this specific rule.
        /// </param>

        /// <param name="priority">A priority assigned to this rule.
        /// </param>

        /// <param name="action">Actions to perform on the request and response if all of the match
        /// conditions are met.
        /// </param>

        /// <param name="matchConditions">A list of match conditions that must meet in order for the actions of this
        /// rule to run. Having no match conditions means the actions will always run.
        /// </param>

        /// <param name="matchProcessingBehavior">If this rule is a match should the rules engine continue running the
        /// remaining rules or stop. If not present, defaults to Continue.
        /// Possible values include: &#39;Continue&#39;, &#39;Stop&#39;</param>
        public RulesEngineRule(string name, int priority, RulesEngineAction action, System.Collections.Generic.IList<RulesEngineMatchCondition> matchConditions = default(System.Collections.Generic.IList<RulesEngineMatchCondition>), string matchProcessingBehavior = default(string))

        {
            this.Name = name;
            this.Priority = priority;
            this.Action = action;
            this.MatchConditions = matchConditions;
            this.MatchProcessingBehavior = matchProcessingBehavior;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a name to refer to this specific rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets a priority assigned to this rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "priority")]
        public int Priority {get; set; }

        /// <summary>
        /// Gets or sets actions to perform on the request and response if all of the
        /// match conditions are met.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "action")]
        public RulesEngineAction Action {get; set; }

        /// <summary>
        /// Gets or sets a list of match conditions that must meet in order for the
        /// actions of this rule to run. Having no match conditions means the actions
        /// will always run.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "matchConditions")]
        public System.Collections.Generic.IList<RulesEngineMatchCondition> MatchConditions {get; set; }

        /// <summary>
        /// Gets or sets if this rule is a match should the rules engine continue
        /// running the remaining rules or stop. If not present, defaults to Continue. Possible values include: &#39;Continue&#39;, &#39;Stop&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "matchProcessingBehavior")]
        public string MatchProcessingBehavior {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (this.Action == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Action");
            }


            if (this.MatchConditions != null)
            {
                foreach (var element in this.MatchConditions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

        }
    }
}