// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.698)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using System.Linq;

    /// <summary>
    /// Defines contents of a web application rule
    /// </summary>
    public partial class CustomRule
    {
        /// <summary>
        /// Initializes a new instance of the CustomRule class.
        /// </summary>
        public CustomRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CustomRule class.
        /// </summary>

        /// <param name="name">Describes the name of the rule.
        /// </param>

        /// <param name="priority">Describes priority of the rule. Rules with a lower value will be evaluated
        /// before rules with a higher value.
        /// </param>

        /// <param name="enabledState">Describes if the custom rule is in enabled or disabled state. Defaults to
        /// Enabled if not specified.
        /// Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;</param>

        /// <param name="ruleType">Describes type of rule.
        /// Possible values include: &#39;MatchRule&#39;, &#39;RateLimitRule&#39;</param>

        /// <param name="rateLimitDurationInMinutes">Time window for resetting the rate limit count. Default is 1 minute.
        /// </param>

        /// <param name="rateLimitThreshold">Number of allowed requests per client within the time window.
        /// </param>

        /// <param name="groupBy">Describes the list of variables to group the rate limit requests
        /// </param>

        /// <param name="matchConditions">List of match conditions.
        /// </param>

        /// <param name="action">Describes what action to be applied when rule matches.
        /// Possible values include: &#39;Allow&#39;, &#39;Block&#39;, &#39;Log&#39;, &#39;Redirect&#39;,
        /// &#39;AnomalyScoring&#39;, &#39;JSChallenge&#39;</param>
        public CustomRule(int priority, string ruleType, System.Collections.Generic.IList<MatchCondition> matchConditions, string action, string name = default(string), string enabledState = default(string), int? rateLimitDurationInMinutes = default(int?), int? rateLimitThreshold = default(int?), System.Collections.Generic.IList<GroupByVariable> groupBy = default(System.Collections.Generic.IList<GroupByVariable>))

        {
            this.Name = name;
            this.Priority = priority;
            this.EnabledState = enabledState;
            this.RuleType = ruleType;
            this.RateLimitDurationInMinutes = rateLimitDurationInMinutes;
            this.RateLimitThreshold = rateLimitThreshold;
            this.GroupBy = groupBy;
            this.MatchConditions = matchConditions;
            this.Action = action;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets describes the name of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets describes priority of the rule. Rules with a lower value will
        /// be evaluated before rules with a higher value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "priority")]
        public int Priority {get; set; }

        /// <summary>
        /// Gets or sets describes if the custom rule is in enabled or disabled state.
        /// Defaults to Enabled if not specified. Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enabledState")]
        public string EnabledState {get; set; }

        /// <summary>
        /// Gets or sets describes type of rule. Possible values include: &#39;MatchRule&#39;, &#39;RateLimitRule&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleType")]
        public string RuleType {get; set; }

        /// <summary>
        /// Gets or sets time window for resetting the rate limit count. Default is 1
        /// minute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rateLimitDurationInMinutes")]
        public int? RateLimitDurationInMinutes {get; set; }

        /// <summary>
        /// Gets or sets number of allowed requests per client within the time window.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rateLimitThreshold")]
        public int? RateLimitThreshold {get; set; }

        /// <summary>
        /// Gets or sets describes the list of variables to group the rate limit
        /// requests
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "groupBy")]
        public System.Collections.Generic.IList<GroupByVariable> GroupBy {get; set; }

        /// <summary>
        /// Gets or sets list of match conditions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "matchConditions")]
        public System.Collections.Generic.IList<MatchCondition> MatchConditions {get; set; }

        /// <summary>
        /// Gets or sets describes what action to be applied when rule matches. Possible values include: &#39;Allow&#39;, &#39;Block&#39;, &#39;Log&#39;, &#39;Redirect&#39;, &#39;AnomalyScoring&#39;, &#39;JSChallenge&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "action")]
        public string Action {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.RuleType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RuleType");
            }
            if (this.MatchConditions == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MatchConditions");
            }
            if (this.Action == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Action");
            }
            if (this.Name != null)
            {
                if (this.Name.Length > 128)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Name", 128);
                }
            }


            if (this.RateLimitDurationInMinutes != null)
            {
                if (this.RateLimitDurationInMinutes > 5)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "RateLimitDurationInMinutes", 5);
                }
                if (this.RateLimitDurationInMinutes < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "RateLimitDurationInMinutes", 0);
                }
            }
            if (this.RateLimitThreshold != null)
            {
                if (this.RateLimitThreshold < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "RateLimitThreshold", 0);
                }
            }
            if (this.GroupBy != null)
            {
                foreach (var element in this.GroupBy)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.MatchConditions != null)
            {
                foreach (var element in this.MatchConditions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

        }
    }
}