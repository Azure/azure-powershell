// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.698)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using System.Linq;

    /// <summary>
    /// Defines a managed rule group override setting.
    /// </summary>
    public partial class ManagedRuleOverride
    {
        /// <summary>
        /// Initializes a new instance of the ManagedRuleOverride class.
        /// </summary>
        public ManagedRuleOverride()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedRuleOverride class.
        /// </summary>

        /// <param name="ruleId">Identifier for the managed rule.
        /// </param>

        /// <param name="enabledState">Describes if the managed rule is in enabled or disabled state. Defaults to
        /// Disabled if not specified.
        /// Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;</param>

        /// <param name="action">Describes the override action to be applied when rule matches.
        /// Possible values include: &#39;Allow&#39;, &#39;Block&#39;, &#39;Log&#39;, &#39;Redirect&#39;,
        /// &#39;AnomalyScoring&#39;, &#39;JSChallenge&#39;</param>

        /// <param name="exclusions">Describes the exclusions that are applied to this specific rule.
        /// </param>
        public ManagedRuleOverride(string ruleId, string enabledState = default(string), string action = default(string), System.Collections.Generic.IList<ManagedRuleExclusion> exclusions = default(System.Collections.Generic.IList<ManagedRuleExclusion>))

        {
            this.RuleId = ruleId;
            this.EnabledState = enabledState;
            this.Action = action;
            this.Exclusions = exclusions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets identifier for the managed rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleId")]
        public string RuleId {get; set; }

        /// <summary>
        /// Gets or sets describes if the managed rule is in enabled or disabled state.
        /// Defaults to Disabled if not specified. Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enabledState")]
        public string EnabledState {get; set; }

        /// <summary>
        /// Gets or sets describes the override action to be applied when rule matches. Possible values include: &#39;Allow&#39;, &#39;Block&#39;, &#39;Log&#39;, &#39;Redirect&#39;, &#39;AnomalyScoring&#39;, &#39;JSChallenge&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "action")]
        public string Action {get; set; }

        /// <summary>
        /// Gets or sets describes the exclusions that are applied to this specific
        /// rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exclusions")]
        public System.Collections.Generic.IList<ManagedRuleExclusion> Exclusions {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.RuleId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RuleId");
            }



            if (this.Exclusions != null)
            {
                foreach (var element in this.Exclusions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}