// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.698)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using System.Linq;

    /// <summary>
    /// Exclude variables from managed rule evaluation.
    /// </summary>
    public partial class ManagedRuleExclusion
    {
        /// <summary>
        /// Initializes a new instance of the ManagedRuleExclusion class.
        /// </summary>
        public ManagedRuleExclusion()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedRuleExclusion class.
        /// </summary>

        /// <param name="matchVariable">The variable type to be excluded.
        /// Possible values include: &#39;RequestHeaderNames&#39;, &#39;RequestCookieNames&#39;,
        /// &#39;QueryStringArgNames&#39;, &#39;RequestBodyPostArgNames&#39;, &#39;RequestBodyJsonArgNames&#39;</param>

        /// <param name="selectorMatchOperator">Comparison operator to apply to the selector when specifying which elements
        /// in the collection this exclusion applies to.
        /// Possible values include: &#39;Equals&#39;, &#39;Contains&#39;, &#39;StartsWith&#39;, &#39;EndsWith&#39;,
        /// &#39;EqualsAny&#39;</param>

        /// <param name="selector">Selector value for which elements in the collection this exclusion applies
        /// to.
        /// </param>
        public ManagedRuleExclusion(string matchVariable, string selectorMatchOperator, string selector)

        {
            this.MatchVariable = matchVariable;
            this.SelectorMatchOperator = selectorMatchOperator;
            this.Selector = selector;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the variable type to be excluded. Possible values include: &#39;RequestHeaderNames&#39;, &#39;RequestCookieNames&#39;, &#39;QueryStringArgNames&#39;, &#39;RequestBodyPostArgNames&#39;, &#39;RequestBodyJsonArgNames&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "matchVariable")]
        public string MatchVariable {get; set; }

        /// <summary>
        /// Gets or sets comparison operator to apply to the selector when specifying
        /// which elements in the collection this exclusion applies to. Possible values include: &#39;Equals&#39;, &#39;Contains&#39;, &#39;StartsWith&#39;, &#39;EndsWith&#39;, &#39;EqualsAny&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "selectorMatchOperator")]
        public string SelectorMatchOperator {get; set; }

        /// <summary>
        /// Gets or sets selector value for which elements in the collection this
        /// exclusion applies to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "selector")]
        public string Selector {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.MatchVariable == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MatchVariable");
            }
            if (this.SelectorMatchOperator == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SelectorMatchOperator");
            }
            if (this.Selector == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Selector");
            }



        }
    }
}