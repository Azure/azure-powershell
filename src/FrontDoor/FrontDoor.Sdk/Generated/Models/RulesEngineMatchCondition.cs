// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.698)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using System.Linq;

    /// <summary>
    /// Define a match condition
    /// </summary>
    public partial class RulesEngineMatchCondition
    {
        /// <summary>
        /// Initializes a new instance of the RulesEngineMatchCondition class.
        /// </summary>
        public RulesEngineMatchCondition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RulesEngineMatchCondition class.
        /// </summary>

        /// <param name="rulesEngineMatchVariable">Match Variable
        /// Possible values include: &#39;IsMobile&#39;, &#39;RemoteAddr&#39;, &#39;RequestMethod&#39;,
        /// &#39;QueryString&#39;, &#39;PostArgs&#39;, &#39;RequestUri&#39;, &#39;RequestPath&#39;, &#39;RequestFilename&#39;,
        /// &#39;RequestFilenameExtension&#39;, &#39;RequestHeader&#39;, &#39;RequestBody&#39;, &#39;RequestScheme&#39;</param>

        /// <param name="selector">Name of selector in RequestHeader or RequestBody to be matched
        /// </param>

        /// <param name="rulesEngineOperator">Describes operator to apply to the match condition.
        /// Possible values include: &#39;Any&#39;, &#39;IPMatch&#39;, &#39;GeoMatch&#39;, &#39;Equal&#39;, &#39;Contains&#39;,
        /// &#39;LessThan&#39;, &#39;GreaterThan&#39;, &#39;LessThanOrEqual&#39;, &#39;GreaterThanOrEqual&#39;,
        /// &#39;BeginsWith&#39;, &#39;EndsWith&#39;</param>

        /// <param name="negateCondition">Describes if this is negate condition or not
        /// </param>

        /// <param name="rulesEngineMatchValue">Match values to match against. The operator will apply to each value in
        /// here with OR semantics. If any of them match the variable with the given
        /// operator this match condition is considered a match.
        /// </param>

        /// <param name="transforms">List of transforms
        /// </param>
        public RulesEngineMatchCondition(string rulesEngineMatchVariable, string rulesEngineOperator, System.Collections.Generic.IList<string> rulesEngineMatchValue, string selector = default(string), bool? negateCondition = default(bool?), System.Collections.Generic.IList<string> transforms = default(System.Collections.Generic.IList<string>))

        {
            this.RulesEngineMatchVariable = rulesEngineMatchVariable;
            this.Selector = selector;
            this.RulesEngineOperator = rulesEngineOperator;
            this.NegateCondition = negateCondition;
            this.RulesEngineMatchValue = rulesEngineMatchValue;
            this.Transforms = transforms;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets match Variable Possible values include: &#39;IsMobile&#39;, &#39;RemoteAddr&#39;, &#39;RequestMethod&#39;, &#39;QueryString&#39;, &#39;PostArgs&#39;, &#39;RequestUri&#39;, &#39;RequestPath&#39;, &#39;RequestFilename&#39;, &#39;RequestFilenameExtension&#39;, &#39;RequestHeader&#39;, &#39;RequestBody&#39;, &#39;RequestScheme&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rulesEngineMatchVariable")]
        public string RulesEngineMatchVariable {get; set; }

        /// <summary>
        /// Gets or sets name of selector in RequestHeader or RequestBody to be matched
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "selector")]
        public string Selector {get; set; }

        /// <summary>
        /// Gets or sets describes operator to apply to the match condition. Possible values include: &#39;Any&#39;, &#39;IPMatch&#39;, &#39;GeoMatch&#39;, &#39;Equal&#39;, &#39;Contains&#39;, &#39;LessThan&#39;, &#39;GreaterThan&#39;, &#39;LessThanOrEqual&#39;, &#39;GreaterThanOrEqual&#39;, &#39;BeginsWith&#39;, &#39;EndsWith&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rulesEngineOperator")]
        public string RulesEngineOperator {get; set; }

        /// <summary>
        /// Gets or sets describes if this is negate condition or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "negateCondition")]
        public bool? NegateCondition {get; set; }

        /// <summary>
        /// Gets or sets match values to match against. The operator will apply to each
        /// value in here with OR semantics. If any of them match the variable with the
        /// given operator this match condition is considered a match.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rulesEngineMatchValue")]
        public System.Collections.Generic.IList<string> RulesEngineMatchValue {get; set; }

        /// <summary>
        /// Gets or sets list of transforms
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "transforms")]
        public System.Collections.Generic.IList<string> Transforms {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.RulesEngineMatchVariable == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RulesEngineMatchVariable");
            }
            if (this.RulesEngineOperator == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RulesEngineOperator");
            }
            if (this.RulesEngineMatchValue == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RulesEngineMatchValue");
            }





        }
    }
}