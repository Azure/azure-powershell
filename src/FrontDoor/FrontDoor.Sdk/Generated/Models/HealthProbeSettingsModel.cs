// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.698)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using System.Linq;

    /// <summary>
    /// Load balancing settings for a backend pool
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class HealthProbeSettingsModel : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the HealthProbeSettingsModel class.
        /// </summary>
        public HealthProbeSettingsModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HealthProbeSettingsModel class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="path">The path to use for the health probe. Default is /
        /// </param>

        /// <param name="protocol">Protocol scheme to use for this probe
        /// Possible values include: &#39;Http&#39;, &#39;Https&#39;</param>

        /// <param name="intervalInSeconds">The number of seconds between health probes.
        /// </param>

        /// <param name="healthProbeMethod">Configures which HTTP method to use to probe the backends defined under
        /// backendPools.
        /// Possible values include: &#39;GET&#39;, &#39;HEAD&#39;</param>

        /// <param name="enabledState">Whether to enable health probes to be made against backends defined under
        /// backendPools. Health probes can only be disabled if there is a single
        /// enabled backend in single enabled backend pool.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="resourceState">Resource status.
        /// Possible values include: &#39;Creating&#39;, &#39;Enabling&#39;, &#39;Enabled&#39;, &#39;Disabling&#39;,
        /// &#39;Disabled&#39;, &#39;Deleting&#39;, &#39;Migrating&#39;, &#39;Migrated&#39;</param>
        public HealthProbeSettingsModel(string id = default(string), string name = default(string), string type = default(string), string path = default(string), string protocol = default(string), int? intervalInSeconds = default(int?), string healthProbeMethod = default(string), string enabledState = default(string), string resourceState = default(string))

        : base(id)
        {
            this.Name = name;
            this.Type = type;
            this.Path = path;
            this.Protocol = protocol;
            this.IntervalInSeconds = intervalInSeconds;
            this.HealthProbeMethod = healthProbeMethod;
            this.EnabledState = enabledState;
            this.ResourceState = resourceState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets resource name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets resource type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets or sets the path to use for the health probe. Default is /
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.path")]
        public string Path {get; set; }

        /// <summary>
        /// Gets or sets protocol scheme to use for this probe Possible values include: &#39;Http&#39;, &#39;Https&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets the number of seconds between health probes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.intervalInSeconds")]
        public int? IntervalInSeconds {get; set; }

        /// <summary>
        /// Gets or sets configures which HTTP method to use to probe the backends
        /// defined under backendPools. Possible values include: &#39;GET&#39;, &#39;HEAD&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.healthProbeMethod")]
        public string HealthProbeMethod {get; set; }

        /// <summary>
        /// Gets or sets whether to enable health probes to be made against backends
        /// defined under backendPools. Health probes can only be disabled if there is
        /// a single enabled backend in single enabled backend pool. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enabledState")]
        public string EnabledState {get; set; }

        /// <summary>
        /// Gets resource status. Possible values include: &#39;Creating&#39;, &#39;Enabling&#39;, &#39;Enabled&#39;, &#39;Disabling&#39;, &#39;Disabled&#39;, &#39;Deleting&#39;, &#39;Migrating&#39;, &#39;Migrated&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceState")]
        public string ResourceState {get; private set; }
    }
}