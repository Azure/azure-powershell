// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.698)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using System.Linq;

    /// <summary>
    /// Defines a managed rule set.
    /// </summary>
    public partial class ManagedRuleSet
    {
        /// <summary>
        /// Initializes a new instance of the ManagedRuleSet class.
        /// </summary>
        public ManagedRuleSet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedRuleSet class.
        /// </summary>

        /// <param name="ruleSetType">Defines the rule set type to use.
        /// </param>

        /// <param name="ruleSetVersion">Defines the version of the rule set to use.
        /// </param>

        /// <param name="ruleSetAction">Defines the rule set action.
        /// Possible values include: &#39;Block&#39;, &#39;Log&#39;, &#39;Redirect&#39;</param>

        /// <param name="exclusions">Describes the exclusions that are applied to all rules in the set.
        /// </param>

        /// <param name="ruleGroupOverrides">Defines the rule group overrides to apply to the rule set.
        /// </param>
        public ManagedRuleSet(string ruleSetType, string ruleSetVersion, string ruleSetAction = default(string), System.Collections.Generic.IList<ManagedRuleExclusion> exclusions = default(System.Collections.Generic.IList<ManagedRuleExclusion>), System.Collections.Generic.IList<ManagedRuleGroupOverride> ruleGroupOverrides = default(System.Collections.Generic.IList<ManagedRuleGroupOverride>))

        {
            this.RuleSetType = ruleSetType;
            this.RuleSetVersion = ruleSetVersion;
            this.RuleSetAction = ruleSetAction;
            this.Exclusions = exclusions;
            this.RuleGroupOverrides = ruleGroupOverrides;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets defines the rule set type to use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleSetType")]
        public string RuleSetType {get; set; }

        /// <summary>
        /// Gets or sets defines the version of the rule set to use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleSetVersion")]
        public string RuleSetVersion {get; set; }

        /// <summary>
        /// Gets or sets defines the rule set action. Possible values include: &#39;Block&#39;, &#39;Log&#39;, &#39;Redirect&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleSetAction")]
        public string RuleSetAction {get; set; }

        /// <summary>
        /// Gets or sets describes the exclusions that are applied to all rules in the
        /// set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exclusions")]
        public System.Collections.Generic.IList<ManagedRuleExclusion> Exclusions {get; set; }

        /// <summary>
        /// Gets or sets defines the rule group overrides to apply to the rule set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleGroupOverrides")]
        public System.Collections.Generic.IList<ManagedRuleGroupOverride> RuleGroupOverrides {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.RuleSetType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RuleSetType");
            }
            if (this.RuleSetVersion == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RuleSetVersion");
            }



            if (this.Exclusions != null)
            {
                foreach (var element in this.Exclusions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.RuleGroupOverrides != null)
            {
                foreach (var element in this.RuleGroupOverrides)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}