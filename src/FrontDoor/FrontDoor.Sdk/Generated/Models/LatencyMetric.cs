// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.698)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using System.Linq;

    /// <summary>
    /// Defines the properties of a latency metric used in the latency scorecard
    /// </summary>
    public partial class LatencyMetric
    {
        /// <summary>
        /// Initializes a new instance of the LatencyMetric class.
        /// </summary>
        public LatencyMetric()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LatencyMetric class.
        /// </summary>

        /// <param name="name">The name of the Latency Metric
        /// </param>

        /// <param name="endDateTimeUtc">The end time of the Latency Scorecard in UTC
        /// </param>

        /// <param name="aValue">The metric value of the A endpoint
        /// </param>

        /// <param name="bValue">The metric value of the B endpoint
        /// </param>

        /// <param name="delta">The difference in value between endpoint A and B
        /// </param>

        /// <param name="deltaPercent">The percent difference between endpoint A and B
        /// </param>

        /// <param name="acLower95Ci">The lower end of the 95% confidence interval for endpoint A
        /// </param>

        /// <param name="ahUpper95Ci">The upper end of the 95% confidence interval for endpoint A
        /// </param>

        /// <param name="bcLower95Ci">The lower end of the 95% confidence interval for endpoint B
        /// </param>

        /// <param name="bUpper95Ci">The upper end of the 95% confidence interval for endpoint B
        /// </param>
        public LatencyMetric(string name = default(string), string endDateTimeUtc = default(string), double? aValue = default(double?), double? bValue = default(double?), double? delta = default(double?), double? deltaPercent = default(double?), double? acLower95Ci = default(double?), double? ahUpper95Ci = default(double?), double? bcLower95Ci = default(double?), double? bUpper95Ci = default(double?))

        {
            this.Name = name;
            this.EndDateTimeUtc = endDateTimeUtc;
            this.AValue = aValue;
            this.BValue = bValue;
            this.Delta = delta;
            this.DeltaPercent = deltaPercent;
            this.ACLower95Ci = acLower95Ci;
            this.AHUpper95Ci = ahUpper95Ci;
            this.BCLower95Ci = bcLower95Ci;
            this.BUpper95Ci = bUpper95Ci;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the name of the Latency Metric
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; private set; }

        /// <summary>
        /// Gets the end time of the Latency Scorecard in UTC
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endDateTimeUTC")]
        public string EndDateTimeUtc {get; private set; }

        /// <summary>
        /// Gets the metric value of the A endpoint
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "aValue")]
        public double? AValue {get; private set; }

        /// <summary>
        /// Gets the metric value of the B endpoint
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "bValue")]
        public double? BValue {get; private set; }

        /// <summary>
        /// Gets the difference in value between endpoint A and B
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "delta")]
        public double? Delta {get; private set; }

        /// <summary>
        /// Gets the percent difference between endpoint A and B
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deltaPercent")]
        public double? DeltaPercent {get; private set; }

        /// <summary>
        /// Gets the lower end of the 95% confidence interval for endpoint A
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "aCLower95CI")]
        public double? ACLower95Ci {get; private set; }

        /// <summary>
        /// Gets the upper end of the 95% confidence interval for endpoint A
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "aHUpper95CI")]
        public double? AHUpper95Ci {get; private set; }

        /// <summary>
        /// Gets the lower end of the 95% confidence interval for endpoint B
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "bCLower95CI")]
        public double? BCLower95Ci {get; private set; }

        /// <summary>
        /// Gets the upper end of the 95% confidence interval for endpoint B
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "bUpper95CI")]
        public double? BUpper95Ci {get; private set; }
    }
}