// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.698)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.FrontDoor
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for EndpointsOperations
    /// </summary>
    public static partial class EndpointsOperationsExtensions
    {
        /// <summary>
        /// Removes a content from Front Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        public static void PurgeContent(this IEndpointsOperations operations, string resourceGroupName, string frontDoorName, PurgeParameters contentFilePaths)
        {
                ((IEndpointsOperations)operations).PurgeContentAsync(resourceGroupName, frontDoorName, contentFilePaths).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Removes a content from Front Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task PurgeContentAsync(this IEndpointsOperations operations, string resourceGroupName, string frontDoorName, PurgeParameters contentFilePaths, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.PurgeContentWithHttpMessagesAsync(resourceGroupName, frontDoorName, contentFilePaths, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Removes a content from Front Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        public static void BeginPurgeContent(this IEndpointsOperations operations, string resourceGroupName, string frontDoorName, PurgeParameters contentFilePaths)
        {
                ((IEndpointsOperations)operations).BeginPurgeContentAsync(resourceGroupName, frontDoorName, contentFilePaths).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Removes a content from Front Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginPurgeContentAsync(this IEndpointsOperations operations, string resourceGroupName, string frontDoorName, PurgeParameters contentFilePaths, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginPurgeContentWithHttpMessagesAsync(resourceGroupName, frontDoorName, contentFilePaths, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
    }
}
