// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.698)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.FrontDoor
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for FrontendEndpointsOperations
    /// </summary>
    public static partial class FrontendEndpointsOperationsExtensions
    {
        /// <summary>
        /// Lists all of the frontend endpoints within a Front Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<FrontendEndpoint> ListByFrontDoor(this IFrontendEndpointsOperations operations, string resourceGroupName, string frontDoorName)
        {
                return ((IFrontendEndpointsOperations)operations).ListByFrontDoorAsync(resourceGroupName, frontDoorName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all of the frontend endpoints within a Front Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<FrontendEndpoint>> ListByFrontDoorAsync(this IFrontendEndpointsOperations operations, string resourceGroupName, string frontDoorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByFrontDoorWithHttpMessagesAsync(resourceGroupName, frontDoorName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a Frontend endpoint with the specified name within the specified Front
        /// Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='frontendEndpointName'>
        /// Name of the Frontend endpoint which is unique within the Front Door.
        /// </param>
        public static FrontendEndpoint Get(this IFrontendEndpointsOperations operations, string resourceGroupName, string frontDoorName, string frontendEndpointName)
        {
                return ((IFrontendEndpointsOperations)operations).GetAsync(resourceGroupName, frontDoorName, frontendEndpointName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a Frontend endpoint with the specified name within the specified Front
        /// Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='frontendEndpointName'>
        /// Name of the Frontend endpoint which is unique within the Front Door.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FrontendEndpoint> GetAsync(this IFrontendEndpointsOperations operations, string resourceGroupName, string frontDoorName, string frontendEndpointName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, frontDoorName, frontendEndpointName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Enables a frontendEndpoint for HTTPS traffic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='frontendEndpointName'>
        /// Name of the Frontend endpoint which is unique within the Front Door.
        /// </param>
        public static void EnableHttps(this IFrontendEndpointsOperations operations, string resourceGroupName, string frontDoorName, string frontendEndpointName, CustomHttpsConfiguration customHttpsConfiguration)
        {
                ((IFrontendEndpointsOperations)operations).EnableHttpsAsync(resourceGroupName, frontDoorName, frontendEndpointName, customHttpsConfiguration).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Enables a frontendEndpoint for HTTPS traffic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='frontendEndpointName'>
        /// Name of the Frontend endpoint which is unique within the Front Door.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task EnableHttpsAsync(this IFrontendEndpointsOperations operations, string resourceGroupName, string frontDoorName, string frontendEndpointName, CustomHttpsConfiguration customHttpsConfiguration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.EnableHttpsWithHttpMessagesAsync(resourceGroupName, frontDoorName, frontendEndpointName, customHttpsConfiguration, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Disables a frontendEndpoint for HTTPS traffic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='frontendEndpointName'>
        /// Name of the Frontend endpoint which is unique within the Front Door.
        /// </param>
        public static void DisableHttps(this IFrontendEndpointsOperations operations, string resourceGroupName, string frontDoorName, string frontendEndpointName)
        {
                ((IFrontendEndpointsOperations)operations).DisableHttpsAsync(resourceGroupName, frontDoorName, frontendEndpointName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Disables a frontendEndpoint for HTTPS traffic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='frontendEndpointName'>
        /// Name of the Frontend endpoint which is unique within the Front Door.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DisableHttpsAsync(this IFrontendEndpointsOperations operations, string resourceGroupName, string frontDoorName, string frontendEndpointName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DisableHttpsWithHttpMessagesAsync(resourceGroupName, frontDoorName, frontendEndpointName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Enables a frontendEndpoint for HTTPS traffic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='frontendEndpointName'>
        /// Name of the Frontend endpoint which is unique within the Front Door.
        /// </param>
        public static void BeginEnableHttps(this IFrontendEndpointsOperations operations, string resourceGroupName, string frontDoorName, string frontendEndpointName, CustomHttpsConfiguration customHttpsConfiguration)
        {
                ((IFrontendEndpointsOperations)operations).BeginEnableHttpsAsync(resourceGroupName, frontDoorName, frontendEndpointName, customHttpsConfiguration).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Enables a frontendEndpoint for HTTPS traffic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='frontendEndpointName'>
        /// Name of the Frontend endpoint which is unique within the Front Door.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginEnableHttpsAsync(this IFrontendEndpointsOperations operations, string resourceGroupName, string frontDoorName, string frontendEndpointName, CustomHttpsConfiguration customHttpsConfiguration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginEnableHttpsWithHttpMessagesAsync(resourceGroupName, frontDoorName, frontendEndpointName, customHttpsConfiguration, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Disables a frontendEndpoint for HTTPS traffic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='frontendEndpointName'>
        /// Name of the Frontend endpoint which is unique within the Front Door.
        /// </param>
        public static void BeginDisableHttps(this IFrontendEndpointsOperations operations, string resourceGroupName, string frontDoorName, string frontendEndpointName)
        {
                ((IFrontendEndpointsOperations)operations).BeginDisableHttpsAsync(resourceGroupName, frontDoorName, frontendEndpointName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Disables a frontendEndpoint for HTTPS traffic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='frontendEndpointName'>
        /// Name of the Frontend endpoint which is unique within the Front Door.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDisableHttpsAsync(this IFrontendEndpointsOperations operations, string resourceGroupName, string frontDoorName, string frontendEndpointName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDisableHttpsWithHttpMessagesAsync(resourceGroupName, frontDoorName, frontendEndpointName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists all of the frontend endpoints within a Front Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<FrontendEndpoint> ListByFrontDoorNext(this IFrontendEndpointsOperations operations, string nextPageLink)
        {
                return ((IFrontendEndpointsOperations)operations).ListByFrontDoorNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all of the frontend endpoints within a Front Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<FrontendEndpoint>> ListByFrontDoorNextAsync(this IFrontendEndpointsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByFrontDoorNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
