// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.698)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.FrontDoor
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ReportsOperations
    /// </summary>
    public static partial class ReportsOperationsExtensions
    {
        /// <summary>
        /// Gets a Latency Scorecard for a given Experiment
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='profileName'>
        /// The Profile identifier associated with the Tenant and Partner
        /// </param>
        /// <param name='experimentName'>
        /// The Experiment identifier associated with the Experiment
        /// </param>
        /// <param name='endDateTimeUTC'>
        /// The end DateTime of the Latency Scorecard in UTC
        /// </param>
        /// <param name='country'>
        /// The country associated with the Latency Scorecard. Values are country ISO
        /// codes as specified here- https://www.iso.org/iso-3166-country-codes.html
        /// </param>
        /// <param name='aggregationInterval'>
        /// The aggregation interval of the Latency Scorecard
        /// </param>
        public static LatencyScorecard GetLatencyScorecards(this IReportsOperations operations, string resourceGroupName, string profileName, string experimentName, string aggregationInterval, string endDateTimeUTC = default(string), string country = default(string))
        {
                return ((IReportsOperations)operations).GetLatencyScorecardsAsync(resourceGroupName, profileName, experimentName, aggregationInterval, endDateTimeUTC, country).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a Latency Scorecard for a given Experiment
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='profileName'>
        /// The Profile identifier associated with the Tenant and Partner
        /// </param>
        /// <param name='experimentName'>
        /// The Experiment identifier associated with the Experiment
        /// </param>
        /// <param name='endDateTimeUTC'>
        /// The end DateTime of the Latency Scorecard in UTC
        /// </param>
        /// <param name='country'>
        /// The country associated with the Latency Scorecard. Values are country ISO
        /// codes as specified here- https://www.iso.org/iso-3166-country-codes.html
        /// </param>
        /// <param name='aggregationInterval'>
        /// The aggregation interval of the Latency Scorecard
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<LatencyScorecard> GetLatencyScorecardsAsync(this IReportsOperations operations, string resourceGroupName, string profileName, string experimentName, string aggregationInterval, string endDateTimeUTC = default(string), string country = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetLatencyScorecardsWithHttpMessagesAsync(resourceGroupName, profileName, experimentName, aggregationInterval, endDateTimeUTC, country, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a Timeseries for a given Experiment
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='profileName'>
        /// The Profile identifier associated with the Tenant and Partner
        /// </param>
        /// <param name='experimentName'>
        /// The Experiment identifier associated with the Experiment
        /// </param>
        /// <param name='startDateTimeUTC'>
        /// The start DateTime of the Timeseries in UTC
        /// </param>
        /// <param name='endDateTimeUTC'>
        /// The end DateTime of the Timeseries in UTC
        /// </param>
        /// <param name='aggregationInterval'>
        /// The aggregation interval of the Timeseries
        /// </param>
        /// <param name='timeseriesType'>
        /// The type of Timeseries
        /// </param>
        /// <param name='endpoint'>
        /// The specific endpoint
        /// </param>
        /// <param name='country'>
        /// The country associated with the Timeseries. Values are country ISO codes as
        /// specified here- https://www.iso.org/iso-3166-country-codes.html
        /// </param>
        public static Timeseries GetTimeseries(this IReportsOperations operations, string resourceGroupName, string profileName, string experimentName, System.DateTime startDateTimeUTC, System.DateTime endDateTimeUTC, string aggregationInterval, string timeseriesType, string endpoint = default(string), string country = default(string))
        {
                return ((IReportsOperations)operations).GetTimeseriesAsync(resourceGroupName, profileName, experimentName, startDateTimeUTC, endDateTimeUTC, aggregationInterval, timeseriesType, endpoint, country).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a Timeseries for a given Experiment
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='profileName'>
        /// The Profile identifier associated with the Tenant and Partner
        /// </param>
        /// <param name='experimentName'>
        /// The Experiment identifier associated with the Experiment
        /// </param>
        /// <param name='startDateTimeUTC'>
        /// The start DateTime of the Timeseries in UTC
        /// </param>
        /// <param name='endDateTimeUTC'>
        /// The end DateTime of the Timeseries in UTC
        /// </param>
        /// <param name='aggregationInterval'>
        /// The aggregation interval of the Timeseries
        /// </param>
        /// <param name='timeseriesType'>
        /// The type of Timeseries
        /// </param>
        /// <param name='endpoint'>
        /// The specific endpoint
        /// </param>
        /// <param name='country'>
        /// The country associated with the Timeseries. Values are country ISO codes as
        /// specified here- https://www.iso.org/iso-3166-country-codes.html
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Timeseries> GetTimeseriesAsync(this IReportsOperations operations, string resourceGroupName, string profileName, string experimentName, System.DateTime startDateTimeUTC, System.DateTime endDateTimeUTC, string aggregationInterval, string timeseriesType, string endpoint = default(string), string country = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetTimeseriesWithHttpMessagesAsync(resourceGroupName, profileName, experimentName, startDateTimeUTC, endDateTimeUTC, aggregationInterval, timeseriesType, endpoint, country, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
