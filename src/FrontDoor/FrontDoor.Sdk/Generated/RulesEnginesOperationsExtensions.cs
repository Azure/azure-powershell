// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.698)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.FrontDoor
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for RulesEnginesOperations
    /// </summary>
    public static partial class RulesEnginesOperationsExtensions
    {
        /// <summary>
        /// Lists all of the Rules Engine Configurations within a Front Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RulesEngine> ListByFrontDoor(this IRulesEnginesOperations operations, string resourceGroupName, string frontDoorName)
        {
                return ((IRulesEnginesOperations)operations).ListByFrontDoorAsync(resourceGroupName, frontDoorName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all of the Rules Engine Configurations within a Front Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RulesEngine>> ListByFrontDoorAsync(this IRulesEnginesOperations operations, string resourceGroupName, string frontDoorName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByFrontDoorWithHttpMessagesAsync(resourceGroupName, frontDoorName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a Rules Engine Configuration with the specified name within the
        /// specified Front Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='rulesEngineName'>
        /// Name of the Rules Engine which is unique within the Front Door.
        /// </param>
        public static RulesEngine Get(this IRulesEnginesOperations operations, string resourceGroupName, string frontDoorName, string rulesEngineName)
        {
                return ((IRulesEnginesOperations)operations).GetAsync(resourceGroupName, frontDoorName, rulesEngineName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a Rules Engine Configuration with the specified name within the
        /// specified Front Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='rulesEngineName'>
        /// Name of the Rules Engine which is unique within the Front Door.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RulesEngine> GetAsync(this IRulesEnginesOperations operations, string resourceGroupName, string frontDoorName, string rulesEngineName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, frontDoorName, rulesEngineName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates a new Rules Engine Configuration with the specified name within the
        /// specified Front Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='rulesEngineName'>
        /// Name of the Rules Engine which is unique within the Front Door.
        /// </param>
        public static RulesEngine CreateOrUpdate(this IRulesEnginesOperations operations, string resourceGroupName, string frontDoorName, string rulesEngineName, RulesEngine rulesEngineParameters)
        {
                return ((IRulesEnginesOperations)operations).CreateOrUpdateAsync(resourceGroupName, frontDoorName, rulesEngineName, rulesEngineParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a new Rules Engine Configuration with the specified name within the
        /// specified Front Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='rulesEngineName'>
        /// Name of the Rules Engine which is unique within the Front Door.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RulesEngine> CreateOrUpdateAsync(this IRulesEnginesOperations operations, string resourceGroupName, string frontDoorName, string rulesEngineName, RulesEngine rulesEngineParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, frontDoorName, rulesEngineName, rulesEngineParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing Rules Engine Configuration with the specified
        /// parameters.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='rulesEngineName'>
        /// Name of the Rules Engine which is unique within the Front Door.
        /// </param>
        public static void Delete(this IRulesEnginesOperations operations, string resourceGroupName, string frontDoorName, string rulesEngineName)
        {
                ((IRulesEnginesOperations)operations).DeleteAsync(resourceGroupName, frontDoorName, rulesEngineName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Rules Engine Configuration with the specified
        /// parameters.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='rulesEngineName'>
        /// Name of the Rules Engine which is unique within the Front Door.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IRulesEnginesOperations operations, string resourceGroupName, string frontDoorName, string rulesEngineName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, frontDoorName, rulesEngineName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Creates a new Rules Engine Configuration with the specified name within the
        /// specified Front Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='rulesEngineName'>
        /// Name of the Rules Engine which is unique within the Front Door.
        /// </param>
        public static RulesEngine BeginCreateOrUpdate(this IRulesEnginesOperations operations, string resourceGroupName, string frontDoorName, string rulesEngineName, RulesEngine rulesEngineParameters)
        {
                return ((IRulesEnginesOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, frontDoorName, rulesEngineName, rulesEngineParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a new Rules Engine Configuration with the specified name within the
        /// specified Front Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='rulesEngineName'>
        /// Name of the Rules Engine which is unique within the Front Door.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RulesEngine> BeginCreateOrUpdateAsync(this IRulesEnginesOperations operations, string resourceGroupName, string frontDoorName, string rulesEngineName, RulesEngine rulesEngineParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, frontDoorName, rulesEngineName, rulesEngineParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an existing Rules Engine Configuration with the specified
        /// parameters.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='rulesEngineName'>
        /// Name of the Rules Engine which is unique within the Front Door.
        /// </param>
        public static void BeginDelete(this IRulesEnginesOperations operations, string resourceGroupName, string frontDoorName, string rulesEngineName)
        {
                ((IRulesEnginesOperations)operations).BeginDeleteAsync(resourceGroupName, frontDoorName, rulesEngineName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an existing Rules Engine Configuration with the specified
        /// parameters.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the Resource group within the Azure subscription.
        /// </param>
        /// <param name='frontDoorName'>
        /// Name of the Front Door which is globally unique.
        /// </param>
        /// <param name='rulesEngineName'>
        /// Name of the Rules Engine which is unique within the Front Door.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IRulesEnginesOperations operations, string resourceGroupName, string frontDoorName, string rulesEngineName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, frontDoorName, rulesEngineName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists all of the Rules Engine Configurations within a Front Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RulesEngine> ListByFrontDoorNext(this IRulesEnginesOperations operations, string nextPageLink)
        {
                return ((IRulesEnginesOperations)operations).ListByFrontDoorNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all of the Rules Engine Configurations within a Front Door.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RulesEngine>> ListByFrontDoorNextAsync(this IRulesEnginesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByFrontDoorNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
