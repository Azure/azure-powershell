"FileName","CsharpFunction","PowerShellFunction"
"EndpointsOperations.cs","public async Task<AzureOperationResponse> PurgeContentWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, PurgeParameters contentFilePaths, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"EndpointsOperations.cs","public async Task<AzureOperationResponse> BeginPurgeContentWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, PurgeParameters contentFilePaths, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"ExperimentsOperations.cs","public async Task<AzureOperationResponse<IPage<Experiment>>> ListByProfileWithHttpMessagesAsync(string resourceGroupName, string profileName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"ExperimentsOperations.cs","public async Task<AzureOperationResponse<Experiment>> GetWithHttpMessagesAsync(string resourceGroupName, string profileName, string experimentName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"ExperimentsOperations.cs","public async Task<AzureOperationResponse<Experiment>> CreateOrUpdateWithHttpMessagesAsync(string resourceGroupName, string profileName, string experimentName, Experiment parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"ExperimentsOperations.cs","public async Task<AzureOperationResponse<Experiment>> UpdateWithHttpMessagesAsync(string resourceGroupName, string profileName, string experimentName, ExperimentUpdateModel parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"ExperimentsOperations.cs","public async Task<AzureOperationResponse> DeleteWithHttpMessagesAsync(string resourceGroupName, string profileName, string experimentName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"ExperimentsOperations.cs","public async Task<AzureOperationResponse<Experiment>> BeginCreateOrUpdateWithHttpMessagesAsync(string resourceGroupName, string profileName, string experimentName, Experiment parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"ExperimentsOperations.cs","public async Task<AzureOperationResponse<Experiment>> BeginUpdateWithHttpMessagesAsync(string resourceGroupName, string profileName, string experimentName, ExperimentUpdateModel parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"ExperimentsOperations.cs","public async Task<AzureOperationResponse> BeginDeleteWithHttpMessagesAsync(string resourceGroupName, string profileName, string experimentName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"ExperimentsOperations.cs","public async Task<AzureOperationResponse<IPage<Experiment>>> ListByProfileNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"FrontDoorNameAvailabilityOperations.cs","public async Task<AzureOperationResponse<CheckNameAvailabilityOutput>> CheckWithHttpMessagesAsync(CheckNameAvailabilityInput checkFrontDoorNameAvailabilityInput, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"FrontDoorNameAvailabilityWithSubscriptionOperations.cs","public async Task<AzureOperationResponse<CheckNameAvailabilityOutput>> CheckWithHttpMessagesAsync(CheckNameAvailabilityInput checkFrontDoorNameAvailabilityInput, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"FrontDoorsOperations.cs","public async Task<AzureOperationResponse<IPage<FrontDoorModel>>> ListWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"FrontDoorsOperations.cs","public async Task<AzureOperationResponse<IPage<FrontDoorModel>>> ListByResourceGroupWithHttpMessagesAsync(string resourceGroupName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"FrontDoorsOperations.cs","public async Task<AzureOperationResponse<FrontDoorModel>> GetWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"FrontDoorsOperations.cs","public async Task<AzureOperationResponse<FrontDoorModel>> CreateOrUpdateWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, FrontDoorModel frontDoorParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"FrontDoorsOperations.cs","public async Task<AzureOperationResponse> DeleteWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"FrontDoorsOperations.cs","public async Task<AzureOperationResponse<ValidateCustomDomainOutput>> ValidateCustomDomainWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, ValidateCustomDomainInput customDomainProperties, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"FrontDoorsOperations.cs","public async Task<AzureOperationResponse<FrontDoorModel>> BeginCreateOrUpdateWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, FrontDoorModel frontDoorParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"FrontDoorsOperations.cs","public async Task<AzureOperationResponse> BeginDeleteWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"FrontDoorsOperations.cs","public async Task<AzureOperationResponse<IPage<FrontDoorModel>>> ListNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"FrontDoorsOperations.cs","public async Task<AzureOperationResponse<IPage<FrontDoorModel>>> ListByResourceGroupNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"FrontendEndpointsOperations.cs","public async Task<AzureOperationResponse<IPage<FrontendEndpoint>>> ListByFrontDoorWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"FrontendEndpointsOperations.cs","public async Task<AzureOperationResponse<FrontendEndpoint>> GetWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, string frontendEndpointName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"FrontendEndpointsOperations.cs","public async Task<AzureOperationResponse> EnableHttpsWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, string frontendEndpointName, CustomHttpsConfiguration customHttpsConfiguration, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"FrontendEndpointsOperations.cs","public async Task<AzureOperationResponse> DisableHttpsWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, string frontendEndpointName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"FrontendEndpointsOperations.cs","public async Task<AzureOperationResponse> BeginEnableHttpsWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, string frontendEndpointName, CustomHttpsConfiguration customHttpsConfiguration, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"FrontendEndpointsOperations.cs","public async Task<AzureOperationResponse> BeginDisableHttpsWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, string frontendEndpointName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"FrontendEndpointsOperations.cs","public async Task<AzureOperationResponse<IPage<FrontendEndpoint>>> ListByFrontDoorNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"ManagedRuleSetsOperations.cs","public async Task<AzureOperationResponse<IPage<ManagedRuleSetDefinition>>> ListWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"ManagedRuleSetsOperations.cs","public async Task<AzureOperationResponse<IPage<ManagedRuleSetDefinition>>> ListNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"NetworkExperimentProfilesOperations.cs","public async Task<AzureOperationResponse<IPage<Profile>>> ListWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"NetworkExperimentProfilesOperations.cs","public async Task<AzureOperationResponse<IPage<Profile>>> ListByResourceGroupWithHttpMessagesAsync(string resourceGroupName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"NetworkExperimentProfilesOperations.cs","public async Task<AzureOperationResponse<Profile>> GetWithHttpMessagesAsync(string resourceGroupName, string profileName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"NetworkExperimentProfilesOperations.cs","public async Task<AzureOperationResponse<Profile>> CreateOrUpdateWithHttpMessagesAsync(string profileName, string resourceGroupName, Profile parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"NetworkExperimentProfilesOperations.cs","public async Task<AzureOperationResponse<Profile>> UpdateWithHttpMessagesAsync(string resourceGroupName, string profileName, ProfileUpdateModel parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"NetworkExperimentProfilesOperations.cs","public async Task<AzureOperationResponse> DeleteWithHttpMessagesAsync(string resourceGroupName, string profileName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"NetworkExperimentProfilesOperations.cs","public async Task<AzureOperationResponse<Profile>> BeginCreateOrUpdateWithHttpMessagesAsync(string profileName, string resourceGroupName, Profile parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"NetworkExperimentProfilesOperations.cs","public async Task<AzureOperationResponse<Profile>> BeginUpdateWithHttpMessagesAsync(string resourceGroupName, string profileName, ProfileUpdateModel parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"NetworkExperimentProfilesOperations.cs","public async Task<AzureOperationResponse> BeginDeleteWithHttpMessagesAsync(string resourceGroupName, string profileName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"NetworkExperimentProfilesOperations.cs","public async Task<AzureOperationResponse<IPage<Profile>>> ListNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"NetworkExperimentProfilesOperations.cs","public async Task<AzureOperationResponse<IPage<Profile>>> ListByResourceGroupNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"PoliciesOperations.cs","public async Task<AzureOperationResponse<IPage<WebApplicationFirewallPolicy>>> ListWithHttpMessagesAsync(string resourceGroupName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"PoliciesOperations.cs","public async Task<AzureOperationResponse<IPage<WebApplicationFirewallPolicy>>> ListBySubscriptionWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"PoliciesOperations.cs","public async Task<AzureOperationResponse<WebApplicationFirewallPolicy>> GetWithHttpMessagesAsync(string resourceGroupName, string policyName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"PoliciesOperations.cs","public async Task<AzureOperationResponse<WebApplicationFirewallPolicy>> CreateOrUpdateWithHttpMessagesAsync(string resourceGroupName, string policyName, WebApplicationFirewallPolicy parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"PoliciesOperations.cs","public async Task<AzureOperationResponse<WebApplicationFirewallPolicy>> UpdateWithHttpMessagesAsync(string resourceGroupName, string policyName, TagsObject parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"PoliciesOperations.cs","public async Task<AzureOperationResponse> DeleteWithHttpMessagesAsync(string resourceGroupName, string policyName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"PoliciesOperations.cs","public async Task<AzureOperationResponse<WebApplicationFirewallPolicy>> BeginCreateOrUpdateWithHttpMessagesAsync(string resourceGroupName, string policyName, WebApplicationFirewallPolicy parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"PoliciesOperations.cs","public async Task<AzureOperationResponse<WebApplicationFirewallPolicy>> BeginUpdateWithHttpMessagesAsync(string resourceGroupName, string policyName, TagsObject parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"PoliciesOperations.cs","public async Task<AzureOperationResponse> BeginDeleteWithHttpMessagesAsync(string resourceGroupName, string policyName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"PoliciesOperations.cs","public async Task<AzureOperationResponse<IPage<WebApplicationFirewallPolicy>>> ListNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"PoliciesOperations.cs","public async Task<AzureOperationResponse<IPage<WebApplicationFirewallPolicy>>> ListBySubscriptionNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"PreconfiguredEndpointsOperations.cs","public async Task<AzureOperationResponse<IPage<PreconfiguredEndpoint>>> ListWithHttpMessagesAsync(string resourceGroupName, string profileName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"PreconfiguredEndpointsOperations.cs","public async Task<AzureOperationResponse<IPage<PreconfiguredEndpoint>>> ListNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"ReportsOperations.cs","public async Task<AzureOperationResponse<LatencyScorecard>> GetLatencyScorecardsWithHttpMessagesAsync(string resourceGroupName, string profileName, string experimentName, string aggregationInterval, string endDateTimeUTC = default(string), string country = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"ReportsOperations.cs","public async Task<AzureOperationResponse<Timeseries>> GetTimeseriesWithHttpMessagesAsync(string resourceGroupName, string profileName, string experimentName, System.DateTime startDateTimeUTC, System.DateTime endDateTimeUTC, string aggregationInterval, string timeseriesType, string endpoint = default(string), string country = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"RulesEnginesOperations.cs","public async Task<AzureOperationResponse<IPage<RulesEngine>>> ListByFrontDoorWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"RulesEnginesOperations.cs","public async Task<AzureOperationResponse<RulesEngine>> GetWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, string rulesEngineName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"RulesEnginesOperations.cs","public async Task<AzureOperationResponse<RulesEngine>> CreateOrUpdateWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, string rulesEngineName, RulesEngine rulesEngineParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"RulesEnginesOperations.cs","public async Task<AzureOperationResponse> DeleteWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, string rulesEngineName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"RulesEnginesOperations.cs","public async Task<AzureOperationResponse<RulesEngine>> BeginCreateOrUpdateWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, string rulesEngineName, RulesEngine rulesEngineParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"RulesEnginesOperations.cs","public async Task<AzureOperationResponse> BeginDeleteWithHttpMessagesAsync(string resourceGroupName, string frontDoorName, string rulesEngineName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"RulesEnginesOperations.cs","public async Task<AzureOperationResponse<IPage<RulesEngine>>> ListByFrontDoorNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))",""
"BackendPool.cs","public BackendPool(string id = default(string), IList<Backend> backends = default(IList<Backend>), SubResource loadBalancingSettings = default(SubResource), SubResource healthProbeSettings = default(SubResource), string resourceState = default(string), string name = default(string), string type = default(string))","public BackendPool(string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IList<Backend> backends = default(System.Collections.Generic.IList<Backend>), SubResource loadBalancingSettings = default(SubResource), SubResource healthProbeSettings = default(SubResource), string resourceState = default(string))"
"BackendPoolListResult.cs","public BackendPoolListResult(IList<BackendPool> value = default(IList<BackendPool>), string nextLink = default(string))","public BackendPoolListResult(System.Collections.Generic.IList<BackendPool> value = default(System.Collections.Generic.IList<BackendPool>), string nextLink = default(string))"
"BackendPoolUpdateParameters.cs","public BackendPoolUpdateParameters(IList<Backend> backends = default(IList<Backend>), SubResource loadBalancingSettings = default(SubResource), SubResource healthProbeSettings = default(SubResource))","public BackendPoolUpdateParameters(System.Collections.Generic.IList<Backend> backends = default(System.Collections.Generic.IList<Backend>), SubResource loadBalancingSettings = default(SubResource), SubResource healthProbeSettings = default(SubResource))"
"CustomRule.cs","public CustomRule(int priority, string ruleType, IList<MatchCondition> matchConditions, string action, string name = default(string), string enabledState = default(string), int? rateLimitDurationInMinutes = default(int?), int? rateLimitThreshold = default(int?), IList<GroupByVariable> groupBy = default(IList<GroupByVariable>))","public CustomRule(int priority, string ruleType, System.Collections.Generic.IList<MatchCondition> matchConditions, string action, string name = default(string), string enabledState = default(string), int? rateLimitDurationInMinutes = default(int?), int? rateLimitThreshold = default(int?), System.Collections.Generic.IList<GroupByVariable> groupBy = default(System.Collections.Generic.IList<GroupByVariable>))"
"CustomRuleList.cs","public CustomRuleList(IList<CustomRule> rules = default(IList<CustomRule>))","public CustomRuleList()"
"Error.cs","public Error(string code = default(string), string message = default(string), string target = default(string), IList<ErrorDetails> details = default(IList<ErrorDetails>), string innerError = default(string))","public Error(string code = default(string), string message = default(string), string target = default(string), System.Collections.Generic.IList<ErrorDetails> details = default(System.Collections.Generic.IList<ErrorDetails>), string innerError = default(string))"
"Experiment.cs","public Experiment(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string description = default(string), Endpoint endpointA = default(Endpoint), Endpoint endpointB = default(Endpoint), string enabledState = default(string), string resourceState = default(string), string status = default(string), string scriptFileUri = default(string))","public Experiment(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), Endpoint endpointA = default(Endpoint), Endpoint endpointB = default(Endpoint), string description = default(string), string enabledState = default(string), string resourceState = default(string), string status = default(string), string scriptFileUri = default(string))"
"ExperimentUpdateModel.cs","public ExperimentUpdateModel(IDictionary<string, string> tags = default(IDictionary<string, string>), string description = default(string), string enabledState = default(string))","public ExperimentUpdateModel(System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string description = default(string), string enabledState = default(string))"
"FrontDoorModel.cs","public FrontDoorModel(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string friendlyName = default(string), IList<RoutingRule> routingRules = default(IList<RoutingRule>), IList<LoadBalancingSettingsModel> loadBalancingSettings = default(IList<LoadBalancingSettingsModel>), IList<HealthProbeSettingsModel> healthProbeSettings = default(IList<HealthProbeSettingsModel>), IList<BackendPool> backendPools = default(IList<BackendPool>), IList<FrontendEndpoint> frontendEndpoints = default(IList<FrontendEndpoint>), BackendPoolsSettings backendPoolsSettings = default(BackendPoolsSettings), string enabledState = default(string), string resourceState = default(string), string provisioningState = default(string), string cname = default(string), string frontdoorId = default(string), IList<RulesEngine> rulesEngines = default(IList<RulesEngine>), IDictionary<string, string> extendedProperties = default(IDictionary<string, string>))","public FrontDoorModel(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string friendlyName = default(string), System.Collections.Generic.IList<RoutingRule> routingRules = default(System.Collections.Generic.IList<RoutingRule>), System.Collections.Generic.IList<LoadBalancingSettingsModel> loadBalancingSettings = default(System.Collections.Generic.IList<LoadBalancingSettingsModel>), System.Collections.Generic.IList<HealthProbeSettingsModel> healthProbeSettings = default(System.Collections.Generic.IList<HealthProbeSettingsModel>), System.Collections.Generic.IList<BackendPool> backendPools = default(System.Collections.Generic.IList<BackendPool>), System.Collections.Generic.IList<FrontendEndpoint> frontendEndpoints = default(System.Collections.Generic.IList<FrontendEndpoint>), BackendPoolsSettings backendPoolsSettings = default(BackendPoolsSettings), string enabledState = default(string), string resourceState = default(string), string provisioningState = default(string), string cname = default(string), string frontdoorId = default(string), System.Collections.Generic.IList<RulesEngine> rulesEngines = default(System.Collections.Generic.IList<RulesEngine>), System.Collections.Generic.IDictionary<string, string> extendedProperties = default(System.Collections.Generic.IDictionary<string, string>))"
"FrontDoorUpdateParameters.cs","public FrontDoorUpdateParameters(string friendlyName = default(string), IList<RoutingRule> routingRules = default(IList<RoutingRule>), IList<LoadBalancingSettingsModel> loadBalancingSettings = default(IList<LoadBalancingSettingsModel>), IList<HealthProbeSettingsModel> healthProbeSettings = default(IList<HealthProbeSettingsModel>), IList<BackendPool> backendPools = default(IList<BackendPool>), IList<FrontendEndpoint> frontendEndpoints = default(IList<FrontendEndpoint>), BackendPoolsSettings backendPoolsSettings = default(BackendPoolsSettings), string enabledState = default(string))","public FrontDoorUpdateParameters(string friendlyName = default(string), System.Collections.Generic.IList<RoutingRule> routingRules = default(System.Collections.Generic.IList<RoutingRule>), System.Collections.Generic.IList<LoadBalancingSettingsModel> loadBalancingSettings = default(System.Collections.Generic.IList<LoadBalancingSettingsModel>), System.Collections.Generic.IList<HealthProbeSettingsModel> healthProbeSettings = default(System.Collections.Generic.IList<HealthProbeSettingsModel>), System.Collections.Generic.IList<BackendPool> backendPools = default(System.Collections.Generic.IList<BackendPool>), System.Collections.Generic.IList<FrontendEndpoint> frontendEndpoints = default(System.Collections.Generic.IList<FrontendEndpoint>), BackendPoolsSettings backendPoolsSettings = default(BackendPoolsSettings), string enabledState = default(string))"
"FrontendEndpoint.cs","public FrontendEndpoint(string id = default(string), string hostName = default(string), string sessionAffinityEnabledState = default(string), int? sessionAffinityTtlSeconds = default(int?), FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink = default(FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink), string resourceState = default(string), string customHttpsProvisioningState = default(string), string customHttpsProvisioningSubstate = default(string), CustomHttpsConfiguration customHttpsConfiguration = default(CustomHttpsConfiguration), string name = default(string), string type = default(string))","public FrontendEndpoint(string id = default(string), string name = default(string), string type = default(string), string hostName = default(string), string sessionAffinityEnabledState = default(string), int? sessionAffinityTtlSeconds = default(int?), FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink = default(FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink), string resourceState = default(string), string customHttpsProvisioningState = default(string), string customHttpsProvisioningSubstate = default(string), CustomHttpsConfiguration customHttpsConfiguration = default(CustomHttpsConfiguration))"
"HealthProbeSettingsListResult.cs","public HealthProbeSettingsListResult(IList<HealthProbeSettingsModel> value = default(IList<HealthProbeSettingsModel>), string nextLink = default(string))","public HealthProbeSettingsListResult(System.Collections.Generic.IList<HealthProbeSettingsModel> value = default(System.Collections.Generic.IList<HealthProbeSettingsModel>), string nextLink = default(string))"
"HealthProbeSettingsModel.cs","public HealthProbeSettingsModel(string id = default(string), string path = default(string), string protocol = default(string), int? intervalInSeconds = default(int?), string healthProbeMethod = default(string), string enabledState = default(string), string resourceState = default(string), string name = default(string), string type = default(string))","public HealthProbeSettingsModel(string id = default(string), string name = default(string), string type = default(string), string path = default(string), string protocol = default(string), int? intervalInSeconds = default(int?), string healthProbeMethod = default(string), string enabledState = default(string), string resourceState = default(string))"
"LatencyScorecard.cs","public LatencyScorecard(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string latencyScorecardId = default(string), string latencyScorecardName = default(string), string description = default(string), string endpointA = default(string), string endpointB = default(string), System.DateTime? startDateTimeUTC = default(System.DateTime?), System.DateTime? endDateTimeUTC = default(System.DateTime?), string country = default(string), IList<LatencyMetric> latencyMetrics = default(IList<LatencyMetric>))","public LatencyScorecard(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string propertiesId = default(string), string propertiesName = default(string), string description = default(string), string endpointA = default(string), string endpointB = default(string), System.DateTime? startDateTimeUtc = default(System.DateTime?), System.DateTime? endDateTimeUtc = default(System.DateTime?), string country = default(string), System.Collections.Generic.IList<LatencyMetric> latencyMetrics = default(System.Collections.Generic.IList<LatencyMetric>))"
"LoadBalancingSettingsListResult.cs","public LoadBalancingSettingsListResult(IList<LoadBalancingSettingsModel> value = default(IList<LoadBalancingSettingsModel>), string nextLink = default(string))","public LoadBalancingSettingsListResult(System.Collections.Generic.IList<LoadBalancingSettingsModel> value = default(System.Collections.Generic.IList<LoadBalancingSettingsModel>), string nextLink = default(string))"
"LoadBalancingSettingsModel.cs","public LoadBalancingSettingsModel(string id = default(string), int? sampleSize = default(int?), int? successfulSamplesRequired = default(int?), int? additionalLatencyMilliseconds = default(int?), string resourceState = default(string), string name = default(string), string type = default(string))","public LoadBalancingSettingsModel(string id = default(string), string name = default(string), string type = default(string), int? sampleSize = default(int?), int? successfulSamplesRequired = default(int?), int? additionalLatencyMilliseconds = default(int?), string resourceState = default(string))"
"ManagedRuleGroupDefinition.cs","public ManagedRuleGroupDefinition(string ruleGroupName = default(string), string description = default(string), IList<ManagedRuleDefinition> rules = default(IList<ManagedRuleDefinition>))","public ManagedRuleGroupDefinition(string ruleGroupName = default(string), string description = default(string), System.Collections.Generic.IList<ManagedRuleDefinition> rules = default(System.Collections.Generic.IList<ManagedRuleDefinition>))"
"ManagedRuleGroupOverride.cs","public ManagedRuleGroupOverride(string ruleGroupName, IList<ManagedRuleExclusion> exclusions = default(IList<ManagedRuleExclusion>), IList<ManagedRuleOverride> rules = default(IList<ManagedRuleOverride>))","public ManagedRuleGroupOverride(string ruleGroupName, System.Collections.Generic.IList<ManagedRuleExclusion> exclusions = default(System.Collections.Generic.IList<ManagedRuleExclusion>), System.Collections.Generic.IList<ManagedRuleOverride> rules = default(System.Collections.Generic.IList<ManagedRuleOverride>))"
"ManagedRuleOverride.cs","public ManagedRuleOverride(string ruleId, string enabledState = default(string), string action = default(string), IList<ManagedRuleExclusion> exclusions = default(IList<ManagedRuleExclusion>))","public ManagedRuleOverride(string ruleId, string enabledState = default(string), string action = default(string), System.Collections.Generic.IList<ManagedRuleExclusion> exclusions = default(System.Collections.Generic.IList<ManagedRuleExclusion>))"
"ManagedRuleSet.cs","public ManagedRuleSet(string ruleSetType, string ruleSetVersion, string ruleSetAction = default(string), IList<ManagedRuleExclusion> exclusions = default(IList<ManagedRuleExclusion>), IList<ManagedRuleGroupOverride> ruleGroupOverrides = default(IList<ManagedRuleGroupOverride>))","public ManagedRuleSet(string ruleSetType, string ruleSetVersion, string ruleSetAction = default(string), System.Collections.Generic.IList<ManagedRuleExclusion> exclusions = default(System.Collections.Generic.IList<ManagedRuleExclusion>), System.Collections.Generic.IList<ManagedRuleGroupOverride> ruleGroupOverrides = default(System.Collections.Generic.IList<ManagedRuleGroupOverride>))"
"ManagedRuleSetDefinition.cs","public ManagedRuleSetDefinition(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string provisioningState = default(string), string ruleSetId = default(string), string ruleSetType = default(string), string ruleSetVersion = default(string), IList<ManagedRuleGroupDefinition> ruleGroups = default(IList<ManagedRuleGroupDefinition>))","public ManagedRuleSetDefinition(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string provisioningState = default(string), string ruleSetId = default(string), string ruleSetType = default(string), string ruleSetVersion = default(string), System.Collections.Generic.IList<ManagedRuleGroupDefinition> ruleGroups = default(System.Collections.Generic.IList<ManagedRuleGroupDefinition>))"
"ManagedRuleSetList.cs","public ManagedRuleSetList(IList<ManagedRuleSet> managedRuleSets = default(IList<ManagedRuleSet>))","public ManagedRuleSetList()"
"MatchCondition.cs","public MatchCondition(string matchVariable, string operatorProperty, IList<string> matchValue, string selector = default(string), bool? negateCondition = default(bool?), IList<string> transforms = default(IList<string>))","public MatchCondition(string matchVariable, string operatorProperty, System.Collections.Generic.IList<string> matchValue, string selector = default(string), bool? negateCondition = default(bool?), System.Collections.Generic.IList<string> transforms = default(System.Collections.Generic.IList<string>))"
"Page.cs","public IEnumerator<T> GetEnumerator()",""
"PolicySettingsLogScrubbing.cs","public PolicySettingsLogScrubbing(string state = default(string), IList<WebApplicationFirewallScrubbingRules> scrubbingRules = default(IList<WebApplicationFirewallScrubbingRules>))","public PolicySettingsLogScrubbing(string state = default(string), System.Collections.Generic.IList<WebApplicationFirewallScrubbingRules> scrubbingRules = default(System.Collections.Generic.IList<WebApplicationFirewallScrubbingRules>))"
"PreconfiguredEndpoint.cs","public PreconfiguredEndpoint(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string description = default(string), string endpoint = default(string), string endpointType = default(string), string backend = default(string))","public PreconfiguredEndpoint(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string endpointType = default(string), string description = default(string), string endpoint = default(string), string backend = default(string))"
"Profile.cs","public Profile(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string resourceState = default(string), string enabledState = default(string), string etag = default(string))","public Profile(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string etag = default(string), string resourceState = default(string), string enabledState = default(string))"
"ProfileUpdateModel.cs","public ProfileUpdateModel(string enabledState = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>))","public ProfileUpdateModel(System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string enabledState = default(string))"
"PurgeParameters.cs","public PurgeParameters(IList<string> contentPaths)","public PurgeParameters()"
"Resource.cs","public Resource(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>))","public Resource(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>))"
"RoutingRule.cs","public RoutingRule(string id = default(string), IList<SubResource> frontendEndpoints = default(IList<SubResource>), IList<string> acceptedProtocols = default(IList<string>), IList<string> patternsToMatch = default(IList<string>), string enabledState = default(string), RouteConfiguration routeConfiguration = default(RouteConfiguration), SubResource rulesEngine = default(SubResource), RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink = default(RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink), string resourceState = default(string), string name = default(string), string type = default(string))","public RoutingRule(string id = default(string), string name = default(string), string type = default(string), RouteConfiguration routeConfiguration = default(RouteConfiguration), System.Collections.Generic.IList<SubResource> frontendEndpoints = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<string> acceptedProtocols = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> patternsToMatch = default(System.Collections.Generic.IList<string>), string enabledState = default(string), SubResource rulesEngine = default(SubResource), RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink = default(RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink), string resourceState = default(string))"
"RoutingRuleListResult.cs","public RoutingRuleListResult(IList<RoutingRule> value = default(IList<RoutingRule>), string nextLink = default(string))","public RoutingRuleListResult(System.Collections.Generic.IList<RoutingRule> value = default(System.Collections.Generic.IList<RoutingRule>), string nextLink = default(string))"
"RoutingRuleUpdateParameters.cs","public RoutingRuleUpdateParameters(IList<SubResource> frontendEndpoints = default(IList<SubResource>), IList<string> acceptedProtocols = default(IList<string>), IList<string> patternsToMatch = default(IList<string>), string enabledState = default(string), RouteConfiguration routeConfiguration = default(RouteConfiguration), SubResource rulesEngine = default(SubResource), RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink = default(RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink))","public RoutingRuleUpdateParameters(System.Collections.Generic.IList<SubResource> frontendEndpoints = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<string> acceptedProtocols = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> patternsToMatch = default(System.Collections.Generic.IList<string>), string enabledState = default(string), RouteConfiguration routeConfiguration = default(RouteConfiguration), SubResource rulesEngine = default(SubResource), RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink = default(RoutingRuleUpdateParametersWebApplicationFirewallPolicyLink))"
"RulesEngine.cs","public RulesEngine(IList<RulesEngineRule> rules = default(IList<RulesEngineRule>), string resourceState = default(string), string name = default(string), string type = default(string), string id = default(string))","public RulesEngine(string name = default(string), string type = default(string), string id = default(string), System.Collections.Generic.IList<RulesEngineRule> rules = default(System.Collections.Generic.IList<RulesEngineRule>), string resourceState = default(string))"
"RulesEngineAction.cs","public RulesEngineAction(IList<HeaderAction> requestHeaderActions = default(IList<HeaderAction>), IList<HeaderAction> responseHeaderActions = default(IList<HeaderAction>), RouteConfiguration routeConfigurationOverride = default(RouteConfiguration))","public RulesEngineAction(System.Collections.Generic.IList<HeaderAction> requestHeaderActions = default(System.Collections.Generic.IList<HeaderAction>), System.Collections.Generic.IList<HeaderAction> responseHeaderActions = default(System.Collections.Generic.IList<HeaderAction>), RouteConfiguration routeConfigurationOverride = default(RouteConfiguration))"
"RulesEngineMatchCondition.cs","public RulesEngineMatchCondition(string rulesEngineMatchVariable, string rulesEngineOperator, IList<string> rulesEngineMatchValue, string selector = default(string), bool? negateCondition = default(bool?), IList<string> transforms = default(IList<string>))","public RulesEngineMatchCondition(string rulesEngineMatchVariable, string rulesEngineOperator, System.Collections.Generic.IList<string> rulesEngineMatchValue, string selector = default(string), bool? negateCondition = default(bool?), System.Collections.Generic.IList<string> transforms = default(System.Collections.Generic.IList<string>))"
"RulesEngineRule.cs","public RulesEngineRule(string name, int priority, RulesEngineAction action, IList<RulesEngineMatchCondition> matchConditions = default(IList<RulesEngineMatchCondition>), string matchProcessingBehavior = default(string))","public RulesEngineRule(string name, int priority, RulesEngineAction action, System.Collections.Generic.IList<RulesEngineMatchCondition> matchConditions = default(System.Collections.Generic.IList<RulesEngineMatchCondition>), string matchProcessingBehavior = default(string))"
"RulesEngineUpdateParameters.cs","public RulesEngineUpdateParameters(IList<RulesEngineRule> rules = default(IList<RulesEngineRule>))","public RulesEngineUpdateParameters()"
"TagsObject.cs","public TagsObject(IDictionary<string, string> tags = default(IDictionary<string, string>))","public TagsObject(System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>))"
"Timeseries.cs","public Timeseries(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string endpoint = default(string), string startDateTimeUTC = default(string), string endDateTimeUTC = default(string), string aggregationInterval = default(string), string timeseriesType = default(string), string country = default(string), IList<TimeseriesDataPoint> timeseriesData = default(IList<TimeseriesDataPoint>))","public Timeseries(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string aggregationInterval = default(string), string timeseriesType = default(string), string endpoint = default(string), string startDateTimeUtc = default(string), string endDateTimeUtc = default(string), string country = default(string), System.Collections.Generic.IList<TimeseriesDataPoint> timeseriesData = default(System.Collections.Generic.IList<TimeseriesDataPoint>))"
"WebApplicationFirewallPolicy.cs","public WebApplicationFirewallPolicy(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), PolicySettings policySettings = default(PolicySettings), CustomRuleList customRules = default(CustomRuleList), ManagedRuleSetList managedRules = default(ManagedRuleSetList), IList<FrontendEndpointLink> frontendEndpointLinks = default(IList<FrontendEndpointLink>), IList<RoutingRuleLink> routingRuleLinks = default(IList<RoutingRuleLink>), IList<SecurityPolicyLink> securityPolicyLinks = default(IList<SecurityPolicyLink>), string provisioningState = default(string), string resourceState = default(string), string etag = default(string), Sku sku = default(Sku))","public WebApplicationFirewallPolicy(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string etag = default(string), Sku sku = default(Sku), PolicySettings policySettings = default(PolicySettings), CustomRuleList customRules = default(CustomRuleList), ManagedRuleSetList managedRules = default(ManagedRuleSetList), System.Collections.Generic.IList<FrontendEndpointLink> frontendEndpointLinks = default(System.Collections.Generic.IList<FrontendEndpointLink>), System.Collections.Generic.IList<RoutingRuleLink> routingRuleLinks = default(System.Collections.Generic.IList<RoutingRuleLink>), System.Collections.Generic.IList<SecurityPolicyLink> securityPolicyLinks = default(System.Collections.Generic.IList<SecurityPolicyLink>), string provisioningState = default(string), string resourceState = default(string))"
