// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Extensions;

    /// <summary>Define a match condition</summary>
    public partial class RulesEngineMatchCondition :
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IRulesEngineMatchCondition,
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IRulesEngineMatchConditionInternal
    {

        /// <summary>Backing field for <see cref="MatchValue" /> property.</summary>
        private System.Collections.Generic.List<string> _matchValue;

        /// <summary>
        /// Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the
        /// variable with the given operator this match condition is considered a match.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> MatchValue { get => this._matchValue; set => this._matchValue = value; }

        /// <summary>Backing field for <see cref="MatchVariable" /> property.</summary>
        private string _matchVariable;

        /// <summary>Match Variable</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public string MatchVariable { get => this._matchVariable; set => this._matchVariable = value; }

        /// <summary>Backing field for <see cref="NegateCondition" /> property.</summary>
        private bool? _negateCondition;

        /// <summary>Describes if this is negate condition or not</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public bool? NegateCondition { get => this._negateCondition; set => this._negateCondition = value; }

        /// <summary>Backing field for <see cref="Operator" /> property.</summary>
        private string _operator;

        /// <summary>Describes operator to apply to the match condition.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public string Operator { get => this._operator; set => this._operator = value; }

        /// <summary>Backing field for <see cref="Selector" /> property.</summary>
        private string _selector;

        /// <summary>Name of selector in RequestHeader or RequestBody to be matched</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public string Selector { get => this._selector; set => this._selector = value; }

        /// <summary>Backing field for <see cref="Transform" /> property.</summary>
        private System.Collections.Generic.List<string> _transform;

        /// <summary>List of transforms</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> Transform { get => this._transform; set => this._transform = value; }

        /// <summary>Creates an new <see cref="RulesEngineMatchCondition" /> instance.</summary>
        public RulesEngineMatchCondition()
        {

        }
    }
    /// Define a match condition
    public partial interface IRulesEngineMatchCondition :
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the
        /// variable with the given operator this match condition is considered a match.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.",
        SerializedName = @"rulesEngineMatchValue",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> MatchValue { get; set; }
        /// <summary>Match Variable</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Match Variable",
        SerializedName = @"rulesEngineMatchVariable",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("IsMobile", "RemoteAddr", "RequestMethod", "QueryString", "PostArgs", "RequestUri", "RequestPath", "RequestFilename", "RequestFilenameExtension", "RequestHeader", "RequestBody", "RequestScheme")]
        string MatchVariable { get; set; }
        /// <summary>Describes if this is negate condition or not</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Describes if this is negate condition or not",
        SerializedName = @"negateCondition",
        PossibleTypes = new [] { typeof(bool) })]
        bool? NegateCondition { get; set; }
        /// <summary>Describes operator to apply to the match condition.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Describes operator to apply to the match condition.",
        SerializedName = @"rulesEngineOperator",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Any", "IPMatch", "GeoMatch", "Equal", "Contains", "LessThan", "GreaterThan", "LessThanOrEqual", "GreaterThanOrEqual", "BeginsWith", "EndsWith")]
        string Operator { get; set; }
        /// <summary>Name of selector in RequestHeader or RequestBody to be matched</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Name of selector in RequestHeader or RequestBody to be matched",
        SerializedName = @"selector",
        PossibleTypes = new [] { typeof(string) })]
        string Selector { get; set; }
        /// <summary>List of transforms</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of transforms",
        SerializedName = @"transforms",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Lowercase", "Uppercase", "Trim", "UrlDecode", "UrlEncode", "RemoveNulls")]
        System.Collections.Generic.List<string> Transform { get; set; }

    }
    /// Define a match condition
    internal partial interface IRulesEngineMatchConditionInternal

    {
        /// <summary>
        /// Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the
        /// variable with the given operator this match condition is considered a match.
        /// </summary>
        System.Collections.Generic.List<string> MatchValue { get; set; }
        /// <summary>Match Variable</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("IsMobile", "RemoteAddr", "RequestMethod", "QueryString", "PostArgs", "RequestUri", "RequestPath", "RequestFilename", "RequestFilenameExtension", "RequestHeader", "RequestBody", "RequestScheme")]
        string MatchVariable { get; set; }
        /// <summary>Describes if this is negate condition or not</summary>
        bool? NegateCondition { get; set; }
        /// <summary>Describes operator to apply to the match condition.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Any", "IPMatch", "GeoMatch", "Equal", "Contains", "LessThan", "GreaterThan", "LessThanOrEqual", "GreaterThanOrEqual", "BeginsWith", "EndsWith")]
        string Operator { get; set; }
        /// <summary>Name of selector in RequestHeader or RequestBody to be matched</summary>
        string Selector { get; set; }
        /// <summary>List of transforms</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Lowercase", "Uppercase", "Trim", "UrlDecode", "UrlEncode", "RemoveNulls")]
        System.Collections.Generic.List<string> Transform { get; set; }

    }
}