// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Extensions;

    /// <summary>A backend pool is a collection of backends that can be routed to.</summary>
    public partial class BackendPool :
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPool,
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolInternal,
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ISubResource" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ISubResource __subResource = new Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.SubResource();

        /// <summary>The set of backends for this pool</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackend> Backend { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolUpdateParametersInternal)Property).Backend; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolUpdateParametersInternal)Property).Backend = value ?? null /* arrayOf */; }

        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string HealthProbeSettingId { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolUpdateParametersInternal)Property).HealthProbeSettingId; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolUpdateParametersInternal)Property).HealthProbeSettingId = value ?? null; }

        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ISubResourceInternal)__subResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ISubResourceInternal)__subResource).Id = value ?? null; }

        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string LoadBalancingSettingId { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolUpdateParametersInternal)Property).LoadBalancingSettingId; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolUpdateParametersInternal)Property).LoadBalancingSettingId = value ?? null; }

        /// <summary>Internal Acessors for HealthProbeSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ISubResource Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolInternal.HealthProbeSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolUpdateParametersInternal)Property).HealthProbeSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolUpdateParametersInternal)Property).HealthProbeSetting = value ?? null /* model class */; }

        /// <summary>Internal Acessors for LoadBalancingSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ISubResource Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolInternal.LoadBalancingSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolUpdateParametersInternal)Property).LoadBalancingSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolUpdateParametersInternal)Property).LoadBalancingSetting = value ?? null /* model class */; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolProperties Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.BackendPoolProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ResourceState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolInternal.ResourceState { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolPropertiesInternal)Property).ResourceState; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolPropertiesInternal)Property).ResourceState = value ?? null; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolInternal.Type { get => this._type; set { {_type = value;} } }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolProperties _property;

        /// <summary>Properties of the Front Door Backend Pool</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.BackendPoolProperties()); set => this._property = value; }

        /// <summary>Resource status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string ResourceState { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolPropertiesInternal)Property).ResourceState; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public string Type { get => this._type; }

        /// <summary>Creates an new <see cref="BackendPool" /> instance.</summary>
        public BackendPool()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__subResource), __subResource);
            await eventListener.AssertObjectIsValid(nameof(__subResource), __subResource);
        }
    }
    /// A backend pool is a collection of backends that can be routed to.
    public partial interface IBackendPool :
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ISubResource
    {
        /// <summary>The set of backends for this pool</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The set of backends for this pool",
        SerializedName = @"backends",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackend) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackend> Backend { get; set; }
        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string HealthProbeSettingId { get; set; }
        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string LoadBalancingSettingId { get; set; }
        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource name.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>Resource status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Resource status.",
        SerializedName = @"resourceState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Creating", "Enabling", "Enabled", "Disabling", "Disabled", "Deleting", "Migrating", "Migrated")]
        string ResourceState { get;  }
        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Resource type.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string Type { get;  }

    }
    /// A backend pool is a collection of backends that can be routed to.
    internal partial interface IBackendPoolInternal :
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ISubResourceInternal
    {
        /// <summary>The set of backends for this pool</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackend> Backend { get; set; }
        /// <summary>L7 health probe settings for a backend pool</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ISubResource HealthProbeSetting { get; set; }
        /// <summary>Resource ID.</summary>
        string HealthProbeSettingId { get; set; }
        /// <summary>Load balancing settings for a backend pool</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ISubResource LoadBalancingSetting { get; set; }
        /// <summary>Resource ID.</summary>
        string LoadBalancingSettingId { get; set; }
        /// <summary>Resource name.</summary>
        string Name { get; set; }
        /// <summary>Properties of the Front Door Backend Pool</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolProperties Property { get; set; }
        /// <summary>Resource status.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Creating", "Enabling", "Enabled", "Disabling", "Disabled", "Deleting", "Migrating", "Migrated")]
        string ResourceState { get; set; }
        /// <summary>Resource type.</summary>
        string Type { get; set; }

    }
}