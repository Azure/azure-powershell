
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for FrontendEndpoint.
.Description
Create an in-memory object for FrontendEndpoint.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.FrontendEndpoint
.Link
https://learn.microsoft.com/powershell/module/Az.FrontDoor/new-azfrontdoorfrontendendpointobject
#>
function New-AzFrontDoorFrontendEndpointObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.FrontendEndpoint')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="Defines the source of the SSL certificate.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("AzureKeyVault", "FrontDoor")]
        [string]
        $CertificateSource,
        [Parameter(HelpMessage="The minimum TLS version required from the clients to establish an SSL handshake with Front Door.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("1.0", "1.2")]
        [string]
        $MinimumTlsVersion,
        [Parameter(HelpMessage="Defines the type of the certificate used for secure connections to a frontendEndpoint.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Dedicated")]
        [string]
        $CertificateType,
        [Parameter(HelpMessage="The host name of the frontendEndpoint. Must be a domain name.")]
        [string]
        $HostName,
        [Parameter(HelpMessage="The name of the Key Vault secret representing the full certificate PFX.")]
        [string]
        $SecretName,
        [Parameter(HelpMessage="The version of the Key Vault secret representing the full certificate PFX.")]
        [string]
        $SecretVersion,
        [Parameter(HelpMessage="Resource name.")]
        [string]
        $Name,
        [Parameter(HelpMessage="Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        [string]
        $SessionAffinityEnabledState = 'Enabled',
        [Parameter(HelpMessage="UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.")]
        [int]
        $SessionAffinityTtlInSeconds = 0,
        [Parameter(HelpMessage="Resource ID.")]
        [string]
        $Vault,
        [Parameter(HelpMessage="Resource ID.")]
        [string]
        [Alias("WebApplicationFirewallPolicyLink")]
        $WebApplicationFirewallPolicyLinkId,
        [Parameter(HelpMessage="Resource ID.")]
        [string]
        $Id,
        # This was ignored by autorest because of only one enum
        [Parameter(HelpMessage="The TLS extension protocol that is used for secure delivery")]
        [string]
        $ProtocolType = "ServerNameIndication"
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.FrontendEndpoint]::New()

        if ($PSBoundParameters.ContainsKey('CertificateSource')) {
            $Object.CertificateSource = $CertificateSource
        }
        if ($PSBoundParameters.ContainsKey('MinimumTlsVersion')) {
            $Object.MinimumTlsVersion = $MinimumTlsVersion
        }
        if ($PSBoundParameters.ContainsKey('CertificateType')) {
            $Object.CertificateType = $CertificateType
        }
        if ($PSBoundParameters.ContainsKey('HostName')) {
            $Object.HostName = $HostName
        }
        if ($PSBoundParameters.ContainsKey('SecretName')) {
            $Object.SecretName = $SecretName
        }
        if ($PSBoundParameters.ContainsKey('SecretVersion')) {
            $Object.SecretVersion = $SecretVersion
        }
        if ($PSBoundParameters.ContainsKey('Name')) {
            $Object.Name = $Name
        }
        $Object.SessionAffinityEnabledState = $SessionAffinityEnabledState
        $Object.SessionAffinityTtlInSeconds = $SessionAffinityTtlInSeconds
        if ($PSBoundParameters.ContainsKey('Vault')) {
            $Object.Vault = $Vault
        }
        if ($PSBoundParameters.ContainsKey('WebApplicationFirewallPolicyLinkId')) {
            $Object.WebApplicationFirewallPolicyLinkId = $WebApplicationFirewallPolicyLinkId
        }
        if ($PSBoundParameters.ContainsKey('Id')) {
            $Object.Id = $Id
        }
        # $Object.ProtocolType = $ProtocolType
        return $Object
    }
}

