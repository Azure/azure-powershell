
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
update policy with specified rule set name within a resource group.
.Description
update policy with specified rule set name within a resource group.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontDoorIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IWebApplicationFirewallPolicy
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

CUSTOMRULE <ICustomRule[]>: List of rules
  Action <String>: Describes what action to be applied when rule matches.
  MatchCondition <List<IMatchCondition>>: List of match conditions.
    MatchValue <List<String>>: List of possible match values.
    MatchVariable <String>: Request variable to compare with.
    OperatorProperty <String>: Comparison type to use for matching with the variable value.
    [NegateCondition <Boolean?>]: Describes if the result of this condition should be negated.
    [Selector <String>]: Match against a specific key from the QueryString, PostArgs, RequestHeader or Cookies variables. Default is null.
    [Transform <List<String>>]: List of transforms.
  Priority <Int32>: Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.
  RuleType <String>: Describes type of rule.
  [EnabledState <String>]: Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
  [GroupBy <List<IGroupByVariable>>]: Describes the list of variables to group the rate limit requests
    VariableName <String>: Describes the supported variable for group by
  [Name <String>]: Describes the name of the rule.
  [RateLimitDurationInMinutes <Int32?>]: Time window for resetting the rate limit count. Default is 1 minute.
  [RateLimitThreshold <Int32?>]: Number of allowed requests per client within the time window.

INPUTOBJECT <IFrontDoorIdentity>: Identity Parameter
  [FrontDoorName <String>]: Name of the Front Door which is globally unique.
  [FrontendEndpointName <String>]: Name of the Frontend endpoint which is unique within the Front Door.
  [Id <String>]: Resource identity path
  [PolicyName <String>]: The name of the Web Application Firewall Policy.
  [ResourceGroupName <String>]: Name of the Resource group within the Azure subscription.
  [RulesEngineName <String>]: Name of the Rules Engine which is unique within the Front Door.
  [SubscriptionId <String>]: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.

MANAGEDRULESET <IManagedRuleSet[]>: List of rule sets.
  Type <String>: Defines the rule set type to use.
  Version <String>: Defines the version of the rule set to use.
  [Exclusion <List<IManagedRuleExclusion>>]: Describes the exclusions that are applied to all rules in the set.
    Operator <String>: Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.
    Selector <String>: Selector value for which elements in the collection this exclusion applies to.
    Variable <String>: The variable type to be excluded.
  [RuleGroupOverride <List<IManagedRuleGroupOverride>>]: Defines the rule group overrides to apply to the rule set.
    RuleGroupName <String>: Describes the managed rule group to override.
    [Exclusion <List<IManagedRuleExclusion>>]: Describes the exclusions that are applied to all rules in the group.
    [ManagedRuleOverride <List<IManagedRuleOverride>>]: List of rules that will be disabled. If none specified, all rules in the group will be disabled.
      RuleId <String>: Identifier for the managed rule.
      [Action <String>]: Describes the override action to be applied when rule matches.
      [EnabledState <String>]: Describes if the managed rule is in enabled or disabled state. Defaults to Disabled if not specified.
      [Exclusion <List<IManagedRuleExclusion>>]: Describes the exclusions that are applied to this specific rule.
  [RuleSetAction <String>]: Defines the rule set action.

POLICYSETTING <IPolicySettings>: Describes settings for the policy.
  [CustomBlockResponseBody <String>]: If the action type is block, customer can override the response body. The body must be specified in base64 encoding.
  [CustomBlockResponseStatusCode <Int32?>]: If the action type is block, customer can override the response status code.
  [EnabledState <String>]: Describes if the policy is in enabled or disabled state. Defaults to Enabled if not specified.
  [JavascriptChallengeExpirationInMinutes <Int32?>]: Defines the JavaScript challenge cookie validity lifetime in minutes. This setting is only applicable to Premium_AzureFrontDoor. Value must be an integer between 5 and 1440 with the default value being 30.
  [LogScrubbingSetting <IPolicySettingsLogScrubbing>]: Defines rules that scrub sensitive fields in the Web Application Firewall logs.
    [ScrubbingRule <List<IWebApplicationFirewallScrubbingRules>>]: List of log scrubbing rules applied to the Web Application Firewall logs.
      MatchVariable <String>: The variable to be scrubbed from the logs.
      SelectorMatchOperator <String>: When matchVariable is a collection, operate on the selector to specify which elements in the collection this rule applies to.
      [Selector <String>]: When matchVariable is a collection, operator used to specify which elements in the collection this rule applies to.
      [State <String>]: Defines the state of a log scrubbing rule. Default value is enabled.
    [State <String>]: State of the log scrubbing config. Default value is Enabled.
  [Mode <String>]: Describes if it is in detection mode or prevention mode at policy level.
  [RedirectUrl <String>]: If action type is redirect, this field represents redirect URL for the client.
  [RequestBodyCheck <String>]: Describes if policy managed rules will inspect the request body content.
.Link
https://learn.microsoft.com/powershell/module/az.frontdoor/update-azfrontdoorwafpolicy
#>
function Update-AzFrontDoorWafPolicy {
[Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.ModelCmdletAttribute()]
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IWebApplicationFirewallPolicy])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Alias('PolicyName')]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Path')]
    [System.String]
    # The name of the Web Application Firewall Policy.
    ${Name},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Path')]
    [System.String]
    # Name of the Resource group within the Azure subscription.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The subscription credentials which uniquely identify the Microsoft Azure subscription.
    # The subscription ID forms part of the URI for every service call.
    ${SubscriptionId},

    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontDoorIdentity]
    # Identity Parameter
    ${InputObject},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomRule[]]
    # List of rules
    ${CustomRule},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.String]
    # Gets a unique read-only string that changes whenever the resource is updated.
    ${Etag},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IManagedRuleSet[]]
    # List of rule sets.
    ${ManagedRuleSet},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.String]
    # If the action type is block, customer can override the response body.
    # The body must be specified in base64 encoding.
    ${CustomBlockResponseBody},
  
    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.Int32]
    # If the action type is block, customer can override the response status code.
    ${CustomBlockResponseStatusCode},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Disabled", "Enabled")]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.String]
    # Describes if the policy is in enabled or disabled state.
    # Defaults to Enabled if not specified.
    ${EnabledState},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IPolicySettingsLogScrubbing]
    # Defines rules that scrub sensitive fields in the Web Application Firewall logs.
    ${LogScrubbingSetting},
  
    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Prevention", "Detection")]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.String]
    # Describes if it is in detection mode or prevention mode at policy level.
    ${Mode},
  
    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.String]
    # If action type is redirect, this field represents redirect URL for the client.
    ${RedirectUrl},
  
    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Disabled", "Enabled")]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.String]
    # Describes if policy managed rules will inspect the request body content.
    ${RequestBodyCheck},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.Int32]
    # Defines the JavaScript challenge cookie validity lifetime in minutes.
    # This setting is only applicable to Premium_AzureFrontDoor.
    # Value must be an integer between 5 and 1440 with the default value being 30.
    ${JavascriptChallengeExpirationInMinutes},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Classic_AzureFrontDoor", "Standard_AzureFrontDoor", "Premium_AzureFrontDoor")]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.String]
    # Name of the pricing tier.
    ${SkuName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

process {
        $retrievedPolicy = Get-AzFrontDoorWafPolicy -Name $Name -ResourceGroupName $ResourceGroupName
        $UpdatePolicySetting = $retrievedPolicy.PolicySetting
        if ($PSBoundParameters.ContainsKey("CustomBlockResponseBody")) {
          $null = $PSBoundParameters.Remove("CustomBlockResponseBody")
          $CustomBlockResponseBody = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($CustomBlockResponseBody))
          $UpdatePolicySetting.CustomBlockResponseBody = $CustomBlockResponseBody
        }
        if ($PSBoundParameters.ContainsKey("CustomBlockResponseStatusCode")) {
          $null = $PSBoundParameters.Remove("CustomBlockResponseStatusCode")
          $UpdatePolicySetting.CustomBlockResponseStatusCode = $CustomBlockResponseStatusCode
        }
        if ($PSBoundParameters.ContainsKey("EnabledState")) {
          $null = $PSBoundParameters.Remove("EnabledState")
          $UpdatePolicySetting.EnabledState = $EnabledState
        }
        if ($PSBoundParameters.ContainsKey("LogScrubbingSetting")) {
          $null = $PSBoundParameters.Remove("LogScrubbingSetting")
          $UpdatePolicySetting.LogScrubbingSetting = $LogScrubbingSetting
        }
        if ($PSBoundParameters.ContainsKey("Mode")) {
          $null = $PSBoundParameters.Remove("Mode")
          $UpdatePolicySetting.Mode = $Mode
        }
        if ($PSBoundParameters.ContainsKey("RedirectUrl")) {
          $null = $PSBoundParameters.Remove("RedirectUrl")
          $UpdatePolicySetting.RedirectUrl = $RedirectUrl
        }
        if ($PSBoundParameters.ContainsKey("RequestBodyCheck")) {
          $null = $PSBoundParameters.Remove("RequestBodyCheck")
          $UpdatePolicySetting.RequestBodyCheck = $RequestBodyCheck
        }
        if ($PSBoundParameters.ContainsKey("JavascriptChallengeExpirationInMinutes")) {
          $null = $PSBoundParameters.Remove("JavascriptChallengeExpirationInMinutes")
          $UpdatePolicySetting.JavascriptChallengeExpirationInMinutes = $JavascriptChallengeExpirationInMinutes
        }
        $PSBoundParameters.PolicySetting = $UpdatePolicySetting

        Az.FrontDoor.internal\Update-AzFrontDoorWafPolicy @PSBoundParameters
    }
}
