
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for RoutingRule.
.Description
Create an in-memory object for RoutingRule.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.RoutingRule
.Link
https://learn.microsoft.com/powershell/module/Az.FrontDoor/new-azfrontdoorroutingruleobject
#>
function New-AzFrontDoorRoutingRuleObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.RoutingRule')]
    [CmdletBinding(DefaultParameterSetName= 'ForwardingParameterSet')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="Protocol schemes to match for this rule.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Http", "Https")]
        [string[]]
        $AcceptedProtocol = @('Http', 'Https'),
        [Parameter(HelpMessage="Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        [string]
        $EnabledState = 'Enabled',
        [Parameter(HelpMessage="Frontend endpoints associated with this rule.")]
        [string[]]
        $FrontendEndpointName,
        [Parameter(HelpMessage="Resource name.")]
        [string]
        $Name,
        [Parameter(HelpMessage="Resource Group name.")]
        [string]
        $ResourceGroupName,
        [Parameter(HelpMessage="The name of the Front Door to which this routing rule belongs.")]
        [string]
        $FrontDoorName,
        [Parameter(HelpMessage="The route patterns of the rule.")]
        [string[]]
        $PatternsToMatch = @('/*'),
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IRouteConfiguration]
        $RouteConfiguration,
        [Parameter(HelpMessage="Resource ID.")]
        [string]
        $RuleEngineName,
        [Parameter(HelpMessage="Resource ID.")]
        [string]
        $WebApplicationFirewallPolicyLinkId,
        [Parameter(HelpMessage="Resource ID.")]
        [string]
        $Id,

        [Parameter(ParameterSetName= 'ForwardingParameterSet')]
        [Parameter(HelpMessage="Resource ID.")]
        [string]
        $BackendPoolName,
        [Parameter(ParameterSetName= 'ForwardingParameterSet')]
        [Parameter(HelpMessage="The duration for which the content needs to be cached. Allowed format is in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations). HTTP requires the value to be no more than a year.")]
        [System.TimeSpan]
        $CacheDuration,
        [Parameter(ParameterSetName= 'ForwardingParameterSet')]
        [Parameter(HelpMessage="Whether to use dynamic compression for cached content.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        [string]
        $DynamicCompression,
        [Parameter(ParameterSetName= 'ForwardingParameterSet')]
        [Parameter(HelpMessage="query parameters to include or exclude (comma separated).")]
        [string]
        $QueryParameter,
        [Parameter(ParameterSetName= 'ForwardingParameterSet')]
        [Parameter(HelpMessage="Treatment of URL query terms when forming the cache key.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("StripNone", "StripAll", "StripOnly", "StripAllExcept")]
        [string]
        $QueryParameterStripDirective,
        [Parameter(ParameterSetName= 'ForwardingParameterSet')]
        [Parameter(HelpMessage="A custom path used to rewrite resource paths matched by this rule. Leave empty to use incoming path.")]
        [string]
        $CustomForwardingPath,
        [Parameter(ParameterSetName= 'ForwardingParameterSet')]
        [Parameter(HelpMessage="Protocol this rule will use when forwarding traffic to backends.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("HttpOnly", "HttpsOnly", "MatchRequest")]
        [string]
        $ForwardingProtocol = 'MatchRequest',
        [Parameter(ParameterSetName= 'ForwardingParameterSet')]
        [bool]
        $EnableCaching,

        [Parameter(ParameterSetName= 'RedirectParameterSet')]
        [Parameter(HelpMessage="Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.")]
        [string]
        $CustomFragment,
        [Parameter(ParameterSetName= 'RedirectParameterSet')]
        [Parameter(HelpMessage="Host to redirect. Leave empty to use the incoming host as the destination host.")]
        [string]
        $CustomHost,
        [Parameter(ParameterSetName= 'RedirectParameterSet')]
        [Parameter(HelpMessage="The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.")]
        [string]
        $CustomPath,
        [Parameter(ParameterSetName= 'RedirectParameterSet')]
        [Parameter(HelpMessage="The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in <key>=<value> format. The first ? and & will be added automatically so do not include them in the front, but do separate multiple query strings with &.")]
        [string]
        $CustomQueryString,
        [Parameter(ParameterSetName= 'RedirectParameterSet')]
        [Parameter(HelpMessage="The protocol of the destination to where the traffic is redirected.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("HttpOnly", "HttpsOnly", "MatchRequest")]
        [string]
        $RedirectProtocol,
        [Parameter(ParameterSetName= 'RedirectParameterSet')]
        [Parameter(HelpMessage="The redirect type the rule will use when redirecting traffic.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Moved", "Found", "TemporaryRedirect", "PermanentRedirect")]
        [string]
        $RedirectType
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.RoutingRule]::New()
        $subId = (Get-AzContext).Subscription.Id

        switch ($PSCmdlet.ParameterSetName) {
            "ForwardingParameterSet" {
                $ForwardingConfiguration = [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ForwardingConfiguration]::New()

                $BackendPoolId = "/subscriptions/$subid/resourceGroups/$ResourceGroupName/providers/Microsoft.Network/frontDoors/$FrontDoorName/BackendPools/$BackendPoolName"
                if ($PSBoundParameters.ContainsKey('BackendPoolName')) {
                    $BackendPoolId = "/subscriptions/$subid/resourceGroups/$ResourceGroupName/providers/Microsoft.Network/frontDoors/$FrontDoorName/BackendPools/$BackendPoolName"
                    $ForwardingConfiguration.BackendPoolId = $BackendPoolId
                }

                if ($PSBoundParameters.ContainsKey('EnableCaching') -and $true -eq $EnableCaching) {
                    $CacheConfiguration = [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.CacheConfiguration]::New()

                    if ($PSBoundParameters.ContainsKey('CacheDuration')) {
                        $CacheConfiguration.CacheDuration = $CacheDuration
                    }
                    $CacheConfiguration.DynamicCompression = $PSBoundParameters.ContainsKey('DynamicCompression')? $DynamicCompression : 'Enabled'
                    if ($PSBoundParameters.ContainsKey('QueryParameter')) {
                        $CacheConfiguration.QueryParameter = $QueryParameter
                    }
                    $CacheConfiguration.QueryParameterStripDirective = $PSBoundParameters.ContainsKey('QueryParameterStripDirective')? $QueryParameterStripDirective : 'StripAll'
                    $ForwardingConfiguration.CacheConfiguration = $CacheConfiguration
                }

                if ($PSBoundParameters.ContainsKey('CustomForwardingPath')) {
                    $ForwardingConfiguration.CustomForwardingPath = $CustomForwardingPath
                }
                $ForwardingConfiguration.ForwardingProtocol = $PSBoundParameters.ContainsKey('ForwardingProtocol')? $ForwardingProtocol : 'MatchRequest'
                $Object.RouteConfiguration = $ForwardingConfiguration
            }
            "RedirectParameterSet" {
                $RedirectConfiguration = [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.RedirectConfiguration]::New()

                if ($PSBoundParameters.ContainsKey('CustomFragment')) {
                    $RedirectConfiguration.CustomFragment = $CustomFragment
                }
                $RedirectConfiguration.CustomHost = $PSBoundParameters.ContainsKey('CustomHost')? $CustomHost : ''
                $RedirectConfiguration.CustomPath = $PSBoundParameters.ContainsKey('CustomPath')? $CustomPath : ''
                if ($PSBoundParameters.ContainsKey('CustomQueryString')) {
                    $RedirectConfiguration.CustomQueryString = $CustomQueryString
                }
                $RedirectConfiguration.RedirectProtocol = $PSBoundParameters.ContainsKey('RedirectProtocol')? $RedirectProtocol : 'MatchRequest'
                $RedirectConfiguration.RedirectType = $PSBoundParameters.ContainsKey('RedirectType')? $RedirectType : 'Moved'

                $Object.RouteConfiguration = $RedirectConfiguration
            }
        }

        $Object.AcceptedProtocol = $AcceptedProtocol
        $Object.EnabledState = $EnabledState
        if ($PSBoundParameters.ContainsKey('FrontendEndpointName')) {
            $FrontendEndpoint = $FrontendEndpointName | ForEach-Object {
                [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.SubResource]@{
                    Id = "/subscriptions/$subid/resourceGroups/$ResourceGroupName/providers/Microsoft.Network/frontDoors/$FrontDoorName/FrontendEndpoints/$_"
                }
            }
            $Object.FrontendEndpoint = $FrontendEndpoint
        }
        if ($PSBoundParameters.ContainsKey('Name')) {
            $Object.Name = $Name
        }

        $Object.PatternsToMatch = $PatternsToMatch
        
        if ($PSBoundParameters.ContainsKey('RuleEngineName')) {
            $RuleEngineId = "/subscriptions/$subid/resourceGroups/$ResourceGroupName/providers/Microsoft.Network/frontDoors/$FrontDoorName/RulesEngines/$RuleEngineName"
            $Object.RuleEngineId = $RuleEngineId
        }
        if ($PSBoundParameters.ContainsKey('WebApplicationFirewallPolicyLinkId')) {
            $Object.WebApplicationFirewallPolicyLinkId = $WebApplicationFirewallPolicyLinkId
        }
        if ($PSBoundParameters.ContainsKey('Id')) {
            $Object.Id = $Id
        }
        return $Object
    }
}

