
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for WebApplicationFirewallCustomRule.
.Description
Create an in-memory object for WebApplicationFirewallCustomRule.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.WebApplicationFirewallCustomRule
.Link
https://learn.microsoft.com/powershell/module/Az.FrontDoor/new-azfrontdoorwafcustomruleobject
#>
function New-AzFrontDoorWafCustomRuleObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.WebApplicationFirewallCustomRule')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(Mandatory, HelpMessage="Type of Actions.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Allow", "Block", "Log", "JSChallenge")]
        [string]
        $Action,
        [Parameter(HelpMessage="List of user session identifier group by clauses.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IGroupByUserSession[]]
        [Alias("CustomRule")]
        $GroupByUserSession,
        [Parameter(Mandatory, HelpMessage="List of match conditions.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IMatchCondition[]]
        $MatchCondition,
        [Parameter(HelpMessage="The name of the resource that is unique within a policy. This name can be used to access the resource.")]
        [string]
        $Name,
        [Parameter(Mandatory, HelpMessage="Priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.")]
        [int]
        [ValidateRange(0, [int]::MaxValue)]
        $Priority = 0,
        [Parameter(HelpMessage="Duration over which Rate Limit policy will be applied. Applies only when ruleType is RateLimitRule.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("OneMin", "FiveMins")]
        [string]
        [Alias("RateLimitDurationInMinutes")]
        $RateLimitDuration = "OneMin",
        [Parameter(HelpMessage="Rate Limit threshold to apply in case ruleType is RateLimitRule. Must be greater than or equal to 1.")]
        [int]
        $RateLimitThreshold,
        [Parameter(Mandatory, HelpMessage="The rule type.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("MatchRule", "RateLimitRule", "Invalid")]
        [string]
        $RuleType,
        [Parameter(HelpMessage="Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Disabled", "Enabled")]
        [string]
        [Alias("EnabledState")]
        $State = "Enabled"
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.WebApplicationFirewallCustomRule]::New()

        if ($PSBoundParameters.ContainsKey('Action')) {
            $Object.Action = $Action
        }
        if ($PSBoundParameters.ContainsKey('GroupByUserSession')) {
            $Object.GroupByUserSession = $GroupByUserSession
        }
        if ($PSBoundParameters.ContainsKey('MatchCondition')) {
            $Object.MatchCondition = $MatchCondition
        }
        if ($PSBoundParameters.ContainsKey('Name')) {
            $Object.Name = $Name
        }
        if ($PSBoundParameters.ContainsKey('Priority')) {
            $Object.Priority = $Priority
        }
        if ($PSBoundParameters.ContainsKey('RateLimitDuration')) {
            $Object.RateLimitDuration = $RateLimitDuration 
        }
        if ($PSBoundParameters.ContainsKey('RateLimitThreshold')) {
            $Object.RateLimitThreshold = $RateLimitThreshold
        } 
        if ($PSBoundParameters.ContainsKey('RuleType')) {
            $Object.RuleType = $RuleType
        }
        if ($PSBoundParameters.ContainsKey('State')) {
            $Object.State = $State
        } 
        return $Object
    }
}

