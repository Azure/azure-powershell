
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for RouteConfiguration.
.Description
Create an in-memory object for RouteConfiguration.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.RouteConfiguration
.Link
https://learn.microsoft.com/powershell/module/Az.FrontDoor/new-azfrontdoorrouteconfigurationobject
#>
function New-AzFrontDoorRouteConfigurationObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.RouteConfiguration')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(Mandatory)]
        [string]
        $OdataType,

        [Parameter(HelpMessage="Resource ID.")]
        [string]
        $BackendPoolId,
        [Parameter(HelpMessage="The duration for which the content needs to be cached. Allowed format is in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations). HTTP requires the value to be no more than a year.")]
        [System.TimeSpan]
        $CacheConfigurationCacheDuration,
        [Parameter(HelpMessage="Whether to use dynamic compression for cached content.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        [string]
        $CacheConfigurationDynamicCompression,
        [Parameter(HelpMessage="query parameters to include or exclude (comma separated).")]
        [string]
        $CacheConfigurationQueryParameter,
        [Parameter(HelpMessage="Treatment of URL query terms when forming the cache key.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("StripNone", "StripAll", "StripOnly", "StripAllExcept")]
        [string]
        $CacheConfigurationQueryParameterStripDirective,
        [Parameter(HelpMessage="A custom path used to rewrite resource paths matched by this rule. Leave empty to use incoming path.")]
        [string]
        $CustomForwardingPath,
        [Parameter(HelpMessage="Protocol this rule will use when forwarding traffic to backends.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("HttpOnly", "HttpsOnly", "MatchRequest")]
        [string]
        $ForwardingProtocol,

        [Parameter(HelpMessage="Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.")]
        [string]
        $CustomFragment,
        [Parameter(HelpMessage="Host to redirect. Leave empty to use the incoming host as the destination host.")]
        [string]
        $CustomHost,
        [Parameter(HelpMessage="The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.")]
        [string]
        $CustomPath,
        [Parameter(HelpMessage="The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in <key>=<value> format. The first ? and & will be added automatically so do not include them in the front, but do separate multiple query strings with &.")]
        [string]
        $CustomQueryString,
        [Parameter(HelpMessage="The protocol of the destination to where the traffic is redirected.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("HttpOnly", "HttpsOnly", "MatchRequest")]
        [string]
        $RedirectProtocol,
        [Parameter(HelpMessage="The redirect type the rule will use when redirecting traffic.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Moved", "Found", "TemporaryRedirect", "PermanentRedirect")]
        [string]
        $RedirectType
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.RouteConfiguration]::New()

        if ($PSBoundParameters.ContainsKey('OdataType')) {
            $Object.OdataType = $OdataType
        }

        if ($PSBoundParameters.ContainsKey('BackendPoolId')) {
            $Object.BackendPoolId = $BackendPoolId
        }
        if ($PSBoundParameters.ContainsKey('CacheConfigurationCacheDuration')) {
            $Object.CacheConfigurationCacheDuration = $CacheConfigurationCacheDuration
        }
        if ($PSBoundParameters.ContainsKey('CacheConfigurationDynamicCompression')) {
            $Object.CacheConfigurationDynamicCompression = $CacheConfigurationDynamicCompression
        }
        if ($PSBoundParameters.ContainsKey('CacheConfigurationQueryParameter')) {
            $Object.CacheConfigurationQueryParameter = $CacheConfigurationQueryParameter
        }
        if ($PSBoundParameters.ContainsKey('CacheConfigurationQueryParameterStripDirective')) {
            $Object.CacheConfigurationQueryParameterStripDirective = $CacheConfigurationQueryParameterStripDirective
        }
        if ($PSBoundParameters.ContainsKey('CustomForwardingPath')) {
            $Object.CustomForwardingPath = $CustomForwardingPath
        }
        if ($PSBoundParameters.ContainsKey('ForwardingProtocol')) {
            $Object.ForwardingProtocol = $ForwardingProtocol
        }

        if ($PSBoundParameters.ContainsKey('CustomFragment')) {
            $Object.CustomFragment = $CustomFragment
        }
        if ($PSBoundParameters.ContainsKey('CustomHost')) {
            $Object.CustomHost = $CustomHost
        }
        if ($PSBoundParameters.ContainsKey('CustomPath')) {
            $Object.CustomPath = $CustomPath
        }
        if ($PSBoundParameters.ContainsKey('CustomQueryString')) {
            $Object.CustomQueryString = $CustomQueryString
        }
        if ($PSBoundParameters.ContainsKey('RedirectProtocol')) {
            $Object.RedirectProtocol = $RedirectProtocol
        }
        if ($PSBoundParameters.ContainsKey('RedirectType')) {
            $Object.RedirectType = $RedirectType
        }
        return $Object
    }
}

