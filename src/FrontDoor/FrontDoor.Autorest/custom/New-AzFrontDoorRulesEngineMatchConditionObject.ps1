
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for RulesEngineMatchCondition.
.Description
Create an in-memory object for RulesEngineMatchCondition.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.RulesEngineMatchCondition
.Link
https://learn.microsoft.com/powershell/module/Az.FrontDoor/new-azfrontdoorrulesenginematchconditionobject
#>
function New-AzFrontDoorRulesEngineMatchConditionObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.RulesEngineMatchCondition')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="Describes if this is negate condition or not.")]
        [bool]
        $NegateCondition,
        [Parameter(Mandatory, HelpMessage="Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.")]
        [string[]]
        $RulesEngineMatchValue,
        [Parameter(Mandatory, HelpMessage="Match Variable.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("IsMobile", "RemoteAddr", "RequestMethod", "QueryString", "PostArgs", "RequestUri", "RequestPath", "RequestFilename", "RequestFilenameExtension", "RequestHeader", "RequestBody", "RequestScheme")]
        [string]
        $RulesEngineMatchVariable,
        [Parameter(Mandatory, HelpMessage="Describes operator to apply to the match condition.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Any", "IPMatch", "GeoMatch", "Equal", "Contains", "LessThan", "GreaterThan", "LessThanOrEqual", "GreaterThanOrEqual", "BeginsWith", "EndsWith")]
        [string]
        $RulesEngineOperator,
        [Parameter(HelpMessage="Name of selector in RequestHeader or RequestBody to be matched.")]
        [string]
        $Selector,
        [Parameter(HelpMessage="List of transforms.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Lowercase", "Uppercase", "Trim", "UrlDecode", "UrlEncode", "RemoveNulls")]
        [string[]]
        $Transform
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.RulesEngineMatchCondition]::New()

        if ($PSBoundParameters.ContainsKey('NegateCondition')) {
            $Object.NegateCondition = $NegateCondition
        } else {
            $Object.NegateCondition = $false
        }
        if ($PSBoundParameters.ContainsKey('RulesEngineMatchValue')) {
            $Object.RulesEngineMatchValue = $RulesEngineMatchValue
        }
        if ($PSBoundParameters.ContainsKey('RulesEngineMatchVariable')) {
            $Object.RulesEngineMatchVariable = $RulesEngineMatchVariable
        }
        if ($PSBoundParameters.ContainsKey('RulesEngineOperator')) {
            $Object.RulesEngineOperator = $RulesEngineOperator
        } else {
            $Object.RulesEngineOperator = "Any"
        }
        if ($PSBoundParameters.ContainsKey('Selector')) {
            $Object.Selector = $Selector
        }
        if ($PSBoundParameters.ContainsKey('Transform')) {
            $Object.Transform = $Transform
        }
        return $Object
    }
}

