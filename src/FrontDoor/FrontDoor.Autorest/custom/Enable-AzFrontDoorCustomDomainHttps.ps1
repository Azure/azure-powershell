
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Enables a frontendEndpoint for HTTPS traffic
.Description
Enables a frontendEndpoint for HTTPS traffic
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfiguration
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontDoorIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

CUSTOMHTTPSCONFIGURATION <ICustomHttpsConfiguration>: Https settings for a domain
  CertificateSource <String>: Defines the source of the SSL certificate
  MinimumTlsVersion <String>: The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
  [FrontDoorCertificateSourceParameterCertificateType <String>]: Defines the type of the certificate used for secure connections to a frontendEndpoint
  [KeyVaultCertificateSourceParameterSecretName <String>]: The name of the Key Vault secret representing the full certificate PFX
  [KeyVaultCertificateSourceParameterSecretVersion <String>]: The version of the Key Vault secret representing the full certificate PFX
  [VaultId <String>]: Resource ID.

FRONTDOORINPUTOBJECT <IFrontDoorIdentity>: Identity Parameter
  [FrontDoorName <String>]: Name of the Front Door which is globally unique.
  [FrontendEndpointName <String>]: Name of the Frontend endpoint which is unique within the Front Door.
  [Id <String>]: Resource identity path
  [PolicyName <String>]: The name of the Web Application Firewall Policy.
  [ResourceGroupName <String>]: Name of the Resource group within the Azure subscription.
  [RulesEngineName <String>]: Name of the Rules Engine which is unique within the Front Door.
  [SubscriptionId <String>]: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.

INPUTOBJECT <IFrontDoorIdentity>: Identity Parameter
  [FrontDoorName <String>]: Name of the Front Door which is globally unique.
  [FrontendEndpointName <String>]: Name of the Frontend endpoint which is unique within the Front Door.
  [Id <String>]: Resource identity path
  [PolicyName <String>]: The name of the Web Application Firewall Policy.
  [ResourceGroupName <String>]: Name of the Resource group within the Azure subscription.
  [RulesEngineName <String>]: Name of the Rules Engine which is unique within the Front Door.
  [SubscriptionId <String>]: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
.Link
https://learn.microsoft.com/powershell/module/az.frontdoor/enable-azfrontdoorcustomdomainhttps
#>
function Enable-AzFrontDoorCustomDomainHttps {
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.ModelCmdletAttribute()]
    [OutputType([System.Boolean])]
    [CmdletBinding(DefaultParameterSetName='EnableExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
    param(
        [Parameter(ParameterSetName='Enable', Mandatory)]
        [Parameter(ParameterSetName='EnableExpanded', Mandatory)]
        [Parameter(ParameterSetName='EnableViaJsonFilePath', Mandatory)]
        [Parameter(ParameterSetName='EnableViaJsonString', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Path')]
        [System.String]
        # Name of the Front Door which is globally unique.
        ${FrontDoorName},
    
        [Parameter(ParameterSetName='Enable', Mandatory)]
        [Parameter(ParameterSetName='EnableExpanded', Mandatory)]
        [Parameter(ParameterSetName='EnableViaIdentityFrontDoor', Mandatory)]
        [Parameter(ParameterSetName='EnableViaIdentityFrontDoorExpanded', Mandatory)]
        [Parameter(ParameterSetName='EnableViaJsonFilePath', Mandatory)]
        [Parameter(ParameterSetName='EnableViaJsonString', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Path')]
        [System.String]
        # Name of the Frontend endpoint which is unique within the Front Door.
        ${FrontendEndpointName},
    
        [Parameter(ParameterSetName='Enable', Mandatory)]
        [Parameter(ParameterSetName='EnableExpanded', Mandatory)]
        [Parameter(ParameterSetName='EnableViaJsonFilePath', Mandatory)]
        [Parameter(ParameterSetName='EnableViaJsonString', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Path')]
        [System.String]
        # Name of the Resource group within the Azure subscription.
        ${ResourceGroupName},
    
        [Parameter(ParameterSetName='Enable')]
        [Parameter(ParameterSetName='EnableExpanded')]
        [Parameter(ParameterSetName='EnableViaJsonFilePath')]
        [Parameter(ParameterSetName='EnableViaJsonString')]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
        [System.String]
        # The subscription credentials which uniquely identify the Microsoft Azure subscription.
        # The subscription ID forms part of the URI for every service call.
        ${SubscriptionId},
    
        [Parameter(ParameterSetName='EnableViaIdentity', Mandatory, ValueFromPipeline)]
        [Parameter(ParameterSetName='EnableViaIdentityExpanded', Mandatory, ValueFromPipeline)]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontDoorIdentity]
        # Identity Parameter
        ${InputObject},
    
        [Parameter(ParameterSetName='EnableViaIdentityFrontDoor', Mandatory, ValueFromPipeline)]
        [Parameter(ParameterSetName='EnableViaIdentityFrontDoorExpanded', Mandatory, ValueFromPipeline)]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontDoorIdentity]
        # Identity Parameter
        ${FrontDoorInputObject},
    
        [Parameter(ParameterSetName='EnableExpanded')]
        [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
        [Parameter(ParameterSetName='EnableViaIdentityFrontDoorExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("1.0", "1.2")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.DefaultInfo(Script='1.2')]
        [System.String]
        # The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
        ${MinimumTlsVersion},
    
        [Parameter(ParameterSetName='EnableExpanded')]
        [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
        [Parameter(ParameterSetName='EnableViaIdentityFrontDoorExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
        [System.String]
        # The name of the Key Vault secret representing the full certificate PFX
        ${SecretName},
    
        [Parameter(ParameterSetName='EnableExpanded')]
        [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
        [Parameter(ParameterSetName='EnableViaIdentityFrontDoorExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
        [System.String]
        # The version of the Key Vault secret representing the full certificate PFX
        ${SecretVersion},
    
        [Parameter(ParameterSetName='EnableExpanded')]
        [Parameter(ParameterSetName='EnableViaIdentityExpanded')]
        [Parameter(ParameterSetName='EnableViaIdentityFrontDoorExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
        [System.String]
        # Resource ID.
        ${VaultId},
    
        [Parameter(ParameterSetName='EnableViaJsonFilePath', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
        [System.String]
        # Path of Json file supplied to the Enable operation
        ${JsonFilePath},
    
        [Parameter(ParameterSetName='EnableViaJsonString', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
        [System.String]
        # Json string supplied to the Enable operation
        ${JsonString},
    
        [Parameter()]
        [Alias('AzureRMContext', 'AzureCredential')]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Azure')]
        [System.Management.Automation.PSObject]
        # The DefaultProfile parameter is not functional.
        # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
        ${DefaultProfile},
    
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command as a job
        ${AsJob},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Wait for .NET debugger to attach
        ${Break},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be appended to the front of the pipeline
        ${HttpPipelineAppend},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be prepended to the front of the pipeline
        ${HttpPipelinePrepend},
    
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command asynchronously
        ${NoWait},
    
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Returns true when the command succeeds
        ${PassThru},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Runtime')]
        [System.Uri]
        # The URI for the proxy server to use
        ${Proxy},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Runtime')]
        [System.Management.Automation.PSCredential]
        # Credentials for a proxy server to use for the remote call
        ${ProxyCredential},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Use the default credentials for the proxy
        ${ProxyUseDefaultCredentials}
    )
    
    process {
      if ($PSBoundParameters.ContainsKey('VaultId')) {
        $PSBoundParameters.CertificateSource = 'AzureKeyVault'
      } else {
        $PSBoundParameters.CertificateSource = 'FrontDoor'
        $PSBoundParameters.CertificateType = "Dedicated"
      }

      Az.FrontDoor.internal\Enable-AzFrontDoorCustomDomainHttps @PSBoundParameters
    }
}
    