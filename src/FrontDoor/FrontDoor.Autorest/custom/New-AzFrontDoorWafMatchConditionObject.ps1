
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for MatchCondition.
.Description
Create an in-memory object for MatchCondition.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.MatchCondition
.Link
https://learn.microsoft.com/powershell/module/Az.FrontDoor/new-azfrontdoorwafmatchconditionobject
#>
function New-AzFrontDoorWafMatchConditionObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.MatchCondition')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(Mandatory, HelpMessage="List of possible match values.")]
        [string[]]
        $MatchValue,
        [Parameter(Mandatory, HelpMessage="Request variable to compare with.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("RemoteAddr", "RequestMethod", "QueryString", "PostArgs", "RequestUri", "RequestHeader", "RequestBody", "Cookies", "SocketAddr")]
        [string]
        $MatchVariable,
        [Parameter(HelpMessage="Describes if the result of this condition should be negated.")]
        [bool]
        $NegateCondition,
        [Parameter(Mandatory, HelpMessage="Comparison type to use for matching with the variable value.")]
        [Alias("OperatorProperty" )]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Any", "IPMatch", "GeoMatch", "Equal", "Contains", "LessThan", "GreaterThan", "LessThanOrEqual", "GreaterThanOrEqual", "BeginsWith", "EndsWith", "RegEx")]
        [string]
        $Operator,
        [Parameter(HelpMessage="Match against a specific key from the QueryString, PostArgs, RequestHeader or Cookies variables. Default is null.")]
        [string]
        $Selector,
        [Parameter(HelpMessage="List of transforms.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Lowercase", "Uppercase", "Trim", "UrlDecode", "UrlEncode", "RemoveNulls")]
        [string[]]
        $Transform
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.MatchCondition]::New()

        if ($PSBoundParameters.ContainsKey('MatchValue')) {
            $Object.MatchValue = $MatchValue
        }
        if ($PSBoundParameters.ContainsKey('MatchVariable')) {
            $Object.MatchVariable = $MatchVariable
        }
        if ($PSBoundParameters.ContainsKey('NegateCondition')) {
            $Object.NegateCondition = $NegateCondition
        }
        if ($PSBoundParameters.ContainsKey('Operator')) {
            $Object.Operator = $Operator
        }
        if ($PSBoundParameters.ContainsKey('Selector')) {
            $Object.Selector = $Selector
        }
        if ($PSBoundParameters.ContainsKey('Transform')) {
            $Object.Transform = $Transform
        }
        return $Object
    }
}

