
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for Backend.
.Description
Create an in-memory object for Backend.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.Backend
.Link
https://learn.microsoft.com/powershell/module/Az.FrontDoor/new-azfrontdoorfrontendbackendobject
#>
function New-AzFrontDoorFrontendBackendObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.Backend')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(
        [Parameter(HelpMessage="Location of the backend (IP address or FQDN).")]
        [string]
        $Address,
        [Parameter(HelpMessage="The value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.")]
        [string]
        $BackendHostHeader,
        [Parameter(HelpMessage="Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'.")]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        [string]
        $EnabledState,
        [Parameter(HelpMessage="The HTTP TCP port number. Must be between 1 and 65535.")]
        [int]
        $HttpPort,
        [Parameter(HelpMessage="The HTTPS TCP port number. Must be between 1 and 65535.")]
        [int]
        $HttpsPort,
        [Parameter(HelpMessage="Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.")]
        [int]
        $Priority,
        [Parameter(HelpMessage="The Alias of the Private Link resource. Populating this optional field indicates that this backend is 'Private'.")]
        [string]
        $PrivateLinkAlias,
        [Parameter(HelpMessage="A custom message to be included in the approval request to connect to the Private Link.")]
        [string]
        $PrivateLinkApprovalMessage,
        [Parameter(HelpMessage="The location of the Private Link resource. Required only if 'privateLinkResourceId' is populated.")]
        [string]
        $PrivateLinkLocation,
        [Parameter(HelpMessage="The Resource Id of the Private Link resource. Populating this optional field indicates that this backend is 'Private'.")]
        [string]
        $PrivateLinkResourceId,
        [Parameter(HelpMessage="Weight of this endpoint for load balancing purposes.")]
        [int]
        $Weight
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.Backend]::New()

        if ($PSBoundParameters.ContainsKey('Address')) {
            $Object.Address = $Address
        }
        if ($PSBoundParameters.ContainsKey('BackendHostHeader')) {
            $Object.HostHeader = $BackendHostHeader
        } else {
            $Object.HostHeader = $Address
        }
        if ($PSBoundParameters.ContainsKey('EnabledState')) {
            $Object.EnabledState = $EnabledState
        } else {
            $Object.EnabledState = 'Enabled'
        }
        if ($PSBoundParameters.ContainsKey('HttpPort')) {
            $Object.HttpPort = $HttpPort
        } else {
            $Object.HttpPort = 80
        }
        if ($PSBoundParameters.ContainsKey('HttpsPort')) {
            $Object.HttpsPort = $HttpsPort
        } else {
            $Object.HttpsPort = 443
        }
        if ($PSBoundParameters.ContainsKey('Priority')) {
            $Object.Priority = $Priority
        } else {
            $Object.Priority = 1
        }
        if ($PSBoundParameters.ContainsKey('PrivateLinkAlias')) {
            $Object.PrivateLinkAlias = $PrivateLinkAlias
        }
        if ($PSBoundParameters.ContainsKey('PrivateLinkApprovalMessage')) {
            $Object.PrivateLinkApprovalMessage = $PrivateLinkApprovalMessage
        }
        if ($PSBoundParameters.ContainsKey('PrivateLinkLocation')) {
            $Object.PrivateLinkLocation = $PrivateLinkLocation
        }
        if ($PSBoundParameters.ContainsKey('PrivateLinkResourceId')) {
            $Object.PrivateLinkResourceId = $PrivateLinkResourceId
        }
        if ($PSBoundParameters.ContainsKey('Weight')) {
            $Object.Weight = $Weight
        } else {
            50
        }
        return $Object
    }
}

