
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for Backend.
.Description
Create an in-memory object for Backend.
.Example
New-AzFrontDoorBackendObject -Address "contoso1.azurewebsites.net"

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.Backend
.Link
https://learn.microsoft.com/powershell/module/Az.FrontDoor/new-azfrontdoorfrontendbackendobject
#>
function New-AzFrontDoorBackendObject {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.Backend])]
[CmdletBinding(PositionalBinding=$false)]
param(
    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.String]
    # Location of the backend (IP address or FQDN).
    ${Address},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.String]
    # The value to use as the host header sent to the backend.
    # If blank or unspecified, this defaults to the incoming host.
    ${BackendHostHeader},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Enabled", "Disabled")]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.String]
    # Whether to enable use of this backend.
    # Permitted values are 'Enabled' or 'Disabled'.
    ${EnabledState},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.Int32]
    # The HTTP TCP port number.
    # Must be between 1 and 65535.
    ${HttpPort},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.Int32]
    # The HTTPS TCP port number.
    # Must be between 1 and 65535.
    ${HttpsPort},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.Int32]
    # Priority to use for load balancing.
    # Higher priorities will not be used for load balancing if any lower priority backend is healthy.
    ${Priority},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.String]
    # The Alias of the Private Link resource.
    # Populating this optional field indicates that this backend is 'Private'.
    ${PrivateLinkAlias},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.String]
    # A custom message to be included in the approval request to connect to the Private Link.
    ${PrivateLinkApprovalMessage},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.String]
    # The location of the Private Link resource.
    # Required only if 'privateLinkResourceId' is populated.
    ${PrivateLinkLocation},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.String]
    # The Resource Id of the Private Link resource.
    # Populating this optional field indicates that this backend is 'Private'.
    ${PrivateLinkResourceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Category('Body')]
    [System.Int32]
    # Weight of this endpoint for load balancing purposes.
    ${Weight}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        
        $testPlayback = $false
        $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            __AllParameterSets = 'Az.FrontDoor.custom\New-AzFrontDoorBackendObject';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        if ($wrappedCmd -eq $null) {
            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Function)
        }
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
