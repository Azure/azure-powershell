// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Logic
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for IntegrationAccountPartnersOperations
    /// </summary>
    public static partial class IntegrationAccountPartnersOperationsExtensions
    {
        /// <summary>
        /// Gets a list of integration account partners.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IntegrationAccountPartner> List(this IIntegrationAccountPartnersOperations operations, string resourceGroupName, string integrationAccountName, Microsoft.Rest.Azure.OData.ODataQuery<IntegrationAccountPartnerFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<IntegrationAccountPartnerFilter>))
        {
                return ((IIntegrationAccountPartnersOperations)operations).ListAsync(resourceGroupName, integrationAccountName, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a list of integration account partners.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IntegrationAccountPartner>> ListAsync(this IIntegrationAccountPartnersOperations operations, string resourceGroupName, string integrationAccountName, Microsoft.Rest.Azure.OData.ODataQuery<IntegrationAccountPartnerFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<IntegrationAccountPartnerFilter>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, integrationAccountName, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets an integration account partner.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='partnerName'>
        /// The integration account partner name.
        /// </param>
        public static IntegrationAccountPartner Get(this IIntegrationAccountPartnersOperations operations, string resourceGroupName, string integrationAccountName, string partnerName)
        {
                return ((IIntegrationAccountPartnersOperations)operations).GetAsync(resourceGroupName, integrationAccountName, partnerName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets an integration account partner.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='partnerName'>
        /// The integration account partner name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IntegrationAccountPartner> GetAsync(this IIntegrationAccountPartnersOperations operations, string resourceGroupName, string integrationAccountName, string partnerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, integrationAccountName, partnerName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates an integration account partner.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='partnerName'>
        /// The integration account partner name.
        /// </param>
        public static IntegrationAccountPartner CreateOrUpdate(this IIntegrationAccountPartnersOperations operations, string resourceGroupName, string integrationAccountName, string partnerName, IntegrationAccountPartner partner)
        {
                return ((IIntegrationAccountPartnersOperations)operations).CreateOrUpdateAsync(resourceGroupName, integrationAccountName, partnerName, partner).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates an integration account partner.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='partnerName'>
        /// The integration account partner name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IntegrationAccountPartner> CreateOrUpdateAsync(this IIntegrationAccountPartnersOperations operations, string resourceGroupName, string integrationAccountName, string partnerName, IntegrationAccountPartner partner, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, integrationAccountName, partnerName, partner, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an integration account partner.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='partnerName'>
        /// The integration account partner name.
        /// </param>
        public static void Delete(this IIntegrationAccountPartnersOperations operations, string resourceGroupName, string integrationAccountName, string partnerName)
        {
                ((IIntegrationAccountPartnersOperations)operations).DeleteAsync(resourceGroupName, integrationAccountName, partnerName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an integration account partner.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='partnerName'>
        /// The integration account partner name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IIntegrationAccountPartnersOperations operations, string resourceGroupName, string integrationAccountName, string partnerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, integrationAccountName, partnerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Get the content callback url.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='partnerName'>
        /// The integration account partner name.
        /// </param>
        public static WorkflowTriggerCallbackUrl ListContentCallbackUrl(this IIntegrationAccountPartnersOperations operations, string resourceGroupName, string integrationAccountName, string partnerName, GetCallbackUrlParameters listContentCallbackUrl)
        {
                return ((IIntegrationAccountPartnersOperations)operations).ListContentCallbackUrlAsync(resourceGroupName, integrationAccountName, partnerName, listContentCallbackUrl).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the content callback url.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='partnerName'>
        /// The integration account partner name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkflowTriggerCallbackUrl> ListContentCallbackUrlAsync(this IIntegrationAccountPartnersOperations operations, string resourceGroupName, string integrationAccountName, string partnerName, GetCallbackUrlParameters listContentCallbackUrl, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListContentCallbackUrlWithHttpMessagesAsync(resourceGroupName, integrationAccountName, partnerName, listContentCallbackUrl, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a list of integration account partners.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IntegrationAccountPartner> ListNext(this IIntegrationAccountPartnersOperations operations, string nextPageLink)
        {
                return ((IIntegrationAccountPartnersOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a list of integration account partners.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IntegrationAccountPartner>> ListNextAsync(this IIntegrationAccountPartnersOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
