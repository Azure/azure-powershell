// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Logic
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for IntegrationAccountAssembliesOperations
    /// </summary>
    public static partial class IntegrationAccountAssembliesOperationsExtensions
    {
        /// <summary>
        /// List the assemblies for an integration account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        public static System.Collections.Generic.IEnumerable<AssemblyDefinition> List(this IIntegrationAccountAssembliesOperations operations, string resourceGroupName, string integrationAccountName)
        {
                return ((IIntegrationAccountAssembliesOperations)operations).ListAsync(resourceGroupName, integrationAccountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List the assemblies for an integration account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<AssemblyDefinition>> ListAsync(this IIntegrationAccountAssembliesOperations operations, string resourceGroupName, string integrationAccountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, integrationAccountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get an assembly for an integration account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='assemblyArtifactName'>
        /// The assembly artifact name.
        /// </param>
        public static AssemblyDefinition Get(this IIntegrationAccountAssembliesOperations operations, string resourceGroupName, string integrationAccountName, string assemblyArtifactName)
        {
                return ((IIntegrationAccountAssembliesOperations)operations).GetAsync(resourceGroupName, integrationAccountName, assemblyArtifactName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an assembly for an integration account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='assemblyArtifactName'>
        /// The assembly artifact name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AssemblyDefinition> GetAsync(this IIntegrationAccountAssembliesOperations operations, string resourceGroupName, string integrationAccountName, string assemblyArtifactName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, integrationAccountName, assemblyArtifactName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update an assembly for an integration account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='assemblyArtifactName'>
        /// The assembly artifact name.
        /// </param>
        public static AssemblyDefinition CreateOrUpdate(this IIntegrationAccountAssembliesOperations operations, string resourceGroupName, string integrationAccountName, string assemblyArtifactName, AssemblyDefinition assemblyArtifact)
        {
                return ((IIntegrationAccountAssembliesOperations)operations).CreateOrUpdateAsync(resourceGroupName, integrationAccountName, assemblyArtifactName, assemblyArtifact).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update an assembly for an integration account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='assemblyArtifactName'>
        /// The assembly artifact name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AssemblyDefinition> CreateOrUpdateAsync(this IIntegrationAccountAssembliesOperations operations, string resourceGroupName, string integrationAccountName, string assemblyArtifactName, AssemblyDefinition assemblyArtifact, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, integrationAccountName, assemblyArtifactName, assemblyArtifact, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete an assembly for an integration account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='assemblyArtifactName'>
        /// The assembly artifact name.
        /// </param>
        public static void Delete(this IIntegrationAccountAssembliesOperations operations, string resourceGroupName, string integrationAccountName, string assemblyArtifactName)
        {
                ((IIntegrationAccountAssembliesOperations)operations).DeleteAsync(resourceGroupName, integrationAccountName, assemblyArtifactName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete an assembly for an integration account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='assemblyArtifactName'>
        /// The assembly artifact name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IIntegrationAccountAssembliesOperations operations, string resourceGroupName, string integrationAccountName, string assemblyArtifactName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, integrationAccountName, assemblyArtifactName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Get the content callback url for an integration account assembly.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='assemblyArtifactName'>
        /// The assembly artifact name.
        /// </param>
        public static WorkflowTriggerCallbackUrl ListContentCallbackUrl(this IIntegrationAccountAssembliesOperations operations, string resourceGroupName, string integrationAccountName, string assemblyArtifactName)
        {
                return ((IIntegrationAccountAssembliesOperations)operations).ListContentCallbackUrlAsync(resourceGroupName, integrationAccountName, assemblyArtifactName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the content callback url for an integration account assembly.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='assemblyArtifactName'>
        /// The assembly artifact name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkflowTriggerCallbackUrl> ListContentCallbackUrlAsync(this IIntegrationAccountAssembliesOperations operations, string resourceGroupName, string integrationAccountName, string assemblyArtifactName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListContentCallbackUrlWithHttpMessagesAsync(resourceGroupName, integrationAccountName, assemblyArtifactName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
