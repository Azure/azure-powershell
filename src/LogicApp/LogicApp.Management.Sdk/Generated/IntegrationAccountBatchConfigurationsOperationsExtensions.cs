// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Logic
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for IntegrationAccountBatchConfigurationsOperations
    /// </summary>
    public static partial class IntegrationAccountBatchConfigurationsOperationsExtensions
    {
        /// <summary>
        /// List the batch configurations for an integration account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        public static System.Collections.Generic.IEnumerable<BatchConfiguration> List(this IIntegrationAccountBatchConfigurationsOperations operations, string resourceGroupName, string integrationAccountName)
        {
                return ((IIntegrationAccountBatchConfigurationsOperations)operations).ListAsync(resourceGroupName, integrationAccountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List the batch configurations for an integration account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<BatchConfiguration>> ListAsync(this IIntegrationAccountBatchConfigurationsOperations operations, string resourceGroupName, string integrationAccountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, integrationAccountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a batch configuration for an integration account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='batchConfigurationName'>
        /// The batch configuration name.
        /// </param>
        public static BatchConfiguration Get(this IIntegrationAccountBatchConfigurationsOperations operations, string resourceGroupName, string integrationAccountName, string batchConfigurationName)
        {
                return ((IIntegrationAccountBatchConfigurationsOperations)operations).GetAsync(resourceGroupName, integrationAccountName, batchConfigurationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a batch configuration for an integration account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='batchConfigurationName'>
        /// The batch configuration name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BatchConfiguration> GetAsync(this IIntegrationAccountBatchConfigurationsOperations operations, string resourceGroupName, string integrationAccountName, string batchConfigurationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, integrationAccountName, batchConfigurationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update a batch configuration for an integration account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='batchConfigurationName'>
        /// The batch configuration name.
        /// </param>
        public static BatchConfiguration CreateOrUpdate(this IIntegrationAccountBatchConfigurationsOperations operations, string resourceGroupName, string integrationAccountName, string batchConfigurationName, BatchConfiguration batchConfiguration)
        {
                return ((IIntegrationAccountBatchConfigurationsOperations)operations).CreateOrUpdateAsync(resourceGroupName, integrationAccountName, batchConfigurationName, batchConfiguration).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a batch configuration for an integration account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='batchConfigurationName'>
        /// The batch configuration name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BatchConfiguration> CreateOrUpdateAsync(this IIntegrationAccountBatchConfigurationsOperations operations, string resourceGroupName, string integrationAccountName, string batchConfigurationName, BatchConfiguration batchConfiguration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, integrationAccountName, batchConfigurationName, batchConfiguration, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a batch configuration for an integration account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='batchConfigurationName'>
        /// The batch configuration name.
        /// </param>
        public static void Delete(this IIntegrationAccountBatchConfigurationsOperations operations, string resourceGroupName, string integrationAccountName, string batchConfigurationName)
        {
                ((IIntegrationAccountBatchConfigurationsOperations)operations).DeleteAsync(resourceGroupName, integrationAccountName, batchConfigurationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a batch configuration for an integration account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='integrationAccountName'>
        /// The integration account name.
        /// </param>
        /// <param name='batchConfigurationName'>
        /// The batch configuration name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IIntegrationAccountBatchConfigurationsOperations operations, string resourceGroupName, string integrationAccountName, string batchConfigurationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, integrationAccountName, batchConfigurationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
    }
}
