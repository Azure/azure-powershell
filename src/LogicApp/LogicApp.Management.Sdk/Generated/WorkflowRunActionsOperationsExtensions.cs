// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Logic
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for WorkflowRunActionsOperations
    /// </summary>
    public static partial class WorkflowRunActionsOperationsExtensions
    {
        /// <summary>
        /// Gets a list of workflow run actions.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='runName'>
        /// The workflow run name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WorkflowRunAction> List(this IWorkflowRunActionsOperations operations, string resourceGroupName, string workflowName, string runName, Microsoft.Rest.Azure.OData.ODataQuery<WorkflowRunActionFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<WorkflowRunActionFilter>))
        {
                return ((IWorkflowRunActionsOperations)operations).ListAsync(resourceGroupName, workflowName, runName, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a list of workflow run actions.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='runName'>
        /// The workflow run name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WorkflowRunAction>> ListAsync(this IWorkflowRunActionsOperations operations, string resourceGroupName, string workflowName, string runName, Microsoft.Rest.Azure.OData.ODataQuery<WorkflowRunActionFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<WorkflowRunActionFilter>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, workflowName, runName, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a workflow run action.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='runName'>
        /// The workflow run name.
        /// </param>
        /// <param name='actionName'>
        /// The workflow action name.
        /// </param>
        public static WorkflowRunAction Get(this IWorkflowRunActionsOperations operations, string resourceGroupName, string workflowName, string runName, string actionName)
        {
                return ((IWorkflowRunActionsOperations)operations).GetAsync(resourceGroupName, workflowName, runName, actionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a workflow run action.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='runName'>
        /// The workflow run name.
        /// </param>
        /// <param name='actionName'>
        /// The workflow action name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkflowRunAction> GetAsync(this IWorkflowRunActionsOperations operations, string resourceGroupName, string workflowName, string runName, string actionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workflowName, runName, actionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists a workflow run expression trace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='runName'>
        /// The workflow run name.
        /// </param>
        /// <param name='actionName'>
        /// The workflow action name.
        /// </param>
        public static System.Collections.Generic.IEnumerable<ExpressionRoot> ListExpressionTraces(this IWorkflowRunActionsOperations operations, string resourceGroupName, string workflowName, string runName, string actionName)
        {
                return ((IWorkflowRunActionsOperations)operations).ListExpressionTracesAsync(resourceGroupName, workflowName, runName, actionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists a workflow run expression trace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='runName'>
        /// The workflow run name.
        /// </param>
        /// <param name='actionName'>
        /// The workflow action name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ExpressionRoot>> ListExpressionTracesAsync(this IWorkflowRunActionsOperations operations, string resourceGroupName, string workflowName, string runName, string actionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListExpressionTracesWithHttpMessagesAsync(resourceGroupName, workflowName, runName, actionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a list of workflow run actions.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WorkflowRunAction> ListNext(this IWorkflowRunActionsOperations operations, string nextPageLink)
        {
                return ((IWorkflowRunActionsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a list of workflow run actions.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WorkflowRunAction>> ListNextAsync(this IWorkflowRunActionsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
