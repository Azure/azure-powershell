// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Logic
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for WorkflowTriggersOperations
    /// </summary>
    public static partial class WorkflowTriggersOperationsExtensions
    {
        /// <summary>
        /// Gets a list of workflow triggers.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WorkflowTrigger> List(this IWorkflowTriggersOperations operations, string resourceGroupName, string workflowName, Microsoft.Rest.Azure.OData.ODataQuery<WorkflowTriggerFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<WorkflowTriggerFilter>))
        {
                return ((IWorkflowTriggersOperations)operations).ListAsync(resourceGroupName, workflowName, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a list of workflow triggers.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WorkflowTrigger>> ListAsync(this IWorkflowTriggersOperations operations, string resourceGroupName, string workflowName, Microsoft.Rest.Azure.OData.ODataQuery<WorkflowTriggerFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<WorkflowTriggerFilter>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, workflowName, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a workflow trigger.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='triggerName'>
        /// The workflow trigger name.
        /// </param>
        public static WorkflowTrigger Get(this IWorkflowTriggersOperations operations, string resourceGroupName, string workflowName, string triggerName)
        {
                return ((IWorkflowTriggersOperations)operations).GetAsync(resourceGroupName, workflowName, triggerName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a workflow trigger.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='triggerName'>
        /// The workflow trigger name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkflowTrigger> GetAsync(this IWorkflowTriggersOperations operations, string resourceGroupName, string workflowName, string triggerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workflowName, triggerName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Resets a workflow trigger.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='triggerName'>
        /// The workflow trigger name.
        /// </param>
        public static void Reset(this IWorkflowTriggersOperations operations, string resourceGroupName, string workflowName, string triggerName)
        {
                ((IWorkflowTriggersOperations)operations).ResetAsync(resourceGroupName, workflowName, triggerName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Resets a workflow trigger.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='triggerName'>
        /// The workflow trigger name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ResetAsync(this IWorkflowTriggersOperations operations, string resourceGroupName, string workflowName, string triggerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.ResetWithHttpMessagesAsync(resourceGroupName, workflowName, triggerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Runs a workflow trigger.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='triggerName'>
        /// The workflow trigger name.
        /// </param>
        public static void Run(this IWorkflowTriggersOperations operations, string resourceGroupName, string workflowName, string triggerName)
        {
                ((IWorkflowTriggersOperations)operations).RunAsync(resourceGroupName, workflowName, triggerName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Runs a workflow trigger.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='triggerName'>
        /// The workflow trigger name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RunAsync(this IWorkflowTriggersOperations operations, string resourceGroupName, string workflowName, string triggerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RunWithHttpMessagesAsync(resourceGroupName, workflowName, triggerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Get the trigger schema as JSON.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='triggerName'>
        /// The workflow trigger name.
        /// </param>
        public static JsonSchema GetSchemaJson(this IWorkflowTriggersOperations operations, string resourceGroupName, string workflowName, string triggerName)
        {
                return ((IWorkflowTriggersOperations)operations).GetSchemaJsonAsync(resourceGroupName, workflowName, triggerName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the trigger schema as JSON.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='triggerName'>
        /// The workflow trigger name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<JsonSchema> GetSchemaJsonAsync(this IWorkflowTriggersOperations operations, string resourceGroupName, string workflowName, string triggerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetSchemaJsonWithHttpMessagesAsync(resourceGroupName, workflowName, triggerName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Sets the state of a workflow trigger.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='triggerName'>
        /// The workflow trigger name.
        /// </param>
        public static void SetState(this IWorkflowTriggersOperations operations, string resourceGroupName, string workflowName, string triggerName, SetTriggerStateActionDefinition setState)
        {
                ((IWorkflowTriggersOperations)operations).SetStateAsync(resourceGroupName, workflowName, triggerName, setState).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Sets the state of a workflow trigger.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='triggerName'>
        /// The workflow trigger name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task SetStateAsync(this IWorkflowTriggersOperations operations, string resourceGroupName, string workflowName, string triggerName, SetTriggerStateActionDefinition setState, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.SetStateWithHttpMessagesAsync(resourceGroupName, workflowName, triggerName, setState, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Get the callback URL for a workflow trigger.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='triggerName'>
        /// The workflow trigger name.
        /// </param>
        public static WorkflowTriggerCallbackUrl ListCallbackUrl(this IWorkflowTriggersOperations operations, string resourceGroupName, string workflowName, string triggerName)
        {
                return ((IWorkflowTriggersOperations)operations).ListCallbackUrlAsync(resourceGroupName, workflowName, triggerName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the callback URL for a workflow trigger.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='triggerName'>
        /// The workflow trigger name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkflowTriggerCallbackUrl> ListCallbackUrlAsync(this IWorkflowTriggersOperations operations, string resourceGroupName, string workflowName, string triggerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListCallbackUrlWithHttpMessagesAsync(resourceGroupName, workflowName, triggerName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a list of workflow triggers.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WorkflowTrigger> ListNext(this IWorkflowTriggersOperations operations, string nextPageLink)
        {
                return ((IWorkflowTriggersOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a list of workflow triggers.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WorkflowTrigger>> ListNextAsync(this IWorkflowTriggersOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
