// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Logic.Models
{
    using System.Linq;

    public partial class TrackingEventsDefinition
    {
        /// <summary>
        /// Initializes a new instance of the TrackingEventsDefinition class.
        /// </summary>
        public TrackingEventsDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TrackingEventsDefinition class.
        /// </summary>

        /// <param name="sourceType">
        /// </param>

        /// <param name="trackEventsOptions">The track events operation options.
        /// Possible values include: &#39;None&#39;, &#39;DisableSourceInfoEnrich&#39;</param>

        /// <param name="events">
        /// </param>
        public TrackingEventsDefinition(string sourceType, System.Collections.Generic.IList<TrackingEvent> events, string trackEventsOptions = default(string))

        {
            this.SourceType = sourceType;
            this.TrackEventsOptions = trackEventsOptions;
            this.Events = events;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceType")]
        public string SourceType {get; set; }

        /// <summary>
        /// Gets or sets the track events operation options. Possible values include: &#39;None&#39;, &#39;DisableSourceInfoEnrich&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "trackEventsOptions")]
        public string TrackEventsOptions {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "events")]
        public System.Collections.Generic.IList<TrackingEvent> Events {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.SourceType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SourceType");
            }
            if (this.Events == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Events");
            }


            if (this.Events != null)
            {
                foreach (var element in this.Events)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}