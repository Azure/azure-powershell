// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Logic.Models
{
    using System.Linq;

    /// <summary>
    /// The integration account AS2 agreement content.
    /// </summary>
    public partial class AS2AgreementContent
    {
        /// <summary>
        /// Initializes a new instance of the AS2AgreementContent class.
        /// </summary>
        public AS2AgreementContent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AS2AgreementContent class.
        /// </summary>

        /// <param name="receiveAgreement">The AS2 one-way receive agreement.
        /// </param>

        /// <param name="sendAgreement">The AS2 one-way send agreement.
        /// </param>
        public AS2AgreementContent(AS2OneWayAgreement receiveAgreement, AS2OneWayAgreement sendAgreement)

        {
            this.ReceiveAgreement = receiveAgreement;
            this.SendAgreement = sendAgreement;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the AS2 one-way receive agreement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "receiveAgreement")]
        public AS2OneWayAgreement ReceiveAgreement {get; set; }

        /// <summary>
        /// Gets or sets the AS2 one-way send agreement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sendAgreement")]
        public AS2OneWayAgreement SendAgreement {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ReceiveAgreement == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ReceiveAgreement");
            }
            if (this.SendAgreement == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SendAgreement");
            }
            if (this.ReceiveAgreement != null)
            {
                this.ReceiveAgreement.Validate();
            }
            if (this.SendAgreement != null)
            {
                this.SendAgreement.Validate();
            }
        }
    }
}