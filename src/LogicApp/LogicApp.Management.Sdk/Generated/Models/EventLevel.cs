// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Logic.Models
{

    /// <summary>
    /// Defines values for EventLevel.
    /// </summary>


    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum EventLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = "LogAlways")]
        LogAlways,
        [System.Runtime.Serialization.EnumMember(Value = "Critical")]
        Critical,
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error,
        [System.Runtime.Serialization.EnumMember(Value = "Warning")]
        Warning,
        [System.Runtime.Serialization.EnumMember(Value = "Informational")]
        Informational,
        [System.Runtime.Serialization.EnumMember(Value = "Verbose")]
        Verbose
    }
    internal static class EventLevelEnumExtension
    {
        internal static string ToSerializedValue(this EventLevel? value)
        {
            return value == null ? null : ((EventLevel)value).ToSerializedValue();
        }
        internal static string ToSerializedValue(this EventLevel value)
        {
            switch( value )
            {
                case EventLevel.LogAlways:
                    return "LogAlways";
                case EventLevel.Critical:
                    return "Critical";
                case EventLevel.Error:
                    return "Error";
                case EventLevel.Warning:
                    return "Warning";
                case EventLevel.Informational:
                    return "Informational";
                case EventLevel.Verbose:
                    return "Verbose";
            }
            return null;
        }
        internal static EventLevel? ParseEventLevel(this string value)
        {
            switch( value )
            {
                case "LogAlways":
                    return EventLevel.LogAlways;
                case "Critical":
                    return EventLevel.Critical;
                case "Error":
                    return EventLevel.Error;
                case "Warning":
                    return EventLevel.Warning;
                case "Informational":
                    return EventLevel.Informational;
                case "Verbose":
                    return EventLevel.Verbose;
            }
            return null;
        }
    }
}