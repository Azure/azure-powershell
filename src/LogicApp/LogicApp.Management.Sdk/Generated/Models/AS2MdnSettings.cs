// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Logic.Models
{
    using System.Linq;

    /// <summary>
    /// The AS2 agreement mdn settings.
    /// </summary>
    public partial class AS2MdnSettings
    {
        /// <summary>
        /// Initializes a new instance of the AS2MdnSettings class.
        /// </summary>
        public AS2MdnSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AS2MdnSettings class.
        /// </summary>

        /// <param name="needMdn">The value indicating whether to send or request a MDN.
        /// </param>

        /// <param name="signMdn">The value indicating whether the MDN needs to be signed or not.
        /// </param>

        /// <param name="sendMdnAsynchronously">The value indicating whether to send the asynchronous MDN.
        /// </param>

        /// <param name="receiptDeliveryUrl">The receipt delivery URL.
        /// </param>

        /// <param name="dispositionNotificationTo">The disposition notification to header value.
        /// </param>

        /// <param name="signOutboundMdnIfOptional">The value indicating whether to sign the outbound MDN if optional.
        /// </param>

        /// <param name="mdnText">The MDN text.
        /// </param>

        /// <param name="sendInboundMdnToMessageBox">The value indicating whether to send inbound MDN to message box.
        /// </param>

        /// <param name="micHashingAlgorithm">The signing or hashing algorithm.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;None&#39;, &#39;MD5&#39;, &#39;SHA1&#39;, &#39;SHA2256&#39;,
        /// &#39;SHA2384&#39;, &#39;SHA2512&#39;</param>
        public AS2MdnSettings(bool needMdn, bool signMdn, bool sendMdnAsynchronously, bool signOutboundMdnIfOptional, bool sendInboundMdnToMessageBox, string micHashingAlgorithm, string receiptDeliveryUrl = default(string), string dispositionNotificationTo = default(string), string mdnText = default(string))

        {
            this.NeedMdn = needMdn;
            this.SignMdn = signMdn;
            this.SendMdnAsynchronously = sendMdnAsynchronously;
            this.ReceiptDeliveryUrl = receiptDeliveryUrl;
            this.DispositionNotificationTo = dispositionNotificationTo;
            this.SignOutboundMdnIfOptional = signOutboundMdnIfOptional;
            this.MdnText = mdnText;
            this.SendInboundMdnToMessageBox = sendInboundMdnToMessageBox;
            this.MicHashingAlgorithm = micHashingAlgorithm;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the value indicating whether to send or request a MDN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "needMDN")]
        public bool NeedMdn {get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether the MDN needs to be signed or
        /// not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "signMDN")]
        public bool SignMdn {get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to send the asynchronous MDN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sendMDNAsynchronously")]
        public bool SendMdnAsynchronously {get; set; }

        /// <summary>
        /// Gets or sets the receipt delivery URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "receiptDeliveryUrl")]
        public string ReceiptDeliveryUrl {get; set; }

        /// <summary>
        /// Gets or sets the disposition notification to header value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dispositionNotificationTo")]
        public string DispositionNotificationTo {get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to sign the outbound MDN if
        /// optional.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "signOutboundMDNIfOptional")]
        public bool SignOutboundMdnIfOptional {get; set; }

        /// <summary>
        /// Gets or sets the MDN text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mdnText")]
        public string MdnText {get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to send inbound MDN to message
        /// box.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sendInboundMDNToMessageBox")]
        public bool SendInboundMdnToMessageBox {get; set; }

        /// <summary>
        /// Gets or sets the signing or hashing algorithm. Possible values include: &#39;NotSpecified&#39;, &#39;None&#39;, &#39;MD5&#39;, &#39;SHA1&#39;, &#39;SHA2256&#39;, &#39;SHA2384&#39;, &#39;SHA2512&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "micHashingAlgorithm")]
        public string MicHashingAlgorithm {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.MicHashingAlgorithm == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MicHashingAlgorithm");
            }




        }
    }
}