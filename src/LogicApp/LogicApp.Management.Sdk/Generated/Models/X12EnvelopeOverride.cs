// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Logic.Models
{
    using System.Linq;

    /// <summary>
    /// The X12 envelope override settings.
    /// </summary>
    public partial class X12EnvelopeOverride
    {
        /// <summary>
        /// Initializes a new instance of the X12EnvelopeOverride class.
        /// </summary>
        public X12EnvelopeOverride()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the X12EnvelopeOverride class.
        /// </summary>

        /// <param name="targetNamespace">The target namespace on which this envelope settings has to be applied.
        /// </param>

        /// <param name="protocolVersion">The protocol version on which this envelope settings has to be applied.
        /// </param>

        /// <param name="messageId">The message id on which this envelope settings has to be applied.
        /// </param>

        /// <param name="responsibleAgencyCode">The responsible agency code.
        /// </param>

        /// <param name="headerVersion">The header version.
        /// </param>

        /// <param name="senderApplicationId">The sender application id.
        /// </param>

        /// <param name="receiverApplicationId">The receiver application id.
        /// </param>

        /// <param name="functionalIdentifierCode">The functional identifier code.
        /// </param>

        /// <param name="dateFormat">The date format.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;CCYYMMDD&#39;, &#39;YYMMDD&#39;</param>

        /// <param name="timeFormat">The time format.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;HHMM&#39;, &#39;HHMMSS&#39;, &#39;HHMMSSdd&#39;,
        /// &#39;HHMMSSd&#39;</param>
        public X12EnvelopeOverride(string targetNamespace, string protocolVersion, string messageId, string responsibleAgencyCode, string headerVersion, string senderApplicationId, string receiverApplicationId, string dateFormat, string timeFormat, string functionalIdentifierCode = default(string))

        {
            this.TargetNamespace = targetNamespace;
            this.ProtocolVersion = protocolVersion;
            this.MessageId = messageId;
            this.ResponsibleAgencyCode = responsibleAgencyCode;
            this.HeaderVersion = headerVersion;
            this.SenderApplicationId = senderApplicationId;
            this.ReceiverApplicationId = receiverApplicationId;
            this.FunctionalIdentifierCode = functionalIdentifierCode;
            this.DateFormat = dateFormat;
            this.TimeFormat = timeFormat;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the target namespace on which this envelope settings has to be
        /// applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetNamespace")]
        public string TargetNamespace {get; set; }

        /// <summary>
        /// Gets or sets the protocol version on which this envelope settings has to be
        /// applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocolVersion")]
        public string ProtocolVersion {get; set; }

        /// <summary>
        /// Gets or sets the message id on which this envelope settings has to be
        /// applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "messageId")]
        public string MessageId {get; set; }

        /// <summary>
        /// Gets or sets the responsible agency code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "responsibleAgencyCode")]
        public string ResponsibleAgencyCode {get; set; }

        /// <summary>
        /// Gets or sets the header version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "headerVersion")]
        public string HeaderVersion {get; set; }

        /// <summary>
        /// Gets or sets the sender application id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "senderApplicationId")]
        public string SenderApplicationId {get; set; }

        /// <summary>
        /// Gets or sets the receiver application id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "receiverApplicationId")]
        public string ReceiverApplicationId {get; set; }

        /// <summary>
        /// Gets or sets the functional identifier code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "functionalIdentifierCode")]
        public string FunctionalIdentifierCode {get; set; }

        /// <summary>
        /// Gets or sets the date format. Possible values include: &#39;NotSpecified&#39;, &#39;CCYYMMDD&#39;, &#39;YYMMDD&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dateFormat")]
        public string DateFormat {get; set; }

        /// <summary>
        /// Gets or sets the time format. Possible values include: &#39;NotSpecified&#39;, &#39;HHMM&#39;, &#39;HHMMSS&#39;, &#39;HHMMSSdd&#39;, &#39;HHMMSSd&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeFormat")]
        public string TimeFormat {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.TargetNamespace == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TargetNamespace");
            }
            if (this.ProtocolVersion == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ProtocolVersion");
            }
            if (this.MessageId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MessageId");
            }
            if (this.ResponsibleAgencyCode == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ResponsibleAgencyCode");
            }
            if (this.HeaderVersion == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "HeaderVersion");
            }
            if (this.SenderApplicationId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SenderApplicationId");
            }
            if (this.ReceiverApplicationId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ReceiverApplicationId");
            }
            if (this.DateFormat == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DateFormat");
            }
            if (this.TimeFormat == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TimeFormat");
            }










        }
    }
}