// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Logic.Models
{
    using System.Linq;

    /// <summary>
    /// The X12 agreement envelope settings.
    /// </summary>
    public partial class X12EnvelopeSettings
    {
        /// <summary>
        /// Initializes a new instance of the X12EnvelopeSettings class.
        /// </summary>
        public X12EnvelopeSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the X12EnvelopeSettings class.
        /// </summary>

        /// <param name="controlStandardsId">The controls standards id.
        /// </param>

        /// <param name="useControlStandardsIdAsRepetitionCharacter">The value indicating whether to use control standards id as repetition
        /// character.
        /// </param>

        /// <param name="senderApplicationId">The sender application id.
        /// </param>

        /// <param name="receiverApplicationId">The receiver application id.
        /// </param>

        /// <param name="controlVersionNumber">The control version number.
        /// </param>

        /// <param name="interchangeControlNumberLowerBound">The interchange  control number lower bound.
        /// </param>

        /// <param name="interchangeControlNumberUpperBound">The interchange  control number upper bound.
        /// </param>

        /// <param name="rolloverInterchangeControlNumber">The value indicating whether to rollover interchange control number.
        /// </param>

        /// <param name="enableDefaultGroupHeaders">The value indicating whether to enable default group headers.
        /// </param>

        /// <param name="functionalGroupId">The functional group id.
        /// </param>

        /// <param name="groupControlNumberLowerBound">The group control number lower bound.
        /// </param>

        /// <param name="groupControlNumberUpperBound">The group control number upper bound.
        /// </param>

        /// <param name="rolloverGroupControlNumber">The value indicating whether to rollover group control number.
        /// </param>

        /// <param name="groupHeaderAgencyCode">The group header agency code.
        /// </param>

        /// <param name="groupHeaderVersion">The group header version.
        /// </param>

        /// <param name="transactionSetControlNumberLowerBound">The transaction set control number lower bound.
        /// </param>

        /// <param name="transactionSetControlNumberUpperBound">The transaction set control number upper bound.
        /// </param>

        /// <param name="rolloverTransactionSetControlNumber">The value indicating whether to rollover transaction set control number.
        /// </param>

        /// <param name="transactionSetControlNumberPrefix">The transaction set control number prefix.
        /// </param>

        /// <param name="transactionSetControlNumberSuffix">The transaction set control number suffix.
        /// </param>

        /// <param name="overwriteExistingTransactionSetControlNumber">The value indicating whether to overwrite existing transaction set control
        /// number.
        /// </param>

        /// <param name="groupHeaderDateFormat">The group header date format.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;CCYYMMDD&#39;, &#39;YYMMDD&#39;</param>

        /// <param name="groupHeaderTimeFormat">The group header time format.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;HHMM&#39;, &#39;HHMMSS&#39;, &#39;HHMMSSdd&#39;,
        /// &#39;HHMMSSd&#39;</param>

        /// <param name="usageIndicator">The usage indicator.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;Test&#39;, &#39;Information&#39;,
        /// &#39;Production&#39;</param>
        public X12EnvelopeSettings(int controlStandardsId, bool useControlStandardsIdAsRepetitionCharacter, string senderApplicationId, string receiverApplicationId, string controlVersionNumber, int interchangeControlNumberLowerBound, int interchangeControlNumberUpperBound, bool rolloverInterchangeControlNumber, bool enableDefaultGroupHeaders, int groupControlNumberLowerBound, int groupControlNumberUpperBound, bool rolloverGroupControlNumber, string groupHeaderAgencyCode, string groupHeaderVersion, int transactionSetControlNumberLowerBound, int transactionSetControlNumberUpperBound, bool rolloverTransactionSetControlNumber, bool overwriteExistingTransactionSetControlNumber, string groupHeaderDateFormat, string groupHeaderTimeFormat, string usageIndicator, string functionalGroupId = default(string), string transactionSetControlNumberPrefix = default(string), string transactionSetControlNumberSuffix = default(string))

        {
            this.ControlStandardsId = controlStandardsId;
            this.UseControlStandardsIdAsRepetitionCharacter = useControlStandardsIdAsRepetitionCharacter;
            this.SenderApplicationId = senderApplicationId;
            this.ReceiverApplicationId = receiverApplicationId;
            this.ControlVersionNumber = controlVersionNumber;
            this.InterchangeControlNumberLowerBound = interchangeControlNumberLowerBound;
            this.InterchangeControlNumberUpperBound = interchangeControlNumberUpperBound;
            this.RolloverInterchangeControlNumber = rolloverInterchangeControlNumber;
            this.EnableDefaultGroupHeaders = enableDefaultGroupHeaders;
            this.FunctionalGroupId = functionalGroupId;
            this.GroupControlNumberLowerBound = groupControlNumberLowerBound;
            this.GroupControlNumberUpperBound = groupControlNumberUpperBound;
            this.RolloverGroupControlNumber = rolloverGroupControlNumber;
            this.GroupHeaderAgencyCode = groupHeaderAgencyCode;
            this.GroupHeaderVersion = groupHeaderVersion;
            this.TransactionSetControlNumberLowerBound = transactionSetControlNumberLowerBound;
            this.TransactionSetControlNumberUpperBound = transactionSetControlNumberUpperBound;
            this.RolloverTransactionSetControlNumber = rolloverTransactionSetControlNumber;
            this.TransactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
            this.TransactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
            this.OverwriteExistingTransactionSetControlNumber = overwriteExistingTransactionSetControlNumber;
            this.GroupHeaderDateFormat = groupHeaderDateFormat;
            this.GroupHeaderTimeFormat = groupHeaderTimeFormat;
            this.UsageIndicator = usageIndicator;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the controls standards id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "controlStandardsId")]
        public int ControlStandardsId {get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to use control standards id as
        /// repetition character.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "useControlStandardsIdAsRepetitionCharacter")]
        public bool UseControlStandardsIdAsRepetitionCharacter {get; set; }

        /// <summary>
        /// Gets or sets the sender application id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "senderApplicationId")]
        public string SenderApplicationId {get; set; }

        /// <summary>
        /// Gets or sets the receiver application id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "receiverApplicationId")]
        public string ReceiverApplicationId {get; set; }

        /// <summary>
        /// Gets or sets the control version number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "controlVersionNumber")]
        public string ControlVersionNumber {get; set; }

        /// <summary>
        /// Gets or sets the interchange  control number lower bound.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "interchangeControlNumberLowerBound")]
        public int InterchangeControlNumberLowerBound {get; set; }

        /// <summary>
        /// Gets or sets the interchange  control number upper bound.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "interchangeControlNumberUpperBound")]
        public int InterchangeControlNumberUpperBound {get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to rollover interchange control
        /// number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rolloverInterchangeControlNumber")]
        public bool RolloverInterchangeControlNumber {get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to enable default group headers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableDefaultGroupHeaders")]
        public bool EnableDefaultGroupHeaders {get; set; }

        /// <summary>
        /// Gets or sets the functional group id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "functionalGroupId")]
        public string FunctionalGroupId {get; set; }

        /// <summary>
        /// Gets or sets the group control number lower bound.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "groupControlNumberLowerBound")]
        public int GroupControlNumberLowerBound {get; set; }

        /// <summary>
        /// Gets or sets the group control number upper bound.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "groupControlNumberUpperBound")]
        public int GroupControlNumberUpperBound {get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to rollover group control number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rolloverGroupControlNumber")]
        public bool RolloverGroupControlNumber {get; set; }

        /// <summary>
        /// Gets or sets the group header agency code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "groupHeaderAgencyCode")]
        public string GroupHeaderAgencyCode {get; set; }

        /// <summary>
        /// Gets or sets the group header version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "groupHeaderVersion")]
        public string GroupHeaderVersion {get; set; }

        /// <summary>
        /// Gets or sets the transaction set control number lower bound.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "transactionSetControlNumberLowerBound")]
        public int TransactionSetControlNumberLowerBound {get; set; }

        /// <summary>
        /// Gets or sets the transaction set control number upper bound.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "transactionSetControlNumberUpperBound")]
        public int TransactionSetControlNumberUpperBound {get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to rollover transaction set
        /// control number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rolloverTransactionSetControlNumber")]
        public bool RolloverTransactionSetControlNumber {get; set; }

        /// <summary>
        /// Gets or sets the transaction set control number prefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "transactionSetControlNumberPrefix")]
        public string TransactionSetControlNumberPrefix {get; set; }

        /// <summary>
        /// Gets or sets the transaction set control number suffix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "transactionSetControlNumberSuffix")]
        public string TransactionSetControlNumberSuffix {get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to overwrite existing transaction
        /// set control number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "overwriteExistingTransactionSetControlNumber")]
        public bool OverwriteExistingTransactionSetControlNumber {get; set; }

        /// <summary>
        /// Gets or sets the group header date format. Possible values include: &#39;NotSpecified&#39;, &#39;CCYYMMDD&#39;, &#39;YYMMDD&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "groupHeaderDateFormat")]
        public string GroupHeaderDateFormat {get; set; }

        /// <summary>
        /// Gets or sets the group header time format. Possible values include: &#39;NotSpecified&#39;, &#39;HHMM&#39;, &#39;HHMMSS&#39;, &#39;HHMMSSdd&#39;, &#39;HHMMSSd&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "groupHeaderTimeFormat")]
        public string GroupHeaderTimeFormat {get; set; }

        /// <summary>
        /// Gets or sets the usage indicator. Possible values include: &#39;NotSpecified&#39;, &#39;Test&#39;, &#39;Information&#39;, &#39;Production&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "usageIndicator")]
        public string UsageIndicator {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.SenderApplicationId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SenderApplicationId");
            }
            if (this.ReceiverApplicationId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ReceiverApplicationId");
            }
            if (this.ControlVersionNumber == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ControlVersionNumber");
            }
            if (this.GroupHeaderAgencyCode == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "GroupHeaderAgencyCode");
            }
            if (this.GroupHeaderVersion == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "GroupHeaderVersion");
            }
            if (this.GroupHeaderDateFormat == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "GroupHeaderDateFormat");
            }
            if (this.GroupHeaderTimeFormat == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "GroupHeaderTimeFormat");
            }
            if (this.UsageIndicator == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "UsageIndicator");
            }











        }
    }
}