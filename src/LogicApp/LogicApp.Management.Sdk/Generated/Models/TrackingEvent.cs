// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Logic.Models
{
    using System.Linq;

    public partial class TrackingEvent
    {
        /// <summary>
        /// Initializes a new instance of the TrackingEvent class.
        /// </summary>
        public TrackingEvent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TrackingEvent class.
        /// </summary>

        /// <param name="eventLevel">The event level.
        /// Possible values include: &#39;LogAlways&#39;, &#39;Critical&#39;, &#39;Error&#39;, &#39;Warning&#39;,
        /// &#39;Informational&#39;, &#39;Verbose&#39;</param>

        /// <param name="eventTime">
        /// </param>

        /// <param name="recordType">The tracking record type.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;Custom&#39;, &#39;AS2Message&#39;, &#39;AS2MDN&#39;,
        /// &#39;X12Interchange&#39;, &#39;X12FunctionalGroup&#39;, &#39;X12TransactionSet&#39;,
        /// &#39;X12InterchangeAcknowledgment&#39;, &#39;X12FunctionalGroupAcknowledgment&#39;,
        /// &#39;X12TransactionSetAcknowledgment&#39;, &#39;EdifactInterchange&#39;,
        /// &#39;EdifactFunctionalGroup&#39;, &#39;EdifactTransactionSet&#39;,
        /// &#39;EdifactInterchangeAcknowledgment&#39;, &#39;EdifactFunctionalGroupAcknowledgment&#39;,
        /// &#39;EdifactTransactionSetAcknowledgment&#39;</param>

        /// <param name="error">
        /// </param>
        public TrackingEvent(EventLevel eventLevel, System.DateTime eventTime, string recordType, TrackingEventErrorInfo error = default(TrackingEventErrorInfo))

        {
            this.EventLevel = eventLevel;
            this.EventTime = eventTime;
            this.RecordType = recordType;
            this.Error = error;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the event level. Possible values include: &#39;LogAlways&#39;, &#39;Critical&#39;, &#39;Error&#39;, &#39;Warning&#39;, &#39;Informational&#39;, &#39;Verbose&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "eventLevel")]
        public EventLevel EventLevel {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "eventTime")]
        public System.DateTime EventTime {get; set; }

        /// <summary>
        /// Gets or sets the tracking record type. Possible values include: &#39;NotSpecified&#39;, &#39;Custom&#39;, &#39;AS2Message&#39;, &#39;AS2MDN&#39;, &#39;X12Interchange&#39;, &#39;X12FunctionalGroup&#39;, &#39;X12TransactionSet&#39;, &#39;X12InterchangeAcknowledgment&#39;, &#39;X12FunctionalGroupAcknowledgment&#39;, &#39;X12TransactionSetAcknowledgment&#39;, &#39;EdifactInterchange&#39;, &#39;EdifactFunctionalGroup&#39;, &#39;EdifactTransactionSet&#39;, &#39;EdifactInterchangeAcknowledgment&#39;, &#39;EdifactFunctionalGroupAcknowledgment&#39;, &#39;EdifactTransactionSetAcknowledgment&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recordType")]
        public string RecordType {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "error")]
        public TrackingEventErrorInfo Error {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.RecordType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RecordType");
            }



        }
    }
}