// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Logic.Models
{
    using System.Linq;

    /// <summary>
    /// The workflow trigger properties.
    /// </summary>
    public partial class WorkflowTriggerProperties
    {
        /// <summary>
        /// Initializes a new instance of the WorkflowTriggerProperties class.
        /// </summary>
        public WorkflowTriggerProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkflowTriggerProperties class.
        /// </summary>

        /// <param name="provisioningState">Gets the provisioning state.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;Accepted&#39;, &#39;Running&#39;, &#39;Ready&#39;,
        /// &#39;Creating&#39;, &#39;Created&#39;, &#39;Deleting&#39;, &#39;Deleted&#39;, &#39;Canceled&#39;, &#39;Failed&#39;,
        /// &#39;Succeeded&#39;, &#39;Moving&#39;, &#39;Updating&#39;, &#39;Registering&#39;, &#39;Registered&#39;,
        /// &#39;Unregistering&#39;, &#39;Unregistered&#39;, &#39;Completed&#39;</param>

        /// <param name="createdTime">Gets the created time.
        /// </param>

        /// <param name="changedTime">Gets the changed time.
        /// </param>

        /// <param name="state">Gets the state.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;Completed&#39;, &#39;Enabled&#39;,
        /// &#39;Disabled&#39;, &#39;Deleted&#39;, &#39;Suspended&#39;</param>

        /// <param name="status">Gets the status.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;Paused&#39;, &#39;Running&#39;, &#39;Waiting&#39;,
        /// &#39;Succeeded&#39;, &#39;Skipped&#39;, &#39;Suspended&#39;, &#39;Cancelled&#39;, &#39;Failed&#39;, &#39;Faulted&#39;,
        /// &#39;TimedOut&#39;, &#39;Aborted&#39;, &#39;Ignored&#39;</param>

        /// <param name="lastExecutionTime">Gets the last execution time.
        /// </param>

        /// <param name="nextExecutionTime">Gets the next execution time.
        /// </param>

        /// <param name="recurrence">Gets the workflow trigger recurrence.
        /// </param>

        /// <param name="workflow">Gets the reference to workflow.
        /// </param>
        public WorkflowTriggerProperties(string provisioningState = default(string), System.DateTime? createdTime = default(System.DateTime?), System.DateTime? changedTime = default(System.DateTime?), string state = default(string), string status = default(string), System.DateTime? lastExecutionTime = default(System.DateTime?), System.DateTime? nextExecutionTime = default(System.DateTime?), WorkflowTriggerRecurrence recurrence = default(WorkflowTriggerRecurrence), ResourceReference workflow = default(ResourceReference))

        {
            this.ProvisioningState = provisioningState;
            this.CreatedTime = createdTime;
            this.ChangedTime = changedTime;
            this.State = state;
            this.Status = status;
            this.LastExecutionTime = lastExecutionTime;
            this.NextExecutionTime = nextExecutionTime;
            this.Recurrence = recurrence;
            this.Workflow = workflow;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets gets the provisioning state. Possible values include: &#39;NotSpecified&#39;, &#39;Accepted&#39;, &#39;Running&#39;, &#39;Ready&#39;, &#39;Creating&#39;, &#39;Created&#39;, &#39;Deleting&#39;, &#39;Deleted&#39;, &#39;Canceled&#39;, &#39;Failed&#39;, &#39;Succeeded&#39;, &#39;Moving&#39;, &#39;Updating&#39;, &#39;Registering&#39;, &#39;Registered&#39;, &#39;Unregistering&#39;, &#39;Unregistered&#39;, &#39;Completed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets gets the created time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "createdTime")]
        public System.DateTime? CreatedTime {get; private set; }

        /// <summary>
        /// Gets gets the changed time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "changedTime")]
        public System.DateTime? ChangedTime {get; private set; }

        /// <summary>
        /// Gets gets the state. Possible values include: &#39;NotSpecified&#39;, &#39;Completed&#39;, &#39;Enabled&#39;, &#39;Disabled&#39;, &#39;Deleted&#39;, &#39;Suspended&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; private set; }

        /// <summary>
        /// Gets gets the status. Possible values include: &#39;NotSpecified&#39;, &#39;Paused&#39;, &#39;Running&#39;, &#39;Waiting&#39;, &#39;Succeeded&#39;, &#39;Skipped&#39;, &#39;Suspended&#39;, &#39;Cancelled&#39;, &#39;Failed&#39;, &#39;Faulted&#39;, &#39;TimedOut&#39;, &#39;Aborted&#39;, &#39;Ignored&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; private set; }

        /// <summary>
        /// Gets gets the last execution time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastExecutionTime")]
        public System.DateTime? LastExecutionTime {get; private set; }

        /// <summary>
        /// Gets gets the next execution time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nextExecutionTime")]
        public System.DateTime? NextExecutionTime {get; private set; }

        /// <summary>
        /// Gets gets the workflow trigger recurrence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recurrence")]
        public WorkflowTriggerRecurrence Recurrence {get; private set; }

        /// <summary>
        /// Gets gets the reference to workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "workflow")]
        public ResourceReference Workflow {get; private set; }
    }
}