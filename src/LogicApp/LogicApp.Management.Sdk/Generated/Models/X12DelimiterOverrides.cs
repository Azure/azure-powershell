// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Logic.Models
{
    using System.Linq;

    /// <summary>
    /// The X12 delimiter override settings.
    /// </summary>
    public partial class X12DelimiterOverrides
    {
        /// <summary>
        /// Initializes a new instance of the X12DelimiterOverrides class.
        /// </summary>
        public X12DelimiterOverrides()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the X12DelimiterOverrides class.
        /// </summary>

        /// <param name="protocolVersion">The protocol version.
        /// </param>

        /// <param name="messageId">The message id.
        /// </param>

        /// <param name="dataElementSeparator">The data element separator.
        /// </param>

        /// <param name="componentSeparator">The component separator.
        /// </param>

        /// <param name="segmentTerminator">The segment terminator.
        /// </param>

        /// <param name="segmentTerminatorSuffix">The segment terminator suffix.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;None&#39;, &#39;CR&#39;, &#39;LF&#39;, &#39;CRLF&#39;</param>

        /// <param name="replaceCharacter">The replacement character.
        /// </param>

        /// <param name="replaceSeparatorsInPayload">The value indicating whether to replace separators in payload.
        /// </param>

        /// <param name="targetNamespace">The target namespace on which this delimiter settings has to be applied.
        /// </param>
        public X12DelimiterOverrides(int dataElementSeparator, int componentSeparator, int segmentTerminator, SegmentTerminatorSuffix segmentTerminatorSuffix, int replaceCharacter, bool replaceSeparatorsInPayload, string protocolVersion = default(string), string messageId = default(string), string targetNamespace = default(string))

        {
            this.ProtocolVersion = protocolVersion;
            this.MessageId = messageId;
            this.DataElementSeparator = dataElementSeparator;
            this.ComponentSeparator = componentSeparator;
            this.SegmentTerminator = segmentTerminator;
            this.SegmentTerminatorSuffix = segmentTerminatorSuffix;
            this.ReplaceCharacter = replaceCharacter;
            this.ReplaceSeparatorsInPayload = replaceSeparatorsInPayload;
            this.TargetNamespace = targetNamespace;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the protocol version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocolVersion")]
        public string ProtocolVersion {get; set; }

        /// <summary>
        /// Gets or sets the message id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "messageId")]
        public string MessageId {get; set; }

        /// <summary>
        /// Gets or sets the data element separator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataElementSeparator")]
        public int DataElementSeparator {get; set; }

        /// <summary>
        /// Gets or sets the component separator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "componentSeparator")]
        public int ComponentSeparator {get; set; }

        /// <summary>
        /// Gets or sets the segment terminator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "segmentTerminator")]
        public int SegmentTerminator {get; set; }

        /// <summary>
        /// Gets or sets the segment terminator suffix. Possible values include: &#39;NotSpecified&#39;, &#39;None&#39;, &#39;CR&#39;, &#39;LF&#39;, &#39;CRLF&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "segmentTerminatorSuffix")]
        public SegmentTerminatorSuffix SegmentTerminatorSuffix {get; set; }

        /// <summary>
        /// Gets or sets the replacement character.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "replaceCharacter")]
        public int ReplaceCharacter {get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to replace separators in payload.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "replaceSeparatorsInPayload")]
        public bool ReplaceSeparatorsInPayload {get; set; }

        /// <summary>
        /// Gets or sets the target namespace on which this delimiter settings has to
        /// be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetNamespace")]
        public string TargetNamespace {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {




        }
    }
}