// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Logic.Models
{
    using System.Linq;

    /// <summary>
    /// The Edifact validation override settings.
    /// </summary>
    public partial class EdifactValidationOverride
    {
        /// <summary>
        /// Initializes a new instance of the EdifactValidationOverride class.
        /// </summary>
        public EdifactValidationOverride()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EdifactValidationOverride class.
        /// </summary>

        /// <param name="messageId">The message id on which the validation settings has to be applied.
        /// </param>

        /// <param name="enforceCharacterSet">The value indicating whether to validate character Set.
        /// </param>

        /// <param name="validateEdiTypes">The value indicating whether to validate EDI types.
        /// </param>

        /// <param name="validateXsdTypes">The value indicating whether to validate XSD types.
        /// </param>

        /// <param name="allowLeadingAndTrailingSpacesAndZeroes">The value indicating whether to allow leading and trailing spaces and
        /// zeroes.
        /// </param>

        /// <param name="trailingSeparatorPolicy">The trailing separator policy.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;NotAllowed&#39;, &#39;Optional&#39;,
        /// &#39;Mandatory&#39;</param>

        /// <param name="trimLeadingAndTrailingSpacesAndZeroes">The value indicating whether to trim leading and trailing spaces and
        /// zeroes.
        /// </param>
        public EdifactValidationOverride(string messageId, bool enforceCharacterSet, bool validateEdiTypes, bool validateXsdTypes, bool allowLeadingAndTrailingSpacesAndZeroes, string trailingSeparatorPolicy, bool trimLeadingAndTrailingSpacesAndZeroes)

        {
            this.MessageId = messageId;
            this.EnforceCharacterSet = enforceCharacterSet;
            this.ValidateEdiTypes = validateEdiTypes;
            this.ValidateXsdTypes = validateXsdTypes;
            this.AllowLeadingAndTrailingSpacesAndZeroes = allowLeadingAndTrailingSpacesAndZeroes;
            this.TrailingSeparatorPolicy = trailingSeparatorPolicy;
            this.TrimLeadingAndTrailingSpacesAndZeroes = trimLeadingAndTrailingSpacesAndZeroes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the message id on which the validation settings has to be
        /// applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "messageId")]
        public string MessageId {get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to validate character Set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enforceCharacterSet")]
        public bool EnforceCharacterSet {get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to validate EDI types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "validateEDITypes")]
        public bool ValidateEdiTypes {get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to validate XSD types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "validateXSDTypes")]
        public bool ValidateXsdTypes {get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to allow leading and trailing
        /// spaces and zeroes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowLeadingAndTrailingSpacesAndZeroes")]
        public bool AllowLeadingAndTrailingSpacesAndZeroes {get; set; }

        /// <summary>
        /// Gets or sets the trailing separator policy. Possible values include: &#39;NotSpecified&#39;, &#39;NotAllowed&#39;, &#39;Optional&#39;, &#39;Mandatory&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "trailingSeparatorPolicy")]
        public string TrailingSeparatorPolicy {get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether to trim leading and trailing
        /// spaces and zeroes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "trimLeadingAndTrailingSpacesAndZeroes")]
        public bool TrimLeadingAndTrailingSpacesAndZeroes {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.MessageId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MessageId");
            }
            if (this.TrailingSeparatorPolicy == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TrailingSeparatorPolicy");
            }


        }
    }
}