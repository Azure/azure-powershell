// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Logic.Models
{
    using System.Linq;

    /// <summary>
    /// The Edifact agreement framing settings.
    /// </summary>
    public partial class EdifactFramingSettings
    {
        /// <summary>
        /// Initializes a new instance of the EdifactFramingSettings class.
        /// </summary>
        public EdifactFramingSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EdifactFramingSettings class.
        /// </summary>

        /// <param name="serviceCodeListDirectoryVersion">The service code list directory version.
        /// </param>

        /// <param name="characterEncoding">The character encoding.
        /// </param>

        /// <param name="protocolVersion">The protocol version.
        /// </param>

        /// <param name="dataElementSeparator">The data element separator.
        /// </param>

        /// <param name="componentSeparator">The component separator.
        /// </param>

        /// <param name="segmentTerminator">The segment terminator.
        /// </param>

        /// <param name="releaseIndicator">The release indicator.
        /// </param>

        /// <param name="repetitionSeparator">The repetition separator.
        /// </param>

        /// <param name="characterSet">The EDIFACT frame setting characterSet.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;UNOB&#39;, &#39;UNOA&#39;, &#39;UNOC&#39;, &#39;UNOD&#39;,
        /// &#39;UNOE&#39;, &#39;UNOF&#39;, &#39;UNOG&#39;, &#39;UNOH&#39;, &#39;UNOI&#39;, &#39;UNOJ&#39;, &#39;UNOK&#39;, &#39;UNOX&#39;, &#39;UNOY&#39;,
        /// &#39;KECA&#39;</param>

        /// <param name="decimalPointIndicator">The EDIFACT frame setting decimal indicator.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;Comma&#39;, &#39;Decimal&#39;</param>

        /// <param name="segmentTerminatorSuffix">The EDIFACT frame setting segment terminator suffix.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;None&#39;, &#39;CR&#39;, &#39;LF&#39;, &#39;CRLF&#39;</param>
        public EdifactFramingSettings(int protocolVersion, int dataElementSeparator, int componentSeparator, int segmentTerminator, int releaseIndicator, int repetitionSeparator, string characterSet, EdifactDecimalIndicator decimalPointIndicator, SegmentTerminatorSuffix segmentTerminatorSuffix, string serviceCodeListDirectoryVersion = default(string), string characterEncoding = default(string))

        {
            this.ServiceCodeListDirectoryVersion = serviceCodeListDirectoryVersion;
            this.CharacterEncoding = characterEncoding;
            this.ProtocolVersion = protocolVersion;
            this.DataElementSeparator = dataElementSeparator;
            this.ComponentSeparator = componentSeparator;
            this.SegmentTerminator = segmentTerminator;
            this.ReleaseIndicator = releaseIndicator;
            this.RepetitionSeparator = repetitionSeparator;
            this.CharacterSet = characterSet;
            this.DecimalPointIndicator = decimalPointIndicator;
            this.SegmentTerminatorSuffix = segmentTerminatorSuffix;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the service code list directory version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceCodeListDirectoryVersion")]
        public string ServiceCodeListDirectoryVersion {get; set; }

        /// <summary>
        /// Gets or sets the character encoding.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "characterEncoding")]
        public string CharacterEncoding {get; set; }

        /// <summary>
        /// Gets or sets the protocol version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocolVersion")]
        public int ProtocolVersion {get; set; }

        /// <summary>
        /// Gets or sets the data element separator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataElementSeparator")]
        public int DataElementSeparator {get; set; }

        /// <summary>
        /// Gets or sets the component separator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "componentSeparator")]
        public int ComponentSeparator {get; set; }

        /// <summary>
        /// Gets or sets the segment terminator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "segmentTerminator")]
        public int SegmentTerminator {get; set; }

        /// <summary>
        /// Gets or sets the release indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "releaseIndicator")]
        public int ReleaseIndicator {get; set; }

        /// <summary>
        /// Gets or sets the repetition separator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "repetitionSeparator")]
        public int RepetitionSeparator {get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT frame setting characterSet. Possible values include: &#39;NotSpecified&#39;, &#39;UNOB&#39;, &#39;UNOA&#39;, &#39;UNOC&#39;, &#39;UNOD&#39;, &#39;UNOE&#39;, &#39;UNOF&#39;, &#39;UNOG&#39;, &#39;UNOH&#39;, &#39;UNOI&#39;, &#39;UNOJ&#39;, &#39;UNOK&#39;, &#39;UNOX&#39;, &#39;UNOY&#39;, &#39;KECA&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "characterSet")]
        public string CharacterSet {get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT frame setting decimal indicator. Possible values include: &#39;NotSpecified&#39;, &#39;Comma&#39;, &#39;Decimal&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "decimalPointIndicator")]
        public EdifactDecimalIndicator DecimalPointIndicator {get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT frame setting segment terminator suffix. Possible values include: &#39;NotSpecified&#39;, &#39;None&#39;, &#39;CR&#39;, &#39;LF&#39;, &#39;CRLF&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "segmentTerminatorSuffix")]
        public SegmentTerminatorSuffix SegmentTerminatorSuffix {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.CharacterSet == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "CharacterSet");
            }





        }
    }
}