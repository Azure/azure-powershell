// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Logic.Models
{
    using System.Linq;

    /// <summary>
    /// The Edifact agreement protocol settings.
    /// </summary>
    public partial class EdifactProtocolSettings
    {
        /// <summary>
        /// Initializes a new instance of the EdifactProtocolSettings class.
        /// </summary>
        public EdifactProtocolSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EdifactProtocolSettings class.
        /// </summary>

        /// <param name="validationSettings">The EDIFACT validation settings.
        /// </param>

        /// <param name="framingSettings">The EDIFACT framing settings.
        /// </param>

        /// <param name="envelopeSettings">The EDIFACT envelope settings.
        /// </param>

        /// <param name="acknowledgementSettings">The EDIFACT acknowledgement settings.
        /// </param>

        /// <param name="messageFilter">The EDIFACT message filter.
        /// </param>

        /// <param name="processingSettings">The EDIFACT processing Settings.
        /// </param>

        /// <param name="envelopeOverrides">The EDIFACT envelope override settings.
        /// </param>

        /// <param name="messageFilterList">The EDIFACT message filter list.
        /// </param>

        /// <param name="schemaReferences">The EDIFACT schema references.
        /// </param>

        /// <param name="validationOverrides">The EDIFACT validation override settings.
        /// </param>

        /// <param name="edifactDelimiterOverrides">The EDIFACT delimiter override settings.
        /// </param>
        public EdifactProtocolSettings(EdifactValidationSettings validationSettings, EdifactFramingSettings framingSettings, EdifactEnvelopeSettings envelopeSettings, EdifactAcknowledgementSettings acknowledgementSettings, EdifactMessageFilter messageFilter, EdifactProcessingSettings processingSettings, System.Collections.Generic.IList<EdifactSchemaReference> schemaReferences, System.Collections.Generic.IList<EdifactEnvelopeOverride> envelopeOverrides = default(System.Collections.Generic.IList<EdifactEnvelopeOverride>), System.Collections.Generic.IList<EdifactMessageIdentifier> messageFilterList = default(System.Collections.Generic.IList<EdifactMessageIdentifier>), System.Collections.Generic.IList<EdifactValidationOverride> validationOverrides = default(System.Collections.Generic.IList<EdifactValidationOverride>), System.Collections.Generic.IList<EdifactDelimiterOverride> edifactDelimiterOverrides = default(System.Collections.Generic.IList<EdifactDelimiterOverride>))

        {
            this.ValidationSettings = validationSettings;
            this.FramingSettings = framingSettings;
            this.EnvelopeSettings = envelopeSettings;
            this.AcknowledgementSettings = acknowledgementSettings;
            this.MessageFilter = messageFilter;
            this.ProcessingSettings = processingSettings;
            this.EnvelopeOverrides = envelopeOverrides;
            this.MessageFilterList = messageFilterList;
            this.SchemaReferences = schemaReferences;
            this.ValidationOverrides = validationOverrides;
            this.EdifactDelimiterOverrides = edifactDelimiterOverrides;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the EDIFACT validation settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "validationSettings")]
        public EdifactValidationSettings ValidationSettings {get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT framing settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "framingSettings")]
        public EdifactFramingSettings FramingSettings {get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT envelope settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "envelopeSettings")]
        public EdifactEnvelopeSettings EnvelopeSettings {get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT acknowledgement settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "acknowledgementSettings")]
        public EdifactAcknowledgementSettings AcknowledgementSettings {get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT message filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "messageFilter")]
        public EdifactMessageFilter MessageFilter {get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT processing Settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "processingSettings")]
        public EdifactProcessingSettings ProcessingSettings {get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT envelope override settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "envelopeOverrides")]
        public System.Collections.Generic.IList<EdifactEnvelopeOverride> EnvelopeOverrides {get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT message filter list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "messageFilterList")]
        public System.Collections.Generic.IList<EdifactMessageIdentifier> MessageFilterList {get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT schema references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "schemaReferences")]
        public System.Collections.Generic.IList<EdifactSchemaReference> SchemaReferences {get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT validation override settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "validationOverrides")]
        public System.Collections.Generic.IList<EdifactValidationOverride> ValidationOverrides {get; set; }

        /// <summary>
        /// Gets or sets the EDIFACT delimiter override settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "edifactDelimiterOverrides")]
        public System.Collections.Generic.IList<EdifactDelimiterOverride> EdifactDelimiterOverrides {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ValidationSettings == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ValidationSettings");
            }
            if (this.FramingSettings == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "FramingSettings");
            }
            if (this.EnvelopeSettings == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "EnvelopeSettings");
            }
            if (this.AcknowledgementSettings == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AcknowledgementSettings");
            }
            if (this.MessageFilter == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MessageFilter");
            }
            if (this.ProcessingSettings == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ProcessingSettings");
            }
            if (this.SchemaReferences == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SchemaReferences");
            }
            if (this.ValidationSettings != null)
            {
                this.ValidationSettings.Validate();
            }
            if (this.FramingSettings != null)
            {
                this.FramingSettings.Validate();
            }
            if (this.EnvelopeSettings != null)
            {
                this.EnvelopeSettings.Validate();
            }
            if (this.AcknowledgementSettings != null)
            {
                this.AcknowledgementSettings.Validate();
            }
            if (this.MessageFilter != null)
            {
                this.MessageFilter.Validate();
            }
            if (this.ProcessingSettings != null)
            {
                this.ProcessingSettings.Validate();
            }

            if (this.MessageFilterList != null)
            {
                foreach (var element in this.MessageFilterList)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.SchemaReferences != null)
            {
                foreach (var element in this.SchemaReferences)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.ValidationOverrides != null)
            {
                foreach (var element in this.ValidationOverrides)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.EdifactDelimiterOverrides != null)
            {
                foreach (var element in this.EdifactDelimiterOverrides)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}