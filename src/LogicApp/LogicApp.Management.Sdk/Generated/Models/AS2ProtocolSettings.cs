// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Logic.Models
{
    using System.Linq;

    /// <summary>
    /// The AS2 agreement protocol settings.
    /// </summary>
    public partial class AS2ProtocolSettings
    {
        /// <summary>
        /// Initializes a new instance of the AS2ProtocolSettings class.
        /// </summary>
        public AS2ProtocolSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AS2ProtocolSettings class.
        /// </summary>

        /// <param name="messageConnectionSettings">The message connection settings.
        /// </param>

        /// <param name="acknowledgementConnectionSettings">The acknowledgement connection settings.
        /// </param>

        /// <param name="mdnSettings">The MDN settings.
        /// </param>

        /// <param name="securitySettings">The security settings.
        /// </param>

        /// <param name="validationSettings">The validation settings.
        /// </param>

        /// <param name="envelopeSettings">The envelope settings.
        /// </param>

        /// <param name="errorSettings">The error settings.
        /// </param>
        public AS2ProtocolSettings(AS2MessageConnectionSettings messageConnectionSettings, AS2AcknowledgementConnectionSettings acknowledgementConnectionSettings, AS2MdnSettings mdnSettings, AS2SecuritySettings securitySettings, AS2ValidationSettings validationSettings, AS2EnvelopeSettings envelopeSettings, AS2ErrorSettings errorSettings)

        {
            this.MessageConnectionSettings = messageConnectionSettings;
            this.AcknowledgementConnectionSettings = acknowledgementConnectionSettings;
            this.MdnSettings = mdnSettings;
            this.SecuritySettings = securitySettings;
            this.ValidationSettings = validationSettings;
            this.EnvelopeSettings = envelopeSettings;
            this.ErrorSettings = errorSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the message connection settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "messageConnectionSettings")]
        public AS2MessageConnectionSettings MessageConnectionSettings {get; set; }

        /// <summary>
        /// Gets or sets the acknowledgement connection settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "acknowledgementConnectionSettings")]
        public AS2AcknowledgementConnectionSettings AcknowledgementConnectionSettings {get; set; }

        /// <summary>
        /// Gets or sets the MDN settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mdnSettings")]
        public AS2MdnSettings MdnSettings {get; set; }

        /// <summary>
        /// Gets or sets the security settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "securitySettings")]
        public AS2SecuritySettings SecuritySettings {get; set; }

        /// <summary>
        /// Gets or sets the validation settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "validationSettings")]
        public AS2ValidationSettings ValidationSettings {get; set; }

        /// <summary>
        /// Gets or sets the envelope settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "envelopeSettings")]
        public AS2EnvelopeSettings EnvelopeSettings {get; set; }

        /// <summary>
        /// Gets or sets the error settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "errorSettings")]
        public AS2ErrorSettings ErrorSettings {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.MessageConnectionSettings == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MessageConnectionSettings");
            }
            if (this.AcknowledgementConnectionSettings == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AcknowledgementConnectionSettings");
            }
            if (this.MdnSettings == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MdnSettings");
            }
            if (this.SecuritySettings == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SecuritySettings");
            }
            if (this.ValidationSettings == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ValidationSettings");
            }
            if (this.EnvelopeSettings == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "EnvelopeSettings");
            }
            if (this.ErrorSettings == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ErrorSettings");
            }
            if (this.MessageConnectionSettings != null)
            {
                this.MessageConnectionSettings.Validate();
            }
            if (this.AcknowledgementConnectionSettings != null)
            {
                this.AcknowledgementConnectionSettings.Validate();
            }
            if (this.MdnSettings != null)
            {
                this.MdnSettings.Validate();
            }
            if (this.SecuritySettings != null)
            {
                this.SecuritySettings.Validate();
            }
            if (this.ValidationSettings != null)
            {
                this.ValidationSettings.Validate();
            }
            if (this.EnvelopeSettings != null)
            {
                this.EnvelopeSettings.Validate();
            }
            if (this.ErrorSettings != null)
            {
                this.ErrorSettings.Validate();
            }
        }
    }
}