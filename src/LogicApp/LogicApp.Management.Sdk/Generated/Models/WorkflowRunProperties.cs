// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Logic.Models
{
    using System.Linq;

    /// <summary>
    /// The workflow run properties.
    /// </summary>
    public partial class WorkflowRunProperties
    {
        /// <summary>
        /// Initializes a new instance of the WorkflowRunProperties class.
        /// </summary>
        public WorkflowRunProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkflowRunProperties class.
        /// </summary>

        /// <param name="waitEndTime">Gets the wait end time.
        /// </param>

        /// <param name="startTime">Gets the start time.
        /// </param>

        /// <param name="endTime">Gets the end time.
        /// </param>

        /// <param name="status">Gets the status.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;Paused&#39;, &#39;Running&#39;, &#39;Waiting&#39;,
        /// &#39;Succeeded&#39;, &#39;Skipped&#39;, &#39;Suspended&#39;, &#39;Cancelled&#39;, &#39;Failed&#39;, &#39;Faulted&#39;,
        /// &#39;TimedOut&#39;, &#39;Aborted&#39;, &#39;Ignored&#39;</param>

        /// <param name="code">Gets the code.
        /// </param>

        /// <param name="error">Gets the error.
        /// </param>

        /// <param name="correlationId">Gets the correlation id.
        /// </param>

        /// <param name="correlation">The run correlation.
        /// </param>

        /// <param name="workflow">Gets the reference to workflow version.
        /// </param>

        /// <param name="trigger">Gets the fired trigger.
        /// </param>

        /// <param name="outputs">Gets the outputs.
        /// </param>

        /// <param name="response">Gets the response of the flow run.
        /// </param>
        public WorkflowRunProperties(System.DateTime? waitEndTime = default(System.DateTime?), System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string status = default(string), string code = default(string), object error = default(object), string correlationId = default(string), Correlation correlation = default(Correlation), ResourceReference workflow = default(ResourceReference), WorkflowRunTrigger trigger = default(WorkflowRunTrigger), System.Collections.Generic.IDictionary<string, WorkflowOutputParameter> outputs = default(System.Collections.Generic.IDictionary<string, WorkflowOutputParameter>), WorkflowRunTrigger response = default(WorkflowRunTrigger))

        {
            this.WaitEndTime = waitEndTime;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.Status = status;
            this.Code = code;
            this.Error = error;
            this.CorrelationId = correlationId;
            this.Correlation = correlation;
            this.Workflow = workflow;
            this.Trigger = trigger;
            this.Outputs = outputs;
            this.Response = response;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets gets the wait end time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "waitEndTime")]
        public System.DateTime? WaitEndTime {get; private set; }

        /// <summary>
        /// Gets gets the start time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTime")]
        public System.DateTime? StartTime {get; private set; }

        /// <summary>
        /// Gets gets the end time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endTime")]
        public System.DateTime? EndTime {get; private set; }

        /// <summary>
        /// Gets gets the status. Possible values include: &#39;NotSpecified&#39;, &#39;Paused&#39;, &#39;Running&#39;, &#39;Waiting&#39;, &#39;Succeeded&#39;, &#39;Skipped&#39;, &#39;Suspended&#39;, &#39;Cancelled&#39;, &#39;Failed&#39;, &#39;Faulted&#39;, &#39;TimedOut&#39;, &#39;Aborted&#39;, &#39;Ignored&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; private set; }

        /// <summary>
        /// Gets gets the code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "code")]
        public string Code {get; private set; }

        /// <summary>
        /// Gets gets the error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "error")]
        public object Error {get; private set; }

        /// <summary>
        /// Gets gets the correlation id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "correlationId")]
        public string CorrelationId {get; private set; }

        /// <summary>
        /// Gets or sets the run correlation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "correlation")]
        public Correlation Correlation {get; set; }

        /// <summary>
        /// Gets gets the reference to workflow version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "workflow")]
        public ResourceReference Workflow {get; private set; }

        /// <summary>
        /// Gets gets the fired trigger.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "trigger")]
        public WorkflowRunTrigger Trigger {get; private set; }

        /// <summary>
        /// Gets gets the outputs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "outputs")]
        public System.Collections.Generic.IDictionary<string, WorkflowOutputParameter> Outputs {get; private set; }

        /// <summary>
        /// Gets gets the response of the flow run.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "response")]
        public WorkflowRunTrigger Response {get; private set; }
    }
}