// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Logic
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for WorkflowTriggerHistoriesOperations
    /// </summary>
    public static partial class WorkflowTriggerHistoriesOperationsExtensions
    {
        /// <summary>
        /// Gets a list of workflow trigger histories.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='triggerName'>
        /// The workflow trigger name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WorkflowTriggerHistory> List(this IWorkflowTriggerHistoriesOperations operations, string resourceGroupName, string workflowName, string triggerName, Microsoft.Rest.Azure.OData.ODataQuery<WorkflowTriggerHistoryFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<WorkflowTriggerHistoryFilter>))
        {
                return ((IWorkflowTriggerHistoriesOperations)operations).ListAsync(resourceGroupName, workflowName, triggerName, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a list of workflow trigger histories.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='triggerName'>
        /// The workflow trigger name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WorkflowTriggerHistory>> ListAsync(this IWorkflowTriggerHistoriesOperations operations, string resourceGroupName, string workflowName, string triggerName, Microsoft.Rest.Azure.OData.ODataQuery<WorkflowTriggerHistoryFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<WorkflowTriggerHistoryFilter>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, workflowName, triggerName, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a workflow trigger history.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='triggerName'>
        /// The workflow trigger name.
        /// </param>
        /// <param name='historyName'>
        /// The workflow trigger history name. Corresponds to the run name for triggers
        /// that resulted in a run.
        /// </param>
        public static WorkflowTriggerHistory Get(this IWorkflowTriggerHistoriesOperations operations, string resourceGroupName, string workflowName, string triggerName, string historyName)
        {
                return ((IWorkflowTriggerHistoriesOperations)operations).GetAsync(resourceGroupName, workflowName, triggerName, historyName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a workflow trigger history.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='triggerName'>
        /// The workflow trigger name.
        /// </param>
        /// <param name='historyName'>
        /// The workflow trigger history name. Corresponds to the run name for triggers
        /// that resulted in a run.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkflowTriggerHistory> GetAsync(this IWorkflowTriggerHistoriesOperations operations, string resourceGroupName, string workflowName, string triggerName, string historyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workflowName, triggerName, historyName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Resubmits a workflow run based on the trigger history.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='triggerName'>
        /// The workflow trigger name.
        /// </param>
        /// <param name='historyName'>
        /// The workflow trigger history name. Corresponds to the run name for triggers
        /// that resulted in a run.
        /// </param>
        public static void Resubmit(this IWorkflowTriggerHistoriesOperations operations, string resourceGroupName, string workflowName, string triggerName, string historyName)
        {
                ((IWorkflowTriggerHistoriesOperations)operations).ResubmitAsync(resourceGroupName, workflowName, triggerName, historyName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Resubmits a workflow run based on the trigger history.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='workflowName'>
        /// The workflow name.
        /// </param>
        /// <param name='triggerName'>
        /// The workflow trigger name.
        /// </param>
        /// <param name='historyName'>
        /// The workflow trigger history name. Corresponds to the run name for triggers
        /// that resulted in a run.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ResubmitAsync(this IWorkflowTriggerHistoriesOperations operations, string resourceGroupName, string workflowName, string triggerName, string historyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.ResubmitWithHttpMessagesAsync(resourceGroupName, workflowName, triggerName, historyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets a list of workflow trigger histories.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WorkflowTriggerHistory> ListNext(this IWorkflowTriggerHistoriesOperations operations, string nextPageLink)
        {
                return ((IWorkflowTriggerHistoriesOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a list of workflow trigger histories.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WorkflowTriggerHistory>> ListNextAsync(this IWorkflowTriggerHistoriesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
