// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.HDInsight.Models
{
    using System.Linq;

    /// <summary>
    /// The private link ip configuration properties.
    /// </summary>
    public partial class IPConfigurationProperties
    {
        /// <summary>
        /// Initializes a new instance of the IPConfigurationProperties class.
        /// </summary>
        public IPConfigurationProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IPConfigurationProperties class.
        /// </summary>

        /// <param name="provisioningState">The private link configuration provisioning state, which only appears in
        /// the response.
        /// Possible values include: &#39;InProgress&#39;, &#39;Failed&#39;, &#39;Succeeded&#39;, &#39;Canceled&#39;,
        /// &#39;Deleting&#39;</param>

        /// <param name="primary">Indicates whether this IP configuration is primary for the corresponding
        /// NIC.
        /// </param>

        /// <param name="privateIPAddress">The IP address.
        /// </param>

        /// <param name="privateIPAllocationMethod">The method that private IP address is allocated.
        /// Possible values include: &#39;dynamic&#39;, &#39;static&#39;</param>

        /// <param name="subnet">The subnet resource id.
        /// </param>
        public IPConfigurationProperties(string provisioningState = default(string), bool? primary = default(bool?), string privateIPAddress = default(string), string privateIPAllocationMethod = default(string), ResourceId subnet = default(ResourceId))

        {
            this.ProvisioningState = provisioningState;
            this.Primary = primary;
            this.PrivateIPAddress = privateIPAddress;
            this.PrivateIPAllocationMethod = privateIPAllocationMethod;
            this.Subnet = subnet;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the private link configuration provisioning state, which only appears
        /// in the response. Possible values include: &#39;InProgress&#39;, &#39;Failed&#39;, &#39;Succeeded&#39;, &#39;Canceled&#39;, &#39;Deleting&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets indicates whether this IP configuration is primary for the
        /// corresponding NIC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primary")]
        public bool? Primary {get; set; }

        /// <summary>
        /// Gets or sets the IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateIPAddress")]
        public string PrivateIPAddress {get; set; }

        /// <summary>
        /// Gets or sets the method that private IP address is allocated. Possible values include: &#39;dynamic&#39;, &#39;static&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateIPAllocationMethod")]
        public string PrivateIPAllocationMethod {get; set; }

        /// <summary>
        /// Gets or sets the subnet resource id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subnet")]
        public ResourceId Subnet {get; set; }
    }
}