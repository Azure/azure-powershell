// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.HDInsight.Models
{
    using System.Linq;

    /// <summary>
    /// The security profile which contains Ssh public key for the HDInsight
    /// cluster.
    /// </summary>
    public partial class SecurityProfile
    {
        /// <summary>
        /// Initializes a new instance of the SecurityProfile class.
        /// </summary>
        public SecurityProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityProfile class.
        /// </summary>

        /// <param name="directoryType">The directory type.
        /// Possible values include: &#39;ActiveDirectory&#39;</param>

        /// <param name="domain">The organization&#39;s active directory domain.
        /// </param>

        /// <param name="organizationalUnitDn">The organizational unit within the Active Directory to place the cluster
        /// and service accounts.
        /// </param>

        /// <param name="ldapsUrls">The LDAPS protocol URLs to communicate with the Active Directory.
        /// </param>

        /// <param name="domainUsername">The domain user account that will have admin privileges on the cluster.
        /// </param>

        /// <param name="domainUserPassword">The domain admin password.
        /// </param>

        /// <param name="clusterUsersGroupDNs">Optional. The Distinguished Names for cluster user groups
        /// </param>

        /// <param name="aaddsResourceId">The resource ID of the user&#39;s Azure Active Directory Domain Service.
        /// </param>

        /// <param name="msiResourceId">User assigned identity that has permissions to read and create
        /// cluster-related artifacts in the user&#39;s AADDS.
        /// </param>
        public SecurityProfile(string directoryType = default(string), string domain = default(string), string organizationalUnitDn = default(string), System.Collections.Generic.IList<string> ldapsUrls = default(System.Collections.Generic.IList<string>), string domainUsername = default(string), string domainUserPassword = default(string), System.Collections.Generic.IList<string> clusterUsersGroupDNs = default(System.Collections.Generic.IList<string>), string aaddsResourceId = default(string), string msiResourceId = default(string))

        {
            this.DirectoryType = directoryType;
            this.Domain = domain;
            this.OrganizationalUnitDn = organizationalUnitDn;
            this.LdapsUrls = ldapsUrls;
            this.DomainUsername = domainUsername;
            this.DomainUserPassword = domainUserPassword;
            this.ClusterUsersGroupDNs = clusterUsersGroupDNs;
            this.AaddsResourceId = aaddsResourceId;
            this.MsiResourceId = msiResourceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the directory type. Possible values include: &#39;ActiveDirectory&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "directoryType")]
        public string DirectoryType {get; set; }

        /// <summary>
        /// Gets or sets the organization&#39;s active directory domain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "domain")]
        public string Domain {get; set; }

        /// <summary>
        /// Gets or sets the organizational unit within the Active Directory to place
        /// the cluster and service accounts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "organizationalUnitDN")]
        public string OrganizationalUnitDn {get; set; }

        /// <summary>
        /// Gets or sets the LDAPS protocol URLs to communicate with the Active
        /// Directory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ldapsUrls")]
        public System.Collections.Generic.IList<string> LdapsUrls {get; set; }

        /// <summary>
        /// Gets or sets the domain user account that will have admin privileges on the
        /// cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "domainUsername")]
        public string DomainUsername {get; set; }

        /// <summary>
        /// Gets or sets the domain admin password.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "domainUserPassword")]
        public string DomainUserPassword {get; set; }

        /// <summary>
        /// Gets or sets optional. The Distinguished Names for cluster user groups
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clusterUsersGroupDNs")]
        public System.Collections.Generic.IList<string> ClusterUsersGroupDNs {get; set; }

        /// <summary>
        /// Gets or sets the resource ID of the user&#39;s Azure Active Directory Domain
        /// Service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "aaddsResourceId")]
        public string AaddsResourceId {get; set; }

        /// <summary>
        /// Gets or sets user assigned identity that has permissions to read and create
        /// cluster-related artifacts in the user&#39;s AADDS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "msiResourceId")]
        public string MsiResourceId {get; set; }
    }
}