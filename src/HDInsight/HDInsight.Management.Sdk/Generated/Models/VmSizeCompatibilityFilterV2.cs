// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.HDInsight.Models
{
    using System.Linq;

    /// <summary>
    /// This class represent a single filter object that defines a multidimensional
    /// set. The dimensions of this set are Regions, ClusterFlavors, NodeTypes and
    /// ClusterVersions. The constraint should be defined based on the following:
    /// FilterMode (Exclude vs Include), VMSizes (the vm sizes in affect of
    /// exclusion/inclusion) and the ordering of the Filters. Later filters
    /// override previous settings if conflicted.
    /// </summary>
    public partial class VmSizeCompatibilityFilterV2
    {
        /// <summary>
        /// Initializes a new instance of the VmSizeCompatibilityFilterV2 class.
        /// </summary>
        public VmSizeCompatibilityFilterV2()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VmSizeCompatibilityFilterV2 class.
        /// </summary>

        /// <param name="filterMode">The filtering mode. Effectively this can enabling or disabling the VM sizes
        /// in a particular set.
        /// Possible values include: &#39;Exclude&#39;, &#39;Include&#39;, &#39;Recommend&#39;, &#39;Default&#39;</param>

        /// <param name="regions">The list of regions under the effect of the filter.
        /// </param>

        /// <param name="clusterFlavors">The list of cluster flavors under the effect of the filter.
        /// </param>

        /// <param name="nodeTypes">The list of node types affected by the filter.
        /// </param>

        /// <param name="clusterVersions">The list of cluster versions affected in Major.Minor format.
        /// </param>

        /// <param name="osType">The OSType affected, Windows or Linux.
        /// </param>

        /// <param name="vmSizes">The list of virtual machine sizes to include or exclude.
        /// </param>

        /// <param name="espApplied">Whether apply for ESP cluster. &#39;true&#39; means only for ESP, &#39;false&#39; means
        /// only for non-ESP, null or empty string or others mean for both.
        /// </param>

        /// <param name="computeIsolationSupported">Whether support compute isolation. &#39;true&#39; means only for
        /// ComputeIsolationEnabled, &#39;false&#39; means only for regular cluster.
        /// </param>
        public VmSizeCompatibilityFilterV2(string filterMode = default(string), System.Collections.Generic.IList<string> regions = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> clusterFlavors = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> nodeTypes = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> clusterVersions = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> osType = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> vmSizes = default(System.Collections.Generic.IList<string>), string espApplied = default(string), string computeIsolationSupported = default(string))

        {
            this.FilterMode = filterMode;
            this.Regions = regions;
            this.ClusterFlavors = clusterFlavors;
            this.NodeTypes = nodeTypes;
            this.ClusterVersions = clusterVersions;
            this.OsType = osType;
            this.VMSizes = vmSizes;
            this.EspApplied = espApplied;
            this.ComputeIsolationSupported = computeIsolationSupported;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the filtering mode. Effectively this can enabling or disabling
        /// the VM sizes in a particular set. Possible values include: &#39;Exclude&#39;, &#39;Include&#39;, &#39;Recommend&#39;, &#39;Default&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "filterMode")]
        public string FilterMode {get; set; }

        /// <summary>
        /// Gets or sets the list of regions under the effect of the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "regions")]
        public System.Collections.Generic.IList<string> Regions {get; set; }

        /// <summary>
        /// Gets or sets the list of cluster flavors under the effect of the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clusterFlavors")]
        public System.Collections.Generic.IList<string> ClusterFlavors {get; set; }

        /// <summary>
        /// Gets or sets the list of node types affected by the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nodeTypes")]
        public System.Collections.Generic.IList<string> NodeTypes {get; set; }

        /// <summary>
        /// Gets or sets the list of cluster versions affected in Major.Minor format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clusterVersions")]
        public System.Collections.Generic.IList<string> ClusterVersions {get; set; }

        /// <summary>
        /// Gets or sets the OSType affected, Windows or Linux.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osType")]
        public System.Collections.Generic.IList<string> OsType {get; set; }

        /// <summary>
        /// Gets or sets the list of virtual machine sizes to include or exclude.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmSizes")]
        public System.Collections.Generic.IList<string> VMSizes {get; set; }

        /// <summary>
        /// Gets or sets whether apply for ESP cluster. &#39;true&#39; means only for ESP,
        /// &#39;false&#39; means only for non-ESP, null or empty string or others mean for
        /// both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "espApplied")]
        public string EspApplied {get; set; }

        /// <summary>
        /// Gets or sets whether support compute isolation. &#39;true&#39; means only for
        /// ComputeIsolationEnabled, &#39;false&#39; means only for regular cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "computeIsolationSupported")]
        public string ComputeIsolationSupported {get; set; }
    }
}