// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.HDInsight.Models
{
    using System.Linq;

    /// <summary>
    /// The HDInsight cluster.
    /// </summary>
    public partial class Cluster : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the Cluster class.
        /// </summary>
        public Cluster()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Cluster class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="location">The geo-location where the resource lives
        /// </param>

        /// <param name="etag">The ETag for the resource
        /// </param>

        /// <param name="zones">The availability zones.
        /// </param>

        /// <param name="properties">The properties of the cluster.
        /// </param>

        /// <param name="identity">The identity of the cluster, if configured.
        /// </param>

        /// <param name="systemData">Metadata pertaining to creation and last modification of the resource.
        /// </param>
        public Cluster(string location, string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string etag = default(string), System.Collections.Generic.IList<string> zones = default(System.Collections.Generic.IList<string>), ClusterGetProperties properties = default(ClusterGetProperties), ClusterIdentity identity = default(ClusterIdentity), SystemData systemData = default(SystemData))

        : base(location, id, name, type, tags)
        {
            this.Etag = etag;
            this.Zones = zones;
            this.Properties = properties;
            this.Identity = identity;
            this.SystemData = systemData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the ETag for the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; set; }

        /// <summary>
        /// Gets or sets the availability zones.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "zones")]
        public System.Collections.Generic.IList<string> Zones {get; set; }

        /// <summary>
        /// Gets or sets the properties of the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties")]
        public ClusterGetProperties Properties {get; set; }

        /// <summary>
        /// Gets or sets the identity of the cluster, if configured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public ClusterIdentity Identity {get; set; }

        /// <summary>
        /// Gets metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();


            if (this.Properties != null)
            {
                this.Properties.Validate();
            }


        }
    }
}