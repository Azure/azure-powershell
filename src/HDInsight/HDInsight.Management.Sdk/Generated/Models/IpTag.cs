// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.HDInsight.Models
{
    using System.Linq;

    /// <summary>
    /// Contains the IpTag associated with the public IP address
    /// </summary>
    public partial class IpTag
    {
        /// <summary>
        /// Initializes a new instance of the IpTag class.
        /// </summary>
        public IpTag()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IpTag class.
        /// </summary>

        /// <param name="ipTagType">Gets or sets the ipTag type: Example FirstPartyUsage.
        /// </param>

        /// <param name="tag">Gets or sets value of the IpTag associated with the public IP. Example
        /// HDInsight, SQL, Storage etc
        /// </param>
        public IpTag(string ipTagType, string tag)

        {
            this.IPTagType = ipTagType;
            this.Tag = tag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets gets or sets the ipTag type: Example FirstPartyUsage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipTagType")]
        public string IPTagType {get; set; }

        /// <summary>
        /// Gets or sets gets or sets value of the IpTag associated with the public IP.
        /// Example HDInsight, SQL, Storage etc
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tag")]
        public string Tag {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.IPTagType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "IPTagType");
            }
            if (this.Tag == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Tag");
            }


        }
    }
}