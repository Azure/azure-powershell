// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.HDInsight
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for VirtualMachinesOperations
    /// </summary>
    public static partial class VirtualMachinesOperationsExtensions
    {
        /// <summary>
        /// Lists the HDInsight clusters hosts
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        public static System.Collections.Generic.IList<HostInfo> ListHosts(this IVirtualMachinesOperations operations, string resourceGroupName, string clusterName)
        {
                return ((IVirtualMachinesOperations)operations).ListHostsAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the HDInsight clusters hosts
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<HostInfo>> ListHostsAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string clusterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListHostsWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Restarts the specified HDInsight cluster hosts.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        public static void RestartHosts(this IVirtualMachinesOperations operations, string resourceGroupName, string clusterName, System.Collections.Generic.IList<string> hosts)
        {
                ((IVirtualMachinesOperations)operations).RestartHostsAsync(resourceGroupName, clusterName, hosts).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Restarts the specified HDInsight cluster hosts.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RestartHostsAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string clusterName, System.Collections.Generic.IList<string> hosts, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RestartHostsWithHttpMessagesAsync(resourceGroupName, clusterName, hosts, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets the async operation status.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='operationId'>
        /// The long running operation id.
        /// </param>
        public static AsyncOperationResult GetAsyncOperationStatus(this IVirtualMachinesOperations operations, string resourceGroupName, string clusterName, string operationId)
        {
                return ((IVirtualMachinesOperations)operations).GetAsyncOperationStatusAsync(resourceGroupName, clusterName, operationId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the async operation status.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='operationId'>
        /// The long running operation id.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AsyncOperationResult> GetAsyncOperationStatusAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string clusterName, string operationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAsyncOperationStatusWithHttpMessagesAsync(resourceGroupName, clusterName, operationId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Restarts the specified HDInsight cluster hosts.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        public static void BeginRestartHosts(this IVirtualMachinesOperations operations, string resourceGroupName, string clusterName, System.Collections.Generic.IList<string> hosts)
        {
                ((IVirtualMachinesOperations)operations).BeginRestartHostsAsync(resourceGroupName, clusterName, hosts).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Restarts the specified HDInsight cluster hosts.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginRestartHostsAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string clusterName, System.Collections.Generic.IList<string> hosts, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginRestartHostsWithHttpMessagesAsync(resourceGroupName, clusterName, hosts, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
    }
}
