// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.HDInsight
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ExtensionsOperations
    /// </summary>
    public static partial class ExtensionsOperationsExtensions
    {
        /// <summary>
        /// Enables the Operations Management Suite (OMS) on the HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        public static void EnableMonitoring(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string workspaceId = default(string), string primaryKey = default(string))
        {
                ((IExtensionsOperations)operations).EnableMonitoringAsync(resourceGroupName, clusterName, workspaceId, primaryKey).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Enables the Operations Management Suite (OMS) on the HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task EnableMonitoringAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string workspaceId = default(string), string primaryKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.EnableMonitoringWithHttpMessagesAsync(resourceGroupName, clusterName, workspaceId, primaryKey, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets the status of Operations Management Suite (OMS) on the HDInsight
        /// cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        public static ClusterMonitoringResponse GetMonitoringStatus(this IExtensionsOperations operations, string resourceGroupName, string clusterName)
        {
                return ((IExtensionsOperations)operations).GetMonitoringStatusAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the status of Operations Management Suite (OMS) on the HDInsight
        /// cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ClusterMonitoringResponse> GetMonitoringStatusAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetMonitoringStatusWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Disables the Operations Management Suite (OMS) on the HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        public static void DisableMonitoring(this IExtensionsOperations operations, string resourceGroupName, string clusterName)
        {
                ((IExtensionsOperations)operations).DisableMonitoringAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Disables the Operations Management Suite (OMS) on the HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DisableMonitoringAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DisableMonitoringWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Enables the Azure Monitor on the HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        public static void EnableAzureMonitor(this IExtensionsOperations operations, string resourceGroupName, string clusterName, AzureMonitorRequest parameters)
        {
                ((IExtensionsOperations)operations).EnableAzureMonitorAsync(resourceGroupName, clusterName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Enables the Azure Monitor on the HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task EnableAzureMonitorAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, AzureMonitorRequest parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.EnableAzureMonitorWithHttpMessagesAsync(resourceGroupName, clusterName, parameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets the status of Azure Monitor on the HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        public static AzureMonitorResponse GetAzureMonitorStatus(this IExtensionsOperations operations, string resourceGroupName, string clusterName)
        {
                return ((IExtensionsOperations)operations).GetAzureMonitorStatusAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the status of Azure Monitor on the HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AzureMonitorResponse> GetAzureMonitorStatusAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAzureMonitorStatusWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Disables the Azure Monitor on the HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        public static void DisableAzureMonitor(this IExtensionsOperations operations, string resourceGroupName, string clusterName)
        {
                ((IExtensionsOperations)operations).DisableAzureMonitorAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Disables the Azure Monitor on the HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DisableAzureMonitorAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DisableAzureMonitorWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Creates an HDInsight cluster extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='extensionName'>
        /// The name of the cluster extension.
        /// </param>
        public static void Create(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string extensionName, string workspaceId = default(string), string primaryKey = default(string))
        {
                ((IExtensionsOperations)operations).CreateAsync(resourceGroupName, clusterName, extensionName, workspaceId, primaryKey).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates an HDInsight cluster extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='extensionName'>
        /// The name of the cluster extension.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task CreateAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string extensionName, string workspaceId = default(string), string primaryKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.CreateWithHttpMessagesAsync(resourceGroupName, clusterName, extensionName, workspaceId, primaryKey, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets the extension properties for the specified HDInsight cluster
        /// extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='extensionName'>
        /// The name of the cluster extension.
        /// </param>
        public static ClusterMonitoringResponse Get(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string extensionName)
        {
                return ((IExtensionsOperations)operations).GetAsync(resourceGroupName, clusterName, extensionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the extension properties for the specified HDInsight cluster
        /// extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='extensionName'>
        /// The name of the cluster extension.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ClusterMonitoringResponse> GetAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string extensionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, clusterName, extensionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the specified extension for HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='extensionName'>
        /// The name of the cluster extension.
        /// </param>
        public static void Delete(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string extensionName)
        {
                ((IExtensionsOperations)operations).DeleteAsync(resourceGroupName, clusterName, extensionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified extension for HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='extensionName'>
        /// The name of the cluster extension.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string extensionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, clusterName, extensionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets the async operation status.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='extensionName'>
        /// The name of the cluster extension.
        /// </param>
        /// <param name='operationId'>
        /// The long running operation id.
        /// </param>
        public static AsyncOperationResult GetAzureAsyncOperationStatus(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string extensionName, string operationId)
        {
                return ((IExtensionsOperations)operations).GetAzureAsyncOperationStatusAsync(resourceGroupName, clusterName, extensionName, operationId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the async operation status.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='extensionName'>
        /// The name of the cluster extension.
        /// </param>
        /// <param name='operationId'>
        /// The long running operation id.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AsyncOperationResult> GetAzureAsyncOperationStatusAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string extensionName, string operationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAzureAsyncOperationStatusWithHttpMessagesAsync(resourceGroupName, clusterName, extensionName, operationId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Enables the Operations Management Suite (OMS) on the HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        public static void BeginEnableMonitoring(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string workspaceId = default(string), string primaryKey = default(string))
        {
                ((IExtensionsOperations)operations).BeginEnableMonitoringAsync(resourceGroupName, clusterName, workspaceId, primaryKey).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Enables the Operations Management Suite (OMS) on the HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginEnableMonitoringAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string workspaceId = default(string), string primaryKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginEnableMonitoringWithHttpMessagesAsync(resourceGroupName, clusterName, workspaceId, primaryKey, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Disables the Operations Management Suite (OMS) on the HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        public static void BeginDisableMonitoring(this IExtensionsOperations operations, string resourceGroupName, string clusterName)
        {
                ((IExtensionsOperations)operations).BeginDisableMonitoringAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Disables the Operations Management Suite (OMS) on the HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDisableMonitoringAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDisableMonitoringWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Enables the Azure Monitor on the HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        public static void BeginEnableAzureMonitor(this IExtensionsOperations operations, string resourceGroupName, string clusterName, AzureMonitorRequest parameters)
        {
                ((IExtensionsOperations)operations).BeginEnableAzureMonitorAsync(resourceGroupName, clusterName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Enables the Azure Monitor on the HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginEnableAzureMonitorAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, AzureMonitorRequest parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginEnableAzureMonitorWithHttpMessagesAsync(resourceGroupName, clusterName, parameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Disables the Azure Monitor on the HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        public static void BeginDisableAzureMonitor(this IExtensionsOperations operations, string resourceGroupName, string clusterName)
        {
                ((IExtensionsOperations)operations).BeginDisableAzureMonitorAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Disables the Azure Monitor on the HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDisableAzureMonitorAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDisableAzureMonitorWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Creates an HDInsight cluster extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='extensionName'>
        /// The name of the cluster extension.
        /// </param>
        public static void BeginCreate(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string extensionName, string workspaceId = default(string), string primaryKey = default(string))
        {
                ((IExtensionsOperations)operations).BeginCreateAsync(resourceGroupName, clusterName, extensionName, workspaceId, primaryKey).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates an HDInsight cluster extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='extensionName'>
        /// The name of the cluster extension.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginCreateAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string extensionName, string workspaceId = default(string), string primaryKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, clusterName, extensionName, workspaceId, primaryKey, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Deletes the specified extension for HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='extensionName'>
        /// The name of the cluster extension.
        /// </param>
        public static void BeginDelete(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string extensionName)
        {
                ((IExtensionsOperations)operations).BeginDeleteAsync(resourceGroupName, clusterName, extensionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified extension for HDInsight cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='clusterName'>
        /// The name of the cluster.
        /// </param>
        /// <param name='extensionName'>
        /// The name of the cluster extension.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string extensionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, clusterName, extensionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
    }
}
