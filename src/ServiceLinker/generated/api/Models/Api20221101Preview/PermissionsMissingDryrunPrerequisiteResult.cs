// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.Api20221101Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Extensions;

    /// <summary>The represent of missing permissions</summary>
    public partial class PermissionsMissingDryrunPrerequisiteResult :
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.Api20221101Preview.IPermissionsMissingDryrunPrerequisiteResult,
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.Api20221101Preview.IPermissionsMissingDryrunPrerequisiteResultInternal,
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.Api20221101Preview.IDryrunPrerequisiteResult"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.Api20221101Preview.IDryrunPrerequisiteResult __dryrunPrerequisiteResult = new Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.Api20221101Preview.DryrunPrerequisiteResult();

        /// <summary>Backing field for <see cref="Permission" /> property.</summary>
        private string[] _permission;

        /// <summary>The permission list</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Owned)]
        public string[] Permission { get => this._permission; set => this._permission = value; }

        /// <summary>Backing field for <see cref="RecommendedRole" /> property.</summary>
        private string _recommendedRole;

        /// <summary>The recommended role to resolve permissions missing</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Owned)]
        public string RecommendedRole { get => this._recommendedRole; set => this._recommendedRole = value; }

        /// <summary>Backing field for <see cref="Scope" /> property.</summary>
        private string _scope;

        /// <summary>The permission scope</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Owned)]
        public string Scope { get => this._scope; set => this._scope = value; }

        /// <summary>The type of dryrun result.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Support.DryrunPrerequisiteResultType Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.Api20221101Preview.IDryrunPrerequisiteResultInternal)__dryrunPrerequisiteResult).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.Api20221101Preview.IDryrunPrerequisiteResultInternal)__dryrunPrerequisiteResult).Type = value ; }

        /// <summary>
        /// Creates an new <see cref="PermissionsMissingDryrunPrerequisiteResult" /> instance.
        /// </summary>
        public PermissionsMissingDryrunPrerequisiteResult()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__dryrunPrerequisiteResult), __dryrunPrerequisiteResult);
            await eventListener.AssertObjectIsValid(nameof(__dryrunPrerequisiteResult), __dryrunPrerequisiteResult);
        }
    }
    /// The represent of missing permissions
    public partial interface IPermissionsMissingDryrunPrerequisiteResult :
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.Api20221101Preview.IDryrunPrerequisiteResult
    {
        /// <summary>The permission list</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The permission list",
        SerializedName = @"permissions",
        PossibleTypes = new [] { typeof(string) })]
        string[] Permission { get; set; }
        /// <summary>The recommended role to resolve permissions missing</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The recommended role to resolve permissions missing",
        SerializedName = @"recommendedRole",
        PossibleTypes = new [] { typeof(string) })]
        string RecommendedRole { get; set; }
        /// <summary>The permission scope</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The permission scope",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        string Scope { get; set; }

    }
    /// The represent of missing permissions
    internal partial interface IPermissionsMissingDryrunPrerequisiteResultInternal :
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.Api20221101Preview.IDryrunPrerequisiteResultInternal
    {
        /// <summary>The permission list</summary>
        string[] Permission { get; set; }
        /// <summary>The recommended role to resolve permissions missing</summary>
        string RecommendedRole { get; set; }
        /// <summary>The permission scope</summary>
        string Scope { get; set; }

    }
}