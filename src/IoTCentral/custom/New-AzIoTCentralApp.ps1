
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create or update the metadata of an IoT Central application.
The usual pattern to modify a property is to retrieve the IoT Central application metadata and security metadata, and then combine them with the modified values in a new body to update the IoT Central application.
.Description
Create or update the metadata of an IoT Central application.
The usual pattern to modify a property is to retrieve the IoT Central application metadata and security metadata, and then combine them with the modified values in a new body to update the IoT Central application.
.Example
New-AzIoTCentralApp -Name azpstest-iot -ResourceGroupName azpstest-gp -Location westus -SkuName ST2 -DisplayName "My IoT Central App" -IdentityType 'SystemAssigned' -Subdomain "my-iot-central-app" -Template "iotc-pnp-preview@1.0.0" -Tag @{"IoTCentral"="apiversion20220601"}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Models.Api20211101Preview.IApp
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

NETWORKRULESETIPRULE <INetworkRuleSetIPRule[]>: List of IP rules.
  [FilterName <String>]: The readable name of the IP rule.
  [IPMask <String>]: The CIDR block defining the IP range.
.Link
https://docs.microsoft.com/powershell/module/az.iotcentral/new-aziotcentralapp
#>
function New-AzIoTCentralApp {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Models.Api20211101Preview.IApp])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Path')]
    [System.String]
    # The ARM resource name of the IoT Central application.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Path')]
    [System.String]
    # The name of the resource group that contains the IoT Central application.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The subscription identifier.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter(Mandatory)]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Support.AppSku])]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Support.AppSku]
    # The name of the SKU.
    ${SkuName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Body')]
    [System.String]
    # The display name of the application.
    ${DisplayName},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Support.SystemAssignedServiceIdentityType])]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Support.SystemAssignedServiceIdentityType]
    # Type of managed service identity (either system assigned, or none).
    ${IdentityType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Whether these rules apply for device connectivity to IoT Hub and Device Provisioning service associated with this application.
    ${NetworkRuleSetApplyToDevice},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Whether these rules apply for connectivity via IoT Central web portal and APIs.
    ${NetworkRuleSetApplyToIoTCentral},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Support.NetworkAction])]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Support.NetworkAction]
    # The default network action to apply.
    ${NetworkRuleSetDefaultAction},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Models.Api20211101Preview.INetworkRuleSetIPRule[]]
    # List of IP rules.
    # To construct, see NOTES section for NETWORKRULESETIPRULE properties and create a hash table.
    ${NetworkRuleSetIPRule},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Support.PublicNetworkAccess])]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Support.PublicNetworkAccess]
    # Whether requests from the public network are allowed.
    ${PublicNetworkAccess},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Body')]
    [System.String]
    # The subdomain of the application.
    ${Subdomain},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Models.Api30.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Body')]
    [System.String]
    # The ID of the application template, which is a blueprint that defines the characteristics and behaviors of an application.
    # Optional; if not specified, defaults to a blank blueprint and allows the application to be defined from scratch.
    ${Template},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.IoTCentral.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        $mapping = @{
            CreateExpanded = 'Az.IoTCentral.private\New-AzIoTCentralApp_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }

        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {

        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {

        throw
    }

}
end {
    try {
        $steppablePipeline.End()

    } catch {

        throw
    }
} 
}
