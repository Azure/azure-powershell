// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DataFactory
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for PrivateEndpointConnectionOperations
    /// </summary>
    public static partial class PrivateEndpointConnectionOperationsExtensions
    {
        /// <summary>
        /// Approves or rejects a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The private endpoint connection name.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the private endpoint connection entity.  Should only be specified
        /// for update, for which it should match existing entity or can be * for
        /// unconditional update.
        /// </param>
        public static PrivateEndpointConnectionResource CreateOrUpdate(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string factoryName, string privateEndpointConnectionName, PrivateLinkConnectionApprovalRequest properties = default(PrivateLinkConnectionApprovalRequest), string ifMatch = default(string))
        {
                return ((IPrivateEndpointConnectionOperations)operations).CreateOrUpdateAsync(resourceGroupName, factoryName, privateEndpointConnectionName, properties, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Approves or rejects a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The private endpoint connection name.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the private endpoint connection entity.  Should only be specified
        /// for update, for which it should match existing entity or can be * for
        /// unconditional update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateEndpointConnectionResource> CreateOrUpdateAsync(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string factoryName, string privateEndpointConnectionName, PrivateLinkConnectionApprovalRequest properties = default(PrivateLinkConnectionApprovalRequest), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, factoryName, privateEndpointConnectionName, properties, ifMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The private endpoint connection name.
        /// </param>
        /// <param name='ifNoneMatch'>
        /// ETag of the private endpoint connection entity. Should only be specified
        /// for get. If the ETag matches the existing entity tag, or if * was provided,
        /// then no content will be returned.
        /// </param>
        public static PrivateEndpointConnectionResource Get(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string factoryName, string privateEndpointConnectionName, string ifNoneMatch = default(string))
        {
                return ((IPrivateEndpointConnectionOperations)operations).GetAsync(resourceGroupName, factoryName, privateEndpointConnectionName, ifNoneMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The private endpoint connection name.
        /// </param>
        /// <param name='ifNoneMatch'>
        /// ETag of the private endpoint connection entity. Should only be specified
        /// for get. If the ETag matches the existing entity tag, or if * was provided,
        /// then no content will be returned.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateEndpointConnectionResource> GetAsync(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string factoryName, string privateEndpointConnectionName, string ifNoneMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, factoryName, privateEndpointConnectionName, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The private endpoint connection name.
        /// </param>
        public static void Delete(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string factoryName, string privateEndpointConnectionName)
        {
                ((IPrivateEndpointConnectionOperations)operations).DeleteAsync(resourceGroupName, factoryName, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The private endpoint connection name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string factoryName, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, factoryName, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
    }
}
