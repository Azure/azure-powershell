// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DataFactory
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for CredentialOperations
    /// </summary>
    public static partial class CredentialOperationsExtensions
    {
        /// <summary>
        /// List credentials.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CredentialResource> ListByFactory(this ICredentialOperations operations, string resourceGroupName, string factoryName)
        {
                return ((ICredentialOperations)operations).ListByFactoryAsync(resourceGroupName, factoryName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List credentials.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CredentialResource>> ListByFactoryAsync(this ICredentialOperations operations, string resourceGroupName, string factoryName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByFactoryWithHttpMessagesAsync(resourceGroupName, factoryName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a credential.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='credentialName'>
        /// Credential name
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the credential entity. Should only be specified for update, for
        /// which it should match existing entity or can be * for unconditional update.
        /// </param>
        public static CredentialResource CreateOrUpdate(this ICredentialOperations operations, string resourceGroupName, string factoryName, string credentialName, Credential properties, string ifMatch = default(string))
        {
                return ((ICredentialOperations)operations).CreateOrUpdateAsync(resourceGroupName, factoryName, credentialName, properties, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a credential.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='credentialName'>
        /// Credential name
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the credential entity. Should only be specified for update, for
        /// which it should match existing entity or can be * for unconditional update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CredentialResource> CreateOrUpdateAsync(this ICredentialOperations operations, string resourceGroupName, string factoryName, string credentialName, Credential properties, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, factoryName, credentialName, properties, ifMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a credential.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='credentialName'>
        /// Credential name
        /// </param>
        /// <param name='ifNoneMatch'>
        /// ETag of the credential entity. Should only be specified for get. If the
        /// ETag matches the existing entity tag, or if * was provided, then no content
        /// will be returned.
        /// </param>
        public static CredentialResource Get(this ICredentialOperations operations, string resourceGroupName, string factoryName, string credentialName, string ifNoneMatch = default(string))
        {
                return ((ICredentialOperations)operations).GetAsync(resourceGroupName, factoryName, credentialName, ifNoneMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a credential.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='credentialName'>
        /// Credential name
        /// </param>
        /// <param name='ifNoneMatch'>
        /// ETag of the credential entity. Should only be specified for get. If the
        /// ETag matches the existing entity tag, or if * was provided, then no content
        /// will be returned.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CredentialResource> GetAsync(this ICredentialOperations operations, string resourceGroupName, string factoryName, string credentialName, string ifNoneMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, factoryName, credentialName, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a credential.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='credentialName'>
        /// Credential name
        /// </param>
        public static void Delete(this ICredentialOperations operations, string resourceGroupName, string factoryName, string credentialName)
        {
                ((ICredentialOperations)operations).DeleteAsync(resourceGroupName, factoryName, credentialName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a credential.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='credentialName'>
        /// Credential name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this ICredentialOperations operations, string resourceGroupName, string factoryName, string credentialName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, factoryName, credentialName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// List credentials.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CredentialResource> ListByFactoryNext(this ICredentialOperations operations, string nextPageLink)
        {
                return ((ICredentialOperations)operations).ListByFactoryNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List credentials.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CredentialResource>> ListByFactoryNextAsync(this ICredentialOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByFactoryNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
