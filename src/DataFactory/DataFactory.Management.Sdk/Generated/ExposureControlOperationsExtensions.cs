// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DataFactory
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ExposureControlOperations
    /// </summary>
    public static partial class ExposureControlOperationsExtensions
    {
        /// <summary>
        /// Get exposure control feature for specific location.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationId'>
        /// The location identifier.
        /// </param>
        public static ExposureControlResponse GetFeatureValue(this IExposureControlOperations operations, string locationId, string featureName = default(string), string featureType = default(string))
        {
                return ((IExposureControlOperations)operations).GetFeatureValueAsync(locationId, featureName, featureType).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get exposure control feature for specific location.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationId'>
        /// The location identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ExposureControlResponse> GetFeatureValueAsync(this IExposureControlOperations operations, string locationId, string featureName = default(string), string featureType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetFeatureValueWithHttpMessagesAsync(locationId, featureName, featureType, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get exposure control feature for specific factory.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        public static ExposureControlResponse GetFeatureValueByFactory(this IExposureControlOperations operations, string resourceGroupName, string factoryName, string featureName = default(string), string featureType = default(string))
        {
                return ((IExposureControlOperations)operations).GetFeatureValueByFactoryAsync(resourceGroupName, factoryName, featureName, featureType).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get exposure control feature for specific factory.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ExposureControlResponse> GetFeatureValueByFactoryAsync(this IExposureControlOperations operations, string resourceGroupName, string factoryName, string featureName = default(string), string featureType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetFeatureValueByFactoryWithHttpMessagesAsync(resourceGroupName, factoryName, featureName, featureType, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get list of exposure control features for specific factory.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        public static ExposureControlBatchResponse QueryFeatureValuesByFactory(this IExposureControlOperations operations, string resourceGroupName, string factoryName, System.Collections.Generic.IList<ExposureControlRequest> exposureControlRequests)
        {
                return ((IExposureControlOperations)operations).QueryFeatureValuesByFactoryAsync(resourceGroupName, factoryName, exposureControlRequests).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get list of exposure control features for specific factory.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ExposureControlBatchResponse> QueryFeatureValuesByFactoryAsync(this IExposureControlOperations operations, string resourceGroupName, string factoryName, System.Collections.Generic.IList<ExposureControlRequest> exposureControlRequests, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.QueryFeatureValuesByFactoryWithHttpMessagesAsync(resourceGroupName, factoryName, exposureControlRequests, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
