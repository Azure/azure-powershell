// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ChangeDataCaptureOperations.
    /// </summary>
    public static partial class ChangeDataCaptureOperationsExtensions
    {
            /// <summary>
            /// Lists all resources of type change data capture.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            public static IPage<ChangeDataCaptureResource> ListByFactory(this IChangeDataCaptureOperations operations, string resourceGroupName, string factoryName)
            {
                return operations.ListByFactoryAsync(resourceGroupName, factoryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all resources of type change data capture.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ChangeDataCaptureResource>> ListByFactoryAsync(this IChangeDataCaptureOperations operations, string resourceGroupName, string factoryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByFactoryWithHttpMessagesAsync(resourceGroupName, factoryName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a change data capture resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='changeDataCaptureName'>
            /// The change data capture name.
            /// </param>
            /// <param name='changeDataCapture'>
            /// Change data capture resource definition.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the change data capture entity. Should only be specified for
            /// update, for which it should match existing entity or can be * for
            /// unconditional update.
            /// </param>
            public static ChangeDataCaptureResource CreateOrUpdate(this IChangeDataCaptureOperations operations, string resourceGroupName, string factoryName, string changeDataCaptureName, ChangeDataCaptureResource changeDataCapture, string ifMatch = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, factoryName, changeDataCaptureName, changeDataCapture, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a change data capture resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='changeDataCaptureName'>
            /// The change data capture name.
            /// </param>
            /// <param name='changeDataCapture'>
            /// Change data capture resource definition.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the change data capture entity. Should only be specified for
            /// update, for which it should match existing entity or can be * for
            /// unconditional update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ChangeDataCaptureResource> CreateOrUpdateAsync(this IChangeDataCaptureOperations operations, string resourceGroupName, string factoryName, string changeDataCaptureName, ChangeDataCaptureResource changeDataCapture, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, factoryName, changeDataCaptureName, changeDataCapture, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a change data capture.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='changeDataCaptureName'>
            /// The change data capture name.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// ETag of the change data capture entity. Should only be specified for get.
            /// If the ETag matches the existing entity tag, or if * was provided, then no
            /// content will be returned.
            /// </param>
            public static ChangeDataCaptureResource Get(this IChangeDataCaptureOperations operations, string resourceGroupName, string factoryName, string changeDataCaptureName, string ifNoneMatch = default(string))
            {
                return operations.GetAsync(resourceGroupName, factoryName, changeDataCaptureName, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a change data capture.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='changeDataCaptureName'>
            /// The change data capture name.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// ETag of the change data capture entity. Should only be specified for get.
            /// If the ETag matches the existing entity tag, or if * was provided, then no
            /// content will be returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ChangeDataCaptureResource> GetAsync(this IChangeDataCaptureOperations operations, string resourceGroupName, string factoryName, string changeDataCaptureName, string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, factoryName, changeDataCaptureName, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a change data capture.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='changeDataCaptureName'>
            /// The change data capture name.
            /// </param>
            public static void Delete(this IChangeDataCaptureOperations operations, string resourceGroupName, string factoryName, string changeDataCaptureName)
            {
                operations.DeleteAsync(resourceGroupName, factoryName, changeDataCaptureName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a change data capture.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='changeDataCaptureName'>
            /// The change data capture name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IChangeDataCaptureOperations operations, string resourceGroupName, string factoryName, string changeDataCaptureName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, factoryName, changeDataCaptureName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Starts a change data capture.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='changeDataCaptureName'>
            /// The change data capture name.
            /// </param>
            public static void Start(this IChangeDataCaptureOperations operations, string resourceGroupName, string factoryName, string changeDataCaptureName)
            {
                operations.StartAsync(resourceGroupName, factoryName, changeDataCaptureName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts a change data capture.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='changeDataCaptureName'>
            /// The change data capture name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartAsync(this IChangeDataCaptureOperations operations, string resourceGroupName, string factoryName, string changeDataCaptureName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartWithHttpMessagesAsync(resourceGroupName, factoryName, changeDataCaptureName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stops a change data capture.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='changeDataCaptureName'>
            /// The change data capture name.
            /// </param>
            public static void Stop(this IChangeDataCaptureOperations operations, string resourceGroupName, string factoryName, string changeDataCaptureName)
            {
                operations.StopAsync(resourceGroupName, factoryName, changeDataCaptureName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops a change data capture.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='changeDataCaptureName'>
            /// The change data capture name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopAsync(this IChangeDataCaptureOperations operations, string resourceGroupName, string factoryName, string changeDataCaptureName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopWithHttpMessagesAsync(resourceGroupName, factoryName, changeDataCaptureName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the current status for the change data capture resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='changeDataCaptureName'>
            /// The change data capture name.
            /// </param>
            public static string Status(this IChangeDataCaptureOperations operations, string resourceGroupName, string factoryName, string changeDataCaptureName)
            {
                return operations.StatusAsync(resourceGroupName, factoryName, changeDataCaptureName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the current status for the change data capture resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='changeDataCaptureName'>
            /// The change data capture name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> StatusAsync(this IChangeDataCaptureOperations operations, string resourceGroupName, string factoryName, string changeDataCaptureName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StatusWithHttpMessagesAsync(resourceGroupName, factoryName, changeDataCaptureName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all resources of type change data capture.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ChangeDataCaptureResource> ListByFactoryNext(this IChangeDataCaptureOperations operations, string nextPageLink)
            {
                return operations.ListByFactoryNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all resources of type change data capture.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ChangeDataCaptureResource>> ListByFactoryNextAsync(this IChangeDataCaptureOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByFactoryNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
