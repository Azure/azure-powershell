// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DataFactory
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ManagedPrivateEndpointsOperations
    /// </summary>
    public static partial class ManagedPrivateEndpointsOperationsExtensions
    {
        /// <summary>
        /// Lists managed private endpoints.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='managedVirtualNetworkName'>
        /// Managed virtual network name
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ManagedPrivateEndpointResource> ListByFactory(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string factoryName, string managedVirtualNetworkName)
        {
                return ((IManagedPrivateEndpointsOperations)operations).ListByFactoryAsync(resourceGroupName, factoryName, managedVirtualNetworkName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists managed private endpoints.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='managedVirtualNetworkName'>
        /// Managed virtual network name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ManagedPrivateEndpointResource>> ListByFactoryAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string factoryName, string managedVirtualNetworkName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByFactoryWithHttpMessagesAsync(resourceGroupName, factoryName, managedVirtualNetworkName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a managed private endpoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='managedVirtualNetworkName'>
        /// Managed virtual network name
        /// </param>
        /// <param name='managedPrivateEndpointName'>
        /// Managed private endpoint name
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the managed private endpoint entity. Should only be specified for
        /// update, for which it should match existing entity or can be * for
        /// unconditional update.
        /// </param>
        public static ManagedPrivateEndpointResource CreateOrUpdate(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string factoryName, string managedVirtualNetworkName, string managedPrivateEndpointName, ManagedPrivateEndpoint properties, string ifMatch = default(string))
        {
                return ((IManagedPrivateEndpointsOperations)operations).CreateOrUpdateAsync(resourceGroupName, factoryName, managedVirtualNetworkName, managedPrivateEndpointName, properties, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a managed private endpoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='managedVirtualNetworkName'>
        /// Managed virtual network name
        /// </param>
        /// <param name='managedPrivateEndpointName'>
        /// Managed private endpoint name
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the managed private endpoint entity. Should only be specified for
        /// update, for which it should match existing entity or can be * for
        /// unconditional update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ManagedPrivateEndpointResource> CreateOrUpdateAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string factoryName, string managedVirtualNetworkName, string managedPrivateEndpointName, ManagedPrivateEndpoint properties, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, factoryName, managedVirtualNetworkName, managedPrivateEndpointName, properties, ifMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a managed private endpoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='managedVirtualNetworkName'>
        /// Managed virtual network name
        /// </param>
        /// <param name='managedPrivateEndpointName'>
        /// Managed private endpoint name
        /// </param>
        /// <param name='ifNoneMatch'>
        /// ETag of the managed private endpoint entity. Should only be specified for
        /// get. If the ETag matches the existing entity tag, or if * was provided,
        /// then no content will be returned.
        /// </param>
        public static ManagedPrivateEndpointResource Get(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string factoryName, string managedVirtualNetworkName, string managedPrivateEndpointName, string ifNoneMatch = default(string))
        {
                return ((IManagedPrivateEndpointsOperations)operations).GetAsync(resourceGroupName, factoryName, managedVirtualNetworkName, managedPrivateEndpointName, ifNoneMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a managed private endpoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='managedVirtualNetworkName'>
        /// Managed virtual network name
        /// </param>
        /// <param name='managedPrivateEndpointName'>
        /// Managed private endpoint name
        /// </param>
        /// <param name='ifNoneMatch'>
        /// ETag of the managed private endpoint entity. Should only be specified for
        /// get. If the ETag matches the existing entity tag, or if * was provided,
        /// then no content will be returned.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ManagedPrivateEndpointResource> GetAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string factoryName, string managedVirtualNetworkName, string managedPrivateEndpointName, string ifNoneMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, factoryName, managedVirtualNetworkName, managedPrivateEndpointName, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a managed private endpoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='managedVirtualNetworkName'>
        /// Managed virtual network name
        /// </param>
        /// <param name='managedPrivateEndpointName'>
        /// Managed private endpoint name
        /// </param>
        public static void Delete(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string factoryName, string managedVirtualNetworkName, string managedPrivateEndpointName)
        {
                ((IManagedPrivateEndpointsOperations)operations).DeleteAsync(resourceGroupName, factoryName, managedVirtualNetworkName, managedPrivateEndpointName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a managed private endpoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='managedVirtualNetworkName'>
        /// Managed virtual network name
        /// </param>
        /// <param name='managedPrivateEndpointName'>
        /// Managed private endpoint name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string factoryName, string managedVirtualNetworkName, string managedPrivateEndpointName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, factoryName, managedVirtualNetworkName, managedPrivateEndpointName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists managed private endpoints.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ManagedPrivateEndpointResource> ListByFactoryNext(this IManagedPrivateEndpointsOperations operations, string nextPageLink)
        {
                return ((IManagedPrivateEndpointsOperations)operations).ListByFactoryNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists managed private endpoints.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ManagedPrivateEndpointResource>> ListByFactoryNextAsync(this IManagedPrivateEndpointsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByFactoryNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
