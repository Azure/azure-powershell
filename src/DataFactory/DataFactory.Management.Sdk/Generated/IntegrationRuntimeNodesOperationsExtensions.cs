// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DataFactory
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for IntegrationRuntimeNodesOperations
    /// </summary>
    public static partial class IntegrationRuntimeNodesOperationsExtensions
    {
        /// <summary>
        /// Gets a self-hosted integration runtime node.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='integrationRuntimeName'>
        /// The integration runtime name.
        /// </param>
        /// <param name='nodeName'>
        /// The integration runtime node name.
        /// </param>
        public static SelfHostedIntegrationRuntimeNode Get(this IIntegrationRuntimeNodesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, string nodeName)
        {
                return ((IIntegrationRuntimeNodesOperations)operations).GetAsync(resourceGroupName, factoryName, integrationRuntimeName, nodeName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a self-hosted integration runtime node.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='integrationRuntimeName'>
        /// The integration runtime name.
        /// </param>
        /// <param name='nodeName'>
        /// The integration runtime node name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SelfHostedIntegrationRuntimeNode> GetAsync(this IIntegrationRuntimeNodesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, string nodeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, nodeName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a self-hosted integration runtime node.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='integrationRuntimeName'>
        /// The integration runtime name.
        /// </param>
        /// <param name='nodeName'>
        /// The integration runtime node name.
        /// </param>
        public static void Delete(this IIntegrationRuntimeNodesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, string nodeName)
        {
                ((IIntegrationRuntimeNodesOperations)operations).DeleteAsync(resourceGroupName, factoryName, integrationRuntimeName, nodeName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a self-hosted integration runtime node.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='integrationRuntimeName'>
        /// The integration runtime name.
        /// </param>
        /// <param name='nodeName'>
        /// The integration runtime node name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IIntegrationRuntimeNodesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, string nodeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, nodeName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Updates a self-hosted integration runtime node.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='integrationRuntimeName'>
        /// The integration runtime name.
        /// </param>
        /// <param name='nodeName'>
        /// The integration runtime node name.
        /// </param>
        public static SelfHostedIntegrationRuntimeNode Update(this IIntegrationRuntimeNodesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, string nodeName, int? concurrentJobsLimit = default(int?))
        {
                return ((IIntegrationRuntimeNodesOperations)operations).UpdateAsync(resourceGroupName, factoryName, integrationRuntimeName, nodeName, concurrentJobsLimit).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates a self-hosted integration runtime node.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='integrationRuntimeName'>
        /// The integration runtime name.
        /// </param>
        /// <param name='nodeName'>
        /// The integration runtime node name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SelfHostedIntegrationRuntimeNode> UpdateAsync(this IIntegrationRuntimeNodesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, string nodeName, int? concurrentJobsLimit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, nodeName, concurrentJobsLimit, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get the IP address of self-hosted integration runtime node.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='integrationRuntimeName'>
        /// The integration runtime name.
        /// </param>
        /// <param name='nodeName'>
        /// The integration runtime node name.
        /// </param>
        public static IntegrationRuntimeNodeIpAddress GetIpAddress(this IIntegrationRuntimeNodesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, string nodeName)
        {
                return ((IIntegrationRuntimeNodesOperations)operations).GetIpAddressAsync(resourceGroupName, factoryName, integrationRuntimeName, nodeName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the IP address of self-hosted integration runtime node.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='integrationRuntimeName'>
        /// The integration runtime name.
        /// </param>
        /// <param name='nodeName'>
        /// The integration runtime node name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IntegrationRuntimeNodeIpAddress> GetIpAddressAsync(this IIntegrationRuntimeNodesOperations operations, string resourceGroupName, string factoryName, string integrationRuntimeName, string nodeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetIpAddressWithHttpMessagesAsync(resourceGroupName, factoryName, integrationRuntimeName, nodeName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
