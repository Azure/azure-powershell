// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DataFactory
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for GlobalParametersOperations
    /// </summary>
    public static partial class GlobalParametersOperationsExtensions
    {
        /// <summary>
        /// Lists Global parameters
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<GlobalParameterResource> ListByFactory(this IGlobalParametersOperations operations, string resourceGroupName, string factoryName)
        {
                return ((IGlobalParametersOperations)operations).ListByFactoryAsync(resourceGroupName, factoryName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists Global parameters
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<GlobalParameterResource>> ListByFactoryAsync(this IGlobalParametersOperations operations, string resourceGroupName, string factoryName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByFactoryWithHttpMessagesAsync(resourceGroupName, factoryName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a Global parameter
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='globalParameterName'>
        /// The global parameter name.
        /// </param>
        public static GlobalParameterResource Get(this IGlobalParametersOperations operations, string resourceGroupName, string factoryName, string globalParameterName)
        {
                return ((IGlobalParametersOperations)operations).GetAsync(resourceGroupName, factoryName, globalParameterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a Global parameter
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='globalParameterName'>
        /// The global parameter name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<GlobalParameterResource> GetAsync(this IGlobalParametersOperations operations, string resourceGroupName, string factoryName, string globalParameterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, factoryName, globalParameterName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a Global parameter
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='globalParameterName'>
        /// The global parameter name.
        /// </param>
        public static GlobalParameterResource CreateOrUpdate(this IGlobalParametersOperations operations, string resourceGroupName, string factoryName, string globalParameterName, System.Collections.Generic.IDictionary<string, GlobalParameterSpecification> properties)
        {
                return ((IGlobalParametersOperations)operations).CreateOrUpdateAsync(resourceGroupName, factoryName, globalParameterName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a Global parameter
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='globalParameterName'>
        /// The global parameter name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<GlobalParameterResource> CreateOrUpdateAsync(this IGlobalParametersOperations operations, string resourceGroupName, string factoryName, string globalParameterName, System.Collections.Generic.IDictionary<string, GlobalParameterSpecification> properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, factoryName, globalParameterName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a Global parameter
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='globalParameterName'>
        /// The global parameter name.
        /// </param>
        public static void Delete(this IGlobalParametersOperations operations, string resourceGroupName, string factoryName, string globalParameterName)
        {
                ((IGlobalParametersOperations)operations).DeleteAsync(resourceGroupName, factoryName, globalParameterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a Global parameter
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='factoryName'>
        /// The factory name.
        /// </param>
        /// <param name='globalParameterName'>
        /// The global parameter name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IGlobalParametersOperations operations, string resourceGroupName, string factoryName, string globalParameterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, factoryName, globalParameterName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists Global parameters
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<GlobalParameterResource> ListByFactoryNext(this IGlobalParametersOperations operations, string nextPageLink)
        {
                return ((IGlobalParametersOperations)operations).ListByFactoryNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists Global parameters
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<GlobalParameterResource>> ListByFactoryNextAsync(this IGlobalParametersOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByFactoryNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
