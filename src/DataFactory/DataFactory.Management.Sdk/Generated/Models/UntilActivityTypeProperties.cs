// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Until activity properties.
    /// </summary>
    public partial class UntilActivityTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the UntilActivityTypeProperties class.
        /// </summary>
        public UntilActivityTypeProperties()
        {
            this.Expression = new Expression();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UntilActivityTypeProperties class.
        /// </summary>

        /// <param name="expression">An expression that would evaluate to Boolean. The loop will continue until
        /// this expression evaluates to true
        /// </param>

        /// <param name="timeout">Specifies the timeout for the activity to run. If there is no value
        /// specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as
        /// default. Type: string (or Expression with resultType string), pattern:
        /// ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// </param>

        /// <param name="activities">List of activities to execute.
        /// </param>
        public UntilActivityTypeProperties(Expression expression, System.Collections.Generic.IList<Activity> activities, object timeout = default(object))

        {
            this.Expression = expression;
            this.Timeout = timeout;
            this.Activities = activities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets an expression that would evaluate to Boolean. The loop will
        /// continue until this expression evaluates to true
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "expression")]
        public Expression Expression {get; set; }

        /// <summary>
        /// Gets or sets specifies the timeout for the activity to run. If there is no
        /// value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week
        /// as default. Type: string (or Expression with resultType string), pattern:
        /// ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeout")]
        public object Timeout {get; set; }

        /// <summary>
        /// Gets or sets list of activities to execute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "activities")]
        public System.Collections.Generic.IList<Activity> Activities {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Expression == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Expression");
            }
            if (this.Activities == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Activities");
            }
            if (this.Expression != null)
            {
                this.Expression.Validate();
            }

            if (this.Activities != null)
            {
                foreach (var element in this.Activities)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}