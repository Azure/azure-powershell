// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Trigger that allows the referenced pipeline to depend on other pipeline
    /// runs based on runDimension Name/Value pairs. Upstream pipelines should
    /// declare the same runDimension Name and their runs should have the values
    /// for those runDimensions. The referenced pipeline run would be triggered if
    /// the values for the runDimension match for all upstream pipeline runs.
    /// </summary>
    [Newtonsoft.Json.JsonObject("ChainingTrigger")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ChainingTrigger : Trigger
    {
        /// <summary>
        /// Initializes a new instance of the ChainingTrigger class.
        /// </summary>
        public ChainingTrigger()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ChainingTrigger class.
        /// </summary>

        /// <param name="additionalProperties">Azure data factory nested object which contains information about creating
        /// pipeline run
        /// </param>

        /// <param name="description">Trigger description.
        /// </param>

        /// <param name="runtimeState">Indicates if trigger is running or not. Updated when Start/Stop APIs are
        /// called on the Trigger.
        /// Possible values include: &#39;Started&#39;, &#39;Stopped&#39;, &#39;Disabled&#39;</param>

        /// <param name="annotations">List of tags that can be used for describing the trigger.
        /// </param>

        /// <param name="pipeline">Pipeline for which runs are created when all upstream pipelines complete
        /// successfully.
        /// </param>

        /// <param name="dependsOn">Upstream Pipelines.
        /// </param>

        /// <param name="runDimension">Run Dimension property that needs to be emitted by upstream pipelines.
        /// </param>
        public ChainingTrigger(TriggerPipelineReference pipeline, System.Collections.Generic.IList<PipelineReference> dependsOn, string runDimension, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string description = default(string), string runtimeState = default(string), System.Collections.Generic.IList<object> annotations = default(System.Collections.Generic.IList<object>))

        : base(additionalProperties, description, runtimeState, annotations)
        {
            this.Pipeline = pipeline;
            this.DependsOn = dependsOn;
            this.RunDimension = runDimension;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets pipeline for which runs are created when all upstream
        /// pipelines complete successfully.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "pipeline")]
        public TriggerPipelineReference Pipeline {get; set; }

        /// <summary>
        /// Gets or sets upstream Pipelines.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.dependsOn")]
        public System.Collections.Generic.IList<PipelineReference> DependsOn {get; set; }

        /// <summary>
        /// Gets or sets run Dimension property that needs to be emitted by upstream
        /// pipelines.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.runDimension")]
        public string RunDimension {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Pipeline == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Pipeline");
            }
            if (this.DependsOn == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DependsOn");
            }
            if (this.RunDimension == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RunDimension");
            }
            if (this.Pipeline != null)
            {
                this.Pipeline.Validate();
            }
            if (this.DependsOn != null)
            {
                foreach (var element in this.DependsOn)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

        }
    }
}