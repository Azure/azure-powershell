// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Custom activity type.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Custom")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class CustomActivity : ExecutionActivity
    {
        /// <summary>
        /// Initializes a new instance of the CustomActivity class.
        /// </summary>
        public CustomActivity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CustomActivity class.
        /// </summary>

        /// <param name="additionalProperties">A pipeline activity.
        /// </param>

        /// <param name="name">Activity name.
        /// </param>

        /// <param name="description">Activity description.
        /// </param>

        /// <param name="state">Activity state. This is an optional property and if not provided, the state
        /// will be Active by default.
        /// Possible values include: &#39;Active&#39;, &#39;Inactive&#39;</param>

        /// <param name="onInactiveMarkAs">Status result of the activity when the state is set to Inactive. This is an
        /// optional property and if not provided when the activity is inactive, the
        /// status will be Succeeded by default.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Skipped&#39;</param>

        /// <param name="dependsOn">Activity depends on condition.
        /// </param>

        /// <param name="userProperties">Activity user properties.
        /// </param>

        /// <param name="linkedServiceName">Linked service reference.
        /// </param>

        /// <param name="policy">Activity policy.
        /// </param>

        /// <param name="command">Command for custom activity Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="resourceLinkedService">Resource linked service reference.
        /// </param>

        /// <param name="folderPath">Folder path for resource files Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="referenceObjects">Reference objects
        /// </param>

        /// <param name="extendedProperties">User defined property bag. There is no restriction on the keys or values
        /// that can be used. The user specified custom activity has the full
        /// responsibility to consume and interpret the content defined.
        /// </param>

        /// <param name="retentionTimeInDays">The retention time for the files submitted for custom activity. Type:
        /// double (or Expression with resultType double).
        /// </param>

        /// <param name="autoUserSpecification">Elevation level and scope for the user, default is nonadmin task. Type:
        /// string (or Expression with resultType double).
        /// </param>
        public CustomActivity(string name, object command, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string description = default(string), string state = default(string), string onInactiveMarkAs = default(string), System.Collections.Generic.IList<ActivityDependency> dependsOn = default(System.Collections.Generic.IList<ActivityDependency>), System.Collections.Generic.IList<UserProperty> userProperties = default(System.Collections.Generic.IList<UserProperty>), LinkedServiceReference linkedServiceName = default(LinkedServiceReference), ActivityPolicy policy = default(ActivityPolicy), LinkedServiceReference resourceLinkedService = default(LinkedServiceReference), object folderPath = default(object), CustomActivityReferenceObject referenceObjects = default(CustomActivityReferenceObject), System.Collections.Generic.IDictionary<string, object> extendedProperties = default(System.Collections.Generic.IDictionary<string, object>), object retentionTimeInDays = default(object), object autoUserSpecification = default(object))

        : base(name, additionalProperties, description, state, onInactiveMarkAs, dependsOn, userProperties, linkedServiceName, policy)
        {
            this.Command = command;
            this.ResourceLinkedService = resourceLinkedService;
            this.FolderPath = folderPath;
            this.ReferenceObjects = referenceObjects;
            this.ExtendedProperties = extendedProperties;
            this.RetentionTimeInDays = retentionTimeInDays;
            this.AutoUserSpecification = autoUserSpecification;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets command for custom activity Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.command")]
        public object Command {get; set; }

        /// <summary>
        /// Gets or sets resource linked service reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.resourceLinkedService")]
        public LinkedServiceReference ResourceLinkedService {get; set; }

        /// <summary>
        /// Gets or sets folder path for resource files Type: string (or Expression
        /// with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.folderPath")]
        public object FolderPath {get; set; }

        /// <summary>
        /// Gets or sets reference objects
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.referenceObjects")]
        public CustomActivityReferenceObject ReferenceObjects {get; set; }

        /// <summary>
        /// Gets or sets user defined property bag. There is no restriction on the keys
        /// or values that can be used. The user specified custom activity has the full
        /// responsibility to consume and interpret the content defined.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.extendedProperties")]
        public System.Collections.Generic.IDictionary<string, object> ExtendedProperties {get; set; }

        /// <summary>
        /// Gets or sets the retention time for the files submitted for custom
        /// activity. Type: double (or Expression with resultType double).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.retentionTimeInDays")]
        public object RetentionTimeInDays {get; set; }

        /// <summary>
        /// Gets or sets elevation level and scope for the user, default is nonadmin
        /// task. Type: string (or Expression with resultType double).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.autoUserSpecification")]
        public object AutoUserSpecification {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Command == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Command");
            }

            if (this.ResourceLinkedService != null)
            {
                this.ResourceLinkedService.Validate();
            }





        }
    }
}