// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// A copy activity for Microsoft Fabric LakeHouse Table sink.
    /// </summary>
    [Newtonsoft.Json.JsonObject("LakeHouseTableSink")]
    public partial class LakeHouseTableSink : CopySink
    {
        /// <summary>
        /// Initializes a new instance of the LakeHouseTableSink class.
        /// </summary>
        public LakeHouseTableSink()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LakeHouseTableSink class.
        /// </summary>

        /// <param name="writeBatchSize">Write batch size. Type: integer (or Expression with resultType integer),
        /// minimum: 0.
        /// </param>

        /// <param name="writeBatchTimeout">Write batch timeout. Type: string (or Expression with resultType string),
        /// pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// </param>

        /// <param name="sinkRetryCount">Sink retry count. Type: integer (or Expression with resultType integer).
        /// </param>

        /// <param name="sinkRetryWait">Sink retry wait. Type: string (or Expression with resultType string),
        /// pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// </param>

        /// <param name="maxConcurrentConnections">The maximum concurrent connection count for the sink data store. Type:
        /// integer (or Expression with resultType integer).
        /// </param>

        /// <param name="disableMetricsCollection">If true, disable data store metrics collection. Default is false. Type:
        /// boolean (or Expression with resultType boolean).
        /// </param>

        /// <param name="tableActionOption">The type of table action for LakeHouse Table sink. Possible values include:
        /// &#34;None&#34;, &#34;Append&#34;, &#34;Overwrite&#34;.
        /// </param>

        /// <param name="partitionOption">Create partitions in folder structure based on one or multiple columns.
        /// Each distinct column value (pair) will be a new partition. Possible values
        /// include: &#34;None&#34;, &#34;PartitionByKey&#34;.
        /// </param>

        /// <param name="partitionNameList">Specify the partition column names from sink columns. Type: array of
        /// objects (or Expression with resultType array of objects).
        /// </param>
        public LakeHouseTableSink(object writeBatchSize = default(object), object writeBatchTimeout = default(object), object sinkRetryCount = default(object), object sinkRetryWait = default(object), object maxConcurrentConnections = default(object), object disableMetricsCollection = default(object), object tableActionOption = default(object), object partitionOption = default(object), object partitionNameList = default(object))

        : base(writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection)
        {
            this.TableActionOption = tableActionOption;
            this.PartitionOption = partitionOption;
            this.PartitionNameList = partitionNameList;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the type of table action for LakeHouse Table sink. Possible
        /// values include: &#34;None&#34;, &#34;Append&#34;, &#34;Overwrite&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tableActionOption")]
        public object TableActionOption {get; set; }

        /// <summary>
        /// Gets or sets create partitions in folder structure based on one or multiple
        /// columns. Each distinct column value (pair) will be a new partition.
        /// Possible values include: &#34;None&#34;, &#34;PartitionByKey&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "partitionOption")]
        public object PartitionOption {get; set; }

        /// <summary>
        /// Gets or sets specify the partition column names from sink columns. Type:
        /// array of objects (or Expression with resultType array of objects).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "partitionNameList")]
        public object PartitionNameList {get; set; }
    }
}