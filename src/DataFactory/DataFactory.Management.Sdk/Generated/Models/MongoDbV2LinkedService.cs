// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Linked service for MongoDB data source.
    /// </summary>
    [Newtonsoft.Json.JsonObject("MongoDbV2")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class MongoDbV2LinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the MongoDbV2LinkedService class.
        /// </summary>
        public MongoDbV2LinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MongoDbV2LinkedService class.
        /// </summary>

        /// <param name="additionalProperties">The nested object which contains the information and credential which can
        /// be used to connect with related store or compute resource.
        /// </param>

        /// <param name="connectVia">The integration runtime reference.
        /// </param>

        /// <param name="description">Linked service description.
        /// </param>

        /// <param name="parameters">Parameters for linked service.
        /// </param>

        /// <param name="annotations">List of tags that can be used for describing the linked service.
        /// </param>

        /// <param name="connectionString">The MongoDB connection string. Type: string, SecureString or
        /// AzureKeyVaultSecretReference. Type: string, SecureString or
        /// AzureKeyVaultSecretReference.
        /// </param>

        /// <param name="database">The name of the MongoDB database that you want to access. Type: string (or
        /// Expression with resultType string).
        /// </param>
        public MongoDbV2LinkedService(object connectionString, object database, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), System.Collections.Generic.IDictionary<string, ParameterSpecification> parameters = default(System.Collections.Generic.IDictionary<string, ParameterSpecification>), System.Collections.Generic.IList<object> annotations = default(System.Collections.Generic.IList<object>))

        : base(additionalProperties, connectVia, description, parameters, annotations)
        {
            this.ConnectionString = connectionString;
            this.Database = database;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the MongoDB connection string. Type: string, SecureString or
        /// AzureKeyVaultSecretReference. Type: string, SecureString or
        /// AzureKeyVaultSecretReference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.connectionString")]
        public object ConnectionString {get; set; }

        /// <summary>
        /// Gets or sets the name of the MongoDB database that you want to access.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.database")]
        public object Database {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.ConnectionString == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ConnectionString");
            }
            if (this.Database == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Database");
            }


        }
    }
}