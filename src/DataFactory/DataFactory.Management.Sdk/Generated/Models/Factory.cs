// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Factory resource type.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Factory : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Factory class.
        /// </summary>
        public Factory()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Factory class.
        /// </summary>

        /// <param name="id">The resource identifier.
        /// </param>

        /// <param name="name">The resource name.
        /// </param>

        /// <param name="type">The resource type.
        /// </param>

        /// <param name="location">The resource location.
        /// </param>

        /// <param name="tags">The resource tags.
        /// </param>

        /// <param name="eTag">Etag identifies change in the resource.
        /// </param>

        /// <param name="additionalProperties">Factory resource type.
        /// </param>

        /// <param name="identity">Managed service identity of the factory.
        /// </param>

        /// <param name="purviewConfiguration">Purview information of the factory.
        /// </param>

        /// <param name="provisioningState">Factory provisioning state, example Succeeded.
        /// </param>

        /// <param name="createTime">Time the factory was created in ISO8601 format.
        /// </param>

        /// <param name="version">Version of the factory.
        /// </param>

        /// <param name="repoConfiguration">Git repo information of the factory.
        /// </param>

        /// <param name="globalParameters">List of parameters for factory.
        /// </param>

        /// <param name="encryption">Properties to enable Customer Managed Key for the factory.
        /// </param>

        /// <param name="publicNetworkAccess">Whether or not public network access is allowed for the data factory.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>
        public Factory(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string eTag = default(string), System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), FactoryIdentity identity = default(FactoryIdentity), PurviewConfiguration purviewConfiguration = default(PurviewConfiguration), string provisioningState = default(string), System.DateTime? createTime = default(System.DateTime?), string version = default(string), FactoryRepoConfiguration repoConfiguration = default(FactoryRepoConfiguration), System.Collections.Generic.IDictionary<string, GlobalParameterSpecification> globalParameters = default(System.Collections.Generic.IDictionary<string, GlobalParameterSpecification>), EncryptionConfiguration encryption = default(EncryptionConfiguration), string publicNetworkAccess = default(string))

        : base(id, name, type, location, tags, eTag)
        {
            this.AdditionalProperties = additionalProperties;
            this.Identity = identity;
            this.PurviewConfiguration = purviewConfiguration;
            this.ProvisioningState = provisioningState;
            this.CreateTime = createTime;
            this.Version = version;
            this.RepoConfiguration = repoConfiguration;
            this.GlobalParameters = globalParameters;
            this.Encryption = encryption;
            this.PublicNetworkAccess = publicNetworkAccess;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets factory resource type.
        /// </summary>
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {get; set; }

        /// <summary>
        /// Gets or sets managed service identity of the factory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public FactoryIdentity Identity {get; set; }

        /// <summary>
        /// Gets or sets purview information of the factory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.purviewConfiguration")]
        public PurviewConfiguration PurviewConfiguration {get; set; }

        /// <summary>
        /// Gets factory provisioning state, example Succeeded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets time the factory was created in ISO8601 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.createTime")]
        public System.DateTime? CreateTime {get; private set; }

        /// <summary>
        /// Gets version of the factory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.version")]
        public string Version {get; private set; }

        /// <summary>
        /// Gets or sets git repo information of the factory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.repoConfiguration")]
        public FactoryRepoConfiguration RepoConfiguration {get; set; }

        /// <summary>
        /// Gets or sets list of parameters for factory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.globalParameters")]
        public System.Collections.Generic.IDictionary<string, GlobalParameterSpecification> GlobalParameters {get; set; }

        /// <summary>
        /// Gets or sets properties to enable Customer Managed Key for the factory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.encryption")]
        public EncryptionConfiguration Encryption {get; set; }

        /// <summary>
        /// Gets or sets whether or not public network access is allowed for the data
        /// factory. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.Identity != null)
            {
                this.Identity.Validate();
            }



            if (this.RepoConfiguration != null)
            {
                this.RepoConfiguration.Validate();
            }
            if (this.GlobalParameters != null)
            {
                foreach (var valueElement in this.GlobalParameters.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (this.Encryption != null)
            {
                this.Encryption.Validate();
            }

        }
    }
}