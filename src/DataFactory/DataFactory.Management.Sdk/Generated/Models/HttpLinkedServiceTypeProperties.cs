// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Properties specific to this linked service type.
    /// </summary>
    public partial class HttpLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the HttpLinkedServiceTypeProperties class.
        /// </summary>
        public HttpLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HttpLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="url">The base URL of the HTTP endpoint, e.g. https://www.microsoft.com. Type:
        /// string (or Expression with resultType string).
        /// </param>

        /// <param name="authenticationType">The authentication type to be used to connect to the HTTP server.
        /// Possible values include: &#39;Basic&#39;, &#39;Anonymous&#39;, &#39;Digest&#39;, &#39;Windows&#39;,
        /// &#39;ClientCertificate&#39;</param>

        /// <param name="userName">User name for Basic, Digest, or Windows authentication. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="password">Password for Basic, Digest, Windows, or ClientCertificate with
        /// EmbeddedCertData authentication.
        /// </param>

        /// <param name="authHeaders">The additional HTTP headers in the request to RESTful API used for
        /// authorization. Type: key value pairs (value should be string type).
        /// </param>

        /// <param name="embeddedCertData">Base64 encoded certificate data for ClientCertificate authentication. For
        /// on-premises copy with ClientCertificate authentication, either
        /// CertThumbprint or EmbeddedCertData/Password should be specified. Type:
        /// string (or Expression with resultType string).
        /// </param>

        /// <param name="certThumbprint">Thumbprint of certificate for ClientCertificate authentication. Only valid
        /// for on-premises copy. For on-premises copy with ClientCertificate
        /// authentication, either CertThumbprint or EmbeddedCertData/Password should
        /// be specified. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>

        /// <param name="enableServerCertificateValidation">If true, validate the HTTPS server SSL certificate. Default value is true.
        /// Type: boolean (or Expression with resultType boolean).
        /// </param>
        public HttpLinkedServiceTypeProperties(object url, string authenticationType = default(string), object userName = default(object), SecretBase password = default(SecretBase), object authHeaders = default(object), object embeddedCertData = default(object), object certThumbprint = default(object), string encryptedCredential = default(string), object enableServerCertificateValidation = default(object))

        {
            this.Url = url;
            this.AuthenticationType = authenticationType;
            this.UserName = userName;
            this.Password = password;
            this.AuthHeaders = authHeaders;
            this.EmbeddedCertData = embeddedCertData;
            this.CertThumbprint = certThumbprint;
            this.EncryptedCredential = encryptedCredential;
            this.EnableServerCertificateValidation = enableServerCertificateValidation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the base URL of the HTTP endpoint, e.g.
        /// https://www.microsoft.com. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "url")]
        public object Url {get; set; }

        /// <summary>
        /// Gets or sets the authentication type to be used to connect to the HTTP
        /// server. Possible values include: &#39;Basic&#39;, &#39;Anonymous&#39;, &#39;Digest&#39;, &#39;Windows&#39;, &#39;ClientCertificate&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authenticationType")]
        public string AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets user name for Basic, Digest, or Windows authentication. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userName")]
        public object UserName {get; set; }

        /// <summary>
        /// Gets or sets password for Basic, Digest, Windows, or ClientCertificate with
        /// EmbeddedCertData authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public SecretBase Password {get; set; }

        /// <summary>
        /// Gets or sets the additional HTTP headers in the request to RESTful API used
        /// for authorization. Type: key value pairs (value should be string type).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authHeaders")]
        public object AuthHeaders {get; set; }

        /// <summary>
        /// Gets or sets base64 encoded certificate data for ClientCertificate
        /// authentication. For on-premises copy with ClientCertificate authentication,
        /// either CertThumbprint or EmbeddedCertData/Password should be specified.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "embeddedCertData")]
        public object EmbeddedCertData {get; set; }

        /// <summary>
        /// Gets or sets thumbprint of certificate for ClientCertificate
        /// authentication. Only valid for on-premises copy. For on-premises copy with
        /// ClientCertificate authentication, either CertThumbprint or
        /// EmbeddedCertData/Password should be specified. Type: string (or Expression
        /// with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "certThumbprint")]
        public object CertThumbprint {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }

        /// <summary>
        /// Gets or sets if true, validate the HTTPS server SSL certificate. Default
        /// value is true. Type: boolean (or Expression with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableServerCertificateValidation")]
        public object EnableServerCertificateValidation {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Url == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Url");
            }









        }
    }
}