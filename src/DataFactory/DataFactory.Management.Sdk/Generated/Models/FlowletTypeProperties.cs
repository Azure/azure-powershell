// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Flowlet type properties.
    /// </summary>
    public partial class FlowletTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the FlowletTypeProperties class.
        /// </summary>
        public FlowletTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FlowletTypeProperties class.
        /// </summary>

        /// <param name="sources">List of sources in Flowlet.
        /// </param>

        /// <param name="sinks">List of sinks in Flowlet.
        /// </param>

        /// <param name="transformations">List of transformations in Flowlet.
        /// </param>

        /// <param name="script">Flowlet script.
        /// </param>

        /// <param name="scriptLines">Flowlet script lines.
        /// </param>
        public FlowletTypeProperties(System.Collections.Generic.IList<DataFlowSource> sources = default(System.Collections.Generic.IList<DataFlowSource>), System.Collections.Generic.IList<DataFlowSink> sinks = default(System.Collections.Generic.IList<DataFlowSink>), System.Collections.Generic.IList<Transformation> transformations = default(System.Collections.Generic.IList<Transformation>), string script = default(string), System.Collections.Generic.IList<string> scriptLines = default(System.Collections.Generic.IList<string>))

        {
            this.Sources = sources;
            this.Sinks = sinks;
            this.Transformations = transformations;
            this.Script = script;
            this.ScriptLines = scriptLines;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets list of sources in Flowlet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sources")]
        public System.Collections.Generic.IList<DataFlowSource> Sources {get; set; }

        /// <summary>
        /// Gets or sets list of sinks in Flowlet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sinks")]
        public System.Collections.Generic.IList<DataFlowSink> Sinks {get; set; }

        /// <summary>
        /// Gets or sets list of transformations in Flowlet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "transformations")]
        public System.Collections.Generic.IList<Transformation> Transformations {get; set; }

        /// <summary>
        /// Gets or sets flowlet script.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "script")]
        public string Script {get; set; }

        /// <summary>
        /// Gets or sets flowlet script lines.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "scriptLines")]
        public System.Collections.Generic.IList<string> ScriptLines {get; set; }
    }
}