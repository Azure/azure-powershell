// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Quickbase linked service type properties.
    /// </summary>
    public partial class QuickbaseLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the QuickbaseLinkedServiceTypeProperties class.
        /// </summary>
        public QuickbaseLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QuickbaseLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="url">The url to connect Quickbase source. Type: string (or Expression with
        /// resultType string).
        /// </param>

        /// <param name="userToken">The user token for the Quickbase source.
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>
        public QuickbaseLinkedServiceTypeProperties(object url, SecretBase userToken, string encryptedCredential = default(string))

        {
            this.Url = url;
            this.UserToken = userToken;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the url to connect Quickbase source. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "url")]
        public object Url {get; set; }

        /// <summary>
        /// Gets or sets the user token for the Quickbase source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userToken")]
        public SecretBase UserToken {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Url == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Url");
            }
            if (this.UserToken == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "UserToken");
            }



        }
    }
}