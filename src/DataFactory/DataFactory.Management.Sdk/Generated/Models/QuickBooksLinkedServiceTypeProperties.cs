// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// QuickBooks server linked service properties.
    /// </summary>
    public partial class QuickBooksLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the QuickBooksLinkedServiceTypeProperties class.
        /// </summary>
        public QuickBooksLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QuickBooksLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="connectionProperties">Properties used to connect to QuickBooks. It is mutually exclusive with any
        /// other properties in the linked service. Type: object.
        /// </param>

        /// <param name="endpoint">The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
        /// </param>

        /// <param name="companyId">The company ID of the QuickBooks company to authorize.
        /// </param>

        /// <param name="consumerKey">The consumer key for OAuth 1.0 authentication.
        /// </param>

        /// <param name="consumerSecret">The consumer secret for OAuth 1.0 authentication.
        /// </param>

        /// <param name="accessToken">The access token for OAuth 1.0 authentication.
        /// </param>

        /// <param name="accessTokenSecret">The access token secret for OAuth 1.0 authentication.
        /// </param>

        /// <param name="useEncryptedEndpoints">Specifies whether the data source endpoints are encrypted using HTTPS. The
        /// default value is true.
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>
        public QuickBooksLinkedServiceTypeProperties(object connectionProperties = default(object), object endpoint = default(object), object companyId = default(object), object consumerKey = default(object), SecretBase consumerSecret = default(SecretBase), SecretBase accessToken = default(SecretBase), SecretBase accessTokenSecret = default(SecretBase), object useEncryptedEndpoints = default(object), string encryptedCredential = default(string))

        {
            this.ConnectionProperties = connectionProperties;
            this.Endpoint = endpoint;
            this.CompanyId = companyId;
            this.ConsumerKey = consumerKey;
            this.ConsumerSecret = consumerSecret;
            this.AccessToken = accessToken;
            this.AccessTokenSecret = accessTokenSecret;
            this.UseEncryptedEndpoints = useEncryptedEndpoints;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets properties used to connect to QuickBooks. It is mutually
        /// exclusive with any other properties in the linked service. Type: object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionProperties")]
        public object ConnectionProperties {get; set; }

        /// <summary>
        /// Gets or sets the endpoint of the QuickBooks server. (i.e.
        /// quickbooks.api.intuit.com)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endpoint")]
        public object Endpoint {get; set; }

        /// <summary>
        /// Gets or sets the company ID of the QuickBooks company to authorize.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "companyId")]
        public object CompanyId {get; set; }

        /// <summary>
        /// Gets or sets the consumer key for OAuth 1.0 authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "consumerKey")]
        public object ConsumerKey {get; set; }

        /// <summary>
        /// Gets or sets the consumer secret for OAuth 1.0 authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "consumerSecret")]
        public SecretBase ConsumerSecret {get; set; }

        /// <summary>
        /// Gets or sets the access token for OAuth 1.0 authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accessToken")]
        public SecretBase AccessToken {get; set; }

        /// <summary>
        /// Gets or sets the access token secret for OAuth 1.0 authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accessTokenSecret")]
        public SecretBase AccessTokenSecret {get; set; }

        /// <summary>
        /// Gets or sets specifies whether the data source endpoints are encrypted
        /// using HTTPS. The default value is true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "useEncryptedEndpoints")]
        public object UseEncryptedEndpoints {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }
    }
}