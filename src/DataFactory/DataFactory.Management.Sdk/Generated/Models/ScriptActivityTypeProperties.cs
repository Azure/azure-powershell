// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Script activity properties.
    /// </summary>
    public partial class ScriptActivityTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the ScriptActivityTypeProperties class.
        /// </summary>
        public ScriptActivityTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScriptActivityTypeProperties class.
        /// </summary>

        /// <param name="scriptBlockExecutionTimeout">ScriptBlock execution timeout. Type: string (or Expression with resultType
        /// string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// </param>

        /// <param name="scripts">Array of script blocks. Type: array.
        /// </param>

        /// <param name="logSettings">Log settings of script activity.
        /// </param>

        /// <param name="returnMultistatementResult">Enable to retrieve result sets from multiple SQL statements and the number
        /// of rows affected by the DML statement. Supported connector: SnowflakeV2.
        /// Type: boolean (or Expression with resultType boolean).
        /// </param>
        public ScriptActivityTypeProperties(object scriptBlockExecutionTimeout = default(object), System.Collections.Generic.IList<ScriptActivityScriptBlock> scripts = default(System.Collections.Generic.IList<ScriptActivityScriptBlock>), ScriptActivityTypePropertiesLogSettings logSettings = default(ScriptActivityTypePropertiesLogSettings), object returnMultistatementResult = default(object))

        {
            this.ScriptBlockExecutionTimeout = scriptBlockExecutionTimeout;
            this.Scripts = scripts;
            this.LogSettings = logSettings;
            this.ReturnMultistatementResult = returnMultistatementResult;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets scriptBlock execution timeout. Type: string (or Expression
        /// with resultType string), pattern:
        /// ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "scriptBlockExecutionTimeout")]
        public object ScriptBlockExecutionTimeout {get; set; }

        /// <summary>
        /// Gets or sets array of script blocks. Type: array.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "scripts")]
        public System.Collections.Generic.IList<ScriptActivityScriptBlock> Scripts {get; set; }

        /// <summary>
        /// Gets or sets log settings of script activity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "logSettings")]
        public ScriptActivityTypePropertiesLogSettings LogSettings {get; set; }

        /// <summary>
        /// Gets or sets enable to retrieve result sets from multiple SQL statements
        /// and the number of rows affected by the DML statement. Supported connector:
        /// SnowflakeV2. Type: boolean (or Expression with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "returnMultistatementResult")]
        public object ReturnMultistatementResult {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.Scripts != null)
            {
                foreach (var element in this.Scripts)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.LogSettings != null)
            {
                this.LogSettings.Validate();
            }

        }
    }
}