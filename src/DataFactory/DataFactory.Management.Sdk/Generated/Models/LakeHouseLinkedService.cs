// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Microsoft Fabric LakeHouse linked service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("LakeHouse")]
    [Rest.Serialization.JsonTransformation]
    public partial class LakeHouseLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the LakeHouseLinkedService class.
        /// </summary>
        public LakeHouseLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LakeHouseLinkedService class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="connectVia">The integration runtime reference.</param>
        /// <param name="description">Linked service description.</param>
        /// <param name="parameters">Parameters for linked service.</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the linked service.</param>
        /// <param name="workspaceId">The ID of Microsoft Fabric workspace.
        /// Type: string (or Expression with resultType string).</param>
        /// <param name="artifactId">The ID of Microsoft Fabric LakeHouse
        /// artifact. Type: string (or Expression with resultType
        /// string).</param>
        /// <param name="servicePrincipalId">The ID of the application used to
        /// authenticate against Microsoft Fabric LakeHouse. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="servicePrincipalKey">The Key of the application used
        /// to authenticate against Microsoft Fabric LakeHouse.</param>
        /// <param name="tenant">The name or ID of the tenant to which the
        /// service principal belongs. Type: string (or Expression with
        /// resultType string).</param>
        /// <param name="encryptedCredential">The encrypted credential used for
        /// authentication. Credentials are encrypted using the integration
        /// runtime credential manager. Type: string.</param>
        /// <param name="servicePrincipalCredentialType">The service principal
        /// credential type to use in Server-To-Server authentication.
        /// 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for
        /// certificate. Type: string (or Expression with resultType
        /// string).</param>
        /// <param name="servicePrincipalCredential">The credential of the
        /// service principal object in Azure Active Directory. If
        /// servicePrincipalCredentialType is 'ServicePrincipalKey',
        /// servicePrincipalCredential can be SecureString or
        /// AzureKeyVaultSecretReference. If servicePrincipalCredentialType is
        /// 'ServicePrincipalCert', servicePrincipalCredential can only be
        /// AzureKeyVaultSecretReference.</param>
        public LakeHouseLinkedService(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), IDictionary<string, ParameterSpecification> parameters = default(IDictionary<string, ParameterSpecification>), IList<object> annotations = default(IList<object>), object workspaceId = default(object), object artifactId = default(object), object servicePrincipalId = default(object), SecretBase servicePrincipalKey = default(SecretBase), object tenant = default(object), string encryptedCredential = default(string), object servicePrincipalCredentialType = default(object), SecretBase servicePrincipalCredential = default(SecretBase))
            : base(additionalProperties, connectVia, description, parameters, annotations)
        {
            WorkspaceId = workspaceId;
            ArtifactId = artifactId;
            ServicePrincipalId = servicePrincipalId;
            ServicePrincipalKey = servicePrincipalKey;
            Tenant = tenant;
            EncryptedCredential = encryptedCredential;
            ServicePrincipalCredentialType = servicePrincipalCredentialType;
            ServicePrincipalCredential = servicePrincipalCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the ID of Microsoft Fabric workspace. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.workspaceId")]
        public object WorkspaceId { get; set; }

        /// <summary>
        /// Gets or sets the ID of Microsoft Fabric LakeHouse artifact. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.artifactId")]
        public object ArtifactId { get; set; }

        /// <summary>
        /// Gets or sets the ID of the application used to authenticate against
        /// Microsoft Fabric LakeHouse. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.servicePrincipalId")]
        public object ServicePrincipalId { get; set; }

        /// <summary>
        /// Gets or sets the Key of the application used to authenticate
        /// against Microsoft Fabric LakeHouse.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.servicePrincipalKey")]
        public SecretBase ServicePrincipalKey { get; set; }

        /// <summary>
        /// Gets or sets the name or ID of the tenant to which the service
        /// principal belongs. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.tenant")]
        public object Tenant { get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication.
        /// Credentials are encrypted using the integration runtime credential
        /// manager. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public string EncryptedCredential { get; set; }

        /// <summary>
        /// Gets or sets the service principal credential type to use in
        /// Server-To-Server authentication. 'ServicePrincipalKey' for
        /// key/secret, 'ServicePrincipalCert' for certificate. Type: string
        /// (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.servicePrincipalCredentialType")]
        public object ServicePrincipalCredentialType { get; set; }

        /// <summary>
        /// Gets or sets the credential of the service principal object in
        /// Azure Active Directory. If servicePrincipalCredentialType is
        /// 'ServicePrincipalKey', servicePrincipalCredential can be
        /// SecureString or AzureKeyVaultSecretReference. If
        /// servicePrincipalCredentialType is 'ServicePrincipalCert',
        /// servicePrincipalCredential can only be
        /// AzureKeyVaultSecretReference.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.servicePrincipalCredential")]
        public SecretBase ServicePrincipalCredential { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
