// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Sql Server family connector common linked service properties.
    /// </summary>
    public partial class SqlServerBaseLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the SqlServerBaseLinkedServiceTypeProperties class.
        /// </summary>
        public SqlServerBaseLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SqlServerBaseLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="server">The name or network address of the instance of SQL Server to which to
        /// connect, used by recommended version. Type: string (or Expression with
        /// resultType string).
        /// </param>

        /// <param name="database">The name of the database, used by recommended version. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="encrypt">Indicate whether TLS encryption is required for all data sent between the
        /// client and server, used by recommended version. Possible values are
        /// true/yes/mandatory, false/no/optional and strict. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="trustServerCertificate">Indicate whether the channel will be encrypted while bypassing walking the
        /// certificate chain to validate trust, used by recommended version. Type:
        /// Boolean (or Expression with resultType boolean).
        /// </param>

        /// <param name="hostNameInCertificate">The host name to use when validating the server certificate for the
        /// connection. When not specified, the server name from the Data Source is
        /// used for certificate validation, used by recommended version. Type: string
        /// (or Expression with resultType string).
        /// </param>

        /// <param name="applicationIntent">The application workload type when connecting to a server, used by
        /// recommended version. Possible values are ReadOnly and ReadWrite. Type:
        /// string (or Expression with resultType string).
        /// </param>

        /// <param name="connectTimeout">The length of time (in seconds) to wait for a connection to the server
        /// before terminating the attempt and generating an error, used by recommended
        /// version. Type: integer (or Expression with resultType integer).
        /// </param>

        /// <param name="connectRetryCount">The number of re-connections attempted after identifying that there was an
        /// idle connection failure, used by recommended version. This must be an
        /// integer between 0 and 255. Type: integer (or Expression with resultType
        /// integer).
        /// </param>

        /// <param name="connectRetryInterval">The amount of time (in seconds) between each re-connection attempt after
        /// identifying that there was an idle connection failure, used by recommended
        /// version. This must be an integer between 1 and 60. Type: integer (or
        /// Expression with resultType integer).
        /// </param>

        /// <param name="loadBalanceTimeout">The minimum time, in seconds, for the connection to live in the connection
        /// pool before being destroyed, used by recommended version. Type: integer (or
        /// Expression with resultType integer).
        /// </param>

        /// <param name="commandTimeout">The default wait time (in seconds) before terminating the attempt to
        /// execute a command and generating an error, used by recommended version.
        /// Type: integer (or Expression with resultType integer).
        /// </param>

        /// <param name="integratedSecurity">Indicate whether User ID and Password are specified in the connection (when
        /// false) or whether the current Windows account credentials are used for
        /// authentication (when true), used by recommended version. Type: Boolean (or
        /// Expression with resultType boolean).
        /// </param>

        /// <param name="failoverPartner">The name or address of the partner server to connect to if the primary
        /// server is down, used by recommended version. Type: string (or Expression
        /// with resultType string).
        /// </param>

        /// <param name="maxPoolSize">The maximum number of connections allowed in the connection pool for this
        /// specific connection string, used by recommended version. Type: integer (or
        /// Expression with resultType integer).
        /// </param>

        /// <param name="minPoolSize">The minimum number of connections allowed in the connection pool for this
        /// specific connection string, used by recommended version. Type: integer (or
        /// Expression with resultType integer).
        /// </param>

        /// <param name="multipleActiveResultSets">When true, an application can maintain multiple active result sets (MARS).
        /// When false, an application must process or cancel all result sets from one
        /// batch before it can execute any other batch on that connection, used by
        /// recommended version. Type: Boolean (or Expression with resultType boolean).
        /// </param>

        /// <param name="multiSubnetFailover">If your application is connecting to an AlwaysOn availability group (AG) on
        /// different subnets, setting MultiSubnetFailover=true provides faster
        /// detection of and connection to the (currently) active server, used by
        /// recommended version. Type: Boolean (or Expression with resultType boolean).
        /// </param>

        /// <param name="packetSize">The size in bytes of the network packets used to communicate with an
        /// instance of server, used by recommended version. Type: integer (or
        /// Expression with resultType integer).
        /// </param>

        /// <param name="pooling">Indicate whether the connection will be pooled or explicitly opened every
        /// time that the connection is requested, used by recommended version. Type:
        /// Boolean (or Expression with resultType boolean).
        /// </param>
        public SqlServerBaseLinkedServiceTypeProperties(object server = default(object), object database = default(object), object encrypt = default(object), object trustServerCertificate = default(object), object hostNameInCertificate = default(object), object applicationIntent = default(object), object connectTimeout = default(object), object connectRetryCount = default(object), object connectRetryInterval = default(object), object loadBalanceTimeout = default(object), object commandTimeout = default(object), object integratedSecurity = default(object), object failoverPartner = default(object), object maxPoolSize = default(object), object minPoolSize = default(object), object multipleActiveResultSets = default(object), object multiSubnetFailover = default(object), object packetSize = default(object), object pooling = default(object))

        {
            this.Server = server;
            this.Database = database;
            this.Encrypt = encrypt;
            this.TrustServerCertificate = trustServerCertificate;
            this.HostNameInCertificate = hostNameInCertificate;
            this.ApplicationIntent = applicationIntent;
            this.ConnectTimeout = connectTimeout;
            this.ConnectRetryCount = connectRetryCount;
            this.ConnectRetryInterval = connectRetryInterval;
            this.LoadBalanceTimeout = loadBalanceTimeout;
            this.CommandTimeout = commandTimeout;
            this.IntegratedSecurity = integratedSecurity;
            this.FailoverPartner = failoverPartner;
            this.MaxPoolSize = maxPoolSize;
            this.MinPoolSize = minPoolSize;
            this.MultipleActiveResultSets = multipleActiveResultSets;
            this.MultiSubnetFailover = multiSubnetFailover;
            this.PacketSize = packetSize;
            this.Pooling = pooling;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name or network address of the instance of SQL Server to
        /// which to connect, used by recommended version. Type: string (or Expression
        /// with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "server")]
        public object Server {get; set; }

        /// <summary>
        /// Gets or sets the name of the database, used by recommended version. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "database")]
        public object Database {get; set; }

        /// <summary>
        /// Gets or sets indicate whether TLS encryption is required for all data sent
        /// between the client and server, used by recommended version. Possible values
        /// are true/yes/mandatory, false/no/optional and strict. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encrypt")]
        public object Encrypt {get; set; }

        /// <summary>
        /// Gets or sets indicate whether the channel will be encrypted while bypassing
        /// walking the certificate chain to validate trust, used by recommended
        /// version. Type: Boolean (or Expression with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "trustServerCertificate")]
        public object TrustServerCertificate {get; set; }

        /// <summary>
        /// Gets or sets the host name to use when validating the server certificate
        /// for the connection. When not specified, the server name from the Data
        /// Source is used for certificate validation, used by recommended version.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostNameInCertificate")]
        public object HostNameInCertificate {get; set; }

        /// <summary>
        /// Gets or sets the application workload type when connecting to a server,
        /// used by recommended version. Possible values are ReadOnly and ReadWrite.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "applicationIntent")]
        public object ApplicationIntent {get; set; }

        /// <summary>
        /// Gets or sets the length of time (in seconds) to wait for a connection to
        /// the server before terminating the attempt and generating an error, used by
        /// recommended version. Type: integer (or Expression with resultType integer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectTimeout")]
        public object ConnectTimeout {get; set; }

        /// <summary>
        /// Gets or sets the number of re-connections attempted after identifying that
        /// there was an idle connection failure, used by recommended version. This
        /// must be an integer between 0 and 255. Type: integer (or Expression with
        /// resultType integer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectRetryCount")]
        public object ConnectRetryCount {get; set; }

        /// <summary>
        /// Gets or sets the amount of time (in seconds) between each re-connection
        /// attempt after identifying that there was an idle connection failure, used
        /// by recommended version. This must be an integer between 1 and 60. Type:
        /// integer (or Expression with resultType integer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectRetryInterval")]
        public object ConnectRetryInterval {get; set; }

        /// <summary>
        /// Gets or sets the minimum time, in seconds, for the connection to live in
        /// the connection pool before being destroyed, used by recommended version.
        /// Type: integer (or Expression with resultType integer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "loadBalanceTimeout")]
        public object LoadBalanceTimeout {get; set; }

        /// <summary>
        /// Gets or sets the default wait time (in seconds) before terminating the
        /// attempt to execute a command and generating an error, used by recommended
        /// version. Type: integer (or Expression with resultType integer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "commandTimeout")]
        public object CommandTimeout {get; set; }

        /// <summary>
        /// Gets or sets indicate whether User ID and Password are specified in the
        /// connection (when false) or whether the current Windows account credentials
        /// are used for authentication (when true), used by recommended version. Type:
        /// Boolean (or Expression with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "integratedSecurity")]
        public object IntegratedSecurity {get; set; }

        /// <summary>
        /// Gets or sets the name or address of the partner server to connect to if the
        /// primary server is down, used by recommended version. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failoverPartner")]
        public object FailoverPartner {get; set; }

        /// <summary>
        /// Gets or sets the maximum number of connections allowed in the connection
        /// pool for this specific connection string, used by recommended version.
        /// Type: integer (or Expression with resultType integer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxPoolSize")]
        public object MaxPoolSize {get; set; }

        /// <summary>
        /// Gets or sets the minimum number of connections allowed in the connection
        /// pool for this specific connection string, used by recommended version.
        /// Type: integer (or Expression with resultType integer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minPoolSize")]
        public object MinPoolSize {get; set; }

        /// <summary>
        /// Gets or sets when true, an application can maintain multiple active result
        /// sets (MARS). When false, an application must process or cancel all result
        /// sets from one batch before it can execute any other batch on that
        /// connection, used by recommended version. Type: Boolean (or Expression with
        /// resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "multipleActiveResultSets")]
        public object MultipleActiveResultSets {get; set; }

        /// <summary>
        /// Gets or sets if your application is connecting to an AlwaysOn availability
        /// group (AG) on different subnets, setting MultiSubnetFailover=true provides
        /// faster detection of and connection to the (currently) active server, used
        /// by recommended version. Type: Boolean (or Expression with resultType
        /// boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "multiSubnetFailover")]
        public object MultiSubnetFailover {get; set; }

        /// <summary>
        /// Gets or sets the size in bytes of the network packets used to communicate
        /// with an instance of server, used by recommended version. Type: integer (or
        /// Expression with resultType integer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "packetSize")]
        public object PacketSize {get; set; }

        /// <summary>
        /// Gets or sets indicate whether the connection will be pooled or explicitly
        /// opened every time that the connection is requested, used by recommended
        /// version. Type: Boolean (or Expression with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "pooling")]
        public object Pooling {get; set; }
    }
}