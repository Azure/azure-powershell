// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Data Lake Analytics U-SQL activity.
    /// </summary>
    [Newtonsoft.Json.JsonObject("DataLakeAnalyticsU-SQL")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class DataLakeAnalyticsUsqlActivity : ExecutionActivity
    {
        /// <summary>
        /// Initializes a new instance of the DataLakeAnalyticsUsqlActivity class.
        /// </summary>
        public DataLakeAnalyticsUsqlActivity()
        {
            this.ScriptLinkedService = new LinkedServiceReference();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataLakeAnalyticsUsqlActivity class.
        /// </summary>

        /// <param name="additionalProperties">A pipeline activity.
        /// </param>

        /// <param name="name">Activity name.
        /// </param>

        /// <param name="description">Activity description.
        /// </param>

        /// <param name="state">Activity state. This is an optional property and if not provided, the state
        /// will be Active by default.
        /// Possible values include: &#39;Active&#39;, &#39;Inactive&#39;</param>

        /// <param name="onInactiveMarkAs">Status result of the activity when the state is set to Inactive. This is an
        /// optional property and if not provided when the activity is inactive, the
        /// status will be Succeeded by default.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Skipped&#39;</param>

        /// <param name="dependsOn">Activity depends on condition.
        /// </param>

        /// <param name="userProperties">Activity user properties.
        /// </param>

        /// <param name="linkedServiceName">Linked service reference.
        /// </param>

        /// <param name="policy">Activity policy.
        /// </param>

        /// <param name="scriptPath">Case-sensitive path to folder that contains the U-SQL script. Type: string
        /// (or Expression with resultType string).
        /// </param>

        /// <param name="scriptLinkedService">Script linked service reference.
        /// </param>

        /// <param name="degreeOfParallelism">The maximum number of nodes simultaneously used to run the job. Default
        /// value is 1. Type: integer (or Expression with resultType integer), minimum:
        /// 1.
        /// </param>

        /// <param name="priority">Determines which jobs out of all that are queued should be selected to run
        /// first. The lower the number, the higher the priority. Default value is
        /// 1000. Type: integer (or Expression with resultType integer), minimum: 1.
        /// </param>

        /// <param name="parameters">Parameters for U-SQL job request.
        /// </param>

        /// <param name="runtimeVersion">Runtime version of the U-SQL engine to use. Type: string (or Expression
        /// with resultType string).
        /// </param>

        /// <param name="compilationMode">Compilation mode of U-SQL. Must be one of these values : Semantic, Full and
        /// SingleBox. Type: string (or Expression with resultType string).
        /// </param>
        public DataLakeAnalyticsUsqlActivity(string name, object scriptPath, LinkedServiceReference scriptLinkedService, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string description = default(string), string state = default(string), string onInactiveMarkAs = default(string), System.Collections.Generic.IList<ActivityDependency> dependsOn = default(System.Collections.Generic.IList<ActivityDependency>), System.Collections.Generic.IList<UserProperty> userProperties = default(System.Collections.Generic.IList<UserProperty>), LinkedServiceReference linkedServiceName = default(LinkedServiceReference), ActivityPolicy policy = default(ActivityPolicy), object degreeOfParallelism = default(object), object priority = default(object), System.Collections.Generic.IDictionary<string, object> parameters = default(System.Collections.Generic.IDictionary<string, object>), object runtimeVersion = default(object), object compilationMode = default(object))

        : base(name, additionalProperties, description, state, onInactiveMarkAs, dependsOn, userProperties, linkedServiceName, policy)
        {
            this.ScriptPath = scriptPath;
            this.ScriptLinkedService = scriptLinkedService;
            this.DegreeOfParallelism = degreeOfParallelism;
            this.Priority = priority;
            this.Parameters = parameters;
            this.RuntimeVersion = runtimeVersion;
            this.CompilationMode = compilationMode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets case-sensitive path to folder that contains the U-SQL script.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.scriptPath")]
        public object ScriptPath {get; set; }

        /// <summary>
        /// Gets or sets script linked service reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.scriptLinkedService")]
        public LinkedServiceReference ScriptLinkedService {get; set; }

        /// <summary>
        /// Gets or sets the maximum number of nodes simultaneously used to run the
        /// job. Default value is 1. Type: integer (or Expression with resultType
        /// integer), minimum: 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.degreeOfParallelism")]
        public object DegreeOfParallelism {get; set; }

        /// <summary>
        /// Gets or sets determines which jobs out of all that are queued should be
        /// selected to run first. The lower the number, the higher the priority.
        /// Default value is 1000. Type: integer (or Expression with resultType
        /// integer), minimum: 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.priority")]
        public object Priority {get; set; }

        /// <summary>
        /// Gets or sets parameters for U-SQL job request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.parameters")]
        public System.Collections.Generic.IDictionary<string, object> Parameters {get; set; }

        /// <summary>
        /// Gets or sets runtime version of the U-SQL engine to use. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.runtimeVersion")]
        public object RuntimeVersion {get; set; }

        /// <summary>
        /// Gets or sets compilation mode of U-SQL. Must be one of these values :
        /// Semantic, Full and SingleBox. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.compilationMode")]
        public object CompilationMode {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.ScriptPath == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ScriptPath");
            }
            if (this.ScriptLinkedService == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ScriptLinkedService");
            }

            if (this.ScriptLinkedService != null)
            {
                this.ScriptLinkedService.Validate();
            }





        }
    }
}