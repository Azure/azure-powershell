// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Change data capture resource type.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ChangeDataCaptureResource : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the ChangeDataCaptureResource class.
        /// </summary>
        public ChangeDataCaptureResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ChangeDataCaptureResource class.
        /// </summary>
        /// <param name="sourceConnectionsInfo">List of sources connections
        /// that can be used as sources in the CDC.</param>
        /// <param name="targetConnectionsInfo">List of target connections that
        /// can be used as sources in the CDC.</param>
        /// <param name="policy">CDC policy</param>
        /// <param name="id">The resource identifier.</param>
        /// <param name="name">The resource name.</param>
        /// <param name="type">The resource type.</param>
        /// <param name="etag">Etag identifies change in the resource.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="folder">The folder that this CDC is in. If not
        /// specified, CDC will appear at the root level.</param>
        /// <param name="description">The description of the change data
        /// capture.</param>
        /// <param name="allowVNetOverride">A boolean to determine if the vnet
        /// configuration needs to be overwritten.</param>
        /// <param name="status">Status of the CDC as to if it is running or
        /// stopped.</param>
        public ChangeDataCaptureResource(IList<MapperSourceConnectionsInfo> sourceConnectionsInfo, IList<MapperTargetConnectionsInfo> targetConnectionsInfo, MapperPolicy policy, string id = default(string), string name = default(string), string type = default(string), string etag = default(string), IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), ChangeDataCaptureFolder folder = default(ChangeDataCaptureFolder), string description = default(string), bool? allowVNetOverride = default(bool?), string status = default(string))
            : base(id, name, type, etag)
        {
            AdditionalProperties = additionalProperties;
            Folder = folder;
            Description = description;
            SourceConnectionsInfo = sourceConnectionsInfo;
            TargetConnectionsInfo = targetConnectionsInfo;
            Policy = policy;
            AllowVNetOverride = allowVNetOverride;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets the folder that this CDC is in. If not specified, CDC
        /// will appear at the root level.
        /// </summary>
        [JsonProperty(PropertyName = "properties.folder")]
        public ChangeDataCaptureFolder Folder { get; set; }

        /// <summary>
        /// Gets or sets the description of the change data capture.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets list of sources connections that can be used as
        /// sources in the CDC.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceConnectionsInfo")]
        public IList<MapperSourceConnectionsInfo> SourceConnectionsInfo { get; set; }

        /// <summary>
        /// Gets or sets list of target connections that can be used as sources
        /// in the CDC.
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetConnectionsInfo")]
        public IList<MapperTargetConnectionsInfo> TargetConnectionsInfo { get; set; }

        /// <summary>
        /// Gets or sets CDC policy
        /// </summary>
        [JsonProperty(PropertyName = "properties.policy")]
        public MapperPolicy Policy { get; set; }

        /// <summary>
        /// Gets or sets a boolean to determine if the vnet configuration needs
        /// to be overwritten.
        /// </summary>
        [JsonProperty(PropertyName = "properties.allowVNetOverride")]
        public bool? AllowVNetOverride { get; set; }

        /// <summary>
        /// Gets or sets status of the CDC as to if it is running or stopped.
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SourceConnectionsInfo == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceConnectionsInfo");
            }
            if (TargetConnectionsInfo == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetConnectionsInfo");
            }
            if (Policy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Policy");
            }
            if (SourceConnectionsInfo != null)
            {
                foreach (var element in SourceConnectionsInfo)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (TargetConnectionsInfo != null)
            {
                foreach (var element1 in TargetConnectionsInfo)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
