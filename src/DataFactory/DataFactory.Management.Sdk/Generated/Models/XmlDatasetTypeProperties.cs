// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Xml dataset properties.
    /// </summary>
    public partial class XmlDatasetTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the XmlDatasetTypeProperties class.
        /// </summary>
        public XmlDatasetTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the XmlDatasetTypeProperties class.
        /// </summary>

        /// <param name="location">The location of the json data storage.
        /// </param>

        /// <param name="encodingName">The code page name of the preferred encoding. If not specified, the default
        /// value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the
        /// name column of the table in the following link to set supported values:
        /// https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string
        /// (or Expression with resultType string).
        /// </param>

        /// <param name="nullValue">The null value string. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="compression">The data compression method used for the json dataset.
        /// </param>
        public XmlDatasetTypeProperties(DatasetLocation location, object encodingName = default(object), object nullValue = default(object), DatasetCompression compression = default(DatasetCompression))

        {
            this.Location = location;
            this.EncodingName = encodingName;
            this.NullValue = nullValue;
            this.Compression = compression;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the location of the json data storage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public DatasetLocation Location {get; set; }

        /// <summary>
        /// Gets or sets the code page name of the preferred encoding. If not
        /// specified, the default value is UTF-8, unless BOM denotes another Unicode
        /// encoding. Refer to the name column of the table in the following link to
        /// set supported values:
        /// https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string
        /// (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encodingName")]
        public object EncodingName {get; set; }

        /// <summary>
        /// Gets or sets the null value string. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nullValue")]
        public object NullValue {get; set; }

        /// <summary>
        /// Gets or sets the data compression method used for the json dataset.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "compression")]
        public DatasetCompression Compression {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Location == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Location");
            }



            if (this.Compression != null)
            {
                this.Compression.Validate();
            }
        }
    }
}