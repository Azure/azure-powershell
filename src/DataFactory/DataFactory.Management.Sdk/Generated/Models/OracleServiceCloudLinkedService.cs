// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Oracle Service Cloud linked service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("OracleServiceCloud")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class OracleServiceCloudLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the OracleServiceCloudLinkedService class.
        /// </summary>
        public OracleServiceCloudLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OracleServiceCloudLinkedService class.
        /// </summary>

        /// <param name="additionalProperties">The nested object which contains the information and credential which can
        /// be used to connect with related store or compute resource.
        /// </param>

        /// <param name="connectVia">The integration runtime reference.
        /// </param>

        /// <param name="description">Linked service description.
        /// </param>

        /// <param name="parameters">Parameters for linked service.
        /// </param>

        /// <param name="annotations">List of tags that can be used for describing the linked service.
        /// </param>

        /// <param name="host">The URL of the Oracle Service Cloud instance.
        /// </param>

        /// <param name="username">The user name that you use to access Oracle Service Cloud server.
        /// </param>

        /// <param name="password">The password corresponding to the user name that you provided in the
        /// username key.
        /// </param>

        /// <param name="useEncryptedEndpoints">Specifies whether the data source endpoints are encrypted using HTTPS. The
        /// default value is true. Type: boolean (or Expression with resultType
        /// boolean).
        /// </param>

        /// <param name="useHostVerification">Specifies whether to require the host name in the server&#39;s certificate to
        /// match the host name of the server when connecting over SSL. The default
        /// value is true. Type: boolean (or Expression with resultType boolean).
        /// </param>

        /// <param name="usePeerVerification">Specifies whether to verify the identity of the server when connecting over
        /// SSL. The default value is true. Type: boolean (or Expression with
        /// resultType boolean).
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>
        public OracleServiceCloudLinkedService(object host, object username, SecretBase password, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), System.Collections.Generic.IDictionary<string, ParameterSpecification> parameters = default(System.Collections.Generic.IDictionary<string, ParameterSpecification>), System.Collections.Generic.IList<object> annotations = default(System.Collections.Generic.IList<object>), object useEncryptedEndpoints = default(object), object useHostVerification = default(object), object usePeerVerification = default(object), string encryptedCredential = default(string))

        : base(additionalProperties, connectVia, description, parameters, annotations)
        {
            this.Host = host;
            this.Username = username;
            this.Password = password;
            this.UseEncryptedEndpoints = useEncryptedEndpoints;
            this.UseHostVerification = useHostVerification;
            this.UsePeerVerification = usePeerVerification;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the URL of the Oracle Service Cloud instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.host")]
        public object Host {get; set; }

        /// <summary>
        /// Gets or sets the user name that you use to access Oracle Service Cloud
        /// server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.username")]
        public object Username {get; set; }

        /// <summary>
        /// Gets or sets the password corresponding to the user name that you provided
        /// in the username key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.password")]
        public SecretBase Password {get; set; }

        /// <summary>
        /// Gets or sets specifies whether the data source endpoints are encrypted
        /// using HTTPS. The default value is true. Type: boolean (or Expression with
        /// resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.useEncryptedEndpoints")]
        public object UseEncryptedEndpoints {get; set; }

        /// <summary>
        /// Gets or sets specifies whether to require the host name in the server&#39;s
        /// certificate to match the host name of the server when connecting over SSL.
        /// The default value is true. Type: boolean (or Expression with resultType
        /// boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.useHostVerification")]
        public object UseHostVerification {get; set; }

        /// <summary>
        /// Gets or sets specifies whether to verify the identity of the server when
        /// connecting over SSL. The default value is true. Type: boolean (or
        /// Expression with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.usePeerVerification")]
        public object UsePeerVerification {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public string EncryptedCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Host == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Host");
            }
            if (this.Username == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Username");
            }
            if (this.Password == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Password");
            }







        }
    }
}