// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// AppendVariable activity properties.
    /// </summary>
    public partial class AppendVariableActivityTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the AppendVariableActivityTypeProperties class.
        /// </summary>
        public AppendVariableActivityTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AppendVariableActivityTypeProperties class.
        /// </summary>

        /// <param name="variableName">Name of the variable whose value needs to be appended to.
        /// </param>

        /// <param name="value">Value to be appended. Type: could be a static value matching type of the
        /// variable item or Expression with resultType matching type of the variable
        /// item
        /// </param>
        public AppendVariableActivityTypeProperties(string variableName = default(string), object value = default(object))

        {
            this.VariableName = variableName;
            this.Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of the variable whose value needs to be appended to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "variableName")]
        public string VariableName {get; set; }

        /// <summary>
        /// Gets or sets value to be appended. Type: could be a static value matching
        /// type of the variable item or Expression with resultType matching type of
        /// the variable item
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "value")]
        public object Value {get; set; }
    }
}