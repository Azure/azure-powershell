// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Google BigQuery service linked service properties.
    /// </summary>
    public partial class GoogleBigQueryV2LinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the GoogleBigQueryV2LinkedServiceTypeProperties class.
        /// </summary>
        public GoogleBigQueryV2LinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GoogleBigQueryV2LinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="projectId">The default BigQuery project id to query against. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="authenticationType">The OAuth 2.0 authentication mechanism used for authentication.
        /// Possible values include: &#39;ServiceAuthentication&#39;, &#39;UserAuthentication&#39;</param>

        /// <param name="clientId">The client id of the google application used to acquire the refresh token.
        /// Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="clientSecret">The client secret of the google application used to acquire the refresh
        /// token.
        /// </param>

        /// <param name="refreshToken">The refresh token obtained from Google for authorizing access to BigQuery
        /// for UserAuthentication.
        /// </param>

        /// <param name="keyFileContent">The content of the .json key file that is used to authenticate the service
        /// account. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>
        public GoogleBigQueryV2LinkedServiceTypeProperties(object projectId, string authenticationType, object clientId = default(object), SecretBase clientSecret = default(SecretBase), SecretBase refreshToken = default(SecretBase), SecretBase keyFileContent = default(SecretBase), string encryptedCredential = default(string))

        {
            this.ProjectId = projectId;
            this.AuthenticationType = authenticationType;
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            this.RefreshToken = refreshToken;
            this.KeyFileContent = keyFileContent;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the default BigQuery project id to query against. Type: string
        /// (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "projectId")]
        public object ProjectId {get; set; }

        /// <summary>
        /// Gets or sets the OAuth 2.0 authentication mechanism used for
        /// authentication. Possible values include: &#39;ServiceAuthentication&#39;, &#39;UserAuthentication&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authenticationType")]
        public string AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets the client id of the google application used to acquire the
        /// refresh token. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientId")]
        public object ClientId {get; set; }

        /// <summary>
        /// Gets or sets the client secret of the google application used to acquire
        /// the refresh token.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientSecret")]
        public SecretBase ClientSecret {get; set; }

        /// <summary>
        /// Gets or sets the refresh token obtained from Google for authorizing access
        /// to BigQuery for UserAuthentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "refreshToken")]
        public SecretBase RefreshToken {get; set; }

        /// <summary>
        /// Gets or sets the content of the .json key file that is used to authenticate
        /// the service account. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keyFileContent")]
        public SecretBase KeyFileContent {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ProjectId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ProjectId");
            }
            if (this.AuthenticationType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AuthenticationType");
            }







        }
    }
}