// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// A copy activity Rest service Sink.
    /// </summary>
    [Newtonsoft.Json.JsonObject("RestSink")]
    public partial class RestSink : CopySink
    {
        /// <summary>
        /// Initializes a new instance of the RestSink class.
        /// </summary>
        public RestSink()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RestSink class.
        /// </summary>

        /// <param name="writeBatchSize">Write batch size. Type: integer (or Expression with resultType integer),
        /// minimum: 0.
        /// </param>

        /// <param name="writeBatchTimeout">Write batch timeout. Type: string (or Expression with resultType string),
        /// pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// </param>

        /// <param name="sinkRetryCount">Sink retry count. Type: integer (or Expression with resultType integer).
        /// </param>

        /// <param name="sinkRetryWait">Sink retry wait. Type: string (or Expression with resultType string),
        /// pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// </param>

        /// <param name="maxConcurrentConnections">The maximum concurrent connection count for the sink data store. Type:
        /// integer (or Expression with resultType integer).
        /// </param>

        /// <param name="disableMetricsCollection">If true, disable data store metrics collection. Default is false. Type:
        /// boolean (or Expression with resultType boolean).
        /// </param>

        /// <param name="requestMethod">The HTTP method used to call the RESTful API. The default is POST. Type:
        /// string (or Expression with resultType string).
        /// </param>

        /// <param name="additionalHeaders">The additional HTTP headers in the request to the RESTful API. Type: key
        /// value pairs (value should be string type).
        /// </param>

        /// <param name="httpRequestTimeout">The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a
        /// response, not the timeout to read response data. Default value: 00:01:40.
        /// Type: string (or Expression with resultType string), pattern:
        /// ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// </param>

        /// <param name="requestInterval">The time to await before sending next request, in milliseconds
        /// </param>

        /// <param name="httpCompressionType">Http Compression Type to Send data in compressed format with Optimal
        /// Compression Level, Default is None. And The Only Supported option is Gzip.
        /// Type: string (or Expression with resultType string).
        /// </param>
        public RestSink(object writeBatchSize = default(object), object writeBatchTimeout = default(object), object sinkRetryCount = default(object), object sinkRetryWait = default(object), object maxConcurrentConnections = default(object), object disableMetricsCollection = default(object), object requestMethod = default(object), object additionalHeaders = default(object), object httpRequestTimeout = default(object), object requestInterval = default(object), object httpCompressionType = default(object))

        : base(writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection)
        {
            this.RequestMethod = requestMethod;
            this.AdditionalHeaders = additionalHeaders;
            this.HttpRequestTimeout = httpRequestTimeout;
            this.RequestInterval = requestInterval;
            this.HttpCompressionType = httpCompressionType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the HTTP method used to call the RESTful API. The default is
        /// POST. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requestMethod")]
        public object RequestMethod {get; set; }

        /// <summary>
        /// Gets or sets the additional HTTP headers in the request to the RESTful API.
        /// Type: key value pairs (value should be string type).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "additionalHeaders")]
        public object AdditionalHeaders {get; set; }

        /// <summary>
        /// Gets or sets the timeout (TimeSpan) to get an HTTP response. It is the
        /// timeout to get a response, not the timeout to read response data. Default
        /// value: 00:01:40. Type: string (or Expression with resultType string),
        /// pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "httpRequestTimeout")]
        public object HttpRequestTimeout {get; set; }

        /// <summary>
        /// Gets or sets the time to await before sending next request, in milliseconds
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requestInterval")]
        public object RequestInterval {get; set; }

        /// <summary>
        /// Gets or sets http Compression Type to Send data in compressed format with
        /// Optimal Compression Level, Default is None. And The Only Supported option
        /// is Gzip. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "httpCompressionType")]
        public object HttpCompressionType {get; set; }
    }
}