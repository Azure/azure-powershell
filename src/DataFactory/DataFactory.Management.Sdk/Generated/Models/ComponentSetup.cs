// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// The custom setup of installing 3rd party components.
    /// </summary>
    [Newtonsoft.Json.JsonObject("ComponentSetup")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ComponentSetup : CustomSetupBase
    {
        /// <summary>
        /// Initializes a new instance of the ComponentSetup class.
        /// </summary>
        public ComponentSetup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ComponentSetup class.
        /// </summary>

        /// <param name="componentName">The name of the 3rd party component.
        /// </param>

        /// <param name="licenseKey">The license key to activate the component.
        /// </param>
        public ComponentSetup(string componentName, SecretBase licenseKey = default(SecretBase))

        {
            this.ComponentName = componentName;
            this.LicenseKey = licenseKey;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the 3rd party component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.componentName")]
        public string ComponentName {get; set; }

        /// <summary>
        /// Gets or sets the license key to activate the component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.licenseKey")]
        public SecretBase LicenseKey {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ComponentName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ComponentName");
            }


        }
    }
}