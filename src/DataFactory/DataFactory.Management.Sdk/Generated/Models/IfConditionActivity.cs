// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// This activity evaluates a boolean expression and executes either the
    /// activities under the ifTrueActivities property or the ifFalseActivities
    /// property depending on the result of the expression.
    /// </summary>
    [Newtonsoft.Json.JsonObject("IfCondition")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class IfConditionActivity : ControlActivity
    {
        /// <summary>
        /// Initializes a new instance of the IfConditionActivity class.
        /// </summary>
        public IfConditionActivity()
        {
            this.Expression = new Expression();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IfConditionActivity class.
        /// </summary>

        /// <param name="additionalProperties">A pipeline activity.
        /// </param>

        /// <param name="name">Activity name.
        /// </param>

        /// <param name="description">Activity description.
        /// </param>

        /// <param name="state">Activity state. This is an optional property and if not provided, the state
        /// will be Active by default.
        /// Possible values include: &#39;Active&#39;, &#39;Inactive&#39;</param>

        /// <param name="onInactiveMarkAs">Status result of the activity when the state is set to Inactive. This is an
        /// optional property and if not provided when the activity is inactive, the
        /// status will be Succeeded by default.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Skipped&#39;</param>

        /// <param name="dependsOn">Activity depends on condition.
        /// </param>

        /// <param name="userProperties">Activity user properties.
        /// </param>

        /// <param name="expression">An expression that would evaluate to Boolean. This is used to determine the
        /// block of activities (ifTrueActivities or ifFalseActivities) that will be
        /// executed.
        /// </param>

        /// <param name="ifTrueActivities">List of activities to execute if expression is evaluated to true. This is
        /// an optional property and if not provided, the activity will exit without
        /// any action.
        /// </param>

        /// <param name="ifFalseActivities">List of activities to execute if expression is evaluated to false. This is
        /// an optional property and if not provided, the activity will exit without
        /// any action.
        /// </param>
        public IfConditionActivity(string name, Expression expression, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string description = default(string), string state = default(string), string onInactiveMarkAs = default(string), System.Collections.Generic.IList<ActivityDependency> dependsOn = default(System.Collections.Generic.IList<ActivityDependency>), System.Collections.Generic.IList<UserProperty> userProperties = default(System.Collections.Generic.IList<UserProperty>), System.Collections.Generic.IList<Activity> ifTrueActivities = default(System.Collections.Generic.IList<Activity>), System.Collections.Generic.IList<Activity> ifFalseActivities = default(System.Collections.Generic.IList<Activity>))

        : base(name, additionalProperties, description, state, onInactiveMarkAs, dependsOn, userProperties)
        {
            this.Expression = expression;
            this.IfTrueActivities = ifTrueActivities;
            this.IfFalseActivities = ifFalseActivities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets an expression that would evaluate to Boolean. This is used to
        /// determine the block of activities (ifTrueActivities or ifFalseActivities)
        /// that will be executed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.expression")]
        public Expression Expression {get; set; }

        /// <summary>
        /// Gets or sets list of activities to execute if expression is evaluated to
        /// true. This is an optional property and if not provided, the activity will
        /// exit without any action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.ifTrueActivities")]
        public System.Collections.Generic.IList<Activity> IfTrueActivities {get; set; }

        /// <summary>
        /// Gets or sets list of activities to execute if expression is evaluated to
        /// false. This is an optional property and if not provided, the activity will
        /// exit without any action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.ifFalseActivities")]
        public System.Collections.Generic.IList<Activity> IfFalseActivities {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Expression == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Expression");
            }
            if (this.Expression != null)
            {
                this.Expression.Validate();
            }
            if (this.IfTrueActivities != null)
            {
                foreach (var element in this.IfTrueActivities)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.IfFalseActivities != null)
            {
                foreach (var element in this.IfFalseActivities)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}