// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Trigger that runs every time a Blob event occurs.
    /// </summary>
    [Newtonsoft.Json.JsonObject("BlobEventsTrigger")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class BlobEventsTrigger : MultiplePipelineTrigger
    {
        /// <summary>
        /// Initializes a new instance of the BlobEventsTrigger class.
        /// </summary>
        public BlobEventsTrigger()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BlobEventsTrigger class.
        /// </summary>

        /// <param name="additionalProperties">Azure data factory nested object which contains information about creating
        /// pipeline run
        /// </param>

        /// <param name="description">Trigger description.
        /// </param>

        /// <param name="runtimeState">Indicates if trigger is running or not. Updated when Start/Stop APIs are
        /// called on the Trigger.
        /// Possible values include: &#39;Started&#39;, &#39;Stopped&#39;, &#39;Disabled&#39;</param>

        /// <param name="annotations">List of tags that can be used for describing the trigger.
        /// </param>

        /// <param name="pipelines">Pipelines that need to be started.
        /// </param>

        /// <param name="blobPathBeginsWith">The blob path must begin with the pattern provided for trigger to fire. For
        /// example, &#39;/records/blobs/december/&#39; will only fire the trigger for blobs in
        /// the december folder under the records container. At least one of these must
        /// be provided: blobPathBeginsWith, blobPathEndsWith.
        /// </param>

        /// <param name="blobPathEndsWith">The blob path must end with the pattern provided for trigger to fire. For
        /// example, &#39;december/boxes.csv&#39; will only fire the trigger for blobs named
        /// boxes in a december folder. At least one of these must be provided:
        /// blobPathBeginsWith, blobPathEndsWith.
        /// </param>

        /// <param name="ignoreEmptyBlobs">If set to true, blobs with zero bytes will be ignored.
        /// </param>

        /// <param name="events">The type of events that cause this trigger to fire.
        /// </param>

        /// <param name="scope">The ARM resource ID of the Storage Account.
        /// </param>
        public BlobEventsTrigger(System.Collections.Generic.IList<string> events, string scope, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string description = default(string), string runtimeState = default(string), System.Collections.Generic.IList<object> annotations = default(System.Collections.Generic.IList<object>), System.Collections.Generic.IList<TriggerPipelineReference> pipelines = default(System.Collections.Generic.IList<TriggerPipelineReference>), string blobPathBeginsWith = default(string), string blobPathEndsWith = default(string), bool? ignoreEmptyBlobs = default(bool?))

        : base(additionalProperties, description, runtimeState, annotations, pipelines)
        {
            this.BlobPathBeginsWith = blobPathBeginsWith;
            this.BlobPathEndsWith = blobPathEndsWith;
            this.IgnoreEmptyBlobs = ignoreEmptyBlobs;
            this.Events = events;
            this.Scope = scope;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the blob path must begin with the pattern provided for trigger
        /// to fire. For example, &#39;/records/blobs/december/&#39; will only fire the trigger
        /// for blobs in the december folder under the records container. At least one
        /// of these must be provided: blobPathBeginsWith, blobPathEndsWith.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.blobPathBeginsWith")]
        public string BlobPathBeginsWith {get; set; }

        /// <summary>
        /// Gets or sets the blob path must end with the pattern provided for trigger
        /// to fire. For example, &#39;december/boxes.csv&#39; will only fire the trigger for
        /// blobs named boxes in a december folder. At least one of these must be
        /// provided: blobPathBeginsWith, blobPathEndsWith.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.blobPathEndsWith")]
        public string BlobPathEndsWith {get; set; }

        /// <summary>
        /// Gets or sets if set to true, blobs with zero bytes will be ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.ignoreEmptyBlobs")]
        public bool? IgnoreEmptyBlobs {get; set; }

        /// <summary>
        /// Gets or sets the type of events that cause this trigger to fire.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.events")]
        public System.Collections.Generic.IList<string> Events {get; set; }

        /// <summary>
        /// Gets or sets the ARM resource ID of the Storage Account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.scope")]
        public string Scope {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Events == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Events");
            }
            if (this.Scope == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Scope");
            }




        }
    }
}