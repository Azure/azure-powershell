// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Office365 linked service properties.
    /// </summary>
    public partial class Office365LinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the Office365LinkedServiceTypeProperties class.
        /// </summary>
        public Office365LinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Office365LinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="office365TenantId">Azure tenant ID to which the Office 365 account belongs. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="servicePrincipalTenantId">Specify the tenant information under which your Azure AD web application
        /// resides. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="servicePrincipalId">Specify the application&#39;s client ID. Type: string (or Expression with
        /// resultType string).
        /// </param>

        /// <param name="servicePrincipalKey">Specify the application&#39;s key.
        /// </param>

        /// <param name="servicePrincipalCredentialType">The service principal credential type for
        /// authentication.&#39;ServicePrincipalKey&#39; for key/secret, &#39;ServicePrincipalCert&#39;
        /// for certificate. If not specified, &#39;ServicePrincipalKey&#39; is in use. Type:
        /// string (or Expression with resultType string).
        /// </param>

        /// <param name="servicePrincipalEmbeddedCert">Specify the base64 encoded certificate of your application registered in
        /// Azure Active Directory. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="servicePrincipalEmbeddedCertPassword">Specify the password of your certificate if your certificate has a password
        /// and you are using AadServicePrincipal authentication. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>
        public Office365LinkedServiceTypeProperties(object office365TenantId, object servicePrincipalTenantId, object servicePrincipalId, SecretBase servicePrincipalKey, object servicePrincipalCredentialType = default(object), SecretBase servicePrincipalEmbeddedCert = default(SecretBase), SecretBase servicePrincipalEmbeddedCertPassword = default(SecretBase), string encryptedCredential = default(string))

        {
            this.Office365TenantId = office365TenantId;
            this.ServicePrincipalTenantId = servicePrincipalTenantId;
            this.ServicePrincipalId = servicePrincipalId;
            this.ServicePrincipalKey = servicePrincipalKey;
            this.ServicePrincipalCredentialType = servicePrincipalCredentialType;
            this.ServicePrincipalEmbeddedCert = servicePrincipalEmbeddedCert;
            this.ServicePrincipalEmbeddedCertPassword = servicePrincipalEmbeddedCertPassword;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets azure tenant ID to which the Office 365 account belongs. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "office365TenantId")]
        public object Office365TenantId {get; set; }

        /// <summary>
        /// Gets or sets specify the tenant information under which your Azure AD web
        /// application resides. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalTenantId")]
        public object ServicePrincipalTenantId {get; set; }

        /// <summary>
        /// Gets or sets specify the application&#39;s client ID. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalId")]
        public object ServicePrincipalId {get; set; }

        /// <summary>
        /// Gets or sets specify the application&#39;s key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalKey")]
        public SecretBase ServicePrincipalKey {get; set; }

        /// <summary>
        /// Gets or sets the service principal credential type for
        /// authentication.&#39;ServicePrincipalKey&#39; for key/secret, &#39;ServicePrincipalCert&#39;
        /// for certificate. If not specified, &#39;ServicePrincipalKey&#39; is in use. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalCredentialType")]
        public object ServicePrincipalCredentialType {get; set; }

        /// <summary>
        /// Gets or sets specify the base64 encoded certificate of your application
        /// registered in Azure Active Directory. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalEmbeddedCert")]
        public SecretBase ServicePrincipalEmbeddedCert {get; set; }

        /// <summary>
        /// Gets or sets specify the password of your certificate if your certificate
        /// has a password and you are using AadServicePrincipal authentication. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalEmbeddedCertPassword")]
        public SecretBase ServicePrincipalEmbeddedCertPassword {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Office365TenantId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Office365TenantId");
            }
            if (this.ServicePrincipalTenantId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ServicePrincipalTenantId");
            }
            if (this.ServicePrincipalId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ServicePrincipalId");
            }
            if (this.ServicePrincipalKey == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ServicePrincipalKey");
            }








        }
    }
}