// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Monitoring data for integration runtime node.
    /// </summary>
    public partial class IntegrationRuntimeNodeMonitoringData
    {
        /// <summary>
        /// Initializes a new instance of the IntegrationRuntimeNodeMonitoringData class.
        /// </summary>
        public IntegrationRuntimeNodeMonitoringData()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IntegrationRuntimeNodeMonitoringData class.
        /// </summary>

        /// <param name="additionalProperties">Monitoring data for integration runtime node.
        /// </param>

        /// <param name="nodeName">Name of the integration runtime node.
        /// </param>

        /// <param name="availableMemoryInMb">Available memory (MB) on the integration runtime node.
        /// </param>

        /// <param name="cpuUtilization">CPU percentage on the integration runtime node.
        /// </param>

        /// <param name="concurrentJobsLimit">Maximum concurrent jobs on the integration runtime node.
        /// </param>

        /// <param name="concurrentJobsRunning">The number of jobs currently running on the integration runtime node.
        /// </param>

        /// <param name="maxConcurrentJobs">The maximum concurrent jobs in this integration runtime.
        /// </param>

        /// <param name="sentBytes">Sent bytes on the integration runtime node.
        /// </param>

        /// <param name="receivedBytes">Received bytes on the integration runtime node.
        /// </param>
        public IntegrationRuntimeNodeMonitoringData(System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string nodeName = default(string), int? availableMemoryInMb = default(int?), int? cpuUtilization = default(int?), int? concurrentJobsLimit = default(int?), int? concurrentJobsRunning = default(int?), int? maxConcurrentJobs = default(int?), double? sentBytes = default(double?), double? receivedBytes = default(double?))

        {
            this.AdditionalProperties = additionalProperties;
            this.NodeName = nodeName;
            this.AvailableMemoryInMb = availableMemoryInMb;
            this.CpuUtilization = cpuUtilization;
            this.ConcurrentJobsLimit = concurrentJobsLimit;
            this.ConcurrentJobsRunning = concurrentJobsRunning;
            this.MaxConcurrentJobs = maxConcurrentJobs;
            this.SentBytes = sentBytes;
            this.ReceivedBytes = receivedBytes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets monitoring data for integration runtime node.
        /// </summary>
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {get; set; }

        /// <summary>
        /// Gets name of the integration runtime node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nodeName")]
        public string NodeName {get; private set; }

        /// <summary>
        /// Gets available memory (MB) on the integration runtime node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "availableMemoryInMB")]
        public int? AvailableMemoryInMb {get; private set; }

        /// <summary>
        /// Gets cPU percentage on the integration runtime node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cpuUtilization")]
        public int? CpuUtilization {get; private set; }

        /// <summary>
        /// Gets maximum concurrent jobs on the integration runtime node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "concurrentJobsLimit")]
        public int? ConcurrentJobsLimit {get; private set; }

        /// <summary>
        /// Gets the number of jobs currently running on the integration runtime node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "concurrentJobsRunning")]
        public int? ConcurrentJobsRunning {get; private set; }

        /// <summary>
        /// Gets the maximum concurrent jobs in this integration runtime.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxConcurrentJobs")]
        public int? MaxConcurrentJobs {get; private set; }

        /// <summary>
        /// Gets sent bytes on the integration runtime node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sentBytes")]
        public double? SentBytes {get; private set; }

        /// <summary>
        /// Gets received bytes on the integration runtime node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "receivedBytes")]
        public double? ReceivedBytes {get; private set; }
    }
}