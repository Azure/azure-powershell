// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// ForEach activity properties.
    /// </summary>
    public partial class ForEachActivityTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the ForEachActivityTypeProperties class.
        /// </summary>
        public ForEachActivityTypeProperties()
        {
            this.Items = new Expression();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ForEachActivityTypeProperties class.
        /// </summary>

        /// <param name="isSequential">Should the loop be executed in sequence or in parallel (max 50)
        /// </param>

        /// <param name="batchCount">Batch count to be used for controlling the number of parallel execution
        /// (when isSequential is set to false).
        /// </param>

        /// <param name="items">Collection to iterate.
        /// </param>

        /// <param name="activities">List of activities to execute .
        /// </param>
        public ForEachActivityTypeProperties(Expression items, System.Collections.Generic.IList<Activity> activities, bool? isSequential = default(bool?), int? batchCount = default(int?))

        {
            this.IsSequential = isSequential;
            this.BatchCount = batchCount;
            this.Items = items;
            this.Activities = activities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets should the loop be executed in sequence or in parallel (max
        /// 50)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isSequential")]
        public bool? IsSequential {get; set; }

        /// <summary>
        /// Gets or sets batch count to be used for controlling the number of parallel
        /// execution (when isSequential is set to false).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "batchCount")]
        public int? BatchCount {get; set; }

        /// <summary>
        /// Gets or sets collection to iterate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "items")]
        public Expression Items {get; set; }

        /// <summary>
        /// Gets or sets list of activities to execute .
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "activities")]
        public System.Collections.Generic.IList<Activity> Activities {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Items == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Items");
            }
            if (this.Activities == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Activities");
            }
            if (this.BatchCount != null)
            {
                if (this.BatchCount > 50)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "BatchCount", 50);
                }
            }
            if (this.Items != null)
            {
                this.Items.Validate();
            }
            if (this.Activities != null)
            {
                foreach (var element in this.Activities)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}