// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Execute SSIS package activity properties.
    /// </summary>
    public partial class ExecuteSsisPackageActivityTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the ExecuteSsisPackageActivityTypeProperties class.
        /// </summary>
        public ExecuteSsisPackageActivityTypeProperties()
        {
            this.ConnectVia = new IntegrationRuntimeReference();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExecuteSsisPackageActivityTypeProperties class.
        /// </summary>

        /// <param name="packageLocation">SSIS package location.
        /// </param>

        /// <param name="runtime">Specifies the runtime to execute SSIS package. The value should be &#34;x86&#34; or
        /// &#34;x64&#34;. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="loggingLevel">The logging level of SSIS package execution. Type: string (or Expression
        /// with resultType string).
        /// </param>

        /// <param name="environmentPath">The environment path to execute the SSIS package. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="executionCredential">The package execution credential.
        /// </param>

        /// <param name="connectVia">The integration runtime reference.
        /// </param>

        /// <param name="projectParameters">The project level parameters to execute the SSIS package.
        /// </param>

        /// <param name="packageParameters">The package level parameters to execute the SSIS package.
        /// </param>

        /// <param name="projectConnectionManagers">The project level connection managers to execute the SSIS package.
        /// </param>

        /// <param name="packageConnectionManagers">The package level connection managers to execute the SSIS package.
        /// </param>

        /// <param name="propertyOverrides">The property overrides to execute the SSIS package.
        /// </param>

        /// <param name="logLocation">SSIS package execution log location.
        /// </param>
        public ExecuteSsisPackageActivityTypeProperties(SsisPackageLocation packageLocation, IntegrationRuntimeReference connectVia, object runtime = default(object), object loggingLevel = default(object), object environmentPath = default(object), SsisExecutionCredential executionCredential = default(SsisExecutionCredential), System.Collections.Generic.IDictionary<string, SsisExecutionParameter> projectParameters = default(System.Collections.Generic.IDictionary<string, SsisExecutionParameter>), System.Collections.Generic.IDictionary<string, SsisExecutionParameter> packageParameters = default(System.Collections.Generic.IDictionary<string, SsisExecutionParameter>), System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, SsisExecutionParameter>> projectConnectionManagers = default(System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, SsisExecutionParameter>>), System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, SsisExecutionParameter>> packageConnectionManagers = default(System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, SsisExecutionParameter>>), System.Collections.Generic.IDictionary<string, SsisPropertyOverride> propertyOverrides = default(System.Collections.Generic.IDictionary<string, SsisPropertyOverride>), SsisLogLocation logLocation = default(SsisLogLocation))

        {
            this.PackageLocation = packageLocation;
            this.Runtime = runtime;
            this.LoggingLevel = loggingLevel;
            this.EnvironmentPath = environmentPath;
            this.ExecutionCredential = executionCredential;
            this.ConnectVia = connectVia;
            this.ProjectParameters = projectParameters;
            this.PackageParameters = packageParameters;
            this.ProjectConnectionManagers = projectConnectionManagers;
            this.PackageConnectionManagers = packageConnectionManagers;
            this.PropertyOverrides = propertyOverrides;
            this.LogLocation = logLocation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets sSIS package location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "packageLocation")]
        public SsisPackageLocation PackageLocation {get; set; }

        /// <summary>
        /// Gets or sets specifies the runtime to execute SSIS package. The value
        /// should be &#34;x86&#34; or &#34;x64&#34;. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runtime")]
        public object Runtime {get; set; }

        /// <summary>
        /// Gets or sets the logging level of SSIS package execution. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "loggingLevel")]
        public object LoggingLevel {get; set; }

        /// <summary>
        /// Gets or sets the environment path to execute the SSIS package. Type: string
        /// (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "environmentPath")]
        public object EnvironmentPath {get; set; }

        /// <summary>
        /// Gets or sets the package execution credential.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "executionCredential")]
        public SsisExecutionCredential ExecutionCredential {get; set; }

        /// <summary>
        /// Gets or sets the integration runtime reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectVia")]
        public IntegrationRuntimeReference ConnectVia {get; set; }

        /// <summary>
        /// Gets or sets the project level parameters to execute the SSIS package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "projectParameters")]
        public System.Collections.Generic.IDictionary<string, SsisExecutionParameter> ProjectParameters {get; set; }

        /// <summary>
        /// Gets or sets the package level parameters to execute the SSIS package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "packageParameters")]
        public System.Collections.Generic.IDictionary<string, SsisExecutionParameter> PackageParameters {get; set; }

        /// <summary>
        /// Gets or sets the project level connection managers to execute the SSIS
        /// package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "projectConnectionManagers")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, SsisExecutionParameter>> ProjectConnectionManagers {get; set; }

        /// <summary>
        /// Gets or sets the package level connection managers to execute the SSIS
        /// package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "packageConnectionManagers")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, SsisExecutionParameter>> PackageConnectionManagers {get; set; }

        /// <summary>
        /// Gets or sets the property overrides to execute the SSIS package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "propertyOverrides")]
        public System.Collections.Generic.IDictionary<string, SsisPropertyOverride> PropertyOverrides {get; set; }

        /// <summary>
        /// Gets or sets sSIS package execution log location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "logLocation")]
        public SsisLogLocation LogLocation {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.PackageLocation == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "PackageLocation");
            }
            if (this.ConnectVia == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ConnectVia");
            }
            if (this.PackageLocation != null)
            {
                this.PackageLocation.Validate();
            }



            if (this.ExecutionCredential != null)
            {
                this.ExecutionCredential.Validate();
            }
            if (this.ConnectVia != null)
            {
                this.ConnectVia.Validate();
            }
            if (this.ProjectParameters != null)
            {
                foreach (var valueElement in this.ProjectParameters.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (this.PackageParameters != null)
            {
                foreach (var valueElement in this.PackageParameters.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (this.ProjectConnectionManagers != null)
            {
                foreach (var valueElement in this.ProjectConnectionManagers.Values)
                {
                    if (valueElement != null)
                    {
                        foreach (var valueElement1 in valueElement.Values)
                        {
                            if (valueElement1 != null)
                            {
                                valueElement1.Validate();
                            }
                        }
                    }
                }
            }
            if (this.PackageConnectionManagers != null)
            {
                foreach (var valueElement in this.PackageConnectionManagers.Values)
                {
                    if (valueElement != null)
                    {
                        foreach (var valueElement1 in valueElement.Values)
                        {
                            if (valueElement1 != null)
                            {
                                valueElement1.Validate();
                            }
                        }
                    }
                }
            }
            if (this.PropertyOverrides != null)
            {
                foreach (var valueElement in this.PropertyOverrides.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (this.LogLocation != null)
            {
                this.LogLocation.Validate();
            }
        }
    }
}