// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// File server read settings.
    /// </summary>
    [Newtonsoft.Json.JsonObject("FileServerReadSettings")]
    public partial class FileServerReadSettings : StoreReadSettings
    {
        /// <summary>
        /// Initializes a new instance of the FileServerReadSettings class.
        /// </summary>
        public FileServerReadSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FileServerReadSettings class.
        /// </summary>

        /// <param name="additionalProperties">Connector read setting.
        /// </param>

        /// <param name="maxConcurrentConnections">The maximum concurrent connection count for the source data store. Type:
        /// integer (or Expression with resultType integer).
        /// </param>

        /// <param name="disableMetricsCollection">If true, disable data store metrics collection. Default is false. Type:
        /// boolean (or Expression with resultType boolean).
        /// </param>

        /// <param name="recursive">If true, files under the folder path will be read recursively. Default is
        /// true. Type: boolean (or Expression with resultType boolean).
        /// </param>

        /// <param name="wildcardFolderPath">FileServer wildcardFolderPath. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="wildcardFileName">FileServer wildcardFileName. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="fileListPath">Point to a text file that lists each file (relative path to the path
        /// configured in the dataset) that you want to copy. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="enablePartitionDiscovery">Indicates whether to enable partition discovery. Type: boolean (or
        /// Expression with resultType boolean).
        /// </param>

        /// <param name="partitionRootPath">Specify the root path where partition discovery starts from. Type: string
        /// (or Expression with resultType string).
        /// </param>

        /// <param name="deleteFilesAfterCompletion">Indicates whether the source files need to be deleted after copy
        /// completion. Default is false. Type: boolean (or Expression with resultType
        /// boolean).
        /// </param>

        /// <param name="modifiedDatetimeStart">The start of file&#39;s modified datetime. Type: string (or Expression with
        /// resultType string).
        /// </param>

        /// <param name="modifiedDatetimeEnd">The end of file&#39;s modified datetime. Type: string (or Expression with
        /// resultType string).
        /// </param>

        /// <param name="fileFilter">Specify a filter to be used to select a subset of files in the folderPath
        /// rather than all files. Type: string (or Expression with resultType string).
        /// </param>
        public FileServerReadSettings(System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), object maxConcurrentConnections = default(object), object disableMetricsCollection = default(object), object recursive = default(object), object wildcardFolderPath = default(object), object wildcardFileName = default(object), object fileListPath = default(object), object enablePartitionDiscovery = default(object), object partitionRootPath = default(object), object deleteFilesAfterCompletion = default(object), object modifiedDatetimeStart = default(object), object modifiedDatetimeEnd = default(object), object fileFilter = default(object))

        : base(additionalProperties, maxConcurrentConnections, disableMetricsCollection)
        {
            this.Recursive = recursive;
            this.WildcardFolderPath = wildcardFolderPath;
            this.WildcardFileName = wildcardFileName;
            this.FileListPath = fileListPath;
            this.EnablePartitionDiscovery = enablePartitionDiscovery;
            this.PartitionRootPath = partitionRootPath;
            this.DeleteFilesAfterCompletion = deleteFilesAfterCompletion;
            this.ModifiedDatetimeStart = modifiedDatetimeStart;
            this.ModifiedDatetimeEnd = modifiedDatetimeEnd;
            this.FileFilter = fileFilter;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets if true, files under the folder path will be read recursively.
        /// Default is true. Type: boolean (or Expression with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recursive")]
        public object Recursive {get; set; }

        /// <summary>
        /// Gets or sets fileServer wildcardFolderPath. Type: string (or Expression
        /// with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "wildcardFolderPath")]
        public object WildcardFolderPath {get; set; }

        /// <summary>
        /// Gets or sets fileServer wildcardFileName. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "wildcardFileName")]
        public object WildcardFileName {get; set; }

        /// <summary>
        /// Gets or sets point to a text file that lists each file (relative path to
        /// the path configured in the dataset) that you want to copy. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileListPath")]
        public object FileListPath {get; set; }

        /// <summary>
        /// Gets or sets indicates whether to enable partition discovery. Type: boolean
        /// (or Expression with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enablePartitionDiscovery")]
        public object EnablePartitionDiscovery {get; set; }

        /// <summary>
        /// Gets or sets specify the root path where partition discovery starts from.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "partitionRootPath")]
        public object PartitionRootPath {get; set; }

        /// <summary>
        /// Gets or sets indicates whether the source files need to be deleted after
        /// copy completion. Default is false. Type: boolean (or Expression with
        /// resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deleteFilesAfterCompletion")]
        public object DeleteFilesAfterCompletion {get; set; }

        /// <summary>
        /// Gets or sets the start of file&#39;s modified datetime. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "modifiedDatetimeStart")]
        public object ModifiedDatetimeStart {get; set; }

        /// <summary>
        /// Gets or sets the end of file&#39;s modified datetime. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "modifiedDatetimeEnd")]
        public object ModifiedDatetimeEnd {get; set; }

        /// <summary>
        /// Gets or sets specify a filter to be used to select a subset of files in the
        /// folderPath rather than all files. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileFilter")]
        public object FileFilter {get; set; }
    }
}