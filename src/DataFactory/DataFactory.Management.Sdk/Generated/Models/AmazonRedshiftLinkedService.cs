// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Linked service for Amazon Redshift.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AmazonRedshift")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class AmazonRedshiftLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the AmazonRedshiftLinkedService class.
        /// </summary>
        public AmazonRedshiftLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AmazonRedshiftLinkedService class.
        /// </summary>

        /// <param name="additionalProperties">The nested object which contains the information and credential which can
        /// be used to connect with related store or compute resource.
        /// </param>

        /// <param name="connectVia">The integration runtime reference.
        /// </param>

        /// <param name="description">Linked service description.
        /// </param>

        /// <param name="parameters">Parameters for linked service.
        /// </param>

        /// <param name="annotations">List of tags that can be used for describing the linked service.
        /// </param>

        /// <param name="server">The name of the Amazon Redshift server. Type: string (or Expression with
        /// resultType string).
        /// </param>

        /// <param name="username">The username of the Amazon Redshift source. Type: string (or Expression
        /// with resultType string).
        /// </param>

        /// <param name="password">The password of the Amazon Redshift source.
        /// </param>

        /// <param name="database">The database name of the Amazon Redshift source. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="port">The TCP port number that the Amazon Redshift server uses to listen for
        /// client connections. The default value is 5439. Type: integer (or Expression
        /// with resultType integer).
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>
        public AmazonRedshiftLinkedService(object server, object database, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), System.Collections.Generic.IDictionary<string, ParameterSpecification> parameters = default(System.Collections.Generic.IDictionary<string, ParameterSpecification>), System.Collections.Generic.IList<object> annotations = default(System.Collections.Generic.IList<object>), object username = default(object), SecretBase password = default(SecretBase), object port = default(object), string encryptedCredential = default(string))

        : base(additionalProperties, connectVia, description, parameters, annotations)
        {
            this.Server = server;
            this.Username = username;
            this.Password = password;
            this.Database = database;
            this.Port = port;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the Amazon Redshift server. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.server")]
        public object Server {get; set; }

        /// <summary>
        /// Gets or sets the username of the Amazon Redshift source. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.username")]
        public object Username {get; set; }

        /// <summary>
        /// Gets or sets the password of the Amazon Redshift source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.password")]
        public SecretBase Password {get; set; }

        /// <summary>
        /// Gets or sets the database name of the Amazon Redshift source. Type: string
        /// (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.database")]
        public object Database {get; set; }

        /// <summary>
        /// Gets or sets the TCP port number that the Amazon Redshift server uses to
        /// listen for client connections. The default value is 5439. Type: integer (or
        /// Expression with resultType integer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.port")]
        public object Port {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public string EncryptedCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Server == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Server");
            }
            if (this.Database == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Database");
            }






        }
    }
}