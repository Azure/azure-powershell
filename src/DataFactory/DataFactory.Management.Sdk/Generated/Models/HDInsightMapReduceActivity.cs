// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// HDInsight MapReduce activity type.
    /// </summary>
    [Newtonsoft.Json.JsonObject("HDInsightMapReduce")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class HDInsightMapReduceActivity : ExecutionActivity
    {
        /// <summary>
        /// Initializes a new instance of the HDInsightMapReduceActivity class.
        /// </summary>
        public HDInsightMapReduceActivity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HDInsightMapReduceActivity class.
        /// </summary>

        /// <param name="additionalProperties">A pipeline activity.
        /// </param>

        /// <param name="name">Activity name.
        /// </param>

        /// <param name="description">Activity description.
        /// </param>

        /// <param name="state">Activity state. This is an optional property and if not provided, the state
        /// will be Active by default.
        /// Possible values include: &#39;Active&#39;, &#39;Inactive&#39;</param>

        /// <param name="onInactiveMarkAs">Status result of the activity when the state is set to Inactive. This is an
        /// optional property and if not provided when the activity is inactive, the
        /// status will be Succeeded by default.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Skipped&#39;</param>

        /// <param name="dependsOn">Activity depends on condition.
        /// </param>

        /// <param name="userProperties">Activity user properties.
        /// </param>

        /// <param name="linkedServiceName">Linked service reference.
        /// </param>

        /// <param name="policy">Activity policy.
        /// </param>

        /// <param name="storageLinkedServices">Storage linked service references.
        /// </param>

        /// <param name="arguments">User specified arguments to HDInsightActivity.
        /// </param>

        /// <param name="getDebugInfo">Debug info option.
        /// Possible values include: &#39;None&#39;, &#39;Always&#39;, &#39;Failure&#39;</param>

        /// <param name="className">Class name. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="jarFilePath">Jar path. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="jarLinkedService">Jar linked service reference.
        /// </param>

        /// <param name="jarLibs">Jar libs.
        /// </param>

        /// <param name="defines">Allows user to specify defines for the MapReduce job request.
        /// </param>
        public HDInsightMapReduceActivity(string name, object className, object jarFilePath, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string description = default(string), string state = default(string), string onInactiveMarkAs = default(string), System.Collections.Generic.IList<ActivityDependency> dependsOn = default(System.Collections.Generic.IList<ActivityDependency>), System.Collections.Generic.IList<UserProperty> userProperties = default(System.Collections.Generic.IList<UserProperty>), LinkedServiceReference linkedServiceName = default(LinkedServiceReference), ActivityPolicy policy = default(ActivityPolicy), System.Collections.Generic.IList<LinkedServiceReference> storageLinkedServices = default(System.Collections.Generic.IList<LinkedServiceReference>), System.Collections.Generic.IList<object> arguments = default(System.Collections.Generic.IList<object>), string getDebugInfo = default(string), LinkedServiceReference jarLinkedService = default(LinkedServiceReference), System.Collections.Generic.IList<object> jarLibs = default(System.Collections.Generic.IList<object>), System.Collections.Generic.IDictionary<string, object> defines = default(System.Collections.Generic.IDictionary<string, object>))

        : base(name, additionalProperties, description, state, onInactiveMarkAs, dependsOn, userProperties, linkedServiceName, policy)
        {
            this.StorageLinkedServices = storageLinkedServices;
            this.Arguments = arguments;
            this.GetDebugInfo = getDebugInfo;
            this.ClassName = className;
            this.JarFilePath = jarFilePath;
            this.JarLinkedService = jarLinkedService;
            this.JarLibs = jarLibs;
            this.Defines = defines;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets storage linked service references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.storageLinkedServices")]
        public System.Collections.Generic.IList<LinkedServiceReference> StorageLinkedServices {get; set; }

        /// <summary>
        /// Gets or sets user specified arguments to HDInsightActivity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.arguments")]
        public System.Collections.Generic.IList<object> Arguments {get; set; }

        /// <summary>
        /// Gets or sets debug info option. Possible values include: &#39;None&#39;, &#39;Always&#39;, &#39;Failure&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.getDebugInfo")]
        public string GetDebugInfo {get; set; }

        /// <summary>
        /// Gets or sets class name. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.className")]
        public object ClassName {get; set; }

        /// <summary>
        /// Gets or sets jar path. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.jarFilePath")]
        public object JarFilePath {get; set; }

        /// <summary>
        /// Gets or sets jar linked service reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.jarLinkedService")]
        public LinkedServiceReference JarLinkedService {get; set; }

        /// <summary>
        /// Gets or sets jar libs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.jarLibs")]
        public System.Collections.Generic.IList<object> JarLibs {get; set; }

        /// <summary>
        /// Gets or sets allows user to specify defines for the MapReduce job request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.defines")]
        public System.Collections.Generic.IDictionary<string, object> Defines {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.ClassName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ClassName");
            }
            if (this.JarFilePath == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "JarFilePath");
            }
            if (this.StorageLinkedServices != null)
            {
                foreach (var element in this.StorageLinkedServices)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }




            if (this.JarLinkedService != null)
            {
                this.JarLinkedService.Validate();
            }


        }
    }
}