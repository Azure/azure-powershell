// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Presto server linked service. This linked service has supported version
    /// property. The Version 1.0 is scheduled for deprecation while your pipeline
    /// will continue to run after EOL but without any bug fix or new features.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Presto")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class PrestoLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the PrestoLinkedService class.
        /// </summary>
        public PrestoLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PrestoLinkedService class.
        /// </summary>

        /// <param name="additionalProperties">The nested object which contains the information and credential which can
        /// be used to connect with related store or compute resource.
        /// </param>

        /// <param name="version">Version of the linked service.
        /// </param>

        /// <param name="connectVia">The integration runtime reference.
        /// </param>

        /// <param name="description">Linked service description.
        /// </param>

        /// <param name="parameters">Parameters for linked service.
        /// </param>

        /// <param name="annotations">List of tags that can be used for describing the linked service.
        /// </param>

        /// <param name="host">The IP address or host name of the Presto server. (i.e. 192.168.222.160)
        /// </param>

        /// <param name="serverVersion">The version of the Presto server. (i.e. 0.148-t) Only used for Version 1.0.
        /// </param>

        /// <param name="catalog">The catalog context for all request against the server.
        /// </param>

        /// <param name="port">The TCP port that the Presto server uses to listen for client connections.
        /// The default value is 8080 when disable SSL, default value is 443 when
        /// enable SSL.
        /// </param>

        /// <param name="authenticationType">The authentication mechanism used to connect to the Presto server.
        /// Possible values include: &#39;Anonymous&#39;, &#39;LDAP&#39;</param>

        /// <param name="username">The user name used to connect to the Presto server.
        /// </param>

        /// <param name="password">The password corresponding to the user name.
        /// </param>

        /// <param name="enableSsl">Specifies whether the connections to the server are encrypted using SSL.
        /// The default value for legacy version is False. The default value for
        /// version 2.0 is True.
        /// </param>

        /// <param name="enableServerCertificateValidation">Specifies whether the connections to the server will validate server
        /// certificate, the default value is True. Only used for Version 2.0
        /// </param>

        /// <param name="trustedCertPath">The full path of the .pem file containing trusted CA certificates for
        /// verifying the server when connecting over SSL. This property can only be
        /// set when using SSL on self-hosted IR. The default value is the cacerts.pem
        /// file installed with the IR. Only used for Version 1.0.
        /// </param>

        /// <param name="useSystemTrustStore">Specifies whether to use a CA certificate from the system trust store or
        /// from a specified PEM file. The default value is false. Only used for
        /// Version 1.0.
        /// </param>

        /// <param name="allowHostNameCnMismatch">Specifies whether to require a CA-issued SSL certificate name to match the
        /// host name of the server when connecting over SSL. The default value is
        /// false. Only used for Version 1.0.
        /// </param>

        /// <param name="allowSelfSignedServerCert">Specifies whether to allow self-signed certificates from the server. The
        /// default value is false. Only used for Version 1.0.
        /// </param>

        /// <param name="timeZoneId">The local time zone used by the connection. Valid values for this option
        /// are specified in the IANA Time Zone Database. The default value for Version
        /// 1.0 is the client system time zone. The default value for Version 2.0 is
        /// server system timeZone
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>
        public PrestoLinkedService(object host, object catalog, string authenticationType, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string version = default(string), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), System.Collections.Generic.IDictionary<string, ParameterSpecification> parameters = default(System.Collections.Generic.IDictionary<string, ParameterSpecification>), System.Collections.Generic.IList<object> annotations = default(System.Collections.Generic.IList<object>), object serverVersion = default(object), object port = default(object), object username = default(object), SecretBase password = default(SecretBase), object enableSsl = default(object), object enableServerCertificateValidation = default(object), object trustedCertPath = default(object), object useSystemTrustStore = default(object), object allowHostNameCnMismatch = default(object), object allowSelfSignedServerCert = default(object), object timeZoneId = default(object), string encryptedCredential = default(string))

        : base(additionalProperties, version, connectVia, description, parameters, annotations)
        {
            this.Host = host;
            this.ServerVersion = serverVersion;
            this.Catalog = catalog;
            this.Port = port;
            this.AuthenticationType = authenticationType;
            this.Username = username;
            this.Password = password;
            this.EnableSsl = enableSsl;
            this.EnableServerCertificateValidation = enableServerCertificateValidation;
            this.TrustedCertPath = trustedCertPath;
            this.UseSystemTrustStore = useSystemTrustStore;
            this.AllowHostNameCnMismatch = allowHostNameCnMismatch;
            this.AllowSelfSignedServerCert = allowSelfSignedServerCert;
            this.TimeZoneId = timeZoneId;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the IP address or host name of the Presto server. (i.e.
        /// 192.168.222.160)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.host")]
        public object Host {get; set; }

        /// <summary>
        /// Gets or sets the version of the Presto server. (i.e. 0.148-t) Only used for
        /// Version 1.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.serverVersion")]
        public object ServerVersion {get; set; }

        /// <summary>
        /// Gets or sets the catalog context for all request against the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.catalog")]
        public object Catalog {get; set; }

        /// <summary>
        /// Gets or sets the TCP port that the Presto server uses to listen for client
        /// connections. The default value is 8080 when disable SSL, default value is
        /// 443 when enable SSL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.port")]
        public object Port {get; set; }

        /// <summary>
        /// Gets or sets the authentication mechanism used to connect to the Presto
        /// server. Possible values include: &#39;Anonymous&#39;, &#39;LDAP&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.authenticationType")]
        public string AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets the user name used to connect to the Presto server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.username")]
        public object Username {get; set; }

        /// <summary>
        /// Gets or sets the password corresponding to the user name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.password")]
        public SecretBase Password {get; set; }

        /// <summary>
        /// Gets or sets specifies whether the connections to the server are encrypted
        /// using SSL. The default value for legacy version is False. The default value
        /// for version 2.0 is True.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.enableSsl")]
        public object EnableSsl {get; set; }

        /// <summary>
        /// Gets or sets specifies whether the connections to the server will validate
        /// server certificate, the default value is True. Only used for Version 2.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.enableServerCertificateValidation")]
        public object EnableServerCertificateValidation {get; set; }

        /// <summary>
        /// Gets or sets the full path of the .pem file containing trusted CA
        /// certificates for verifying the server when connecting over SSL. This
        /// property can only be set when using SSL on self-hosted IR. The default
        /// value is the cacerts.pem file installed with the IR. Only used for Version
        /// 1.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.trustedCertPath")]
        public object TrustedCertPath {get; set; }

        /// <summary>
        /// Gets or sets specifies whether to use a CA certificate from the system
        /// trust store or from a specified PEM file. The default value is false. Only
        /// used for Version 1.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.useSystemTrustStore")]
        public object UseSystemTrustStore {get; set; }

        /// <summary>
        /// Gets or sets specifies whether to require a CA-issued SSL certificate name
        /// to match the host name of the server when connecting over SSL. The default
        /// value is false. Only used for Version 1.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.allowHostNameCNMismatch")]
        public object AllowHostNameCnMismatch {get; set; }

        /// <summary>
        /// Gets or sets specifies whether to allow self-signed certificates from the
        /// server. The default value is false. Only used for Version 1.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.allowSelfSignedServerCert")]
        public object AllowSelfSignedServerCert {get; set; }

        /// <summary>
        /// Gets or sets the local time zone used by the connection. Valid values for
        /// this option are specified in the IANA Time Zone Database. The default value
        /// for Version 1.0 is the client system time zone. The default value for
        /// Version 2.0 is server system timeZone
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.timeZoneID")]
        public object TimeZoneId {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public string EncryptedCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Host == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Host");
            }
            if (this.Catalog == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Catalog");
            }
            if (this.AuthenticationType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AuthenticationType");
            }















        }
    }
}