// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Execute Synapse notebook activity.
    /// </summary>
    [Newtonsoft.Json.JsonObject("SynapseNotebook")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SynapseNotebookActivity : ExecutionActivity
    {
        /// <summary>
        /// Initializes a new instance of the SynapseNotebookActivity class.
        /// </summary>
        public SynapseNotebookActivity()
        {
            this.Notebook = new SynapseNotebookReference();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SynapseNotebookActivity class.
        /// </summary>

        /// <param name="additionalProperties">A pipeline activity.
        /// </param>

        /// <param name="name">Activity name.
        /// </param>

        /// <param name="description">Activity description.
        /// </param>

        /// <param name="state">Activity state. This is an optional property and if not provided, the state
        /// will be Active by default.
        /// Possible values include: &#39;Active&#39;, &#39;Inactive&#39;</param>

        /// <param name="onInactiveMarkAs">Status result of the activity when the state is set to Inactive. This is an
        /// optional property and if not provided when the activity is inactive, the
        /// status will be Succeeded by default.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Skipped&#39;</param>

        /// <param name="dependsOn">Activity depends on condition.
        /// </param>

        /// <param name="userProperties">Activity user properties.
        /// </param>

        /// <param name="linkedServiceName">Linked service reference.
        /// </param>

        /// <param name="policy">Activity policy.
        /// </param>

        /// <param name="configurationType">The type of the spark config.
        /// Possible values include: &#39;Default&#39;, &#39;Customized&#39;, &#39;Artifact&#39;</param>

        /// <param name="notebook">Synapse notebook reference.
        /// </param>

        /// <param name="sparkPool">The name of the big data pool which will be used to execute the notebook.
        /// </param>

        /// <param name="parameters">Notebook parameters.
        /// </param>

        /// <param name="executorSize">Number of core and memory to be used for executors allocated in the
        /// specified Spark pool for the session, which will be used for overriding
        /// &#39;executorCores&#39; and &#39;executorMemory&#39; of the notebook you provide. Type:
        /// string (or Expression with resultType string).
        /// </param>

        /// <param name="conf">Spark configuration properties, which will override the &#39;conf&#39; of the
        /// notebook you provide.
        /// </param>

        /// <param name="driverSize">Number of core and memory to be used for driver allocated in the specified
        /// Spark pool for the session, which will be used for overriding &#39;driverCores&#39;
        /// and &#39;driverMemory&#39; of the notebook you provide. Type: string (or Expression
        /// with resultType string).
        /// </param>

        /// <param name="numExecutors">Number of executors to launch for this session, which will override the
        /// &#39;numExecutors&#39; of the notebook you provide. Type: integer (or Expression
        /// with resultType integer).
        /// </param>

        /// <param name="targetSparkConfiguration">The spark configuration of the spark job.
        /// </param>

        /// <param name="sparkConfig">Spark configuration property.
        /// </param>
        public SynapseNotebookActivity(string name, SynapseNotebookReference notebook, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string description = default(string), string state = default(string), string onInactiveMarkAs = default(string), System.Collections.Generic.IList<ActivityDependency> dependsOn = default(System.Collections.Generic.IList<ActivityDependency>), System.Collections.Generic.IList<UserProperty> userProperties = default(System.Collections.Generic.IList<UserProperty>), LinkedServiceReference linkedServiceName = default(LinkedServiceReference), ActivityPolicy policy = default(ActivityPolicy), string configurationType = default(string), BigDataPoolParametrizationReference sparkPool = default(BigDataPoolParametrizationReference), System.Collections.Generic.IDictionary<string, NotebookParameter> parameters = default(System.Collections.Generic.IDictionary<string, NotebookParameter>), object executorSize = default(object), object conf = default(object), object driverSize = default(object), object numExecutors = default(object), SparkConfigurationParametrizationReference targetSparkConfiguration = default(SparkConfigurationParametrizationReference), System.Collections.Generic.IDictionary<string, object> sparkConfig = default(System.Collections.Generic.IDictionary<string, object>))

        : base(name, additionalProperties, description, state, onInactiveMarkAs, dependsOn, userProperties, linkedServiceName, policy)
        {
            this.ConfigurationType = configurationType;
            this.Notebook = notebook;
            this.SparkPool = sparkPool;
            this.Parameters = parameters;
            this.ExecutorSize = executorSize;
            this.Conf = conf;
            this.DriverSize = driverSize;
            this.NumExecutors = numExecutors;
            this.TargetSparkConfiguration = targetSparkConfiguration;
            this.SparkConfig = sparkConfig;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the type of the spark config. Possible values include: &#39;Default&#39;, &#39;Customized&#39;, &#39;Artifact&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.configurationType")]
        public string ConfigurationType {get; set; }

        /// <summary>
        /// Gets or sets synapse notebook reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.notebook")]
        public SynapseNotebookReference Notebook {get; set; }

        /// <summary>
        /// Gets or sets the name of the big data pool which will be used to execute
        /// the notebook.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.sparkPool")]
        public BigDataPoolParametrizationReference SparkPool {get; set; }

        /// <summary>
        /// Gets or sets notebook parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.parameters")]
        public System.Collections.Generic.IDictionary<string, NotebookParameter> Parameters {get; set; }

        /// <summary>
        /// Gets or sets number of core and memory to be used for executors allocated
        /// in the specified Spark pool for the session, which will be used for
        /// overriding &#39;executorCores&#39; and &#39;executorMemory&#39; of the notebook you
        /// provide. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.executorSize")]
        public object ExecutorSize {get; set; }

        /// <summary>
        /// Gets or sets spark configuration properties, which will override the &#39;conf&#39;
        /// of the notebook you provide.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.conf")]
        public object Conf {get; set; }

        /// <summary>
        /// Gets or sets number of core and memory to be used for driver allocated in
        /// the specified Spark pool for the session, which will be used for overriding
        /// &#39;driverCores&#39; and &#39;driverMemory&#39; of the notebook you provide. Type: string
        /// (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.driverSize")]
        public object DriverSize {get; set; }

        /// <summary>
        /// Gets or sets number of executors to launch for this session, which will
        /// override the &#39;numExecutors&#39; of the notebook you provide. Type: integer (or
        /// Expression with resultType integer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.numExecutors")]
        public object NumExecutors {get; set; }

        /// <summary>
        /// Gets or sets the spark configuration of the spark job.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.targetSparkConfiguration")]
        public SparkConfigurationParametrizationReference TargetSparkConfiguration {get; set; }

        /// <summary>
        /// Gets or sets spark configuration property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.sparkConfig")]
        public System.Collections.Generic.IDictionary<string, object> SparkConfig {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Notebook == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Notebook");
            }

            if (this.Notebook != null)
            {
                this.Notebook.Validate();
            }
            if (this.SparkPool != null)
            {
                this.SparkPool.Validate();
            }





            if (this.TargetSparkConfiguration != null)
            {
                this.TargetSparkConfiguration.Validate();
            }

        }
    }
}