// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Linked service for DB2 data source.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Db2")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Db2LinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the Db2LinkedService class.
        /// </summary>
        public Db2LinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Db2LinkedService class.
        /// </summary>

        /// <param name="additionalProperties">The nested object which contains the information and credential which can
        /// be used to connect with related store or compute resource.
        /// </param>

        /// <param name="connectVia">The integration runtime reference.
        /// </param>

        /// <param name="description">Linked service description.
        /// </param>

        /// <param name="parameters">Parameters for linked service.
        /// </param>

        /// <param name="annotations">List of tags that can be used for describing the linked service.
        /// </param>

        /// <param name="connectionString">The connection string. It is mutually exclusive with server, database,
        /// authenticationType, userName, packageCollection and certificateCommonName
        /// property. Type: string, SecureString or AzureKeyVaultSecretReference.
        /// </param>

        /// <param name="server">Server name for connection. It is mutually exclusive with connectionString
        /// property. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="database">Database name for connection. It is mutually exclusive with
        /// connectionString property. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="authenticationType">AuthenticationType to be used for connection. It is mutually exclusive with
        /// connectionString property.
        /// Possible values include: &#39;Basic&#39;</param>

        /// <param name="username">Username for authentication. It is mutually exclusive with connectionString
        /// property. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="password">Password for authentication.
        /// </param>

        /// <param name="packageCollection">Under where packages are created when querying database. It is mutually
        /// exclusive with connectionString property. Type: string (or Expression with
        /// resultType string).
        /// </param>

        /// <param name="certificateCommonName">Certificate Common Name when TLS is enabled. It is mutually exclusive with
        /// connectionString property. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. It is mutually exclusive
        /// with connectionString property. Type: string.
        /// </param>
        public Db2LinkedService(System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), System.Collections.Generic.IDictionary<string, ParameterSpecification> parameters = default(System.Collections.Generic.IDictionary<string, ParameterSpecification>), System.Collections.Generic.IList<object> annotations = default(System.Collections.Generic.IList<object>), object connectionString = default(object), object server = default(object), object database = default(object), string authenticationType = default(string), object username = default(object), SecretBase password = default(SecretBase), object packageCollection = default(object), object certificateCommonName = default(object), string encryptedCredential = default(string))

        : base(additionalProperties, connectVia, description, parameters, annotations)
        {
            this.ConnectionString = connectionString;
            this.Server = server;
            this.Database = database;
            this.AuthenticationType = authenticationType;
            this.Username = username;
            this.Password = password;
            this.PackageCollection = packageCollection;
            this.CertificateCommonName = certificateCommonName;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the connection string. It is mutually exclusive with server,
        /// database, authenticationType, userName, packageCollection and
        /// certificateCommonName property. Type: string, SecureString or
        /// AzureKeyVaultSecretReference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.connectionString")]
        public object ConnectionString {get; set; }

        /// <summary>
        /// Gets or sets server name for connection. It is mutually exclusive with
        /// connectionString property. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.server")]
        public object Server {get; set; }

        /// <summary>
        /// Gets or sets database name for connection. It is mutually exclusive with
        /// connectionString property. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.database")]
        public object Database {get; set; }

        /// <summary>
        /// Gets or sets authenticationType to be used for connection. It is mutually
        /// exclusive with connectionString property. Possible values include: &#39;Basic&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.authenticationType")]
        public string AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets username for authentication. It is mutually exclusive with
        /// connectionString property. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.username")]
        public object Username {get; set; }

        /// <summary>
        /// Gets or sets password for authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.password")]
        public SecretBase Password {get; set; }

        /// <summary>
        /// Gets or sets under where packages are created when querying database. It is
        /// mutually exclusive with connectionString property. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.packageCollection")]
        public object PackageCollection {get; set; }

        /// <summary>
        /// Gets or sets certificate Common Name when TLS is enabled. It is mutually
        /// exclusive with connectionString property. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.certificateCommonName")]
        public object CertificateCommonName {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. It is
        /// mutually exclusive with connectionString property. Type: string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public string EncryptedCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();









        }
    }
}