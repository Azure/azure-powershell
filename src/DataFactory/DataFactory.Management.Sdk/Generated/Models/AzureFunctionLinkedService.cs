// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Azure Function linked service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AzureFunction")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class AzureFunctionLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the AzureFunctionLinkedService class.
        /// </summary>
        public AzureFunctionLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureFunctionLinkedService class.
        /// </summary>

        /// <param name="additionalProperties">The nested object which contains the information and credential which can
        /// be used to connect with related store or compute resource.
        /// </param>

        /// <param name="connectVia">The integration runtime reference.
        /// </param>

        /// <param name="description">Linked service description.
        /// </param>

        /// <param name="parameters">Parameters for linked service.
        /// </param>

        /// <param name="annotations">List of tags that can be used for describing the linked service.
        /// </param>

        /// <param name="functionAppUrl">The endpoint of the Azure Function App. URL will be in the format
        /// https://&lt;accountName&gt;.azurewebsites.net. Type: string (or Expression with
        /// resultType string).
        /// </param>

        /// <param name="functionKey">Function or Host key for Azure Function App.
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>

        /// <param name="credential">The credential reference containing authentication information.
        /// </param>

        /// <param name="resourceId">Allowed token audiences for azure function. Type: string (or Expression
        /// with resultType string).
        /// </param>

        /// <param name="authentication">Type of authentication (Required to specify MSI) used to connect to
        /// AzureFunction. Type: string (or Expression with resultType string).
        /// </param>
        public AzureFunctionLinkedService(object functionAppUrl, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), System.Collections.Generic.IDictionary<string, ParameterSpecification> parameters = default(System.Collections.Generic.IDictionary<string, ParameterSpecification>), System.Collections.Generic.IList<object> annotations = default(System.Collections.Generic.IList<object>), SecretBase functionKey = default(SecretBase), string encryptedCredential = default(string), CredentialReference credential = default(CredentialReference), object resourceId = default(object), object authentication = default(object))

        : base(additionalProperties, connectVia, description, parameters, annotations)
        {
            this.FunctionAppUrl = functionAppUrl;
            this.FunctionKey = functionKey;
            this.EncryptedCredential = encryptedCredential;
            this.Credential = credential;
            this.ResourceId = resourceId;
            this.Authentication = authentication;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the endpoint of the Azure Function App. URL will be in the
        /// format https://&lt;accountName&gt;.azurewebsites.net. Type: string (or Expression
        /// with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.functionAppUrl")]
        public object FunctionAppUrl {get; set; }

        /// <summary>
        /// Gets or sets function or Host key for Azure Function App.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.functionKey")]
        public SecretBase FunctionKey {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public string EncryptedCredential {get; set; }

        /// <summary>
        /// Gets or sets the credential reference containing authentication
        /// information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.credential")]
        public CredentialReference Credential {get; set; }

        /// <summary>
        /// Gets or sets allowed token audiences for azure function. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.resourceId")]
        public object ResourceId {get; set; }

        /// <summary>
        /// Gets or sets type of authentication (Required to specify MSI) used to
        /// connect to AzureFunction. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.authentication")]
        public object Authentication {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.FunctionAppUrl == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "FunctionAppUrl");
            }



            if (this.Credential != null)
            {
                this.Credential.Validate();
            }


        }
    }
}