// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Azure ML Update Resource activity properties.
    /// </summary>
    public partial class AzureMLUpdateResourceActivityTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the AzureMLUpdateResourceActivityTypeProperties class.
        /// </summary>
        public AzureMLUpdateResourceActivityTypeProperties()
        {
            this.TrainedModelLinkedServiceName = new LinkedServiceReference();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureMLUpdateResourceActivityTypeProperties class.
        /// </summary>

        /// <param name="trainedModelName">Name of the Trained Model module in the Web Service experiment to be
        /// updated. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="trainedModelLinkedServiceName">Name of Azure Storage linked service holding the .ilearner file that will
        /// be uploaded by the update operation.
        /// </param>

        /// <param name="trainedModelFilePath">The relative file path in trainedModelLinkedService to represent the
        /// .ilearner file that will be uploaded by the update operation.  Type: string
        /// (or Expression with resultType string).
        /// </param>
        public AzureMLUpdateResourceActivityTypeProperties(object trainedModelName, LinkedServiceReference trainedModelLinkedServiceName, object trainedModelFilePath)

        {
            this.TrainedModelName = trainedModelName;
            this.TrainedModelLinkedServiceName = trainedModelLinkedServiceName;
            this.TrainedModelFilePath = trainedModelFilePath;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of the Trained Model module in the Web Service experiment
        /// to be updated. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "trainedModelName")]
        public object TrainedModelName {get; set; }

        /// <summary>
        /// Gets or sets name of Azure Storage linked service holding the .ilearner
        /// file that will be uploaded by the update operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "trainedModelLinkedServiceName")]
        public LinkedServiceReference TrainedModelLinkedServiceName {get; set; }

        /// <summary>
        /// Gets or sets the relative file path in trainedModelLinkedService to
        /// represent the .ilearner file that will be uploaded by the update operation.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "trainedModelFilePath")]
        public object TrainedModelFilePath {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.TrainedModelName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TrainedModelName");
            }
            if (this.TrainedModelLinkedServiceName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TrainedModelLinkedServiceName");
            }
            if (this.TrainedModelFilePath == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TrainedModelFilePath");
            }

            if (this.TrainedModelLinkedServiceName != null)
            {
                this.TrainedModelLinkedServiceName.Validate();
            }

        }
    }
}