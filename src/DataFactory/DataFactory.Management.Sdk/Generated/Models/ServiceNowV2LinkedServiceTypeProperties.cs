// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// ServiceNowV2 server linked service properties.
    /// </summary>
    public partial class ServiceNowV2LinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the ServiceNowV2LinkedServiceTypeProperties class.
        /// </summary>
        public ServiceNowV2LinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceNowV2LinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="endpoint">The endpoint of the ServiceNowV2 server. (i.e. &lt;instance&gt;.service-now.com)
        /// </param>

        /// <param name="authenticationType">The authentication type to use.
        /// Possible values include: &#39;Basic&#39;, &#39;OAuth2&#39;</param>

        /// <param name="username">The user name used to connect to the ServiceNowV2 server for Basic and
        /// OAuth2 authentication.
        /// </param>

        /// <param name="password">The password corresponding to the user name for Basic and OAuth2
        /// authentication.
        /// </param>

        /// <param name="clientId">The client id for OAuth2 authentication.
        /// </param>

        /// <param name="clientSecret">The client secret for OAuth2 authentication.
        /// </param>

        /// <param name="grantType">GrantType for OAuth2 authentication. Default value is password.
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>
        public ServiceNowV2LinkedServiceTypeProperties(object endpoint, string authenticationType, object username = default(object), SecretBase password = default(SecretBase), object clientId = default(object), SecretBase clientSecret = default(SecretBase), object grantType = default(object), string encryptedCredential = default(string))

        {
            this.Endpoint = endpoint;
            this.AuthenticationType = authenticationType;
            this.Username = username;
            this.Password = password;
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            this.GrantType = grantType;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the endpoint of the ServiceNowV2 server. (i.e.
        /// &lt;instance&gt;.service-now.com)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endpoint")]
        public object Endpoint {get; set; }

        /// <summary>
        /// Gets or sets the authentication type to use. Possible values include: &#39;Basic&#39;, &#39;OAuth2&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authenticationType")]
        public string AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets the user name used to connect to the ServiceNowV2 server for
        /// Basic and OAuth2 authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "username")]
        public object Username {get; set; }

        /// <summary>
        /// Gets or sets the password corresponding to the user name for Basic and
        /// OAuth2 authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public SecretBase Password {get; set; }

        /// <summary>
        /// Gets or sets the client id for OAuth2 authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientId")]
        public object ClientId {get; set; }

        /// <summary>
        /// Gets or sets the client secret for OAuth2 authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientSecret")]
        public SecretBase ClientSecret {get; set; }

        /// <summary>
        /// Gets or sets grantType for OAuth2 authentication. Default value is
        /// password.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "grantType")]
        public object GrantType {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Endpoint == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Endpoint");
            }
            if (this.AuthenticationType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AuthenticationType");
            }








        }
    }
}