// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// A pipeline activity.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Activity")]
    public partial class Activity
    {
        /// <summary>
        /// Initializes a new instance of the Activity class.
        /// </summary>
        public Activity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Activity class.
        /// </summary>

        /// <param name="additionalProperties">A pipeline activity.
        /// </param>

        /// <param name="name">Activity name.
        /// </param>

        /// <param name="description">Activity description.
        /// </param>

        /// <param name="state">Activity state. This is an optional property and if not provided, the state
        /// will be Active by default.
        /// Possible values include: &#39;Active&#39;, &#39;Inactive&#39;</param>

        /// <param name="onInactiveMarkAs">Status result of the activity when the state is set to Inactive. This is an
        /// optional property and if not provided when the activity is inactive, the
        /// status will be Succeeded by default.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Skipped&#39;</param>

        /// <param name="dependsOn">Activity depends on condition.
        /// </param>

        /// <param name="userProperties">Activity user properties.
        /// </param>
        public Activity(string name, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string description = default(string), string state = default(string), string onInactiveMarkAs = default(string), System.Collections.Generic.IList<ActivityDependency> dependsOn = default(System.Collections.Generic.IList<ActivityDependency>), System.Collections.Generic.IList<UserProperty> userProperties = default(System.Collections.Generic.IList<UserProperty>))

        {
            this.AdditionalProperties = additionalProperties;
            this.Name = name;
            this.Description = description;
            this.State = state;
            this.OnInactiveMarkAs = onInactiveMarkAs;
            this.DependsOn = dependsOn;
            this.UserProperties = userProperties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a pipeline activity.
        /// </summary>
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {get; set; }

        /// <summary>
        /// Gets or sets activity name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets activity description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets activity state. This is an optional property and if not
        /// provided, the state will be Active by default. Possible values include: &#39;Active&#39;, &#39;Inactive&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; set; }

        /// <summary>
        /// Gets or sets status result of the activity when the state is set to
        /// Inactive. This is an optional property and if not provided when the
        /// activity is inactive, the status will be Succeeded by default. Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Skipped&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "onInactiveMarkAs")]
        public string OnInactiveMarkAs {get; set; }

        /// <summary>
        /// Gets or sets activity depends on condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dependsOn")]
        public System.Collections.Generic.IList<ActivityDependency> DependsOn {get; set; }

        /// <summary>
        /// Gets or sets activity user properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userProperties")]
        public System.Collections.Generic.IList<UserProperty> UserProperties {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }





            if (this.DependsOn != null)
            {
                foreach (var element in this.DependsOn)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.UserProperties != null)
            {
                foreach (var element in this.UserProperties)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}