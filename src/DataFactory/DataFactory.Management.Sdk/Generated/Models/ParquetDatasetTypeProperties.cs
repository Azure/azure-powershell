// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Parquet dataset properties.
    /// </summary>
    public partial class ParquetDatasetTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the ParquetDatasetTypeProperties class.
        /// </summary>
        public ParquetDatasetTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ParquetDatasetTypeProperties class.
        /// </summary>

        /// <param name="location">The location of the parquet storage.
        /// </param>

        /// <param name="compressionCodec">The data compressionCodec. Type: string (or Expression with resultType
        /// string).
        /// </param>
        public ParquetDatasetTypeProperties(DatasetLocation location, object compressionCodec = default(object))

        {
            this.Location = location;
            this.CompressionCodec = compressionCodec;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the location of the parquet storage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public DatasetLocation Location {get; set; }

        /// <summary>
        /// Gets or sets the data compressionCodec. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "compressionCodec")]
        public object CompressionCodec {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Location == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Location");
            }


        }
    }
}