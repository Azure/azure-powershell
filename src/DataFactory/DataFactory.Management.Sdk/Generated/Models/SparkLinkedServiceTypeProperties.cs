// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Spark Server linked service properties.
    /// </summary>
    public partial class SparkLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the SparkLinkedServiceTypeProperties class.
        /// </summary>
        public SparkLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SparkLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="host">IP address or host name of the Spark server
        /// </param>

        /// <param name="port">The TCP port that the Spark server uses to listen for client connections.
        /// </param>

        /// <param name="serverType">The type of Spark server.
        /// Possible values include: &#39;SharkServer&#39;, &#39;SharkServer2&#39;, &#39;SparkThriftServer&#39;</param>

        /// <param name="thriftTransportProtocol">The transport protocol to use in the Thrift layer.
        /// Possible values include: &#39;Binary&#39;, &#39;SASL&#39;, &#39;HTTP &#39;</param>

        /// <param name="authenticationType">The authentication method used to access the Spark server.
        /// Possible values include: &#39;Anonymous&#39;, &#39;Username&#39;, &#39;UsernameAndPassword&#39;,
        /// &#39;WindowsAzureHDInsightService&#39;</param>

        /// <param name="username">The user name that you use to access Spark Server.
        /// </param>

        /// <param name="password">The password corresponding to the user name that you provided in the
        /// Username field
        /// </param>

        /// <param name="httpPath">The partial URL corresponding to the Spark server.
        /// </param>

        /// <param name="enableSsl">Specifies whether the connections to the server are encrypted using SSL.
        /// The default value is false.
        /// </param>

        /// <param name="trustedCertPath">The full path of the .pem file containing trusted CA certificates for
        /// verifying the server when connecting over SSL. This property can only be
        /// set when using SSL on self-hosted IR. The default value is the cacerts.pem
        /// file installed with the IR.
        /// </param>

        /// <param name="useSystemTrustStore">Specifies whether to use a CA certificate from the system trust store or
        /// from a specified PEM file. The default value is false.
        /// </param>

        /// <param name="allowHostNameCnMismatch">Specifies whether to require a CA-issued SSL certificate name to match the
        /// host name of the server when connecting over SSL. The default value is
        /// false.
        /// </param>

        /// <param name="allowSelfSignedServerCert">Specifies whether to allow self-signed certificates from the server. The
        /// default value is false.
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>
        public SparkLinkedServiceTypeProperties(object host, object port, string authenticationType, string serverType = default(string), string thriftTransportProtocol = default(string), object username = default(object), SecretBase password = default(SecretBase), object httpPath = default(object), object enableSsl = default(object), object trustedCertPath = default(object), object useSystemTrustStore = default(object), object allowHostNameCnMismatch = default(object), object allowSelfSignedServerCert = default(object), string encryptedCredential = default(string))

        {
            this.Host = host;
            this.Port = port;
            this.ServerType = serverType;
            this.ThriftTransportProtocol = thriftTransportProtocol;
            this.AuthenticationType = authenticationType;
            this.Username = username;
            this.Password = password;
            this.HttpPath = httpPath;
            this.EnableSsl = enableSsl;
            this.TrustedCertPath = trustedCertPath;
            this.UseSystemTrustStore = useSystemTrustStore;
            this.AllowHostNameCnMismatch = allowHostNameCnMismatch;
            this.AllowSelfSignedServerCert = allowSelfSignedServerCert;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets iP address or host name of the Spark server
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "host")]
        public object Host {get; set; }

        /// <summary>
        /// Gets or sets the TCP port that the Spark server uses to listen for client
        /// connections.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "port")]
        public object Port {get; set; }

        /// <summary>
        /// Gets or sets the type of Spark server. Possible values include: &#39;SharkServer&#39;, &#39;SharkServer2&#39;, &#39;SparkThriftServer&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverType")]
        public string ServerType {get; set; }

        /// <summary>
        /// Gets or sets the transport protocol to use in the Thrift layer. Possible values include: &#39;Binary&#39;, &#39;SASL&#39;, &#39;HTTP &#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "thriftTransportProtocol")]
        public string ThriftTransportProtocol {get; set; }

        /// <summary>
        /// Gets or sets the authentication method used to access the Spark server. Possible values include: &#39;Anonymous&#39;, &#39;Username&#39;, &#39;UsernameAndPassword&#39;, &#39;WindowsAzureHDInsightService&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authenticationType")]
        public string AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets the user name that you use to access Spark Server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "username")]
        public object Username {get; set; }

        /// <summary>
        /// Gets or sets the password corresponding to the user name that you provided
        /// in the Username field
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public SecretBase Password {get; set; }

        /// <summary>
        /// Gets or sets the partial URL corresponding to the Spark server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "httpPath")]
        public object HttpPath {get; set; }

        /// <summary>
        /// Gets or sets specifies whether the connections to the server are encrypted
        /// using SSL. The default value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableSsl")]
        public object EnableSsl {get; set; }

        /// <summary>
        /// Gets or sets the full path of the .pem file containing trusted CA
        /// certificates for verifying the server when connecting over SSL. This
        /// property can only be set when using SSL on self-hosted IR. The default
        /// value is the cacerts.pem file installed with the IR.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "trustedCertPath")]
        public object TrustedCertPath {get; set; }

        /// <summary>
        /// Gets or sets specifies whether to use a CA certificate from the system
        /// trust store or from a specified PEM file. The default value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "useSystemTrustStore")]
        public object UseSystemTrustStore {get; set; }

        /// <summary>
        /// Gets or sets specifies whether to require a CA-issued SSL certificate name
        /// to match the host name of the server when connecting over SSL. The default
        /// value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowHostNameCNMismatch")]
        public object AllowHostNameCnMismatch {get; set; }

        /// <summary>
        /// Gets or sets specifies whether to allow self-signed certificates from the
        /// server. The default value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowSelfSignedServerCert")]
        public object AllowSelfSignedServerCert {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Host == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Host");
            }
            if (this.Port == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Port");
            }
            if (this.AuthenticationType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AuthenticationType");
            }














        }
    }
}