// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Query parameters for listing runs.
    /// </summary>
    public partial class RunFilterParameters
    {
        /// <summary>
        /// Initializes a new instance of the RunFilterParameters class.
        /// </summary>
        public RunFilterParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RunFilterParameters class.
        /// </summary>

        /// <param name="continuationToken">The continuation token for getting the next page of results. Null for first
        /// page.
        /// </param>

        /// <param name="lastUpdatedAfter">The time at or after which the run event was updated in &#39;ISO 8601&#39; format.
        /// </param>

        /// <param name="lastUpdatedBefore">The time at or before which the run event was updated in &#39;ISO 8601&#39; format.
        /// </param>

        /// <param name="filters">List of filters.
        /// </param>

        /// <param name="orderBy">List of OrderBy option.
        /// </param>
        public RunFilterParameters(System.DateTime lastUpdatedAfter, System.DateTime lastUpdatedBefore, string continuationToken = default(string), System.Collections.Generic.IList<RunQueryFilter> filters = default(System.Collections.Generic.IList<RunQueryFilter>), System.Collections.Generic.IList<RunQueryOrderBy> orderBy = default(System.Collections.Generic.IList<RunQueryOrderBy>))

        {
            this.ContinuationToken = continuationToken;
            this.LastUpdatedAfter = lastUpdatedAfter;
            this.LastUpdatedBefore = lastUpdatedBefore;
            this.Filters = filters;
            this.OrderBy = orderBy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the continuation token for getting the next page of results.
        /// Null for first page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "continuationToken")]
        public string ContinuationToken {get; set; }

        /// <summary>
        /// Gets or sets the time at or after which the run event was updated in &#39;ISO
        /// 8601&#39; format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastUpdatedAfter")]
        public System.DateTime LastUpdatedAfter {get; set; }

        /// <summary>
        /// Gets or sets the time at or before which the run event was updated in &#39;ISO
        /// 8601&#39; format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastUpdatedBefore")]
        public System.DateTime LastUpdatedBefore {get; set; }

        /// <summary>
        /// Gets or sets list of filters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "filters")]
        public System.Collections.Generic.IList<RunQueryFilter> Filters {get; set; }

        /// <summary>
        /// Gets or sets list of OrderBy option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "orderBy")]
        public System.Collections.Generic.IList<RunQueryOrderBy> OrderBy {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.Filters != null)
            {
                foreach (var element in this.Filters)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.OrderBy != null)
            {
                foreach (var element in this.OrderBy)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}