// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Azure Databricks Delta Lake linked service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AzureDatabricksDeltaLake")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class AzureDatabricksDeltaLakeLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the AzureDatabricksDeltaLakeLinkedService class.
        /// </summary>
        public AzureDatabricksDeltaLakeLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureDatabricksDeltaLakeLinkedService class.
        /// </summary>

        /// <param name="additionalProperties">The nested object which contains the information and credential which can
        /// be used to connect with related store or compute resource.
        /// </param>

        /// <param name="connectVia">The integration runtime reference.
        /// </param>

        /// <param name="description">Linked service description.
        /// </param>

        /// <param name="parameters">Parameters for linked service.
        /// </param>

        /// <param name="annotations">List of tags that can be used for describing the linked service.
        /// </param>

        /// <param name="domain">&lt;REGION&gt;.azuredatabricks.net, domain name of your Databricks deployment.
        /// Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="accessToken">Access token for databricks REST API. Refer to
        /// https://docs.azuredatabricks.net/api/latest/authentication.html. Type:
        /// string, SecureString or AzureKeyVaultSecretReference.
        /// </param>

        /// <param name="clusterId">The id of an existing interactive cluster that will be used for all runs of
        /// this job. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>

        /// <param name="credential">The credential reference containing authentication information.
        /// </param>

        /// <param name="workspaceResourceId">Workspace resource id for databricks REST API. Type: string (or Expression
        /// with resultType string).
        /// </param>
        public AzureDatabricksDeltaLakeLinkedService(object domain, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), System.Collections.Generic.IDictionary<string, ParameterSpecification> parameters = default(System.Collections.Generic.IDictionary<string, ParameterSpecification>), System.Collections.Generic.IList<object> annotations = default(System.Collections.Generic.IList<object>), SecretBase accessToken = default(SecretBase), object clusterId = default(object), string encryptedCredential = default(string), CredentialReference credential = default(CredentialReference), object workspaceResourceId = default(object))

        : base(additionalProperties, connectVia, description, parameters, annotations)
        {
            this.Domain = domain;
            this.AccessToken = accessToken;
            this.ClusterId = clusterId;
            this.EncryptedCredential = encryptedCredential;
            this.Credential = credential;
            this.WorkspaceResourceId = workspaceResourceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets &lt;REGION&gt;.azuredatabricks.net, domain name of your Databricks
        /// deployment. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.domain")]
        public object Domain {get; set; }

        /// <summary>
        /// Gets or sets access token for databricks REST API. Refer to
        /// https://docs.azuredatabricks.net/api/latest/authentication.html. Type:
        /// string, SecureString or AzureKeyVaultSecretReference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.accessToken")]
        public SecretBase AccessToken {get; set; }

        /// <summary>
        /// Gets or sets the id of an existing interactive cluster that will be used
        /// for all runs of this job. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.clusterId")]
        public object ClusterId {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public string EncryptedCredential {get; set; }

        /// <summary>
        /// Gets or sets the credential reference containing authentication
        /// information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.credential")]
        public CredentialReference Credential {get; set; }

        /// <summary>
        /// Gets or sets workspace resource id for databricks REST API. Type: string
        /// (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.workspaceResourceId")]
        public object WorkspaceResourceId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Domain == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Domain");
            }




            if (this.Credential != null)
            {
                this.Credential.Validate();
            }

        }
    }
}