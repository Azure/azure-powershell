// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// A Azure Data Factory object which automatically detects data changes at the
    /// source and then sends the updated data to the destination.
    /// </summary>
    public partial class ChangeDataCapture
    {
        /// <summary>
        /// Initializes a new instance of the ChangeDataCapture class.
        /// </summary>
        public ChangeDataCapture()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ChangeDataCapture class.
        /// </summary>

        /// <param name="folder">The folder that this CDC is in. If not specified, CDC will appear at the
        /// root level.
        /// </param>

        /// <param name="description">The description of the change data capture.
        /// </param>

        /// <param name="sourceConnectionsInfo">List of sources connections that can be used as sources in the CDC.
        /// </param>

        /// <param name="targetConnectionsInfo">List of target connections that can be used as sources in the CDC.
        /// </param>

        /// <param name="policy">CDC policy
        /// </param>

        /// <param name="allowVNetOverride">A boolean to determine if the vnet configuration needs to be overwritten.
        /// </param>

        /// <param name="status">Status of the CDC as to if it is running or stopped.
        /// </param>
        public ChangeDataCapture(System.Collections.Generic.IList<MapperSourceConnectionsInfo> sourceConnectionsInfo, System.Collections.Generic.IList<MapperTargetConnectionsInfo> targetConnectionsInfo, MapperPolicy policy, ChangeDataCaptureFolder folder = default(ChangeDataCaptureFolder), string description = default(string), bool? allowVNetOverride = default(bool?), string status = default(string))

        {
            this.Folder = folder;
            this.Description = description;
            this.SourceConnectionsInfo = sourceConnectionsInfo;
            this.TargetConnectionsInfo = targetConnectionsInfo;
            this.Policy = policy;
            this.AllowVNetOverride = allowVNetOverride;
            this.Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the folder that this CDC is in. If not specified, CDC will
        /// appear at the root level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "folder")]
        public ChangeDataCaptureFolder Folder {get; set; }

        /// <summary>
        /// Gets or sets the description of the change data capture.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets list of sources connections that can be used as sources in the
        /// CDC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceConnectionsInfo")]
        public System.Collections.Generic.IList<MapperSourceConnectionsInfo> SourceConnectionsInfo {get; set; }

        /// <summary>
        /// Gets or sets list of target connections that can be used as sources in the
        /// CDC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetConnectionsInfo")]
        public System.Collections.Generic.IList<MapperTargetConnectionsInfo> TargetConnectionsInfo {get; set; }

        /// <summary>
        /// Gets or sets cDC policy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policy")]
        public MapperPolicy Policy {get; set; }

        /// <summary>
        /// Gets or sets a boolean to determine if the vnet configuration needs to be
        /// overwritten.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowVNetOverride")]
        public bool? AllowVNetOverride {get; set; }

        /// <summary>
        /// Gets or sets status of the CDC as to if it is running or stopped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.SourceConnectionsInfo == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SourceConnectionsInfo");
            }
            if (this.TargetConnectionsInfo == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TargetConnectionsInfo");
            }
            if (this.Policy == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Policy");
            }


            if (this.SourceConnectionsInfo != null)
            {
                foreach (var element in this.SourceConnectionsInfo)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.TargetConnectionsInfo != null)
            {
                foreach (var element in this.TargetConnectionsInfo)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }


        }
    }
}