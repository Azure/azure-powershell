// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Azure File Storage linked service properties.
    /// </summary>
    public partial class AzureFileStorageLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the AzureFileStorageLinkedServiceTypeProperties class.
        /// </summary>
        public AzureFileStorageLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureFileStorageLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="host">Host name of the server. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="userId">User ID to logon the server. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="password">Password to logon the server.
        /// </param>

        /// <param name="connectionString">The connection string. It is mutually exclusive with sasUri property. Type:
        /// string, SecureString or AzureKeyVaultSecretReference.
        /// </param>

        /// <param name="accountKey">The Azure key vault secret reference of accountKey in connection string.
        /// </param>

        /// <param name="sasUri">SAS URI of the Azure File resource. It is mutually exclusive with
        /// connectionString property. Type: string, SecureString or
        /// AzureKeyVaultSecretReference.
        /// </param>

        /// <param name="sasToken">The Azure key vault secret reference of sasToken in sas uri.
        /// </param>

        /// <param name="fileShare">The azure file share name. It is required when auth with
        /// accountKey/sasToken. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="snapshot">The azure file share snapshot version. Type: string (or Expression with
        /// resultType string).
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>

        /// <param name="serviceEndpoint">File service endpoint of the Azure File Storage resource. It is mutually
        /// exclusive with connectionString, sasUri property.
        /// </param>

        /// <param name="credential">The credential reference containing authentication information.
        /// </param>
        public AzureFileStorageLinkedServiceTypeProperties(object host = default(object), object userId = default(object), SecretBase password = default(SecretBase), object connectionString = default(object), AzureKeyVaultSecretReference accountKey = default(AzureKeyVaultSecretReference), object sasUri = default(object), AzureKeyVaultSecretReference sasToken = default(AzureKeyVaultSecretReference), object fileShare = default(object), object snapshot = default(object), string encryptedCredential = default(string), object serviceEndpoint = default(object), CredentialReference credential = default(CredentialReference))

        {
            this.Host = host;
            this.UserId = userId;
            this.Password = password;
            this.ConnectionString = connectionString;
            this.AccountKey = accountKey;
            this.SasUri = sasUri;
            this.SasToken = sasToken;
            this.FileShare = fileShare;
            this.Snapshot = snapshot;
            this.EncryptedCredential = encryptedCredential;
            this.ServiceEndpoint = serviceEndpoint;
            this.Credential = credential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets host name of the server. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "host")]
        public object Host {get; set; }

        /// <summary>
        /// Gets or sets user ID to logon the server. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userId")]
        public object UserId {get; set; }

        /// <summary>
        /// Gets or sets password to logon the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public SecretBase Password {get; set; }

        /// <summary>
        /// Gets or sets the connection string. It is mutually exclusive with sasUri
        /// property. Type: string, SecureString or AzureKeyVaultSecretReference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionString")]
        public object ConnectionString {get; set; }

        /// <summary>
        /// Gets or sets the Azure key vault secret reference of accountKey in
        /// connection string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accountKey")]
        public AzureKeyVaultSecretReference AccountKey {get; set; }

        /// <summary>
        /// Gets or sets sAS URI of the Azure File resource. It is mutually exclusive
        /// with connectionString property. Type: string, SecureString or
        /// AzureKeyVaultSecretReference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sasUri")]
        public object SasUri {get; set; }

        /// <summary>
        /// Gets or sets the Azure key vault secret reference of sasToken in sas uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sasToken")]
        public AzureKeyVaultSecretReference SasToken {get; set; }

        /// <summary>
        /// Gets or sets the azure file share name. It is required when auth with
        /// accountKey/sasToken. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileShare")]
        public object FileShare {get; set; }

        /// <summary>
        /// Gets or sets the azure file share snapshot version. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "snapshot")]
        public object Snapshot {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }

        /// <summary>
        /// Gets or sets file service endpoint of the Azure File Storage resource. It
        /// is mutually exclusive with connectionString, sasUri property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceEndpoint")]
        public object ServiceEndpoint {get; set; }

        /// <summary>
        /// Gets or sets the credential reference containing authentication
        /// information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "credential")]
        public CredentialReference Credential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {




            if (this.AccountKey != null)
            {
                this.AccountKey.Validate();
            }

            if (this.SasToken != null)
            {
                this.SasToken.Validate();
            }




            if (this.Credential != null)
            {
                this.Credential.Validate();
            }
        }
    }
}