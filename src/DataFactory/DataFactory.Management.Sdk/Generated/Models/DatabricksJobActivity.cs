// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Databricks Job activity.
    /// </summary>
    [Newtonsoft.Json.JsonObject("DatabricksJob")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class DatabricksJobActivity : ExecutionActivity
    {
        /// <summary>
        /// Initializes a new instance of the DatabricksJobActivity class.
        /// </summary>
        public DatabricksJobActivity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatabricksJobActivity class.
        /// </summary>

        /// <param name="additionalProperties">A pipeline activity.
        /// </param>

        /// <param name="name">Activity name.
        /// </param>

        /// <param name="description">Activity description.
        /// </param>

        /// <param name="state">Activity state. This is an optional property and if not provided, the state
        /// will be Active by default.
        /// Possible values include: &#39;Active&#39;, &#39;Inactive&#39;</param>

        /// <param name="onInactiveMarkAs">Status result of the activity when the state is set to Inactive. This is an
        /// optional property and if not provided when the activity is inactive, the
        /// status will be Succeeded by default.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Skipped&#39;</param>

        /// <param name="dependsOn">Activity depends on condition.
        /// </param>

        /// <param name="userProperties">Activity user properties.
        /// </param>

        /// <param name="linkedServiceName">Linked service reference.
        /// </param>

        /// <param name="policy">Activity policy.
        /// </param>

        /// <param name="jobId">The Id of the Databricks Job to be executed. Type: string (or Expression
        /// with resultType string).
        /// </param>

        /// <param name="jobParameters">Job parameters to be used for each run of this job. If the job takes a
        /// parameter that is not specified, the default value from the job will be
        /// used.
        /// </param>
        public DatabricksJobActivity(string name, object jobId, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string description = default(string), string state = default(string), string onInactiveMarkAs = default(string), System.Collections.Generic.IList<ActivityDependency> dependsOn = default(System.Collections.Generic.IList<ActivityDependency>), System.Collections.Generic.IList<UserProperty> userProperties = default(System.Collections.Generic.IList<UserProperty>), LinkedServiceReference linkedServiceName = default(LinkedServiceReference), ActivityPolicy policy = default(ActivityPolicy), System.Collections.Generic.IDictionary<string, object> jobParameters = default(System.Collections.Generic.IDictionary<string, object>))

        : base(name, additionalProperties, description, state, onInactiveMarkAs, dependsOn, userProperties, linkedServiceName, policy)
        {
            this.JobId = jobId;
            this.JobParameters = jobParameters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the Id of the Databricks Job to be executed. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.jobId")]
        public object JobId {get; set; }

        /// <summary>
        /// Gets or sets job parameters to be used for each run of this job. If the job
        /// takes a parameter that is not specified, the default value from the job
        /// will be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.jobParameters")]
        public System.Collections.Generic.IDictionary<string, object> JobParameters {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.JobId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "JobId");
            }


        }
    }
}