// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Oracle database linked service properties.
    /// </summary>
    public partial class OracleLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the OracleLinkedServiceTypeProperties class.
        /// </summary>
        public OracleLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OracleLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="connectionString">The connection string. Type: string, SecureString or
        /// AzureKeyVaultSecretReference. Only used for Version 1.0.
        /// </param>

        /// <param name="server">The location of Oracle database you want to connect to, the supported forms
        /// include connector descriptor, Easy Connect (Plus) Naming and Oracle Net
        /// Services Name (Only self-hosted IR). Type: string. Only used for Version
        /// 2.0.
        /// </param>

        /// <param name="authenticationType">Authentication type for connecting to the Oracle database. Only used for
        /// Version 2.0.
        /// Possible values include: &#39;Basic&#39;</param>

        /// <param name="username">The Oracle database username. Type: string. Only used for Version 2.0.
        /// </param>

        /// <param name="password">The Azure key vault secret reference of password in connection string.
        /// </param>

        /// <param name="encryptionClient">Specifies the encryption client behavior. Supported values are accepted,
        /// rejected, requested or required, default value is required. Type: string.
        /// Only used for Version 2.0.
        /// </param>

        /// <param name="encryptionTypesClient">Specifies the encryption algorithms that client can use. Supported values
        /// are AES128, AES192, AES256, 3DES112, 3DES168, default value is (AES256).
        /// Type: string. Only used for Version 2.0.
        /// </param>

        /// <param name="cryptoChecksumClient">Specifies the desired data integrity behavior when this client connects to
        /// a server. Supported values are accepted, rejected, requested or required,
        /// default value is required. Type: string. Only used for Version 2.0.
        /// </param>

        /// <param name="cryptoChecksumTypesClient">Specifies the crypto-checksum algorithms that client can use. Supported
        /// values are SHA1, SHA256, SHA384, SHA512, default value is (SHA512). Type:
        /// string. Only used for Version 2.0.
        /// </param>

        /// <param name="initialLobFetchSize">Specifies the amount that the source initially fetches for LOB columns,
        /// default value is 0. Type: integer. Only used for Version 2.0.
        /// </param>

        /// <param name="fetchSize">Specifies the number of bytes that the driver allocates to fetch the data
        /// in one database round-trip, default value is 10485760. Type: integer. Only
        /// used for Version 2.0.
        /// </param>

        /// <param name="statementCacheSize">Specifies the number of cursors or statements to be cached for each
        /// database connection, default value is 0. Type: integer. Only used for
        /// Version 2.0.
        /// </param>

        /// <param name="initializationString">Specifies a command that is issued immediately after connecting to the
        /// database to manage session settings. Type: string. Only used for Version
        /// 2.0.
        /// </param>

        /// <param name="enableBulkLoad">Specifies whether to use bulk copy or batch insert when loading data into
        /// the database, default value is true. Type: boolean. Only used for Version
        /// 2.0.
        /// </param>

        /// <param name="supportV1DataTypes">Specifies whether to use the Version 1.0 data type mappings. Do not set
        /// this to true unless you want to keep backward compatibility with Version
        /// 1.0&#39;s data type mappings, default value is false. Type: boolean. Only used
        /// for Version 2.0.
        /// </param>

        /// <param name="fetchTswtzAsTimestamp">Specifies whether the driver returns column value with the TIMESTAMP WITH
        /// TIME ZONE data type as DateTime or string. This setting is ignored if
        /// supportV1DataTypes is not true, default value is true. Type: boolean. Only
        /// used for Version 2.0.
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>
        public OracleLinkedServiceTypeProperties(object connectionString, object server = default(object), string authenticationType = default(string), object username = default(object), AzureKeyVaultSecretReference password = default(AzureKeyVaultSecretReference), object encryptionClient = default(object), object encryptionTypesClient = default(object), object cryptoChecksumClient = default(object), object cryptoChecksumTypesClient = default(object), object initialLobFetchSize = default(object), object fetchSize = default(object), object statementCacheSize = default(object), object initializationString = default(object), object enableBulkLoad = default(object), object supportV1DataTypes = default(object), object fetchTswtzAsTimestamp = default(object), string encryptedCredential = default(string))

        {
            this.ConnectionString = connectionString;
            this.Server = server;
            this.AuthenticationType = authenticationType;
            this.Username = username;
            this.Password = password;
            this.EncryptionClient = encryptionClient;
            this.EncryptionTypesClient = encryptionTypesClient;
            this.CryptoChecksumClient = cryptoChecksumClient;
            this.CryptoChecksumTypesClient = cryptoChecksumTypesClient;
            this.InitialLobFetchSize = initialLobFetchSize;
            this.FetchSize = fetchSize;
            this.StatementCacheSize = statementCacheSize;
            this.InitializationString = initializationString;
            this.EnableBulkLoad = enableBulkLoad;
            this.SupportV1DataTypes = supportV1DataTypes;
            this.FetchTswtzAsTimestamp = fetchTswtzAsTimestamp;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the connection string. Type: string, SecureString or
        /// AzureKeyVaultSecretReference. Only used for Version 1.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionString")]
        public object ConnectionString {get; set; }

        /// <summary>
        /// Gets or sets the location of Oracle database you want to connect to, the
        /// supported forms include connector descriptor, Easy Connect (Plus) Naming
        /// and Oracle Net Services Name (Only self-hosted IR). Type: string. Only used
        /// for Version 2.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "server")]
        public object Server {get; set; }

        /// <summary>
        /// Gets or sets authentication type for connecting to the Oracle database.
        /// Only used for Version 2.0. Possible values include: &#39;Basic&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authenticationType")]
        public string AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets the Oracle database username. Type: string. Only used for
        /// Version 2.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "username")]
        public object Username {get; set; }

        /// <summary>
        /// Gets or sets the Azure key vault secret reference of password in connection
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public AzureKeyVaultSecretReference Password {get; set; }

        /// <summary>
        /// Gets or sets specifies the encryption client behavior. Supported values are
        /// accepted, rejected, requested or required, default value is required. Type:
        /// string. Only used for Version 2.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptionClient")]
        public object EncryptionClient {get; set; }

        /// <summary>
        /// Gets or sets specifies the encryption algorithms that client can use.
        /// Supported values are AES128, AES192, AES256, 3DES112, 3DES168, default
        /// value is (AES256). Type: string. Only used for Version 2.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptionTypesClient")]
        public object EncryptionTypesClient {get; set; }

        /// <summary>
        /// Gets or sets specifies the desired data integrity behavior when this client
        /// connects to a server. Supported values are accepted, rejected, requested or
        /// required, default value is required. Type: string. Only used for Version
        /// 2.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cryptoChecksumClient")]
        public object CryptoChecksumClient {get; set; }

        /// <summary>
        /// Gets or sets specifies the crypto-checksum algorithms that client can use.
        /// Supported values are SHA1, SHA256, SHA384, SHA512, default value is
        /// (SHA512). Type: string. Only used for Version 2.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cryptoChecksumTypesClient")]
        public object CryptoChecksumTypesClient {get; set; }

        /// <summary>
        /// Gets or sets specifies the amount that the source initially fetches for LOB
        /// columns, default value is 0. Type: integer. Only used for Version 2.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "initialLobFetchSize")]
        public object InitialLobFetchSize {get; set; }

        /// <summary>
        /// Gets or sets specifies the number of bytes that the driver allocates to
        /// fetch the data in one database round-trip, default value is 10485760. Type:
        /// integer. Only used for Version 2.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fetchSize")]
        public object FetchSize {get; set; }

        /// <summary>
        /// Gets or sets specifies the number of cursors or statements to be cached for
        /// each database connection, default value is 0. Type: integer. Only used for
        /// Version 2.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "statementCacheSize")]
        public object StatementCacheSize {get; set; }

        /// <summary>
        /// Gets or sets specifies a command that is issued immediately after
        /// connecting to the database to manage session settings. Type: string. Only
        /// used for Version 2.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "initializationString")]
        public object InitializationString {get; set; }

        /// <summary>
        /// Gets or sets specifies whether to use bulk copy or batch insert when
        /// loading data into the database, default value is true. Type: boolean. Only
        /// used for Version 2.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableBulkLoad")]
        public object EnableBulkLoad {get; set; }

        /// <summary>
        /// Gets or sets specifies whether to use the Version 1.0 data type mappings.
        /// Do not set this to true unless you want to keep backward compatibility with
        /// Version 1.0&#39;s data type mappings, default value is false. Type: boolean.
        /// Only used for Version 2.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supportV1DataTypes")]
        public object SupportV1DataTypes {get; set; }

        /// <summary>
        /// Gets or sets specifies whether the driver returns column value with the
        /// TIMESTAMP WITH TIME ZONE data type as DateTime or string. This setting is
        /// ignored if supportV1DataTypes is not true, default value is true. Type:
        /// boolean. Only used for Version 2.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fetchTswtzAsTimestamp")]
        public object FetchTswtzAsTimestamp {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ConnectionString == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ConnectionString");
            }




            if (this.Password != null)
            {
                this.Password.Validate();
            }












        }
    }
}