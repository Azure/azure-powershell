// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Filter and return results from input array based on the conditions.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Filter")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class FilterActivity : ControlActivity
    {
        /// <summary>
        /// Initializes a new instance of the FilterActivity class.
        /// </summary>
        public FilterActivity()
        {
            this.Items = new Expression();
            this.Condition = new Expression();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FilterActivity class.
        /// </summary>

        /// <param name="additionalProperties">A pipeline activity.
        /// </param>

        /// <param name="name">Activity name.
        /// </param>

        /// <param name="description">Activity description.
        /// </param>

        /// <param name="state">Activity state. This is an optional property and if not provided, the state
        /// will be Active by default.
        /// Possible values include: &#39;Active&#39;, &#39;Inactive&#39;</param>

        /// <param name="onInactiveMarkAs">Status result of the activity when the state is set to Inactive. This is an
        /// optional property and if not provided when the activity is inactive, the
        /// status will be Succeeded by default.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Skipped&#39;</param>

        /// <param name="dependsOn">Activity depends on condition.
        /// </param>

        /// <param name="userProperties">Activity user properties.
        /// </param>

        /// <param name="items">Input array on which filter should be applied.
        /// </param>

        /// <param name="condition">Condition to be used for filtering the input.
        /// </param>
        public FilterActivity(string name, Expression items, Expression condition, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string description = default(string), string state = default(string), string onInactiveMarkAs = default(string), System.Collections.Generic.IList<ActivityDependency> dependsOn = default(System.Collections.Generic.IList<ActivityDependency>), System.Collections.Generic.IList<UserProperty> userProperties = default(System.Collections.Generic.IList<UserProperty>))

        : base(name, additionalProperties, description, state, onInactiveMarkAs, dependsOn, userProperties)
        {
            this.Items = items;
            this.Condition = condition;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets input array on which filter should be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.items")]
        public Expression Items {get; set; }

        /// <summary>
        /// Gets or sets condition to be used for filtering the input.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.condition")]
        public Expression Condition {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Items == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Items");
            }
            if (this.Condition == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Condition");
            }
            if (this.Items != null)
            {
                this.Items.Validate();
            }
            if (this.Condition != null)
            {
                this.Condition.Validate();
            }
        }
    }
}