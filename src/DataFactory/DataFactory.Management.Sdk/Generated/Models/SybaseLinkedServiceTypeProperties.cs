// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Sybase linked service properties.
    /// </summary>
    public partial class SybaseLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the SybaseLinkedServiceTypeProperties class.
        /// </summary>
        public SybaseLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SybaseLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="server">Server name for connection. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="database">Database name for connection. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="schema">Schema name for connection. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="authenticationType">AuthenticationType to be used for connection.
        /// Possible values include: &#39;Basic&#39;, &#39;Windows&#39;</param>

        /// <param name="username">Username for authentication. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="password">Password for authentication.
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>
        public SybaseLinkedServiceTypeProperties(object server, object database, object schema = default(object), string authenticationType = default(string), object username = default(object), SecretBase password = default(SecretBase), string encryptedCredential = default(string))

        {
            this.Server = server;
            this.Database = database;
            this.Schema = schema;
            this.AuthenticationType = authenticationType;
            this.Username = username;
            this.Password = password;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets server name for connection. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "server")]
        public object Server {get; set; }

        /// <summary>
        /// Gets or sets database name for connection. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "database")]
        public object Database {get; set; }

        /// <summary>
        /// Gets or sets schema name for connection. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "schema")]
        public object Schema {get; set; }

        /// <summary>
        /// Gets or sets authenticationType to be used for connection. Possible values include: &#39;Basic&#39;, &#39;Windows&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authenticationType")]
        public string AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets username for authentication. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "username")]
        public object Username {get; set; }

        /// <summary>
        /// Gets or sets password for authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public SecretBase Password {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Server == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Server");
            }
            if (this.Database == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Database");
            }







        }
    }
}