// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Vertica linked service properties.
    /// </summary>
    public partial class VerticaLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the VerticaLinkedServiceTypeProperties class.
        /// </summary>
        public VerticaLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VerticaLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="connectionString">An ODBC connection string. Type: string, SecureString or
        /// AzureKeyVaultSecretReference.
        /// </param>

        /// <param name="server">Server name for connection. Type: string.
        /// </param>

        /// <param name="port">The port for the connection. Type: integer.
        /// </param>

        /// <param name="uid">Username for authentication. Type: string.
        /// </param>

        /// <param name="database">Database name for connection. Type: string.
        /// </param>

        /// <param name="pwd">The Azure key vault secret reference of password in connection string.
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>
        public VerticaLinkedServiceTypeProperties(object connectionString = default(object), object server = default(object), object port = default(object), object uid = default(object), object database = default(object), AzureKeyVaultSecretReference pwd = default(AzureKeyVaultSecretReference), string encryptedCredential = default(string))

        {
            this.ConnectionString = connectionString;
            this.Server = server;
            this.Port = port;
            this.Uid = uid;
            this.Database = database;
            this.Pwd = pwd;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets an ODBC connection string. Type: string, SecureString or
        /// AzureKeyVaultSecretReference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionString")]
        public object ConnectionString {get; set; }

        /// <summary>
        /// Gets or sets server name for connection. Type: string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "server")]
        public object Server {get; set; }

        /// <summary>
        /// Gets or sets the port for the connection. Type: integer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "port")]
        public object Port {get; set; }

        /// <summary>
        /// Gets or sets username for authentication. Type: string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uid")]
        public object Uid {get; set; }

        /// <summary>
        /// Gets or sets database name for connection. Type: string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "database")]
        public object Database {get; set; }

        /// <summary>
        /// Gets or sets the Azure key vault secret reference of password in connection
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "pwd")]
        public AzureKeyVaultSecretReference Pwd {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {





            if (this.Pwd != null)
            {
                this.Pwd.Validate();
            }

        }
    }
}