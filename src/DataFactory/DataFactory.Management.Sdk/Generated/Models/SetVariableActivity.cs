// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Set value for a Variable.
    /// </summary>
    [Newtonsoft.Json.JsonObject("SetVariable")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SetVariableActivity : ControlActivity
    {
        /// <summary>
        /// Initializes a new instance of the SetVariableActivity class.
        /// </summary>
        public SetVariableActivity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SetVariableActivity class.
        /// </summary>

        /// <param name="additionalProperties">A pipeline activity.
        /// </param>

        /// <param name="name">Activity name.
        /// </param>

        /// <param name="description">Activity description.
        /// </param>

        /// <param name="state">Activity state. This is an optional property and if not provided, the state
        /// will be Active by default.
        /// Possible values include: &#39;Active&#39;, &#39;Inactive&#39;</param>

        /// <param name="onInactiveMarkAs">Status result of the activity when the state is set to Inactive. This is an
        /// optional property and if not provided when the activity is inactive, the
        /// status will be Succeeded by default.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Skipped&#39;</param>

        /// <param name="dependsOn">Activity depends on condition.
        /// </param>

        /// <param name="userProperties">Activity user properties.
        /// </param>

        /// <param name="policy">Activity policy.
        /// </param>

        /// <param name="variableName">Name of the variable whose value needs to be set.
        /// </param>

        /// <param name="value">Value to be set. Could be a static value or Expression.
        /// </param>

        /// <param name="setSystemVariable">If set to true, it sets the pipeline run return value.
        /// </param>
        public SetVariableActivity(string name, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string description = default(string), string state = default(string), string onInactiveMarkAs = default(string), System.Collections.Generic.IList<ActivityDependency> dependsOn = default(System.Collections.Generic.IList<ActivityDependency>), System.Collections.Generic.IList<UserProperty> userProperties = default(System.Collections.Generic.IList<UserProperty>), SecureInputOutputPolicy policy = default(SecureInputOutputPolicy), string variableName = default(string), object value = default(object), bool? setSystemVariable = default(bool?))

        : base(name, additionalProperties, description, state, onInactiveMarkAs, dependsOn, userProperties)
        {
            this.Policy = policy;
            this.VariableName = variableName;
            this.Value = value;
            this.SetSystemVariable = setSystemVariable;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets activity policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policy")]
        public SecureInputOutputPolicy Policy {get; set; }

        /// <summary>
        /// Gets or sets name of the variable whose value needs to be set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.variableName")]
        public string VariableName {get; set; }

        /// <summary>
        /// Gets or sets value to be set. Could be a static value or Expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.value")]
        public object Value {get; set; }

        /// <summary>
        /// Gets or sets if set to true, it sets the pipeline run return value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.setSystemVariable")]
        public bool? SetSystemVariable {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();



        }
    }
}