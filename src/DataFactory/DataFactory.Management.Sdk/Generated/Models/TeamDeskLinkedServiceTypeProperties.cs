// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// TeamDesk linked service type properties.
    /// </summary>
    public partial class TeamDeskLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the TeamDeskLinkedServiceTypeProperties class.
        /// </summary>
        public TeamDeskLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TeamDeskLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="authenticationType">The authentication type to use.
        /// Possible values include: &#39;Basic&#39;, &#39;Token&#39;</param>

        /// <param name="url">The url to connect TeamDesk source. Type: string (or Expression with
        /// resultType string).
        /// </param>

        /// <param name="userName">The username of the TeamDesk source. Type: string (or Expression with
        /// resultType string).
        /// </param>

        /// <param name="password">The password of the TeamDesk source.
        /// </param>

        /// <param name="apiToken">The api token for the TeamDesk source.
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>
        public TeamDeskLinkedServiceTypeProperties(string authenticationType, object url, object userName = default(object), SecretBase password = default(SecretBase), SecretBase apiToken = default(SecretBase), string encryptedCredential = default(string))

        {
            this.AuthenticationType = authenticationType;
            this.Url = url;
            this.UserName = userName;
            this.Password = password;
            this.ApiToken = apiToken;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the authentication type to use. Possible values include: &#39;Basic&#39;, &#39;Token&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authenticationType")]
        public string AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets the url to connect TeamDesk source. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "url")]
        public object Url {get; set; }

        /// <summary>
        /// Gets or sets the username of the TeamDesk source. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userName")]
        public object UserName {get; set; }

        /// <summary>
        /// Gets or sets the password of the TeamDesk source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public SecretBase Password {get; set; }

        /// <summary>
        /// Gets or sets the api token for the TeamDesk source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "apiToken")]
        public SecretBase ApiToken {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.AuthenticationType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AuthenticationType");
            }
            if (this.Url == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Url");
            }






        }
    }
}