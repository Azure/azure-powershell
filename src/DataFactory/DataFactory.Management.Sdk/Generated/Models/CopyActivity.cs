// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Copy activity.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Copy")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class CopyActivity : ExecutionActivity
    {
        /// <summary>
        /// Initializes a new instance of the CopyActivity class.
        /// </summary>
        public CopyActivity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CopyActivity class.
        /// </summary>

        /// <param name="additionalProperties">A pipeline activity.
        /// </param>

        /// <param name="name">Activity name.
        /// </param>

        /// <param name="description">Activity description.
        /// </param>

        /// <param name="state">Activity state. This is an optional property and if not provided, the state
        /// will be Active by default.
        /// Possible values include: &#39;Active&#39;, &#39;Inactive&#39;</param>

        /// <param name="onInactiveMarkAs">Status result of the activity when the state is set to Inactive. This is an
        /// optional property and if not provided when the activity is inactive, the
        /// status will be Succeeded by default.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Skipped&#39;</param>

        /// <param name="dependsOn">Activity depends on condition.
        /// </param>

        /// <param name="userProperties">Activity user properties.
        /// </param>

        /// <param name="linkedServiceName">Linked service reference.
        /// </param>

        /// <param name="policy">Activity policy.
        /// </param>

        /// <param name="inputs">List of inputs for the activity.
        /// </param>

        /// <param name="outputs">List of outputs for the activity.
        /// </param>

        /// <param name="stagingSettings">Specifies interim staging settings when EnableStaging is true.
        /// </param>

        /// <param name="logSettings">Log settings customer needs provide when enabling log.
        /// </param>

        /// <param name="source">Copy activity source.
        /// </param>

        /// <param name="sink">Copy activity sink.
        /// </param>

        /// <param name="translator">Copy activity translator. If not specified, tabular translator is used.
        /// </param>

        /// <param name="enableStaging">Specifies whether to copy data via an interim staging. Default value is
        /// false. Type: boolean (or Expression with resultType boolean).
        /// </param>

        /// <param name="parallelCopies">Maximum number of concurrent sessions opened on the source or sink to avoid
        /// overloading the data store. Type: integer (or Expression with resultType
        /// integer), minimum: 0.
        /// </param>

        /// <param name="dataIntegrationUnits">Maximum number of data integration units that can be used to perform this
        /// data movement. Type: integer (or Expression with resultType integer),
        /// minimum: 0.
        /// </param>

        /// <param name="enableSkipIncompatibleRow">Whether to skip incompatible row. Default value is false. Type: boolean (or
        /// Expression with resultType boolean).
        /// </param>

        /// <param name="redirectIncompatibleRowSettings">Redirect incompatible row settings when EnableSkipIncompatibleRow is true.
        /// </param>

        /// <param name="logStorageSettings">(Deprecated. Please use LogSettings) Log storage settings customer need to
        /// provide when enabling session log.
        /// </param>

        /// <param name="preserveRules">Preserve Rules.
        /// </param>

        /// <param name="preserve">Preserve rules.
        /// </param>

        /// <param name="validateDataConsistency">Whether to enable Data Consistency validation. Type: boolean (or Expression
        /// with resultType boolean).
        /// </param>

        /// <param name="skipErrorFile">Specify the fault tolerance for data consistency.
        /// </param>
        public CopyActivity(string name, CopySource source, CopySink sink, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string description = default(string), string state = default(string), string onInactiveMarkAs = default(string), System.Collections.Generic.IList<ActivityDependency> dependsOn = default(System.Collections.Generic.IList<ActivityDependency>), System.Collections.Generic.IList<UserProperty> userProperties = default(System.Collections.Generic.IList<UserProperty>), LinkedServiceReference linkedServiceName = default(LinkedServiceReference), ActivityPolicy policy = default(ActivityPolicy), System.Collections.Generic.IList<DatasetReference> inputs = default(System.Collections.Generic.IList<DatasetReference>), System.Collections.Generic.IList<DatasetReference> outputs = default(System.Collections.Generic.IList<DatasetReference>), StagingSettings stagingSettings = default(StagingSettings), LogSettings logSettings = default(LogSettings), object translator = default(object), object enableStaging = default(object), object parallelCopies = default(object), object dataIntegrationUnits = default(object), object enableSkipIncompatibleRow = default(object), RedirectIncompatibleRowSettings redirectIncompatibleRowSettings = default(RedirectIncompatibleRowSettings), LogStorageSettings logStorageSettings = default(LogStorageSettings), System.Collections.Generic.IList<object> preserveRules = default(System.Collections.Generic.IList<object>), System.Collections.Generic.IList<object> preserve = default(System.Collections.Generic.IList<object>), object validateDataConsistency = default(object), SkipErrorFile skipErrorFile = default(SkipErrorFile))

        : base(name, additionalProperties, description, state, onInactiveMarkAs, dependsOn, userProperties, linkedServiceName, policy)
        {
            this.Inputs = inputs;
            this.Outputs = outputs;
            this.StagingSettings = stagingSettings;
            this.LogSettings = logSettings;
            this.Source = source;
            this.Sink = sink;
            this.Translator = translator;
            this.EnableStaging = enableStaging;
            this.ParallelCopies = parallelCopies;
            this.DataIntegrationUnits = dataIntegrationUnits;
            this.EnableSkipIncompatibleRow = enableSkipIncompatibleRow;
            this.RedirectIncompatibleRowSettings = redirectIncompatibleRowSettings;
            this.LogStorageSettings = logStorageSettings;
            this.PreserveRules = preserveRules;
            this.Preserve = preserve;
            this.ValidateDataConsistency = validateDataConsistency;
            this.SkipErrorFile = skipErrorFile;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets list of inputs for the activity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "inputs")]
        public System.Collections.Generic.IList<DatasetReference> Inputs {get; set; }

        /// <summary>
        /// Gets or sets list of outputs for the activity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "outputs")]
        public System.Collections.Generic.IList<DatasetReference> Outputs {get; set; }

        /// <summary>
        /// Gets or sets specifies interim staging settings when EnableStaging is true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.stagingSettings")]
        public StagingSettings StagingSettings {get; set; }

        /// <summary>
        /// Gets or sets log settings customer needs provide when enabling log.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.logSettings")]
        public LogSettings LogSettings {get; set; }

        /// <summary>
        /// Gets or sets copy activity source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.source")]
        public CopySource Source {get; set; }

        /// <summary>
        /// Gets or sets copy activity sink.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.sink")]
        public CopySink Sink {get; set; }

        /// <summary>
        /// Gets or sets copy activity translator. If not specified, tabular translator
        /// is used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.translator")]
        public object Translator {get; set; }

        /// <summary>
        /// Gets or sets specifies whether to copy data via an interim staging. Default
        /// value is false. Type: boolean (or Expression with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.enableStaging")]
        public object EnableStaging {get; set; }

        /// <summary>
        /// Gets or sets maximum number of concurrent sessions opened on the source or
        /// sink to avoid overloading the data store. Type: integer (or Expression with
        /// resultType integer), minimum: 0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.parallelCopies")]
        public object ParallelCopies {get; set; }

        /// <summary>
        /// Gets or sets maximum number of data integration units that can be used to
        /// perform this data movement. Type: integer (or Expression with resultType
        /// integer), minimum: 0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.dataIntegrationUnits")]
        public object DataIntegrationUnits {get; set; }

        /// <summary>
        /// Gets or sets whether to skip incompatible row. Default value is false.
        /// Type: boolean (or Expression with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.enableSkipIncompatibleRow")]
        public object EnableSkipIncompatibleRow {get; set; }

        /// <summary>
        /// Gets or sets redirect incompatible row settings when
        /// EnableSkipIncompatibleRow is true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.redirectIncompatibleRowSettings")]
        public RedirectIncompatibleRowSettings RedirectIncompatibleRowSettings {get; set; }

        /// <summary>
        /// Gets or sets (Deprecated. Please use LogSettings) Log storage settings
        /// customer need to provide when enabling session log.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.logStorageSettings")]
        public LogStorageSettings LogStorageSettings {get; set; }

        /// <summary>
        /// Gets or sets preserve Rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.preserveRules")]
        public System.Collections.Generic.IList<object> PreserveRules {get; set; }

        /// <summary>
        /// Gets or sets preserve rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.preserve")]
        public System.Collections.Generic.IList<object> Preserve {get; set; }

        /// <summary>
        /// Gets or sets whether to enable Data Consistency validation. Type: boolean
        /// (or Expression with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.validateDataConsistency")]
        public object ValidateDataConsistency {get; set; }

        /// <summary>
        /// Gets or sets specify the fault tolerance for data consistency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.skipErrorFile")]
        public SkipErrorFile SkipErrorFile {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Source == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Source");
            }
            if (this.Sink == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Sink");
            }
            if (this.Inputs != null)
            {
                foreach (var element in this.Inputs)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Outputs != null)
            {
                foreach (var element in this.Outputs)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.StagingSettings != null)
            {
                this.StagingSettings.Validate();
            }
            if (this.LogSettings != null)
            {
                this.LogSettings.Validate();
            }







            if (this.RedirectIncompatibleRowSettings != null)
            {
                this.RedirectIncompatibleRowSettings.Validate();
            }
            if (this.LogStorageSettings != null)
            {
                this.LogStorageSettings.Validate();
            }




        }
    }
}