// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Azure Batch linked service properties.
    /// </summary>
    public partial class AzureBatchLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the AzureBatchLinkedServiceTypeProperties class.
        /// </summary>
        public AzureBatchLinkedServiceTypeProperties()
        {
            this.LinkedServiceName = new LinkedServiceReference();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureBatchLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="accountName">The Azure Batch account name. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="accessKey">The Azure Batch account access key.
        /// </param>

        /// <param name="batchUri">The Azure Batch URI. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="poolName">The Azure Batch pool name. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="linkedServiceName">The Azure Storage linked service reference.
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>

        /// <param name="credential">The credential reference containing authentication information.
        /// </param>
        public AzureBatchLinkedServiceTypeProperties(object accountName, object batchUri, object poolName, LinkedServiceReference linkedServiceName, SecretBase accessKey = default(SecretBase), string encryptedCredential = default(string), CredentialReference credential = default(CredentialReference))

        {
            this.AccountName = accountName;
            this.AccessKey = accessKey;
            this.BatchUri = batchUri;
            this.PoolName = poolName;
            this.LinkedServiceName = linkedServiceName;
            this.EncryptedCredential = encryptedCredential;
            this.Credential = credential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the Azure Batch account name. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accountName")]
        public object AccountName {get; set; }

        /// <summary>
        /// Gets or sets the Azure Batch account access key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accessKey")]
        public SecretBase AccessKey {get; set; }

        /// <summary>
        /// Gets or sets the Azure Batch URI. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "batchUri")]
        public object BatchUri {get; set; }

        /// <summary>
        /// Gets or sets the Azure Batch pool name. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "poolName")]
        public object PoolName {get; set; }

        /// <summary>
        /// Gets or sets the Azure Storage linked service reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "linkedServiceName")]
        public LinkedServiceReference LinkedServiceName {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }

        /// <summary>
        /// Gets or sets the credential reference containing authentication
        /// information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "credential")]
        public CredentialReference Credential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.AccountName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AccountName");
            }
            if (this.BatchUri == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "BatchUri");
            }
            if (this.PoolName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "PoolName");
            }
            if (this.LinkedServiceName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "LinkedServiceName");
            }




            if (this.LinkedServiceName != null)
            {
                this.LinkedServiceName.Validate();
            }

            if (this.Credential != null)
            {
                this.Credential.Validate();
            }
        }
    }
}