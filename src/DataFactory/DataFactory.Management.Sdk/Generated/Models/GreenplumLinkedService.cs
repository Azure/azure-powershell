// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Greenplum Database linked service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Greenplum")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class GreenplumLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the GreenplumLinkedService class.
        /// </summary>
        public GreenplumLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GreenplumLinkedService class.
        /// </summary>

        /// <param name="additionalProperties">The nested object which contains the information and credential which can
        /// be used to connect with related store or compute resource.
        /// </param>

        /// <param name="version">Version of the linked service.
        /// </param>

        /// <param name="connectVia">The integration runtime reference.
        /// </param>

        /// <param name="description">Linked service description.
        /// </param>

        /// <param name="parameters">Parameters for linked service.
        /// </param>

        /// <param name="annotations">List of tags that can be used for describing the linked service.
        /// </param>

        /// <param name="connectionString">An ODBC connection string. Type: string, SecureString or
        /// AzureKeyVaultSecretReference.
        /// </param>

        /// <param name="pwd">The Azure key vault secret reference of password in connection string.
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>

        /// <param name="authenticationType">The authentication type to use. Type: string. Only used for V2.
        /// Possible values include: &#39;Basic&#39;</param>

        /// <param name="host">Host name for connection. Type: string. Only used for V2.
        /// </param>

        /// <param name="port">The port for the connection. Type: integer. Only used for V2.
        /// </param>

        /// <param name="username">Username for authentication. Type: string. Only used for V2.
        /// </param>

        /// <param name="database">Database name for connection. Type: string. Only used for V2.
        /// </param>

        /// <param name="sslMode">SSL mode for connection. Type: integer. 0: disable, 1:allow, 2: prefer, 3:
        /// require, 4: verify-ca, 5: verify-full. Type: integer. Only used for V2.
        /// </param>

        /// <param name="connectionTimeout">The time to wait (in seconds) while trying to establish a connection before
        /// terminating the attempt and generating an error. Type: integer. Only used
        /// for V2.
        /// </param>

        /// <param name="commandTimeout">The time to wait (in seconds) while trying to execute a command before
        /// terminating the attempt and generating an error. Set to zero for infinity.
        /// Type: integer. Only used for V2.
        /// </param>

        /// <param name="password">The Azure key vault secret reference of password in connection string.
        /// Type: string. Only used for V2.
        /// </param>
        public GreenplumLinkedService(System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string version = default(string), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), System.Collections.Generic.IDictionary<string, ParameterSpecification> parameters = default(System.Collections.Generic.IDictionary<string, ParameterSpecification>), System.Collections.Generic.IList<object> annotations = default(System.Collections.Generic.IList<object>), object connectionString = default(object), AzureKeyVaultSecretReference pwd = default(AzureKeyVaultSecretReference), string encryptedCredential = default(string), string authenticationType = default(string), object host = default(object), object port = default(object), object username = default(object), object database = default(object), object sslMode = default(object), object connectionTimeout = default(object), object commandTimeout = default(object), SecretBase password = default(SecretBase))

        : base(additionalProperties, version, connectVia, description, parameters, annotations)
        {
            this.ConnectionString = connectionString;
            this.Pwd = pwd;
            this.EncryptedCredential = encryptedCredential;
            this.AuthenticationType = authenticationType;
            this.Host = host;
            this.Port = port;
            this.Username = username;
            this.Database = database;
            this.SslMode = sslMode;
            this.ConnectionTimeout = connectionTimeout;
            this.CommandTimeout = commandTimeout;
            this.Password = password;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets an ODBC connection string. Type: string, SecureString or
        /// AzureKeyVaultSecretReference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.connectionString")]
        public object ConnectionString {get; set; }

        /// <summary>
        /// Gets or sets the Azure key vault secret reference of password in connection
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.pwd")]
        public AzureKeyVaultSecretReference Pwd {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public string EncryptedCredential {get; set; }

        /// <summary>
        /// Gets or sets the authentication type to use. Type: string. Only used for
        /// V2. Possible values include: &#39;Basic&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.authenticationType")]
        public string AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets host name for connection. Type: string. Only used for V2.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.host")]
        public object Host {get; set; }

        /// <summary>
        /// Gets or sets the port for the connection. Type: integer. Only used for V2.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.port")]
        public object Port {get; set; }

        /// <summary>
        /// Gets or sets username for authentication. Type: string. Only used for V2.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.username")]
        public object Username {get; set; }

        /// <summary>
        /// Gets or sets database name for connection. Type: string. Only used for V2.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.database")]
        public object Database {get; set; }

        /// <summary>
        /// Gets or sets sSL mode for connection. Type: integer. 0: disable, 1:allow,
        /// 2: prefer, 3: require, 4: verify-ca, 5: verify-full. Type: integer. Only
        /// used for V2.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.sslMode")]
        public object SslMode {get; set; }

        /// <summary>
        /// Gets or sets the time to wait (in seconds) while trying to establish a
        /// connection before terminating the attempt and generating an error. Type:
        /// integer. Only used for V2.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.connectionTimeout")]
        public object ConnectionTimeout {get; set; }

        /// <summary>
        /// Gets or sets the time to wait (in seconds) while trying to execute a
        /// command before terminating the attempt and generating an error. Set to zero
        /// for infinity. Type: integer. Only used for V2.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.commandTimeout")]
        public object CommandTimeout {get; set; }

        /// <summary>
        /// Gets or sets the Azure key vault secret reference of password in connection
        /// string. Type: string. Only used for V2.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.password")]
        public SecretBase Password {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();

            if (this.Pwd != null)
            {
                this.Pwd.Validate();
            }










        }
    }
}