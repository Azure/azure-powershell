// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A object which contains list of tables and connection details for a
    /// source connection.
    /// </summary>
    public partial class MapperSourceConnectionsInfo
    {
        /// <summary>
        /// Initializes a new instance of the MapperSourceConnectionsInfo
        /// class.
        /// </summary>
        public MapperSourceConnectionsInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MapperSourceConnectionsInfo
        /// class.
        /// </summary>
        /// <param name="sourceEntities">List of source tables for a source
        /// connection.</param>
        public MapperSourceConnectionsInfo(IList<MapperTable> sourceEntities = default(IList<MapperTable>), MapperConnection connection = default(MapperConnection))
        {
            SourceEntities = sourceEntities;
            Connection = connection;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets list of source tables for a source connection.
        /// </summary>
        [JsonProperty(PropertyName = "sourceEntities")]
        public IList<MapperTable> SourceEntities { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "connection")]
        public MapperConnection Connection { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Connection != null)
            {
                Connection.Validate();
            }
        }
    }
}
