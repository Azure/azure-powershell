// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// CosmosDB linked service properties.
    /// </summary>
    public partial class CosmosDbLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the CosmosDbLinkedServiceTypeProperties class.
        /// </summary>
        public CosmosDbLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CosmosDbLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="connectionString">The connection string. Type: string, SecureString or
        /// AzureKeyVaultSecretReference.
        /// </param>

        /// <param name="accountEndpoint">The endpoint of the Azure CosmosDB account. Type: string (or Expression
        /// with resultType string)
        /// </param>

        /// <param name="database">The name of the database. Type: string (or Expression with resultType
        /// string)
        /// </param>

        /// <param name="accountKey">The account key of the Azure CosmosDB account. Type: SecureString or
        /// AzureKeyVaultSecretReference.
        /// </param>

        /// <param name="servicePrincipalId">The client ID of the application in Azure Active Directory used for
        /// Server-To-Server authentication. Type: string (or Expression with
        /// resultType string).
        /// </param>

        /// <param name="servicePrincipalCredentialType">The service principal credential type to use in Server-To-Server
        /// authentication. &#39;ServicePrincipalKey&#39; for key/secret,
        /// &#39;ServicePrincipalCert&#39; for certificate. Type: string.
        /// </param>

        /// <param name="servicePrincipalCredential">The credential of the service principal object in Azure Active Directory.
        /// If servicePrincipalCredentialType is &#39;ServicePrincipalKey&#39;,
        /// servicePrincipalCredential can be SecureString or
        /// AzureKeyVaultSecretReference. If servicePrincipalCredentialType is
        /// &#39;ServicePrincipalCert&#39;, servicePrincipalCredential can only be
        /// AzureKeyVaultSecretReference.
        /// </param>

        /// <param name="tenant">The name or ID of the tenant to which the service principal belongs. Type:
        /// string (or Expression with resultType string).
        /// </param>

        /// <param name="azureCloudType">Indicates the azure cloud type of the service principle auth. Allowed
        /// values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany.
        /// Default value is the data factory regions’ cloud type. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="connectionMode">The connection mode used to access CosmosDB account. Type: string.
        /// Possible values include: &#39;Gateway&#39;, &#39;Direct&#39;</param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>

        /// <param name="credential">The credential reference containing authentication information.
        /// </param>
        public CosmosDbLinkedServiceTypeProperties(object connectionString = default(object), object accountEndpoint = default(object), object database = default(object), SecretBase accountKey = default(SecretBase), object servicePrincipalId = default(object), object servicePrincipalCredentialType = default(object), SecretBase servicePrincipalCredential = default(SecretBase), object tenant = default(object), object azureCloudType = default(object), string connectionMode = default(string), string encryptedCredential = default(string), CredentialReference credential = default(CredentialReference))

        {
            this.ConnectionString = connectionString;
            this.AccountEndpoint = accountEndpoint;
            this.Database = database;
            this.AccountKey = accountKey;
            this.ServicePrincipalId = servicePrincipalId;
            this.ServicePrincipalCredentialType = servicePrincipalCredentialType;
            this.ServicePrincipalCredential = servicePrincipalCredential;
            this.Tenant = tenant;
            this.AzureCloudType = azureCloudType;
            this.ConnectionMode = connectionMode;
            this.EncryptedCredential = encryptedCredential;
            this.Credential = credential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the connection string. Type: string, SecureString or
        /// AzureKeyVaultSecretReference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionString")]
        public object ConnectionString {get; set; }

        /// <summary>
        /// Gets or sets the endpoint of the Azure CosmosDB account. Type: string (or
        /// Expression with resultType string)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accountEndpoint")]
        public object AccountEndpoint {get; set; }

        /// <summary>
        /// Gets or sets the name of the database. Type: string (or Expression with
        /// resultType string)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "database")]
        public object Database {get; set; }

        /// <summary>
        /// Gets or sets the account key of the Azure CosmosDB account. Type:
        /// SecureString or AzureKeyVaultSecretReference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accountKey")]
        public SecretBase AccountKey {get; set; }

        /// <summary>
        /// Gets or sets the client ID of the application in Azure Active Directory
        /// used for Server-To-Server authentication. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalId")]
        public object ServicePrincipalId {get; set; }

        /// <summary>
        /// Gets or sets the service principal credential type to use in
        /// Server-To-Server authentication. &#39;ServicePrincipalKey&#39; for key/secret,
        /// &#39;ServicePrincipalCert&#39; for certificate. Type: string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalCredentialType")]
        public object ServicePrincipalCredentialType {get; set; }

        /// <summary>
        /// Gets or sets the credential of the service principal object in Azure Active
        /// Directory. If servicePrincipalCredentialType is &#39;ServicePrincipalKey&#39;,
        /// servicePrincipalCredential can be SecureString or
        /// AzureKeyVaultSecretReference. If servicePrincipalCredentialType is
        /// &#39;ServicePrincipalCert&#39;, servicePrincipalCredential can only be
        /// AzureKeyVaultSecretReference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalCredential")]
        public SecretBase ServicePrincipalCredential {get; set; }

        /// <summary>
        /// Gets or sets the name or ID of the tenant to which the service principal
        /// belongs. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tenant")]
        public object Tenant {get; set; }

        /// <summary>
        /// Gets or sets indicates the azure cloud type of the service principle auth.
        /// Allowed values are AzurePublic, AzureChina, AzureUsGovernment,
        /// AzureGermany. Default value is the data factory regions’ cloud type. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azureCloudType")]
        public object AzureCloudType {get; set; }

        /// <summary>
        /// Gets or sets the connection mode used to access CosmosDB account. Type:
        /// string. Possible values include: &#39;Gateway&#39;, &#39;Direct&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionMode")]
        public string ConnectionMode {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }

        /// <summary>
        /// Gets or sets the credential reference containing authentication
        /// information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "credential")]
        public CredentialReference Credential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {











            if (this.Credential != null)
            {
                this.Credential.Validate();
            }
        }
    }
}