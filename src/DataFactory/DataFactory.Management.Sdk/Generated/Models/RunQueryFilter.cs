// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Query filter option for listing runs.
    /// </summary>
    public partial class RunQueryFilter
    {
        /// <summary>
        /// Initializes a new instance of the RunQueryFilter class.
        /// </summary>
        public RunQueryFilter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RunQueryFilter class.
        /// </summary>

        /// <param name="operand">Parameter name to be used for filter. The allowed operands to query
        /// pipeline runs are PipelineName, RunStart, RunEnd and Status; to query
        /// activity runs are ActivityName, ActivityRunStart, ActivityRunEnd,
        /// ActivityType and Status, and to query trigger runs are TriggerName,
        /// TriggerRunTimestamp and Status.
        /// Possible values include: &#39;PipelineName&#39;, &#39;Status&#39;, &#39;RunStart&#39;, &#39;RunEnd&#39;,
        /// &#39;ActivityName&#39;, &#39;ActivityRunStart&#39;, &#39;ActivityRunEnd&#39;, &#39;ActivityType&#39;,
        /// &#39;TriggerName&#39;, &#39;TriggerRunTimestamp&#39;, &#39;RunGroupId&#39;, &#39;LatestOnly&#39;</param>

        /// <param name="operatorProperty">Operator to be used for filter.
        /// Possible values include: &#39;Equals&#39;, &#39;NotEquals&#39;, &#39;In&#39;, &#39;NotIn&#39;</param>

        /// <param name="values">List of filter values.
        /// </param>
        public RunQueryFilter(string operand, string operatorProperty, System.Collections.Generic.IList<string> values)

        {
            this.Operand = operand;
            this.OperatorProperty = operatorProperty;
            this.Values = values;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets parameter name to be used for filter. The allowed operands to
        /// query pipeline runs are PipelineName, RunStart, RunEnd and Status; to query
        /// activity runs are ActivityName, ActivityRunStart, ActivityRunEnd,
        /// ActivityType and Status, and to query trigger runs are TriggerName,
        /// TriggerRunTimestamp and Status. Possible values include: &#39;PipelineName&#39;, &#39;Status&#39;, &#39;RunStart&#39;, &#39;RunEnd&#39;, &#39;ActivityName&#39;, &#39;ActivityRunStart&#39;, &#39;ActivityRunEnd&#39;, &#39;ActivityType&#39;, &#39;TriggerName&#39;, &#39;TriggerRunTimestamp&#39;, &#39;RunGroupId&#39;, &#39;LatestOnly&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operand")]
        public string Operand {get; set; }

        /// <summary>
        /// Gets or sets operator to be used for filter. Possible values include: &#39;Equals&#39;, &#39;NotEquals&#39;, &#39;In&#39;, &#39;NotIn&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operator")]
        public string OperatorProperty {get; set; }

        /// <summary>
        /// Gets or sets list of filter values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "values")]
        public System.Collections.Generic.IList<string> Values {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Operand == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Operand");
            }
            if (this.OperatorProperty == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "OperatorProperty");
            }
            if (this.Values == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Values");
            }



        }
    }
}