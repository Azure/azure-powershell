// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Snowflake linked service properties.
    /// </summary>
    public partial class SnowflakeLinkedV2ServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the SnowflakeLinkedV2ServiceTypeProperties class.
        /// </summary>
        public SnowflakeLinkedV2ServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SnowflakeLinkedV2ServiceTypeProperties class.
        /// </summary>

        /// <param name="accountIdentifier">The account identifier of your Snowflake account, e.g.
        /// xy12345.east-us-2.azure
        /// </param>

        /// <param name="user">The name of the Snowflake user.
        /// </param>

        /// <param name="password">The Azure key vault secret reference of password in connection string.
        /// </param>

        /// <param name="database">The name of the Snowflake database.
        /// </param>

        /// <param name="warehouse">The name of the Snowflake warehouse.
        /// </param>

        /// <param name="authenticationType">The type used for authentication. Type: string.
        /// Possible values include: &#39;Basic&#39;, &#39;KeyPair&#39;, &#39;AADServicePrincipal&#39;</param>

        /// <param name="clientId">The client ID of the application registered in Azure Active Directory for
        /// AADServicePrincipal authentication.
        /// </param>

        /// <param name="clientSecret">The Azure key vault secret reference of client secret for
        /// AADServicePrincipal authentication.
        /// </param>

        /// <param name="tenantId">The tenant ID of the application registered in Azure Active Directory for
        /// AADServicePrincipal authentication.
        /// </param>

        /// <param name="scope">The scope of the application registered in Azure Active Directory for
        /// AADServicePrincipal authentication.
        /// </param>

        /// <param name="privateKey">The Azure key vault secret reference of privateKey for KeyPair auth.
        /// </param>

        /// <param name="privateKeyPassphrase">The Azure key vault secret reference of private key password for KeyPair
        /// auth with encrypted private key.
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>
        public SnowflakeLinkedV2ServiceTypeProperties(object accountIdentifier, object database, object warehouse, object user = default(object), SecretBase password = default(SecretBase), string authenticationType = default(string), object clientId = default(object), SecretBase clientSecret = default(SecretBase), object tenantId = default(object), object scope = default(object), SecretBase privateKey = default(SecretBase), SecretBase privateKeyPassphrase = default(SecretBase), string encryptedCredential = default(string))

        {
            this.AccountIdentifier = accountIdentifier;
            this.User = user;
            this.Password = password;
            this.Database = database;
            this.Warehouse = warehouse;
            this.AuthenticationType = authenticationType;
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            this.TenantId = tenantId;
            this.Scope = scope;
            this.PrivateKey = privateKey;
            this.PrivateKeyPassphrase = privateKeyPassphrase;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the account identifier of your Snowflake account, e.g.
        /// xy12345.east-us-2.azure
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accountIdentifier")]
        public object AccountIdentifier {get; set; }

        /// <summary>
        /// Gets or sets the name of the Snowflake user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "user")]
        public object User {get; set; }

        /// <summary>
        /// Gets or sets the Azure key vault secret reference of password in connection
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public SecretBase Password {get; set; }

        /// <summary>
        /// Gets or sets the name of the Snowflake database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "database")]
        public object Database {get; set; }

        /// <summary>
        /// Gets or sets the name of the Snowflake warehouse.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "warehouse")]
        public object Warehouse {get; set; }

        /// <summary>
        /// Gets or sets the type used for authentication. Type: string. Possible values include: &#39;Basic&#39;, &#39;KeyPair&#39;, &#39;AADServicePrincipal&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authenticationType")]
        public string AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets the client ID of the application registered in Azure Active
        /// Directory for AADServicePrincipal authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientId")]
        public object ClientId {get; set; }

        /// <summary>
        /// Gets or sets the Azure key vault secret reference of client secret for
        /// AADServicePrincipal authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientSecret")]
        public SecretBase ClientSecret {get; set; }

        /// <summary>
        /// Gets or sets the tenant ID of the application registered in Azure Active
        /// Directory for AADServicePrincipal authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tenantId")]
        public object TenantId {get; set; }

        /// <summary>
        /// Gets or sets the scope of the application registered in Azure Active
        /// Directory for AADServicePrincipal authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "scope")]
        public object Scope {get; set; }

        /// <summary>
        /// Gets or sets the Azure key vault secret reference of privateKey for KeyPair
        /// auth.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateKey")]
        public SecretBase PrivateKey {get; set; }

        /// <summary>
        /// Gets or sets the Azure key vault secret reference of private key password
        /// for KeyPair auth with encrypted private key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateKeyPassphrase")]
        public SecretBase PrivateKeyPassphrase {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.AccountIdentifier == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AccountIdentifier");
            }
            if (this.Database == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Database");
            }
            if (this.Warehouse == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Warehouse");
            }













        }
    }
}