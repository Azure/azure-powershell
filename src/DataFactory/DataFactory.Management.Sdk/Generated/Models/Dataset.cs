// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// The Azure Data Factory nested object which identifies data within different
    /// data stores, such as tables, files, folders, and documents.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Dataset")]
    public partial class Dataset
    {
        /// <summary>
        /// Initializes a new instance of the Dataset class.
        /// </summary>
        public Dataset()
        {
            this.LinkedServiceName = new LinkedServiceReference();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Dataset class.
        /// </summary>

        /// <param name="additionalProperties">The Azure Data Factory nested object which identifies data within different
        /// data stores, such as tables, files, folders, and documents.
        /// </param>

        /// <param name="description">Dataset description.
        /// </param>

        /// <param name="structure">Columns that define the structure of the dataset. Type: array (or
        /// Expression with resultType array), itemType: DatasetDataElement.
        /// </param>

        /// <param name="schema">Columns that define the physical type schema of the dataset. Type: array
        /// (or Expression with resultType array), itemType: DatasetSchemaDataElement.
        /// </param>

        /// <param name="linkedServiceName">Linked service reference.
        /// </param>

        /// <param name="parameters">Parameters for dataset.
        /// </param>

        /// <param name="annotations">List of tags that can be used for describing the Dataset.
        /// </param>

        /// <param name="folder">The folder that this Dataset is in. If not specified, Dataset will appear
        /// at the root level.
        /// </param>
        public Dataset(LinkedServiceReference linkedServiceName, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string description = default(string), object structure = default(object), object schema = default(object), System.Collections.Generic.IDictionary<string, ParameterSpecification> parameters = default(System.Collections.Generic.IDictionary<string, ParameterSpecification>), System.Collections.Generic.IList<object> annotations = default(System.Collections.Generic.IList<object>), DatasetFolder folder = default(DatasetFolder))

        {
            this.AdditionalProperties = additionalProperties;
            this.Description = description;
            this.Structure = structure;
            this.Schema = schema;
            this.LinkedServiceName = linkedServiceName;
            this.Parameters = parameters;
            this.Annotations = annotations;
            this.Folder = folder;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the Azure Data Factory nested object which identifies data
        /// within different data stores, such as tables, files, folders, and
        /// documents.
        /// </summary>
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {get; set; }

        /// <summary>
        /// Gets or sets dataset description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets columns that define the structure of the dataset. Type: array
        /// (or Expression with resultType array), itemType: DatasetDataElement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "structure")]
        public object Structure {get; set; }

        /// <summary>
        /// Gets or sets columns that define the physical type schema of the dataset.
        /// Type: array (or Expression with resultType array), itemType:
        /// DatasetSchemaDataElement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "schema")]
        public object Schema {get; set; }

        /// <summary>
        /// Gets or sets linked service reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "linkedServiceName")]
        public LinkedServiceReference LinkedServiceName {get; set; }

        /// <summary>
        /// Gets or sets parameters for dataset.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "parameters")]
        public System.Collections.Generic.IDictionary<string, ParameterSpecification> Parameters {get; set; }

        /// <summary>
        /// Gets or sets list of tags that can be used for describing the Dataset.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annotations")]
        public System.Collections.Generic.IList<object> Annotations {get; set; }

        /// <summary>
        /// Gets or sets the folder that this Dataset is in. If not specified, Dataset
        /// will appear at the root level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "folder")]
        public DatasetFolder Folder {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.LinkedServiceName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "LinkedServiceName");
            }




            if (this.LinkedServiceName != null)
            {
                this.LinkedServiceName.Validate();
            }
            if (this.Parameters != null)
            {
                foreach (var valueElement in this.Parameters.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }


        }
    }
}