// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Self-hosted integration runtime status type properties.
    /// </summary>
    public partial class SelfHostedIntegrationRuntimeStatusTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the SelfHostedIntegrationRuntimeStatusTypeProperties class.
        /// </summary>
        public SelfHostedIntegrationRuntimeStatusTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SelfHostedIntegrationRuntimeStatusTypeProperties class.
        /// </summary>

        /// <param name="createTime">The time at which the integration runtime was created, in ISO8601 format.
        /// </param>

        /// <param name="taskQueueId">The task queue id of the integration runtime.
        /// </param>

        /// <param name="internalChannelEncryption">It is used to set the encryption mode for node-node communication channel
        /// (when more than 2 self-hosted integration runtime nodes exist).
        /// Possible values include: &#39;NotSet&#39;, &#39;SslEncrypted&#39;, &#39;NotEncrypted&#39;</param>

        /// <param name="version">Version of the integration runtime.
        /// </param>

        /// <param name="nodes">The list of nodes for this integration runtime.
        /// </param>

        /// <param name="scheduledUpdateDate">The date at which the integration runtime will be scheduled to update, in
        /// ISO8601 format.
        /// </param>

        /// <param name="updateDelayOffset">The time in the date scheduled by service to update the integration
        /// runtime, e.g., PT03H is 3 hours
        /// </param>

        /// <param name="localTimeZoneOffset">The local time zone offset in hours.
        /// </param>

        /// <param name="capabilities">Object with additional information about integration runtime capabilities.
        /// </param>

        /// <param name="serviceUrls">The URLs for the services used in integration runtime backend service.
        /// </param>

        /// <param name="autoUpdate">Whether Self-hosted integration runtime auto update has been turned on.
        /// Possible values include: &#39;On&#39;, &#39;Off&#39;</param>

        /// <param name="versionStatus">Status of the integration runtime version.
        /// </param>

        /// <param name="links">The list of linked integration runtimes that are created to share with this
        /// integration runtime.
        /// </param>

        /// <param name="pushedVersion">The version that the integration runtime is going to update to.
        /// </param>

        /// <param name="latestVersion">The latest version on download center.
        /// </param>

        /// <param name="autoUpdateEta">The estimated time when the self-hosted integration runtime will be
        /// updated.
        /// </param>

        /// <param name="selfContainedInteractiveAuthoringEnabled">An alternative option to ensure interactive authoring function when your
        /// self-hosted integration runtime is unable to establish a connection with
        /// Azure Relay.
        /// </param>
        public SelfHostedIntegrationRuntimeStatusTypeProperties(System.DateTime? createTime = default(System.DateTime?), string taskQueueId = default(string), string internalChannelEncryption = default(string), string version = default(string), System.Collections.Generic.IList<SelfHostedIntegrationRuntimeNode> nodes = default(System.Collections.Generic.IList<SelfHostedIntegrationRuntimeNode>), System.DateTime? scheduledUpdateDate = default(System.DateTime?), string updateDelayOffset = default(string), string localTimeZoneOffset = default(string), System.Collections.Generic.IDictionary<string, string> capabilities = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IList<string> serviceUrls = default(System.Collections.Generic.IList<string>), string autoUpdate = default(string), string versionStatus = default(string), System.Collections.Generic.IList<LinkedIntegrationRuntime> links = default(System.Collections.Generic.IList<LinkedIntegrationRuntime>), string pushedVersion = default(string), string latestVersion = default(string), System.DateTime? autoUpdateEta = default(System.DateTime?), bool? selfContainedInteractiveAuthoringEnabled = default(bool?))

        {
            this.CreateTime = createTime;
            this.TaskQueueId = taskQueueId;
            this.InternalChannelEncryption = internalChannelEncryption;
            this.Version = version;
            this.Nodes = nodes;
            this.ScheduledUpdateDate = scheduledUpdateDate;
            this.UpdateDelayOffset = updateDelayOffset;
            this.LocalTimeZoneOffset = localTimeZoneOffset;
            this.Capabilities = capabilities;
            this.ServiceUrls = serviceUrls;
            this.AutoUpdate = autoUpdate;
            this.VersionStatus = versionStatus;
            this.Links = links;
            this.PushedVersion = pushedVersion;
            this.LatestVersion = latestVersion;
            this.AutoUpdateEta = autoUpdateEta;
            this.SelfContainedInteractiveAuthoringEnabled = selfContainedInteractiveAuthoringEnabled;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the time at which the integration runtime was created, in ISO8601
        /// format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "createTime")]
        public System.DateTime? CreateTime {get; private set; }

        /// <summary>
        /// Gets the task queue id of the integration runtime.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taskQueueId")]
        public string TaskQueueId {get; private set; }

        /// <summary>
        /// Gets it is used to set the encryption mode for node-node communication
        /// channel (when more than 2 self-hosted integration runtime nodes exist). Possible values include: &#39;NotSet&#39;, &#39;SslEncrypted&#39;, &#39;NotEncrypted&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "internalChannelEncryption")]
        public string InternalChannelEncryption {get; private set; }

        /// <summary>
        /// Gets version of the integration runtime.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "version")]
        public string Version {get; private set; }

        /// <summary>
        /// Gets or sets the list of nodes for this integration runtime.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nodes")]
        public System.Collections.Generic.IList<SelfHostedIntegrationRuntimeNode> Nodes {get; set; }

        /// <summary>
        /// Gets the date at which the integration runtime will be scheduled to update,
        /// in ISO8601 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "scheduledUpdateDate")]
        public System.DateTime? ScheduledUpdateDate {get; private set; }

        /// <summary>
        /// Gets the time in the date scheduled by service to update the integration
        /// runtime, e.g., PT03H is 3 hours
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "updateDelayOffset")]
        public string UpdateDelayOffset {get; private set; }

        /// <summary>
        /// Gets the local time zone offset in hours.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "localTimeZoneOffset")]
        public string LocalTimeZoneOffset {get; private set; }

        /// <summary>
        /// Gets object with additional information about integration runtime
        /// capabilities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "capabilities")]
        public System.Collections.Generic.IDictionary<string, string> Capabilities {get; private set; }

        /// <summary>
        /// Gets the URLs for the services used in integration runtime backend service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceUrls")]
        public System.Collections.Generic.IList<string> ServiceUrls {get; private set; }

        /// <summary>
        /// Gets whether Self-hosted integration runtime auto update has been turned
        /// on. Possible values include: &#39;On&#39;, &#39;Off&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoUpdate")]
        public string AutoUpdate {get; private set; }

        /// <summary>
        /// Gets status of the integration runtime version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "versionStatus")]
        public string VersionStatus {get; private set; }

        /// <summary>
        /// Gets or sets the list of linked integration runtimes that are created to
        /// share with this integration runtime.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "links")]
        public System.Collections.Generic.IList<LinkedIntegrationRuntime> Links {get; set; }

        /// <summary>
        /// Gets the version that the integration runtime is going to update to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "pushedVersion")]
        public string PushedVersion {get; private set; }

        /// <summary>
        /// Gets the latest version on download center.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "latestVersion")]
        public string LatestVersion {get; private set; }

        /// <summary>
        /// Gets the estimated time when the self-hosted integration runtime will be
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoUpdateETA")]
        public System.DateTime? AutoUpdateEta {get; private set; }

        /// <summary>
        /// Gets an alternative option to ensure interactive authoring function when
        /// your self-hosted integration runtime is unable to establish a connection
        /// with Azure Relay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "selfContainedInteractiveAuthoringEnabled")]
        public bool? SelfContainedInteractiveAuthoringEnabled {get; private set; }
    }
}