// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Columns that define the physical type schema of the dataset.
    /// </summary>
    public partial class DatasetSchemaDataElement
    {
        /// <summary>
        /// Initializes a new instance of the DatasetSchemaDataElement class.
        /// </summary>
        public DatasetSchemaDataElement()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatasetSchemaDataElement class.
        /// </summary>

        /// <param name="additionalProperties">Columns that define the physical type schema of the dataset.
        /// </param>

        /// <param name="name">Name of the schema column. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="type">Type of the schema column. Type: string (or Expression with resultType
        /// string).
        /// </param>
        public DatasetSchemaDataElement(System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), object name = default(object), object type = default(object))

        {
            this.AdditionalProperties = additionalProperties;
            this.Name = name;
            this.Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets columns that define the physical type schema of the dataset.
        /// </summary>
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {get; set; }

        /// <summary>
        /// Gets or sets name of the schema column. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public object Name {get; set; }

        /// <summary>
        /// Gets or sets type of the schema column. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public object Type {get; set; }
    }
}