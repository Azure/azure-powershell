// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Copy activity properties.
    /// </summary>
    public partial class CopyActivityTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the CopyActivityTypeProperties class.
        /// </summary>
        public CopyActivityTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CopyActivityTypeProperties class.
        /// </summary>

        /// <param name="source">Copy activity source.
        /// </param>

        /// <param name="sink">Copy activity sink.
        /// </param>

        /// <param name="translator">Copy activity translator. If not specified, tabular translator is used.
        /// </param>

        /// <param name="enableStaging">Specifies whether to copy data via an interim staging. Default value is
        /// false. Type: boolean (or Expression with resultType boolean).
        /// </param>

        /// <param name="stagingSettings">Specifies interim staging settings when EnableStaging is true.
        /// </param>

        /// <param name="parallelCopies">Maximum number of concurrent sessions opened on the source or sink to avoid
        /// overloading the data store. Type: integer (or Expression with resultType
        /// integer), minimum: 0.
        /// </param>

        /// <param name="dataIntegrationUnits">Maximum number of data integration units that can be used to perform this
        /// data movement. Type: integer (or Expression with resultType integer),
        /// minimum: 0.
        /// </param>

        /// <param name="enableSkipIncompatibleRow">Whether to skip incompatible row. Default value is false. Type: boolean (or
        /// Expression with resultType boolean).
        /// </param>

        /// <param name="redirectIncompatibleRowSettings">Redirect incompatible row settings when EnableSkipIncompatibleRow is true.
        /// </param>

        /// <param name="logStorageSettings">(Deprecated. Please use LogSettings) Log storage settings customer need to
        /// provide when enabling session log.
        /// </param>

        /// <param name="logSettings">Log settings customer needs provide when enabling log.
        /// </param>

        /// <param name="preserveRules">Preserve Rules.
        /// </param>

        /// <param name="preserve">Preserve rules.
        /// </param>

        /// <param name="validateDataConsistency">Whether to enable Data Consistency validation. Type: boolean (or Expression
        /// with resultType boolean).
        /// </param>

        /// <param name="skipErrorFile">Specify the fault tolerance for data consistency.
        /// </param>
        public CopyActivityTypeProperties(CopySource source, CopySink sink, object translator = default(object), object enableStaging = default(object), StagingSettings stagingSettings = default(StagingSettings), object parallelCopies = default(object), object dataIntegrationUnits = default(object), object enableSkipIncompatibleRow = default(object), RedirectIncompatibleRowSettings redirectIncompatibleRowSettings = default(RedirectIncompatibleRowSettings), LogStorageSettings logStorageSettings = default(LogStorageSettings), LogSettings logSettings = default(LogSettings), System.Collections.Generic.IList<object> preserveRules = default(System.Collections.Generic.IList<object>), System.Collections.Generic.IList<object> preserve = default(System.Collections.Generic.IList<object>), object validateDataConsistency = default(object), SkipErrorFile skipErrorFile = default(SkipErrorFile))

        {
            this.Source = source;
            this.Sink = sink;
            this.Translator = translator;
            this.EnableStaging = enableStaging;
            this.StagingSettings = stagingSettings;
            this.ParallelCopies = parallelCopies;
            this.DataIntegrationUnits = dataIntegrationUnits;
            this.EnableSkipIncompatibleRow = enableSkipIncompatibleRow;
            this.RedirectIncompatibleRowSettings = redirectIncompatibleRowSettings;
            this.LogStorageSettings = logStorageSettings;
            this.LogSettings = logSettings;
            this.PreserveRules = preserveRules;
            this.Preserve = preserve;
            this.ValidateDataConsistency = validateDataConsistency;
            this.SkipErrorFile = skipErrorFile;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets copy activity source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "source")]
        public CopySource Source {get; set; }

        /// <summary>
        /// Gets or sets copy activity sink.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sink")]
        public CopySink Sink {get; set; }

        /// <summary>
        /// Gets or sets copy activity translator. If not specified, tabular translator
        /// is used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "translator")]
        public object Translator {get; set; }

        /// <summary>
        /// Gets or sets specifies whether to copy data via an interim staging. Default
        /// value is false. Type: boolean (or Expression with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableStaging")]
        public object EnableStaging {get; set; }

        /// <summary>
        /// Gets or sets specifies interim staging settings when EnableStaging is true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "stagingSettings")]
        public StagingSettings StagingSettings {get; set; }

        /// <summary>
        /// Gets or sets maximum number of concurrent sessions opened on the source or
        /// sink to avoid overloading the data store. Type: integer (or Expression with
        /// resultType integer), minimum: 0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "parallelCopies")]
        public object ParallelCopies {get; set; }

        /// <summary>
        /// Gets or sets maximum number of data integration units that can be used to
        /// perform this data movement. Type: integer (or Expression with resultType
        /// integer), minimum: 0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataIntegrationUnits")]
        public object DataIntegrationUnits {get; set; }

        /// <summary>
        /// Gets or sets whether to skip incompatible row. Default value is false.
        /// Type: boolean (or Expression with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableSkipIncompatibleRow")]
        public object EnableSkipIncompatibleRow {get; set; }

        /// <summary>
        /// Gets or sets redirect incompatible row settings when
        /// EnableSkipIncompatibleRow is true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "redirectIncompatibleRowSettings")]
        public RedirectIncompatibleRowSettings RedirectIncompatibleRowSettings {get; set; }

        /// <summary>
        /// Gets or sets (Deprecated. Please use LogSettings) Log storage settings
        /// customer need to provide when enabling session log.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "logStorageSettings")]
        public LogStorageSettings LogStorageSettings {get; set; }

        /// <summary>
        /// Gets or sets log settings customer needs provide when enabling log.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "logSettings")]
        public LogSettings LogSettings {get; set; }

        /// <summary>
        /// Gets or sets preserve Rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "preserveRules")]
        public System.Collections.Generic.IList<object> PreserveRules {get; set; }

        /// <summary>
        /// Gets or sets preserve rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "preserve")]
        public System.Collections.Generic.IList<object> Preserve {get; set; }

        /// <summary>
        /// Gets or sets whether to enable Data Consistency validation. Type: boolean
        /// (or Expression with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "validateDataConsistency")]
        public object ValidateDataConsistency {get; set; }

        /// <summary>
        /// Gets or sets specify the fault tolerance for data consistency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "skipErrorFile")]
        public SkipErrorFile SkipErrorFile {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Source == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Source");
            }
            if (this.Sink == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Sink");
            }




            if (this.StagingSettings != null)
            {
                this.StagingSettings.Validate();
            }



            if (this.RedirectIncompatibleRowSettings != null)
            {
                this.RedirectIncompatibleRowSettings.Validate();
            }
            if (this.LogStorageSettings != null)
            {
                this.LogStorageSettings.Validate();
            }
            if (this.LogSettings != null)
            {
                this.LogSettings.Validate();
            }




        }
    }
}