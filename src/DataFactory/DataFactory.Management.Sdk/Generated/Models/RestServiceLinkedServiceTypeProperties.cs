// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Rest Service linked service properties.
    /// </summary>
    public partial class RestServiceLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the RestServiceLinkedServiceTypeProperties class.
        /// </summary>
        public RestServiceLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RestServiceLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="url">The base URL of the REST service. Type: string (or Expression with
        /// resultType string).
        /// </param>

        /// <param name="enableServerCertificateValidation">Whether to validate server side SSL certificate when connecting to the
        /// endpoint.The default value is true. Type: boolean (or Expression with
        /// resultType boolean).
        /// </param>

        /// <param name="authenticationType">Type of authentication used to connect to the REST service.
        /// Possible values include: &#39;Anonymous&#39;, &#39;Basic&#39;, &#39;AadServicePrincipal&#39;,
        /// &#39;ManagedServiceIdentity&#39;, &#39;OAuth2ClientCredential&#39;</param>

        /// <param name="userName">The user name used in Basic authentication type. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="password">The password used in Basic authentication type.
        /// </param>

        /// <param name="authHeaders">The additional HTTP headers in the request to RESTful API used for
        /// authorization. Type: object (or Expression with resultType object).
        /// </param>

        /// <param name="servicePrincipalId">The application&#39;s client ID used in AadServicePrincipal authentication
        /// type. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="servicePrincipalKey">The application&#39;s key used in AadServicePrincipal authentication type.
        /// </param>

        /// <param name="tenant">The tenant information (domain name or tenant ID) used in
        /// AadServicePrincipal authentication type under which your application
        /// resides. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="azureCloudType">Indicates the azure cloud type of the service principle auth. Allowed
        /// values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany.
        /// Default value is the data factory regions’ cloud type. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="aadResourceId">The resource you are requesting authorization to use. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>

        /// <param name="credential">The credential reference containing authentication information.
        /// </param>

        /// <param name="clientId">The client ID associated with your application. Type: string (or Expression
        /// with resultType string).
        /// </param>

        /// <param name="clientSecret">The client secret associated with your application.
        /// </param>

        /// <param name="tokenEndpoint">The token endpoint of the authorization server to acquire access token.
        /// Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="resource">The target service or resource to which the access will be requested. Type:
        /// string (or Expression with resultType string).
        /// </param>

        /// <param name="scope">The scope of the access required. It describes what kind of access will be
        /// requested. Type: string (or Expression with resultType string).
        /// </param>
        public RestServiceLinkedServiceTypeProperties(object url, string authenticationType, object enableServerCertificateValidation = default(object), object userName = default(object), SecretBase password = default(SecretBase), object authHeaders = default(object), object servicePrincipalId = default(object), SecretBase servicePrincipalKey = default(SecretBase), object tenant = default(object), object azureCloudType = default(object), object aadResourceId = default(object), string encryptedCredential = default(string), CredentialReference credential = default(CredentialReference), object clientId = default(object), SecretBase clientSecret = default(SecretBase), object tokenEndpoint = default(object), object resource = default(object), object scope = default(object))

        {
            this.Url = url;
            this.EnableServerCertificateValidation = enableServerCertificateValidation;
            this.AuthenticationType = authenticationType;
            this.UserName = userName;
            this.Password = password;
            this.AuthHeaders = authHeaders;
            this.ServicePrincipalId = servicePrincipalId;
            this.ServicePrincipalKey = servicePrincipalKey;
            this.Tenant = tenant;
            this.AzureCloudType = azureCloudType;
            this.AadResourceId = aadResourceId;
            this.EncryptedCredential = encryptedCredential;
            this.Credential = credential;
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            this.TokenEndpoint = tokenEndpoint;
            this.Resource = resource;
            this.Scope = scope;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the base URL of the REST service. Type: string (or Expression
        /// with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "url")]
        public object Url {get; set; }

        /// <summary>
        /// Gets or sets whether to validate server side SSL certificate when
        /// connecting to the endpoint.The default value is true. Type: boolean (or
        /// Expression with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableServerCertificateValidation")]
        public object EnableServerCertificateValidation {get; set; }

        /// <summary>
        /// Gets or sets type of authentication used to connect to the REST service. Possible values include: &#39;Anonymous&#39;, &#39;Basic&#39;, &#39;AadServicePrincipal&#39;, &#39;ManagedServiceIdentity&#39;, &#39;OAuth2ClientCredential&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authenticationType")]
        public string AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets the user name used in Basic authentication type. Type: string
        /// (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userName")]
        public object UserName {get; set; }

        /// <summary>
        /// Gets or sets the password used in Basic authentication type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public SecretBase Password {get; set; }

        /// <summary>
        /// Gets or sets the additional HTTP headers in the request to RESTful API used
        /// for authorization. Type: object (or Expression with resultType object).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authHeaders")]
        public object AuthHeaders {get; set; }

        /// <summary>
        /// Gets or sets the application&#39;s client ID used in AadServicePrincipal
        /// authentication type. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalId")]
        public object ServicePrincipalId {get; set; }

        /// <summary>
        /// Gets or sets the application&#39;s key used in AadServicePrincipal
        /// authentication type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalKey")]
        public SecretBase ServicePrincipalKey {get; set; }

        /// <summary>
        /// Gets or sets the tenant information (domain name or tenant ID) used in
        /// AadServicePrincipal authentication type under which your application
        /// resides. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tenant")]
        public object Tenant {get; set; }

        /// <summary>
        /// Gets or sets indicates the azure cloud type of the service principle auth.
        /// Allowed values are AzurePublic, AzureChina, AzureUsGovernment,
        /// AzureGermany. Default value is the data factory regions’ cloud type. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azureCloudType")]
        public object AzureCloudType {get; set; }

        /// <summary>
        /// Gets or sets the resource you are requesting authorization to use. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "aadResourceId")]
        public object AadResourceId {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }

        /// <summary>
        /// Gets or sets the credential reference containing authentication
        /// information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "credential")]
        public CredentialReference Credential {get; set; }

        /// <summary>
        /// Gets or sets the client ID associated with your application. Type: string
        /// (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientId")]
        public object ClientId {get; set; }

        /// <summary>
        /// Gets or sets the client secret associated with your application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientSecret")]
        public SecretBase ClientSecret {get; set; }

        /// <summary>
        /// Gets or sets the token endpoint of the authorization server to acquire
        /// access token. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tokenEndpoint")]
        public object TokenEndpoint {get; set; }

        /// <summary>
        /// Gets or sets the target service or resource to which the access will be
        /// requested. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resource")]
        public object Resource {get; set; }

        /// <summary>
        /// Gets or sets the scope of the access required. It describes what kind of
        /// access will be requested. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "scope")]
        public object Scope {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Url == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Url");
            }
            if (this.AuthenticationType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AuthenticationType");
            }












            if (this.Credential != null)
            {
                this.Credential.Validate();
            }





        }
    }
}