// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Execute data flow activity properties.
    /// </summary>
    public partial class ExecuteDataFlowActivityTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the ExecuteDataFlowActivityTypeProperties class.
        /// </summary>
        public ExecuteDataFlowActivityTypeProperties()
        {
            this.DataFlow = new DataFlowReference();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExecuteDataFlowActivityTypeProperties class.
        /// </summary>

        /// <param name="dataFlow">Data flow reference.
        /// </param>

        /// <param name="staging">Staging info for execute data flow activity.
        /// </param>

        /// <param name="integrationRuntime">The integration runtime reference.
        /// </param>

        /// <param name="compute">Compute properties for data flow activity.
        /// </param>

        /// <param name="traceLevel">Trace level setting used for data flow monitoring output. Supported values
        /// are: &#39;coarse&#39;, &#39;fine&#39;, and &#39;none&#39;. Type: string (or Expression with
        /// resultType string)
        /// </param>

        /// <param name="continueOnError">Continue on error setting used for data flow execution. Enables processing
        /// to continue if a sink fails. Type: boolean (or Expression with resultType
        /// boolean)
        /// </param>

        /// <param name="runConcurrently">Concurrent run setting used for data flow execution. Allows sinks with the
        /// same save order to be processed concurrently. Type: boolean (or Expression
        /// with resultType boolean)
        /// </param>

        /// <param name="sourceStagingConcurrency">Specify number of parallel staging for sources applicable to the sink.
        /// Type: integer (or Expression with resultType integer)
        /// </param>
        public ExecuteDataFlowActivityTypeProperties(DataFlowReference dataFlow, DataFlowStagingInfo staging = default(DataFlowStagingInfo), IntegrationRuntimeReference integrationRuntime = default(IntegrationRuntimeReference), ExecuteDataFlowActivityTypePropertiesCompute compute = default(ExecuteDataFlowActivityTypePropertiesCompute), object traceLevel = default(object), object continueOnError = default(object), object runConcurrently = default(object), object sourceStagingConcurrency = default(object))

        {
            this.DataFlow = dataFlow;
            this.Staging = staging;
            this.IntegrationRuntime = integrationRuntime;
            this.Compute = compute;
            this.TraceLevel = traceLevel;
            this.ContinueOnError = continueOnError;
            this.RunConcurrently = runConcurrently;
            this.SourceStagingConcurrency = sourceStagingConcurrency;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets data flow reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataFlow")]
        public DataFlowReference DataFlow {get; set; }

        /// <summary>
        /// Gets or sets staging info for execute data flow activity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "staging")]
        public DataFlowStagingInfo Staging {get; set; }

        /// <summary>
        /// Gets or sets the integration runtime reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "integrationRuntime")]
        public IntegrationRuntimeReference IntegrationRuntime {get; set; }

        /// <summary>
        /// Gets or sets compute properties for data flow activity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "compute")]
        public ExecuteDataFlowActivityTypePropertiesCompute Compute {get; set; }

        /// <summary>
        /// Gets or sets trace level setting used for data flow monitoring output.
        /// Supported values are: &#39;coarse&#39;, &#39;fine&#39;, and &#39;none&#39;. Type: string (or
        /// Expression with resultType string)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "traceLevel")]
        public object TraceLevel {get; set; }

        /// <summary>
        /// Gets or sets continue on error setting used for data flow execution.
        /// Enables processing to continue if a sink fails. Type: boolean (or
        /// Expression with resultType boolean)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "continueOnError")]
        public object ContinueOnError {get; set; }

        /// <summary>
        /// Gets or sets concurrent run setting used for data flow execution. Allows
        /// sinks with the same save order to be processed concurrently. Type: boolean
        /// (or Expression with resultType boolean)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runConcurrently")]
        public object RunConcurrently {get; set; }

        /// <summary>
        /// Gets or sets specify number of parallel staging for sources applicable to
        /// the sink. Type: integer (or Expression with resultType integer)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceStagingConcurrency")]
        public object SourceStagingConcurrency {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DataFlow == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DataFlow");
            }
            if (this.DataFlow != null)
            {
                this.DataFlow.Validate();
            }
            if (this.Staging != null)
            {
                this.Staging.Validate();
            }
            if (this.IntegrationRuntime != null)
            {
                this.IntegrationRuntime.Validate();
            }





        }
    }
}