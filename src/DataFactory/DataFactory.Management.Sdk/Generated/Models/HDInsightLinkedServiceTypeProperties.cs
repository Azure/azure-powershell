// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// HDInsight linked service properties.
    /// </summary>
    public partial class HDInsightLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the HDInsightLinkedServiceTypeProperties class.
        /// </summary>
        public HDInsightLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HDInsightLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="clusterUri">HDInsight cluster URI. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="userName">HDInsight cluster user name. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="password">HDInsight cluster password.
        /// </param>

        /// <param name="linkedServiceName">The Azure Storage linked service reference.
        /// </param>

        /// <param name="hcatalogLinkedServiceName">A reference to the Azure SQL linked service that points to the HCatalog
        /// database.
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>

        /// <param name="isEspEnabled">Specify if the HDInsight is created with ESP (Enterprise Security Package).
        /// Type: Boolean.
        /// </param>

        /// <param name="fileSystem">Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2.
        /// Type: string (or Expression with resultType string).
        /// </param>
        public HDInsightLinkedServiceTypeProperties(object clusterUri, object userName = default(object), SecretBase password = default(SecretBase), LinkedServiceReference linkedServiceName = default(LinkedServiceReference), LinkedServiceReference hcatalogLinkedServiceName = default(LinkedServiceReference), string encryptedCredential = default(string), object isEspEnabled = default(object), object fileSystem = default(object))

        {
            this.ClusterUri = clusterUri;
            this.UserName = userName;
            this.Password = password;
            this.LinkedServiceName = linkedServiceName;
            this.HcatalogLinkedServiceName = hcatalogLinkedServiceName;
            this.EncryptedCredential = encryptedCredential;
            this.IsEspEnabled = isEspEnabled;
            this.FileSystem = fileSystem;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets hDInsight cluster URI. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clusterUri")]
        public object ClusterUri {get; set; }

        /// <summary>
        /// Gets or sets hDInsight cluster user name. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userName")]
        public object UserName {get; set; }

        /// <summary>
        /// Gets or sets hDInsight cluster password.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public SecretBase Password {get; set; }

        /// <summary>
        /// Gets or sets the Azure Storage linked service reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "linkedServiceName")]
        public LinkedServiceReference LinkedServiceName {get; set; }

        /// <summary>
        /// Gets or sets a reference to the Azure SQL linked service that points to the
        /// HCatalog database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hcatalogLinkedServiceName")]
        public LinkedServiceReference HcatalogLinkedServiceName {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }

        /// <summary>
        /// Gets or sets specify if the HDInsight is created with ESP (Enterprise
        /// Security Package). Type: Boolean.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isEspEnabled")]
        public object IsEspEnabled {get; set; }

        /// <summary>
        /// Gets or sets specify the FileSystem if the main storage for the HDInsight
        /// is ADLS Gen2. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileSystem")]
        public object FileSystem {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ClusterUri == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ClusterUri");
            }



            if (this.LinkedServiceName != null)
            {
                this.LinkedServiceName.Validate();
            }
            if (this.HcatalogLinkedServiceName != null)
            {
                this.HcatalogLinkedServiceName.Validate();
            }



        }
    }
}