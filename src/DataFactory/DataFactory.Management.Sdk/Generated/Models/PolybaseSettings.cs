// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// PolyBase settings.
    /// </summary>
    public partial class PolybaseSettings
    {
        /// <summary>
        /// Initializes a new instance of the PolybaseSettings class.
        /// </summary>
        public PolybaseSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PolybaseSettings class.
        /// </summary>

        /// <param name="additionalProperties">PolyBase settings.
        /// </param>

        /// <param name="rejectType">Reject type.
        /// Possible values include: &#39;value&#39;, &#39;percentage&#39;</param>

        /// <param name="rejectValue">Specifies the value or the percentage of rows that can be rejected before
        /// the query fails. Type: number (or Expression with resultType number),
        /// minimum: 0.
        /// </param>

        /// <param name="rejectSampleValue">Determines the number of rows to attempt to retrieve before the PolyBase
        /// recalculates the percentage of rejected rows. Type: integer (or Expression
        /// with resultType integer), minimum: 0.
        /// </param>

        /// <param name="useTypeDefault">Specifies how to handle missing values in delimited text files when
        /// PolyBase retrieves data from the text file. Type: boolean (or Expression
        /// with resultType boolean).
        /// </param>
        public PolybaseSettings(System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string rejectType = default(string), object rejectValue = default(object), object rejectSampleValue = default(object), object useTypeDefault = default(object))

        {
            this.AdditionalProperties = additionalProperties;
            this.RejectType = rejectType;
            this.RejectValue = rejectValue;
            this.RejectSampleValue = rejectSampleValue;
            this.UseTypeDefault = useTypeDefault;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets polyBase settings.
        /// </summary>
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {get; set; }

        /// <summary>
        /// Gets or sets reject type. Possible values include: &#39;value&#39;, &#39;percentage&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rejectType")]
        public string RejectType {get; set; }

        /// <summary>
        /// Gets or sets specifies the value or the percentage of rows that can be
        /// rejected before the query fails. Type: number (or Expression with
        /// resultType number), minimum: 0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rejectValue")]
        public object RejectValue {get; set; }

        /// <summary>
        /// Gets or sets determines the number of rows to attempt to retrieve before
        /// the PolyBase recalculates the percentage of rejected rows. Type: integer
        /// (or Expression with resultType integer), minimum: 0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rejectSampleValue")]
        public object RejectSampleValue {get; set; }

        /// <summary>
        /// Gets or sets specifies how to handle missing values in delimited text files
        /// when PolyBase retrieves data from the text file. Type: boolean (or
        /// Expression with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "useTypeDefault")]
        public object UseTypeDefault {get; set; }
    }
}