// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// SSIS package location properties.
    /// </summary>
    public partial class SsisPackageLocationTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the SsisPackageLocationTypeProperties class.
        /// </summary>
        public SsisPackageLocationTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SsisPackageLocationTypeProperties class.
        /// </summary>

        /// <param name="packagePassword">Password of the package.
        /// </param>

        /// <param name="accessCredential">The package access credential.
        /// </param>

        /// <param name="configurationPath">The configuration file of the package execution. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="configurationAccessCredential">The configuration file access credential.
        /// </param>

        /// <param name="packageName">The package name.
        /// </param>

        /// <param name="packageContent">The embedded package content. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="packageLastModifiedDate">The embedded package last modified date.
        /// </param>

        /// <param name="childPackages">The embedded child package list.
        /// </param>
        public SsisPackageLocationTypeProperties(SecretBase packagePassword = default(SecretBase), SsisAccessCredential accessCredential = default(SsisAccessCredential), object configurationPath = default(object), SsisAccessCredential configurationAccessCredential = default(SsisAccessCredential), string packageName = default(string), object packageContent = default(object), string packageLastModifiedDate = default(string), System.Collections.Generic.IList<SsisChildPackage> childPackages = default(System.Collections.Generic.IList<SsisChildPackage>))

        {
            this.PackagePassword = packagePassword;
            this.AccessCredential = accessCredential;
            this.ConfigurationPath = configurationPath;
            this.ConfigurationAccessCredential = configurationAccessCredential;
            this.PackageName = packageName;
            this.PackageContent = packageContent;
            this.PackageLastModifiedDate = packageLastModifiedDate;
            this.ChildPackages = childPackages;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets password of the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "packagePassword")]
        public SecretBase PackagePassword {get; set; }

        /// <summary>
        /// Gets or sets the package access credential.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accessCredential")]
        public SsisAccessCredential AccessCredential {get; set; }

        /// <summary>
        /// Gets or sets the configuration file of the package execution. Type: string
        /// (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "configurationPath")]
        public object ConfigurationPath {get; set; }

        /// <summary>
        /// Gets or sets the configuration file access credential.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "configurationAccessCredential")]
        public SsisAccessCredential ConfigurationAccessCredential {get; set; }

        /// <summary>
        /// Gets or sets the package name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "packageName")]
        public string PackageName {get; set; }

        /// <summary>
        /// Gets or sets the embedded package content. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "packageContent")]
        public object PackageContent {get; set; }

        /// <summary>
        /// Gets or sets the embedded package last modified date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "packageLastModifiedDate")]
        public string PackageLastModifiedDate {get; set; }

        /// <summary>
        /// Gets or sets the embedded child package list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "childPackages")]
        public System.Collections.Generic.IList<SsisChildPackage> ChildPackages {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.AccessCredential != null)
            {
                this.AccessCredential.Validate();
            }

            if (this.ConfigurationAccessCredential != null)
            {
                this.ConfigurationAccessCredential.Validate();
            }



            if (this.ChildPackages != null)
            {
                foreach (var element in this.ChildPackages)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}