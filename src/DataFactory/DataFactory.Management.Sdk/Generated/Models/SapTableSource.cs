// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// A copy activity source for SAP Table source.
    /// </summary>
    [Newtonsoft.Json.JsonObject("SapTableSource")]
    public partial class SapTableSource : TabularSource
    {
        /// <summary>
        /// Initializes a new instance of the SapTableSource class.
        /// </summary>
        public SapTableSource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SapTableSource class.
        /// </summary>

        /// <param name="sourceRetryCount">Source retry count. Type: integer (or Expression with resultType integer).
        /// </param>

        /// <param name="sourceRetryWait">Source retry wait. Type: string (or Expression with resultType string),
        /// pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// </param>

        /// <param name="maxConcurrentConnections">The maximum concurrent connection count for the source data store. Type:
        /// integer (or Expression with resultType integer).
        /// </param>

        /// <param name="disableMetricsCollection">If true, disable data store metrics collection. Default is false. Type:
        /// boolean (or Expression with resultType boolean).
        /// </param>

        /// <param name="queryTimeout">Query timeout. Type: string (or Expression with resultType string),
        /// pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// </param>

        /// <param name="additionalColumns">Specifies the additional columns to be added to source data. Type: array of
        /// objects(AdditionalColumns) (or Expression with resultType array of
        /// objects).
        /// </param>

        /// <param name="rowCount">The number of rows to be retrieved. Type: integer(or Expression with
        /// resultType integer).
        /// </param>

        /// <param name="rowSkips">The number of rows that will be skipped. Type: integer (or Expression with
        /// resultType integer).
        /// </param>

        /// <param name="rfcTableFields">The fields of the SAP table that will be retrieved. For example, column0,
        /// column1. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="rfcTableOptions">The options for the filtering of the SAP Table. For example, COLUMN0 EQ
        /// SOME VALUE. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="batchSize">Specifies the maximum number of rows that will be retrieved at a time when
        /// retrieving data from SAP Table. Type: integer (or Expression with
        /// resultType integer).
        /// </param>

        /// <param name="customRfcReadTableFunctionModule">Specifies the custom RFC function module that will be used to read data
        /// from SAP Table. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="sapDataColumnDelimiter">The single character that will be used as delimiter passed to SAP RFC as
        /// well as splitting the output data retrieved. Type: string (or Expression
        /// with resultType string).
        /// </param>

        /// <param name="partitionOption">The partition mechanism that will be used for SAP table read in parallel.
        /// Possible values include: &#34;None&#34;, &#34;PartitionOnInt&#34;,
        /// &#34;PartitionOnCalendarYear&#34;, &#34;PartitionOnCalendarMonth&#34;,
        /// &#34;PartitionOnCalendarDate&#34;, &#34;PartitionOnTime&#34;.
        /// </param>

        /// <param name="partitionSettings">The settings that will be leveraged for SAP table source partitioning.
        /// </param>
        public SapTableSource(object sourceRetryCount = default(object), object sourceRetryWait = default(object), object maxConcurrentConnections = default(object), object disableMetricsCollection = default(object), object queryTimeout = default(object), object additionalColumns = default(object), object rowCount = default(object), object rowSkips = default(object), object rfcTableFields = default(object), object rfcTableOptions = default(object), object batchSize = default(object), object customRfcReadTableFunctionModule = default(object), object sapDataColumnDelimiter = default(object), object partitionOption = default(object), SapTablePartitionSettings partitionSettings = default(SapTablePartitionSettings))

        : base(sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, queryTimeout, additionalColumns)
        {
            this.RowCount = rowCount;
            this.RowSkips = rowSkips;
            this.RfcTableFields = rfcTableFields;
            this.RfcTableOptions = rfcTableOptions;
            this.BatchSize = batchSize;
            this.CustomRfcReadTableFunctionModule = customRfcReadTableFunctionModule;
            this.SapDataColumnDelimiter = sapDataColumnDelimiter;
            this.PartitionOption = partitionOption;
            this.PartitionSettings = partitionSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the number of rows to be retrieved. Type: integer(or
        /// Expression with resultType integer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rowCount")]
        public object RowCount {get; set; }

        /// <summary>
        /// Gets or sets the number of rows that will be skipped. Type: integer (or
        /// Expression with resultType integer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rowSkips")]
        public object RowSkips {get; set; }

        /// <summary>
        /// Gets or sets the fields of the SAP table that will be retrieved. For
        /// example, column0, column1. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rfcTableFields")]
        public object RfcTableFields {get; set; }

        /// <summary>
        /// Gets or sets the options for the filtering of the SAP Table. For example,
        /// COLUMN0 EQ SOME VALUE. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rfcTableOptions")]
        public object RfcTableOptions {get; set; }

        /// <summary>
        /// Gets or sets specifies the maximum number of rows that will be retrieved at
        /// a time when retrieving data from SAP Table. Type: integer (or Expression
        /// with resultType integer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "batchSize")]
        public object BatchSize {get; set; }

        /// <summary>
        /// Gets or sets specifies the custom RFC function module that will be used to
        /// read data from SAP Table. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customRfcReadTableFunctionModule")]
        public object CustomRfcReadTableFunctionModule {get; set; }

        /// <summary>
        /// Gets or sets the single character that will be used as delimiter passed to
        /// SAP RFC as well as splitting the output data retrieved. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sapDataColumnDelimiter")]
        public object SapDataColumnDelimiter {get; set; }

        /// <summary>
        /// Gets or sets the partition mechanism that will be used for SAP table read
        /// in parallel. Possible values include: &#34;None&#34;, &#34;PartitionOnInt&#34;,
        /// &#34;PartitionOnCalendarYear&#34;, &#34;PartitionOnCalendarMonth&#34;,
        /// &#34;PartitionOnCalendarDate&#34;, &#34;PartitionOnTime&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "partitionOption")]
        public object PartitionOption {get; set; }

        /// <summary>
        /// Gets or sets the settings that will be leveraged for SAP table source
        /// partitioning.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "partitionSettings")]
        public SapTablePartitionSettings PartitionSettings {get; set; }
    }
}