// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Azure ML Studio Web Service linked service properties.
    /// </summary>
    public partial class AzureMLLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the AzureMLLinkedServiceTypeProperties class.
        /// </summary>
        public AzureMLLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureMLLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="mlEndpoint">The Batch Execution REST URL for an Azure ML Studio Web Service endpoint.
        /// Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="apiKey">The API key for accessing the Azure ML model endpoint.
        /// </param>

        /// <param name="updateResourceEndpoint">The Update Resource REST URL for an Azure ML Studio Web Service endpoint.
        /// Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="servicePrincipalId">The ID of the service principal used to authenticate against the ARM-based
        /// updateResourceEndpoint of an Azure ML Studio web service. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="servicePrincipalKey">The key of the service principal used to authenticate against the ARM-based
        /// updateResourceEndpoint of an Azure ML Studio web service.
        /// </param>

        /// <param name="tenant">The name or ID of the tenant to which the service principal belongs. Type:
        /// string (or Expression with resultType string).
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>

        /// <param name="authentication">Type of authentication (Required to specify MSI) used to connect to
        /// AzureML. Type: string (or Expression with resultType string).
        /// </param>
        public AzureMLLinkedServiceTypeProperties(object mlEndpoint, SecretBase apiKey, object updateResourceEndpoint = default(object), object servicePrincipalId = default(object), SecretBase servicePrincipalKey = default(SecretBase), object tenant = default(object), string encryptedCredential = default(string), object authentication = default(object))

        {
            this.MlEndpoint = mlEndpoint;
            this.ApiKey = apiKey;
            this.UpdateResourceEndpoint = updateResourceEndpoint;
            this.ServicePrincipalId = servicePrincipalId;
            this.ServicePrincipalKey = servicePrincipalKey;
            this.Tenant = tenant;
            this.EncryptedCredential = encryptedCredential;
            this.Authentication = authentication;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the Batch Execution REST URL for an Azure ML Studio Web
        /// Service endpoint. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mlEndpoint")]
        public object MlEndpoint {get; set; }

        /// <summary>
        /// Gets or sets the API key for accessing the Azure ML model endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "apiKey")]
        public SecretBase ApiKey {get; set; }

        /// <summary>
        /// Gets or sets the Update Resource REST URL for an Azure ML Studio Web
        /// Service endpoint. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "updateResourceEndpoint")]
        public object UpdateResourceEndpoint {get; set; }

        /// <summary>
        /// Gets or sets the ID of the service principal used to authenticate against
        /// the ARM-based updateResourceEndpoint of an Azure ML Studio web service.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalId")]
        public object ServicePrincipalId {get; set; }

        /// <summary>
        /// Gets or sets the key of the service principal used to authenticate against
        /// the ARM-based updateResourceEndpoint of an Azure ML Studio web service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalKey")]
        public SecretBase ServicePrincipalKey {get; set; }

        /// <summary>
        /// Gets or sets the name or ID of the tenant to which the service principal
        /// belongs. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tenant")]
        public object Tenant {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }

        /// <summary>
        /// Gets or sets type of authentication (Required to specify MSI) used to
        /// connect to AzureML. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authentication")]
        public object Authentication {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.MlEndpoint == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MlEndpoint");
            }
            if (this.ApiKey == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ApiKey");
            }








        }
    }
}