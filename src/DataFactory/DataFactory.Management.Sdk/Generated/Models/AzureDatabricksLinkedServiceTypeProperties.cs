// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Azure Databricks linked service properties.
    /// </summary>
    public partial class AzureDatabricksLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the AzureDatabricksLinkedServiceTypeProperties class.
        /// </summary>
        public AzureDatabricksLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureDatabricksLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="domain">&lt;REGION&gt;.azuredatabricks.net, domain name of your Databricks deployment.
        /// Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="accessToken">Access token for databricks REST API. Refer to
        /// https://docs.azuredatabricks.net/api/latest/authentication.html. Type:
        /// string (or Expression with resultType string).
        /// </param>

        /// <param name="authentication">Required to specify MSI, if using Workspace resource id for databricks REST
        /// API. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="workspaceResourceId">Workspace resource id for databricks REST API. Type: string (or Expression
        /// with resultType string).
        /// </param>

        /// <param name="existingClusterId">The id of an existing interactive cluster that will be used for all runs of
        /// this activity. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="instancePoolId">The id of an existing instance pool that will be used for all runs of this
        /// activity. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="newClusterVersion">If not using an existing interactive cluster, this specifies the Spark
        /// version of a new job cluster or instance pool nodes created for each run of
        /// this activity. Required if instancePoolId is specified. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="newClusterNumOfWorker">If not using an existing interactive cluster, this specifies the number of
        /// worker nodes to use for the new job cluster or instance pool. For new job
        /// clusters, this a string-formatted Int32, like &#39;1&#39; means numOfWorker is 1 or
        /// &#39;1:10&#39; means auto-scale from 1 (min) to 10 (max). For instance pools, this
        /// is a string-formatted Int32, and can only specify a fixed number of worker
        /// nodes, such as &#39;2&#39;. Required if newClusterVersion is specified. Type:
        /// string (or Expression with resultType string).
        /// </param>

        /// <param name="newClusterNodeType">The node type of the new job cluster. This property is required if
        /// newClusterVersion is specified and instancePoolId is not specified. If
        /// instancePoolId is specified, this property is ignored. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="newClusterSparkConf">A set of optional, user-specified Spark configuration key-value pairs.
        /// </param>

        /// <param name="newClusterSparkEnvVars">A set of optional, user-specified Spark environment variables key-value
        /// pairs.
        /// </param>

        /// <param name="newClusterCustomTags">Additional tags for cluster resources. This property is ignored in instance
        /// pool configurations.
        /// </param>

        /// <param name="newClusterLogDestination">Specify a location to deliver Spark driver, worker, and event logs. Type:
        /// string (or Expression with resultType string).
        /// </param>

        /// <param name="newClusterDriverNodeType">The driver node type for the new job cluster. This property is ignored in
        /// instance pool configurations. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="newClusterInitScripts">User-defined initialization scripts for the new cluster. Type: array of
        /// strings (or Expression with resultType array of strings).
        /// </param>

        /// <param name="newClusterEnableElasticDisk">Enable the elastic disk on the new cluster. This property is now ignored,
        /// and takes the default elastic disk behavior in Databricks (elastic disks
        /// are always enabled). Type: boolean (or Expression with resultType boolean).
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>

        /// <param name="policyId">The policy id for limiting the ability to configure clusters based on a
        /// user defined set of rules. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="credential">The credential reference containing authentication information.
        /// </param>
        public AzureDatabricksLinkedServiceTypeProperties(object domain, SecretBase accessToken = default(SecretBase), object authentication = default(object), object workspaceResourceId = default(object), object existingClusterId = default(object), object instancePoolId = default(object), object newClusterVersion = default(object), object newClusterNumOfWorker = default(object), object newClusterNodeType = default(object), System.Collections.Generic.IDictionary<string, object> newClusterSparkConf = default(System.Collections.Generic.IDictionary<string, object>), System.Collections.Generic.IDictionary<string, object> newClusterSparkEnvVars = default(System.Collections.Generic.IDictionary<string, object>), System.Collections.Generic.IDictionary<string, object> newClusterCustomTags = default(System.Collections.Generic.IDictionary<string, object>), object newClusterLogDestination = default(object), object newClusterDriverNodeType = default(object), object newClusterInitScripts = default(object), object newClusterEnableElasticDisk = default(object), string encryptedCredential = default(string), object policyId = default(object), CredentialReference credential = default(CredentialReference))

        {
            this.Domain = domain;
            this.AccessToken = accessToken;
            this.Authentication = authentication;
            this.WorkspaceResourceId = workspaceResourceId;
            this.ExistingClusterId = existingClusterId;
            this.InstancePoolId = instancePoolId;
            this.NewClusterVersion = newClusterVersion;
            this.NewClusterNumOfWorker = newClusterNumOfWorker;
            this.NewClusterNodeType = newClusterNodeType;
            this.NewClusterSparkConf = newClusterSparkConf;
            this.NewClusterSparkEnvVars = newClusterSparkEnvVars;
            this.NewClusterCustomTags = newClusterCustomTags;
            this.NewClusterLogDestination = newClusterLogDestination;
            this.NewClusterDriverNodeType = newClusterDriverNodeType;
            this.NewClusterInitScripts = newClusterInitScripts;
            this.NewClusterEnableElasticDisk = newClusterEnableElasticDisk;
            this.EncryptedCredential = encryptedCredential;
            this.PolicyId = policyId;
            this.Credential = credential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets &lt;REGION&gt;.azuredatabricks.net, domain name of your Databricks
        /// deployment. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "domain")]
        public object Domain {get; set; }

        /// <summary>
        /// Gets or sets access token for databricks REST API. Refer to
        /// https://docs.azuredatabricks.net/api/latest/authentication.html. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accessToken")]
        public SecretBase AccessToken {get; set; }

        /// <summary>
        /// Gets or sets required to specify MSI, if using Workspace resource id for
        /// databricks REST API. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authentication")]
        public object Authentication {get; set; }

        /// <summary>
        /// Gets or sets workspace resource id for databricks REST API. Type: string
        /// (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "workspaceResourceId")]
        public object WorkspaceResourceId {get; set; }

        /// <summary>
        /// Gets or sets the id of an existing interactive cluster that will be used
        /// for all runs of this activity. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "existingClusterId")]
        public object ExistingClusterId {get; set; }

        /// <summary>
        /// Gets or sets the id of an existing instance pool that will be used for all
        /// runs of this activity. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "instancePoolId")]
        public object InstancePoolId {get; set; }

        /// <summary>
        /// Gets or sets if not using an existing interactive cluster, this specifies
        /// the Spark version of a new job cluster or instance pool nodes created for
        /// each run of this activity. Required if instancePoolId is specified. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "newClusterVersion")]
        public object NewClusterVersion {get; set; }

        /// <summary>
        /// Gets or sets if not using an existing interactive cluster, this specifies
        /// the number of worker nodes to use for the new job cluster or instance pool.
        /// For new job clusters, this a string-formatted Int32, like &#39;1&#39; means
        /// numOfWorker is 1 or &#39;1:10&#39; means auto-scale from 1 (min) to 10 (max). For
        /// instance pools, this is a string-formatted Int32, and can only specify a
        /// fixed number of worker nodes, such as &#39;2&#39;. Required if newClusterVersion is
        /// specified. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "newClusterNumOfWorker")]
        public object NewClusterNumOfWorker {get; set; }

        /// <summary>
        /// Gets or sets the node type of the new job cluster. This property is
        /// required if newClusterVersion is specified and instancePoolId is not
        /// specified. If instancePoolId is specified, this property is ignored. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "newClusterNodeType")]
        public object NewClusterNodeType {get; set; }

        /// <summary>
        /// Gets or sets a set of optional, user-specified Spark configuration
        /// key-value pairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "newClusterSparkConf")]
        public System.Collections.Generic.IDictionary<string, object> NewClusterSparkConf {get; set; }

        /// <summary>
        /// Gets or sets a set of optional, user-specified Spark environment variables
        /// key-value pairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "newClusterSparkEnvVars")]
        public System.Collections.Generic.IDictionary<string, object> NewClusterSparkEnvVars {get; set; }

        /// <summary>
        /// Gets or sets additional tags for cluster resources. This property is
        /// ignored in instance pool configurations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "newClusterCustomTags")]
        public System.Collections.Generic.IDictionary<string, object> NewClusterCustomTags {get; set; }

        /// <summary>
        /// Gets or sets specify a location to deliver Spark driver, worker, and event
        /// logs. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "newClusterLogDestination")]
        public object NewClusterLogDestination {get; set; }

        /// <summary>
        /// Gets or sets the driver node type for the new job cluster. This property is
        /// ignored in instance pool configurations. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "newClusterDriverNodeType")]
        public object NewClusterDriverNodeType {get; set; }

        /// <summary>
        /// Gets or sets user-defined initialization scripts for the new cluster. Type:
        /// array of strings (or Expression with resultType array of strings).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "newClusterInitScripts")]
        public object NewClusterInitScripts {get; set; }

        /// <summary>
        /// Gets or sets enable the elastic disk on the new cluster. This property is
        /// now ignored, and takes the default elastic disk behavior in Databricks
        /// (elastic disks are always enabled). Type: boolean (or Expression with
        /// resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "newClusterEnableElasticDisk")]
        public object NewClusterEnableElasticDisk {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }

        /// <summary>
        /// Gets or sets the policy id for limiting the ability to configure clusters
        /// based on a user defined set of rules. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyId")]
        public object PolicyId {get; set; }

        /// <summary>
        /// Gets or sets the credential reference containing authentication
        /// information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "credential")]
        public CredentialReference Credential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Domain == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Domain");
            }


















            if (this.Credential != null)
            {
                this.Credential.Validate();
            }
        }
    }
}