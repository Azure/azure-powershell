// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Databricks Notebook activity properties.
    /// </summary>
    public partial class DatabricksNotebookActivityTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the DatabricksNotebookActivityTypeProperties class.
        /// </summary>
        public DatabricksNotebookActivityTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatabricksNotebookActivityTypeProperties class.
        /// </summary>

        /// <param name="notebookPath">The absolute path of the notebook to be run in the Databricks Workspace.
        /// This path must begin with a slash. Type: string (or Expression with
        /// resultType string).
        /// </param>

        /// <param name="baseParameters">Base parameters to be used for each run of this job.If the notebook takes a
        /// parameter that is not specified, the default value from the notebook will
        /// be used.
        /// </param>

        /// <param name="libraries">A list of libraries to be installed on the cluster that will execute the
        /// job.
        /// </param>
        public DatabricksNotebookActivityTypeProperties(object notebookPath, System.Collections.Generic.IDictionary<string, object> baseParameters = default(System.Collections.Generic.IDictionary<string, object>), System.Collections.Generic.IList<System.Collections.Generic.IDictionary<string, object>> libraries = default(System.Collections.Generic.IList<System.Collections.Generic.IDictionary<string, object>>))

        {
            this.NotebookPath = notebookPath;
            this.BaseParameters = baseParameters;
            this.Libraries = libraries;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the absolute path of the notebook to be run in the Databricks
        /// Workspace. This path must begin with a slash. Type: string (or Expression
        /// with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "notebookPath")]
        public object NotebookPath {get; set; }

        /// <summary>
        /// Gets or sets base parameters to be used for each run of this job.If the
        /// notebook takes a parameter that is not specified, the default value from
        /// the notebook will be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "baseParameters")]
        public System.Collections.Generic.IDictionary<string, object> BaseParameters {get; set; }

        /// <summary>
        /// Gets or sets a list of libraries to be installed on the cluster that will
        /// execute the job.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "libraries")]
        public System.Collections.Generic.IList<System.Collections.Generic.IDictionary<string, object>> Libraries {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.NotebookPath == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "NotebookPath");
            }



        }
    }
}