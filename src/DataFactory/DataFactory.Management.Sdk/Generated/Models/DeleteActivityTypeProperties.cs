// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Delete activity properties.
    /// </summary>
    public partial class DeleteActivityTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the DeleteActivityTypeProperties class.
        /// </summary>
        public DeleteActivityTypeProperties()
        {
            this.Dataset = new DatasetReference();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeleteActivityTypeProperties class.
        /// </summary>

        /// <param name="recursive">If true, files or sub-folders under current folder path will be deleted
        /// recursively. Default is false. Type: boolean (or Expression with resultType
        /// boolean).
        /// </param>

        /// <param name="maxConcurrentConnections">The max concurrent connections to connect data source at the same time.
        /// </param>

        /// <param name="enableLogging">Whether to record detailed logs of delete-activity execution. Default value
        /// is false. Type: boolean (or Expression with resultType boolean).
        /// </param>

        /// <param name="logStorageSettings">Log storage settings customer need to provide when enableLogging is true.
        /// </param>

        /// <param name="dataset">Delete activity dataset reference.
        /// </param>

        /// <param name="storeSettings">Delete activity store settings.
        /// </param>
        public DeleteActivityTypeProperties(DatasetReference dataset, object recursive = default(object), int? maxConcurrentConnections = default(int?), object enableLogging = default(object), LogStorageSettings logStorageSettings = default(LogStorageSettings), StoreReadSettings storeSettings = default(StoreReadSettings))

        {
            this.Recursive = recursive;
            this.MaxConcurrentConnections = maxConcurrentConnections;
            this.EnableLogging = enableLogging;
            this.LogStorageSettings = logStorageSettings;
            this.Dataset = dataset;
            this.StoreSettings = storeSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets if true, files or sub-folders under current folder path will
        /// be deleted recursively. Default is false. Type: boolean (or Expression with
        /// resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recursive")]
        public object Recursive {get; set; }

        /// <summary>
        /// Gets or sets the max concurrent connections to connect data source at the
        /// same time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxConcurrentConnections")]
        public int? MaxConcurrentConnections {get; set; }

        /// <summary>
        /// Gets or sets whether to record detailed logs of delete-activity execution.
        /// Default value is false. Type: boolean (or Expression with resultType
        /// boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableLogging")]
        public object EnableLogging {get; set; }

        /// <summary>
        /// Gets or sets log storage settings customer need to provide when
        /// enableLogging is true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "logStorageSettings")]
        public LogStorageSettings LogStorageSettings {get; set; }

        /// <summary>
        /// Gets or sets delete activity dataset reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataset")]
        public DatasetReference Dataset {get; set; }

        /// <summary>
        /// Gets or sets delete activity store settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storeSettings")]
        public StoreReadSettings StoreSettings {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Dataset == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Dataset");
            }

            if (this.MaxConcurrentConnections != null)
            {
                if (this.MaxConcurrentConnections < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MaxConcurrentConnections", 1);
                }
            }

            if (this.LogStorageSettings != null)
            {
                this.LogStorageSettings.Validate();
            }
            if (this.Dataset != null)
            {
                this.Dataset.Validate();
            }

        }
    }
}