// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Azure SQL Managed Instance linked service properties.
    /// </summary>
    public partial class AzureSqlMILinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the AzureSqlMILinkedServiceTypeProperties class.
        /// </summary>
        public AzureSqlMILinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureSqlMILinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="connectionString">The connection string. Type: string, SecureString or
        /// AzureKeyVaultSecretReference.
        /// </param>

        /// <param name="password">The Azure key vault secret reference of password in connection string.
        /// </param>

        /// <param name="servicePrincipalId">The ID of the service principal used to authenticate against Azure SQL
        /// Managed Instance. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="servicePrincipalKey">The key of the service principal used to authenticate against Azure SQL
        /// Managed Instance.
        /// </param>

        /// <param name="tenant">The name or ID of the tenant to which the service principal belongs. Type:
        /// string (or Expression with resultType string).
        /// </param>

        /// <param name="azureCloudType">Indicates the azure cloud type of the service principle auth. Allowed
        /// values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany.
        /// Default value is the data factory regions’ cloud type. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>

        /// <param name="alwaysEncryptedSettings">Sql always encrypted properties.
        /// </param>

        /// <param name="credential">The credential reference containing authentication information.
        /// </param>
        public AzureSqlMILinkedServiceTypeProperties(object connectionString, AzureKeyVaultSecretReference password = default(AzureKeyVaultSecretReference), object servicePrincipalId = default(object), SecretBase servicePrincipalKey = default(SecretBase), object tenant = default(object), object azureCloudType = default(object), string encryptedCredential = default(string), SqlAlwaysEncryptedProperties alwaysEncryptedSettings = default(SqlAlwaysEncryptedProperties), CredentialReference credential = default(CredentialReference))

        {
            this.ConnectionString = connectionString;
            this.Password = password;
            this.ServicePrincipalId = servicePrincipalId;
            this.ServicePrincipalKey = servicePrincipalKey;
            this.Tenant = tenant;
            this.AzureCloudType = azureCloudType;
            this.EncryptedCredential = encryptedCredential;
            this.AlwaysEncryptedSettings = alwaysEncryptedSettings;
            this.Credential = credential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the connection string. Type: string, SecureString or
        /// AzureKeyVaultSecretReference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionString")]
        public object ConnectionString {get; set; }

        /// <summary>
        /// Gets or sets the Azure key vault secret reference of password in connection
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public AzureKeyVaultSecretReference Password {get; set; }

        /// <summary>
        /// Gets or sets the ID of the service principal used to authenticate against
        /// Azure SQL Managed Instance. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalId")]
        public object ServicePrincipalId {get; set; }

        /// <summary>
        /// Gets or sets the key of the service principal used to authenticate against
        /// Azure SQL Managed Instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalKey")]
        public SecretBase ServicePrincipalKey {get; set; }

        /// <summary>
        /// Gets or sets the name or ID of the tenant to which the service principal
        /// belongs. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tenant")]
        public object Tenant {get; set; }

        /// <summary>
        /// Gets or sets indicates the azure cloud type of the service principle auth.
        /// Allowed values are AzurePublic, AzureChina, AzureUsGovernment,
        /// AzureGermany. Default value is the data factory regions’ cloud type. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azureCloudType")]
        public object AzureCloudType {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }

        /// <summary>
        /// Gets or sets sql always encrypted properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "alwaysEncryptedSettings")]
        public SqlAlwaysEncryptedProperties AlwaysEncryptedSettings {get; set; }

        /// <summary>
        /// Gets or sets the credential reference containing authentication
        /// information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "credential")]
        public CredentialReference Credential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ConnectionString == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ConnectionString");
            }

            if (this.Password != null)
            {
                this.Password.Validate();
            }





            if (this.AlwaysEncryptedSettings != null)
            {
                this.AlwaysEncryptedSettings.Validate();
            }
            if (this.Credential != null)
            {
                this.Credential.Validate();
            }
        }
    }
}