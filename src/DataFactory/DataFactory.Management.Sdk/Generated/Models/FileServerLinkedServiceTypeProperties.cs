// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// File system linked service properties.
    /// </summary>
    public partial class FileServerLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the FileServerLinkedServiceTypeProperties class.
        /// </summary>
        public FileServerLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FileServerLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="host">Host name of the server. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="userId">User ID to logon the server. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="password">Password to logon the server.
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>
        public FileServerLinkedServiceTypeProperties(object host, object userId = default(object), SecretBase password = default(SecretBase), string encryptedCredential = default(string))

        {
            this.Host = host;
            this.UserId = userId;
            this.Password = password;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets host name of the server. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "host")]
        public object Host {get; set; }

        /// <summary>
        /// Gets or sets user ID to logon the server. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userId")]
        public object UserId {get; set; }

        /// <summary>
        /// Gets or sets password to logon the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public SecretBase Password {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Host == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Host");
            }




        }
    }
}