// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Databricks SparkPython activity properties.
    /// </summary>
    public partial class DatabricksSparkPythonActivityTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the DatabricksSparkPythonActivityTypeProperties class.
        /// </summary>
        public DatabricksSparkPythonActivityTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatabricksSparkPythonActivityTypeProperties class.
        /// </summary>

        /// <param name="pythonFile">The URI of the Python file to be executed. DBFS paths are supported. Type:
        /// string (or Expression with resultType string).
        /// </param>

        /// <param name="parameters">Command line parameters that will be passed to the Python file.
        /// </param>

        /// <param name="libraries">A list of libraries to be installed on the cluster that will execute the
        /// job.
        /// </param>
        public DatabricksSparkPythonActivityTypeProperties(object pythonFile, System.Collections.Generic.IList<object> parameters = default(System.Collections.Generic.IList<object>), System.Collections.Generic.IList<System.Collections.Generic.IDictionary<string, object>> libraries = default(System.Collections.Generic.IList<System.Collections.Generic.IDictionary<string, object>>))

        {
            this.PythonFile = pythonFile;
            this.Parameters = parameters;
            this.Libraries = libraries;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the URI of the Python file to be executed. DBFS paths are
        /// supported. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "pythonFile")]
        public object PythonFile {get; set; }

        /// <summary>
        /// Gets or sets command line parameters that will be passed to the Python
        /// file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "parameters")]
        public System.Collections.Generic.IList<object> Parameters {get; set; }

        /// <summary>
        /// Gets or sets a list of libraries to be installed on the cluster that will
        /// execute the job.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "libraries")]
        public System.Collections.Generic.IList<System.Collections.Generic.IDictionary<string, object>> Libraries {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.PythonFile == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "PythonFile");
            }



        }
    }
}