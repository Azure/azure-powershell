// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Azure Key Vault linked service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AzureKeyVault")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class AzureKeyVaultLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the AzureKeyVaultLinkedService class.
        /// </summary>
        public AzureKeyVaultLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureKeyVaultLinkedService class.
        /// </summary>

        /// <param name="additionalProperties">The nested object which contains the information and credential which can
        /// be used to connect with related store or compute resource.
        /// </param>

        /// <param name="connectVia">The integration runtime reference.
        /// </param>

        /// <param name="description">Linked service description.
        /// </param>

        /// <param name="parameters">Parameters for linked service.
        /// </param>

        /// <param name="annotations">List of tags that can be used for describing the linked service.
        /// </param>

        /// <param name="baseUrl">The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net
        /// Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="credential">The credential reference containing authentication information.
        /// </param>
        public AzureKeyVaultLinkedService(object baseUrl, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), System.Collections.Generic.IDictionary<string, ParameterSpecification> parameters = default(System.Collections.Generic.IDictionary<string, ParameterSpecification>), System.Collections.Generic.IList<object> annotations = default(System.Collections.Generic.IList<object>), CredentialReference credential = default(CredentialReference))

        : base(additionalProperties, connectVia, description, parameters, annotations)
        {
            this.BaseUrl = baseUrl;
            this.Credential = credential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the base URL of the Azure Key Vault. e.g.
        /// https://myakv.vault.azure.net Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.baseUrl")]
        public object BaseUrl {get; set; }

        /// <summary>
        /// Gets or sets the credential reference containing authentication
        /// information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.credential")]
        public CredentialReference Credential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.BaseUrl == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "BaseUrl");
            }

            if (this.Credential != null)
            {
                this.Credential.Validate();
            }
        }
    }
}