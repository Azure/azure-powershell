// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Responsys linked service properties.
    /// </summary>
    public partial class ResponsysLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the ResponsysLinkedServiceTypeProperties class.
        /// </summary>
        public ResponsysLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResponsysLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="endpoint">The endpoint of the Responsys server.
        /// </param>

        /// <param name="clientId">The client ID associated with the Responsys application. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="clientSecret">The client secret associated with the Responsys application. Type: string
        /// (or Expression with resultType string).
        /// </param>

        /// <param name="useEncryptedEndpoints">Specifies whether the data source endpoints are encrypted using HTTPS. The
        /// default value is true. Type: boolean (or Expression with resultType
        /// boolean).
        /// </param>

        /// <param name="useHostVerification">Specifies whether to require the host name in the server&#39;s certificate to
        /// match the host name of the server when connecting over SSL. The default
        /// value is true. Type: boolean (or Expression with resultType boolean).
        /// </param>

        /// <param name="usePeerVerification">Specifies whether to verify the identity of the server when connecting over
        /// SSL. The default value is true. Type: boolean (or Expression with
        /// resultType boolean).
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>
        public ResponsysLinkedServiceTypeProperties(object endpoint, object clientId, SecretBase clientSecret = default(SecretBase), object useEncryptedEndpoints = default(object), object useHostVerification = default(object), object usePeerVerification = default(object), string encryptedCredential = default(string))

        {
            this.Endpoint = endpoint;
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            this.UseEncryptedEndpoints = useEncryptedEndpoints;
            this.UseHostVerification = useHostVerification;
            this.UsePeerVerification = usePeerVerification;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the endpoint of the Responsys server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endpoint")]
        public object Endpoint {get; set; }

        /// <summary>
        /// Gets or sets the client ID associated with the Responsys application. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientId")]
        public object ClientId {get; set; }

        /// <summary>
        /// Gets or sets the client secret associated with the Responsys application.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientSecret")]
        public SecretBase ClientSecret {get; set; }

        /// <summary>
        /// Gets or sets specifies whether the data source endpoints are encrypted
        /// using HTTPS. The default value is true. Type: boolean (or Expression with
        /// resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "useEncryptedEndpoints")]
        public object UseEncryptedEndpoints {get; set; }

        /// <summary>
        /// Gets or sets specifies whether to require the host name in the server&#39;s
        /// certificate to match the host name of the server when connecting over SSL.
        /// The default value is true. Type: boolean (or Expression with resultType
        /// boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "useHostVerification")]
        public object UseHostVerification {get; set; }

        /// <summary>
        /// Gets or sets specifies whether to verify the identity of the server when
        /// connecting over SSL. The default value is true. Type: boolean (or
        /// Expression with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "usePeerVerification")]
        public object UsePeerVerification {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Endpoint == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Endpoint");
            }
            if (this.ClientId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ClientId");
            }







        }
    }
}