// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Trigger runs.
    /// </summary>
    public partial class TriggerRun
    {
        /// <summary>
        /// Initializes a new instance of the TriggerRun class.
        /// </summary>
        public TriggerRun()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TriggerRun class.
        /// </summary>

        /// <param name="additionalProperties">Trigger runs.
        /// </param>

        /// <param name="triggerRunId">Trigger run id.
        /// </param>

        /// <param name="triggerName">Trigger name.
        /// </param>

        /// <param name="triggerType">Trigger type.
        /// </param>

        /// <param name="triggerRunTimestamp">Trigger run start time.
        /// </param>

        /// <param name="status">Trigger run status.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Inprogress&#39;</param>

        /// <param name="message">Trigger error message.
        /// </param>

        /// <param name="properties">List of property name and value related to trigger run. Name, value pair
        /// depends on type of trigger.
        /// </param>

        /// <param name="triggeredPipelines">List of pipeline name and run Id triggered by the trigger run.
        /// </param>

        /// <param name="runDimension">Run dimension for which trigger was fired.
        /// </param>

        /// <param name="dependencyStatus">Status of the upstream pipelines.
        /// </param>
        public TriggerRun(System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string triggerRunId = default(string), string triggerName = default(string), string triggerType = default(string), System.DateTime? triggerRunTimestamp = default(System.DateTime?), string status = default(string), string message = default(string), System.Collections.Generic.IDictionary<string, string> properties = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> triggeredPipelines = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> runDimension = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, object> dependencyStatus = default(System.Collections.Generic.IDictionary<string, object>))

        {
            this.AdditionalProperties = additionalProperties;
            this.TriggerRunId = triggerRunId;
            this.TriggerName = triggerName;
            this.TriggerType = triggerType;
            this.TriggerRunTimestamp = triggerRunTimestamp;
            this.Status = status;
            this.Message = message;
            this.Properties = properties;
            this.TriggeredPipelines = triggeredPipelines;
            this.RunDimension = runDimension;
            this.DependencyStatus = dependencyStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets trigger runs.
        /// </summary>
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {get; set; }

        /// <summary>
        /// Gets trigger run id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "triggerRunId")]
        public string TriggerRunId {get; private set; }

        /// <summary>
        /// Gets trigger name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "triggerName")]
        public string TriggerName {get; private set; }

        /// <summary>
        /// Gets trigger type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "triggerType")]
        public string TriggerType {get; private set; }

        /// <summary>
        /// Gets trigger run start time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "triggerRunTimestamp")]
        public System.DateTime? TriggerRunTimestamp {get; private set; }

        /// <summary>
        /// Gets trigger run status. Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Inprogress&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; private set; }

        /// <summary>
        /// Gets trigger error message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "message")]
        public string Message {get; private set; }

        /// <summary>
        /// Gets list of property name and value related to trigger run. Name, value
        /// pair depends on type of trigger.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties")]
        public System.Collections.Generic.IDictionary<string, string> Properties {get; private set; }

        /// <summary>
        /// Gets list of pipeline name and run Id triggered by the trigger run.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "triggeredPipelines")]
        public System.Collections.Generic.IDictionary<string, string> TriggeredPipelines {get; private set; }

        /// <summary>
        /// Gets run dimension for which trigger was fired.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runDimension")]
        public System.Collections.Generic.IDictionary<string, string> RunDimension {get; private set; }

        /// <summary>
        /// Gets status of the upstream pipelines.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dependencyStatus")]
        public System.Collections.Generic.IDictionary<string, object> DependencyStatus {get; private set; }
    }
}