// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Request body structure for starting data flow debug session.
    /// </summary>
    public partial class DataFlowDebugPackage
    {
        /// <summary>
        /// Initializes a new instance of the DataFlowDebugPackage class.
        /// </summary>
        public DataFlowDebugPackage()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataFlowDebugPackage class.
        /// </summary>

        /// <param name="additionalProperties">Request body structure for starting data flow debug session.
        /// </param>

        /// <param name="sessionId">The ID of data flow debug session.
        /// </param>

        /// <param name="dataFlow">Data flow instance.
        /// </param>

        /// <param name="dataFlows">List of Data flows
        /// </param>

        /// <param name="datasets">List of datasets.
        /// </param>

        /// <param name="linkedServices">List of linked services.
        /// </param>

        /// <param name="staging">Staging info for debug session.
        /// </param>

        /// <param name="debugSettings">Data flow debug settings.
        /// </param>
        public DataFlowDebugPackage(System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string sessionId = default(string), DataFlowDebugResource dataFlow = default(DataFlowDebugResource), System.Collections.Generic.IList<DataFlowDebugResource> dataFlows = default(System.Collections.Generic.IList<DataFlowDebugResource>), System.Collections.Generic.IList<DatasetDebugResource> datasets = default(System.Collections.Generic.IList<DatasetDebugResource>), System.Collections.Generic.IList<LinkedServiceDebugResource> linkedServices = default(System.Collections.Generic.IList<LinkedServiceDebugResource>), DataFlowStagingInfo staging = default(DataFlowStagingInfo), DataFlowDebugPackageDebugSettings debugSettings = default(DataFlowDebugPackageDebugSettings))

        {
            this.AdditionalProperties = additionalProperties;
            this.SessionId = sessionId;
            this.DataFlow = dataFlow;
            this.DataFlows = dataFlows;
            this.Datasets = datasets;
            this.LinkedServices = linkedServices;
            this.Staging = staging;
            this.DebugSettings = debugSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets request body structure for starting data flow debug session.
        /// </summary>
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {get; set; }

        /// <summary>
        /// Gets or sets the ID of data flow debug session.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sessionId")]
        public string SessionId {get; set; }

        /// <summary>
        /// Gets or sets data flow instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataFlow")]
        public DataFlowDebugResource DataFlow {get; set; }

        /// <summary>
        /// Gets or sets list of Data flows
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataFlows")]
        public System.Collections.Generic.IList<DataFlowDebugResource> DataFlows {get; set; }

        /// <summary>
        /// Gets or sets list of datasets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "datasets")]
        public System.Collections.Generic.IList<DatasetDebugResource> Datasets {get; set; }

        /// <summary>
        /// Gets or sets list of linked services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "linkedServices")]
        public System.Collections.Generic.IList<LinkedServiceDebugResource> LinkedServices {get; set; }

        /// <summary>
        /// Gets or sets staging info for debug session.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "staging")]
        public DataFlowStagingInfo Staging {get; set; }

        /// <summary>
        /// Gets or sets data flow debug settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "debugSettings")]
        public DataFlowDebugPackageDebugSettings DebugSettings {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.DataFlow != null)
            {
                this.DataFlow.Validate();
            }
            if (this.DataFlows != null)
            {
                foreach (var element in this.DataFlows)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Datasets != null)
            {
                foreach (var element in this.Datasets)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.LinkedServices != null)
            {
                foreach (var element in this.LinkedServices)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Staging != null)
            {
                this.Staging.Validate();
            }

        }
    }
}