// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Execute power query data flow activity properties.
    /// </summary>
    public partial class ExecutePowerQueryActivityTypeProperties : ExecuteDataFlowActivityTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the ExecutePowerQueryActivityTypeProperties class.
        /// </summary>
        public ExecutePowerQueryActivityTypeProperties()
        {
            this.DataFlow = new DataFlowReference();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExecutePowerQueryActivityTypeProperties class.
        /// </summary>

        /// <param name="dataFlow">Data flow reference.
        /// </param>

        /// <param name="staging">Staging info for execute data flow activity.
        /// </param>

        /// <param name="integrationRuntime">The integration runtime reference.
        /// </param>

        /// <param name="compute">Compute properties for data flow activity.
        /// </param>

        /// <param name="traceLevel">Trace level setting used for data flow monitoring output. Supported values
        /// are: &#39;coarse&#39;, &#39;fine&#39;, and &#39;none&#39;. Type: string (or Expression with
        /// resultType string)
        /// </param>

        /// <param name="continueOnError">Continue on error setting used for data flow execution. Enables processing
        /// to continue if a sink fails. Type: boolean (or Expression with resultType
        /// boolean)
        /// </param>

        /// <param name="runConcurrently">Concurrent run setting used for data flow execution. Allows sinks with the
        /// same save order to be processed concurrently. Type: boolean (or Expression
        /// with resultType boolean)
        /// </param>

        /// <param name="sourceStagingConcurrency">Specify number of parallel staging for sources applicable to the sink.
        /// Type: integer (or Expression with resultType integer)
        /// </param>

        /// <param name="sinks">(Deprecated. Please use Queries). List of Power Query activity sinks mapped
        /// to a queryName.
        /// </param>

        /// <param name="queries">List of mapping for Power Query mashup query to sink dataset(s).
        /// </param>
        public ExecutePowerQueryActivityTypeProperties(DataFlowReference dataFlow, DataFlowStagingInfo staging = default(DataFlowStagingInfo), IntegrationRuntimeReference integrationRuntime = default(IntegrationRuntimeReference), ExecuteDataFlowActivityTypePropertiesCompute compute = default(ExecuteDataFlowActivityTypePropertiesCompute), object traceLevel = default(object), object continueOnError = default(object), object runConcurrently = default(object), object sourceStagingConcurrency = default(object), System.Collections.Generic.IDictionary<string, PowerQuerySink> sinks = default(System.Collections.Generic.IDictionary<string, PowerQuerySink>), System.Collections.Generic.IList<PowerQuerySinkMapping> queries = default(System.Collections.Generic.IList<PowerQuerySinkMapping>))

        : base(dataFlow, staging, integrationRuntime, compute, traceLevel, continueOnError, runConcurrently, sourceStagingConcurrency)
        {
            this.Sinks = sinks;
            this.Queries = queries;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets (Deprecated. Please use Queries). List of Power Query activity
        /// sinks mapped to a queryName.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sinks")]
        public System.Collections.Generic.IDictionary<string, PowerQuerySink> Sinks {get; set; }

        /// <summary>
        /// Gets or sets list of mapping for Power Query mashup query to sink
        /// dataset(s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "queries")]
        public System.Collections.Generic.IList<PowerQuerySinkMapping> Queries {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Sinks != null)
            {
                foreach (var valueElement in this.Sinks.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }

        }
    }
}