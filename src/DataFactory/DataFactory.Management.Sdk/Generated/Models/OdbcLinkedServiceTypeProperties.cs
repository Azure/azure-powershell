// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// ODBC linked service properties.
    /// </summary>
    public partial class OdbcLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the OdbcLinkedServiceTypeProperties class.
        /// </summary>
        public OdbcLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OdbcLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="connectionString">The non-access credential portion of the connection string as well as an
        /// optional encrypted credential. Type: string, or SecureString, or
        /// AzureKeyVaultSecretReference, or Expression with resultType string.
        /// </param>

        /// <param name="authenticationType">Type of authentication used to connect to the ODBC data store. Possible
        /// values are: Anonymous and Basic. Type: string (or Expression with
        /// resultType string).
        /// </param>

        /// <param name="credential">The access credential portion of the connection string specified in
        /// driver-specific property-value format.
        /// </param>

        /// <param name="userName">User name for Basic authentication. Type: string (or Expression with
        /// resultType string).
        /// </param>

        /// <param name="password">Password for Basic authentication.
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>
        public OdbcLinkedServiceTypeProperties(object connectionString, object authenticationType = default(object), SecretBase credential = default(SecretBase), object userName = default(object), SecretBase password = default(SecretBase), string encryptedCredential = default(string))

        {
            this.ConnectionString = connectionString;
            this.AuthenticationType = authenticationType;
            this.Credential = credential;
            this.UserName = userName;
            this.Password = password;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the non-access credential portion of the connection string as
        /// well as an optional encrypted credential. Type: string, or SecureString, or
        /// AzureKeyVaultSecretReference, or Expression with resultType string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionString")]
        public object ConnectionString {get; set; }

        /// <summary>
        /// Gets or sets type of authentication used to connect to the ODBC data store.
        /// Possible values are: Anonymous and Basic. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authenticationType")]
        public object AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets the access credential portion of the connection string
        /// specified in driver-specific property-value format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "credential")]
        public SecretBase Credential {get; set; }

        /// <summary>
        /// Gets or sets user name for Basic authentication. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userName")]
        public object UserName {get; set; }

        /// <summary>
        /// Gets or sets password for Basic authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public SecretBase Password {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ConnectionString == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ConnectionString");
            }






        }
    }
}