// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// HDInsight Spark activity.
    /// </summary>
    [Newtonsoft.Json.JsonObject("HDInsightSpark")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class HDInsightSparkActivity : ExecutionActivity
    {
        /// <summary>
        /// Initializes a new instance of the HDInsightSparkActivity class.
        /// </summary>
        public HDInsightSparkActivity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HDInsightSparkActivity class.
        /// </summary>

        /// <param name="additionalProperties">A pipeline activity.
        /// </param>

        /// <param name="name">Activity name.
        /// </param>

        /// <param name="description">Activity description.
        /// </param>

        /// <param name="state">Activity state. This is an optional property and if not provided, the state
        /// will be Active by default.
        /// Possible values include: &#39;Active&#39;, &#39;Inactive&#39;</param>

        /// <param name="onInactiveMarkAs">Status result of the activity when the state is set to Inactive. This is an
        /// optional property and if not provided when the activity is inactive, the
        /// status will be Succeeded by default.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Skipped&#39;</param>

        /// <param name="dependsOn">Activity depends on condition.
        /// </param>

        /// <param name="userProperties">Activity user properties.
        /// </param>

        /// <param name="linkedServiceName">Linked service reference.
        /// </param>

        /// <param name="policy">Activity policy.
        /// </param>

        /// <param name="rootPath">The root path in &#39;sparkJobLinkedService&#39; for all the job’s files. Type:
        /// string (or Expression with resultType string).
        /// </param>

        /// <param name="entryFilePath">The relative path to the root folder of the code/package to be executed.
        /// Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="arguments">The user-specified arguments to HDInsightSparkActivity.
        /// </param>

        /// <param name="getDebugInfo">Debug info option.
        /// Possible values include: &#39;None&#39;, &#39;Always&#39;, &#39;Failure&#39;</param>

        /// <param name="sparkJobLinkedService">The storage linked service for uploading the entry file and dependencies,
        /// and for receiving logs.
        /// </param>

        /// <param name="className">The application&#39;s Java/Spark main class.
        /// </param>

        /// <param name="proxyUser">The user to impersonate that will execute the job. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="sparkConfig">Spark configuration property.
        /// </param>
        public HDInsightSparkActivity(string name, object rootPath, object entryFilePath, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string description = default(string), string state = default(string), string onInactiveMarkAs = default(string), System.Collections.Generic.IList<ActivityDependency> dependsOn = default(System.Collections.Generic.IList<ActivityDependency>), System.Collections.Generic.IList<UserProperty> userProperties = default(System.Collections.Generic.IList<UserProperty>), LinkedServiceReference linkedServiceName = default(LinkedServiceReference), ActivityPolicy policy = default(ActivityPolicy), System.Collections.Generic.IList<object> arguments = default(System.Collections.Generic.IList<object>), string getDebugInfo = default(string), LinkedServiceReference sparkJobLinkedService = default(LinkedServiceReference), string className = default(string), object proxyUser = default(object), System.Collections.Generic.IDictionary<string, object> sparkConfig = default(System.Collections.Generic.IDictionary<string, object>))

        : base(name, additionalProperties, description, state, onInactiveMarkAs, dependsOn, userProperties, linkedServiceName, policy)
        {
            this.RootPath = rootPath;
            this.EntryFilePath = entryFilePath;
            this.Arguments = arguments;
            this.GetDebugInfo = getDebugInfo;
            this.SparkJobLinkedService = sparkJobLinkedService;
            this.ClassName = className;
            this.ProxyUser = proxyUser;
            this.SparkConfig = sparkConfig;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the root path in &#39;sparkJobLinkedService&#39; for all the job’s
        /// files. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.rootPath")]
        public object RootPath {get; set; }

        /// <summary>
        /// Gets or sets the relative path to the root folder of the code/package to be
        /// executed. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.entryFilePath")]
        public object EntryFilePath {get; set; }

        /// <summary>
        /// Gets or sets the user-specified arguments to HDInsightSparkActivity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.arguments")]
        public System.Collections.Generic.IList<object> Arguments {get; set; }

        /// <summary>
        /// Gets or sets debug info option. Possible values include: &#39;None&#39;, &#39;Always&#39;, &#39;Failure&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.getDebugInfo")]
        public string GetDebugInfo {get; set; }

        /// <summary>
        /// Gets or sets the storage linked service for uploading the entry file and
        /// dependencies, and for receiving logs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.sparkJobLinkedService")]
        public LinkedServiceReference SparkJobLinkedService {get; set; }

        /// <summary>
        /// Gets or sets the application&#39;s Java/Spark main class.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.className")]
        public string ClassName {get; set; }

        /// <summary>
        /// Gets or sets the user to impersonate that will execute the job. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.proxyUser")]
        public object ProxyUser {get; set; }

        /// <summary>
        /// Gets or sets spark configuration property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.sparkConfig")]
        public System.Collections.Generic.IDictionary<string, object> SparkConfig {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.RootPath == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RootPath");
            }
            if (this.EntryFilePath == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "EntryFilePath");
            }




            if (this.SparkJobLinkedService != null)
            {
                this.SparkJobLinkedService.Validate();
            }



        }
    }
}