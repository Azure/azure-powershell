// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Switch activity properties.
    /// </summary>
    public partial class SwitchActivityTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the SwitchActivityTypeProperties class.
        /// </summary>
        public SwitchActivityTypeProperties()
        {
            this.On = new Expression();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SwitchActivityTypeProperties class.
        /// </summary>

        /// <param name="on">An expression that would evaluate to a string or integer. This is used to
        /// determine the block of activities in cases that will be executed.
        /// </param>

        /// <param name="cases">List of cases that correspond to expected values of the &#39;on&#39; property. This
        /// is an optional property and if not provided, the activity will execute
        /// activities provided in defaultActivities.
        /// </param>

        /// <param name="defaultActivities">List of activities to execute if no case condition is satisfied. This is an
        /// optional property and if not provided, the activity will exit without any
        /// action.
        /// </param>
        public SwitchActivityTypeProperties(Expression on, System.Collections.Generic.IList<SwitchCase> cases = default(System.Collections.Generic.IList<SwitchCase>), System.Collections.Generic.IList<Activity> defaultActivities = default(System.Collections.Generic.IList<Activity>))

        {
            this.On = on;
            this.Cases = cases;
            this.DefaultActivities = defaultActivities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets an expression that would evaluate to a string or integer. This
        /// is used to determine the block of activities in cases that will be
        /// executed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "on")]
        public Expression On {get; set; }

        /// <summary>
        /// Gets or sets list of cases that correspond to expected values of the &#39;on&#39;
        /// property. This is an optional property and if not provided, the activity
        /// will execute activities provided in defaultActivities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cases")]
        public System.Collections.Generic.IList<SwitchCase> Cases {get; set; }

        /// <summary>
        /// Gets or sets list of activities to execute if no case condition is
        /// satisfied. This is an optional property and if not provided, the activity
        /// will exit without any action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultActivities")]
        public System.Collections.Generic.IList<Activity> DefaultActivities {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.On == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "On");
            }
            if (this.On != null)
            {
                this.On.Validate();
            }

            if (this.DefaultActivities != null)
            {
                foreach (var element in this.DefaultActivities)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}