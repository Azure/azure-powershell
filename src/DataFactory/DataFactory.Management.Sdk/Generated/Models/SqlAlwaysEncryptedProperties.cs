// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Sql always encrypted properties.
    /// </summary>
    public partial class SqlAlwaysEncryptedProperties
    {
        /// <summary>
        /// Initializes a new instance of the SqlAlwaysEncryptedProperties class.
        /// </summary>
        public SqlAlwaysEncryptedProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SqlAlwaysEncryptedProperties class.
        /// </summary>

        /// <param name="alwaysEncryptedAkvAuthType">Sql always encrypted AKV authentication type. Type: string.
        /// Possible values include: &#39;ServicePrincipal&#39;, &#39;ManagedIdentity&#39;,
        /// &#39;UserAssignedManagedIdentity&#39;</param>

        /// <param name="servicePrincipalId">The client ID of the application in Azure Active Directory used for Azure
        /// Key Vault authentication. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="servicePrincipalKey">The key of the service principal used to authenticate against Azure Key
        /// Vault.
        /// </param>

        /// <param name="credential">The credential reference containing authentication information.
        /// </param>
        public SqlAlwaysEncryptedProperties(string alwaysEncryptedAkvAuthType, object servicePrincipalId = default(object), SecretBase servicePrincipalKey = default(SecretBase), CredentialReference credential = default(CredentialReference))

        {
            this.AlwaysEncryptedAkvAuthType = alwaysEncryptedAkvAuthType;
            this.ServicePrincipalId = servicePrincipalId;
            this.ServicePrincipalKey = servicePrincipalKey;
            this.Credential = credential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets sql always encrypted AKV authentication type. Type: string. Possible values include: &#39;ServicePrincipal&#39;, &#39;ManagedIdentity&#39;, &#39;UserAssignedManagedIdentity&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "alwaysEncryptedAkvAuthType")]
        public string AlwaysEncryptedAkvAuthType {get; set; }

        /// <summary>
        /// Gets or sets the client ID of the application in Azure Active Directory
        /// used for Azure Key Vault authentication. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalId")]
        public object ServicePrincipalId {get; set; }

        /// <summary>
        /// Gets or sets the key of the service principal used to authenticate against
        /// Azure Key Vault.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalKey")]
        public SecretBase ServicePrincipalKey {get; set; }

        /// <summary>
        /// Gets or sets the credential reference containing authentication
        /// information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "credential")]
        public CredentialReference Credential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.AlwaysEncryptedAkvAuthType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AlwaysEncryptedAkvAuthType");
            }



            if (this.Credential != null)
            {
                this.Credential.Validate();
            }
        }
    }
}