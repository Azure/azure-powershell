// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Self referenced tumbling window trigger dependency.
    /// </summary>
    [Newtonsoft.Json.JsonObject("SelfDependencyTumblingWindowTriggerReference")]
    public partial class SelfDependencyTumblingWindowTriggerReference : DependencyReference
    {
        /// <summary>
        /// Initializes a new instance of the SelfDependencyTumblingWindowTriggerReference class.
        /// </summary>
        public SelfDependencyTumblingWindowTriggerReference()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SelfDependencyTumblingWindowTriggerReference class.
        /// </summary>

        /// <param name="offset">Timespan applied to the start time of a tumbling window when evaluating
        /// dependency.
        /// </param>

        /// <param name="size">The size of the window when evaluating the dependency. If undefined the
        /// frequency of the tumbling window will be used.
        /// </param>
        public SelfDependencyTumblingWindowTriggerReference(string offset, string size = default(string))

        {
            this.Offset = offset;
            this.Size = size;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets timespan applied to the start time of a tumbling window when
        /// evaluating dependency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "offset")]
        public string Offset {get; set; }

        /// <summary>
        /// Gets or sets the size of the window when evaluating the dependency. If
        /// undefined the frequency of the tumbling window will be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "size")]
        public string Size {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Offset == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Offset");
            }
            if (this.Offset != null)
            {
                if (this.Offset.Length > 15)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Offset", 15);
                }
                if (this.Offset.Length < 8)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "Offset", 8);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.Offset, "-((\\d+)\\.)?(\\d\\d):(60|([0-5][0-9])):(60|([0-5][0-9]))"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "Offset", "-((\\d+)\\.)?(\\d\\d):(60|([0-5][0-9])):(60|([0-5][0-9]))");
                }
            }
            if (this.Size != null)
            {
                if (this.Size.Length > 15)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Size", 15);
                }
                if (this.Size.Length < 8)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "Size", 8);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.Size, "((\\d+)\\.)?(\\d\\d):(60|([0-5][0-9])):(60|([0-5][0-9]))"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "Size", "((\\d+)\\.)?(\\d\\d):(60|([0-5][0-9])):(60|([0-5][0-9]))");
                }
            }
        }
    }
}