// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// This activity is used for iterating over a collection and execute given
    /// activities.
    /// </summary>
    [Newtonsoft.Json.JsonObject("ForEach")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ForEachActivity : ControlActivity
    {
        /// <summary>
        /// Initializes a new instance of the ForEachActivity class.
        /// </summary>
        public ForEachActivity()
        {
            this.Items = new Expression();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ForEachActivity class.
        /// </summary>

        /// <param name="additionalProperties">A pipeline activity.
        /// </param>

        /// <param name="name">Activity name.
        /// </param>

        /// <param name="description">Activity description.
        /// </param>

        /// <param name="state">Activity state. This is an optional property and if not provided, the state
        /// will be Active by default.
        /// Possible values include: &#39;Active&#39;, &#39;Inactive&#39;</param>

        /// <param name="onInactiveMarkAs">Status result of the activity when the state is set to Inactive. This is an
        /// optional property and if not provided when the activity is inactive, the
        /// status will be Succeeded by default.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Skipped&#39;</param>

        /// <param name="dependsOn">Activity depends on condition.
        /// </param>

        /// <param name="userProperties">Activity user properties.
        /// </param>

        /// <param name="isSequential">Should the loop be executed in sequence or in parallel (max 50)
        /// </param>

        /// <param name="batchCount">Batch count to be used for controlling the number of parallel execution
        /// (when isSequential is set to false).
        /// </param>

        /// <param name="items">Collection to iterate.
        /// </param>

        /// <param name="activities">List of activities to execute .
        /// </param>
        public ForEachActivity(string name, Expression items, System.Collections.Generic.IList<Activity> activities, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string description = default(string), string state = default(string), string onInactiveMarkAs = default(string), System.Collections.Generic.IList<ActivityDependency> dependsOn = default(System.Collections.Generic.IList<ActivityDependency>), System.Collections.Generic.IList<UserProperty> userProperties = default(System.Collections.Generic.IList<UserProperty>), bool? isSequential = default(bool?), int? batchCount = default(int?))

        : base(name, additionalProperties, description, state, onInactiveMarkAs, dependsOn, userProperties)
        {
            this.IsSequential = isSequential;
            this.BatchCount = batchCount;
            this.Items = items;
            this.Activities = activities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets should the loop be executed in sequence or in parallel (max
        /// 50)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.isSequential")]
        public bool? IsSequential {get; set; }

        /// <summary>
        /// Gets or sets batch count to be used for controlling the number of parallel
        /// execution (when isSequential is set to false).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.batchCount")]
        public int? BatchCount {get; set; }

        /// <summary>
        /// Gets or sets collection to iterate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.items")]
        public Expression Items {get; set; }

        /// <summary>
        /// Gets or sets list of activities to execute .
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.activities")]
        public System.Collections.Generic.IList<Activity> Activities {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Items == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Items");
            }
            if (this.Activities == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Activities");
            }
            if (this.BatchCount != null)
            {
                if (this.BatchCount > 50)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "BatchCount", 50);
                }
            }
            if (this.Items != null)
            {
                this.Items.Validate();
            }
            if (this.Activities != null)
            {
                foreach (var element in this.Activities)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}