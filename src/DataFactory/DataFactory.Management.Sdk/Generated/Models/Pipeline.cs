// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// A data factory pipeline.
    /// </summary>
    public partial class Pipeline
    {
        /// <summary>
        /// Initializes a new instance of the Pipeline class.
        /// </summary>
        public Pipeline()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Pipeline class.
        /// </summary>

        /// <param name="description">The description of the pipeline.
        /// </param>

        /// <param name="activities">List of activities in pipeline.
        /// </param>

        /// <param name="parameters">List of parameters for pipeline.
        /// </param>

        /// <param name="variables">List of variables for pipeline.
        /// </param>

        /// <param name="concurrency">The max number of concurrent runs for the pipeline.
        /// </param>

        /// <param name="annotations">List of tags that can be used for describing the Pipeline.
        /// </param>

        /// <param name="runDimensions">Dimensions emitted by Pipeline.
        /// </param>

        /// <param name="folder">The folder that this Pipeline is in. If not specified, Pipeline will appear
        /// at the root level.
        /// </param>

        /// <param name="policy">Pipeline Policy.
        /// </param>
        public Pipeline(string description = default(string), System.Collections.Generic.IList<Activity> activities = default(System.Collections.Generic.IList<Activity>), System.Collections.Generic.IDictionary<string, ParameterSpecification> parameters = default(System.Collections.Generic.IDictionary<string, ParameterSpecification>), System.Collections.Generic.IDictionary<string, VariableSpecification> variables = default(System.Collections.Generic.IDictionary<string, VariableSpecification>), int? concurrency = default(int?), System.Collections.Generic.IList<object> annotations = default(System.Collections.Generic.IList<object>), System.Collections.Generic.IDictionary<string, object> runDimensions = default(System.Collections.Generic.IDictionary<string, object>), PipelineFolder folder = default(PipelineFolder), PipelinePolicy policy = default(PipelinePolicy))

        {
            this.Description = description;
            this.Activities = activities;
            this.Parameters = parameters;
            this.Variables = variables;
            this.Concurrency = concurrency;
            this.Annotations = annotations;
            this.RunDimensions = runDimensions;
            this.Folder = folder;
            this.Policy = policy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the description of the pipeline.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets list of activities in pipeline.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "activities")]
        public System.Collections.Generic.IList<Activity> Activities {get; set; }

        /// <summary>
        /// Gets or sets list of parameters for pipeline.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "parameters")]
        public System.Collections.Generic.IDictionary<string, ParameterSpecification> Parameters {get; set; }

        /// <summary>
        /// Gets or sets list of variables for pipeline.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "variables")]
        public System.Collections.Generic.IDictionary<string, VariableSpecification> Variables {get; set; }

        /// <summary>
        /// Gets or sets the max number of concurrent runs for the pipeline.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "concurrency")]
        public int? Concurrency {get; set; }

        /// <summary>
        /// Gets or sets list of tags that can be used for describing the Pipeline.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annotations")]
        public System.Collections.Generic.IList<object> Annotations {get; set; }

        /// <summary>
        /// Gets or sets dimensions emitted by Pipeline.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runDimensions")]
        public System.Collections.Generic.IDictionary<string, object> RunDimensions {get; set; }

        /// <summary>
        /// Gets or sets the folder that this Pipeline is in. If not specified,
        /// Pipeline will appear at the root level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "folder")]
        public PipelineFolder Folder {get; set; }

        /// <summary>
        /// Gets or sets pipeline Policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policy")]
        public PipelinePolicy Policy {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.Activities != null)
            {
                foreach (var element in this.Activities)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Parameters != null)
            {
                foreach (var valueElement in this.Parameters.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (this.Variables != null)
            {
                foreach (var valueElement in this.Variables.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (this.Concurrency != null)
            {
                if (this.Concurrency < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Concurrency", 1);
                }
            }




        }
    }
}