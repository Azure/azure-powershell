// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// The data stored in JSON format.
    /// </summary>
    [Newtonsoft.Json.JsonObject("JsonFormat")]
    public partial class JsonFormat : DatasetStorageFormat
    {
        /// <summary>
        /// Initializes a new instance of the JsonFormat class.
        /// </summary>
        public JsonFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JsonFormat class.
        /// </summary>

        /// <param name="additionalProperties">The format definition of a storage.
        /// </param>

        /// <param name="serializer">Serializer. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="deserializer">Deserializer. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="filePattern">File pattern of JSON. To be more specific, the way of separating a
        /// collection of JSON objects. The default value is &#39;setOfObjects&#39;. It is
        /// case-sensitive.
        /// </param>

        /// <param name="nestingSeparator">The character used to separate nesting levels. Default value is &#39;.&#39; (dot).
        /// Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="encodingName">The code page name of the preferred encoding. If not provided, the default
        /// value is &#39;utf-8&#39;, unless the byte order mark (BOM) denotes another Unicode
        /// encoding. The full list of supported values can be found in the &#39;Name&#39;
        /// column of the table of encodings in the following reference:
        /// https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression
        /// with resultType string).
        /// </param>

        /// <param name="jsonNodeReference">The JSONPath of the JSON array element to be flattened. Example:
        /// &#34;$.ArrayPath&#34;. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="jsonPathDefinition">The JSONPath definition for each column mapping with a customized column
        /// name to extract data from JSON file. For fields under root object, start
        /// with &#34;$&#34;; for fields inside the array chosen by jsonNodeReference property,
        /// start from the array element. Example: {&#34;Column1&#34;: &#34;$.Column1Path&#34;,
        /// &#34;Column2&#34;: &#34;Column2PathInArray&#34;}. Type: object (or Expression with
        /// resultType object).
        /// </param>
        public JsonFormat(System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), object serializer = default(object), object deserializer = default(object), object filePattern = default(object), object nestingSeparator = default(object), object encodingName = default(object), object jsonNodeReference = default(object), object jsonPathDefinition = default(object))

        : base(additionalProperties, serializer, deserializer)
        {
            this.FilePattern = filePattern;
            this.NestingSeparator = nestingSeparator;
            this.EncodingName = encodingName;
            this.JsonNodeReference = jsonNodeReference;
            this.JsonPathDefinition = jsonPathDefinition;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets file pattern of JSON. To be more specific, the way of
        /// separating a collection of JSON objects. The default value is
        /// &#39;setOfObjects&#39;. It is case-sensitive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "filePattern")]
        public object FilePattern {get; set; }

        /// <summary>
        /// Gets or sets the character used to separate nesting levels. Default value
        /// is &#39;.&#39; (dot). Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nestingSeparator")]
        public object NestingSeparator {get; set; }

        /// <summary>
        /// Gets or sets the code page name of the preferred encoding. If not provided,
        /// the default value is &#39;utf-8&#39;, unless the byte order mark (BOM) denotes
        /// another Unicode encoding. The full list of supported values can be found in
        /// the &#39;Name&#39; column of the table of encodings in the following reference:
        /// https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression
        /// with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encodingName")]
        public object EncodingName {get; set; }

        /// <summary>
        /// Gets or sets the JSONPath of the JSON array element to be flattened.
        /// Example: &#34;$.ArrayPath&#34;. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "jsonNodeReference")]
        public object JsonNodeReference {get; set; }

        /// <summary>
        /// Gets or sets the JSONPath definition for each column mapping with a
        /// customized column name to extract data from JSON file. For fields under
        /// root object, start with &#34;$&#34;; for fields inside the array chosen by
        /// jsonNodeReference property, start from the array element. Example:
        /// {&#34;Column1&#34;: &#34;$.Column1Path&#34;, &#34;Column2&#34;: &#34;Column2PathInArray&#34;}. Type: object
        /// (or Expression with resultType object).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "jsonPathDefinition")]
        public object JsonPathDefinition {get; set; }
    }
}