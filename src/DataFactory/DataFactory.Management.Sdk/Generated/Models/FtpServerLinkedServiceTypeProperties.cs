// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Properties specific to this linked service type.
    /// </summary>
    public partial class FtpServerLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the FtpServerLinkedServiceTypeProperties class.
        /// </summary>
        public FtpServerLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FtpServerLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="host">Host name of the FTP server. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="port">The TCP port number that the FTP server uses to listen for client
        /// connections. Default value is 21. Type: integer (or Expression with
        /// resultType integer), minimum: 0.
        /// </param>

        /// <param name="authenticationType">The authentication type to be used to connect to the FTP server.
        /// Possible values include: &#39;Basic&#39;, &#39;Anonymous&#39;</param>

        /// <param name="userName">Username to logon the FTP server. Type: string (or Expression with
        /// resultType string).
        /// </param>

        /// <param name="password">Password to logon the FTP server.
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>

        /// <param name="enableSsl">If true, connect to the FTP server over SSL/TLS channel. Default value is
        /// true. Type: boolean (or Expression with resultType boolean).
        /// </param>

        /// <param name="enableServerCertificateValidation">If true, validate the FTP server SSL certificate when connect over SSL/TLS
        /// channel. Default value is true. Type: boolean (or Expression with
        /// resultType boolean).
        /// </param>
        public FtpServerLinkedServiceTypeProperties(object host, object port = default(object), string authenticationType = default(string), object userName = default(object), SecretBase password = default(SecretBase), string encryptedCredential = default(string), object enableSsl = default(object), object enableServerCertificateValidation = default(object))

        {
            this.Host = host;
            this.Port = port;
            this.AuthenticationType = authenticationType;
            this.UserName = userName;
            this.Password = password;
            this.EncryptedCredential = encryptedCredential;
            this.EnableSsl = enableSsl;
            this.EnableServerCertificateValidation = enableServerCertificateValidation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets host name of the FTP server. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "host")]
        public object Host {get; set; }

        /// <summary>
        /// Gets or sets the TCP port number that the FTP server uses to listen for
        /// client connections. Default value is 21. Type: integer (or Expression with
        /// resultType integer), minimum: 0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "port")]
        public object Port {get; set; }

        /// <summary>
        /// Gets or sets the authentication type to be used to connect to the FTP
        /// server. Possible values include: &#39;Basic&#39;, &#39;Anonymous&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authenticationType")]
        public string AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets username to logon the FTP server. Type: string (or Expression
        /// with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userName")]
        public object UserName {get; set; }

        /// <summary>
        /// Gets or sets password to logon the FTP server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public SecretBase Password {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }

        /// <summary>
        /// Gets or sets if true, connect to the FTP server over SSL/TLS channel.
        /// Default value is true. Type: boolean (or Expression with resultType
        /// boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableSsl")]
        public object EnableSsl {get; set; }

        /// <summary>
        /// Gets or sets if true, validate the FTP server SSL certificate when connect
        /// over SSL/TLS channel. Default value is true. Type: boolean (or Expression
        /// with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableServerCertificateValidation")]
        public object EnableServerCertificateValidation {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Host == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Host");
            }








        }
    }
}