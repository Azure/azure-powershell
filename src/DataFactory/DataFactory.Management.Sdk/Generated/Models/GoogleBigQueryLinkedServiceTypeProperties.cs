// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Google BigQuery service linked service properties.
    /// </summary>
    public partial class GoogleBigQueryLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the GoogleBigQueryLinkedServiceTypeProperties class.
        /// </summary>
        public GoogleBigQueryLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GoogleBigQueryLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="project">The default BigQuery project to query against. Type: string (or Expression
        /// with resultType string).
        /// </param>

        /// <param name="additionalProjects">A comma-separated list of public BigQuery projects to access. Type: string
        /// (or Expression with resultType string).
        /// </param>

        /// <param name="requestGoogleDriveScope">Whether to request access to Google Drive. Allowing Google Drive access
        /// enables support for federated tables that combine BigQuery data with data
        /// from Google Drive. The default value is false. Type: string (or Expression
        /// with resultType string).
        /// </param>

        /// <param name="authenticationType">The OAuth 2.0 authentication mechanism used for authentication.
        /// ServiceAuthentication can only be used on self-hosted IR.
        /// Possible values include: &#39;ServiceAuthentication&#39;, &#39;UserAuthentication&#39;</param>

        /// <param name="refreshToken">The refresh token obtained from Google for authorizing access to BigQuery
        /// for UserAuthentication.
        /// </param>

        /// <param name="clientId">The client id of the google application used to acquire the refresh token.
        /// Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="clientSecret">The client secret of the google application used to acquire the refresh
        /// token.
        /// </param>

        /// <param name="email">The service account email ID that is used for ServiceAuthentication and can
        /// only be used on self-hosted IR. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="keyFilePath">The full path to the .p12 key file that is used to authenticate the service
        /// account email address and can only be used on self-hosted IR. Type: string
        /// (or Expression with resultType string).
        /// </param>

        /// <param name="trustedCertPath">The full path of the .pem file containing trusted CA certificates for
        /// verifying the server when connecting over SSL. This property can only be
        /// set when using SSL on self-hosted IR. The default value is the cacerts.pem
        /// file installed with the IR. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="useSystemTrustStore">Specifies whether to use a CA certificate from the system trust store or
        /// from a specified PEM file. The default value is false.Type: boolean (or
        /// Expression with resultType boolean).
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>
        public GoogleBigQueryLinkedServiceTypeProperties(object project, string authenticationType, object additionalProjects = default(object), object requestGoogleDriveScope = default(object), SecretBase refreshToken = default(SecretBase), object clientId = default(object), SecretBase clientSecret = default(SecretBase), object email = default(object), object keyFilePath = default(object), object trustedCertPath = default(object), object useSystemTrustStore = default(object), string encryptedCredential = default(string))

        {
            this.Project = project;
            this.AdditionalProjects = additionalProjects;
            this.RequestGoogleDriveScope = requestGoogleDriveScope;
            this.AuthenticationType = authenticationType;
            this.RefreshToken = refreshToken;
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            this.Email = email;
            this.KeyFilePath = keyFilePath;
            this.TrustedCertPath = trustedCertPath;
            this.UseSystemTrustStore = useSystemTrustStore;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the default BigQuery project to query against. Type: string
        /// (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "project")]
        public object Project {get; set; }

        /// <summary>
        /// Gets or sets a comma-separated list of public BigQuery projects to access.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "additionalProjects")]
        public object AdditionalProjects {get; set; }

        /// <summary>
        /// Gets or sets whether to request access to Google Drive. Allowing Google
        /// Drive access enables support for federated tables that combine BigQuery
        /// data with data from Google Drive. The default value is false. Type: string
        /// (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requestGoogleDriveScope")]
        public object RequestGoogleDriveScope {get; set; }

        /// <summary>
        /// Gets or sets the OAuth 2.0 authentication mechanism used for
        /// authentication. ServiceAuthentication can only be used on self-hosted IR. Possible values include: &#39;ServiceAuthentication&#39;, &#39;UserAuthentication&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authenticationType")]
        public string AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets the refresh token obtained from Google for authorizing access
        /// to BigQuery for UserAuthentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "refreshToken")]
        public SecretBase RefreshToken {get; set; }

        /// <summary>
        /// Gets or sets the client id of the google application used to acquire the
        /// refresh token. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientId")]
        public object ClientId {get; set; }

        /// <summary>
        /// Gets or sets the client secret of the google application used to acquire
        /// the refresh token.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientSecret")]
        public SecretBase ClientSecret {get; set; }

        /// <summary>
        /// Gets or sets the service account email ID that is used for
        /// ServiceAuthentication and can only be used on self-hosted IR. Type: string
        /// (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "email")]
        public object Email {get; set; }

        /// <summary>
        /// Gets or sets the full path to the .p12 key file that is used to
        /// authenticate the service account email address and can only be used on
        /// self-hosted IR. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keyFilePath")]
        public object KeyFilePath {get; set; }

        /// <summary>
        /// Gets or sets the full path of the .pem file containing trusted CA
        /// certificates for verifying the server when connecting over SSL. This
        /// property can only be set when using SSL on self-hosted IR. The default
        /// value is the cacerts.pem file installed with the IR. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "trustedCertPath")]
        public object TrustedCertPath {get; set; }

        /// <summary>
        /// Gets or sets specifies whether to use a CA certificate from the system
        /// trust store or from a specified PEM file. The default value is false.Type:
        /// boolean (or Expression with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "useSystemTrustStore")]
        public object UseSystemTrustStore {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Project == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Project");
            }
            if (this.AuthenticationType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AuthenticationType");
            }












        }
    }
}