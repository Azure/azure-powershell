// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Dynamics AX linked service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("DynamicsAX")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class DynamicsAXLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the DynamicsAXLinkedService class.
        /// </summary>
        public DynamicsAXLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsAXLinkedService class.
        /// </summary>

        /// <param name="additionalProperties">The nested object which contains the information and credential which can
        /// be used to connect with related store or compute resource.
        /// </param>

        /// <param name="connectVia">The integration runtime reference.
        /// </param>

        /// <param name="description">Linked service description.
        /// </param>

        /// <param name="parameters">Parameters for linked service.
        /// </param>

        /// <param name="annotations">List of tags that can be used for describing the linked service.
        /// </param>

        /// <param name="url">The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData
        /// endpoint.
        /// </param>

        /// <param name="servicePrincipalId">Specify the application&#39;s client ID. Type: string (or Expression with
        /// resultType string).
        /// </param>

        /// <param name="servicePrincipalKey">Specify the application&#39;s key. Mark this field as a SecureString to store
        /// it securely in Data Factory, or reference a secret stored in Azure Key
        /// Vault. Type: string (or Expression with resultType string).
        /// </param>

        /// <param name="tenant">Specify the tenant information (domain name or tenant ID) under which your
        /// application resides. Retrieve it by hovering the mouse in the top-right
        /// corner of the Azure portal. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="aadResourceId">Specify the resource you are requesting authorization. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>
        public DynamicsAXLinkedService(object url, object servicePrincipalId, SecretBase servicePrincipalKey, object tenant, object aadResourceId, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), System.Collections.Generic.IDictionary<string, ParameterSpecification> parameters = default(System.Collections.Generic.IDictionary<string, ParameterSpecification>), System.Collections.Generic.IList<object> annotations = default(System.Collections.Generic.IList<object>), string encryptedCredential = default(string))

        : base(additionalProperties, connectVia, description, parameters, annotations)
        {
            this.Url = url;
            this.ServicePrincipalId = servicePrincipalId;
            this.ServicePrincipalKey = servicePrincipalKey;
            this.Tenant = tenant;
            this.AadResourceId = aadResourceId;
            this.EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the Dynamics AX (or Dynamics 365 Finance and Operations)
        /// instance OData endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.url")]
        public object Url {get; set; }

        /// <summary>
        /// Gets or sets specify the application&#39;s client ID. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.servicePrincipalId")]
        public object ServicePrincipalId {get; set; }

        /// <summary>
        /// Gets or sets specify the application&#39;s key. Mark this field as a
        /// SecureString to store it securely in Data Factory, or reference a secret
        /// stored in Azure Key Vault. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.servicePrincipalKey")]
        public SecretBase ServicePrincipalKey {get; set; }

        /// <summary>
        /// Gets or sets specify the tenant information (domain name or tenant ID)
        /// under which your application resides. Retrieve it by hovering the mouse in
        /// the top-right corner of the Azure portal. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.tenant")]
        public object Tenant {get; set; }

        /// <summary>
        /// Gets or sets specify the resource you are requesting authorization. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.aadResourceId")]
        public object AadResourceId {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public string EncryptedCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Url == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Url");
            }
            if (this.ServicePrincipalId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ServicePrincipalId");
            }
            if (this.ServicePrincipalKey == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ServicePrincipalKey");
            }
            if (this.Tenant == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Tenant");
            }
            if (this.AadResourceId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AadResourceId");
            }






        }
    }
}