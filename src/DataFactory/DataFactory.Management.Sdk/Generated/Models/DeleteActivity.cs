// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Delete activity.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Delete")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class DeleteActivity : ExecutionActivity
    {
        /// <summary>
        /// Initializes a new instance of the DeleteActivity class.
        /// </summary>
        public DeleteActivity()
        {
            this.Dataset = new DatasetReference();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeleteActivity class.
        /// </summary>

        /// <param name="additionalProperties">A pipeline activity.
        /// </param>

        /// <param name="name">Activity name.
        /// </param>

        /// <param name="description">Activity description.
        /// </param>

        /// <param name="state">Activity state. This is an optional property and if not provided, the state
        /// will be Active by default.
        /// Possible values include: &#39;Active&#39;, &#39;Inactive&#39;</param>

        /// <param name="onInactiveMarkAs">Status result of the activity when the state is set to Inactive. This is an
        /// optional property and if not provided when the activity is inactive, the
        /// status will be Succeeded by default.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Skipped&#39;</param>

        /// <param name="dependsOn">Activity depends on condition.
        /// </param>

        /// <param name="userProperties">Activity user properties.
        /// </param>

        /// <param name="linkedServiceName">Linked service reference.
        /// </param>

        /// <param name="policy">Activity policy.
        /// </param>

        /// <param name="recursive">If true, files or sub-folders under current folder path will be deleted
        /// recursively. Default is false. Type: boolean (or Expression with resultType
        /// boolean).
        /// </param>

        /// <param name="maxConcurrentConnections">The max concurrent connections to connect data source at the same time.
        /// </param>

        /// <param name="enableLogging">Whether to record detailed logs of delete-activity execution. Default value
        /// is false. Type: boolean (or Expression with resultType boolean).
        /// </param>

        /// <param name="logStorageSettings">Log storage settings customer need to provide when enableLogging is true.
        /// </param>

        /// <param name="dataset">Delete activity dataset reference.
        /// </param>

        /// <param name="storeSettings">Delete activity store settings.
        /// </param>
        public DeleteActivity(string name, DatasetReference dataset, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string description = default(string), string state = default(string), string onInactiveMarkAs = default(string), System.Collections.Generic.IList<ActivityDependency> dependsOn = default(System.Collections.Generic.IList<ActivityDependency>), System.Collections.Generic.IList<UserProperty> userProperties = default(System.Collections.Generic.IList<UserProperty>), LinkedServiceReference linkedServiceName = default(LinkedServiceReference), ActivityPolicy policy = default(ActivityPolicy), object recursive = default(object), int? maxConcurrentConnections = default(int?), object enableLogging = default(object), LogStorageSettings logStorageSettings = default(LogStorageSettings), StoreReadSettings storeSettings = default(StoreReadSettings))

        : base(name, additionalProperties, description, state, onInactiveMarkAs, dependsOn, userProperties, linkedServiceName, policy)
        {
            this.Recursive = recursive;
            this.MaxConcurrentConnections = maxConcurrentConnections;
            this.EnableLogging = enableLogging;
            this.LogStorageSettings = logStorageSettings;
            this.Dataset = dataset;
            this.StoreSettings = storeSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets if true, files or sub-folders under current folder path will
        /// be deleted recursively. Default is false. Type: boolean (or Expression with
        /// resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.recursive")]
        public object Recursive {get; set; }

        /// <summary>
        /// Gets or sets the max concurrent connections to connect data source at the
        /// same time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.maxConcurrentConnections")]
        public int? MaxConcurrentConnections {get; set; }

        /// <summary>
        /// Gets or sets whether to record detailed logs of delete-activity execution.
        /// Default value is false. Type: boolean (or Expression with resultType
        /// boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.enableLogging")]
        public object EnableLogging {get; set; }

        /// <summary>
        /// Gets or sets log storage settings customer need to provide when
        /// enableLogging is true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.logStorageSettings")]
        public LogStorageSettings LogStorageSettings {get; set; }

        /// <summary>
        /// Gets or sets delete activity dataset reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.dataset")]
        public DatasetReference Dataset {get; set; }

        /// <summary>
        /// Gets or sets delete activity store settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.storeSettings")]
        public StoreReadSettings StoreSettings {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Dataset == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Dataset");
            }

            if (this.MaxConcurrentConnections != null)
            {
                if (this.MaxConcurrentConnections < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MaxConcurrentConnections", 1);
                }
            }

            if (this.LogStorageSettings != null)
            {
                this.LogStorageSettings.Validate();
            }
            if (this.Dataset != null)
            {
                this.Dataset.Validate();
            }

        }
    }
}