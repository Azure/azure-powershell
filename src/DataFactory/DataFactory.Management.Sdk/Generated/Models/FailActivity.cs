// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// This activity will fail within its own scope and output a custom error
    /// message and error code. The error message and code can provided either as a
    /// string literal or as an expression that can be evaluated to a string at
    /// runtime. The activity scope can be the whole pipeline or a control activity
    /// (e.g. foreach, switch, until), if the fail activity is contained in it.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Fail")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class FailActivity : ControlActivity
    {
        /// <summary>
        /// Initializes a new instance of the FailActivity class.
        /// </summary>
        public FailActivity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FailActivity class.
        /// </summary>

        /// <param name="additionalProperties">A pipeline activity.
        /// </param>

        /// <param name="name">Activity name.
        /// </param>

        /// <param name="description">Activity description.
        /// </param>

        /// <param name="state">Activity state. This is an optional property and if not provided, the state
        /// will be Active by default.
        /// Possible values include: &#39;Active&#39;, &#39;Inactive&#39;</param>

        /// <param name="onInactiveMarkAs">Status result of the activity when the state is set to Inactive. This is an
        /// optional property and if not provided when the activity is inactive, the
        /// status will be Succeeded by default.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Skipped&#39;</param>

        /// <param name="dependsOn">Activity depends on condition.
        /// </param>

        /// <param name="userProperties">Activity user properties.
        /// </param>

        /// <param name="message">The error message that surfaced in the Fail activity. It can be dynamic
        /// content that&#39;s evaluated to a non empty/blank string at runtime. Type:
        /// string (or Expression with resultType string).
        /// </param>

        /// <param name="errorCode">The error code that categorizes the error type of the Fail activity. It can
        /// be dynamic content that&#39;s evaluated to a non empty/blank string at runtime.
        /// Type: string (or Expression with resultType string).
        /// </param>
        public FailActivity(string name, object message, object errorCode, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string description = default(string), string state = default(string), string onInactiveMarkAs = default(string), System.Collections.Generic.IList<ActivityDependency> dependsOn = default(System.Collections.Generic.IList<ActivityDependency>), System.Collections.Generic.IList<UserProperty> userProperties = default(System.Collections.Generic.IList<UserProperty>))

        : base(name, additionalProperties, description, state, onInactiveMarkAs, dependsOn, userProperties)
        {
            this.Message = message;
            this.ErrorCode = errorCode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the error message that surfaced in the Fail activity. It can
        /// be dynamic content that&#39;s evaluated to a non empty/blank string at runtime.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.message")]
        public object Message {get; set; }

        /// <summary>
        /// Gets or sets the error code that categorizes the error type of the Fail
        /// activity. It can be dynamic content that&#39;s evaluated to a non empty/blank
        /// string at runtime. Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeProperties.errorCode")]
        public object ErrorCode {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Message == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Message");
            }
            if (this.ErrorCode == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ErrorCode");
            }


        }
    }
}