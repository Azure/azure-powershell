// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of Self-hosted integration runtime node.
    /// </summary>
    public partial class SelfHostedIntegrationRuntimeNode
    {
        /// <summary>
        /// Initializes a new instance of the SelfHostedIntegrationRuntimeNode class.
        /// </summary>
        public SelfHostedIntegrationRuntimeNode()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SelfHostedIntegrationRuntimeNode class.
        /// </summary>

        /// <param name="additionalProperties">Properties of Self-hosted integration runtime node.
        /// </param>

        /// <param name="nodeName">Name of the integration runtime node.
        /// </param>

        /// <param name="machineName">Machine name of the integration runtime node.
        /// </param>

        /// <param name="hostServiceUri">URI for the host machine of the integration runtime.
        /// </param>

        /// <param name="status">Status of the integration runtime node.
        /// Possible values include: &#39;NeedRegistration&#39;, &#39;Online&#39;, &#39;Limited&#39;,
        /// &#39;Offline&#39;, &#39;Upgrading&#39;, &#39;Initializing&#39;, &#39;InitializeFailed&#39;</param>

        /// <param name="capabilities">The integration runtime capabilities dictionary
        /// </param>

        /// <param name="versionStatus">Status of the integration runtime node version.
        /// </param>

        /// <param name="version">Version of the integration runtime node.
        /// </param>

        /// <param name="registerTime">The time at which the integration runtime node was registered in ISO8601
        /// format.
        /// </param>

        /// <param name="lastConnectTime">The most recent time at which the integration runtime was connected in
        /// ISO8601 format.
        /// </param>

        /// <param name="expiryTime">The time at which the integration runtime will expire in ISO8601 format.
        /// </param>

        /// <param name="lastStartTime">The time the node last started up.
        /// </param>

        /// <param name="lastStopTime">The integration runtime node last stop time.
        /// </param>

        /// <param name="lastUpdateResult">The result of the last integration runtime node update.
        /// Possible values include: &#39;None&#39;, &#39;Succeed&#39;, &#39;Fail&#39;</param>

        /// <param name="lastStartUpdateTime">The last time for the integration runtime node update start.
        /// </param>

        /// <param name="lastEndUpdateTime">The last time for the integration runtime node update end.
        /// </param>

        /// <param name="isActiveDispatcher">Indicates whether this node is the active dispatcher for integration
        /// runtime requests.
        /// </param>

        /// <param name="concurrentJobsLimit">Maximum concurrent jobs on the integration runtime node.
        /// </param>

        /// <param name="maxConcurrentJobs">The maximum concurrent jobs in this integration runtime.
        /// </param>
        public SelfHostedIntegrationRuntimeNode(System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string nodeName = default(string), string machineName = default(string), string hostServiceUri = default(string), string status = default(string), System.Collections.Generic.IDictionary<string, string> capabilities = default(System.Collections.Generic.IDictionary<string, string>), string versionStatus = default(string), string version = default(string), System.DateTime? registerTime = default(System.DateTime?), System.DateTime? lastConnectTime = default(System.DateTime?), System.DateTime? expiryTime = default(System.DateTime?), System.DateTime? lastStartTime = default(System.DateTime?), System.DateTime? lastStopTime = default(System.DateTime?), string lastUpdateResult = default(string), System.DateTime? lastStartUpdateTime = default(System.DateTime?), System.DateTime? lastEndUpdateTime = default(System.DateTime?), bool? isActiveDispatcher = default(bool?), int? concurrentJobsLimit = default(int?), int? maxConcurrentJobs = default(int?))

        {
            this.AdditionalProperties = additionalProperties;
            this.NodeName = nodeName;
            this.MachineName = machineName;
            this.HostServiceUri = hostServiceUri;
            this.Status = status;
            this.Capabilities = capabilities;
            this.VersionStatus = versionStatus;
            this.Version = version;
            this.RegisterTime = registerTime;
            this.LastConnectTime = lastConnectTime;
            this.ExpiryTime = expiryTime;
            this.LastStartTime = lastStartTime;
            this.LastStopTime = lastStopTime;
            this.LastUpdateResult = lastUpdateResult;
            this.LastStartUpdateTime = lastStartUpdateTime;
            this.LastEndUpdateTime = lastEndUpdateTime;
            this.IsActiveDispatcher = isActiveDispatcher;
            this.ConcurrentJobsLimit = concurrentJobsLimit;
            this.MaxConcurrentJobs = maxConcurrentJobs;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets properties of Self-hosted integration runtime node.
        /// </summary>
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {get; set; }

        /// <summary>
        /// Gets name of the integration runtime node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nodeName")]
        public string NodeName {get; private set; }

        /// <summary>
        /// Gets machine name of the integration runtime node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "machineName")]
        public string MachineName {get; private set; }

        /// <summary>
        /// Gets uRI for the host machine of the integration runtime.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostServiceUri")]
        public string HostServiceUri {get; private set; }

        /// <summary>
        /// Gets status of the integration runtime node. Possible values include: &#39;NeedRegistration&#39;, &#39;Online&#39;, &#39;Limited&#39;, &#39;Offline&#39;, &#39;Upgrading&#39;, &#39;Initializing&#39;, &#39;InitializeFailed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; private set; }

        /// <summary>
        /// Gets the integration runtime capabilities dictionary
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "capabilities")]
        public System.Collections.Generic.IDictionary<string, string> Capabilities {get; private set; }

        /// <summary>
        /// Gets status of the integration runtime node version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "versionStatus")]
        public string VersionStatus {get; private set; }

        /// <summary>
        /// Gets version of the integration runtime node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "version")]
        public string Version {get; private set; }

        /// <summary>
        /// Gets the time at which the integration runtime node was registered in
        /// ISO8601 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "registerTime")]
        public System.DateTime? RegisterTime {get; private set; }

        /// <summary>
        /// Gets the most recent time at which the integration runtime was connected in
        /// ISO8601 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastConnectTime")]
        public System.DateTime? LastConnectTime {get; private set; }

        /// <summary>
        /// Gets the time at which the integration runtime will expire in ISO8601
        /// format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "expiryTime")]
        public System.DateTime? ExpiryTime {get; private set; }

        /// <summary>
        /// Gets the time the node last started up.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastStartTime")]
        public System.DateTime? LastStartTime {get; private set; }

        /// <summary>
        /// Gets the integration runtime node last stop time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastStopTime")]
        public System.DateTime? LastStopTime {get; private set; }

        /// <summary>
        /// Gets the result of the last integration runtime node update. Possible values include: &#39;None&#39;, &#39;Succeed&#39;, &#39;Fail&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastUpdateResult")]
        public string LastUpdateResult {get; private set; }

        /// <summary>
        /// Gets the last time for the integration runtime node update start.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastStartUpdateTime")]
        public System.DateTime? LastStartUpdateTime {get; private set; }

        /// <summary>
        /// Gets the last time for the integration runtime node update end.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastEndUpdateTime")]
        public System.DateTime? LastEndUpdateTime {get; private set; }

        /// <summary>
        /// Gets indicates whether this node is the active dispatcher for integration
        /// runtime requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isActiveDispatcher")]
        public bool? IsActiveDispatcher {get; private set; }

        /// <summary>
        /// Gets maximum concurrent jobs on the integration runtime node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "concurrentJobsLimit")]
        public int? ConcurrentJobsLimit {get; private set; }

        /// <summary>
        /// Gets the maximum concurrent jobs in this integration runtime.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxConcurrentJobs")]
        public int? MaxConcurrentJobs {get; private set; }
    }
}