// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using System.Linq;

    /// <summary>
    /// Properties specific to this linked service type.
    /// </summary>
    public partial class SftpServerLinkedServiceTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the SftpServerLinkedServiceTypeProperties class.
        /// </summary>
        public SftpServerLinkedServiceTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SftpServerLinkedServiceTypeProperties class.
        /// </summary>

        /// <param name="host">The SFTP server host name. Type: string (or Expression with resultType
        /// string).
        /// </param>

        /// <param name="port">The TCP port number that the SFTP server uses to listen for client
        /// connections. Default value is 22. Type: integer (or Expression with
        /// resultType integer), minimum: 0.
        /// </param>

        /// <param name="authenticationType">The authentication type to be used to connect to the FTP server.
        /// Possible values include: &#39;Basic&#39;, &#39;SshPublicKey&#39;, &#39;MultiFactor&#39;</param>

        /// <param name="userName">The username used to log on to the SFTP server. Type: string (or Expression
        /// with resultType string).
        /// </param>

        /// <param name="password">Password to logon the SFTP server for Basic authentication.
        /// </param>

        /// <param name="encryptedCredential">The encrypted credential used for authentication. Credentials are encrypted
        /// using the integration runtime credential manager. Type: string.
        /// </param>

        /// <param name="privateKeyPath">The SSH private key file path for SshPublicKey authentication. Only valid
        /// for on-premises copy. For on-premises copy with SshPublicKey
        /// authentication, either PrivateKeyPath or PrivateKeyContent should be
        /// specified. SSH private key should be OpenSSH format. Type: string (or
        /// Expression with resultType string).
        /// </param>

        /// <param name="privateKeyContent">Base64 encoded SSH private key content for SshPublicKey authentication. For
        /// on-premises copy with SshPublicKey authentication, either PrivateKeyPath or
        /// PrivateKeyContent should be specified. SSH private key should be OpenSSH
        /// format.
        /// </param>

        /// <param name="passPhrase">The password to decrypt the SSH private key if the SSH private key is
        /// encrypted.
        /// </param>

        /// <param name="skipHostKeyValidation">If true, skip the SSH host key validation. Default value is false. Type:
        /// boolean (or Expression with resultType boolean).
        /// </param>

        /// <param name="hostKeyFingerprint">The host key finger-print of the SFTP server. When SkipHostKeyValidation is
        /// false, HostKeyFingerprint should be specified. Type: string (or Expression
        /// with resultType string).
        /// </param>
        public SftpServerLinkedServiceTypeProperties(object host, object port = default(object), string authenticationType = default(string), object userName = default(object), SecretBase password = default(SecretBase), string encryptedCredential = default(string), object privateKeyPath = default(object), SecretBase privateKeyContent = default(SecretBase), SecretBase passPhrase = default(SecretBase), object skipHostKeyValidation = default(object), object hostKeyFingerprint = default(object))

        {
            this.Host = host;
            this.Port = port;
            this.AuthenticationType = authenticationType;
            this.UserName = userName;
            this.Password = password;
            this.EncryptedCredential = encryptedCredential;
            this.PrivateKeyPath = privateKeyPath;
            this.PrivateKeyContent = privateKeyContent;
            this.PassPhrase = passPhrase;
            this.SkipHostKeyValidation = skipHostKeyValidation;
            this.HostKeyFingerprint = hostKeyFingerprint;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the SFTP server host name. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "host")]
        public object Host {get; set; }

        /// <summary>
        /// Gets or sets the TCP port number that the SFTP server uses to listen for
        /// client connections. Default value is 22. Type: integer (or Expression with
        /// resultType integer), minimum: 0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "port")]
        public object Port {get; set; }

        /// <summary>
        /// Gets or sets the authentication type to be used to connect to the FTP
        /// server. Possible values include: &#39;Basic&#39;, &#39;SshPublicKey&#39;, &#39;MultiFactor&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authenticationType")]
        public string AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets the username used to log on to the SFTP server. Type: string
        /// (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userName")]
        public object UserName {get; set; }

        /// <summary>
        /// Gets or sets password to logon the SFTP server for Basic authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public SecretBase Password {get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication. Credentials
        /// are encrypted using the integration runtime credential manager. Type:
        /// string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedCredential")]
        public string EncryptedCredential {get; set; }

        /// <summary>
        /// Gets or sets the SSH private key file path for SshPublicKey authentication.
        /// Only valid for on-premises copy. For on-premises copy with SshPublicKey
        /// authentication, either PrivateKeyPath or PrivateKeyContent should be
        /// specified. SSH private key should be OpenSSH format. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateKeyPath")]
        public object PrivateKeyPath {get; set; }

        /// <summary>
        /// Gets or sets base64 encoded SSH private key content for SshPublicKey
        /// authentication. For on-premises copy with SshPublicKey authentication,
        /// either PrivateKeyPath or PrivateKeyContent should be specified. SSH private
        /// key should be OpenSSH format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateKeyContent")]
        public SecretBase PrivateKeyContent {get; set; }

        /// <summary>
        /// Gets or sets the password to decrypt the SSH private key if the SSH private
        /// key is encrypted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "passPhrase")]
        public SecretBase PassPhrase {get; set; }

        /// <summary>
        /// Gets or sets if true, skip the SSH host key validation. Default value is
        /// false. Type: boolean (or Expression with resultType boolean).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "skipHostKeyValidation")]
        public object SkipHostKeyValidation {get; set; }

        /// <summary>
        /// Gets or sets the host key finger-print of the SFTP server. When
        /// SkipHostKeyValidation is false, HostKeyFingerprint should be specified.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostKeyFingerprint")]
        public object HostKeyFingerprint {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Host == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Host");
            }











        }
    }
}