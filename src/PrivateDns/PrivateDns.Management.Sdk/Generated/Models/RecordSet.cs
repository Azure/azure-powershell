// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.PrivateDns.Models
{
    using System.Linq;

    /// <summary>
    /// Describes a DNS record set (a collection of DNS records with the same name
    /// and type) in a Private DNS zone.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class RecordSet : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the RecordSet class.
        /// </summary>
        public RecordSet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RecordSet class.
        /// </summary>

        /// <param name="id">Fully qualified resource Id for the resource. Example -
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateDnsZoneName}&#39;.
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. Example - &#39;Microsoft.Network/privateDnsZones&#39;.
        /// </param>

        /// <param name="etag">The ETag of the record set.
        /// </param>

        /// <param name="cnameRecord">The CNAME record in the record set.
        /// </param>

        /// <param name="soaRecord">The SOA record in the record set.
        /// </param>

        /// <param name="metadata">The metadata attached to the record set.
        /// </param>

        /// <param name="ttl">The TTL (time-to-live) of the records in the record set.
        /// </param>

        /// <param name="fqdn">Fully qualified domain name of the record set.
        /// </param>

        /// <param name="isAutoRegistered">Is the record set auto-registered in the Private DNS zone through a virtual
        /// network link?
        /// </param>

        /// <param name="aRecords">The list of A records in the record set.
        /// </param>

        /// <param name="aaaaRecords">The list of AAAA records in the record set.
        /// </param>

        /// <param name="mxRecords">The list of MX records in the record set.
        /// </param>

        /// <param name="ptrRecords">The list of PTR records in the record set.
        /// </param>

        /// <param name="srvRecords">The list of SRV records in the record set.
        /// </param>

        /// <param name="txtRecords">The list of TXT records in the record set.
        /// </param>
        public RecordSet(string id = default(string), string name = default(string), string type = default(string), string etag = default(string), CnameRecord cnameRecord = default(CnameRecord), SoaRecord soaRecord = default(SoaRecord), System.Collections.Generic.IDictionary<string, string> metadata = default(System.Collections.Generic.IDictionary<string, string>), long? ttl = default(long?), string fqdn = default(string), bool? isAutoRegistered = default(bool?), System.Collections.Generic.IList<ARecord> aRecords = default(System.Collections.Generic.IList<ARecord>), System.Collections.Generic.IList<AaaaRecord> aaaaRecords = default(System.Collections.Generic.IList<AaaaRecord>), System.Collections.Generic.IList<MxRecord> mxRecords = default(System.Collections.Generic.IList<MxRecord>), System.Collections.Generic.IList<PtrRecord> ptrRecords = default(System.Collections.Generic.IList<PtrRecord>), System.Collections.Generic.IList<SrvRecord> srvRecords = default(System.Collections.Generic.IList<SrvRecord>), System.Collections.Generic.IList<TxtRecord> txtRecords = default(System.Collections.Generic.IList<TxtRecord>))

        : base(id, name, type)
        {
            this.Etag = etag;
            this.CnameRecord = cnameRecord;
            this.SoaRecord = soaRecord;
            this.Metadata = metadata;
            this.Ttl = ttl;
            this.Fqdn = fqdn;
            this.IsAutoRegistered = isAutoRegistered;
            this.ARecords = aRecords;
            this.AaaaRecords = aaaaRecords;
            this.MxRecords = mxRecords;
            this.PtrRecords = ptrRecords;
            this.SrvRecords = srvRecords;
            this.TxtRecords = txtRecords;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the ETag of the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; set; }

        /// <summary>
        /// Gets or sets the CNAME record in the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.cnameRecord")]
        public CnameRecord CnameRecord {get; set; }

        /// <summary>
        /// Gets or sets the SOA record in the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.soaRecord")]
        public SoaRecord SoaRecord {get; set; }

        /// <summary>
        /// Gets or sets the metadata attached to the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.metadata")]
        public System.Collections.Generic.IDictionary<string, string> Metadata {get; set; }

        /// <summary>
        /// Gets or sets the TTL (time-to-live) of the records in the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ttl")]
        public long? Ttl {get; set; }

        /// <summary>
        /// Gets fully qualified domain name of the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.fqdn")]
        public string Fqdn {get; private set; }

        /// <summary>
        /// Gets is the record set auto-registered in the Private DNS zone through a
        /// virtual network link?
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isAutoRegistered")]
        public bool? IsAutoRegistered {get; private set; }

        /// <summary>
        /// Gets or sets the list of A records in the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.aRecords")]
        public System.Collections.Generic.IList<ARecord> ARecords {get; set; }

        /// <summary>
        /// Gets or sets the list of AAAA records in the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.aaaaRecords")]
        public System.Collections.Generic.IList<AaaaRecord> AaaaRecords {get; set; }

        /// <summary>
        /// Gets or sets the list of MX records in the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.mxRecords")]
        public System.Collections.Generic.IList<MxRecord> MxRecords {get; set; }

        /// <summary>
        /// Gets or sets the list of PTR records in the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ptrRecords")]
        public System.Collections.Generic.IList<PtrRecord> PtrRecords {get; set; }

        /// <summary>
        /// Gets or sets the list of SRV records in the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.srvRecords")]
        public System.Collections.Generic.IList<SrvRecord> SrvRecords {get; set; }

        /// <summary>
        /// Gets or sets the list of TXT records in the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.txtRecords")]
        public System.Collections.Generic.IList<TxtRecord> TxtRecords {get; set; }
    }
}