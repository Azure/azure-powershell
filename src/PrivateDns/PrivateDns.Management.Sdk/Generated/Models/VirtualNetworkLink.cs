// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.PrivateDns.Models
{
    using System.Linq;

    /// <summary>
    /// Describes a link to virtual network for a Private DNS zone.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class VirtualNetworkLink : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the VirtualNetworkLink class.
        /// </summary>
        public VirtualNetworkLink()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualNetworkLink class.
        /// </summary>

        /// <param name="id">Fully qualified resource Id for the resource. Example -
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateDnsZoneName}&#39;.
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. Example - &#39;Microsoft.Network/privateDnsZones&#39;.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="location">The Azure Region where the resource lives
        /// </param>

        /// <param name="etag">The ETag of the virtual network link.
        /// </param>

        /// <param name="resolutionPolicy">The resolution policy on the virtual network link. Only applicable for
        /// virtual network links to privatelink zones, and for A,AAAA,CNAME queries.
        /// When set to &#39;NxDomainRedirect&#39;, Azure DNS resolver falls back to public
        /// resolution if private dns query resolution results in non-existent domain
        /// response.
        /// Possible values include: &#39;Default&#39;, &#39;NxDomainRedirect&#39;</param>

        /// <param name="provisioningState">The provisioning state of the resource. This is a read-only property and
        /// any attempt to set this value will be ignored.
        /// Possible values include: &#39;Creating&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Succeeded&#39;,
        /// &#39;Failed&#39;, &#39;Canceled&#39;</param>

        /// <param name="virtualNetwork">The reference of the virtual network.
        /// </param>

        /// <param name="registrationEnabled">Is auto-registration of virtual machine records in the virtual network in
        /// the Private DNS zone enabled?
        /// </param>

        /// <param name="virtualNetworkLinkState">The status of the virtual network link to the Private DNS zone. Possible
        /// values are &#39;InProgress&#39; and &#39;Done&#39;. This is a read-only property and any
        /// attempt to set this value will be ignored.
        /// Possible values include: &#39;InProgress&#39;, &#39;Completed&#39;</param>
        public VirtualNetworkLink(string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string location = default(string), string etag = default(string), string resolutionPolicy = default(string), string provisioningState = default(string), SubResource virtualNetwork = default(SubResource), bool? registrationEnabled = default(bool?), string virtualNetworkLinkState = default(string))

        : base(id, name, type, tags, location)
        {
            this.Etag = etag;
            this.ResolutionPolicy = resolutionPolicy;
            this.ProvisioningState = provisioningState;
            this.VirtualNetwork = virtualNetwork;
            this.RegistrationEnabled = registrationEnabled;
            this.VirtualNetworkLinkState = virtualNetworkLinkState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the ETag of the virtual network link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; set; }

        /// <summary>
        /// Gets or sets the resolution policy on the virtual network link. Only
        /// applicable for virtual network links to privatelink zones, and for
        /// A,AAAA,CNAME queries. When set to &#39;NxDomainRedirect&#39;, Azure DNS resolver
        /// falls back to public resolution if private dns query resolution results in
        /// non-existent domain response. Possible values include: &#39;Default&#39;, &#39;NxDomainRedirect&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resolutionPolicy")]
        public string ResolutionPolicy {get; set; }

        /// <summary>
        /// Gets the provisioning state of the resource. This is a read-only property
        /// and any attempt to set this value will be ignored. Possible values include: &#39;Creating&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the reference of the virtual network.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualNetwork")]
        public SubResource VirtualNetwork {get; set; }

        /// <summary>
        /// Gets or sets is auto-registration of virtual machine records in the virtual
        /// network in the Private DNS zone enabled?
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.registrationEnabled")]
        public bool? RegistrationEnabled {get; set; }

        /// <summary>
        /// Gets the status of the virtual network link to the Private DNS zone.
        /// Possible values are &#39;InProgress&#39; and &#39;Done&#39;. This is a read-only property
        /// and any attempt to set this value will be ignored. Possible values include: &#39;InProgress&#39;, &#39;Completed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualNetworkLinkState")]
        public string VirtualNetworkLinkState {get; private set; }
    }
}