
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates a Virtual Instance for SAP solutions (VIS) resource
.Description
Creates a Virtual Instance for SAP solutions (VIS) resource
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Workloads.Models.Api20230401.ISapVirtualInstance
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

CONFIGURATION <ISapConfiguration>: Defines if the SAP system is being created using Azure Center for SAP solutions (ACSS) or if an existing SAP system is being registered with ACSS
  ConfigurationType <SapConfigurationType>: The configuration Type.
.Link
https://learn.microsoft.com/powershell/module/az.workloads/new-azworkloadssapvirtualinstance
#>
function New-AzWorkloadsSapVirtualInstance {
  [OutputType([Microsoft.Azure.PowerShell.Cmdlets.Workloads.Models.Api20230401.ISapVirtualInstance])]
  [CmdletBinding(DefaultParameterSetName='CreateWithDiscovery', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
  param(
      [Parameter(Mandatory)]
      [Alias('SapVirtualInstanceName')]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Path')]
      [System.String]
      # The name of the Virtual Instances for SAP solutions resource
      ${Name},
  
      [Parameter(Mandatory)]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Path')]
      [System.String]
      # The name of the resource group.
      # The name is case insensitive.
      ${ResourceGroupName},
  
      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Path')]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
      [System.String]
      # The ID of the target subscription.
      ${SubscriptionId},
  
      [Parameter(Mandatory)]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Body')]
      [System.String]
      # The virtual machine ID of the Central Server
      ${CentralServerVmId},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Body')]
      [System.String]
      # The custom storage account name for the storage account created by the service in the managed resource group created as part of VIS deployment.<br><br>Refer to the storage account naming rules [here](https://learn.microsoft.com/azure/azure-resource-manager/management/resource-name-rules#microsoftstorage).<br><br>If not provided, the service will create the storage account with a random name
      ${ManagedRgStorageAccountName},

      [Parameter(Mandatory)]
      [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Workloads.Support.SapEnvironmentType])]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Body')]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Support.SapEnvironmentType]
      # Defines the environment type - Production/Non Production.
      ${Environment},
  
      [Parameter(Mandatory)]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Body')]
      [System.String]
      # The geo-location where the resource lives
      ${Location},
  
      [Parameter(Mandatory)]
      [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Workloads.Support.SapProductType])]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Body')]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Support.SapProductType]
      # Defines the SAP Product type.
      ${SapProduct},
  
      [Parameter()]
      [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Workloads.Support.ManagedServiceIdentityType])]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Body')]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Support.ManagedServiceIdentityType]
      # Type of manage identity
      ${IdentityType},
  
      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Body')]
      [System.String]
      # Managed resource group name
      ${ManagedResourceGroupName},
  
      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Body')]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Workloads.Models.Api30.ITrackedResourceTags]))]
      [System.Collections.Hashtable]
      # Resource tags.
      ${Tag},
  
      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Body')]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Workloads.Models.Api30.IUserAssignedIdentities]))]
      [System.Collections.Hashtable]
      # User assigned identities dictionary
      ${UserAssignedIdentity},
  
      [Parameter()]
      [Alias('AzureRMContext', 'AzureCredential')]
      [ValidateNotNull()]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Azure')]
      [System.Management.Automation.PSObject]
      # The credentials, account, tenant, and subscription used for communication with Azure.
      ${DefaultProfile},
  
      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Runtime')]
      [System.Management.Automation.SwitchParameter]
      # Run the command as a job
      ${AsJob},
  
      [Parameter(DontShow)]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Runtime')]
      [System.Management.Automation.SwitchParameter]
      # Wait for .NET debugger to attach
      ${Break},
  
      [Parameter(DontShow)]
      [ValidateNotNull()]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Runtime')]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Runtime.SendAsyncStep[]]
      # SendAsync Pipeline Steps to be appended to the front of the pipeline
      ${HttpPipelineAppend},
  
      [Parameter(DontShow)]
      [ValidateNotNull()]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Runtime')]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Runtime.SendAsyncStep[]]
      # SendAsync Pipeline Steps to be prepended to the front of the pipeline
      ${HttpPipelinePrepend},
  
      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Runtime')]
      [System.Management.Automation.SwitchParameter]
      # Run the command asynchronously
      ${NoWait},
  
      [Parameter(DontShow)]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Runtime')]
      [System.Uri]
      # The URI for the proxy server to use
      ${Proxy},
  
      [Parameter(DontShow)]
      [ValidateNotNull()]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Runtime')]
      [System.Management.Automation.PSCredential]
      # Credentials for a proxy server to use for the remote call
      ${ProxyCredential},
  
      [Parameter(DontShow)]
      [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Category('Runtime')]
      [System.Management.Automation.SwitchParameter]
      # Use the default credentials for the proxy
      ${ProxyUseDefaultCredentials}
  )
  process {
      try {
            $configuration = [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Support.SapConfigurationType]::Discovery
            $discoveryConfiguration = [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Models.Api20230401.DiscoveryConfiguration]::new();
            $discoveryConfiguration.ConfigurationType = $configuration
            $discoveryConfiguration.CentralServerVMId = $CentralServerVmId
            $null = $PSBoundParameters.Remove('CentralServerVmId')
            if($PSBoundParameters.ContainsKey('ManagedRgStorageAccountName')) {
                $discoveryConfiguration.ManagedRgStorageAccountName = $ManagedRgStorageAccountName
                $null = $PSBoundParameters.Remove('ManagedRgStorageAccountName')
            }
            $null = $PSBoundParameters.Add('Configuration', $discoveryConfiguration)
            Az.Workloads.private\New-AzWorkloadsSapVirtualInstance_CreateExpanded @PSBoundParameters
        } catch {
  
          throw
      }
  
  } 
  }
  