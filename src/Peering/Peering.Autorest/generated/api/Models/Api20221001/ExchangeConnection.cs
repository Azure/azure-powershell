// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Extensions;

    /// <summary>The properties that define an exchange connection.</summary>
    public partial class ExchangeConnection :
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IExchangeConnection,
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IExchangeConnectionInternal
    {

        /// <summary>Backing field for <see cref="BgpSession" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSession _bgpSession;

        /// <summary>The BGP session associated with the connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSession BgpSession { get => (this._bgpSession = this._bgpSession ?? new Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.BgpSession()); set => this._bgpSession = value; }

        /// <summary>The maximum number of prefixes advertised over the IPv4 session.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        public int? BgpSessionMaxPrefixesAdvertisedV4 { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).MaxPrefixesAdvertisedV4; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).MaxPrefixesAdvertisedV4 = value ?? default(int); }

        /// <summary>The maximum number of prefixes advertised over the IPv6 session.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        public int? BgpSessionMaxPrefixesAdvertisedV6 { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).MaxPrefixesAdvertisedV6; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).MaxPrefixesAdvertisedV6 = value ?? default(int); }

        /// <summary>The MD5 authentication key of the session.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        public string BgpSessionMd5AuthenticationKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).Md5AuthenticationKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).Md5AuthenticationKey = value ?? null; }

        /// <summary>The IPv4 session address on Microsoft's end.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        public string BgpSessionMicrosoftSessionIPv4Address { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).MicrosoftSessionIPv4Address; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).MicrosoftSessionIPv4Address = value ?? null; }

        /// <summary>The IPv6 session address on Microsoft's end.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        public string BgpSessionMicrosoftSessionIPv6Address { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).MicrosoftSessionIPv6Address; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).MicrosoftSessionIPv6Address = value ?? null; }

        /// <summary>The IPv4 session address on peer's end.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        public string BgpSessionPeerSessionIPv4Address { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).PeerSessionIPv4Address; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).PeerSessionIPv4Address = value ?? null; }

        /// <summary>The IPv6 session address on peer's end.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        public string BgpSessionPeerSessionIPv6Address { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).PeerSessionIPv6Address; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).PeerSessionIPv6Address = value ?? null; }

        /// <summary>The IPv4 prefix that contains both ends' IPv4 addresses.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        public string BgpSessionPrefixV4 { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).SessionPrefixV4; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).SessionPrefixV4 = value ?? null; }

        /// <summary>The IPv6 prefix that contains both ends' IPv6 addresses.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        public string BgpSessionPrefixV6 { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).SessionPrefixV6; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).SessionPrefixV6 = value ?? null; }

        /// <summary>The state of the IPv4 session.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.SessionStateV4? BgpSessionStateV4 { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).SessionStateV4; }

        /// <summary>The state of the IPv6 session.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.SessionStateV6? BgpSessionStateV6 { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).SessionStateV6; }

        /// <summary>Backing field for <see cref="ConnectionIdentifier" /> property.</summary>
        private string _connectionIdentifier;

        /// <summary>The unique identifier (GUID) for the connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Owned)]
        public string ConnectionIdentifier { get => this._connectionIdentifier; set => this._connectionIdentifier = value; }

        /// <summary>Backing field for <see cref="ConnectionState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.ConnectionState? _connectionState;

        /// <summary>The state of the connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.ConnectionState? ConnectionState { get => this._connectionState; }

        /// <summary>Backing field for <see cref="ErrorMessage" /> property.</summary>
        private string _errorMessage;

        /// <summary>The error message related to the connection state, if any.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Owned)]
        public string ErrorMessage { get => this._errorMessage; }

        /// <summary>Internal Acessors for BgpSession</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSession Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IExchangeConnectionInternal.BgpSession { get => (this._bgpSession = this._bgpSession ?? new Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.BgpSession()); set { {_bgpSession = value;} } }

        /// <summary>Internal Acessors for BgpSessionStateV4</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.SessionStateV4? Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IExchangeConnectionInternal.BgpSessionStateV4 { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).SessionStateV4; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).SessionStateV4 = value; }

        /// <summary>Internal Acessors for BgpSessionStateV6</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.SessionStateV6? Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IExchangeConnectionInternal.BgpSessionStateV6 { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).SessionStateV6; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSessionInternal)BgpSession).SessionStateV6 = value; }

        /// <summary>Internal Acessors for ConnectionState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.ConnectionState? Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IExchangeConnectionInternal.ConnectionState { get => this._connectionState; set { {_connectionState = value;} } }

        /// <summary>Internal Acessors for ErrorMessage</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IExchangeConnectionInternal.ErrorMessage { get => this._errorMessage; set { {_errorMessage = value;} } }

        /// <summary>Backing field for <see cref="PeeringDbFacilityId" /> property.</summary>
        private int? _peeringDbFacilityId;

        /// <summary>The PeeringDB.com ID of the facility at which the connection has to be set up.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Owned)]
        public int? PeeringDbFacilityId { get => this._peeringDbFacilityId; set => this._peeringDbFacilityId = value; }

        /// <summary>Creates an new <see cref="ExchangeConnection" /> instance.</summary>
        public ExchangeConnection()
        {

        }
    }
    /// The properties that define an exchange connection.
    public partial interface IExchangeConnection :
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.IJsonSerializable
    {
        /// <summary>The maximum number of prefixes advertised over the IPv4 session.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum number of prefixes advertised over the IPv4 session.",
        SerializedName = @"maxPrefixesAdvertisedV4",
        PossibleTypes = new [] { typeof(int) })]
        int? BgpSessionMaxPrefixesAdvertisedV4 { get; set; }
        /// <summary>The maximum number of prefixes advertised over the IPv6 session.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum number of prefixes advertised over the IPv6 session.",
        SerializedName = @"maxPrefixesAdvertisedV6",
        PossibleTypes = new [] { typeof(int) })]
        int? BgpSessionMaxPrefixesAdvertisedV6 { get; set; }
        /// <summary>The MD5 authentication key of the session.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The MD5 authentication key of the session.",
        SerializedName = @"md5AuthenticationKey",
        PossibleTypes = new [] { typeof(string) })]
        string BgpSessionMd5AuthenticationKey { get; set; }
        /// <summary>The IPv4 session address on Microsoft's end.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv4 session address on Microsoft's end.",
        SerializedName = @"microsoftSessionIPv4Address",
        PossibleTypes = new [] { typeof(string) })]
        string BgpSessionMicrosoftSessionIPv4Address { get; set; }
        /// <summary>The IPv6 session address on Microsoft's end.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv6 session address on Microsoft's end.",
        SerializedName = @"microsoftSessionIPv6Address",
        PossibleTypes = new [] { typeof(string) })]
        string BgpSessionMicrosoftSessionIPv6Address { get; set; }
        /// <summary>The IPv4 session address on peer's end.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv4 session address on peer's end.",
        SerializedName = @"peerSessionIPv4Address",
        PossibleTypes = new [] { typeof(string) })]
        string BgpSessionPeerSessionIPv4Address { get; set; }
        /// <summary>The IPv6 session address on peer's end.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv6 session address on peer's end.",
        SerializedName = @"peerSessionIPv6Address",
        PossibleTypes = new [] { typeof(string) })]
        string BgpSessionPeerSessionIPv6Address { get; set; }
        /// <summary>The IPv4 prefix that contains both ends' IPv4 addresses.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv4 prefix that contains both ends' IPv4 addresses.",
        SerializedName = @"sessionPrefixV4",
        PossibleTypes = new [] { typeof(string) })]
        string BgpSessionPrefixV4 { get; set; }
        /// <summary>The IPv6 prefix that contains both ends' IPv6 addresses.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv6 prefix that contains both ends' IPv6 addresses.",
        SerializedName = @"sessionPrefixV6",
        PossibleTypes = new [] { typeof(string) })]
        string BgpSessionPrefixV6 { get; set; }
        /// <summary>The state of the IPv4 session.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The state of the IPv4 session.",
        SerializedName = @"sessionStateV4",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.SessionStateV4) })]
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.SessionStateV4? BgpSessionStateV4 { get;  }
        /// <summary>The state of the IPv6 session.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The state of the IPv6 session.",
        SerializedName = @"sessionStateV6",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.SessionStateV6) })]
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.SessionStateV6? BgpSessionStateV6 { get;  }
        /// <summary>The unique identifier (GUID) for the connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The unique identifier (GUID) for the connection.",
        SerializedName = @"connectionIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectionIdentifier { get; set; }
        /// <summary>The state of the connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The state of the connection.",
        SerializedName = @"connectionState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.ConnectionState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.ConnectionState? ConnectionState { get;  }
        /// <summary>The error message related to the connection state, if any.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The error message related to the connection state, if any.",
        SerializedName = @"errorMessage",
        PossibleTypes = new [] { typeof(string) })]
        string ErrorMessage { get;  }
        /// <summary>The PeeringDB.com ID of the facility at which the connection has to be set up.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The PeeringDB.com ID of the facility at which the connection has to be set up.",
        SerializedName = @"peeringDBFacilityId",
        PossibleTypes = new [] { typeof(int) })]
        int? PeeringDbFacilityId { get; set; }

    }
    /// The properties that define an exchange connection.
    internal partial interface IExchangeConnectionInternal

    {
        /// <summary>The BGP session associated with the connection.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IBgpSession BgpSession { get; set; }
        /// <summary>The maximum number of prefixes advertised over the IPv4 session.</summary>
        int? BgpSessionMaxPrefixesAdvertisedV4 { get; set; }
        /// <summary>The maximum number of prefixes advertised over the IPv6 session.</summary>
        int? BgpSessionMaxPrefixesAdvertisedV6 { get; set; }
        /// <summary>The MD5 authentication key of the session.</summary>
        string BgpSessionMd5AuthenticationKey { get; set; }
        /// <summary>The IPv4 session address on Microsoft's end.</summary>
        string BgpSessionMicrosoftSessionIPv4Address { get; set; }
        /// <summary>The IPv6 session address on Microsoft's end.</summary>
        string BgpSessionMicrosoftSessionIPv6Address { get; set; }
        /// <summary>The IPv4 session address on peer's end.</summary>
        string BgpSessionPeerSessionIPv4Address { get; set; }
        /// <summary>The IPv6 session address on peer's end.</summary>
        string BgpSessionPeerSessionIPv6Address { get; set; }
        /// <summary>The IPv4 prefix that contains both ends' IPv4 addresses.</summary>
        string BgpSessionPrefixV4 { get; set; }
        /// <summary>The IPv6 prefix that contains both ends' IPv6 addresses.</summary>
        string BgpSessionPrefixV6 { get; set; }
        /// <summary>The state of the IPv4 session.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.SessionStateV4? BgpSessionStateV4 { get; set; }
        /// <summary>The state of the IPv6 session.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.SessionStateV6? BgpSessionStateV6 { get; set; }
        /// <summary>The unique identifier (GUID) for the connection.</summary>
        string ConnectionIdentifier { get; set; }
        /// <summary>The state of the connection.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.ConnectionState? ConnectionState { get; set; }
        /// <summary>The error message related to the connection state, if any.</summary>
        string ErrorMessage { get; set; }
        /// <summary>The PeeringDB.com ID of the facility at which the connection has to be set up.</summary>
        int? PeeringDbFacilityId { get; set; }

    }
}