
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for DirectConnection.
.Description
Create an in-memory object for DirectConnection.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.DirectConnection
.Link
https://learn.microsoft.com/powershell/module/az.Peering/new-AzPeeringDirectConnectionObject
#>
function New-AzPeeringDirectConnectionObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.DirectConnection')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="The bandwidth of the connection.")]
        [int]
        $BandwidthInMbps,
        [Parameter(HelpMessage="The maximum number of prefixes advertised over the IPv4 session.")]
        [int]
        $BgpSessionMaxPrefixesAdvertisedV4,
        [Parameter(HelpMessage="The maximum number of prefixes advertised over the IPv6 session.")]
        [int]
        $BgpSessionMaxPrefixesAdvertisedV6,
        [Parameter(HelpMessage="The MD5 authentication key of the session.")]
        [string]
        $BgpSessionMd5AuthenticationKey,
        [Parameter(HelpMessage="The IPv4 session address on Microsoft's end.")]
        [string]
        $BgpSessionMicrosoftSessionIPv4Address,
        [Parameter(HelpMessage="The IPv6 session address on Microsoft's end.")]
        [string]
        $BgpSessionMicrosoftSessionIPv6Address,
        [Parameter(HelpMessage="The IPv4 session address on peer's end.")]
        [string]
        $BgpSessionPeerSessionIPv4Address,
        [Parameter(HelpMessage="The IPv6 session address on peer's end.")]
        [string]
        $BgpSessionPeerSessionIPv6Address,
        [Parameter(HelpMessage="The IPv4 prefix that contains both ends' IPv4 addresses.")]
        [string]
        $BgpSessionPrefixV4,
        [Parameter(HelpMessage="The IPv6 prefix that contains both ends' IPv6 addresses.")]
        [string]
        $BgpSessionPrefixV6,
        [Parameter(HelpMessage="The unique identifier (GUID) for the connection.")]
        [string]
        $ConnectionIdentifier,
        [Parameter(HelpMessage="The PeeringDB.com ID of the facility at which the connection has to be set up.")]
        [int]
        $PeeringDbFacilityId,
        [Parameter(HelpMessage="The field indicating if Microsoft provides session ip addresses.")]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.SessionAddressProvider])]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.SessionAddressProvider]
        $SessionAddressProvider,
        [Parameter(HelpMessage="The flag that indicates whether or not the connection is used for peering service.")]
        [bool]
        $UseForPeeringService
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.DirectConnection]::New()

        if ($PSBoundParameters.ContainsKey('BandwidthInMbps')) {
            $Object.BandwidthInMbps = $BandwidthInMbps
        }
        if ($PSBoundParameters.ContainsKey('BgpSessionMaxPrefixesAdvertisedV4')) {
            $Object.BgpSessionMaxPrefixesAdvertisedV4 = $BgpSessionMaxPrefixesAdvertisedV4
        }
        if ($PSBoundParameters.ContainsKey('BgpSessionMaxPrefixesAdvertisedV6')) {
            $Object.BgpSessionMaxPrefixesAdvertisedV6 = $BgpSessionMaxPrefixesAdvertisedV6
        }
        if ($PSBoundParameters.ContainsKey('BgpSessionMd5AuthenticationKey')) {
            $Object.BgpSessionMd5AuthenticationKey = $BgpSessionMd5AuthenticationKey
        }
        if ($PSBoundParameters.ContainsKey('BgpSessionMicrosoftSessionIPv4Address')) {
            $Object.BgpSessionMicrosoftSessionIPv4Address = $BgpSessionMicrosoftSessionIPv4Address
        }
        if ($PSBoundParameters.ContainsKey('BgpSessionMicrosoftSessionIPv6Address')) {
            $Object.BgpSessionMicrosoftSessionIPv6Address = $BgpSessionMicrosoftSessionIPv6Address
        }
        if ($PSBoundParameters.ContainsKey('BgpSessionPeerSessionIPv4Address')) {
            $Object.BgpSessionPeerSessionIPv4Address = $BgpSessionPeerSessionIPv4Address
        }
        if ($PSBoundParameters.ContainsKey('BgpSessionPeerSessionIPv6Address')) {
            $Object.BgpSessionPeerSessionIPv6Address = $BgpSessionPeerSessionIPv6Address
        }
        if ($PSBoundParameters.ContainsKey('BgpSessionPrefixV4')) {
            $Object.BgpSessionPrefixV4 = $BgpSessionPrefixV4
        }
        if ($PSBoundParameters.ContainsKey('BgpSessionPrefixV6')) {
            $Object.BgpSessionPrefixV6 = $BgpSessionPrefixV6
        }
        if ($PSBoundParameters.ContainsKey('ConnectionIdentifier')) {
            $Object.ConnectionIdentifier = $ConnectionIdentifier
        }
        if ($PSBoundParameters.ContainsKey('PeeringDbFacilityId')) {
            $Object.PeeringDbFacilityId = $PeeringDbFacilityId
        }
        if ($PSBoundParameters.ContainsKey('SessionAddressProvider')) {
            $Object.SessionAddressProvider = $SessionAddressProvider
        }
        if ($PSBoundParameters.ContainsKey('UseForPeeringService')) {
            $Object.UseForPeeringService = $UseForPeeringService
        }
        return $Object
    }
}

