
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for ExchangeConnection.
.Description
Create an in-memory object for ExchangeConnection.
.Example
$md5Key = "******"

New-AzPeeringExchangeConnectionObject -BgpSessionMaxPrefixesAdvertisedV4 20000 -BgpSessionMaxPrefixesAdvertisedV6 0 -BgpSessionMd5AuthenticationKey $md5Key -BgpSessionMicrosoftSessionIPv4Address 1.1.1.1 -BgpSessionPeerSessionIPv4Address 1.1.1.0 -BgpSessionPrefixV4 1.1.1.1/31 -PeeringDbFacilityId 82 -ConnectionIdentifier c111111111111

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.ExchangeConnection
.Link
https://learn.microsoft.com/powershell/module/az.Peering/new-AzPeeringExchangeConnectionObject
#>
function New-AzPeeringExchangeConnectionObject {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.ExchangeConnection])]
[CmdletBinding(PositionalBinding=$false)]
param(
    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Peering.Category('Body')]
    [System.Int32]
    # The maximum number of prefixes advertised over the IPv4 session.
    ${BgpSessionMaxPrefixesAdvertisedV4},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Peering.Category('Body')]
    [System.Int32]
    # The maximum number of prefixes advertised over the IPv6 session.
    ${BgpSessionMaxPrefixesAdvertisedV6},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Peering.Category('Body')]
    [System.String]
    # The MD5 authentication key of the session.
    ${BgpSessionMd5AuthenticationKey},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Peering.Category('Body')]
    [System.String]
    # The IPv4 session address on Microsoft's end.
    ${BgpSessionMicrosoftSessionIPv4Address},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Peering.Category('Body')]
    [System.String]
    # The IPv6 session address on Microsoft's end.
    ${BgpSessionMicrosoftSessionIPv6Address},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Peering.Category('Body')]
    [System.String]
    # The IPv4 session address on peer's end.
    ${BgpSessionPeerSessionIPv4Address},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Peering.Category('Body')]
    [System.String]
    # The IPv6 session address on peer's end.
    ${BgpSessionPeerSessionIPv6Address},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Peering.Category('Body')]
    [System.String]
    # The IPv4 prefix that contains both ends' IPv4 addresses.
    ${BgpSessionPrefixV4},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Peering.Category('Body')]
    [System.String]
    # The IPv6 prefix that contains both ends' IPv6 addresses.
    ${BgpSessionPrefixV6},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Peering.Category('Body')]
    [System.String]
    # The unique identifier (GUID) for the connection.
    ${ConnectionIdentifier},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Peering.Category('Body')]
    [System.Int32]
    # The PeeringDB.com ID of the facility at which the connection has to be set up.
    ${PeeringDbFacilityId}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Peering.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            __AllParameterSets = 'Az.Peering.custom\New-AzPeeringExchangeConnectionObject';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Peering.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
