// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DevTestLabs
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for CostsOperations
    /// </summary>
    public static partial class CostsOperationsExtensions
    {
        /// <summary>
        /// Get cost.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='name'>
        /// The name of the cost.
        /// </param>
        /// <param name='expand'>
        /// Specify the $expand query. Example: &#39;properties($expand=labCostDetails)&#39;
        /// </param>
        public static LabCost Get(this ICostsOperations operations, string labName, string name, string expand = default(string))
        {
                return ((ICostsOperations)operations).GetAsync(labName, name, expand).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get cost.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='name'>
        /// The name of the cost.
        /// </param>
        /// <param name='expand'>
        /// Specify the $expand query. Example: &#39;properties($expand=labCostDetails)&#39;
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<LabCost> GetAsync(this ICostsOperations operations, string labName, string name, string expand = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(labName, name, expand, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or replace an existing cost.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='name'>
        /// The name of the cost.
        /// </param>
        public static LabCost CreateOrUpdate(this ICostsOperations operations, string labName, string name, LabCost labCost)
        {
                return ((ICostsOperations)operations).CreateOrUpdateAsync(labName, name, labCost).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or replace an existing cost.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='name'>
        /// The name of the cost.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<LabCost> CreateOrUpdateAsync(this ICostsOperations operations, string labName, string name, LabCost labCost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(labName, name, labCost, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
