// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DevTestLabs
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for PoliciesOperations
    /// </summary>
    public static partial class PoliciesOperationsExtensions
    {
        /// <summary>
        /// List policies in a given policy set.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='policySetName'>
        /// The name of the policy set.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Policy> List(this IPoliciesOperations operations, string labName, string policySetName, Microsoft.Rest.Azure.OData.ODataQuery<Policy> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<Policy>))
        {
                return ((IPoliciesOperations)operations).ListAsync(labName, policySetName, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List policies in a given policy set.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='policySetName'>
        /// The name of the policy set.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Policy>> ListAsync(this IPoliciesOperations operations, string labName, string policySetName, Microsoft.Rest.Azure.OData.ODataQuery<Policy> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<Policy>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(labName, policySetName, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='policySetName'>
        /// The name of the policy set.
        /// </param>
        /// <param name='name'>
        /// The name of the policy.
        /// </param>
        /// <param name='expand'>
        /// Specify the $expand query. Example: &#39;properties($select=description)&#39;
        /// </param>
        public static Policy Get(this IPoliciesOperations operations, string labName, string policySetName, string name, string expand = default(string))
        {
                return ((IPoliciesOperations)operations).GetAsync(labName, policySetName, name, expand).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='policySetName'>
        /// The name of the policy set.
        /// </param>
        /// <param name='name'>
        /// The name of the policy.
        /// </param>
        /// <param name='expand'>
        /// Specify the $expand query. Example: &#39;properties($select=description)&#39;
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Policy> GetAsync(this IPoliciesOperations operations, string labName, string policySetName, string name, string expand = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(labName, policySetName, name, expand, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or replace an existing policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='policySetName'>
        /// The name of the policy set.
        /// </param>
        /// <param name='name'>
        /// The name of the policy.
        /// </param>
        public static Policy CreateOrUpdate(this IPoliciesOperations operations, string labName, string policySetName, string name, Policy policy)
        {
                return ((IPoliciesOperations)operations).CreateOrUpdateAsync(labName, policySetName, name, policy).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or replace an existing policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='policySetName'>
        /// The name of the policy set.
        /// </param>
        /// <param name='name'>
        /// The name of the policy.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Policy> CreateOrUpdateAsync(this IPoliciesOperations operations, string labName, string policySetName, string name, Policy policy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(labName, policySetName, name, policy, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='policySetName'>
        /// The name of the policy set.
        /// </param>
        /// <param name='name'>
        /// The name of the policy.
        /// </param>
        public static void Delete(this IPoliciesOperations operations, string labName, string policySetName, string name)
        {
                ((IPoliciesOperations)operations).DeleteAsync(labName, policySetName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='policySetName'>
        /// The name of the policy set.
        /// </param>
        /// <param name='name'>
        /// The name of the policy.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IPoliciesOperations operations, string labName, string policySetName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(labName, policySetName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Modify properties of policies.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='policySetName'>
        /// The name of the policy set.
        /// </param>
        /// <param name='name'>
        /// The name of the policy.
        /// </param>
        public static Policy Update(this IPoliciesOperations operations, string labName, string policySetName, string name, PolicyFragment policy)
        {
                return ((IPoliciesOperations)operations).UpdateAsync(labName, policySetName, name, policy).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Modify properties of policies.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='policySetName'>
        /// The name of the policy set.
        /// </param>
        /// <param name='name'>
        /// The name of the policy.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Policy> UpdateAsync(this IPoliciesOperations operations, string labName, string policySetName, string name, PolicyFragment policy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(labName, policySetName, name, policy, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List policies in a given policy set.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Policy> ListNext(this IPoliciesOperations operations, string nextPageLink)
        {
                return ((IPoliciesOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List policies in a given policy set.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Policy>> ListNextAsync(this IPoliciesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
