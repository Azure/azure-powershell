// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DevTestLabs
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DisksOperations
    /// </summary>
    public static partial class DisksOperationsExtensions
    {
        /// <summary>
        /// List disks in a given user profile.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Disk> List(this IDisksOperations operations, string labName, string userName, Microsoft.Rest.Azure.OData.ODataQuery<Disk> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<Disk>))
        {
                return ((IDisksOperations)operations).ListAsync(labName, userName, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List disks in a given user profile.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Disk>> ListAsync(this IDisksOperations operations, string labName, string userName, Microsoft.Rest.Azure.OData.ODataQuery<Disk> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<Disk>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(labName, userName, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get disk.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the disk.
        /// </param>
        /// <param name='expand'>
        /// Specify the $expand query. Example: &#39;properties($select=diskType)&#39;
        /// </param>
        public static Disk Get(this IDisksOperations operations, string labName, string userName, string name, string expand = default(string))
        {
                return ((IDisksOperations)operations).GetAsync(labName, userName, name, expand).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get disk.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the disk.
        /// </param>
        /// <param name='expand'>
        /// Specify the $expand query. Example: &#39;properties($select=diskType)&#39;
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Disk> GetAsync(this IDisksOperations operations, string labName, string userName, string name, string expand = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(labName, userName, name, expand, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or replace an existing disk. This operation can take a while to
        /// complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the disk.
        /// </param>
        public static Disk CreateOrUpdate(this IDisksOperations operations, string labName, string userName, string name, Disk disk)
        {
                return ((IDisksOperations)operations).CreateOrUpdateAsync(labName, userName, name, disk).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or replace an existing disk. This operation can take a while to
        /// complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the disk.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Disk> CreateOrUpdateAsync(this IDisksOperations operations, string labName, string userName, string name, Disk disk, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(labName, userName, name, disk, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete disk. This operation can take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the disk.
        /// </param>
        public static void Delete(this IDisksOperations operations, string labName, string userName, string name)
        {
                ((IDisksOperations)operations).DeleteAsync(labName, userName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete disk. This operation can take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the disk.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IDisksOperations operations, string labName, string userName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(labName, userName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Attach and create the lease of the disk to the virtual machine. This
        /// operation can take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the disk.
        /// </param>
        public static void Attach(this IDisksOperations operations, string labName, string userName, string name, AttachDiskProperties attachDiskProperties)
        {
                ((IDisksOperations)operations).AttachAsync(labName, userName, name, attachDiskProperties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Attach and create the lease of the disk to the virtual machine. This
        /// operation can take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the disk.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task AttachAsync(this IDisksOperations operations, string labName, string userName, string name, AttachDiskProperties attachDiskProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.AttachWithHttpMessagesAsync(labName, userName, name, attachDiskProperties, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Detach and break the lease of the disk attached to the virtual machine.
        /// This operation can take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the disk.
        /// </param>
        public static void Detach(this IDisksOperations operations, string labName, string userName, string name, DetachDiskProperties detachDiskProperties)
        {
                ((IDisksOperations)operations).DetachAsync(labName, userName, name, detachDiskProperties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Detach and break the lease of the disk attached to the virtual machine.
        /// This operation can take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the disk.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DetachAsync(this IDisksOperations operations, string labName, string userName, string name, DetachDiskProperties detachDiskProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DetachWithHttpMessagesAsync(labName, userName, name, detachDiskProperties, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Create or replace an existing disk. This operation can take a while to
        /// complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the disk.
        /// </param>
        public static Disk BeginCreateOrUpdate(this IDisksOperations operations, string labName, string userName, string name, Disk disk)
        {
                return ((IDisksOperations)operations).BeginCreateOrUpdateAsync(labName, userName, name, disk).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or replace an existing disk. This operation can take a while to
        /// complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the disk.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Disk> BeginCreateOrUpdateAsync(this IDisksOperations operations, string labName, string userName, string name, Disk disk, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(labName, userName, name, disk, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete disk. This operation can take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the disk.
        /// </param>
        public static void BeginDelete(this IDisksOperations operations, string labName, string userName, string name)
        {
                ((IDisksOperations)operations).BeginDeleteAsync(labName, userName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete disk. This operation can take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the disk.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IDisksOperations operations, string labName, string userName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(labName, userName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Attach and create the lease of the disk to the virtual machine. This
        /// operation can take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the disk.
        /// </param>
        public static void BeginAttach(this IDisksOperations operations, string labName, string userName, string name, AttachDiskProperties attachDiskProperties)
        {
                ((IDisksOperations)operations).BeginAttachAsync(labName, userName, name, attachDiskProperties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Attach and create the lease of the disk to the virtual machine. This
        /// operation can take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the disk.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginAttachAsync(this IDisksOperations operations, string labName, string userName, string name, AttachDiskProperties attachDiskProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginAttachWithHttpMessagesAsync(labName, userName, name, attachDiskProperties, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Detach and break the lease of the disk attached to the virtual machine.
        /// This operation can take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the disk.
        /// </param>
        public static void BeginDetach(this IDisksOperations operations, string labName, string userName, string name, DetachDiskProperties detachDiskProperties)
        {
                ((IDisksOperations)operations).BeginDetachAsync(labName, userName, name, detachDiskProperties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Detach and break the lease of the disk attached to the virtual machine.
        /// This operation can take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the disk.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDetachAsync(this IDisksOperations operations, string labName, string userName, string name, DetachDiskProperties detachDiskProperties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDetachWithHttpMessagesAsync(labName, userName, name, detachDiskProperties, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// List disks in a given user profile.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Disk> ListNext(this IDisksOperations operations, string nextPageLink)
        {
                return ((IDisksOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List disks in a given user profile.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Disk>> ListNextAsync(this IDisksOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
