// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DevTestLabs
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for LabsOperations
    /// </summary>
    public static partial class LabsOperationsExtensions
    {
        /// <summary>
        /// List labs in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Lab> ListBySubscription(this ILabsOperations operations, Microsoft.Rest.Azure.OData.ODataQuery<Lab> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<Lab>))
        {
                return ((ILabsOperations)operations).ListBySubscriptionAsync(odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List labs in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Lab>> ListBySubscriptionAsync(this ILabsOperations operations, Microsoft.Rest.Azure.OData.ODataQuery<Lab> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<Lab>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List labs in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Lab> ListByResourceGroup(this ILabsOperations operations, Microsoft.Rest.Azure.OData.ODataQuery<Lab> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<Lab>))
        {
                return ((ILabsOperations)operations).ListByResourceGroupAsync(odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List labs in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Lab>> ListByResourceGroupAsync(this ILabsOperations operations, Microsoft.Rest.Azure.OData.ODataQuery<Lab> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<Lab>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get lab.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        /// <param name='expand'>
        /// Specify the $expand query. Example:
        /// &#39;properties($select=defaultStorageAccount)&#39;
        /// </param>
        public static Lab Get(this ILabsOperations operations, string name, string expand = default(string))
        {
                return ((ILabsOperations)operations).GetAsync(name, expand).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get lab.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        /// <param name='expand'>
        /// Specify the $expand query. Example:
        /// &#39;properties($select=defaultStorageAccount)&#39;
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Lab> GetAsync(this ILabsOperations operations, string name, string expand = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(name, expand, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or replace an existing lab. This operation can take a while to
        /// complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        public static Lab CreateOrUpdate(this ILabsOperations operations, string name, Lab lab)
        {
                return ((ILabsOperations)operations).CreateOrUpdateAsync(name, lab).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or replace an existing lab. This operation can take a while to
        /// complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Lab> CreateOrUpdateAsync(this ILabsOperations operations, string name, Lab lab, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(name, lab, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete lab. This operation can take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        public static void Delete(this ILabsOperations operations, string name)
        {
                ((ILabsOperations)operations).DeleteAsync(name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete lab. This operation can take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this ILabsOperations operations, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Modify properties of labs.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        public static Lab Update(this ILabsOperations operations, string name, LabFragment lab)
        {
                return ((ILabsOperations)operations).UpdateAsync(name, lab).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Modify properties of labs.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Lab> UpdateAsync(this ILabsOperations operations, string name, LabFragment lab, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(name, lab, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Claim a random claimable virtual machine in the lab. This operation can
        /// take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        public static void ClaimAnyVm(this ILabsOperations operations, string name)
        {
                ((ILabsOperations)operations).ClaimAnyVmAsync(name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Claim a random claimable virtual machine in the lab. This operation can
        /// take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ClaimAnyVmAsync(this ILabsOperations operations, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.ClaimAnyVmWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Create virtual machines in a lab. This operation can take a while to
        /// complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        public static void CreateEnvironment(this ILabsOperations operations, string name, LabVirtualMachineCreationParameter labVirtualMachineCreationParameter)
        {
                ((ILabsOperations)operations).CreateEnvironmentAsync(name, labVirtualMachineCreationParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create virtual machines in a lab. This operation can take a while to
        /// complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task CreateEnvironmentAsync(this ILabsOperations operations, string name, LabVirtualMachineCreationParameter labVirtualMachineCreationParameter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.CreateEnvironmentWithHttpMessagesAsync(name, labVirtualMachineCreationParameter, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Exports the lab resource usage into a storage account This operation can
        /// take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        public static void ExportResourceUsage(this ILabsOperations operations, string name, ExportResourceUsageParameters exportResourceUsageParameters)
        {
                ((ILabsOperations)operations).ExportResourceUsageAsync(name, exportResourceUsageParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Exports the lab resource usage into a storage account This operation can
        /// take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ExportResourceUsageAsync(this ILabsOperations operations, string name, ExportResourceUsageParameters exportResourceUsageParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.ExportResourceUsageWithHttpMessagesAsync(name, exportResourceUsageParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Generate a URI for uploading custom disk images to a Lab.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        public static GenerateUploadUriResponse GenerateUploadUri(this ILabsOperations operations, string name, GenerateUploadUriParameter generateUploadUriParameter)
        {
                return ((ILabsOperations)operations).GenerateUploadUriAsync(name, generateUploadUriParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Generate a URI for uploading custom disk images to a Lab.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<GenerateUploadUriResponse> GenerateUploadUriAsync(this ILabsOperations operations, string name, GenerateUploadUriParameter generateUploadUriParameter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GenerateUploadUriWithHttpMessagesAsync(name, generateUploadUriParameter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List disk images available for custom image creation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<LabVhd> ListVhds(this ILabsOperations operations, string name)
        {
                return ((ILabsOperations)operations).ListVhdsAsync(name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List disk images available for custom image creation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<LabVhd>> ListVhdsAsync(this ILabsOperations operations, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListVhdsWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or replace an existing lab. This operation can take a while to
        /// complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        public static Lab BeginCreateOrUpdate(this ILabsOperations operations, string name, Lab lab)
        {
                return ((ILabsOperations)operations).BeginCreateOrUpdateAsync(name, lab).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or replace an existing lab. This operation can take a while to
        /// complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Lab> BeginCreateOrUpdateAsync(this ILabsOperations operations, string name, Lab lab, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(name, lab, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete lab. This operation can take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        public static void BeginDelete(this ILabsOperations operations, string name)
        {
                ((ILabsOperations)operations).BeginDeleteAsync(name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete lab. This operation can take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this ILabsOperations operations, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Claim a random claimable virtual machine in the lab. This operation can
        /// take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        public static void BeginClaimAnyVm(this ILabsOperations operations, string name)
        {
                ((ILabsOperations)operations).BeginClaimAnyVmAsync(name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Claim a random claimable virtual machine in the lab. This operation can
        /// take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginClaimAnyVmAsync(this ILabsOperations operations, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginClaimAnyVmWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Create virtual machines in a lab. This operation can take a while to
        /// complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        public static void BeginCreateEnvironment(this ILabsOperations operations, string name, LabVirtualMachineCreationParameter labVirtualMachineCreationParameter)
        {
                ((ILabsOperations)operations).BeginCreateEnvironmentAsync(name, labVirtualMachineCreationParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create virtual machines in a lab. This operation can take a while to
        /// complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginCreateEnvironmentAsync(this ILabsOperations operations, string name, LabVirtualMachineCreationParameter labVirtualMachineCreationParameter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginCreateEnvironmentWithHttpMessagesAsync(name, labVirtualMachineCreationParameter, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Exports the lab resource usage into a storage account This operation can
        /// take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        public static void BeginExportResourceUsage(this ILabsOperations operations, string name, ExportResourceUsageParameters exportResourceUsageParameters)
        {
                ((ILabsOperations)operations).BeginExportResourceUsageAsync(name, exportResourceUsageParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Exports the lab resource usage into a storage account This operation can
        /// take a while to complete.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// The name of the lab.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginExportResourceUsageAsync(this ILabsOperations operations, string name, ExportResourceUsageParameters exportResourceUsageParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginExportResourceUsageWithHttpMessagesAsync(name, exportResourceUsageParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// List labs in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Lab> ListBySubscriptionNext(this ILabsOperations operations, string nextPageLink)
        {
                return ((ILabsOperations)operations).ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List labs in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Lab>> ListBySubscriptionNextAsync(this ILabsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List labs in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Lab> ListByResourceGroupNext(this ILabsOperations operations, string nextPageLink)
        {
                return ((ILabsOperations)operations).ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List labs in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Lab>> ListByResourceGroupNextAsync(this ILabsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List disk images available for custom image creation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<LabVhd> ListVhdsNext(this ILabsOperations operations, string nextPageLink)
        {
                return ((ILabsOperations)operations).ListVhdsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List disk images available for custom image creation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<LabVhd>> ListVhdsNextAsync(this ILabsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListVhdsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
