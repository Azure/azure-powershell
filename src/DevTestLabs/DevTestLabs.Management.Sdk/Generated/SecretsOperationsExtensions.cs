// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DevTestLabs
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for SecretsOperations
    /// </summary>
    public static partial class SecretsOperationsExtensions
    {
        /// <summary>
        /// List secrets in a given user profile.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Secret> List(this ISecretsOperations operations, string labName, string userName, Microsoft.Rest.Azure.OData.ODataQuery<Secret> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<Secret>))
        {
                return ((ISecretsOperations)operations).ListAsync(labName, userName, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List secrets in a given user profile.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Secret>> ListAsync(this ISecretsOperations operations, string labName, string userName, Microsoft.Rest.Azure.OData.ODataQuery<Secret> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<Secret>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(labName, userName, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the secret.
        /// </param>
        /// <param name='expand'>
        /// Specify the $expand query. Example: &#39;properties($select=value)&#39;
        /// </param>
        public static Secret Get(this ISecretsOperations operations, string labName, string userName, string name, string expand = default(string))
        {
                return ((ISecretsOperations)operations).GetAsync(labName, userName, name, expand).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the secret.
        /// </param>
        /// <param name='expand'>
        /// Specify the $expand query. Example: &#39;properties($select=value)&#39;
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Secret> GetAsync(this ISecretsOperations operations, string labName, string userName, string name, string expand = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(labName, userName, name, expand, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or replace an existing secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the secret.
        /// </param>
        public static Secret CreateOrUpdate(this ISecretsOperations operations, string labName, string userName, string name, Secret secret)
        {
                return ((ISecretsOperations)operations).CreateOrUpdateAsync(labName, userName, name, secret).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or replace an existing secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the secret.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Secret> CreateOrUpdateAsync(this ISecretsOperations operations, string labName, string userName, string name, Secret secret, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(labName, userName, name, secret, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the secret.
        /// </param>
        public static void Delete(this ISecretsOperations operations, string labName, string userName, string name)
        {
                ((ISecretsOperations)operations).DeleteAsync(labName, userName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='userName'>
        /// The name of the user profile.
        /// </param>
        /// <param name='name'>
        /// The name of the secret.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this ISecretsOperations operations, string labName, string userName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(labName, userName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// List secrets in a given user profile.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Secret> ListNext(this ISecretsOperations operations, string nextPageLink)
        {
                return ((ISecretsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List secrets in a given user profile.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Secret>> ListNextAsync(this ISecretsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
