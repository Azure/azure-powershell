// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DevTestLabs.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of a virtual machine returned by the Microsoft.Compute API.
    /// </summary>
    public partial class ComputeVmPropertiesFragment
    {
        /// <summary>
        /// Initializes a new instance of the ComputeVmPropertiesFragment class.
        /// </summary>
        public ComputeVmPropertiesFragment()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ComputeVmPropertiesFragment class.
        /// </summary>

        /// <param name="statuses">Gets the statuses of the virtual machine.
        /// </param>

        /// <param name="osType">Gets the OS type of the virtual machine.
        /// </param>

        /// <param name="vmSize">Gets the size of the virtual machine.
        /// </param>

        /// <param name="networkInterfaceId">Gets the network interface ID of the virtual machine.
        /// </param>

        /// <param name="osDiskId">Gets OS disk blob uri for the virtual machine.
        /// </param>

        /// <param name="dataDiskIds">Gets data disks blob uri for the virtual machine.
        /// </param>

        /// <param name="dataDisks">Gets all data disks attached to the virtual machine.
        /// </param>
        public ComputeVmPropertiesFragment(System.Collections.Generic.IList<ComputeVmInstanceViewStatusFragment> statuses = default(System.Collections.Generic.IList<ComputeVmInstanceViewStatusFragment>), string osType = default(string), string vmSize = default(string), string networkInterfaceId = default(string), string osDiskId = default(string), System.Collections.Generic.IList<string> dataDiskIds = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<ComputeDataDiskFragment> dataDisks = default(System.Collections.Generic.IList<ComputeDataDiskFragment>))

        {
            this.Statuses = statuses;
            this.OSType = osType;
            this.VMSize = vmSize;
            this.NetworkInterfaceId = networkInterfaceId;
            this.OSDiskId = osDiskId;
            this.DataDiskIds = dataDiskIds;
            this.DataDisks = dataDisks;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets gets the statuses of the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "statuses")]
        public System.Collections.Generic.IList<ComputeVmInstanceViewStatusFragment> Statuses {get; set; }

        /// <summary>
        /// Gets or sets gets the OS type of the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osType")]
        public string OSType {get; set; }

        /// <summary>
        /// Gets or sets gets the size of the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmSize")]
        public string VMSize {get; set; }

        /// <summary>
        /// Gets or sets gets the network interface ID of the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkInterfaceId")]
        public string NetworkInterfaceId {get; set; }

        /// <summary>
        /// Gets or sets gets OS disk blob uri for the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osDiskId")]
        public string OSDiskId {get; set; }

        /// <summary>
        /// Gets or sets gets data disks blob uri for the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataDiskIds")]
        public System.Collections.Generic.IList<string> DataDiskIds {get; set; }

        /// <summary>
        /// Gets or sets gets all data disks attached to the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataDisks")]
        public System.Collections.Generic.IList<ComputeDataDiskFragment> DataDisks {get; set; }
    }
}