// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DevTestLabs.Models
{
    using System.Linq;

    /// <summary>
    /// A Policy.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Policy : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Policy class.
        /// </summary>
        public Policy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Policy class.
        /// </summary>

        /// <param name="id">The identifier of the resource.
        /// </param>

        /// <param name="name">The name of the resource.
        /// </param>

        /// <param name="type">The type of the resource.
        /// </param>

        /// <param name="location">The location of the resource.
        /// </param>

        /// <param name="tags">The tags of the resource.
        /// </param>

        /// <param name="description">The description of the policy.
        /// </param>

        /// <param name="status">The status of the policy.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="factName">The fact name of the policy (e.g. LabVmCount, LabVmSize,
        /// MaxVmsAllowedPerLab, etc.
        /// Possible values include: &#39;UserOwnedLabVmCount&#39;,
        /// &#39;UserOwnedLabPremiumVmCount&#39;, &#39;LabVmCount&#39;, &#39;LabPremiumVmCount&#39;,
        /// &#39;LabVmSize&#39;, &#39;GalleryImage&#39;, &#39;UserOwnedLabVmCountInSubnet&#39;, &#39;LabTargetCost&#39;</param>

        /// <param name="factData">The fact data of the policy.
        /// </param>

        /// <param name="threshold">The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON
        /// array of values for AllowedValuesPolicy).
        /// </param>

        /// <param name="evaluatorType">The evaluator type of the policy (i.e. AllowedValuesPolicy,
        /// MaxValuePolicy).
        /// Possible values include: &#39;AllowedValuesPolicy&#39;, &#39;MaxValuePolicy&#39;</param>

        /// <param name="createdDate">The creation date of the policy.
        /// </param>

        /// <param name="provisioningState">The provisioning status of the resource.
        /// </param>

        /// <param name="uniqueIdentifier">The unique immutable identifier of a resource (Guid).
        /// </param>
        public Policy(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string description = default(string), string status = default(string), string factName = default(string), string factData = default(string), string threshold = default(string), string evaluatorType = default(string), System.DateTime? createdDate = default(System.DateTime?), string provisioningState = default(string), string uniqueIdentifier = default(string))

        : base(id, name, type, location, tags)
        {
            this.Description = description;
            this.Status = status;
            this.FactName = factName;
            this.FactData = factData;
            this.Threshold = threshold;
            this.EvaluatorType = evaluatorType;
            this.CreatedDate = createdDate;
            this.ProvisioningState = provisioningState;
            this.UniqueIdentifier = uniqueIdentifier;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the description of the policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets the status of the policy. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public string Status {get; set; }

        /// <summary>
        /// Gets or sets the fact name of the policy (e.g. LabVmCount, LabVmSize,
        /// MaxVmsAllowedPerLab, etc. Possible values include: &#39;UserOwnedLabVmCount&#39;, &#39;UserOwnedLabPremiumVmCount&#39;, &#39;LabVmCount&#39;, &#39;LabPremiumVmCount&#39;, &#39;LabVmSize&#39;, &#39;GalleryImage&#39;, &#39;UserOwnedLabVmCountInSubnet&#39;, &#39;LabTargetCost&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.factName")]
        public string FactName {get; set; }

        /// <summary>
        /// Gets or sets the fact data of the policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.factData")]
        public string FactData {get; set; }

        /// <summary>
        /// Gets or sets the threshold of the policy (i.e. a number for MaxValuePolicy,
        /// and a JSON array of values for AllowedValuesPolicy).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.threshold")]
        public string Threshold {get; set; }

        /// <summary>
        /// Gets or sets the evaluator type of the policy (i.e. AllowedValuesPolicy,
        /// MaxValuePolicy). Possible values include: &#39;AllowedValuesPolicy&#39;, &#39;MaxValuePolicy&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.evaluatorType")]
        public string EvaluatorType {get; set; }

        /// <summary>
        /// Gets the creation date of the policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.createdDate")]
        public System.DateTime? CreatedDate {get; private set; }

        /// <summary>
        /// Gets or sets the provisioning status of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; set; }

        /// <summary>
        /// Gets or sets the unique immutable identifier of a resource (Guid).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.uniqueIdentifier")]
        public string UniqueIdentifier {get; set; }
    }
}