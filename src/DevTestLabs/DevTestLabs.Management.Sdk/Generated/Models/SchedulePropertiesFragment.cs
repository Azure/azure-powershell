// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DevTestLabs.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of a schedule.
    /// </summary>
    public partial class SchedulePropertiesFragment
    {
        /// <summary>
        /// Initializes a new instance of the SchedulePropertiesFragment class.
        /// </summary>
        public SchedulePropertiesFragment()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SchedulePropertiesFragment class.
        /// </summary>

        /// <param name="status">The status of the schedule (i.e. Enabled, Disabled)
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="taskType">The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
        /// </param>

        /// <param name="weeklyRecurrence">If the schedule will occur only some days of the week, specify the weekly
        /// recurrence.
        /// </param>

        /// <param name="dailyRecurrence">If the schedule will occur once each day of the week, specify the daily
        /// recurrence.
        /// </param>

        /// <param name="hourlyRecurrence">If the schedule will occur multiple times a day, specify the hourly
        /// recurrence.
        /// </param>

        /// <param name="timeZoneId">The time zone ID (e.g. Pacific Standard time).
        /// </param>

        /// <param name="notificationSettings">Notification settings.
        /// </param>

        /// <param name="targetResourceId">The resource ID to which the schedule belongs
        /// </param>

        /// <param name="provisioningState">The provisioning status of the resource.
        /// </param>

        /// <param name="uniqueIdentifier">The unique immutable identifier of a resource (Guid).
        /// </param>
        public SchedulePropertiesFragment(string status = default(string), string taskType = default(string), WeekDetailsFragment weeklyRecurrence = default(WeekDetailsFragment), DayDetailsFragment dailyRecurrence = default(DayDetailsFragment), HourDetailsFragment hourlyRecurrence = default(HourDetailsFragment), string timeZoneId = default(string), NotificationSettingsFragment notificationSettings = default(NotificationSettingsFragment), string targetResourceId = default(string), string provisioningState = default(string), string uniqueIdentifier = default(string))

        {
            this.Status = status;
            this.TaskType = taskType;
            this.WeeklyRecurrence = weeklyRecurrence;
            this.DailyRecurrence = dailyRecurrence;
            this.HourlyRecurrence = hourlyRecurrence;
            this.TimeZoneId = timeZoneId;
            this.NotificationSettings = notificationSettings;
            this.TargetResourceId = targetResourceId;
            this.ProvisioningState = provisioningState;
            this.UniqueIdentifier = uniqueIdentifier;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the status of the schedule (i.e. Enabled, Disabled) Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; set; }

        /// <summary>
        /// Gets or sets the task type of the schedule (e.g. LabVmsShutdownTask,
        /// LabVmAutoStart).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taskType")]
        public string TaskType {get; set; }

        /// <summary>
        /// Gets or sets if the schedule will occur only some days of the week, specify
        /// the weekly recurrence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "weeklyRecurrence")]
        public WeekDetailsFragment WeeklyRecurrence {get; set; }

        /// <summary>
        /// Gets or sets if the schedule will occur once each day of the week, specify
        /// the daily recurrence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dailyRecurrence")]
        public DayDetailsFragment DailyRecurrence {get; set; }

        /// <summary>
        /// Gets or sets if the schedule will occur multiple times a day, specify the
        /// hourly recurrence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hourlyRecurrence")]
        public HourDetailsFragment HourlyRecurrence {get; set; }

        /// <summary>
        /// Gets or sets the time zone ID (e.g. Pacific Standard time).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeZoneId")]
        public string TimeZoneId {get; set; }

        /// <summary>
        /// Gets or sets notification settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "notificationSettings")]
        public NotificationSettingsFragment NotificationSettings {get; set; }

        /// <summary>
        /// Gets or sets the resource ID to which the schedule belongs
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetResourceId")]
        public string TargetResourceId {get; set; }

        /// <summary>
        /// Gets or sets the provisioning status of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; set; }

        /// <summary>
        /// Gets or sets the unique immutable identifier of a resource (Guid).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uniqueIdentifier")]
        public string UniqueIdentifier {get; set; }
    }
}