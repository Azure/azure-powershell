// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DevTestLabs.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of an artifact source.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ArtifactSource : Resource
    {
        /// <summary>
        /// Initializes a new instance of the ArtifactSource class.
        /// </summary>
        public ArtifactSource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ArtifactSource class.
        /// </summary>

        /// <param name="id">The identifier of the resource.
        /// </param>

        /// <param name="name">The name of the resource.
        /// </param>

        /// <param name="type">The type of the resource.
        /// </param>

        /// <param name="location">The location of the resource.
        /// </param>

        /// <param name="tags">The tags of the resource.
        /// </param>

        /// <param name="displayName">The artifact source&#39;s display name.
        /// </param>

        /// <param name="uri">The artifact source&#39;s URI.
        /// </param>

        /// <param name="sourceType">The artifact source&#39;s type.
        /// Possible values include: &#39;VsoGit&#39;, &#39;GitHub&#39;</param>

        /// <param name="folderPath">The folder containing artifacts.
        /// </param>

        /// <param name="armTemplateFolderPath">The folder containing Azure Resource Manager templates.
        /// </param>

        /// <param name="branchRef">The artifact source&#39;s branch reference.
        /// </param>

        /// <param name="securityToken">The security token to authenticate to the artifact source.
        /// </param>

        /// <param name="status">Indicates if the artifact source is enabled (values: Enabled, Disabled).
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="createdDate">The artifact source&#39;s creation date.
        /// </param>

        /// <param name="provisioningState">The provisioning status of the resource.
        /// </param>

        /// <param name="uniqueIdentifier">The unique immutable identifier of a resource (Guid).
        /// </param>
        public ArtifactSource(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string displayName = default(string), string uri = default(string), string sourceType = default(string), string folderPath = default(string), string armTemplateFolderPath = default(string), string branchRef = default(string), string securityToken = default(string), string status = default(string), System.DateTime? createdDate = default(System.DateTime?), string provisioningState = default(string), string uniqueIdentifier = default(string))

        : base(id, name, type, location, tags)
        {
            this.DisplayName = displayName;
            this.Uri = uri;
            this.SourceType = sourceType;
            this.FolderPath = folderPath;
            this.ArmTemplateFolderPath = armTemplateFolderPath;
            this.BranchRef = branchRef;
            this.SecurityToken = securityToken;
            this.Status = status;
            this.CreatedDate = createdDate;
            this.ProvisioningState = provisioningState;
            this.UniqueIdentifier = uniqueIdentifier;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the artifact source&#39;s display name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets the artifact source&#39;s URI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.uri")]
        public string Uri {get; set; }

        /// <summary>
        /// Gets or sets the artifact source&#39;s type. Possible values include: &#39;VsoGit&#39;, &#39;GitHub&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sourceType")]
        public string SourceType {get; set; }

        /// <summary>
        /// Gets or sets the folder containing artifacts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.folderPath")]
        public string FolderPath {get; set; }

        /// <summary>
        /// Gets or sets the folder containing Azure Resource Manager templates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.armTemplateFolderPath")]
        public string ArmTemplateFolderPath {get; set; }

        /// <summary>
        /// Gets or sets the artifact source&#39;s branch reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.branchRef")]
        public string BranchRef {get; set; }

        /// <summary>
        /// Gets or sets the security token to authenticate to the artifact source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.securityToken")]
        public string SecurityToken {get; set; }

        /// <summary>
        /// Gets or sets indicates if the artifact source is enabled (values: Enabled,
        /// Disabled). Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public string Status {get; set; }

        /// <summary>
        /// Gets the artifact source&#39;s creation date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.createdDate")]
        public System.DateTime? CreatedDate {get; private set; }

        /// <summary>
        /// Gets or sets the provisioning status of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; set; }

        /// <summary>
        /// Gets or sets the unique immutable identifier of a resource (Guid).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.uniqueIdentifier")]
        public string UniqueIdentifier {get; set; }
    }
}