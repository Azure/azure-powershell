// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.NotificationHubs.Models
{
    using System.Linq;

    public partial class CheckNameAvailabilityResponse
    {
        /// <summary>
        /// Initializes a new instance of the CheckNameAvailabilityResponse class.
        /// </summary>
        public CheckNameAvailabilityResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CheckNameAvailabilityResponse class.
        /// </summary>

        /// <param name="nameAvailable">Checks if the namespace name is available
        /// </param>

        /// <param name="reason">States the reason due to which the namespace name is not available
        /// </param>

        /// <param name="message">The messsage returned when checking for namespace name availability
        /// </param>
        public CheckNameAvailabilityResponse(bool? nameAvailable = default(bool?), string reason = default(string), string message = default(string))

        {
            this.NameAvailable = nameAvailable;
            this.Reason = reason;
            this.Message = message;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets checks if the namespace name is available
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "NameAvailable")]
        public bool? NameAvailable {get; set; }

        /// <summary>
        /// Gets or sets states the reason due to which the namespace name is not
        /// available
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Reason")]
        public string Reason {get; set; }

        /// <summary>
        /// Gets or sets the messsage returned when checking for namespace name
        /// availability
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Message")]
        public string Message {get; set; }
    }
}