// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support
{

    /// <summary>
    /// The value representing the security enum. The 'Unsecure' value is the default value if not selected and means the object's
    /// domain name label is not secured against subdomain takeover. The 'TenantReuse' value is the default value if selected
    /// and means the object's domain name label can be reused within the same tenant. The 'SubscriptionReuse' value means the
    /// object's domain name label can be reused within the same subscription. The 'ResourceGroupReuse' value means the object's
    /// domain name label can be reused within the same resource group. The 'NoReuse' value means the object's domain name label
    /// cannot be reused within the same resource group, subscription, or tenant.
    /// </summary>
    public partial struct DnsNameLabelReusePolicy :
        System.IEquatable<DnsNameLabelReusePolicy>
    {
        public static Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.DnsNameLabelReusePolicy Noreuse = @"Noreuse";

        public static Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.DnsNameLabelReusePolicy ResourceGroupReuse = @"ResourceGroupReuse";

        public static Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.DnsNameLabelReusePolicy SubscriptionReuse = @"SubscriptionReuse";

        public static Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.DnsNameLabelReusePolicy TenantReuse = @"TenantReuse";

        public static Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.DnsNameLabelReusePolicy Unsecure = @"Unsecure";

        /// <summary>the value for an instance of the <see cref="DnsNameLabelReusePolicy" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to DnsNameLabelReusePolicy</summary>
        /// <param name="value">the value to convert to an instance of <see cref="DnsNameLabelReusePolicy" />.</param>
        internal static object CreateFrom(object value)
        {
            return new DnsNameLabelReusePolicy(global::System.Convert.ToString(value));
        }

        /// <summary>Creates an instance of the <see cref="DnsNameLabelReusePolicy"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private DnsNameLabelReusePolicy(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Compares values of enum type DnsNameLabelReusePolicy</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.DnsNameLabelReusePolicy e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type DnsNameLabelReusePolicy (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is DnsNameLabelReusePolicy && Equals((DnsNameLabelReusePolicy)obj);
        }

        /// <summary>Returns hashCode for enum DnsNameLabelReusePolicy</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Returns string representation for DnsNameLabelReusePolicy</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to DnsNameLabelReusePolicy</summary>
        /// <param name="value">the value to convert to an instance of <see cref="DnsNameLabelReusePolicy" />.</param>

        public static implicit operator DnsNameLabelReusePolicy(string value)
        {
            return new DnsNameLabelReusePolicy(value);
        }

        /// <summary>Implicit operator to convert DnsNameLabelReusePolicy to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="DnsNameLabelReusePolicy" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.DnsNameLabelReusePolicy e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum DnsNameLabelReusePolicy</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.DnsNameLabelReusePolicy e1, Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.DnsNameLabelReusePolicy e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum DnsNameLabelReusePolicy</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.DnsNameLabelReusePolicy e1, Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Support.DnsNameLabelReusePolicy e2)
        {
            return e2.Equals(e1);
        }
    }
}