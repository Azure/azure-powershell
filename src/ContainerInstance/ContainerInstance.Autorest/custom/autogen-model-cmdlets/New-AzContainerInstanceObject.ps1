
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for Container.
.Description
Create an in-memory object for Container.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Container
.Link
https://learn.microsoft.com/powershell/module/Az.ContainerInstance/new-azcontainerinstanceobject
#>
function New-AzContainerInstanceObject {
    [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.ModelCmdletAttribute()]
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Container')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="The capabilities to add to the container.")]
        [string[]]
        $CapabilityAdd,
        [Parameter(HelpMessage="The capabilities to drop from the container.")]
        [string[]]
        $CapabilityDrop,
        [Parameter(HelpMessage="The commands to execute within the container instance in exec form.")]
        [string[]]
        $Command,
        [Parameter(HelpMessage="The key value pairs dictionary in the config map.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.IConfigMapKeyValuePairs]
        $ConfigMapKeyValuePair,
        [Parameter(HelpMessage="The environment variables to set in the container instance.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.IEnvironmentVariable[]]
        $EnvironmentVariable,
        [Parameter(HelpMessage="The name of the image used to create the container instance.")]
        [string]
        $Image,
        [Parameter(HelpMessage="The CPU limit of this container instance.")]
        [double]
        $LimitCpu,
        [Parameter(HelpMessage="The memory limit in GB of this container instance.")]
        [double]
        $LimitMemoryInGb,
        [Parameter(HelpMessage="The count of the GPU resource.")]
        [int]
        $LimitsGpuCount,
        [Parameter(HelpMessage="The SKU of the GPU resource.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PSArgumentCompleterAttribute("K80", "P100", "V100")]
        [string]
        $LimitsGpuSku,
        [Parameter(HelpMessage="The commands to execute within the container.")]
        [string[]]
        $LivenessProbeExecCommand,
        [Parameter(HelpMessage="The failure threshold.")]
        [int]
        $LivenessProbeFailureThreshold,
        [Parameter(HelpMessage="The HTTP headers.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.IHttpHeader[]]
        $LivenessProbeHttpGetHttpHeader,
        [Parameter(HelpMessage="The path to probe.")]
        [string]
        $LivenessProbeHttpGetPath,
        [Parameter(HelpMessage="The port number to probe.")]
        [int]
        $LivenessProbeHttpGetPort,
        [Parameter(HelpMessage="The scheme.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PSArgumentCompleterAttribute("http", "https")]
        [string]
        $LivenessProbeHttpGetScheme,
        [Parameter(HelpMessage="The initial delay seconds.")]
        [int]
        $LivenessProbeInitialDelaySecond,
        [Parameter(HelpMessage="The period seconds.")]
        [int]
        $LivenessProbePeriodSecond,
        [Parameter(HelpMessage="The success threshold.")]
        [int]
        $LivenessProbeSuccessThreshold,
        [Parameter(HelpMessage="The timeout seconds.")]
        [int]
        $LivenessProbeTimeoutSecond,
        [Parameter(Mandatory, HelpMessage="The user-provided name of the container instance.")]
        [string]
        $Name,
        [Parameter(HelpMessage="The exposed ports on the container instance.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.IContainerPort[]]
        $Port,
        [Parameter(HelpMessage="The commands to execute within the container.")]
        [string[]]
        $ReadinessProbeExecCommand,
        [Parameter(HelpMessage="The failure threshold.")]
        [int]
        $ReadinessProbeFailureThreshold,
        [Parameter(HelpMessage="The HTTP headers.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.IHttpHeader[]]
        $ReadinessProbeHttpGetHttpHeader,
        [Parameter(HelpMessage="The path to probe.")]
        [string]
        $ReadinessProbeHttpGetPath,
        [Parameter(HelpMessage="The port number to probe.")]
        [int]
        $ReadinessProbeHttpGetPort,
        [Parameter(HelpMessage="The scheme.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PSArgumentCompleterAttribute("http", "https")]
        [string]
        $ReadinessProbeHttpGetScheme,
        [Parameter(HelpMessage="The initial delay seconds.")]
        [int]
        $ReadinessProbeInitialDelaySecond,
        [Parameter(HelpMessage="The period seconds.")]
        [int]
        $ReadinessProbePeriodSecond,
        [Parameter(HelpMessage="The success threshold.")]
        [int]
        $ReadinessProbeSuccessThreshold,
        [Parameter(HelpMessage="The timeout seconds.")]
        [int]
        $ReadinessProbeTimeoutSecond,
        [Parameter(HelpMessage="The CPU request of this container instance.")]
        [double]
        $RequestCpu,
        [Parameter(HelpMessage="The memory request in GB of this container instance.")]
        [double]
        $RequestMemoryInGb,
        [Parameter(HelpMessage="The count of the GPU resource.")]
        [int]
        $RequestsGpuCount,
        [Parameter(HelpMessage="The SKU of the GPU resource.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.PSArgumentCompleterAttribute("K80", "P100", "V100")]
        [string]
        $RequestsGpuSku,
        [Parameter(HelpMessage="A boolean value indicating whether the init process can elevate its privileges.")]
        [bool]
        $SecurityContextAllowPrivilegeEscalation,
        [Parameter(HelpMessage="The flag to determine if the container permissions is elevated to Privileged.")]
        [bool]
        $SecurityContextPrivileged,
        [Parameter(HelpMessage="Sets the User GID for the container.")]
        [int]
        $SecurityContextRunAsGroup,
        [Parameter(HelpMessage="Sets the User UID for the container.")]
        [int]
        $SecurityContextRunAsUser,
        [Parameter(HelpMessage="a base64 encoded string containing the contents of the JSON in the seccomp profile.")]
        [string]
        $SecurityContextSeccompProfile,
        [Parameter(HelpMessage="The volume mounts available to the container instance.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.IVolumeMount[]]
        $VolumeMount
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.ContainerInstance.Models.Container]::New()

        if ($PSBoundParameters.ContainsKey('CapabilityAdd')) {
            $Object.CapabilityAdd = $CapabilityAdd
        }
        if ($PSBoundParameters.ContainsKey('CapabilityDrop')) {
            $Object.CapabilityDrop = $CapabilityDrop
        }
        if ($PSBoundParameters.ContainsKey('Command')) {
            $Object.Command = $Command
        }
        if ($PSBoundParameters.ContainsKey('ConfigMapKeyValuePair')) {
            $Object.ConfigMapKeyValuePair = $ConfigMapKeyValuePair
        }
        if ($PSBoundParameters.ContainsKey('EnvironmentVariable')) {
            $Object.EnvironmentVariable = $EnvironmentVariable
        }
        if ($PSBoundParameters.ContainsKey('Image')) {
            $Object.Image = $Image
        }
        if ($PSBoundParameters.ContainsKey('LimitCpu')) {
            $Object.LimitCpu = $LimitCpu
        }
        if ($PSBoundParameters.ContainsKey('LimitMemoryInGb')) {
            $Object.LimitMemoryInGb = $LimitMemoryInGb
        }
        if ($PSBoundParameters.ContainsKey('LimitsGpuCount')) {
            $Object.LimitsGpuCount = $LimitsGpuCount
        }
        if ($PSBoundParameters.ContainsKey('LimitsGpuSku')) {
            $Object.LimitsGpuSku = $LimitsGpuSku
        }
        if ($PSBoundParameters.ContainsKey('LivenessProbeExecCommand')) {
            $Object.LivenessProbeExecCommand = $LivenessProbeExecCommand
        }
        if ($PSBoundParameters.ContainsKey('LivenessProbeFailureThreshold')) {
            $Object.LivenessProbeFailureThreshold = $LivenessProbeFailureThreshold
        }
        if ($PSBoundParameters.ContainsKey('LivenessProbeHttpGetHttpHeader')) {
            $Object.LivenessProbeHttpGetHttpHeader = $LivenessProbeHttpGetHttpHeader
        }
        if ($PSBoundParameters.ContainsKey('LivenessProbeHttpGetPath')) {
            $Object.LivenessProbeHttpGetPath = $LivenessProbeHttpGetPath
        }
        if ($PSBoundParameters.ContainsKey('LivenessProbeHttpGetPort')) {
            $Object.LivenessProbeHttpGetPort = $LivenessProbeHttpGetPort
        }
        if ($PSBoundParameters.ContainsKey('LivenessProbeHttpGetScheme')) {
            $Object.LivenessProbeHttpGetScheme = $LivenessProbeHttpGetScheme
        }
        if ($PSBoundParameters.ContainsKey('LivenessProbeInitialDelaySecond')) {
            $Object.LivenessProbeInitialDelaySecond = $LivenessProbeInitialDelaySecond
        }
        if ($PSBoundParameters.ContainsKey('LivenessProbePeriodSecond')) {
            $Object.LivenessProbePeriodSecond = $LivenessProbePeriodSecond
        }
        if ($PSBoundParameters.ContainsKey('LivenessProbeSuccessThreshold')) {
            $Object.LivenessProbeSuccessThreshold = $LivenessProbeSuccessThreshold
        }
        if ($PSBoundParameters.ContainsKey('LivenessProbeTimeoutSecond')) {
            $Object.LivenessProbeTimeoutSecond = $LivenessProbeTimeoutSecond
        }
        if ($PSBoundParameters.ContainsKey('Name')) {
            $Object.Name = $Name
        }
        if ($PSBoundParameters.ContainsKey('Port')) {
            $Object.Port = $Port
        }
        if ($PSBoundParameters.ContainsKey('ReadinessProbeExecCommand')) {
            $Object.ReadinessProbeExecCommand = $ReadinessProbeExecCommand
        }
        if ($PSBoundParameters.ContainsKey('ReadinessProbeFailureThreshold')) {
            $Object.ReadinessProbeFailureThreshold = $ReadinessProbeFailureThreshold
        }
        if ($PSBoundParameters.ContainsKey('ReadinessProbeHttpGetHttpHeader')) {
            $Object.ReadinessProbeHttpGetHttpHeader = $ReadinessProbeHttpGetHttpHeader
        }
        if ($PSBoundParameters.ContainsKey('ReadinessProbeHttpGetPath')) {
            $Object.ReadinessProbeHttpGetPath = $ReadinessProbeHttpGetPath
        }
        if ($PSBoundParameters.ContainsKey('ReadinessProbeHttpGetPort')) {
            $Object.ReadinessProbeHttpGetPort = $ReadinessProbeHttpGetPort
        }
        if ($PSBoundParameters.ContainsKey('ReadinessProbeHttpGetScheme')) {
            $Object.ReadinessProbeHttpGetScheme = $ReadinessProbeHttpGetScheme
        }
        if ($PSBoundParameters.ContainsKey('ReadinessProbeInitialDelaySecond')) {
            $Object.ReadinessProbeInitialDelaySecond = $ReadinessProbeInitialDelaySecond
        }
        if ($PSBoundParameters.ContainsKey('ReadinessProbePeriodSecond')) {
            $Object.ReadinessProbePeriodSecond = $ReadinessProbePeriodSecond
        }
        if ($PSBoundParameters.ContainsKey('ReadinessProbeSuccessThreshold')) {
            $Object.ReadinessProbeSuccessThreshold = $ReadinessProbeSuccessThreshold
        }
        if ($PSBoundParameters.ContainsKey('ReadinessProbeTimeoutSecond')) {
            $Object.ReadinessProbeTimeoutSecond = $ReadinessProbeTimeoutSecond
        }
        if ($PSBoundParameters.ContainsKey('RequestCpu')) {
            $Object.RequestCpu = $RequestCpu
        }
        if ($PSBoundParameters.ContainsKey('RequestMemoryInGb')) {
            $Object.RequestMemoryInGb = $RequestMemoryInGb
        }
        if ($PSBoundParameters.ContainsKey('RequestsGpuCount')) {
            $Object.RequestsGpuCount = $RequestsGpuCount
        }
        if ($PSBoundParameters.ContainsKey('RequestsGpuSku')) {
            $Object.RequestsGpuSku = $RequestsGpuSku
        }
        if ($PSBoundParameters.ContainsKey('SecurityContextAllowPrivilegeEscalation')) {
            $Object.SecurityContextAllowPrivilegeEscalation = $SecurityContextAllowPrivilegeEscalation
        }
        if ($PSBoundParameters.ContainsKey('SecurityContextPrivileged')) {
            $Object.SecurityContextPrivileged = $SecurityContextPrivileged
        }
        if ($PSBoundParameters.ContainsKey('SecurityContextRunAsGroup')) {
            $Object.SecurityContextRunAsGroup = $SecurityContextRunAsGroup
        }
        if ($PSBoundParameters.ContainsKey('SecurityContextRunAsUser')) {
            $Object.SecurityContextRunAsUser = $SecurityContextRunAsUser
        }
        if ($PSBoundParameters.ContainsKey('SecurityContextSeccompProfile')) {
            $Object.SecurityContextSeccompProfile = $SecurityContextSeccompProfile
        }
        if ($PSBoundParameters.ContainsKey('VolumeMount')) {
            $Object.VolumeMount = $VolumeMount
        }
        return $Object
    }
}

