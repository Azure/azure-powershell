
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create the automation rule action condition.
.Description
Create the automation rule action condition.
.Example

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.IAutomationRuleCondition

.Link
https://learn.microsoft.com/powershell/module/az.securityinsights/new-azsentinelautomationruleactioncondition
#>
function New-AzSentinelAutomationRuleActionCondition {
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.IAutomationRuleCondition])]
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [Parameter(ParameterSetName='CreateProperty', Mandatory)]
        [Parameter(ParameterSetName='CreatePropertyChanged', Mandatory)]
        [Parameter(ParameterSetName='CreatePropertyArrayChanged', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("Property", "PropertyChanged", "PropertyArrayChanged")]
        [System.String]
        # The type of the automation rule action.
        # ConditionType
        ${Type},
    
        [Parameter(ParameterSetName='CreateProperty')]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [System.String]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("IncidentTitle", "IncidentDescription", "IncidentSeverity", "IncidentStatus", "IncidentRelatedAnalyticRuleIds", "IncidentTactics", "IncidentLabel", "IncidentProviderName", "IncidentUpdatedBySource", "AccountAadTenantId", "AccountAadUserId", "AccountName", "AccountNTDomain", "AccountPUID", "AccountSid", "AccountObjectGuid", "AccountUPNSuffix", "AlertProductNames", "AlertAnalyticRuleIds", "AzureResourceResourceId", "AzureResourceSubscriptionId", "CloudApplicationAppId", "CloudApplicationAppName", "DNSDomainName", "FileDirectory", "FileName", "FileHashValue", "HostAzureID", "HostName", "HostNetBiosName", "HostNTDomain", "HostOSVersion", "IoTDeviceId", "IoTDeviceName", "IoTDeviceType", "IoTDeviceVendor", "IoTDeviceModel", "IoTDeviceOperatingSystem", "IPAddress", "MailboxDisplayName", "MailboxPrimaryAddress", "MailboxUPN", "MailMessageDeliveryAction", "MailMessageDeliveryLocation", "MailMessageRecipient", "MailMessageSenderIP", "MailMessageSubject", "MailMessageP1Sender", "MailMessageP2Sender", "MalwareCategory", "MalwareName", "ProcessCommandLine", "ProcessId", "RegistryKey", "RegistryValueData", "Url")]
        # ConditionPropertyName
        ${PropertyName},
    
        [Parameter(ParameterSetName='CreateProperty')]
        [Parameter(ParameterSetName='CreatePropertyChanged')]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("Equals", "NotEquals", "Contains", "NotContains", "StartsWith", "NotStartsWith", "EndsWith", "NotEndsWith")]
        [System.String]
        # ConditionPropertyOperator
        ${Operator},
    
        [Parameter(ParameterSetName='CreateProperty')]
        [Parameter(ParameterSetName='CreatePropertyChanged')]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [string[]]
        # ConditionPropertyValue
        ${PropertyValue},
    
        [Parameter(ParameterSetName='CreatePropertyChanged')]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("ChangedFrom", "ChangedTo")]
        [System.String]
        # ConditionPropertyChangeType
        ${ChangeType},
    
        [Parameter(ParameterSetName='CreatePropertyChanged')]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("IncidentSeverity", "IncidentStatus", "IncidentOwner")]
        # ConditionPropertyName
        ${ChangedPropertyName},
    
        [Parameter(ParameterSetName='CreatePropertyArrayChanged')]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("Alerts", "Labels", "Tactics", "Comments")]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [System.String]
        # ConditionPropertyArrayType
        ${ArrayType},
    
        [Parameter(ParameterSetName='CreatePropertyArrayChanged')]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("Added")]
        [System.String]
        # ConditionPropertyChangeType
        ${ArrayChangeType}
    )
    
    process {
        try {
            # Property condition
            if ($PSBoundParameters['Type'] -eq 'Property'){
                $ConditionProperties = [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.PropertyConditionProperties]::new()
                
                If($PSBoundParameters['PropertyName']){
                    $ConditionProperties.ConditionPropertyName = $PSBoundParameters['PropertyName']
                }
    
                If($PSBoundParameters['Operator']){
                    $ConditionProperties.ConditionPropertyOperator = $PSBoundParameters['Operator']
                }
    
                If($PSBoundParameters['PropertyValue']){
                    $ConditionProperties.ConditionPropertyValue = $PSBoundParameters['PropertyValue']
                }
            }
            #Property changed condition
            if($PSBoundParameters['Type'] -eq 'PropertyChanged'){
                $ConditionProperties = [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.PropertyChangedConditionProperties]::new()
                    
                If($PSBoundParameters['ChangeType']){
                    $ConditionProperties.ConditionPropertyChangeType = $PSBoundParameters['ChangeType']
                }
    
                If($PSBoundParameters['ChangedPropertyName']){
                    $ConditionProperties.ConditionPropertyName = $PSBoundParameters['ChangedPropertyName']
                }
    
                If($PSBoundParameters['Operator']){
                    $ConditionProperties.ConditionPropertyOperator = $PSBoundParameters['Operator']
                }
    
                If($PSBoundParameters['PropertyValue']){
                    $ConditionProperties.ConditionPropertyValue = $PSBoundParameters['PropertyValue']
                }
            }
            # Property array changed condition
            if($PSBoundParameters['Type'] -eq 'PropertyArrayChanged'){
                $ConditionProperties = [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.PropertyArrayChangedConditionProperties]::new()

                If($PSBoundParameters['ArrayType']){
                    $ConditionProperties.ConditionPropertyArrayType = $PSBoundParameters['ArrayType']
                }
    
                If($PSBoundParameters['ArrayChangeType']){
                    $ConditionProperties.ConditionPropertyChangeType = $PSBoundParameters['ArrayChangeType']
                }
            }
            
            $ConditionProperties.ConditionType = $PSBoundParameters['Type']
            
            return $ConditionProperties
        } catch {
            throw
        }
    }
}
