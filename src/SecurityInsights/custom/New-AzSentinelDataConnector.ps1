
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create the data connector.
.Description
Create the data connector.
.Example
New-AzSentinelDataConnector -ResourceGroupName "myResourceGroupName" -WorkspaceName "myWorkspaceName" -Kind 'MicrosoftThreatIntelligence' -BingSafetyPhishingURL Enabled -BingSafetyPhishingUrlLookbackPeriod All  -MicrosoftEmergingThreatFeed Enabled -MicrosoftEmergingThreatFeedLookbackPeriod All

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.IDataConnector
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.IDataConnector
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

DATACONNECTOR <IDataConnector>: Data connector.
  Kind <String>: The data connector kind
  [Etag <String>]: Etag of the azure resource
.Link
https://learn.microsoft.com/powershell/module/az.securityinsights/new-azsentineldataconnector
#>
function New-AzSentinelDataConnector {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.IDataConnector])]
[CmdletBinding(DefaultParameterSetName='AADAATP', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Path')]
    [System.String]
    # The name of the workspace.
    ${WorkspaceName},

    [Parameter()]
    [Alias('DataConnectorId')]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Runtime.DefaultInfo(Script='(New-Guid).Guid')]
    [System.String]
    # Connector ID
    ${Id},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("AzureActiveDirectory", "AzureSecurityCenter", "MicrosoftCloudAppSecurity", "ThreatIntelligence", "Office365", "AmazonWebServicesCloudTrail", "AzureAdvancedThreatProtection", "MicrosoftDefenderAdvancedThreatProtection")]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
    [System.String]
    # The data connector kind
    ${Kind},

    [Parameter(ParameterSetName = 'AADAATP')] #"AzureActiveDirectory", "AzureAdvancedThreatProtection"
    [Parameter(ParameterSetName = 'MicrosoftCloudAppSecurity')]
    [Parameter(ParameterSetName = 'MicrosoftDefenderAdvancedThreatProtection')]
    [Parameter(ParameterSetName = 'Office365')]
    [Parameter(ParameterSetName = 'ThreatIntelligence')]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Runtime.DefaultInfo(Script = '(Get-AzContext).Tenant.Id')]
    [System.String]
    # The TenantId.
    ${TenantId},

    [Parameter(ParameterSetName = 'AADAATP')]
    [Parameter(ParameterSetName = 'AzureSecurityCenter')]
    [Parameter(ParameterSetName = 'MicrosoftCloudAppSecurity')]
    [Parameter(ParameterSetName = 'MicrosoftDefenderAdvancedThreatProtection')]
    [Parameter(ParameterSetName = 'Office365')]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("Enabled", "Disabled")]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
    [System.String]
    ${Alerts},

    [Parameter(ParameterSetName = 'AzureSecurityCenter', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
    [System.String]
    # ASC Subscription Id.
    ${ASCSubscriptionId},

    [Parameter(ParameterSetName = 'MicrosoftCloudAppSecurity')]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("Enabled", "Disabled")]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
    [System.String]
    ${DiscoveryLog},

    [Parameter(ParameterSetName = 'Office365')]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("Enabled", "Disabled")]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
    [System.String]
    ${Exchange},

    [Parameter(ParameterSetName = 'Office365')]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("Enabled", "Disabled")]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
    [System.String]
    ${SharePoint},

    [Parameter(ParameterSetName = 'Office365')]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("Enabled", "Disabled")]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
    [System.String]
    ${Teams},

    [Parameter(ParameterSetName = 'ThreatIntelligence')]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("Enabled", "Disabled")]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
    [System.String]
    ${Indicator},

    [Parameter(ParameterSetName = 'AmazonWebServicesCloudTrail', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
    [System.String]
    ${AWSRoleArn},

    [Parameter(ParameterSetName = 'AmazonWebServicesCloudTrail')]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("Enabled", "Disabled")]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
    [System.String]
    ${Log},
    
    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

process {
    try {
        #AAD
        if ($PSBoundParameters['Kind'] -eq 'AzureActiveDirectory'){
            $DataConnector = [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.AadDataConnector]::new()
            
            $DataConnector.TenantId = $PSBoundParameters['TenantId']
            $null = $PSBoundParameters.Remove('TenantId')
            
            If($PSBoundParameters['Alerts']){
                $DataConnector.AlertState = $PSBoundParameters['Alerts']
                $null = $PSBoundParameters.Remove('Alerts')
            }
        }
        #AATP
        if($PSBoundParameters['Kind'] -eq 'AzureAdvancedThreatProtection'){
            $DataConnector = [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.AatpDataConnector]::new()
            
            $DataConnector.TenantId = $PSBoundParameters['TenantId']
            $null = $PSBoundParameters.Remove('TenantId')
            
            If($PSBoundParameters['Alerts']){
                $DataConnector.AlertState = $PSBoundParameters['Alerts']
                $null = $PSBoundParameters.Remove('Alerts')
            }
        }
        #AzureSecurityCenter
        if($PSBoundParameters['Kind'] -eq 'AzureSecurityCenter'){
            $DataConnector = [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.Api20210901Preview.AscDataConnector]::new()
            
            $DataConnector.SubscriptionId = $PSBoundParameters['ASCSubscriptionId']
            $null = $PSBoundParameters.Remove('ASCSubscriptionId')

            If($PSBoundParameters['Alerts']){
                $DataConnector.AlertState = $PSBoundParameters['Alerts']
                $null = $PSBoundParameters.Remove('Alerts')
            }
        }
        #MicrosoftCloudAppSecurity
        if($PSBoundParameters['Kind'] -eq 'MicrosoftCloudAppSecurity'){
            $DataConnector = [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.Api20210901Preview.McasDataConnector]::new()
            
            $DataConnector.TenantId = $PSBoundParameters['TenantId']
            $null = $PSBoundParameters.Remove('TenantId')

            If($PSBoundParameters['Alerts']){
                $DataConnector.DataTypeAlertState = $PSBoundParameters['Alerts']
                $null = $PSBoundParameters.Remove('Alerts')
            }

            If($PSBoundParameters['DiscoveryLog']){
                $DataConnector.DiscoveryLogState = $PSBoundParameters['DiscoveryLog']
                $null = $PSBoundParameters.Remove('DiscoveryLog')
            }
        }
        #MicrosoftDefenderAdvancedThreatProtection
        if($PSBoundParameters['Kind'] -eq 'MicrosoftDefenderAdvancedThreatProtection'){
            $DataConnector = [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.MdatpDataConnector]::new()

            $DataConnector.TenantId = $PSBoundParameters['TenantId']
            $null = $PSBoundParameters.Remove('TenantId')

            If($PSBoundParameters['Alerts']){
                $DataConnector.AlertState = $PSBoundParameters['Alerts']
                $null = $PSBoundParameters.Remove('Alerts')
            }
        }
        #Office365
        if($PSBoundParameters['Kind'] -eq 'Office365'){
            $DataConnector = [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.OfficeDataConnector]::new()
            
            $DataConnector.TenantId = $PSBoundParameters['TenantId']
            $null = $PSBoundParameters.Remove('TenantId')

            If($PSBoundParameters['Exchange']){
                $DataConnector.ExchangeState = $PSBoundParameters['Exchange']
                $null = $PSBoundParameters.Remove('Exchange')
            }

            If($PSBoundParameters['SharePoint']){
                $DataConnector.SharePointState = $PSBoundParameters['SharePoint']
                $null = $PSBoundParameters.Remove('SharePoint')
            }

            If($PSBoundParameters['Teams']){
                $DataConnector.TeamState = $PSBoundParameters['Teams']
                $null = $PSBoundParameters.Remove('Teams')
            }
        }
        #ThreatIntelligence
        if($PSBoundParameters['Kind'] -eq 'ThreatIntelligence'){
            $DataConnector = [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.TiDataConnector]::new()
            
            $DataConnector.TenantId = $PSBoundParameters['TenantId']
            $null = $PSBoundParameters.Remove('TenantId')

            $DataConnector.TipLookbackPeriod = "1970-01-01T00:00:00.000Z"
            
            If($PSBoundParameters['Indicator']){
                $DataConnector.IndicatorState = $PSBoundParameters['Indicator']
                $null = $PSBoundParameters.Remove('Indicator')
            }
        }
        #AmazonWebServicesCloudTrail
        if($PSBoundParameters['Kind'] -eq 'AmazonWebServicesCloudTrail'){
            $DataConnector = [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.AwsCloudTrailDataConnector]::new()
            
            $DataConnector.AWSRoleArn = $PSBoundParameters['AWSRoleArn']
            $null = $PSBoundParameters.Remove('AWSRoleArn')

            If($PSBoundParameters['Log']){
                $DataConnector.LogState = $PSBoundParameters['Log']
                $null = $PSBoundParameters.Remove('Log')
            }
        }

        $DataConnector.Kind = $PSBoundParameters['Kind']
        $null = $PSBoundParameters.Remove('Kind')

        $null = $PSBoundParameters.Remove('DataConnector')
        $null = $PSBoundParameters.Add('DataConnector', $DataConnector)

        Az.SecurityInsights.internal\New-AzSentinelDataConnector @PSBoundParameters        
    } catch {

        throw
    }
}
}
