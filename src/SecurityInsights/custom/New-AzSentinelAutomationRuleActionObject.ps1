
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create the automation rule action object.
.Description
Create the automation rule action object.
.Example

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.IAutomationRuleAction

.Link
https://learn.microsoft.com/powershell/module/az.securityinsights/new-azsentinelautomationruleactionobject
#>
function New-AzSentinelAutomationRuleActionObject {
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.IAutomationRuleAction])]
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [Parameter(ParameterSetName='CreateModifyProperties', Mandatory)]
        [Parameter(ParameterSetName='CreateRunPlaybook', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("ModifyProperties", "RunPlaybook")]
        [System.String]
        # The type of the automation rule action.
        ${ActionType},

        [Parameter(ParameterSetName='CreateModifyProperties', Mandatory)]
        [Parameter(ParameterSetName='CreateRunPlaybook', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [int]
        ${Order},

        [Parameter(ParameterSetName='CreateModifyProperties', HelpMessage="The reason the incident was closed.")]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("Undetermined", "TruePositive", "BenignPositive", "FalsePositive")]
        [System.String]
        ${Classification},

        [Parameter(ParameterSetName='CreateModifyProperties', HelpMessage="Describes the reason the incident was closed.")]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [System.String]
        ${ClassificationComment},

        [Parameter(ParameterSetName='CreateModifyProperties', HelpMessage="The classification reason the incident was closed with.")]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("SuspiciousActivity", "SuspiciousButExpected", "IncorrectAlertLogic", "InaccurateData")]
        [System.String]
        ${ClassificationReason},

        [Parameter(ParameterSetName='CreateModifyProperties', HelpMessage="List of labels to add to the incident.")]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.IIncidentLabel]
        ${Label},

        [Parameter(ParameterSetName='CreateModifyProperties', HelpMessage="The severity of the incident.")]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("High", "Medium", "Low", "Informational")]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [System.String]
        ${Severity},

        [Parameter(ParameterSetName='CreateModifyProperties', HelpMessage="The status of the incident.")]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("New", "Active", "Closed")]
        [System.String]
        ${Status},

        [Parameter(ParameterSetName='CreateModifyProperties', HelpMessage="The name of the user the incident is assigned to.")]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [System.String]
        ${OwnerAssignedTo},

        [Parameter(ParameterSetName='CreateModifyProperties', HelpMessage="The email of the user the incident is assigned to.")]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [System.String]
        ${OwnerEmail},

        [Parameter(ParameterSetName='CreateModifyProperties', HelpMessage="The object id of the user the incident is assigned to.")]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [System.String]
        ${OwnerObjectId},

        [Parameter(ParameterSetName='CreateModifyProperties', HelpMessage="The type of the owner the incident is assigned to.")]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PSArgumentCompleterAttribute("Unknown", "User", "Group")]
        [System.String]
        ${OwnerType},

        [Parameter(ParameterSetName='CreateModifyProperties', HelpMessage="The user principal name of the user the incident is assigned to.")]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [System.String]
        # The user principal name of the user the incident is assigned to.
        ${OwnerUserPrincipalName},

        [Parameter(ParameterSetName='CreateRunPlaybook', HelpMessage="The resource id of the playbook resource.")]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [System.String]
        # The resource id of the playbook resource.
        ${LogicAppResourceId},

        [Parameter(ParameterSetName='CreateRunPlaybook', HelpMessage="The tenant id of the playbook resource.")]
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Category('Body')]
        [System.String]
        # The tenant id of the playbook resource.
        ${TenantId}
    )

    process {
        try {
            #RunPlaybook
            if ($PSBoundParameters['ActionType'] -eq 'RunPlaybook'){
                $automationRuleAction = [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.AutomationRuleRunPlaybookAction]::new()           
                $automationRuleAction.ActionConfigurationLogicAppResourceId = $LogicAppResourceId
                $automationRuleAction.ActionConfigurationTenantId = $TenantId
            }
            #ModifyProperties
            if($PSBoundParameters['ActionType'] -eq 'ModifyProperties'){
                $automationRuleAction = [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.AutomationRuleModifyPropertiesAction]::new()

                If($PSBoundParameters['Classification']){
                    $automationRuleAction.ActionConfigurationClassification = $Classification
                }

                If($PSBoundParameters['ClassificationComment']){
                    $automationRuleAction.ActionConfigurationClassificationComment = $ClassificationComment
                }

                If($PSBoundParameters['ClassificationReason']){
                    $automationRuleAction.ActionConfigurationClassificationReason = $ClassificationReason
                }

                If($PSBoundParameters['Label']){
                    $automationRuleAction.ActionConfigurationLabel = $Label
                }

                If($PSBoundParameters['Severity']){
                    $automationRuleAction.ActionConfigurationSeverity = $Severity
                }

                If($PSBoundParameters['Status']){
                    $automationRuleAction.ActionConfigurationStatus = $Status
                }

                If($PSBoundParameters['OwnerType']){
                    $automationRuleAction.OwnerType = $OwnerType
                }

                If($PSBoundParameters['OwnerAssignedTo']){
                    $automationRuleAction.OwnerAssignedTo = $OwnerAssignedTo
                }

                If($PSBoundParameters['OwnerEmail']){
                    $automationRuleAction.OwnerEmail = $OwnerEmail
                }

                If($PSBoundParameters['OwnerObjectId']){
                    $automationRuleAction.OwnerObjectId = $OwnerObjectId
                }

                If($PSBoundParameters['OwnerUserPrincipalName']){
                    $automationRuleAction.OwnerUserPrincipalName = $PSBoundParameters['OwnerUserPrincipalName']
                }
            }

            $automationRuleAction.Order = $PSBoundParameters['Order']
            $automationRuleAction.ActionType = $PSBoundParameters['ActionType']
            
            return $automationRuleAction
        } catch {
            throw
        }
    }
}
