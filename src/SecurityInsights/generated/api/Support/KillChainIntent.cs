// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support
{

    /// <summary>Holds the alert intent stage(s) mapping for this alert.</summary>
    public partial struct KillChainIntent :
        System.IEquatable<KillChainIntent>
    {
        /// <summary>
        /// Collection consists of techniques used to identify and gather information, such as sensitive files, from a target network
        /// prior to exfiltration. This category also covers locations on a system or network where the adversary may look for information
        /// to exfiltrate.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent Collection = @"Collection";

        /// <summary>
        /// The command and control tactic represents how adversaries communicate with systems under their control within a target
        /// network.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent CommandAndControl = @"CommandAndControl";

        /// <summary>
        /// Credential access represents techniques resulting in access to or control over system, domain, or service credentials
        /// that are used within an enterprise environment. Adversaries will likely attempt to obtain legitimate credentials from
        /// users or administrator accounts (local system administrator or domain users with administrator access) to use within the
        /// network. With sufficient access within a network, an adversary can create accounts for later use within the environment.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent CredentialAccess = @"CredentialAccess";

        /// <summary>
        /// Defense evasion consists of techniques an adversary may use to evade detection or avoid other defenses. Sometimes these
        /// actions are the same as or variations of techniques in other categories that have the added benefit of subverting a particular
        /// defense or mitigation.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent DefenseEvasion = @"DefenseEvasion";

        /// <summary>
        /// Discovery consists of techniques that allow the adversary to gain knowledge about the system and internal network. When
        /// adversaries gain access to a new system, they must orient themselves to what they now have control of and what benefits
        /// operating from that system give to their current objective or overall goals during the intrusion. The operating system
        /// provides many native tools that aid in this post-compromise information-gathering phase.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent Discovery = @"Discovery";

        /// <summary>
        /// The execution tactic represents techniques that result in execution of adversary-controlled code on a local or remote
        /// system. This tactic is often used in conjunction with lateral movement to expand access to remote systems on a network.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent Execution = @"Execution";

        /// <summary>
        /// Exfiltration refers to techniques and attributes that result or aid in the adversary removing files and information from
        /// a target network. This category also covers locations on a system or network where the adversary may look for information
        /// to exfiltrate.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent Exfiltration = @"Exfiltration";

        /// <summary>
        /// Exploitation is the stage where an attacker manage to get foothold on the attacked resource. This stage is applicable
        /// not only for compute hosts, but also for resources such as user accounts, certificates etc. Adversaries will often be
        /// able to control the resource after this stage.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent Exploitation = @"Exploitation";

        /// <summary>
        /// The impact intent primary objective is to directly reduce the availability or integrity of a system, service, or network;
        /// including manipulation of data to impact a business or operational process. This would often refer to techniques such
        /// as ransom-ware, defacement, data manipulation and others.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent Impact = @"Impact";

        /// <summary>
        /// Lateral movement consists of techniques that enable an adversary to access and control remote systems on a network and
        /// could, but does not necessarily, include execution of tools on remote systems. The lateral movement techniques could allow
        /// an adversary to gather information from a system without needing additional tools, such as a remote access tool. An adversary
        /// can use lateral movement for many purposes, including remote Execution of tools, pivoting to additional systems, access
        /// to specific information or files, access to additional credentials, or to cause an effect.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent LateralMovement = @"LateralMovement";

        /// <summary>
        /// Persistence is any access, action, or configuration change to a system that gives an adversary a persistent presence on
        /// that system. Adversaries will often need to maintain access to systems through interruptions such as system restarts,
        /// loss of credentials, or other failures that would require a remote access tool to restart or alternate backdoor for them
        /// to regain access.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent Persistence = @"Persistence";

        /// <summary>
        /// Privilege escalation is the result of actions that allow an adversary to obtain a higher level of permissions on a system
        /// or network. Certain tools or actions require a higher level of privilege to work and are likely necessary at many points
        /// throughout an operation. User accounts with permissions to access specific systems or perform specific functions necessary
        /// for adversaries to achieve their objective may also be considered an escalation of privilege.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent PrivilegeEscalation = @"PrivilegeEscalation";

        /// <summary>
        /// Probing could be an attempt to access a certain resource regardless of a malicious intent or a failed attempt to gain
        /// access to a target system to gather information prior to exploitation. This step is usually detected as an attempt originating
        /// from outside the network in attempt to scan the target system and find a way in.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent Probing = @"Probing";

        /// <summary>The default value.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent Unknown = @"Unknown";

        /// <summary>the value for an instance of the <see cref="KillChainIntent" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to KillChainIntent</summary>
        /// <param name="value">the value to convert to an instance of <see cref="KillChainIntent" />.</param>
        internal static object CreateFrom(object value)
        {
            return new KillChainIntent(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type KillChainIntent</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type KillChainIntent (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is KillChainIntent && Equals((KillChainIntent)obj);
        }

        /// <summary>Returns hashCode for enum KillChainIntent</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Creates an instance of the <see cref="KillChainIntent"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private KillChainIntent(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Returns string representation for KillChainIntent</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to KillChainIntent</summary>
        /// <param name="value">the value to convert to an instance of <see cref="KillChainIntent" />.</param>

        public static implicit operator KillChainIntent(string value)
        {
            return new KillChainIntent(value);
        }

        /// <summary>Implicit operator to convert KillChainIntent to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="KillChainIntent" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum KillChainIntent</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent e1, Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum KillChainIntent</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent e1, Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KillChainIntent e2)
        {
            return e2.Equals(e1);
        }
    }
}