# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------
# Ensure Az.Oracle module is available for tests running in isolated processes.
if (-not (Get-Command -Name Get-AzOracleResourceAnchor -ErrorAction SilentlyContinue)) {
    try {
        # From .../src/Oracle/Oracle.Autorest/test ascend to repo root
        $repoRoot = Resolve-Path (Join-Path $PSScriptRoot '..') | ForEach-Object { $_.Path }
        $repoRoot = Resolve-Path (Join-Path $repoRoot '..') | ForEach-Object { $_.Path }
        $repoRoot = Resolve-Path (Join-Path $repoRoot '..') | ForEach-Object { $_.Path }
        $repoRoot = Resolve-Path (Join-Path $repoRoot '..') | ForEach-Object { $_.Path }

        # Prefer artifacts/Debug/Az.Oracle build output, fall back to first found Az.Oracle.psd1
        $debugArtifacts = Join-Path $repoRoot 'artifacts'
        $debugArtifacts = Join-Path $debugArtifacts 'Debug'
        $moduleDir      = Join-Path $debugArtifacts 'Az.Oracle'
        $manifestPath   = Join-Path $moduleDir 'Az.Oracle.psd1'

        if (Test-Path -LiteralPath $manifestPath) {
            Write-Host "[LOG] (loadEnv) Importing Az.Oracle from $manifestPath"
            $loaded = Get-Module -Name 'Az.Oracle'
            $needsReload = $true
            if ($loaded) {
                $exported = Get-Command -Module Az.Oracle -ErrorAction SilentlyContinue | Where-Object { $_.Name -eq 'New-AzOracleResourceAnchor' }
                if ($exported) {
                    $needsReload = $false
                    Write-Host "[LOG] (loadEnv) Az.Oracle already loaded and exports New-AzOracleResourceAnchor; skipping re-import"
                } elseif ($loaded.Path -like "*artifacts*Az.Oracle*") {
                    $needsReload = $false
                    Write-Host "[LOG] (loadEnv) Az.Oracle already loaded from artifacts; skipping re-import"
                }
            }
            if ($needsReload) {
                Write-Host "[LOG] (loadEnv) Reloading Az.Oracle from artifacts manifest to ensure cmdlets are exported"
                Remove-Module -Name 'Az.Oracle' -ErrorAction SilentlyContinue
                Import-Module -Name $manifestPath -Force -ErrorAction Stop
            }
        } else {
            $artifactsRoot = Join-Path $repoRoot 'artifacts'
            $candidate = Get-ChildItem -Path $artifactsRoot -Recurse -Filter 'Az.Oracle.psd1' -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($candidate) {
                Write-Host "[LOG] (loadEnv) Importing Az.Oracle from $($candidate.FullName)"
                $loaded = Get-Module -Name 'Az.Oracle'
                $needsReload = $true
                if ($loaded) {
                    $exported = Get-Command -Module Az.Oracle -ErrorAction SilentlyContinue | Where-Object { $_.Name -eq 'New-AzOracleResourceAnchor' }
                    if ($exported) {
                        $needsReload = $false
                        Write-Host "[LOG] (loadEnv) Az.Oracle already loaded and exports New-AzOracleResourceAnchor; skipping re-import"
                    } elseif ($loaded.Path -like "*artifacts*Az.Oracle*") {
                        $needsReload = $false
                        Write-Host "[LOG] (loadEnv) Az.Oracle already loaded from artifacts; skipping re-import"
                    }
                }
                if ($needsReload) {
                    Write-Host "[LOG] (loadEnv) Reloading Az.Oracle from artifacts manifest to ensure cmdlets are exported"
                    Remove-Module -Name 'Az.Oracle' -ErrorAction SilentlyContinue
                    Import-Module -Name $candidate.FullName -Force -ErrorAction Stop
                }
            } else {
                Write-Host "[LOG] (loadEnv) Az.Oracle manifest not found under artifacts; attempting to build module via dotnet..."
                try {
                    Push-Location $repoRoot
                    # Build the repo (produces artifacts/Debug/Az.Oracle/Az.Oracle.psd1)
                    & dotnet build 'build.proj' -c Debug | Write-Host
                } catch {
                    Write-Warning "[WARN] (loadEnv) Build failed: $($_.Exception.Message)"
                } finally {
                    Pop-Location
                }

                # Re-scan artifacts after build
                $candidate = Get-ChildItem -Path (Join-Path $repoRoot 'artifacts') -Recurse -Filter 'Az.Oracle.psd1' -ErrorAction SilentlyContinue | Select-Object -First 1
                if ($candidate) {
                    Write-Host "[LOG] (loadEnv) Importing Az.Oracle from $($candidate.FullName) after build"
                    Remove-Module -Name 'Az.Oracle' -ErrorAction SilentlyContinue
                    Import-Module -Name $candidate.FullName -Force -ErrorAction Stop
                } else {
                    Write-Warning "[WARN] (loadEnv) Az.Oracle.psd1 still not found after build; cmdlets may be unavailable."
                }
            }
        }
    } catch {
        Write-Warning "[WARN] (loadEnv) Failed to import Az.Oracle module: $($_.Exception.Message)"
    }
}

$envFile = 'env.json'
if ($TestMode -eq 'live') {
    $envFile = 'localEnv.json'
}

if (Test-Path -Path (Join-Path $PSScriptRoot $envFile)) {
    $envFilePath = Join-Path $PSScriptRoot $envFile
} else {
    $envFilePath = Join-Path $PSScriptRoot '..\$envFile'
}
$env = @{}
if (Test-Path -Path $envFilePath) {
    $env = Get-Content (Join-Path $PSScriptRoot $envFile) | ConvertFrom-Json
    $PSDefaultParameterValues=@{"*:Tenant"=$env.Tenant}
}
