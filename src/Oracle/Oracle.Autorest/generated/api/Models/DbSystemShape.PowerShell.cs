// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models
{
    using Microsoft.Azure.PowerShell.Cmdlets.Oracle.Runtime.PowerShell;

    /// <summary>DbSystemShape resource definition</summary>
    [System.ComponentModel.TypeConverter(typeof(DbSystemShapeTypeConverter))]
    public partial class DbSystemShape
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.DbSystemShape"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal DbSystemShape(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Property"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).Property = (Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeProperties) content.GetValueForProperty("Property",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).Property, Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.DbSystemShapePropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("SystemDataCreatedBy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataCreatedBy = (string) content.GetValueForProperty("SystemDataCreatedBy",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataCreatedBy, global::System.Convert.ToString);
            }
            if (content.Contains("SystemDataCreatedAt"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataCreatedAt = (global::System.DateTime?) content.GetValueForProperty("SystemDataCreatedAt",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataCreatedAt, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("SystemDataCreatedByType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataCreatedByType = (string) content.GetValueForProperty("SystemDataCreatedByType",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataCreatedByType, global::System.Convert.ToString);
            }
            if (content.Contains("SystemDataLastModifiedBy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataLastModifiedBy = (string) content.GetValueForProperty("SystemDataLastModifiedBy",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataLastModifiedBy, global::System.Convert.ToString);
            }
            if (content.Contains("SystemDataLastModifiedByType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataLastModifiedByType = (string) content.GetValueForProperty("SystemDataLastModifiedByType",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataLastModifiedByType, global::System.Convert.ToString);
            }
            if (content.Contains("SystemDataLastModifiedAt"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataLastModifiedAt = (global::System.DateTime?) content.GetValueForProperty("SystemDataLastModifiedAt",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataLastModifiedAt, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("SystemData"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemData = (Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.ISystemData) content.GetValueForProperty("SystemData",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemData, Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.SystemDataTypeConverter.ConvertFrom);
            }
            if (content.Contains("Id"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).Id = (string) content.GetValueForProperty("Id",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).Id, global::System.Convert.ToString);
            }
            if (content.Contains("Name"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).Name = (string) content.GetValueForProperty("Name",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).Name, global::System.Convert.ToString);
            }
            if (content.Contains("Type"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).Type = (string) content.GetValueForProperty("Type",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).Type, global::System.Convert.ToString);
            }
            if (content.Contains("ShapeFamily"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).ShapeFamily = (string) content.GetValueForProperty("ShapeFamily",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).ShapeFamily, global::System.Convert.ToString);
            }
            if (content.Contains("AvailableCoreCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableCoreCount = (int?) content.GetValueForProperty("AvailableCoreCount",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableCoreCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MinimumCoreCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinimumCoreCount = (int?) content.GetValueForProperty("MinimumCoreCount",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinimumCoreCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RuntimeMinimumCoreCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).RuntimeMinimumCoreCount = (int?) content.GetValueForProperty("RuntimeMinimumCoreCount",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).RuntimeMinimumCoreCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("CoreCountIncrement"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).CoreCountIncrement = (int?) content.GetValueForProperty("CoreCountIncrement",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).CoreCountIncrement, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MinStorageCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinStorageCount = (int?) content.GetValueForProperty("MinStorageCount",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinStorageCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MaxStorageCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MaxStorageCount = (int?) content.GetValueForProperty("MaxStorageCount",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MaxStorageCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("AvailableDataStoragePerServerInTb"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableDataStoragePerServerInTb = (double?) content.GetValueForProperty("AvailableDataStoragePerServerInTb",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableDataStoragePerServerInTb, (__y)=> (double) global::System.Convert.ChangeType(__y, typeof(double)));
            }
            if (content.Contains("AvailableMemoryPerNodeInGb"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableMemoryPerNodeInGb = (int?) content.GetValueForProperty("AvailableMemoryPerNodeInGb",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableMemoryPerNodeInGb, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("AvailableDbNodePerNodeInGb"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableDbNodePerNodeInGb = (int?) content.GetValueForProperty("AvailableDbNodePerNodeInGb",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableDbNodePerNodeInGb, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MinCoreCountPerNode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinCoreCountPerNode = (int?) content.GetValueForProperty("MinCoreCountPerNode",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinCoreCountPerNode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("AvailableMemoryInGb"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableMemoryInGb = (int?) content.GetValueForProperty("AvailableMemoryInGb",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableMemoryInGb, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MinMemoryPerNodeInGb"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinMemoryPerNodeInGb = (int?) content.GetValueForProperty("MinMemoryPerNodeInGb",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinMemoryPerNodeInGb, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("AvailableDbNodeStorageInGb"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableDbNodeStorageInGb = (int?) content.GetValueForProperty("AvailableDbNodeStorageInGb",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableDbNodeStorageInGb, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MinDbNodeStoragePerNodeInGb"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinDbNodeStoragePerNodeInGb = (int?) content.GetValueForProperty("MinDbNodeStoragePerNodeInGb",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinDbNodeStoragePerNodeInGb, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("AvailableDataStorageInTb"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableDataStorageInTb = (int?) content.GetValueForProperty("AvailableDataStorageInTb",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableDataStorageInTb, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MinDataStorageInTb"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinDataStorageInTb = (int?) content.GetValueForProperty("MinDataStorageInTb",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinDataStorageInTb, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MinimumNodeCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinimumNodeCount = (int?) content.GetValueForProperty("MinimumNodeCount",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinimumNodeCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MaximumNodeCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MaximumNodeCount = (int?) content.GetValueForProperty("MaximumNodeCount",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MaximumNodeCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("AvailableCoreCountPerNode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableCoreCountPerNode = (int?) content.GetValueForProperty("AvailableCoreCountPerNode",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableCoreCountPerNode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.DbSystemShape"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal DbSystemShape(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Property"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).Property = (Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeProperties) content.GetValueForProperty("Property",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).Property, Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.DbSystemShapePropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("SystemDataCreatedBy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataCreatedBy = (string) content.GetValueForProperty("SystemDataCreatedBy",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataCreatedBy, global::System.Convert.ToString);
            }
            if (content.Contains("SystemDataCreatedAt"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataCreatedAt = (global::System.DateTime?) content.GetValueForProperty("SystemDataCreatedAt",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataCreatedAt, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("SystemDataCreatedByType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataCreatedByType = (string) content.GetValueForProperty("SystemDataCreatedByType",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataCreatedByType, global::System.Convert.ToString);
            }
            if (content.Contains("SystemDataLastModifiedBy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataLastModifiedBy = (string) content.GetValueForProperty("SystemDataLastModifiedBy",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataLastModifiedBy, global::System.Convert.ToString);
            }
            if (content.Contains("SystemDataLastModifiedByType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataLastModifiedByType = (string) content.GetValueForProperty("SystemDataLastModifiedByType",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataLastModifiedByType, global::System.Convert.ToString);
            }
            if (content.Contains("SystemDataLastModifiedAt"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataLastModifiedAt = (global::System.DateTime?) content.GetValueForProperty("SystemDataLastModifiedAt",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemDataLastModifiedAt, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("SystemData"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemData = (Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.ISystemData) content.GetValueForProperty("SystemData",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).SystemData, Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.SystemDataTypeConverter.ConvertFrom);
            }
            if (content.Contains("Id"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).Id = (string) content.GetValueForProperty("Id",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).Id, global::System.Convert.ToString);
            }
            if (content.Contains("Name"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).Name = (string) content.GetValueForProperty("Name",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).Name, global::System.Convert.ToString);
            }
            if (content.Contains("Type"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).Type = (string) content.GetValueForProperty("Type",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IResourceInternal)this).Type, global::System.Convert.ToString);
            }
            if (content.Contains("ShapeFamily"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).ShapeFamily = (string) content.GetValueForProperty("ShapeFamily",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).ShapeFamily, global::System.Convert.ToString);
            }
            if (content.Contains("AvailableCoreCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableCoreCount = (int?) content.GetValueForProperty("AvailableCoreCount",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableCoreCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MinimumCoreCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinimumCoreCount = (int?) content.GetValueForProperty("MinimumCoreCount",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinimumCoreCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("RuntimeMinimumCoreCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).RuntimeMinimumCoreCount = (int?) content.GetValueForProperty("RuntimeMinimumCoreCount",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).RuntimeMinimumCoreCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("CoreCountIncrement"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).CoreCountIncrement = (int?) content.GetValueForProperty("CoreCountIncrement",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).CoreCountIncrement, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MinStorageCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinStorageCount = (int?) content.GetValueForProperty("MinStorageCount",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinStorageCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MaxStorageCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MaxStorageCount = (int?) content.GetValueForProperty("MaxStorageCount",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MaxStorageCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("AvailableDataStoragePerServerInTb"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableDataStoragePerServerInTb = (double?) content.GetValueForProperty("AvailableDataStoragePerServerInTb",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableDataStoragePerServerInTb, (__y)=> (double) global::System.Convert.ChangeType(__y, typeof(double)));
            }
            if (content.Contains("AvailableMemoryPerNodeInGb"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableMemoryPerNodeInGb = (int?) content.GetValueForProperty("AvailableMemoryPerNodeInGb",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableMemoryPerNodeInGb, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("AvailableDbNodePerNodeInGb"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableDbNodePerNodeInGb = (int?) content.GetValueForProperty("AvailableDbNodePerNodeInGb",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableDbNodePerNodeInGb, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MinCoreCountPerNode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinCoreCountPerNode = (int?) content.GetValueForProperty("MinCoreCountPerNode",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinCoreCountPerNode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("AvailableMemoryInGb"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableMemoryInGb = (int?) content.GetValueForProperty("AvailableMemoryInGb",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableMemoryInGb, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MinMemoryPerNodeInGb"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinMemoryPerNodeInGb = (int?) content.GetValueForProperty("MinMemoryPerNodeInGb",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinMemoryPerNodeInGb, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("AvailableDbNodeStorageInGb"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableDbNodeStorageInGb = (int?) content.GetValueForProperty("AvailableDbNodeStorageInGb",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableDbNodeStorageInGb, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MinDbNodeStoragePerNodeInGb"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinDbNodeStoragePerNodeInGb = (int?) content.GetValueForProperty("MinDbNodeStoragePerNodeInGb",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinDbNodeStoragePerNodeInGb, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("AvailableDataStorageInTb"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableDataStorageInTb = (int?) content.GetValueForProperty("AvailableDataStorageInTb",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableDataStorageInTb, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MinDataStorageInTb"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinDataStorageInTb = (int?) content.GetValueForProperty("MinDataStorageInTb",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinDataStorageInTb, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MinimumNodeCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinimumNodeCount = (int?) content.GetValueForProperty("MinimumNodeCount",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MinimumNodeCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("MaximumNodeCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MaximumNodeCount = (int?) content.GetValueForProperty("MaximumNodeCount",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).MaximumNodeCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("AvailableCoreCountPerNode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableCoreCountPerNode = (int?) content.GetValueForProperty("AvailableCoreCountPerNode",((Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShapeInternal)this).AvailableCoreCountPerNode, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.DbSystemShape"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShape" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShape DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new DbSystemShape(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.DbSystemShape"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShape" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShape DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new DbSystemShape(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="DbSystemShape" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="DbSystemShape" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbSystemShape FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.Oracle.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.Oracle.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// DbSystemShape resource definition
    [System.ComponentModel.TypeConverter(typeof(DbSystemShapeTypeConverter))]
    public partial interface IDbSystemShape

    {

    }
}