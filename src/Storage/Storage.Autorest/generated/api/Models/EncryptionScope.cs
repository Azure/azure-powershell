// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Storage.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Extensions;

    /// <summary>The Encryption Scope resource.</summary>
    public partial class EncryptionScope :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScope,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopeInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResource" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResource __resource = new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Resource();

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal)__resource).Id; }

        /// <summary>The object identifier of the current versioned Key Vault Key in use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyCurrentVersionedKeyIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).KeyVaultPropertyCurrentVersionedKeyIdentifier; }

        /// <summary>
        /// The object identifier for a key vault key object. When applied, the encryption scope will use the key referenced by the
        /// identifier to enable customer-managed key support on this encryption scope.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyKeyUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).KeyVaultPropertyKeyUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).KeyVaultPropertyKeyUri = value ?? null; }

        /// <summary>Timestamp of last rotation of the Key Vault Key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? KeyVaultPropertyLastKeyRotationTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).KeyVaultPropertyLastKeyRotationTimestamp; }

        /// <summary>Internal Acessors for KeyVaultPropertyCurrentVersionedKeyIdentifier</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopeInternal.KeyVaultPropertyCurrentVersionedKeyIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).KeyVaultPropertyCurrentVersionedKeyIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).KeyVaultPropertyCurrentVersionedKeyIdentifier = value; }

        /// <summary>Internal Acessors for KeyVaultPropertyLastKeyRotationTimestamp</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopeInternal.KeyVaultPropertyLastKeyRotationTimestamp { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).KeyVaultPropertyLastKeyRotationTimestamp; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).KeyVaultPropertyLastKeyRotationTimestamp = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopeProperties Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopeInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.EncryptionScopeProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for PropertyCreationTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopeInternal.PropertyCreationTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).CreationTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).CreationTime = value; }

        /// <summary>Internal Acessors for PropertyKeyVaultProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopeKeyVaultProperties Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopeInternal.PropertyKeyVaultProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).KeyVaultProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).KeyVaultProperty = value; }

        /// <summary>Internal Acessors for PropertyLastModifiedTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopeInternal.PropertyLastModifiedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).LastModifiedTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).LastModifiedTime = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal)__resource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal)__resource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal)__resource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal)__resource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal)__resource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal)__resource).Type = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal)__resource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopeProperties _property;

        /// <summary>Properties of the encryption scope.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopeProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.EncryptionScopeProperties()); set => this._property = value; }

        /// <summary>Gets the creation date and time of the encryption scope in UTC.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? PropertyCreationTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).CreationTime; }

        /// <summary>Gets the last modification date and time of the encryption scope in UTC.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? PropertyLastModifiedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).LastModifiedTime; }

        /// <summary>
        /// A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for
        /// data at rest.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? PropertyRequireInfrastructureEncryption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).RequireInfrastructureEncryption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).RequireInfrastructureEncryption = value ?? default(bool); }

        /// <summary>
        /// The provider for the encryption scope. Possible values (case-insensitive): Microsoft.Storage, Microsoft.KeyVault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PropertySource { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).Source; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).Source = value ?? null; }

        /// <summary>
        /// The state of the encryption scope. Possible values (case-insensitive): Enabled, Disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PropertyState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopePropertiesInternal)Property).State = value ?? null; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal)__resource).Type; }

        /// <summary>Creates an new <see cref="EncryptionScope" /> instance.</summary>
        public EncryptionScope()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__resource), __resource);
            await eventListener.AssertObjectIsValid(nameof(__resource), __resource);
        }
    }
    /// The Encryption Scope resource.
    public partial interface IEncryptionScope :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResource
    {
        /// <summary>The object identifier of the current versioned Key Vault Key in use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The object identifier of the current versioned Key Vault Key in use.",
        SerializedName = @"currentVersionedKeyIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyCurrentVersionedKeyIdentifier { get;  }
        /// <summary>
        /// The object identifier for a key vault key object. When applied, the encryption scope will use the key referenced by the
        /// identifier to enable customer-managed key support on this encryption scope.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The object identifier for a key vault key object. When applied, the encryption scope will use the key referenced by the identifier to enable customer-managed key support on this encryption scope.",
        SerializedName = @"keyUri",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyKeyUri { get; set; }
        /// <summary>Timestamp of last rotation of the Key Vault Key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Timestamp of last rotation of the Key Vault Key.",
        SerializedName = @"lastKeyRotationTimestamp",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? KeyVaultPropertyLastKeyRotationTimestamp { get;  }
        /// <summary>Gets the creation date and time of the encryption scope in UTC.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the creation date and time of the encryption scope in UTC.",
        SerializedName = @"creationTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? PropertyCreationTime { get;  }
        /// <summary>Gets the last modification date and time of the encryption scope in UTC.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the last modification date and time of the encryption scope in UTC.",
        SerializedName = @"lastModifiedTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? PropertyLastModifiedTime { get;  }
        /// <summary>
        /// A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for
        /// data at rest.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest.",
        SerializedName = @"requireInfrastructureEncryption",
        PossibleTypes = new [] { typeof(bool) })]
        bool? PropertyRequireInfrastructureEncryption { get; set; }
        /// <summary>
        /// The provider for the encryption scope. Possible values (case-insensitive): Microsoft.Storage, Microsoft.KeyVault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The provider for the encryption scope. Possible values (case-insensitive):  Microsoft.Storage, Microsoft.KeyVault.",
        SerializedName = @"source",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Microsoft.Storage", "Microsoft.KeyVault")]
        string PropertySource { get; set; }
        /// <summary>
        /// The state of the encryption scope. Possible values (case-insensitive): Enabled, Disabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The state of the encryption scope. Possible values (case-insensitive):  Enabled, Disabled.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string PropertyState { get; set; }

    }
    /// The Encryption Scope resource.
    internal partial interface IEncryptionScopeInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal
    {
        /// <summary>The object identifier of the current versioned Key Vault Key in use.</summary>
        string KeyVaultPropertyCurrentVersionedKeyIdentifier { get; set; }
        /// <summary>
        /// The object identifier for a key vault key object. When applied, the encryption scope will use the key referenced by the
        /// identifier to enable customer-managed key support on this encryption scope.
        /// </summary>
        string KeyVaultPropertyKeyUri { get; set; }
        /// <summary>Timestamp of last rotation of the Key Vault Key.</summary>
        global::System.DateTime? KeyVaultPropertyLastKeyRotationTimestamp { get; set; }
        /// <summary>Properties of the encryption scope.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopeProperties Property { get; set; }
        /// <summary>Gets the creation date and time of the encryption scope in UTC.</summary>
        global::System.DateTime? PropertyCreationTime { get; set; }
        /// <summary>
        /// The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is
        /// set to 'Microsoft.KeyVault'.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionScopeKeyVaultProperties PropertyKeyVaultProperty { get; set; }
        /// <summary>Gets the last modification date and time of the encryption scope in UTC.</summary>
        global::System.DateTime? PropertyLastModifiedTime { get; set; }
        /// <summary>
        /// A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for
        /// data at rest.
        /// </summary>
        bool? PropertyRequireInfrastructureEncryption { get; set; }
        /// <summary>
        /// The provider for the encryption scope. Possible values (case-insensitive): Microsoft.Storage, Microsoft.KeyVault.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Microsoft.Storage", "Microsoft.KeyVault")]
        string PropertySource { get; set; }
        /// <summary>
        /// The state of the encryption scope. Possible values (case-insensitive): Enabled, Disabled.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string PropertyState { get; set; }

    }
}