// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// The local user associated with the storage accounts.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class LocalUser : Resource
    {
        /// <summary>
        /// Initializes a new instance of the LocalUser class.
        /// </summary>
        public LocalUser()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LocalUser class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="systemData">Metadata pertaining to creation and last modification of the resource.
        /// </param>

        /// <param name="permissionScopes">The permission scopes of the local user.
        /// </param>

        /// <param name="homeDirectory">Optional, local user home directory.
        /// </param>

        /// <param name="sshAuthorizedKeys">Optional, local user ssh authorized keys for SFTP.
        /// </param>

        /// <param name="sid">A unique Security Identifier that is generated by the server.
        /// </param>

        /// <param name="hasSharedKey">Indicates whether shared key exists. Set it to false to remove existing
        /// shared key.
        /// </param>

        /// <param name="hasSshKey">Indicates whether ssh key exists. Set it to false to remove existing SSH
        /// key.
        /// </param>

        /// <param name="hasSshPassword">Indicates whether ssh password exists. Set it to false to remove existing
        /// SSH password.
        /// </param>

        /// <param name="userId">A unique Identifier that is generated by the server.
        /// </param>

        /// <param name="groupId">An identifier for associating a group of users.
        /// </param>

        /// <param name="allowAclAuthorization">Indicates whether ACL authorization is allowed for this user. Set it to
        /// false to disallow using ACL authorization.
        /// </param>

        /// <param name="extendedGroups">Supplementary group membership. Only applicable for local users enabled for
        /// NFSv3 access.
        /// </param>

        /// <param name="isNfSv3Enabled">Indicates if the local user is enabled for access with NFSv3 protocol.
        /// </param>
        public LocalUser(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), System.Collections.Generic.IList<PermissionScope> permissionScopes = default(System.Collections.Generic.IList<PermissionScope>), string homeDirectory = default(string), System.Collections.Generic.IList<SshPublicKey> sshAuthorizedKeys = default(System.Collections.Generic.IList<SshPublicKey>), string sid = default(string), bool? hasSharedKey = default(bool?), bool? hasSshKey = default(bool?), bool? hasSshPassword = default(bool?), int? userId = default(int?), int? groupId = default(int?), bool? allowAclAuthorization = default(bool?), System.Collections.Generic.IList<int?> extendedGroups = default(System.Collections.Generic.IList<int?>), bool? isNfSv3Enabled = default(bool?))

        : base(id, name, type)
        {
            this.SystemData = systemData;
            this.PermissionScopes = permissionScopes;
            this.HomeDirectory = homeDirectory;
            this.SshAuthorizedKeys = sshAuthorizedKeys;
            this.Sid = sid;
            this.HasSharedKey = hasSharedKey;
            this.HasSshKey = hasSshKey;
            this.HasSshPassword = hasSshPassword;
            this.UserId = userId;
            this.GroupId = groupId;
            this.AllowAclAuthorization = allowAclAuthorization;
            this.ExtendedGroups = extendedGroups;
            this.IsNfSv3Enabled = isNfSv3Enabled;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData {get; private set; }

        /// <summary>
        /// Gets or sets the permission scopes of the local user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.permissionScopes")]
        public System.Collections.Generic.IList<PermissionScope> PermissionScopes {get; set; }

        /// <summary>
        /// Gets or sets optional, local user home directory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.homeDirectory")]
        public string HomeDirectory {get; set; }

        /// <summary>
        /// Gets or sets optional, local user ssh authorized keys for SFTP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sshAuthorizedKeys")]
        public System.Collections.Generic.IList<SshPublicKey> SshAuthorizedKeys {get; set; }

        /// <summary>
        /// Gets a unique Security Identifier that is generated by the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sid")]
        public string Sid {get; private set; }

        /// <summary>
        /// Gets or sets indicates whether shared key exists. Set it to false to remove
        /// existing shared key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hasSharedKey")]
        public bool? HasSharedKey {get; set; }

        /// <summary>
        /// Gets or sets indicates whether ssh key exists. Set it to false to remove
        /// existing SSH key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hasSshKey")]
        public bool? HasSshKey {get; set; }

        /// <summary>
        /// Gets or sets indicates whether ssh password exists. Set it to false to
        /// remove existing SSH password.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hasSshPassword")]
        public bool? HasSshPassword {get; set; }

        /// <summary>
        /// Gets a unique Identifier that is generated by the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.userId")]
        public int? UserId {get; private set; }

        /// <summary>
        /// Gets or sets an identifier for associating a group of users.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.groupId")]
        public int? GroupId {get; set; }

        /// <summary>
        /// Gets or sets indicates whether ACL authorization is allowed for this user.
        /// Set it to false to disallow using ACL authorization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.allowAclAuthorization")]
        public bool? AllowAclAuthorization {get; set; }

        /// <summary>
        /// Gets or sets supplementary group membership. Only applicable for local
        /// users enabled for NFSv3 access.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.extendedGroups")]
        public System.Collections.Generic.IList<int?> ExtendedGroups {get; set; }

        /// <summary>
        /// Gets or sets indicates if the local user is enabled for access with NFSv3
        /// protocol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isNFSv3Enabled")]
        public bool? IsNfSv3Enabled {get; set; }
    }
}