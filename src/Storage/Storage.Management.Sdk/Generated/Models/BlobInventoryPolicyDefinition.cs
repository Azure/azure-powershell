// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// An object that defines the blob inventory rule.
    /// </summary>
    public partial class BlobInventoryPolicyDefinition
    {
        /// <summary>
        /// Initializes a new instance of the BlobInventoryPolicyDefinition class.
        /// </summary>
        public BlobInventoryPolicyDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BlobInventoryPolicyDefinition class.
        /// </summary>

        /// <param name="filters">An object that defines the filter set.
        /// </param>

        /// <param name="format">This is a required field, it specifies the format for the inventory files.
        /// Possible values include: &#39;Csv&#39;, &#39;Parquet&#39;</param>

        /// <param name="schedule">This is a required field. This field is used to schedule an inventory
        /// formation.
        /// Possible values include: &#39;Daily&#39;, &#39;Weekly&#39;</param>

        /// <param name="objectType">This is a required field. This field specifies the scope of the inventory
        /// created either at the blob or container level.
        /// Possible values include: &#39;Blob&#39;, &#39;Container&#39;</param>

        /// <param name="schemaFields">This is a required field. This field specifies the fields and properties of
        /// the object to be included in the inventory. The Schema field value &#39;Name&#39;
        /// is always required. The valid values for this field for the &#39;Blob&#39;
        /// definition.objectType include &#39;Name, Creation-Time, Last-Modified,
        /// Content-Length, Content-MD5, BlobType, AccessTier, AccessTierChangeTime,
        /// AccessTierInferred, Tags, Expiry-Time, hdi_isfolder, Owner, Group,
        /// Permissions, Acl, Snapshot, VersionId, IsCurrentVersion, Metadata,
        /// LastAccessTime, Tags, Etag, ContentType, ContentEncoding, ContentLanguage,
        /// ContentCRC64, CacheControl, ContentDisposition, LeaseStatus, LeaseState,
        /// LeaseDuration, ServerEncrypted, Deleted, DeletionId, DeletedTime,
        /// RemainingRetentionDays, ImmutabilityPolicyUntilDate,
        /// ImmutabilityPolicyMode, LegalHold, CopyId, CopyStatus, CopySource,
        /// CopyProgress, CopyCompletionTime, CopyStatusDescription,
        /// CustomerProvidedKeySha256, RehydratePriority, ArchiveStatus,
        /// XmsBlobSequenceNumber, EncryptionScope, IncrementalCopy, TagCount&#39;. For
        /// Blob object type schema field value &#39;DeletedTime&#39; is applicable only for
        /// Hns enabled accounts. The valid values for &#39;Container&#39;
        /// definition.objectType include &#39;Name, Last-Modified, Metadata, LeaseStatus,
        /// LeaseState, LeaseDuration, PublicAccess, HasImmutabilityPolicy,
        /// HasLegalHold, Etag, DefaultEncryptionScope, DenyEncryptionScopeOverride,
        /// ImmutableStorageWithVersioningEnabled, Deleted, Version, DeletedTime,
        /// RemainingRetentionDays&#39;. Schema field values &#39;Expiry-Time, hdi_isfolder,
        /// Owner, Group, Permissions, Acl, DeletionId&#39; are valid only for Hns enabled
        /// accounts.Schema field values &#39;Tags, TagCount&#39; are only valid for Non-Hns
        /// accounts.
        /// </param>
        public BlobInventoryPolicyDefinition(string format, string schedule, string objectType, System.Collections.Generic.IList<string> schemaFields, BlobInventoryPolicyFilter filters = default(BlobInventoryPolicyFilter))

        {
            this.Filters = filters;
            this.Format = format;
            this.Schedule = schedule;
            this.ObjectType = objectType;
            this.SchemaFields = schemaFields;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets an object that defines the filter set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "filters")]
        public BlobInventoryPolicyFilter Filters {get; set; }

        /// <summary>
        /// Gets or sets this is a required field, it specifies the format for the
        /// inventory files. Possible values include: &#39;Csv&#39;, &#39;Parquet&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "format")]
        public string Format {get; set; }

        /// <summary>
        /// Gets or sets this is a required field. This field is used to schedule an
        /// inventory formation. Possible values include: &#39;Daily&#39;, &#39;Weekly&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "schedule")]
        public string Schedule {get; set; }

        /// <summary>
        /// Gets or sets this is a required field. This field specifies the scope of
        /// the inventory created either at the blob or container level. Possible values include: &#39;Blob&#39;, &#39;Container&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "objectType")]
        public string ObjectType {get; set; }

        /// <summary>
        /// Gets or sets this is a required field. This field specifies the fields and
        /// properties of the object to be included in the inventory. The Schema field
        /// value &#39;Name&#39; is always required. The valid values for this field for the
        /// &#39;Blob&#39; definition.objectType include &#39;Name, Creation-Time, Last-Modified,
        /// Content-Length, Content-MD5, BlobType, AccessTier, AccessTierChangeTime,
        /// AccessTierInferred, Tags, Expiry-Time, hdi_isfolder, Owner, Group,
        /// Permissions, Acl, Snapshot, VersionId, IsCurrentVersion, Metadata,
        /// LastAccessTime, Tags, Etag, ContentType, ContentEncoding, ContentLanguage,
        /// ContentCRC64, CacheControl, ContentDisposition, LeaseStatus, LeaseState,
        /// LeaseDuration, ServerEncrypted, Deleted, DeletionId, DeletedTime,
        /// RemainingRetentionDays, ImmutabilityPolicyUntilDate,
        /// ImmutabilityPolicyMode, LegalHold, CopyId, CopyStatus, CopySource,
        /// CopyProgress, CopyCompletionTime, CopyStatusDescription,
        /// CustomerProvidedKeySha256, RehydratePriority, ArchiveStatus,
        /// XmsBlobSequenceNumber, EncryptionScope, IncrementalCopy, TagCount&#39;. For
        /// Blob object type schema field value &#39;DeletedTime&#39; is applicable only for
        /// Hns enabled accounts. The valid values for &#39;Container&#39;
        /// definition.objectType include &#39;Name, Last-Modified, Metadata, LeaseStatus,
        /// LeaseState, LeaseDuration, PublicAccess, HasImmutabilityPolicy,
        /// HasLegalHold, Etag, DefaultEncryptionScope, DenyEncryptionScopeOverride,
        /// ImmutableStorageWithVersioningEnabled, Deleted, Version, DeletedTime,
        /// RemainingRetentionDays&#39;. Schema field values &#39;Expiry-Time, hdi_isfolder,
        /// Owner, Group, Permissions, Acl, DeletionId&#39; are valid only for Hns enabled
        /// accounts.Schema field values &#39;Tags, TagCount&#39; are only valid for Non-Hns
        /// accounts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "schemaFields")]
        public System.Collections.Generic.IList<string> SchemaFields {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Format == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Format");
            }
            if (this.Schedule == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Schedule");
            }
            if (this.ObjectType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ObjectType");
            }
            if (this.SchemaFields == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SchemaFields");
            }
            if (this.Filters != null)
            {
                this.Filters.Validate();
            }




        }
    }
}