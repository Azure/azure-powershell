// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of the storage account.
    /// </summary>
    public partial class StorageAccountProperties
    {
        /// <summary>
        /// Initializes a new instance of the StorageAccountProperties class.
        /// </summary>
        public StorageAccountProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageAccountProperties class.
        /// </summary>

        /// <param name="provisioningState">Gets the status of the storage account at the time the operation was
        /// called.
        /// Possible values include: &#39;Creating&#39;, &#39;ResolvingDNS&#39;, &#39;Succeeded&#39;</param>

        /// <param name="primaryEndpoints">Gets the URLs that are used to perform a retrieval of a public blob, queue,
        /// or table object. Note that Standard_ZRS and Premium_LRS accounts only
        /// return the blob endpoint.
        /// </param>

        /// <param name="primaryLocation">Gets the location of the primary data center for the storage account.
        /// </param>

        /// <param name="statusOfPrimary">Gets the status indicating whether the primary location of the storage
        /// account is available or unavailable.
        /// Possible values include: &#39;available&#39;, &#39;unavailable&#39;</param>

        /// <param name="lastGeoFailoverTime">Gets the timestamp of the most recent instance of a failover to the
        /// secondary location. Only the most recent timestamp is retained. This
        /// element is not returned if there has never been a failover instance. Only
        /// available if the accountType is Standard_GRS or Standard_RAGRS.
        /// </param>

        /// <param name="secondaryLocation">Gets the location of the geo-replicated secondary for the storage account.
        /// Only available if the accountType is Standard_GRS or Standard_RAGRS.
        /// </param>

        /// <param name="statusOfSecondary">Gets the status indicating whether the secondary location of the storage
        /// account is available or unavailable. Only available if the SKU name is
        /// Standard_GRS or Standard_RAGRS.
        /// Possible values include: &#39;available&#39;, &#39;unavailable&#39;</param>

        /// <param name="creationTime">Gets the creation date and time of the storage account in UTC.
        /// </param>

        /// <param name="customDomain">Gets the custom domain the user assigned to this storage account.
        /// </param>

        /// <param name="sasPolicy">SasPolicy assigned to the storage account.
        /// </param>

        /// <param name="keyPolicy">KeyPolicy assigned to the storage account.
        /// </param>

        /// <param name="keyCreationTime">Storage account keys creation time.
        /// </param>

        /// <param name="secondaryEndpoints">Gets the URLs that are used to perform a retrieval of a public blob, queue,
        /// or table object from the secondary location of the storage account. Only
        /// available if the SKU name is Standard_RAGRS.
        /// </param>

        /// <param name="encryption">Encryption settings to be used for server-side encryption for the storage
        /// account.
        /// </param>

        /// <param name="accessTier">Required for storage accounts where kind = BlobStorage. The access tier is
        /// used for billing. The &#39;Premium&#39; access tier is the default value for
        /// premium block blobs storage account type and it cannot be changed for the
        /// premium block blobs storage account type.
        /// Possible values include: &#39;Hot&#39;, &#39;Cool&#39;, &#39;Premium&#39;, &#39;Cold&#39;</param>

        /// <param name="azureFilesIdentityBasedAuthentication">Provides the identity based authentication settings for Azure Files.
        /// </param>

        /// <param name="enableHttpsTrafficOnly">Allows https traffic only to storage service if sets to true.
        /// </param>

        /// <param name="networkRuleSet">Network rule set
        /// </param>

        /// <param name="isSftpEnabled">Enables Secure File Transfer Protocol, if set to true
        /// </param>

        /// <param name="isLocalUserEnabled">Enables local users feature, if set to true
        /// </param>

        /// <param name="enableExtendedGroups">Enables extended group support with local users feature, if set to true
        /// </param>

        /// <param name="isHnsEnabled">Account HierarchicalNamespace enabled if sets to true.
        /// </param>

        /// <param name="geoReplicationStats">Geo Replication Stats
        /// </param>

        /// <param name="failoverInProgress">If the failover is in progress, the value will be true, otherwise, it will
        /// be null.
        /// </param>

        /// <param name="largeFileSharesState">Allow large file shares if sets to Enabled. It cannot be disabled once it
        /// is enabled.
        /// Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;</param>

        /// <param name="privateEndpointConnections">List of private endpoint connection associated with the specified storage
        /// account
        /// </param>

        /// <param name="routingPreference">Maintains information about the network routing choice opted by the user
        /// for data transfer
        /// </param>

        /// <param name="blobRestoreStatus">Blob restore status
        /// </param>

        /// <param name="allowBlobPublicAccess">Allow or disallow public access to all blobs or containers in the storage
        /// account. The default interpretation is false for this property.
        /// </param>

        /// <param name="minimumTlsVersion">Set the minimum TLS version to be permitted on requests to storage. The
        /// default interpretation is TLS 1.0 for this property.
        /// Possible values include: &#39;TLS1_0&#39;, &#39;TLS1_1&#39;, &#39;TLS1_2&#39;, &#39;TLS1_3&#39;</param>

        /// <param name="allowSharedKeyAccess">Indicates whether the storage account permits requests to be authorized
        /// with the account access key via Shared Key. If false, then all requests,
        /// including shared access signatures, must be authorized with Azure Active
        /// Directory (Azure AD). The default value is null, which is equivalent to
        /// true.
        /// </param>

        /// <param name="enableNfsV3">NFS 3.0 protocol support enabled if set to true.
        /// </param>

        /// <param name="allowCrossTenantReplication">Allow or disallow cross AAD tenant object replication. Set this property to
        /// true for new or existing accounts only if object replication policies will
        /// involve storage accounts in different AAD tenants. The default
        /// interpretation is false for new accounts to follow best security practices
        /// by default.
        /// </param>

        /// <param name="defaultToOAuthAuthentication">A boolean flag which indicates whether the default authentication is OAuth
        /// or not. The default interpretation is false for this property.
        /// </param>

        /// <param name="publicNetworkAccess">Allow, disallow, or let Network Security Perimeter configuration to
        /// evaluate public network access to Storage Account.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;, &#39;SecuredByPerimeter&#39;</param>

        /// <param name="immutableStorageWithVersioning">The property is immutable and can only be set to true at the account
        /// creation time. When set to true, it enables object level immutability for
        /// all the containers in the account by default.
        /// </param>

        /// <param name="allowedCopyScope">Restrict copy to and from Storage Accounts within an AAD tenant or with
        /// Private Links to the same VNet.
        /// Possible values include: &#39;PrivateLink&#39;, &#39;AAD&#39;</param>

        /// <param name="storageAccountSkuConversionStatus">This property is readOnly and is set by server during asynchronous storage
        /// account sku conversion operations.
        /// </param>

        /// <param name="dnsEndpointType">Allows you to specify the type of endpoint. Set this to AzureDNSZone to
        /// create a large number of accounts in a single subscription, which creates
        /// accounts in an Azure DNS Zone and the endpoint URL will have an
        /// alphanumeric DNS Zone identifier.
        /// Possible values include: &#39;Standard&#39;, &#39;AzureDnsZone&#39;</param>

        /// <param name="isSkuConversionBlocked">This property will be set to true or false on an event of ongoing
        /// migration. Default value is null.
        /// </param>

        /// <param name="accountMigrationInProgress">If customer initiated account migration is in progress, the value will be
        /// true else it will be null.
        /// </param>
        public StorageAccountProperties(ProvisioningState? provisioningState = default(ProvisioningState?), Endpoints primaryEndpoints = default(Endpoints), string primaryLocation = default(string), AccountStatus? statusOfPrimary = default(AccountStatus?), System.DateTime? lastGeoFailoverTime = default(System.DateTime?), string secondaryLocation = default(string), AccountStatus? statusOfSecondary = default(AccountStatus?), System.DateTime? creationTime = default(System.DateTime?), CustomDomain customDomain = default(CustomDomain), SasPolicy sasPolicy = default(SasPolicy), KeyPolicy keyPolicy = default(KeyPolicy), KeyCreationTime keyCreationTime = default(KeyCreationTime), Endpoints secondaryEndpoints = default(Endpoints), Encryption encryption = default(Encryption), AccessTier? accessTier = default(AccessTier?), AzureFilesIdentityBasedAuthentication azureFilesIdentityBasedAuthentication = default(AzureFilesIdentityBasedAuthentication), bool? enableHttpsTrafficOnly = default(bool?), NetworkRuleSet networkRuleSet = default(NetworkRuleSet), bool? isSftpEnabled = default(bool?), bool? isLocalUserEnabled = default(bool?), bool? enableExtendedGroups = default(bool?), bool? isHnsEnabled = default(bool?), GeoReplicationStats geoReplicationStats = default(GeoReplicationStats), bool? failoverInProgress = default(bool?), string largeFileSharesState = default(string), System.Collections.Generic.IList<PrivateEndpointConnection> privateEndpointConnections = default(System.Collections.Generic.IList<PrivateEndpointConnection>), RoutingPreference routingPreference = default(RoutingPreference), BlobRestoreStatus blobRestoreStatus = default(BlobRestoreStatus), bool? allowBlobPublicAccess = default(bool?), string minimumTlsVersion = default(string), bool? allowSharedKeyAccess = default(bool?), bool? enableNfsV3 = default(bool?), bool? allowCrossTenantReplication = default(bool?), bool? defaultToOAuthAuthentication = default(bool?), string publicNetworkAccess = default(string), ImmutableStorageAccount immutableStorageWithVersioning = default(ImmutableStorageAccount), string allowedCopyScope = default(string), StorageAccountSkuConversionStatus storageAccountSkuConversionStatus = default(StorageAccountSkuConversionStatus), string dnsEndpointType = default(string), bool? isSkuConversionBlocked = default(bool?), bool? accountMigrationInProgress = default(bool?))

        {
            this.ProvisioningState = provisioningState;
            this.PrimaryEndpoints = primaryEndpoints;
            this.PrimaryLocation = primaryLocation;
            this.StatusOfPrimary = statusOfPrimary;
            this.LastGeoFailoverTime = lastGeoFailoverTime;
            this.SecondaryLocation = secondaryLocation;
            this.StatusOfSecondary = statusOfSecondary;
            this.CreationTime = creationTime;
            this.CustomDomain = customDomain;
            this.SasPolicy = sasPolicy;
            this.KeyPolicy = keyPolicy;
            this.KeyCreationTime = keyCreationTime;
            this.SecondaryEndpoints = secondaryEndpoints;
            this.Encryption = encryption;
            this.AccessTier = accessTier;
            this.AzureFilesIdentityBasedAuthentication = azureFilesIdentityBasedAuthentication;
            this.EnableHttpsTrafficOnly = enableHttpsTrafficOnly;
            this.NetworkRuleSet = networkRuleSet;
            this.IsSftpEnabled = isSftpEnabled;
            this.IsLocalUserEnabled = isLocalUserEnabled;
            this.EnableExtendedGroups = enableExtendedGroups;
            this.IsHnsEnabled = isHnsEnabled;
            this.GeoReplicationStats = geoReplicationStats;
            this.FailoverInProgress = failoverInProgress;
            this.LargeFileSharesState = largeFileSharesState;
            this.PrivateEndpointConnections = privateEndpointConnections;
            this.RoutingPreference = routingPreference;
            this.BlobRestoreStatus = blobRestoreStatus;
            this.AllowBlobPublicAccess = allowBlobPublicAccess;
            this.MinimumTlsVersion = minimumTlsVersion;
            this.AllowSharedKeyAccess = allowSharedKeyAccess;
            this.EnableNfsV3 = enableNfsV3;
            this.AllowCrossTenantReplication = allowCrossTenantReplication;
            this.DefaultToOAuthAuthentication = defaultToOAuthAuthentication;
            this.PublicNetworkAccess = publicNetworkAccess;
            this.ImmutableStorageWithVersioning = immutableStorageWithVersioning;
            this.AllowedCopyScope = allowedCopyScope;
            this.StorageAccountSkuConversionStatus = storageAccountSkuConversionStatus;
            this.DnsEndpointType = dnsEndpointType;
            this.IsSkuConversionBlocked = isSkuConversionBlocked;
            this.AccountMigrationInProgress = accountMigrationInProgress;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets gets the status of the storage account at the time the operation was
        /// called. Possible values include: &#39;Creating&#39;, &#39;ResolvingDNS&#39;, &#39;Succeeded&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public ProvisioningState? ProvisioningState {get; private set; }

        /// <summary>
        /// Gets gets the URLs that are used to perform a retrieval of a public blob,
        /// queue, or table object. Note that Standard_ZRS and Premium_LRS accounts
        /// only return the blob endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryEndpoints")]
        public Endpoints PrimaryEndpoints {get; private set; }

        /// <summary>
        /// Gets gets the location of the primary data center for the storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryLocation")]
        public string PrimaryLocation {get; private set; }

        /// <summary>
        /// Gets gets the status indicating whether the primary location of the storage
        /// account is available or unavailable. Possible values include: &#39;available&#39;, &#39;unavailable&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "statusOfPrimary")]
        public AccountStatus? StatusOfPrimary {get; private set; }

        /// <summary>
        /// Gets gets the timestamp of the most recent instance of a failover to the
        /// secondary location. Only the most recent timestamp is retained. This
        /// element is not returned if there has never been a failover instance. Only
        /// available if the accountType is Standard_GRS or Standard_RAGRS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastGeoFailoverTime")]
        public System.DateTime? LastGeoFailoverTime {get; private set; }

        /// <summary>
        /// Gets gets the location of the geo-replicated secondary for the storage
        /// account. Only available if the accountType is Standard_GRS or
        /// Standard_RAGRS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "secondaryLocation")]
        public string SecondaryLocation {get; private set; }

        /// <summary>
        /// Gets gets the status indicating whether the secondary location of the
        /// storage account is available or unavailable. Only available if the SKU name
        /// is Standard_GRS or Standard_RAGRS. Possible values include: &#39;available&#39;, &#39;unavailable&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "statusOfSecondary")]
        public AccountStatus? StatusOfSecondary {get; private set; }

        /// <summary>
        /// Gets gets the creation date and time of the storage account in UTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "creationTime")]
        public System.DateTime? CreationTime {get; private set; }

        /// <summary>
        /// Gets gets the custom domain the user assigned to this storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customDomain")]
        public CustomDomain CustomDomain {get; private set; }

        /// <summary>
        /// Gets sasPolicy assigned to the storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sasPolicy")]
        public SasPolicy SasPolicy {get; private set; }

        /// <summary>
        /// Gets keyPolicy assigned to the storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keyPolicy")]
        public KeyPolicy KeyPolicy {get; private set; }

        /// <summary>
        /// Gets storage account keys creation time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keyCreationTime")]
        public KeyCreationTime KeyCreationTime {get; private set; }

        /// <summary>
        /// Gets gets the URLs that are used to perform a retrieval of a public blob,
        /// queue, or table object from the secondary location of the storage account.
        /// Only available if the SKU name is Standard_RAGRS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "secondaryEndpoints")]
        public Endpoints SecondaryEndpoints {get; private set; }

        /// <summary>
        /// Gets encryption settings to be used for server-side encryption for the
        /// storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryption")]
        public Encryption Encryption {get; private set; }

        /// <summary>
        /// Gets required for storage accounts where kind = BlobStorage. The access
        /// tier is used for billing. The &#39;Premium&#39; access tier is the default value
        /// for premium block blobs storage account type and it cannot be changed for
        /// the premium block blobs storage account type. Possible values include: &#39;Hot&#39;, &#39;Cool&#39;, &#39;Premium&#39;, &#39;Cold&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accessTier")]
        public AccessTier? AccessTier {get; private set; }

        /// <summary>
        /// Gets or sets provides the identity based authentication settings for Azure
        /// Files.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azureFilesIdentityBasedAuthentication")]
        public AzureFilesIdentityBasedAuthentication AzureFilesIdentityBasedAuthentication {get; set; }

        /// <summary>
        /// Gets or sets allows https traffic only to storage service if sets to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supportsHttpsTrafficOnly")]
        public bool? EnableHttpsTrafficOnly {get; set; }

        /// <summary>
        /// Gets network rule set
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkAcls")]
        public NetworkRuleSet NetworkRuleSet {get; private set; }

        /// <summary>
        /// Gets or sets enables Secure File Transfer Protocol, if set to true
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isSftpEnabled")]
        public bool? IsSftpEnabled {get; set; }

        /// <summary>
        /// Gets or sets enables local users feature, if set to true
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isLocalUserEnabled")]
        public bool? IsLocalUserEnabled {get; set; }

        /// <summary>
        /// Gets or sets enables extended group support with local users feature, if
        /// set to true
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableExtendedGroups")]
        public bool? EnableExtendedGroups {get; set; }

        /// <summary>
        /// Gets or sets account HierarchicalNamespace enabled if sets to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isHnsEnabled")]
        public bool? IsHnsEnabled {get; set; }

        /// <summary>
        /// Gets geo Replication Stats
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "geoReplicationStats")]
        public GeoReplicationStats GeoReplicationStats {get; private set; }

        /// <summary>
        /// Gets if the failover is in progress, the value will be true, otherwise, it
        /// will be null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failoverInProgress")]
        public bool? FailoverInProgress {get; private set; }

        /// <summary>
        /// Gets or sets allow large file shares if sets to Enabled. It cannot be
        /// disabled once it is enabled. Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "largeFileSharesState")]
        public string LargeFileSharesState {get; set; }

        /// <summary>
        /// Gets list of private endpoint connection associated with the specified
        /// storage account
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateEndpointConnections")]
        public System.Collections.Generic.IList<PrivateEndpointConnection> PrivateEndpointConnections {get; private set; }

        /// <summary>
        /// Gets or sets maintains information about the network routing choice opted
        /// by the user for data transfer
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "routingPreference")]
        public RoutingPreference RoutingPreference {get; set; }

        /// <summary>
        /// Gets blob restore status
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "blobRestoreStatus")]
        public BlobRestoreStatus BlobRestoreStatus {get; private set; }

        /// <summary>
        /// Gets or sets allow or disallow public access to all blobs or containers in
        /// the storage account. The default interpretation is false for this property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowBlobPublicAccess")]
        public bool? AllowBlobPublicAccess {get; set; }

        /// <summary>
        /// Gets or sets set the minimum TLS version to be permitted on requests to
        /// storage. The default interpretation is TLS 1.0 for this property. Possible values include: &#39;TLS1_0&#39;, &#39;TLS1_1&#39;, &#39;TLS1_2&#39;, &#39;TLS1_3&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minimumTlsVersion")]
        public string MinimumTlsVersion {get; set; }

        /// <summary>
        /// Gets or sets indicates whether the storage account permits requests to be
        /// authorized with the account access key via Shared Key. If false, then all
        /// requests, including shared access signatures, must be authorized with Azure
        /// Active Directory (Azure AD). The default value is null, which is equivalent
        /// to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowSharedKeyAccess")]
        public bool? AllowSharedKeyAccess {get; set; }

        /// <summary>
        /// Gets or sets nFS 3.0 protocol support enabled if set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isNfsV3Enabled")]
        public bool? EnableNfsV3 {get; set; }

        /// <summary>
        /// Gets or sets allow or disallow cross AAD tenant object replication. Set
        /// this property to true for new or existing accounts only if object
        /// replication policies will involve storage accounts in different AAD
        /// tenants. The default interpretation is false for new accounts to follow
        /// best security practices by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowCrossTenantReplication")]
        public bool? AllowCrossTenantReplication {get; set; }

        /// <summary>
        /// Gets or sets a boolean flag which indicates whether the default
        /// authentication is OAuth or not. The default interpretation is false for
        /// this property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultToOAuthAuthentication")]
        public bool? DefaultToOAuthAuthentication {get; set; }

        /// <summary>
        /// Gets or sets allow, disallow, or let Network Security Perimeter
        /// configuration to evaluate public network access to Storage Account. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;, &#39;SecuredByPerimeter&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publicNetworkAccess")]
        public string PublicNetworkAccess {get; set; }

        /// <summary>
        /// Gets or sets the property is immutable and can only be set to true at the
        /// account creation time. When set to true, it enables object level
        /// immutability for all the containers in the account by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "immutableStorageWithVersioning")]
        public ImmutableStorageAccount ImmutableStorageWithVersioning {get; set; }

        /// <summary>
        /// Gets or sets restrict copy to and from Storage Accounts within an AAD
        /// tenant or with Private Links to the same VNet. Possible values include: &#39;PrivateLink&#39;, &#39;AAD&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowedCopyScope")]
        public string AllowedCopyScope {get; set; }

        /// <summary>
        /// Gets or sets this property is readOnly and is set by server during
        /// asynchronous storage account sku conversion operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageAccountSkuConversionStatus")]
        public StorageAccountSkuConversionStatus StorageAccountSkuConversionStatus {get; set; }

        /// <summary>
        /// Gets or sets allows you to specify the type of endpoint. Set this to
        /// AzureDNSZone to create a large number of accounts in a single subscription,
        /// which creates accounts in an Azure DNS Zone and the endpoint URL will have
        /// an alphanumeric DNS Zone identifier. Possible values include: &#39;Standard&#39;, &#39;AzureDnsZone&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dnsEndpointType")]
        public string DnsEndpointType {get; set; }

        /// <summary>
        /// Gets this property will be set to true or false on an event of ongoing
        /// migration. Default value is null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isSkuConversionBlocked")]
        public bool? IsSkuConversionBlocked {get; private set; }

        /// <summary>
        /// Gets if customer initiated account migration is in progress, the value will
        /// be true else it will be null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accountMigrationInProgress")]
        public bool? AccountMigrationInProgress {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {






            if (this.CustomDomain != null)
            {
                this.CustomDomain.Validate();
            }
            if (this.SasPolicy != null)
            {
                this.SasPolicy.Validate();
            }
            if (this.KeyPolicy != null)
            {
                this.KeyPolicy.Validate();
            }




            if (this.AzureFilesIdentityBasedAuthentication != null)
            {
                this.AzureFilesIdentityBasedAuthentication.Validate();
            }
            if (this.NetworkRuleSet != null)
            {
                this.NetworkRuleSet.Validate();
            }




            if (this.BlobRestoreStatus != null)
            {
                this.BlobRestoreStatus.Validate();
            }


            if (this.ImmutableStorageWithVersioning != null)
            {
                this.ImmutableStorageWithVersioning.Validate();
            }



        }
    }
}