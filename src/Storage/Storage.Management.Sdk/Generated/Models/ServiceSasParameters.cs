// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// The parameters to list service SAS credentials of a specific resource.
    /// </summary>
    public partial class ServiceSasParameters
    {
        /// <summary>
        /// Initializes a new instance of the ServiceSasParameters class.
        /// </summary>
        public ServiceSasParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceSasParameters class.
        /// </summary>

        /// <param name="canonicalizedResource">The canonical path to the signed resource.
        /// </param>

        /// <param name="resource">The signed services accessible with the service SAS. Possible values
        /// include: Blob (b), Container (c), File (f), Share (s).
        /// Possible values include: &#39;b&#39;, &#39;c&#39;, &#39;f&#39;, &#39;s&#39;</param>

        /// <param name="permissions">The signed permissions for the service SAS. Possible values include: Read
        /// (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and
        /// Process (p).
        /// Possible values include: &#39;r&#39;, &#39;d&#39;, &#39;w&#39;, &#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;u&#39;, &#39;p&#39;</param>

        /// <param name="ipAddressOrRange">An IP address or a range of IP addresses from which to accept requests.
        /// </param>

        /// <param name="protocols">The protocol permitted for a request made with the account SAS.
        /// Possible values include: &#39;https,http&#39;, &#39;https&#39;</param>

        /// <param name="sharedAccessStartTime">The time at which the SAS becomes valid.
        /// </param>

        /// <param name="sharedAccessExpiryTime">The time at which the shared access signature becomes invalid.
        /// </param>

        /// <param name="identifier">A unique value up to 64 characters in length that correlates to an access
        /// policy specified for the container, queue, or table.
        /// </param>

        /// <param name="partitionKeyStart">The start of partition key.
        /// </param>

        /// <param name="partitionKeyEnd">The end of partition key.
        /// </param>

        /// <param name="rowKeyStart">The start of row key.
        /// </param>

        /// <param name="rowKeyEnd">The end of row key.
        /// </param>

        /// <param name="keyToSign">The key to sign the account SAS token with.
        /// </param>

        /// <param name="cacheControl">The response header override for cache control.
        /// </param>

        /// <param name="contentDisposition">The response header override for content disposition.
        /// </param>

        /// <param name="contentEncoding">The response header override for content encoding.
        /// </param>

        /// <param name="contentLanguage">The response header override for content language.
        /// </param>

        /// <param name="contentType">The response header override for content type.
        /// </param>
        public ServiceSasParameters(string canonicalizedResource, string resource = default(string), string permissions = default(string), string ipAddressOrRange = default(string), HttpProtocol? protocols = default(HttpProtocol?), System.DateTime? sharedAccessStartTime = default(System.DateTime?), System.DateTime? sharedAccessExpiryTime = default(System.DateTime?), string identifier = default(string), string partitionKeyStart = default(string), string partitionKeyEnd = default(string), string rowKeyStart = default(string), string rowKeyEnd = default(string), string keyToSign = default(string), string cacheControl = default(string), string contentDisposition = default(string), string contentEncoding = default(string), string contentLanguage = default(string), string contentType = default(string))

        {
            this.CanonicalizedResource = canonicalizedResource;
            this.Resource = resource;
            this.Permissions = permissions;
            this.IPAddressOrRange = ipAddressOrRange;
            this.Protocols = protocols;
            this.SharedAccessStartTime = sharedAccessStartTime;
            this.SharedAccessExpiryTime = sharedAccessExpiryTime;
            this.Identifier = identifier;
            this.PartitionKeyStart = partitionKeyStart;
            this.PartitionKeyEnd = partitionKeyEnd;
            this.RowKeyStart = rowKeyStart;
            this.RowKeyEnd = rowKeyEnd;
            this.KeyToSign = keyToSign;
            this.CacheControl = cacheControl;
            this.ContentDisposition = contentDisposition;
            this.ContentEncoding = contentEncoding;
            this.ContentLanguage = contentLanguage;
            this.ContentType = contentType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the canonical path to the signed resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "canonicalizedResource")]
        public string CanonicalizedResource {get; set; }

        /// <summary>
        /// Gets or sets the signed services accessible with the service SAS. Possible
        /// values include: Blob (b), Container (c), File (f), Share (s). Possible values include: &#39;b&#39;, &#39;c&#39;, &#39;f&#39;, &#39;s&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "signedResource")]
        public string Resource {get; set; }

        /// <summary>
        /// Gets or sets the signed permissions for the service SAS. Possible values
        /// include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c),
        /// Update (u) and Process (p). Possible values include: &#39;r&#39;, &#39;d&#39;, &#39;w&#39;, &#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;u&#39;, &#39;p&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "signedPermission")]
        public string Permissions {get; set; }

        /// <summary>
        /// Gets or sets an IP address or a range of IP addresses from which to accept
        /// requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "signedIp")]
        public string IPAddressOrRange {get; set; }

        /// <summary>
        /// Gets or sets the protocol permitted for a request made with the account
        /// SAS. Possible values include: &#39;https,http&#39;, &#39;https&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "signedProtocol")]
        public HttpProtocol? Protocols {get; set; }

        /// <summary>
        /// Gets or sets the time at which the SAS becomes valid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "signedStart")]
        public System.DateTime? SharedAccessStartTime {get; set; }

        /// <summary>
        /// Gets or sets the time at which the shared access signature becomes invalid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "signedExpiry")]
        public System.DateTime? SharedAccessExpiryTime {get; set; }

        /// <summary>
        /// Gets or sets a unique value up to 64 characters in length that correlates
        /// to an access policy specified for the container, queue, or table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "signedIdentifier")]
        public string Identifier {get; set; }

        /// <summary>
        /// Gets or sets the start of partition key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startPk")]
        public string PartitionKeyStart {get; set; }

        /// <summary>
        /// Gets or sets the end of partition key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endPk")]
        public string PartitionKeyEnd {get; set; }

        /// <summary>
        /// Gets or sets the start of row key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startRk")]
        public string RowKeyStart {get; set; }

        /// <summary>
        /// Gets or sets the end of row key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endRk")]
        public string RowKeyEnd {get; set; }

        /// <summary>
        /// Gets or sets the key to sign the account SAS token with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keyToSign")]
        public string KeyToSign {get; set; }

        /// <summary>
        /// Gets or sets the response header override for cache control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rscc")]
        public string CacheControl {get; set; }

        /// <summary>
        /// Gets or sets the response header override for content disposition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rscd")]
        public string ContentDisposition {get; set; }

        /// <summary>
        /// Gets or sets the response header override for content encoding.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rsce")]
        public string ContentEncoding {get; set; }

        /// <summary>
        /// Gets or sets the response header override for content language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rscl")]
        public string ContentLanguage {get; set; }

        /// <summary>
        /// Gets or sets the response header override for content type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rsct")]
        public string ContentType {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.CanonicalizedResource == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "CanonicalizedResource");
            }





            if (this.Identifier != null)
            {
                if (this.Identifier.Length > 64)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Identifier", 64);
                }
            }










        }
    }
}