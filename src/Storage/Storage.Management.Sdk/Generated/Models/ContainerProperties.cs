// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// The properties of a container.
    /// </summary>
    public partial class ContainerProperties
    {
        /// <summary>
        /// Initializes a new instance of the ContainerProperties class.
        /// </summary>
        public ContainerProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ContainerProperties class.
        /// </summary>

        /// <param name="version">The version of the deleted blob container.
        /// </param>

        /// <param name="deleted">Indicates whether the blob container was deleted.
        /// </param>

        /// <param name="deletedTime">Blob container deletion time.
        /// </param>

        /// <param name="remainingRetentionDays">Remaining retention days for soft deleted blob container.
        /// </param>

        /// <param name="defaultEncryptionScope">Default the container to use specified encryption scope for all writes.
        /// </param>

        /// <param name="denyEncryptionScopeOverride">Block override of encryption scope from the container default.
        /// </param>

        /// <param name="publicAccess">Specifies whether data in the container may be accessed publicly and the
        /// level of access.
        /// Possible values include: 'Container', 'Blob', 'None'</param>

        /// <param name="lastModifiedTime">Returns the date and time the container was last modified.
        /// </param>

        /// <param name="leaseStatus">The lease status of the container.
        /// Possible values include: 'Locked', 'Unlocked'</param>

        /// <param name="leaseState">Lease state of the container.
        /// Possible values include: 'Available', 'Leased', 'Expired', 'Breaking',
        /// 'Broken'</param>

        /// <param name="leaseDuration">Specifies whether the lease on a container is of infinite or fixed
        /// duration, only when the container is leased.
        /// Possible values include: 'Infinite', 'Fixed'</param>

        /// <param name="metadata">A name-value pair to associate with the container as metadata.
        /// </param>

        /// <param name="immutabilityPolicy">The ImmutabilityPolicy property of the container.
        /// </param>

        /// <param name="legalHold">The LegalHold property of the container.
        /// </param>

        /// <param name="hasLegalHold">The hasLegalHold public property is set to true by SRP if there are at
        /// least one existing tag. The hasLegalHold public property is set to false by
        /// SRP if all existing legal hold tags are cleared out. There can be a maximum
        /// of 1000 blob containers with hasLegalHold=true for a given account.
        /// </param>

        /// <param name="hasImmutabilityPolicy">The hasImmutabilityPolicy public property is set to true by SRP if
        /// ImmutabilityPolicy has been created for this container. The
        /// hasImmutabilityPolicy public property is set to false by SRP if
        /// ImmutabilityPolicy has not been created for this container.
        /// </param>

        /// <param name="immutableStorageWithVersioning">The object level immutability property of the container. The property is
        /// immutable and can only be set to true at the container creation time.
        /// Existing containers must undergo a migration process.
        /// </param>

        /// <param name="enableNfsV3RootSquash">Enable NFSv3 root squash on blob container.
        /// </param>

        /// <param name="enableNfsV3AllSquash">Enable NFSv3 all squash on blob container.
        /// </param>
        public ContainerProperties(string version = default(string), bool? deleted = default(bool?), System.DateTime? deletedTime = default(System.DateTime?), int? remainingRetentionDays = default(int?), string defaultEncryptionScope = default(string), bool? denyEncryptionScopeOverride = default(bool?), PublicAccess? publicAccess = default(PublicAccess?), System.DateTime? lastModifiedTime = default(System.DateTime?), string leaseStatus = default(string), string leaseState = default(string), string leaseDuration = default(string), System.Collections.Generic.IDictionary<string, string> metadata = default(System.Collections.Generic.IDictionary<string, string>), ImmutabilityPolicyProperties immutabilityPolicy = default(ImmutabilityPolicyProperties), LegalHoldProperties legalHold = default(LegalHoldProperties), bool? hasLegalHold = default(bool?), bool? hasImmutabilityPolicy = default(bool?), ImmutableStorageWithVersioning immutableStorageWithVersioning = default(ImmutableStorageWithVersioning), bool? enableNfsV3RootSquash = default(bool?), bool? enableNfsV3AllSquash = default(bool?))

        {
            this.Version = version;
            this.Deleted = deleted;
            this.DeletedTime = deletedTime;
            this.RemainingRetentionDays = remainingRetentionDays;
            this.DefaultEncryptionScope = defaultEncryptionScope;
            this.DenyEncryptionScopeOverride = denyEncryptionScopeOverride;
            this.PublicAccess = publicAccess;
            this.LastModifiedTime = lastModifiedTime;
            this.LeaseStatus = leaseStatus;
            this.LeaseState = leaseState;
            this.LeaseDuration = leaseDuration;
            this.Metadata = metadata;
            this.ImmutabilityPolicy = immutabilityPolicy;
            this.LegalHold = legalHold;
            this.HasLegalHold = hasLegalHold;
            this.HasImmutabilityPolicy = hasImmutabilityPolicy;
            this.ImmutableStorageWithVersioning = immutableStorageWithVersioning;
            this.EnableNfsV3RootSquash = enableNfsV3RootSquash;
            this.EnableNfsV3AllSquash = enableNfsV3AllSquash;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the version of the deleted blob container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "version")]
        public string Version {get; private set; }

        /// <summary>
        /// Gets indicates whether the blob container was deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deleted")]
        public bool? Deleted {get; private set; }

        /// <summary>
        /// Gets blob container deletion time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deletedTime")]
        public System.DateTime? DeletedTime {get; private set; }

        /// <summary>
        /// Gets remaining retention days for soft deleted blob container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "remainingRetentionDays")]
        public int? RemainingRetentionDays {get; private set; }

        /// <summary>
        /// Gets or sets default the container to use specified encryption scope for
        /// all writes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultEncryptionScope")]
        public string DefaultEncryptionScope {get; set; }

        /// <summary>
        /// Gets or sets block override of encryption scope from the container default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "denyEncryptionScopeOverride")]
        public bool? DenyEncryptionScopeOverride {get; set; }

        /// <summary>
        /// Gets or sets specifies whether data in the container may be accessed
        /// publicly and the level of access. Possible values include: &#39;Container&#39;, &#39;Blob&#39;, &#39;None&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publicAccess")]
        public PublicAccess? PublicAccess {get; set; }

        /// <summary>
        /// Gets returns the date and time the container was last modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastModifiedTime")]
        public System.DateTime? LastModifiedTime {get; private set; }

        /// <summary>
        /// Gets the lease status of the container. Possible values include: &#39;Locked&#39;, &#39;Unlocked&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "leaseStatus")]
        public string LeaseStatus {get; private set; }

        /// <summary>
        /// Gets lease state of the container. Possible values include: &#39;Available&#39;, &#39;Leased&#39;, &#39;Expired&#39;, &#39;Breaking&#39;, &#39;Broken&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "leaseState")]
        public string LeaseState {get; private set; }

        /// <summary>
        /// Gets specifies whether the lease on a container is of infinite or fixed
        /// duration, only when the container is leased. Possible values include: &#39;Infinite&#39;, &#39;Fixed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "leaseDuration")]
        public string LeaseDuration {get; private set; }

        /// <summary>
        /// Gets or sets a name-value pair to associate with the container as metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metadata")]
        public System.Collections.Generic.IDictionary<string, string> Metadata {get; set; }

        /// <summary>
        /// Gets the ImmutabilityPolicy property of the container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "immutabilityPolicy")]
        public ImmutabilityPolicyProperties ImmutabilityPolicy {get; private set; }

        /// <summary>
        /// Gets the LegalHold property of the container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "legalHold")]
        public LegalHoldProperties LegalHold {get; private set; }

        /// <summary>
        /// Gets the hasLegalHold public property is set to true by SRP if there are at
        /// least one existing tag. The hasLegalHold public property is set to false by
        /// SRP if all existing legal hold tags are cleared out. There can be a maximum
        /// of 1000 blob containers with hasLegalHold=true for a given account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hasLegalHold")]
        public bool? HasLegalHold {get; private set; }

        /// <summary>
        /// Gets the hasImmutabilityPolicy public property is set to true by SRP if
        /// ImmutabilityPolicy has been created for this container. The
        /// hasImmutabilityPolicy public property is set to false by SRP if
        /// ImmutabilityPolicy has not been created for this container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hasImmutabilityPolicy")]
        public bool? HasImmutabilityPolicy {get; private set; }

        /// <summary>
        /// Gets or sets the object level immutability property of the container. The
        /// property is immutable and can only be set to true at the container creation
        /// time. Existing containers must undergo a migration process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "immutableStorageWithVersioning")]
        public ImmutableStorageWithVersioning ImmutableStorageWithVersioning {get; set; }

        /// <summary>
        /// Gets or sets enable NFSv3 root squash on blob container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableNfsV3RootSquash")]
        public bool? EnableNfsV3RootSquash {get; set; }

        /// <summary>
        /// Gets or sets enable NFSv3 all squash on blob container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableNfsV3AllSquash")]
        public bool? EnableNfsV3AllSquash {get; set; }
    }
}