// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// The Storage Account Local User properties.
    /// </summary>
    public partial class LocalUserProperties
    {
        /// <summary>
        /// Initializes a new instance of the LocalUserProperties class.
        /// </summary>
        public LocalUserProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LocalUserProperties class.
        /// </summary>

        /// <param name="permissionScopes">The permission scopes of the local user.
        /// </param>

        /// <param name="homeDirectory">Optional, local user home directory.
        /// </param>

        /// <param name="sshAuthorizedKeys">Optional, local user ssh authorized keys for SFTP.
        /// </param>

        /// <param name="sid">A unique Security Identifier that is generated by the server.
        /// </param>

        /// <param name="hasSharedKey">Indicates whether shared key exists. Set it to false to remove existing
        /// shared key.
        /// </param>

        /// <param name="hasSshKey">Indicates whether ssh key exists. Set it to false to remove existing SSH
        /// key.
        /// </param>

        /// <param name="hasSshPassword">Indicates whether ssh password exists. Set it to false to remove existing
        /// SSH password.
        /// </param>
        public LocalUserProperties(System.Collections.Generic.IList<PermissionScope> permissionScopes = default(System.Collections.Generic.IList<PermissionScope>), string homeDirectory = default(string), System.Collections.Generic.IList<SshPublicKey> sshAuthorizedKeys = default(System.Collections.Generic.IList<SshPublicKey>), string sid = default(string), bool? hasSharedKey = default(bool?), bool? hasSshKey = default(bool?), bool? hasSshPassword = default(bool?))

        {
            this.PermissionScopes = permissionScopes;
            this.HomeDirectory = homeDirectory;
            this.SshAuthorizedKeys = sshAuthorizedKeys;
            this.Sid = sid;
            this.HasSharedKey = hasSharedKey;
            this.HasSshKey = hasSshKey;
            this.HasSshPassword = hasSshPassword;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the permission scopes of the local user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "permissionScopes")]
        public System.Collections.Generic.IList<PermissionScope> PermissionScopes {get; set; }

        /// <summary>
        /// Gets or sets optional, local user home directory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "homeDirectory")]
        public string HomeDirectory {get; set; }

        /// <summary>
        /// Gets or sets optional, local user ssh authorized keys for SFTP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sshAuthorizedKeys")]
        public System.Collections.Generic.IList<SshPublicKey> SshAuthorizedKeys {get; set; }

        /// <summary>
        /// Gets a unique Security Identifier that is generated by the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sid")]
        public string Sid {get; private set; }

        /// <summary>
        /// Gets or sets indicates whether shared key exists. Set it to false to remove
        /// existing shared key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hasSharedKey")]
        public bool? HasSharedKey {get; set; }

        /// <summary>
        /// Gets or sets indicates whether ssh key exists. Set it to false to remove
        /// existing SSH key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hasSshKey")]
        public bool? HasSshKey {get; set; }

        /// <summary>
        /// Gets or sets indicates whether ssh password exists. Set it to false to
        /// remove existing SSH password.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hasSshPassword")]
        public bool? HasSshPassword {get; set; }
    }
}