// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// Usage of provisioned storage, IOPS, bandwidth and number of file shares
    /// across all live shares or soft-deleted shares in the account.
    /// </summary>
    public partial class AccountUsageElements
    {
        /// <summary>
        /// Initializes a new instance of the AccountUsageElements class.
        /// </summary>
        public AccountUsageElements()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AccountUsageElements class.
        /// </summary>

        /// <param name="fileShareCount">The total number of file shares.
        /// </param>

        /// <param name="provisionedStorageGiB">The total provisioned storage quota in gibibytes.
        /// </param>

        /// <param name="provisionedIops">The total provisioned IOPS.
        /// </param>

        /// <param name="provisionedBandwidthMiBPerSec">The total provisioned bandwidth in mebibytes per second.
        /// </param>
        public AccountUsageElements(int? fileShareCount = default(int?), int? provisionedStorageGiB = default(int?), int? provisionedIops = default(int?), int? provisionedBandwidthMiBPerSec = default(int?))

        {
            this.FileShareCount = fileShareCount;
            this.ProvisionedStorageGiB = provisionedStorageGiB;
            this.ProvisionedIops = provisionedIops;
            this.ProvisionedBandwidthMiBPerSec = provisionedBandwidthMiBPerSec;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the total number of file shares.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileShareCount")]
        public int? FileShareCount {get; private set; }

        /// <summary>
        /// Gets the total provisioned storage quota in gibibytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisionedStorageGiB")]
        public int? ProvisionedStorageGiB {get; private set; }

        /// <summary>
        /// Gets the total provisioned IOPS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisionedIOPS")]
        public int? ProvisionedIops {get; private set; }

        /// <summary>
        /// Gets the total provisioned bandwidth in mebibytes per second.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisionedBandwidthMiBPerSec")]
        public int? ProvisionedBandwidthMiBPerSec {get; private set; }
    }
}