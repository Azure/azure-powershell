// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// The properties of a storage accountâ€™s ongoing or enqueued migration.
    /// </summary>
    public partial class StorageAccountMigrationProperties
    {
        /// <summary>
        /// Initializes a new instance of the StorageAccountMigrationProperties class.
        /// </summary>
        public StorageAccountMigrationProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageAccountMigrationProperties class.
        /// </summary>

        /// <param name="targetSkuName">Target sku name for the account
        /// Possible values include: &#39;Standard_LRS&#39;, &#39;Standard_GRS&#39;, &#39;Standard_RAGRS&#39;,
        /// &#39;Standard_ZRS&#39;, &#39;Premium_LRS&#39;, &#39;Premium_ZRS&#39;, &#39;Standard_GZRS&#39;,
        /// &#39;Standard_RAGZRS&#39;, &#39;StandardV2_LRS&#39;, &#39;StandardV2_GRS&#39;, &#39;StandardV2_ZRS&#39;,
        /// &#39;StandardV2_GZRS&#39;, &#39;PremiumV2_LRS&#39;, &#39;PremiumV2_ZRS&#39;</param>

        /// <param name="migrationStatus">Current status of migration
        /// Possible values include: &#39;Invalid&#39;, &#39;SubmittedForConversion&#39;, &#39;InProgress&#39;,
        /// &#39;Complete&#39;, &#39;Failed&#39;</param>

        /// <param name="migrationFailedReason">Error code for migration failure
        /// </param>

        /// <param name="migrationFailedDetailedReason">Reason for migration failure
        /// </param>
        public StorageAccountMigrationProperties(string targetSkuName, string migrationStatus = default(string), string migrationFailedReason = default(string), string migrationFailedDetailedReason = default(string))

        {
            this.TargetSkuName = targetSkuName;
            this.MigrationStatus = migrationStatus;
            this.MigrationFailedReason = migrationFailedReason;
            this.MigrationFailedDetailedReason = migrationFailedDetailedReason;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets target sku name for the account Possible values include: &#39;Standard_LRS&#39;, &#39;Standard_GRS&#39;, &#39;Standard_RAGRS&#39;, &#39;Standard_ZRS&#39;, &#39;Premium_LRS&#39;, &#39;Premium_ZRS&#39;, &#39;Standard_GZRS&#39;, &#39;Standard_RAGZRS&#39;, &#39;StandardV2_LRS&#39;, &#39;StandardV2_GRS&#39;, &#39;StandardV2_ZRS&#39;, &#39;StandardV2_GZRS&#39;, &#39;PremiumV2_LRS&#39;, &#39;PremiumV2_ZRS&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetSkuName")]
        public string TargetSkuName {get; set; }

        /// <summary>
        /// Gets current status of migration Possible values include: &#39;Invalid&#39;, &#39;SubmittedForConversion&#39;, &#39;InProgress&#39;, &#39;Complete&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "migrationStatus")]
        public string MigrationStatus {get; private set; }

        /// <summary>
        /// Gets error code for migration failure
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "migrationFailedReason")]
        public string MigrationFailedReason {get; private set; }

        /// <summary>
        /// Gets reason for migration failure
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "migrationFailedDetailedReason")]
        public string MigrationFailedDetailedReason {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.TargetSkuName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TargetSkuName");
            }




        }
    }
}