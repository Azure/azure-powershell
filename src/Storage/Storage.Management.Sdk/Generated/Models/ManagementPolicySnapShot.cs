// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Storage.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Management policy action for snapshot.
    /// </summary>
    public partial class ManagementPolicySnapShot
    {
        /// <summary>
        /// Initializes a new instance of the ManagementPolicySnapShot class.
        /// </summary>
        public ManagementPolicySnapShot()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagementPolicySnapShot class.
        /// </summary>
        /// <param name="tierToCool">The function to tier blob snapshot to cool
        /// storage.</param>
        /// <param name="tierToArchive">The function to tier blob snapshot to
        /// archive storage.</param>
        /// <param name="tierToCold">The function to tier blobs to cold
        /// storage.</param>
        /// <param name="tierToHot">The function to tier blobs to hot storage.
        /// This action can only be used with Premium Block Blob Storage
        /// Accounts</param>
        /// <param name="delete">The function to delete the blob
        /// snapshot</param>
        public ManagementPolicySnapShot(DateAfterCreation tierToCool = default(DateAfterCreation), DateAfterCreation tierToArchive = default(DateAfterCreation), DateAfterCreation tierToCold = default(DateAfterCreation), DateAfterCreation tierToHot = default(DateAfterCreation), DateAfterCreation delete = default(DateAfterCreation))
        {
            TierToCool = tierToCool;
            TierToArchive = tierToArchive;
            TierToCold = tierToCold;
            TierToHot = tierToHot;
            Delete = delete;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the function to tier blob snapshot to cool storage.
        /// </summary>
        [JsonProperty(PropertyName = "tierToCool")]
        public DateAfterCreation TierToCool { get; set; }

        /// <summary>
        /// Gets or sets the function to tier blob snapshot to archive storage.
        /// </summary>
        [JsonProperty(PropertyName = "tierToArchive")]
        public DateAfterCreation TierToArchive { get; set; }

        /// <summary>
        /// Gets or sets the function to tier blobs to cold storage.
        /// </summary>
        [JsonProperty(PropertyName = "tierToCold")]
        public DateAfterCreation TierToCold { get; set; }

        /// <summary>
        /// Gets or sets the function to tier blobs to hot storage. This action
        /// can only be used with Premium Block Blob Storage Accounts
        /// </summary>
        [JsonProperty(PropertyName = "tierToHot")]
        public DateAfterCreation TierToHot { get; set; }

        /// <summary>
        /// Gets or sets the function to delete the blob snapshot
        /// </summary>
        [JsonProperty(PropertyName = "delete")]
        public DateAfterCreation Delete { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TierToCool != null)
            {
                TierToCool.Validate();
            }
            if (TierToArchive != null)
            {
                TierToArchive.Validate();
            }
            if (TierToCold != null)
            {
                TierToCold.Validate();
            }
            if (TierToHot != null)
            {
                TierToHot.Validate();
            }
            if (Delete != null)
            {
                Delete.Validate();
            }
        }
    }
}
