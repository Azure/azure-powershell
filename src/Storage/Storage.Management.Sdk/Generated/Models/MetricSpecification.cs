// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// Metric specification of operation.
    /// </summary>
    public partial class MetricSpecification
    {
        /// <summary>
        /// Initializes a new instance of the MetricSpecification class.
        /// </summary>
        public MetricSpecification()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MetricSpecification class.
        /// </summary>

        /// <param name="name">Name of metric specification.
        /// </param>

        /// <param name="displayName">Display name of metric specification.
        /// </param>

        /// <param name="displayDescription">Display description of metric specification.
        /// </param>

        /// <param name="unit">Unit could be Bytes or Count.
        /// </param>

        /// <param name="dimensions">Dimensions of blobs, including blob type and access tier.
        /// </param>

        /// <param name="aggregationType">Aggregation type could be Average.
        /// </param>

        /// <param name="fillGapWithZero">The property to decide fill gap with zero or not.
        /// </param>

        /// <param name="category">The category this metric specification belong to, could be Capacity.
        /// </param>

        /// <param name="resourceIdDimensionNameOverride">Account Resource Id.
        /// </param>
        public MetricSpecification(string name = default(string), string displayName = default(string), string displayDescription = default(string), string unit = default(string), System.Collections.Generic.IList<Dimension> dimensions = default(System.Collections.Generic.IList<Dimension>), string aggregationType = default(string), bool? fillGapWithZero = default(bool?), string category = default(string), string resourceIdDimensionNameOverride = default(string))

        {
            this.Name = name;
            this.DisplayName = displayName;
            this.DisplayDescription = displayDescription;
            this.Unit = unit;
            this.Dimensions = dimensions;
            this.AggregationType = aggregationType;
            this.FillGapWithZero = fillGapWithZero;
            this.Category = category;
            this.ResourceIdDimensionNameOverride = resourceIdDimensionNameOverride;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of metric specification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets display name of metric specification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets display description of metric specification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "displayDescription")]
        public string DisplayDescription {get; set; }

        /// <summary>
        /// Gets or sets unit could be Bytes or Count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "unit")]
        public string Unit {get; set; }

        /// <summary>
        /// Gets or sets dimensions of blobs, including blob type and access tier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dimensions")]
        public System.Collections.Generic.IList<Dimension> Dimensions {get; set; }

        /// <summary>
        /// Gets or sets aggregation type could be Average.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "aggregationType")]
        public string AggregationType {get; set; }

        /// <summary>
        /// Gets or sets the property to decide fill gap with zero or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fillGapWithZero")]
        public bool? FillGapWithZero {get; set; }

        /// <summary>
        /// Gets or sets the category this metric specification belong to, could be
        /// Capacity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "category")]
        public string Category {get; set; }

        /// <summary>
        /// Gets or sets account Resource Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceIdDimensionNameOverride")]
        public string ResourceIdDimensionNameOverride {get; set; }
    }
}