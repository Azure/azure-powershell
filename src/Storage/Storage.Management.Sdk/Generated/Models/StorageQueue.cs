// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// Concrete proxy resource types can be created by aliasing this type using a
    /// specific property type.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class StorageQueue : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the StorageQueue class.
        /// </summary>
        public StorageQueue()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageQueue class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. E.g.
        /// &#34;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#34;
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="systemData">Azure Resource Manager metadata containing createdBy and modifiedBy
        /// information.
        /// </param>

        /// <param name="metadata">A name-value pair that represents queue metadata.
        /// </param>

        /// <param name="approximateMessageCount">Integer indicating an approximate number of messages in the queue. This
        /// number is not lower than the actual number of messages in the queue, but
        /// could be higher.
        /// </param>
        public StorageQueue(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), System.Collections.Generic.IDictionary<string, string> metadata = default(System.Collections.Generic.IDictionary<string, string>), int? approximateMessageCount = default(int?))

        : base(id, name, type, systemData)
        {
            this.Metadata = metadata;
            this.ApproximateMessageCount = approximateMessageCount;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a name-value pair that represents queue metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.metadata")]
        public System.Collections.Generic.IDictionary<string, string> Metadata {get; set; }

        /// <summary>
        /// Gets integer indicating an approximate number of messages in the queue.
        /// This number is not lower than the actual number of messages in the queue,
        /// but could be higher.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.approximateMessageCount")]
        public int? ApproximateMessageCount {get; private set; }
    }
}