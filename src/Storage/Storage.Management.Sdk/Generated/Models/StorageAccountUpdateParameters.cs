// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// The parameters that can be provided when updating the storage account
    /// properties.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class StorageAccountUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the StorageAccountUpdateParameters class.
        /// </summary>
        public StorageAccountUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageAccountUpdateParameters class.
        /// </summary>

        /// <param name="sku">Gets or sets the SKU name. Note that the SKU name cannot be updated to
        /// Standard_ZRS, Premium_LRS or Premium_ZRS, nor can accounts of those SKU
        /// names be updated to any other value.
        /// </param>

        /// <param name="tags">Gets or sets a list of key value pairs that describe the resource. These
        /// tags can be used in viewing and grouping this resource (across resource
        /// groups). A maximum of 15 tags can be provided for a resource. Each tag must
        /// have a key no greater in length than 128 characters and a value no greater
        /// in length than 256 characters.
        /// </param>

        /// <param name="identity">The identity of the resource.
        /// </param>

        /// <param name="kind">Optional. Indicates the type of storage account. Currently only StorageV2
        /// value supported by server.
        /// Possible values include: 'Storage', 'StorageV2', 'BlobStorage',
        /// 'FileStorage', 'BlockBlobStorage'</param>

        /// <param name="customDomain">Custom domain assigned to the storage account by the user. Name is the
        /// CNAME source. Only one custom domain is supported per storage account at
        /// this time. To clear the existing custom domain, use an empty string for the
        /// custom domain name property.
        /// </param>

        /// <param name="encryption">Not applicable. Azure Storage encryption at rest is enabled by default for
        /// all storage accounts and cannot be disabled.
        /// </param>

        /// <param name="sasPolicy">SasPolicy assigned to the storage account.
        /// </param>

        /// <param name="keyPolicy">KeyPolicy assigned to the storage account.
        /// </param>

        /// <param name="accessTier">Required for storage accounts where kind = BlobStorage. The access tier is
        /// used for billing. The &#39;Premium&#39; access tier is the default value for
        /// premium block blobs storage account type and it cannot be changed for the
        /// premium block blobs storage account type.
        /// Possible values include: 'Hot', 'Cool', 'Premium'</param>

        /// <param name="routingPreference">Maintains information about the network routing choice opted by the user
        /// for data transfer
        /// </param>

        /// <param name="azureFilesIdentityBasedAuthentication">Provides the identity based authentication settings for Azure Files.
        /// </param>

        /// <param name="enableHttpsTrafficOnly">Allows https traffic only to storage service if sets to true.
        /// </param>

        /// <param name="isSftpEnabled">Enables Secure File Transfer Protocol, if set to true
        /// </param>

        /// <param name="isLocalUserEnabled">Enables local users feature, if set to true
        /// </param>

        /// <param name="networkRuleSet">Network rule set
        /// </param>

        /// <param name="largeFileSharesState">Allow large file shares if sets to Enabled. It cannot be disabled once it
        /// is enabled.
        /// Possible values include: 'Disabled', 'Enabled'</param>

        /// <param name="allowBlobPublicAccess">Allow or disallow public access to all blobs or containers in the storage
        /// account. The default interpretation is false for this property.
        /// </param>

        /// <param name="minimumTlsVersion">Set the minimum TLS version to be permitted on requests to storage. The
        /// default interpretation is TLS 1.0 for this property.
        /// Possible values include: 'TLS1_0', 'TLS1_1', 'TLS1_2'</param>

        /// <param name="allowSharedKeyAccess">Indicates whether the storage account permits requests to be authorized
        /// with the account access key via Shared Key. If false, then all requests,
        /// including shared access signatures, must be authorized with Azure Active
        /// Directory (Azure AD). The default value is null, which is equivalent to
        /// true.
        /// </param>

        /// <param name="allowCrossTenantReplication">Allow or disallow cross AAD tenant object replication. Set this property to
        /// true for new or existing accounts only if object replication policies will
        /// involve storage accounts in different AAD tenants. The default
        /// interpretation is false for new accounts to follow best security practices
        /// by default.
        /// </param>

        /// <param name="defaultToOAuthAuthentication">A boolean flag which indicates whether the default authentication is OAuth
        /// or not. The default interpretation is false for this property.
        /// </param>

        /// <param name="publicNetworkAccess">Allow or disallow public network access to Storage Account. Value is
        /// optional but if passed in, must be &#39;Enabled&#39; or &#39;Disabled&#39;.
        /// Possible values include: 'Enabled', 'Disabled'</param>

        /// <param name="immutableStorageWithVersioning">The property is immutable and can only be set to true at the account
        /// creation time. When set to true, it enables object level immutability for
        /// all the containers in the account by default.
        /// </param>

        /// <param name="allowedCopyScope">Restrict copy to and from Storage Accounts within an AAD tenant or with
        /// Private Links to the same VNet.
        /// Possible values include: 'PrivateLink', 'AAD'</param>

        /// <param name="dnsEndpointType">Allows you to specify the type of endpoint. Set this to AzureDNSZone to
        /// create a large number of accounts in a single subscription, which creates
        /// accounts in an Azure DNS Zone and the endpoint URL will have an
        /// alphanumeric DNS Zone identifier.
        /// Possible values include: 'Standard', 'AzureDnsZone'</param>
        public StorageAccountUpdateParameters(Sku sku = default(Sku), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), Identity identity = default(Identity), string kind = default(string), CustomDomain customDomain = default(CustomDomain), Encryption encryption = default(Encryption), SasPolicy sasPolicy = default(SasPolicy), KeyPolicy keyPolicy = default(KeyPolicy), AccessTier? accessTier = default(AccessTier?), RoutingPreference routingPreference = default(RoutingPreference), AzureFilesIdentityBasedAuthentication azureFilesIdentityBasedAuthentication = default(AzureFilesIdentityBasedAuthentication), bool? enableHttpsTrafficOnly = default(bool?), bool? isSftpEnabled = default(bool?), bool? isLocalUserEnabled = default(bool?), NetworkRuleSet networkRuleSet = default(NetworkRuleSet), string largeFileSharesState = default(string), bool? allowBlobPublicAccess = default(bool?), string minimumTlsVersion = default(string), bool? allowSharedKeyAccess = default(bool?), bool? allowCrossTenantReplication = default(bool?), bool? defaultToOAuthAuthentication = default(bool?), string publicNetworkAccess = default(string), ImmutableStorageAccount immutableStorageWithVersioning = default(ImmutableStorageAccount), string allowedCopyScope = default(string), string dnsEndpointType = default(string))

        {
            this.Sku = sku;
            this.Tags = tags;
            this.Identity = identity;
            this.Kind = kind;
            this.CustomDomain = customDomain;
            this.Encryption = encryption;
            this.SasPolicy = sasPolicy;
            this.KeyPolicy = keyPolicy;
            this.AccessTier = accessTier;
            this.RoutingPreference = routingPreference;
            this.AzureFilesIdentityBasedAuthentication = azureFilesIdentityBasedAuthentication;
            this.EnableHttpsTrafficOnly = enableHttpsTrafficOnly;
            this.IsSftpEnabled = isSftpEnabled;
            this.IsLocalUserEnabled = isLocalUserEnabled;
            this.NetworkRuleSet = networkRuleSet;
            this.LargeFileSharesState = largeFileSharesState;
            this.AllowBlobPublicAccess = allowBlobPublicAccess;
            this.MinimumTlsVersion = minimumTlsVersion;
            this.AllowSharedKeyAccess = allowSharedKeyAccess;
            this.AllowCrossTenantReplication = allowCrossTenantReplication;
            this.DefaultToOAuthAuthentication = defaultToOAuthAuthentication;
            this.PublicNetworkAccess = publicNetworkAccess;
            this.ImmutableStorageWithVersioning = immutableStorageWithVersioning;
            this.AllowedCopyScope = allowedCopyScope;
            this.DnsEndpointType = dnsEndpointType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets gets or sets the SKU name. Note that the SKU name cannot be
        /// updated to Standard_ZRS, Premium_LRS or Premium_ZRS, nor can accounts of
        /// those SKU names be updated to any other value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sku")]
        public Sku Sku {get; set; }

        /// <summary>
        /// Gets or sets gets or sets a list of key value pairs that describe the
        /// resource. These tags can be used in viewing and grouping this resource
        /// (across resource groups). A maximum of 15 tags can be provided for a
        /// resource. Each tag must have a key no greater in length than 128 characters
        /// and a value no greater in length than 256 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets or sets the identity of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public Identity Identity {get; set; }

        /// <summary>
        /// Gets or sets optional. Indicates the type of storage account. Currently
        /// only StorageV2 value supported by server. Possible values include: &#39;Storage&#39;, &#39;StorageV2&#39;, &#39;BlobStorage&#39;, &#39;FileStorage&#39;, &#39;BlockBlobStorage&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "kind")]
        public string Kind {get; set; }

        /// <summary>
        /// Gets or sets custom domain assigned to the storage account by the user.
        /// Name is the CNAME source. Only one custom domain is supported per storage
        /// account at this time. To clear the existing custom domain, use an empty
        /// string for the custom domain name property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.customDomain")]
        public CustomDomain CustomDomain {get; set; }

        /// <summary>
        /// Gets or sets not applicable. Azure Storage encryption at rest is enabled by
        /// default for all storage accounts and cannot be disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.encryption")]
        public Encryption Encryption {get; set; }

        /// <summary>
        /// Gets or sets sasPolicy assigned to the storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sasPolicy")]
        public SasPolicy SasPolicy {get; set; }

        /// <summary>
        /// Gets or sets keyPolicy assigned to the storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.keyPolicy")]
        public KeyPolicy KeyPolicy {get; set; }

        /// <summary>
        /// Gets or sets required for storage accounts where kind = BlobStorage. The
        /// access tier is used for billing. The &#39;Premium&#39; access tier is the default
        /// value for premium block blobs storage account type and it cannot be changed
        /// for the premium block blobs storage account type. Possible values include: &#39;Hot&#39;, &#39;Cool&#39;, &#39;Premium&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.accessTier")]
        public AccessTier? AccessTier {get; set; }

        /// <summary>
        /// Gets or sets maintains information about the network routing choice opted
        /// by the user for data transfer
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.routingPreference")]
        public RoutingPreference RoutingPreference {get; set; }

        /// <summary>
        /// Gets or sets provides the identity based authentication settings for Azure
        /// Files.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.azureFilesIdentityBasedAuthentication")]
        public AzureFilesIdentityBasedAuthentication AzureFilesIdentityBasedAuthentication {get; set; }

        /// <summary>
        /// Gets or sets allows https traffic only to storage service if sets to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.supportsHttpsTrafficOnly")]
        public bool? EnableHttpsTrafficOnly {get; set; }

        /// <summary>
        /// Gets or sets enables Secure File Transfer Protocol, if set to true
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isSftpEnabled")]
        public bool? IsSftpEnabled {get; set; }

        /// <summary>
        /// Gets or sets enables local users feature, if set to true
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isLocalUserEnabled")]
        public bool? IsLocalUserEnabled {get; set; }

        /// <summary>
        /// Gets or sets network rule set
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.networkAcls")]
        public NetworkRuleSet NetworkRuleSet {get; set; }

        /// <summary>
        /// Gets or sets allow large file shares if sets to Enabled. It cannot be
        /// disabled once it is enabled. Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.largeFileSharesState")]
        public string LargeFileSharesState {get; set; }

        /// <summary>
        /// Gets or sets allow or disallow public access to all blobs or containers in
        /// the storage account. The default interpretation is false for this property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.allowBlobPublicAccess")]
        public bool? AllowBlobPublicAccess {get; set; }

        /// <summary>
        /// Gets or sets set the minimum TLS version to be permitted on requests to
        /// storage. The default interpretation is TLS 1.0 for this property. Possible values include: &#39;TLS1_0&#39;, &#39;TLS1_1&#39;, &#39;TLS1_2&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.minimumTlsVersion")]
        public string MinimumTlsVersion {get; set; }

        /// <summary>
        /// Gets or sets indicates whether the storage account permits requests to be
        /// authorized with the account access key via Shared Key. If false, then all
        /// requests, including shared access signatures, must be authorized with Azure
        /// Active Directory (Azure AD). The default value is null, which is equivalent
        /// to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.allowSharedKeyAccess")]
        public bool? AllowSharedKeyAccess {get; set; }

        /// <summary>
        /// Gets or sets allow or disallow cross AAD tenant object replication. Set
        /// this property to true for new or existing accounts only if object
        /// replication policies will involve storage accounts in different AAD
        /// tenants. The default interpretation is false for new accounts to follow
        /// best security practices by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.allowCrossTenantReplication")]
        public bool? AllowCrossTenantReplication {get; set; }

        /// <summary>
        /// Gets or sets a boolean flag which indicates whether the default
        /// authentication is OAuth or not. The default interpretation is false for
        /// this property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.defaultToOAuthAuthentication")]
        public bool? DefaultToOAuthAuthentication {get; set; }

        /// <summary>
        /// Gets or sets allow or disallow public network access to Storage Account.
        /// Value is optional but if passed in, must be &#39;Enabled&#39; or &#39;Disabled&#39;. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess {get; set; }

        /// <summary>
        /// Gets or sets the property is immutable and can only be set to true at the
        /// account creation time. When set to true, it enables object level
        /// immutability for all the containers in the account by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.immutableStorageWithVersioning")]
        public ImmutableStorageAccount ImmutableStorageWithVersioning {get; set; }

        /// <summary>
        /// Gets or sets restrict copy to and from Storage Accounts within an AAD
        /// tenant or with Private Links to the same VNet. Possible values include: &#39;PrivateLink&#39;, &#39;AAD&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.allowedCopyScope")]
        public string AllowedCopyScope {get; set; }

        /// <summary>
        /// Gets or sets allows you to specify the type of endpoint. Set this to
        /// AzureDNSZone to create a large number of accounts in a single subscription,
        /// which creates accounts in an Azure DNS Zone and the endpoint URL will have
        /// an alphanumeric DNS Zone identifier. Possible values include: &#39;Standard&#39;, &#39;AzureDnsZone&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dnsEndpointType")]
        public string DnsEndpointType {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Sku != null)
            {
                this.Sku.Validate();
            }

            if (this.Identity != null)
            {
                this.Identity.Validate();
            }

            if (this.CustomDomain != null)
            {
                this.CustomDomain.Validate();
            }

            if (this.SasPolicy != null)
            {
                this.SasPolicy.Validate();
            }
            if (this.KeyPolicy != null)
            {
                this.KeyPolicy.Validate();
            }


            if (this.AzureFilesIdentityBasedAuthentication != null)
            {
                this.AzureFilesIdentityBasedAuthentication.Validate();
            }
            if (this.NetworkRuleSet != null)
            {
                this.NetworkRuleSet.Validate();
            }



            if (this.ImmutableStorageWithVersioning != null)
            {
                this.ImmutableStorageWithVersioning.Validate();
            }


        }
    }
}