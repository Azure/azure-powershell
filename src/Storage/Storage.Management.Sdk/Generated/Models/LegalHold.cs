// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// The LegalHold property of a blob container.
    /// </summary>
    public partial class LegalHold
    {
        /// <summary>
        /// Initializes a new instance of the LegalHold class.
        /// </summary>
        public LegalHold()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LegalHold class.
        /// </summary>

        /// <param name="hasLegalHold">The hasLegalHold public property is set to true by SRP if there are at
        /// least one existing tag. The hasLegalHold public property is set to false by
        /// SRP if all existing legal hold tags are cleared out. There can be a maximum
        /// of 1000 blob containers with hasLegalHold=true for a given account.
        /// </param>

        /// <param name="tags">Each tag should be 3 to 23 alphanumeric characters and is normalized to
        /// lower case at SRP.
        /// </param>

        /// <param name="allowProtectedAppendWritesAll">When enabled, new blocks can be written to both &#39;Append and Bock Blobs&#39;
        /// while maintaining legal hold protection and compliance. Only new blocks can
        /// be added and any existing blocks cannot be modified or deleted.
        /// </param>
        public LegalHold(System.Collections.Generic.IList<string> tags, bool? hasLegalHold = default(bool?), bool? allowProtectedAppendWritesAll = default(bool?))

        {
            this.HasLegalHold = hasLegalHold;
            this.Tags = tags;
            this.AllowProtectedAppendWritesAll = allowProtectedAppendWritesAll;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the hasLegalHold public property is set to true by SRP if there are at
        /// least one existing tag. The hasLegalHold public property is set to false by
        /// SRP if all existing legal hold tags are cleared out. There can be a maximum
        /// of 1000 blob containers with hasLegalHold=true for a given account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hasLegalHold")]
        public bool? HasLegalHold {get; private set; }

        /// <summary>
        /// Gets or sets each tag should be 3 to 23 alphanumeric characters and is
        /// normalized to lower case at SRP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IList<string> Tags {get; set; }

        /// <summary>
        /// Gets or sets when enabled, new blocks can be written to both &#39;Append and
        /// Bock Blobs&#39; while maintaining legal hold protection and compliance. Only
        /// new blocks can be added and any existing blocks cannot be modified or
        /// deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowProtectedAppendWritesAll")]
        public bool? AllowProtectedAppendWritesAll {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Tags == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Tags");
            }

        }
    }
}