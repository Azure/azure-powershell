// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// Filters limit rule actions to a subset of blobs within the storage account.
    /// If multiple filters are defined, a logical AND is performed on all filters.
    /// </summary>
    public partial class ManagementPolicyFilter
    {
        /// <summary>
        /// Initializes a new instance of the ManagementPolicyFilter class.
        /// </summary>
        public ManagementPolicyFilter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagementPolicyFilter class.
        /// </summary>

        /// <param name="prefixMatch">An array of strings for prefixes to be match.
        /// </param>

        /// <param name="blobTypes">An array of predefined enum values. Currently blockBlob supports all
        /// tiering and delete actions. Only delete actions are supported for
        /// appendBlob.
        /// </param>

        /// <param name="blobIndexMatch">An array of blob index tag based filters, there can be at most 10 tag
        /// filters
        /// </param>
        public ManagementPolicyFilter(System.Collections.Generic.IList<string> blobTypes, System.Collections.Generic.IList<string> prefixMatch = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<TagFilter> blobIndexMatch = default(System.Collections.Generic.IList<TagFilter>))

        {
            this.PrefixMatch = prefixMatch;
            this.BlobTypes = blobTypes;
            this.BlobIndexMatch = blobIndexMatch;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets an array of strings for prefixes to be match.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "prefixMatch")]
        public System.Collections.Generic.IList<string> PrefixMatch {get; set; }

        /// <summary>
        /// Gets or sets an array of predefined enum values. Currently blockBlob
        /// supports all tiering and delete actions. Only delete actions are supported
        /// for appendBlob.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "blobTypes")]
        public System.Collections.Generic.IList<string> BlobTypes {get; set; }

        /// <summary>
        /// Gets or sets an array of blob index tag based filters, there can be at most
        /// 10 tag filters
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "blobIndexMatch")]
        public System.Collections.Generic.IList<TagFilter> BlobIndexMatch {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.BlobTypes == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "BlobTypes");
            }


            if (this.BlobIndexMatch != null)
            {
                foreach (var element in this.BlobIndexMatch)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}