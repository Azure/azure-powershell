// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// The Storage Account ObjectReplicationPolicy properties.
    /// </summary>
    public partial class ObjectReplicationPolicyProperties
    {
        /// <summary>
        /// Initializes a new instance of the ObjectReplicationPolicyProperties class.
        /// </summary>
        public ObjectReplicationPolicyProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ObjectReplicationPolicyProperties class.
        /// </summary>

        /// <param name="policyId">A unique id for object replication policy.
        /// </param>

        /// <param name="enabledTime">Indicates when the policy is enabled on the source account.
        /// </param>

        /// <param name="sourceAccount">Required. Source account name. It should be full resource id if
        /// allowCrossTenantReplication set to false.
        /// </param>

        /// <param name="destinationAccount">Required. Destination account name. It should be full resource id if
        /// allowCrossTenantReplication set to false.
        /// </param>

        /// <param name="rules">The storage account object replication rules.
        /// </param>
        public ObjectReplicationPolicyProperties(string sourceAccount, string destinationAccount, string policyId = default(string), System.DateTime? enabledTime = default(System.DateTime?), System.Collections.Generic.IList<ObjectReplicationPolicyRule> rules = default(System.Collections.Generic.IList<ObjectReplicationPolicyRule>))

        {
            this.PolicyId = policyId;
            this.EnabledTime = enabledTime;
            this.SourceAccount = sourceAccount;
            this.DestinationAccount = destinationAccount;
            this.Rules = rules;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets a unique id for object replication policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyId")]
        public string PolicyId {get; private set; }

        /// <summary>
        /// Gets indicates when the policy is enabled on the source account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enabledTime")]
        public System.DateTime? EnabledTime {get; private set; }

        /// <summary>
        /// Gets or sets required. Source account name. It should be full resource id
        /// if allowCrossTenantReplication set to false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceAccount")]
        public string SourceAccount {get; set; }

        /// <summary>
        /// Gets or sets required. Destination account name. It should be full resource
        /// id if allowCrossTenantReplication set to false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationAccount")]
        public string DestinationAccount {get; set; }

        /// <summary>
        /// Gets or sets the storage account object replication rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rules")]
        public System.Collections.Generic.IList<ObjectReplicationPolicyRule> Rules {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.SourceAccount == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SourceAccount");
            }
            if (this.DestinationAccount == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DestinationAccount");
            }



            if (this.Rules != null)
            {
                foreach (var element in this.Rules)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}