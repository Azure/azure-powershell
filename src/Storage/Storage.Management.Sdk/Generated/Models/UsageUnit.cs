// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{

    /// <summary>
    /// Defines values for UsageUnit.
    /// </summary>


    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum UsageUnit
    {
        [System.Runtime.Serialization.EnumMember(Value = "Count")]
        Count,
        [System.Runtime.Serialization.EnumMember(Value = "Bytes")]
        Bytes,
        [System.Runtime.Serialization.EnumMember(Value = "Seconds")]
        Seconds,
        [System.Runtime.Serialization.EnumMember(Value = "Percent")]
        Percent,
        [System.Runtime.Serialization.EnumMember(Value = "CountsPerSecond")]
        CountsPerSecond,
        [System.Runtime.Serialization.EnumMember(Value = "BytesPerSecond")]
        BytesPerSecond
    }
    internal static class UsageUnitEnumExtension
    {
        internal static string ToSerializedValue(this UsageUnit? value)
        {
            return value == null ? null : ((UsageUnit)value).ToSerializedValue();
        }
        internal static string ToSerializedValue(this UsageUnit value)
        {
            switch( value )
            {
                case UsageUnit.Count:
                    return "Count";
                case UsageUnit.Bytes:
                    return "Bytes";
                case UsageUnit.Seconds:
                    return "Seconds";
                case UsageUnit.Percent:
                    return "Percent";
                case UsageUnit.CountsPerSecond:
                    return "CountsPerSecond";
                case UsageUnit.BytesPerSecond:
                    return "BytesPerSecond";
            }
            return null;
        }
        internal static UsageUnit? ParseUsageUnit(this string value)
        {
            switch( value )
            {
                case "Count":
                    return UsageUnit.Count;
                case "Bytes":
                    return UsageUnit.Bytes;
                case "Seconds":
                    return UsageUnit.Seconds;
                case "Percent":
                    return UsageUnit.Percent;
                case "CountsPerSecond":
                    return UsageUnit.CountsPerSecond;
                case "BytesPerSecond":
                    return UsageUnit.BytesPerSecond;
            }
            return null;
        }
    }
}