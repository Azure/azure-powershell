// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// The properties of an ImmutabilityPolicy of a blob container.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ImmutabilityPolicyProperties
    {
        /// <summary>
        /// Initializes a new instance of the ImmutabilityPolicyProperties class.
        /// </summary>
        public ImmutabilityPolicyProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImmutabilityPolicyProperties class.
        /// </summary>

        /// <param name="etag">ImmutabilityPolicy Etag.
        /// </param>

        /// <param name="updateHistory">The ImmutabilityPolicy update history of the blob container.
        /// </param>

        /// <param name="immutabilityPeriodSinceCreationInDays">The immutability period for the blobs in the container since the policy
        /// creation, in days.
        /// </param>

        /// <param name="state">The ImmutabilityPolicy state of a blob container, possible values include:
        /// Locked and Unlocked.
        /// Possible values include: &#39;Locked&#39;, &#39;Unlocked&#39;</param>

        /// <param name="allowProtectedAppendWrites">This property can only be changed for unlocked time-based retention
        /// policies. When enabled, new blocks can be written to an append blob while
        /// maintaining immutability protection and compliance. Only new blocks can be
        /// added and any existing blocks cannot be modified or deleted. This property
        /// cannot be changed with ExtendImmutabilityPolicy API.
        /// </param>

        /// <param name="allowProtectedAppendWritesAll">This property can only be changed for unlocked time-based retention
        /// policies. When enabled, new blocks can be written to both &#39;Append and Bock
        /// Blobs&#39; while maintaining immutability protection and compliance. Only new
        /// blocks can be added and any existing blocks cannot be modified or deleted.
        /// This property cannot be changed with ExtendImmutabilityPolicy API. The
        /// &#39;allowProtectedAppendWrites&#39; and &#39;allowProtectedAppendWritesAll&#39; properties
        /// are mutually exclusive.
        /// </param>
        public ImmutabilityPolicyProperties(string etag = default(string), System.Collections.Generic.IList<UpdateHistoryProperty> updateHistory = default(System.Collections.Generic.IList<UpdateHistoryProperty>), int? immutabilityPeriodSinceCreationInDays = default(int?), string state = default(string), bool? allowProtectedAppendWrites = default(bool?), bool? allowProtectedAppendWritesAll = default(bool?))

        {
            this.Etag = etag;
            this.UpdateHistory = updateHistory;
            this.ImmutabilityPeriodSinceCreationInDays = immutabilityPeriodSinceCreationInDays;
            this.State = state;
            this.AllowProtectedAppendWrites = allowProtectedAppendWrites;
            this.AllowProtectedAppendWritesAll = allowProtectedAppendWritesAll;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets immutabilityPolicy Etag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets the ImmutabilityPolicy update history of the blob container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "updateHistory")]
        public System.Collections.Generic.IList<UpdateHistoryProperty> UpdateHistory {get; private set; }

        /// <summary>
        /// Gets or sets the immutability period for the blobs in the container since
        /// the policy creation, in days.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.immutabilityPeriodSinceCreationInDays")]
        public int? ImmutabilityPeriodSinceCreationInDays {get; set; }

        /// <summary>
        /// Gets the ImmutabilityPolicy state of a blob container, possible values
        /// include: Locked and Unlocked. Possible values include: &#39;Locked&#39;, &#39;Unlocked&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.state")]
        public string State {get; private set; }

        /// <summary>
        /// Gets or sets this property can only be changed for unlocked time-based
        /// retention policies. When enabled, new blocks can be written to an append
        /// blob while maintaining immutability protection and compliance. Only new
        /// blocks can be added and any existing blocks cannot be modified or deleted.
        /// This property cannot be changed with ExtendImmutabilityPolicy API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.allowProtectedAppendWrites")]
        public bool? AllowProtectedAppendWrites {get; set; }

        /// <summary>
        /// Gets or sets this property can only be changed for unlocked time-based
        /// retention policies. When enabled, new blocks can be written to both &#39;Append
        /// and Bock Blobs&#39; while maintaining immutability protection and compliance.
        /// Only new blocks can be added and any existing blocks cannot be modified or
        /// deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
        /// The &#39;allowProtectedAppendWrites&#39; and &#39;allowProtectedAppendWritesAll&#39;
        /// properties are mutually exclusive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.allowProtectedAppendWritesAll")]
        public bool? AllowProtectedAppendWritesAll {get; set; }
    }
}