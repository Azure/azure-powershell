// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// Execution trigger update for storage task assignment
    /// </summary>
    public partial class ExecutionTriggerUpdate
    {
        /// <summary>
        /// Initializes a new instance of the ExecutionTriggerUpdate class.
        /// </summary>
        public ExecutionTriggerUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExecutionTriggerUpdate class.
        /// </summary>

        /// <param name="type">The trigger type of the storage task assignment execution
        /// Possible values include: &#39;RunOnce&#39;, &#39;OnSchedule&#39;</param>

        /// <param name="parameters">The trigger parameters of the storage task assignment execution
        /// </param>
        public ExecutionTriggerUpdate(string type = default(string), TriggerParametersUpdate parameters = default(TriggerParametersUpdate))

        {
            this.Type = type;
            this.Parameters = parameters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the trigger type of the storage task assignment execution Possible values include: &#39;RunOnce&#39;, &#39;OnSchedule&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; set; }

        /// <summary>
        /// Gets or sets the trigger parameters of the storage task assignment
        /// execution
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "parameters")]
        public TriggerParametersUpdate Parameters {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.Parameters != null)
            {
                this.Parameters.Validate();
            }
        }
    }
}