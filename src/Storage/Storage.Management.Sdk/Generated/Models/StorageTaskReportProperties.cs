// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// Storage task execution report for a run instance.
    /// </summary>
    public partial class StorageTaskReportProperties
    {
        /// <summary>
        /// Initializes a new instance of the StorageTaskReportProperties class.
        /// </summary>
        public StorageTaskReportProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageTaskReportProperties class.
        /// </summary>

        /// <param name="taskAssignmentId">Represents the Storage Task Assignment Id associated with the storage task
        /// that provided an execution context.
        /// </param>

        /// <param name="storageAccountId">Represents the Storage Account Id where the storage task definition was
        /// applied and executed.
        /// </param>

        /// <param name="startTime">Start time of the run instance. Filter options such as startTime gt
        /// &#39;2023-06-26T20:51:24.4494016Z&#39; and other comparison operators can be used
        /// as described for DateTime properties in
        /// https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#supported-comparison-operators
        /// </param>

        /// <param name="finishTime">End time of the run instance. Filter options such as startTime gt
        /// &#39;2023-06-26T20:51:24.4494016Z&#39; and other comparison operators can be used
        /// as described for DateTime properties in
        /// https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#supported-comparison-operators
        /// </param>

        /// <param name="objectsTargetedCount">Total number of objects that meet the condition as defined in the storage
        /// task assignment execution context. Filter options such as
        /// objectsTargetedCount gt 50 and other comparison operators can be used as
        /// described for Numerical properties in
        /// https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#supported-comparison-operators
        /// </param>

        /// <param name="objectsOperatedOnCount">Total number of objects that meet the storage tasks condition and were
        /// operated upon. Filter options such as objectsOperatedOnCount ge 100 and
        /// other comparison operators can be used as described for Numerical
        /// properties in
        /// https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#supported-comparison-operators
        /// </param>

        /// <param name="objectFailedCount">Total number of objects where task operation failed when was attempted.
        /// Filter options such as objectFailedCount eq 0 and other comparison
        /// operators can be used as described for Numerical properties in
        /// https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#supported-comparison-operators
        /// </param>

        /// <param name="objectsSucceededCount">Total number of objects where task operation succeeded when was
        /// attempted.Filter options such as objectsSucceededCount gt 150 and other
        /// comparison operators can be used as described for Numerical properties in
        /// https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#supported-comparison-operators
        /// </param>

        /// <param name="runStatusError">Well known Azure Storage error code that represents the error encountered
        /// during execution of the run instance.
        /// </param>

        /// <param name="runStatusEnum">Represents the status of the execution.
        /// Possible values include: &#39;InProgress&#39;, &#39;Finished&#39;</param>

        /// <param name="summaryReportPath">Full path to the verbose report stored in the reporting container as
        /// specified in the assignment execution context for the storage account.
        /// </param>

        /// <param name="taskId">Storage Task Arm Id.
        /// </param>

        /// <param name="taskVersion">Storage Task Version
        /// </param>

        /// <param name="runResult">Represents the overall result of the execution for the run instance
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;</param>
        public StorageTaskReportProperties(string taskAssignmentId = default(string), string storageAccountId = default(string), string startTime = default(string), string finishTime = default(string), string objectsTargetedCount = default(string), string objectsOperatedOnCount = default(string), string objectFailedCount = default(string), string objectsSucceededCount = default(string), string runStatusError = default(string), string runStatusEnum = default(string), string summaryReportPath = default(string), string taskId = default(string), string taskVersion = default(string), string runResult = default(string))

        {
            this.TaskAssignmentId = taskAssignmentId;
            this.StorageAccountId = storageAccountId;
            this.StartTime = startTime;
            this.FinishTime = finishTime;
            this.ObjectsTargetedCount = objectsTargetedCount;
            this.ObjectsOperatedOnCount = objectsOperatedOnCount;
            this.ObjectFailedCount = objectFailedCount;
            this.ObjectsSucceededCount = objectsSucceededCount;
            this.RunStatusError = runStatusError;
            this.RunStatusEnum = runStatusEnum;
            this.SummaryReportPath = summaryReportPath;
            this.TaskId = taskId;
            this.TaskVersion = taskVersion;
            this.RunResult = runResult;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets represents the Storage Task Assignment Id associated with the storage
        /// task that provided an execution context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taskAssignmentId")]
        public string TaskAssignmentId {get; private set; }

        /// <summary>
        /// Gets represents the Storage Account Id where the storage task definition
        /// was applied and executed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageAccountId")]
        public string StorageAccountId {get; private set; }

        /// <summary>
        /// Gets start time of the run instance. Filter options such as startTime gt
        /// &#39;2023-06-26T20:51:24.4494016Z&#39; and other comparison operators can be used
        /// as described for DateTime properties in
        /// https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#supported-comparison-operators
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTime")]
        public string StartTime {get; private set; }

        /// <summary>
        /// Gets end time of the run instance. Filter options such as startTime gt
        /// &#39;2023-06-26T20:51:24.4494016Z&#39; and other comparison operators can be used
        /// as described for DateTime properties in
        /// https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#supported-comparison-operators
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "finishTime")]
        public string FinishTime {get; private set; }

        /// <summary>
        /// Gets total number of objects that meet the condition as defined in the
        /// storage task assignment execution context. Filter options such as
        /// objectsTargetedCount gt 50 and other comparison operators can be used as
        /// described for Numerical properties in
        /// https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#supported-comparison-operators
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "objectsTargetedCount")]
        public string ObjectsTargetedCount {get; private set; }

        /// <summary>
        /// Gets total number of objects that meet the storage tasks condition and were
        /// operated upon. Filter options such as objectsOperatedOnCount ge 100 and
        /// other comparison operators can be used as described for Numerical
        /// properties in
        /// https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#supported-comparison-operators
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "objectsOperatedOnCount")]
        public string ObjectsOperatedOnCount {get; private set; }

        /// <summary>
        /// Gets total number of objects where task operation failed when was
        /// attempted. Filter options such as objectFailedCount eq 0 and other
        /// comparison operators can be used as described for Numerical properties in
        /// https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#supported-comparison-operators
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "objectFailedCount")]
        public string ObjectFailedCount {get; private set; }

        /// <summary>
        /// Gets total number of objects where task operation succeeded when was
        /// attempted.Filter options such as objectsSucceededCount gt 150 and other
        /// comparison operators can be used as described for Numerical properties in
        /// https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#supported-comparison-operators
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "objectsSucceededCount")]
        public string ObjectsSucceededCount {get; private set; }

        /// <summary>
        /// Gets well known Azure Storage error code that represents the error
        /// encountered during execution of the run instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runStatusError")]
        public string RunStatusError {get; private set; }

        /// <summary>
        /// Gets represents the status of the execution. Possible values include: &#39;InProgress&#39;, &#39;Finished&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runStatusEnum")]
        public string RunStatusEnum {get; private set; }

        /// <summary>
        /// Gets full path to the verbose report stored in the reporting container as
        /// specified in the assignment execution context for the storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "summaryReportPath")]
        public string SummaryReportPath {get; private set; }

        /// <summary>
        /// Gets storage Task Arm Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taskId")]
        public string TaskId {get; private set; }

        /// <summary>
        /// Gets storage Task Version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taskVersion")]
        public string TaskVersion {get; private set; }

        /// <summary>
        /// Gets represents the overall result of the execution for the run instance Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runResult")]
        public string RunResult {get; private set; }
    }
}