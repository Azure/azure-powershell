// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// Blob index tag based filtering for blob objects
    /// </summary>
    public partial class TagFilter
    {
        /// <summary>
        /// Initializes a new instance of the TagFilter class.
        /// </summary>
        public TagFilter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TagFilter class.
        /// </summary>

        /// <param name="name">This is the filter tag name, it can have 1 - 128 characters
        /// </param>

        /// <param name="op">This is the comparison operator which is used for object comparison and
        /// filtering. Only == (equality operator) is currently supported
        /// </param>

        /// <param name="value">This is the filter tag value field used for tag based filtering, it can
        /// have 0 - 256 characters
        /// </param>
        public TagFilter(string name, string op, string value)

        {
            this.Name = name;
            this.Op = op;
            this.Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets this is the filter tag name, it can have 1 - 128 characters
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets this is the comparison operator which is used for object
        /// comparison and filtering. Only == (equality operator) is currently
        /// supported
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "op")]
        public string Op {get; set; }

        /// <summary>
        /// Gets or sets this is the filter tag value field used for tag based
        /// filtering, it can have 0 - 256 characters
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "value")]
        public string Value {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (this.Op == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Op");
            }
            if (this.Value == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Value");
            }
            if (this.Name != null)
            {
                if (this.Name.Length > 128)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Name", 128);
                }
                if (this.Name.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "Name", 1);
                }
            }

            if (this.Value != null)
            {
                if (this.Value.Length > 256)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Value", 256);
                }
            }
        }
    }
}