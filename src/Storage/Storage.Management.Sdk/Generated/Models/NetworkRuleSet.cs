// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// Network rule set
    /// </summary>
    public partial class NetworkRuleSet
    {
        /// <summary>
        /// Initializes a new instance of the NetworkRuleSet class.
        /// </summary>
        public NetworkRuleSet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NetworkRuleSet class.
        /// </summary>

        /// <param name="bypass">Specifies whether traffic is bypassed for Logging/Metrics/AzureServices.
        /// Possible values are any combination of Logging|Metrics|AzureServices (For
        /// example, &#34;Logging, Metrics&#34;), or None to bypass none of those traffics.
        /// Possible values include: &#39;None&#39;, &#39;Logging&#39;, &#39;Metrics&#39;, &#39;AzureServices&#39;</param>

        /// <param name="resourceAccessRules">Sets the resource access rules
        /// </param>

        /// <param name="virtualNetworkRules">Sets the virtual network rules
        /// </param>

        /// <param name="ipRules">Sets the IP ACL rules
        /// </param>

        /// <param name="defaultAction">Specifies the default action of allow or deny when no other rules match.
        /// Possible values include: &#39;Allow&#39;, &#39;Deny&#39;</param>
        public NetworkRuleSet(DefaultAction defaultAction, string bypass = default(string), System.Collections.Generic.IList<ResourceAccessRule> resourceAccessRules = default(System.Collections.Generic.IList<ResourceAccessRule>), System.Collections.Generic.IList<VirtualNetworkRule> virtualNetworkRules = default(System.Collections.Generic.IList<VirtualNetworkRule>), System.Collections.Generic.IList<IPRule> ipRules = default(System.Collections.Generic.IList<IPRule>))

        {
            this.Bypass = bypass;
            this.ResourceAccessRules = resourceAccessRules;
            this.VirtualNetworkRules = virtualNetworkRules;
            this.IPRules = ipRules;
            this.DefaultAction = defaultAction;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets specifies whether traffic is bypassed for
        /// Logging/Metrics/AzureServices. Possible values are any combination of
        /// Logging|Metrics|AzureServices (For example, &#34;Logging, Metrics&#34;), or None to
        /// bypass none of those traffics. Possible values include: &#39;None&#39;, &#39;Logging&#39;, &#39;Metrics&#39;, &#39;AzureServices&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "bypass")]
        public string Bypass {get; set; }

        /// <summary>
        /// Gets or sets sets the resource access rules
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceAccessRules")]
        public System.Collections.Generic.IList<ResourceAccessRule> ResourceAccessRules {get; set; }

        /// <summary>
        /// Gets or sets sets the virtual network rules
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "virtualNetworkRules")]
        public System.Collections.Generic.IList<VirtualNetworkRule> VirtualNetworkRules {get; set; }

        /// <summary>
        /// Gets or sets sets the IP ACL rules
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipRules")]
        public System.Collections.Generic.IList<IPRule> IPRules {get; set; }

        /// <summary>
        /// Gets or sets specifies the default action of allow or deny when no other
        /// rules match. Possible values include: &#39;Allow&#39;, &#39;Deny&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultAction")]
        public DefaultAction DefaultAction {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.VirtualNetworkRules != null)
            {
                foreach (var element in this.VirtualNetworkRules)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.IPRules != null)
            {
                foreach (var element in this.IPRules)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

        }
    }
}