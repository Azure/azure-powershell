// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// File service usage in storage account including account limits, file share
    /// limits and constants used in recommendations and bursting formula.
    /// </summary>
    public partial class FileServiceUsageProperties
    {
        /// <summary>
        /// Initializes a new instance of the FileServiceUsageProperties class.
        /// </summary>
        public FileServiceUsageProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FileServiceUsageProperties class.
        /// </summary>

        /// <param name="storageAccountLimits">Maximum provisioned storage, IOPS, bandwidth and number of file shares
        /// limits for the storage account.
        /// </param>

        /// <param name="fileShareLimits">Minimum and maximum provisioned storage, IOPS and bandwidth limits for a
        /// file share in the storage account.
        /// </param>

        /// <param name="fileShareRecommendations">Constants used for calculating recommended provisioned IOPS and bandwidth
        /// for a file share in the storage account.
        /// </param>

        /// <param name="burstingConstants">Constants used for calculating included burst IOPS and maximum burst
        /// credits for IOPS for a file share in the storage account.
        /// </param>

        /// <param name="storageAccountUsage">Usage of provisioned storage, IOPS, bandwidth and number of file shares
        /// across all live shares and soft-deleted shares in the account.
        /// </param>
        public FileServiceUsageProperties(AccountLimits storageAccountLimits = default(AccountLimits), FileShareLimits fileShareLimits = default(FileShareLimits), FileShareRecommendations fileShareRecommendations = default(FileShareRecommendations), BurstingConstants burstingConstants = default(BurstingConstants), AccountUsage storageAccountUsage = default(AccountUsage))

        {
            this.StorageAccountLimits = storageAccountLimits;
            this.FileShareLimits = fileShareLimits;
            this.FileShareRecommendations = fileShareRecommendations;
            this.BurstingConstants = burstingConstants;
            this.StorageAccountUsage = storageAccountUsage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets maximum provisioned storage, IOPS, bandwidth and number of file shares
        /// limits for the storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageAccountLimits")]
        public AccountLimits StorageAccountLimits {get; private set; }

        /// <summary>
        /// Gets minimum and maximum provisioned storage, IOPS and bandwidth limits for
        /// a file share in the storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileShareLimits")]
        public FileShareLimits FileShareLimits {get; private set; }

        /// <summary>
        /// Gets constants used for calculating recommended provisioned IOPS and
        /// bandwidth for a file share in the storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileShareRecommendations")]
        public FileShareRecommendations FileShareRecommendations {get; private set; }

        /// <summary>
        /// Gets constants used for calculating included burst IOPS and maximum burst
        /// credits for IOPS for a file share in the storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "burstingConstants")]
        public BurstingConstants BurstingConstants {get; private set; }

        /// <summary>
        /// Gets usage of provisioned storage, IOPS, bandwidth and number of file
        /// shares across all live shares and soft-deleted shares in the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageAccountUsage")]
        public AccountUsage StorageAccountUsage {get; private set; }
    }
}