// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// Management policy action for blob version.
    /// </summary>
    public partial class ManagementPolicyVersion
    {
        /// <summary>
        /// Initializes a new instance of the ManagementPolicyVersion class.
        /// </summary>
        public ManagementPolicyVersion()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagementPolicyVersion class.
        /// </summary>

        /// <param name="tierToCool">The function to tier blob version to cool storage.
        /// </param>

        /// <param name="tierToArchive">The function to tier blob version to archive storage.
        /// </param>

        /// <param name="tierToCold">The function to tier blobs to cold storage.
        /// </param>

        /// <param name="tierToHot">The function to tier blobs to hot storage. This action can only be used
        /// with Premium Block Blob Storage Accounts
        /// </param>

        /// <param name="delete">The function to delete the blob version
        /// </param>
        public ManagementPolicyVersion(DateAfterCreation tierToCool = default(DateAfterCreation), DateAfterCreation tierToArchive = default(DateAfterCreation), DateAfterCreation tierToCold = default(DateAfterCreation), DateAfterCreation tierToHot = default(DateAfterCreation), DateAfterCreation delete = default(DateAfterCreation))

        {
            this.TierToCool = tierToCool;
            this.TierToArchive = tierToArchive;
            this.TierToCold = tierToCold;
            this.TierToHot = tierToHot;
            this.Delete = delete;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the function to tier blob version to cool storage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tierToCool")]
        public DateAfterCreation TierToCool {get; set; }

        /// <summary>
        /// Gets or sets the function to tier blob version to archive storage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tierToArchive")]
        public DateAfterCreation TierToArchive {get; set; }

        /// <summary>
        /// Gets or sets the function to tier blobs to cold storage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tierToCold")]
        public DateAfterCreation TierToCold {get; set; }

        /// <summary>
        /// Gets or sets the function to tier blobs to hot storage. This action can
        /// only be used with Premium Block Blob Storage Accounts
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tierToHot")]
        public DateAfterCreation TierToHot {get; set; }

        /// <summary>
        /// Gets or sets the function to delete the blob version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "delete")]
        public DateAfterCreation Delete {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.TierToCool != null)
            {
                this.TierToCool.Validate();
            }
            if (this.TierToArchive != null)
            {
                this.TierToArchive.Validate();
            }
            if (this.TierToCold != null)
            {
                this.TierToCold.Validate();
            }
            if (this.TierToHot != null)
            {
                this.TierToHot.Validate();
            }
            if (this.Delete != null)
            {
                this.Delete.Validate();
            }
        }
    }
}