// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// An object that defines the Lifecycle rule. Each definition is made up with
    /// a filters set and an actions set.
    /// </summary>
    public partial class ManagementPolicyDefinition
    {
        /// <summary>
        /// Initializes a new instance of the ManagementPolicyDefinition class.
        /// </summary>
        public ManagementPolicyDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagementPolicyDefinition class.
        /// </summary>

        /// <param name="actions">An object that defines the action set.
        /// </param>

        /// <param name="filters">An object that defines the filter set.
        /// </param>
        public ManagementPolicyDefinition(ManagementPolicyAction actions, ManagementPolicyFilter filters = default(ManagementPolicyFilter))

        {
            this.Actions = actions;
            this.Filters = filters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets an object that defines the action set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "actions")]
        public ManagementPolicyAction Actions {get; set; }

        /// <summary>
        /// Gets or sets an object that defines the filter set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "filters")]
        public ManagementPolicyFilter Filters {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Actions == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Actions");
            }
            if (this.Actions != null)
            {
                this.Actions.Validate();
            }
            if (this.Filters != null)
            {
                this.Filters.Validate();
            }
        }
    }
}