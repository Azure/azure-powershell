// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of the storage task assignment.
    /// </summary>
    public partial class StorageTaskAssignmentProperties
    {
        /// <summary>
        /// Initializes a new instance of the StorageTaskAssignmentProperties class.
        /// </summary>
        public StorageTaskAssignmentProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageTaskAssignmentProperties class.
        /// </summary>

        /// <param name="taskId">Id of the corresponding storage task
        /// </param>

        /// <param name="enabled">Whether the storage task assignment is enabled or not
        /// </param>

        /// <param name="description">Text that describes the purpose of the storage task assignment
        /// </param>

        /// <param name="executionContext">The storage task assignment execution context
        /// </param>

        /// <param name="report">The storage task assignment report
        /// </param>

        /// <param name="provisioningState">Represents the provisioning state of the storage task assignment.
        /// Possible values include: &#39;ValidateSubscriptionQuotaBegin&#39;,
        /// &#39;ValidateSubscriptionQuotaEnd&#39;, &#39;Accepted&#39;, &#39;Creating&#39;, &#39;Succeeded&#39;,
        /// &#39;Deleting&#39;, &#39;Canceled&#39;, &#39;Failed&#39;</param>

        /// <param name="runStatus">Run status of storage task assignment
        /// </param>
        public StorageTaskAssignmentProperties(string taskId, bool enabled, string description, StorageTaskAssignmentExecutionContext executionContext, StorageTaskAssignmentReport report, string provisioningState = default(string), StorageTaskReportProperties runStatus = default(StorageTaskReportProperties))

        {
            this.TaskId = taskId;
            this.Enabled = enabled;
            this.Description = description;
            this.ExecutionContext = executionContext;
            this.Report = report;
            this.ProvisioningState = provisioningState;
            this.RunStatus = runStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets id of the corresponding storage task
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taskId")]
        public string TaskId {get; set; }

        /// <summary>
        /// Gets or sets whether the storage task assignment is enabled or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enabled")]
        public bool Enabled {get; set; }

        /// <summary>
        /// Gets or sets text that describes the purpose of the storage task assignment
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets the storage task assignment execution context
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "executionContext")]
        public StorageTaskAssignmentExecutionContext ExecutionContext {get; set; }

        /// <summary>
        /// Gets or sets the storage task assignment report
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "report")]
        public StorageTaskAssignmentReport Report {get; set; }

        /// <summary>
        /// Gets represents the provisioning state of the storage task assignment. Possible values include: &#39;ValidateSubscriptionQuotaBegin&#39;, &#39;ValidateSubscriptionQuotaEnd&#39;, &#39;Accepted&#39;, &#39;Creating&#39;, &#39;Succeeded&#39;, &#39;Deleting&#39;, &#39;Canceled&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets run status of storage task assignment
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runStatus")]
        public StorageTaskReportProperties RunStatus {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.TaskId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TaskId");
            }
            if (this.Description == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Description");
            }
            if (this.ExecutionContext == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ExecutionContext");
            }
            if (this.Report == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Report");
            }


            if (this.ExecutionContext != null)
            {
                this.ExecutionContext.Validate();
            }
            if (this.Report != null)
            {
                this.Report.Validate();
            }


        }
    }
}