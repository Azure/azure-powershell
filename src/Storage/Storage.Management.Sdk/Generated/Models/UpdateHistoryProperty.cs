// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// An update history of the ImmutabilityPolicy of a blob container.
    /// </summary>
    public partial class UpdateHistoryProperty
    {
        /// <summary>
        /// Initializes a new instance of the UpdateHistoryProperty class.
        /// </summary>
        public UpdateHistoryProperty()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UpdateHistoryProperty class.
        /// </summary>

        /// <param name="update">The ImmutabilityPolicy update type of a blob container, possible values
        /// include: put, lock and extend.
        /// Possible values include: 'put', 'lock', 'extend'</param>

        /// <param name="immutabilityPeriodSinceCreationInDays">The immutability period for the blobs in the container since the policy
        /// creation, in days.
        /// </param>

        /// <param name="timestamp">Returns the date and time the ImmutabilityPolicy was updated.
        /// </param>

        /// <param name="objectIdentifier">Returns the Object ID of the user who updated the ImmutabilityPolicy.
        /// </param>

        /// <param name="tenantId">Returns the Tenant ID that issued the token for the user who updated the
        /// ImmutabilityPolicy.
        /// </param>

        /// <param name="upn">Returns the User Principal Name of the user who updated the
        /// ImmutabilityPolicy.
        /// </param>

        /// <param name="allowProtectedAppendWrites">This property can only be changed for unlocked time-based retention
        /// policies. When enabled, new blocks can be written to an append blob while
        /// maintaining immutability protection and compliance. Only new blocks can be
        /// added and any existing blocks cannot be modified or deleted. This property
        /// cannot be changed with ExtendImmutabilityPolicy API.
        /// </param>

        /// <param name="allowProtectedAppendWritesAll">This property can only be changed for unlocked time-based retention
        /// policies. When enabled, new blocks can be written to both &#39;Append and Bock
        /// Blobs&#39; while maintaining immutability protection and compliance. Only new
        /// blocks can be added and any existing blocks cannot be modified or deleted.
        /// This property cannot be changed with ExtendImmutabilityPolicy API. The
        /// &#39;allowProtectedAppendWrites&#39; and &#39;allowProtectedAppendWritesAll&#39; properties
        /// are mutually exclusive.
        /// </param>
        public UpdateHistoryProperty(string update = default(string), int? immutabilityPeriodSinceCreationInDays = default(int?), System.DateTime? timestamp = default(System.DateTime?), string objectIdentifier = default(string), string tenantId = default(string), string upn = default(string), bool? allowProtectedAppendWrites = default(bool?), bool? allowProtectedAppendWritesAll = default(bool?))

        {
            this.Update = update;
            this.ImmutabilityPeriodSinceCreationInDays = immutabilityPeriodSinceCreationInDays;
            this.Timestamp = timestamp;
            this.ObjectIdentifier = objectIdentifier;
            this.TenantId = tenantId;
            this.Upn = upn;
            this.AllowProtectedAppendWrites = allowProtectedAppendWrites;
            this.AllowProtectedAppendWritesAll = allowProtectedAppendWritesAll;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the ImmutabilityPolicy update type of a blob container, possible
        /// values include: put, lock and extend. Possible values include: &#39;put&#39;, &#39;lock&#39;, &#39;extend&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "update")]
        public string Update {get; private set; }

        /// <summary>
        /// Gets the immutability period for the blobs in the container since the
        /// policy creation, in days.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "immutabilityPeriodSinceCreationInDays")]
        public int? ImmutabilityPeriodSinceCreationInDays {get; private set; }

        /// <summary>
        /// Gets returns the date and time the ImmutabilityPolicy was updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timestamp")]
        public System.DateTime? Timestamp {get; private set; }

        /// <summary>
        /// Gets returns the Object ID of the user who updated the ImmutabilityPolicy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "objectIdentifier")]
        public string ObjectIdentifier {get; private set; }

        /// <summary>
        /// Gets returns the Tenant ID that issued the token for the user who updated
        /// the ImmutabilityPolicy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tenantId")]
        public string TenantId {get; private set; }

        /// <summary>
        /// Gets returns the User Principal Name of the user who updated the
        /// ImmutabilityPolicy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upn")]
        public string Upn {get; private set; }

        /// <summary>
        /// Gets or sets this property can only be changed for unlocked time-based
        /// retention policies. When enabled, new blocks can be written to an append
        /// blob while maintaining immutability protection and compliance. Only new
        /// blocks can be added and any existing blocks cannot be modified or deleted.
        /// This property cannot be changed with ExtendImmutabilityPolicy API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowProtectedAppendWrites")]
        public bool? AllowProtectedAppendWrites {get; set; }

        /// <summary>
        /// Gets or sets this property can only be changed for unlocked time-based
        /// retention policies. When enabled, new blocks can be written to both &#39;Append
        /// and Bock Blobs&#39; while maintaining immutability protection and compliance.
        /// Only new blocks can be added and any existing blocks cannot be modified or
        /// deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
        /// The &#39;allowProtectedAppendWrites&#39; and &#39;allowProtectedAppendWritesAll&#39;
        /// properties are mutually exclusive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowProtectedAppendWritesAll")]
        public bool? AllowProtectedAppendWritesAll {get; set; }
    }
}