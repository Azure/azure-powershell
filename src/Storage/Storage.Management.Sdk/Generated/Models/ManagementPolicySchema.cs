// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// The Storage Account ManagementPolicies Rules. See more details in:
    /// https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
    /// </summary>
    public partial class ManagementPolicySchema
    {
        /// <summary>
        /// Initializes a new instance of the ManagementPolicySchema class.
        /// </summary>
        public ManagementPolicySchema()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagementPolicySchema class.
        /// </summary>

        /// <param name="rules">The Storage Account ManagementPolicies Rules. See more details in:
        /// https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
        /// </param>
        public ManagementPolicySchema(System.Collections.Generic.IList<ManagementPolicyRule> rules)

        {
            this.Rules = rules;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the Storage Account ManagementPolicies Rules. See more details
        /// in:
        /// https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rules")]
        public System.Collections.Generic.IList<ManagementPolicyRule> Rules {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Rules == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Rules");
            }
            if (this.Rules != null)
            {
                foreach (var element in this.Rules)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}