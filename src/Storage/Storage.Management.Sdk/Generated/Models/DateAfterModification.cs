// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using System.Linq;

    /// <summary>
    /// Object to define the base blob action conditions. Properties
    /// daysAfterModificationGreaterThan, daysAfterLastAccessTimeGreaterThan and
    /// daysAfterCreationGreaterThan are mutually exclusive. The
    /// daysAfterLastTierChangeGreaterThan property is only applicable for
    /// tierToArchive actions which requires daysAfterModificationGreaterThan to be
    /// set, also it cannot be used in conjunction with
    /// daysAfterLastAccessTimeGreaterThan or daysAfterCreationGreaterThan.
    /// </summary>
    public partial class DateAfterModification
    {
        /// <summary>
        /// Initializes a new instance of the DateAfterModification class.
        /// </summary>
        public DateAfterModification()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DateAfterModification class.
        /// </summary>

        /// <param name="daysAfterModificationGreaterThan">Value indicating the age in days after last modification
        /// </param>

        /// <param name="daysAfterLastAccessTimeGreaterThan">Value indicating the age in days after last blob access. This property can
        /// only be used in conjunction with last access time tracking policy
        /// </param>

        /// <param name="daysAfterLastTierChangeGreaterThan">Value indicating the age in days after last blob tier change time. This
        /// property is only applicable for tierToArchive actions and requires
        /// daysAfterModificationGreaterThan to be set for baseBlobs based actions. The
        /// blob will be archived if both the conditions are satisfied.
        /// </param>

        /// <param name="daysAfterCreationGreaterThan">Value indicating the age in days after blob creation.
        /// </param>
        public DateAfterModification(double? daysAfterModificationGreaterThan = default(double?), double? daysAfterLastAccessTimeGreaterThan = default(double?), double? daysAfterLastTierChangeGreaterThan = default(double?), double? daysAfterCreationGreaterThan = default(double?))

        {
            this.DaysAfterModificationGreaterThan = daysAfterModificationGreaterThan;
            this.DaysAfterLastAccessTimeGreaterThan = daysAfterLastAccessTimeGreaterThan;
            this.DaysAfterLastTierChangeGreaterThan = daysAfterLastTierChangeGreaterThan;
            this.DaysAfterCreationGreaterThan = daysAfterCreationGreaterThan;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets value indicating the age in days after last modification
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "daysAfterModificationGreaterThan")]
        public double? DaysAfterModificationGreaterThan {get; set; }

        /// <summary>
        /// Gets or sets value indicating the age in days after last blob access. This
        /// property can only be used in conjunction with last access time tracking
        /// policy
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "daysAfterLastAccessTimeGreaterThan")]
        public double? DaysAfterLastAccessTimeGreaterThan {get; set; }

        /// <summary>
        /// Gets or sets value indicating the age in days after last blob tier change
        /// time. This property is only applicable for tierToArchive actions and
        /// requires daysAfterModificationGreaterThan to be set for baseBlobs based
        /// actions. The blob will be archived if both the conditions are satisfied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "daysAfterLastTierChangeGreaterThan")]
        public double? DaysAfterLastTierChangeGreaterThan {get; set; }

        /// <summary>
        /// Gets or sets value indicating the age in days after blob creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "daysAfterCreationGreaterThan")]
        public double? DaysAfterCreationGreaterThan {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DaysAfterModificationGreaterThan != null)
            {
                if (this.DaysAfterModificationGreaterThan < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "DaysAfterModificationGreaterThan", 0);
                }
                if (this.DaysAfterModificationGreaterThan % 1 != 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MultipleOf, "DaysAfterModificationGreaterThan", 1);
                }
            }
            if (this.DaysAfterLastAccessTimeGreaterThan != null)
            {
                if (this.DaysAfterLastAccessTimeGreaterThan < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "DaysAfterLastAccessTimeGreaterThan", 0);
                }
                if (this.DaysAfterLastAccessTimeGreaterThan % 1 != 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MultipleOf, "DaysAfterLastAccessTimeGreaterThan", 1);
                }
            }
            if (this.DaysAfterLastTierChangeGreaterThan != null)
            {
                if (this.DaysAfterLastTierChangeGreaterThan < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "DaysAfterLastTierChangeGreaterThan", 0);
                }
                if (this.DaysAfterLastTierChangeGreaterThan % 1 != 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MultipleOf, "DaysAfterLastTierChangeGreaterThan", 1);
                }
            }
            if (this.DaysAfterCreationGreaterThan != null)
            {
                if (this.DaysAfterCreationGreaterThan < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "DaysAfterCreationGreaterThan", 0);
                }
                if (this.DaysAfterCreationGreaterThan % 1 != 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MultipleOf, "DaysAfterCreationGreaterThan", 1);
                }
            }
        }
    }
}