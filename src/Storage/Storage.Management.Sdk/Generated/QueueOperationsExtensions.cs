// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Storage
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for QueueOperations
    /// </summary>
    public static partial class QueueOperationsExtensions
    {
        /// <summary>
        /// Gets a list of all the queues under the specified storage account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='maxpagesize'>
        /// Optional, a maximum number of queues that should be included in a list
        /// queue response
        /// </param>
        /// <param name='filter'>
        /// Optional, When specified, only the queues with a name starting with the
        /// given filter will be listed.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ListQueue> List(this IQueueOperations operations, string resourceGroupName, string accountName, string maxpagesize = default(string), string filter = default(string))
        {
                return ((IQueueOperations)operations).ListAsync(resourceGroupName, accountName, maxpagesize, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a list of all the queues under the specified storage account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='maxpagesize'>
        /// Optional, a maximum number of queues that should be included in a list
        /// queue response
        /// </param>
        /// <param name='filter'>
        /// Optional, When specified, only the queues with a name starting with the
        /// given filter will be listed.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ListQueue>> ListAsync(this IQueueOperations operations, string resourceGroupName, string accountName, string maxpagesize = default(string), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, maxpagesize, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the queue with the specified queue name, under the specified account
        /// if it exists.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='queueName'>
        /// A queue name must be unique within a storage account and must be between 3
        /// and 63 characters.The name must comprise of lowercase alphanumeric and
        /// dash(-) characters only, it should begin and end with an alphanumeric
        /// character and it cannot have two consecutive dash(-) characters.
        /// </param>
        public static StorageQueue Get(this IQueueOperations operations, string resourceGroupName, string accountName, string queueName)
        {
                return ((IQueueOperations)operations).GetAsync(resourceGroupName, accountName, queueName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the queue with the specified queue name, under the specified account
        /// if it exists.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='queueName'>
        /// A queue name must be unique within a storage account and must be between 3
        /// and 63 characters.The name must comprise of lowercase alphanumeric and
        /// dash(-) characters only, it should begin and end with an alphanumeric
        /// character and it cannot have two consecutive dash(-) characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StorageQueue> GetAsync(this IQueueOperations operations, string resourceGroupName, string accountName, string queueName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, queueName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates a new queue with the specified queue name, under the specified
        /// account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='queueName'>
        /// A queue name must be unique within a storage account and must be between 3
        /// and 63 characters.The name must comprise of lowercase alphanumeric and
        /// dash(-) characters only, it should begin and end with an alphanumeric
        /// character and it cannot have two consecutive dash(-) characters.
        /// </param>
        public static StorageQueue Create(this IQueueOperations operations, string resourceGroupName, string accountName, string queueName, System.Collections.Generic.IDictionary<string, string> metadata = default(System.Collections.Generic.IDictionary<string, string>))
        {
                return ((IQueueOperations)operations).CreateAsync(resourceGroupName, accountName, queueName, metadata).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a new queue with the specified queue name, under the specified
        /// account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='queueName'>
        /// A queue name must be unique within a storage account and must be between 3
        /// and 63 characters.The name must comprise of lowercase alphanumeric and
        /// dash(-) characters only, it should begin and end with an alphanumeric
        /// character and it cannot have two consecutive dash(-) characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StorageQueue> CreateAsync(this IQueueOperations operations, string resourceGroupName, string accountName, string queueName, System.Collections.Generic.IDictionary<string, string> metadata = default(System.Collections.Generic.IDictionary<string, string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, queueName, metadata, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates a new queue with the specified queue name, under the specified
        /// account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='queueName'>
        /// A queue name must be unique within a storage account and must be between 3
        /// and 63 characters.The name must comprise of lowercase alphanumeric and
        /// dash(-) characters only, it should begin and end with an alphanumeric
        /// character and it cannot have two consecutive dash(-) characters.
        /// </param>
        public static StorageQueue Update(this IQueueOperations operations, string resourceGroupName, string accountName, string queueName, System.Collections.Generic.IDictionary<string, string> metadata = default(System.Collections.Generic.IDictionary<string, string>))
        {
                return ((IQueueOperations)operations).UpdateAsync(resourceGroupName, accountName, queueName, metadata).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a new queue with the specified queue name, under the specified
        /// account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='queueName'>
        /// A queue name must be unique within a storage account and must be between 3
        /// and 63 characters.The name must comprise of lowercase alphanumeric and
        /// dash(-) characters only, it should begin and end with an alphanumeric
        /// character and it cannot have two consecutive dash(-) characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StorageQueue> UpdateAsync(this IQueueOperations operations, string resourceGroupName, string accountName, string queueName, System.Collections.Generic.IDictionary<string, string> metadata = default(System.Collections.Generic.IDictionary<string, string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, queueName, metadata, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the queue with the specified queue name, under the specified
        /// account if it exists.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='queueName'>
        /// A queue name must be unique within a storage account and must be between 3
        /// and 63 characters.The name must comprise of lowercase alphanumeric and
        /// dash(-) characters only, it should begin and end with an alphanumeric
        /// character and it cannot have two consecutive dash(-) characters.
        /// </param>
        public static void Delete(this IQueueOperations operations, string resourceGroupName, string accountName, string queueName)
        {
                ((IQueueOperations)operations).DeleteAsync(resourceGroupName, accountName, queueName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the queue with the specified queue name, under the specified
        /// account if it exists.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='queueName'>
        /// A queue name must be unique within a storage account and must be between 3
        /// and 63 characters.The name must comprise of lowercase alphanumeric and
        /// dash(-) characters only, it should begin and end with an alphanumeric
        /// character and it cannot have two consecutive dash(-) characters.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IQueueOperations operations, string resourceGroupName, string accountName, string queueName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, queueName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets a list of all the queues under the specified storage account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ListQueue> ListNext(this IQueueOperations operations, string nextPageLink)
        {
                return ((IQueueOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a list of all the queues under the specified storage account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ListQueue>> ListNextAsync(this IQueueOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
