// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Storage
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ObjectReplicationPoliciesOperations
    /// </summary>
    public static partial class ObjectReplicationPoliciesOperationsExtensions
    {
        /// <summary>
        /// List the object replication policies associated with the storage account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is
        /// case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        public static System.Collections.Generic.IEnumerable<ObjectReplicationPolicy> List(this IObjectReplicationPoliciesOperations operations, string resourceGroupName, string accountName)
        {
                return ((IObjectReplicationPoliciesOperations)operations).ListAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List the object replication policies associated with the storage account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is
        /// case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ObjectReplicationPolicy>> ListAsync(this IObjectReplicationPoliciesOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get the object replication policy of the storage account by policy ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is
        /// case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='objectReplicationPolicyId'>
        /// For the destination account, provide the value &#39;default&#39;. Configure the
        /// policy on the destination account first. For the source account, provide
        /// the value of the policy ID that is returned when you download the policy
        /// that was defined on the destination account. The policy is downloaded as a
        /// JSON file.
        /// </param>
        public static ObjectReplicationPolicy Get(this IObjectReplicationPoliciesOperations operations, string resourceGroupName, string accountName, string objectReplicationPolicyId)
        {
                return ((IObjectReplicationPoliciesOperations)operations).GetAsync(resourceGroupName, accountName, objectReplicationPolicyId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the object replication policy of the storage account by policy ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is
        /// case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='objectReplicationPolicyId'>
        /// For the destination account, provide the value &#39;default&#39;. Configure the
        /// policy on the destination account first. For the source account, provide
        /// the value of the policy ID that is returned when you download the policy
        /// that was defined on the destination account. The policy is downloaded as a
        /// JSON file.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ObjectReplicationPolicy> GetAsync(this IObjectReplicationPoliciesOperations operations, string resourceGroupName, string accountName, string objectReplicationPolicyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, objectReplicationPolicyId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update the object replication policy of the storage account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is
        /// case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='objectReplicationPolicyId'>
        /// For the destination account, provide the value &#39;default&#39;. Configure the
        /// policy on the destination account first. For the source account, provide
        /// the value of the policy ID that is returned when you download the policy
        /// that was defined on the destination account. The policy is downloaded as a
        /// JSON file.
        /// </param>
        public static ObjectReplicationPolicy CreateOrUpdate(this IObjectReplicationPoliciesOperations operations, string resourceGroupName, string accountName, string objectReplicationPolicyId, ObjectReplicationPolicy properties)
        {
                return ((IObjectReplicationPoliciesOperations)operations).CreateOrUpdateAsync(resourceGroupName, accountName, objectReplicationPolicyId, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update the object replication policy of the storage account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is
        /// case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='objectReplicationPolicyId'>
        /// For the destination account, provide the value &#39;default&#39;. Configure the
        /// policy on the destination account first. For the source account, provide
        /// the value of the policy ID that is returned when you download the policy
        /// that was defined on the destination account. The policy is downloaded as a
        /// JSON file.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ObjectReplicationPolicy> CreateOrUpdateAsync(this IObjectReplicationPoliciesOperations operations, string resourceGroupName, string accountName, string objectReplicationPolicyId, ObjectReplicationPolicy properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, accountName, objectReplicationPolicyId, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the object replication policy associated with the specified storage
        /// account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is
        /// case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='objectReplicationPolicyId'>
        /// For the destination account, provide the value &#39;default&#39;. Configure the
        /// policy on the destination account first. For the source account, provide
        /// the value of the policy ID that is returned when you download the policy
        /// that was defined on the destination account. The policy is downloaded as a
        /// JSON file.
        /// </param>
        public static void Delete(this IObjectReplicationPoliciesOperations operations, string resourceGroupName, string accountName, string objectReplicationPolicyId)
        {
                ((IObjectReplicationPoliciesOperations)operations).DeleteAsync(resourceGroupName, accountName, objectReplicationPolicyId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the object replication policy associated with the specified storage
        /// account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is
        /// case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='objectReplicationPolicyId'>
        /// For the destination account, provide the value &#39;default&#39;. Configure the
        /// policy on the destination account first. For the source account, provide
        /// the value of the policy ID that is returned when you download the policy
        /// that was defined on the destination account. The policy is downloaded as a
        /// JSON file.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IObjectReplicationPoliciesOperations operations, string resourceGroupName, string accountName, string objectReplicationPolicyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, objectReplicationPolicyId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
    }
}
