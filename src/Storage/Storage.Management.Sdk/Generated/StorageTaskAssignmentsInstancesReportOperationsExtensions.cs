// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Storage
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for StorageTaskAssignmentsInstancesReportOperations
    /// </summary>
    public static partial class StorageTaskAssignmentsInstancesReportOperationsExtensions
    {
        /// <summary>
        /// Fetch the report summary of all the storage task assignments and instances
        /// in an account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='maxpagesize'>
        /// Optional, specifies the maximum number of storage task assignment instances
        /// to be included in the list response.
        /// </param>
        /// <param name='filter'>
        /// Optional. When specified, it can be used to query using reporting
        /// properties. See [Constructing Filter
        /// Strings](https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#constructing-filter-strings)
        /// for details.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StorageTaskReportInstance> List(this IStorageTaskAssignmentsInstancesReportOperations operations, string resourceGroupName, string accountName, int? maxpagesize = default(int?), string filter = default(string))
        {
                return ((IStorageTaskAssignmentsInstancesReportOperations)operations).ListAsync(resourceGroupName, accountName, maxpagesize, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Fetch the report summary of all the storage task assignments and instances
        /// in an account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='maxpagesize'>
        /// Optional, specifies the maximum number of storage task assignment instances
        /// to be included in the list response.
        /// </param>
        /// <param name='filter'>
        /// Optional. When specified, it can be used to query using reporting
        /// properties. See [Constructing Filter
        /// Strings](https://learn.microsoft.com/rest/api/storageservices/querying-tables-and-entities#constructing-filter-strings)
        /// for details.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StorageTaskReportInstance>> ListAsync(this IStorageTaskAssignmentsInstancesReportOperations operations, string resourceGroupName, string accountName, int? maxpagesize = default(int?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, maxpagesize, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Fetch the report summary of all the storage task assignments and instances
        /// in an account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StorageTaskReportInstance> ListNext(this IStorageTaskAssignmentsInstancesReportOperations operations, string nextPageLink)
        {
                return ((IStorageTaskAssignmentsInstancesReportOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Fetch the report summary of all the storage task assignments and instances
        /// in an account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StorageTaskReportInstance>> ListNextAsync(this IStorageTaskAssignmentsInstancesReportOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
