// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Storage
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for FileServicesOperations
    /// </summary>
    public static partial class FileServicesOperationsExtensions
    {
        /// <summary>
        /// List all file services in storage accounts
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is
        /// case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        public static FileServiceItems List(this IFileServicesOperations operations, string resourceGroupName, string accountName)
        {
                return ((IFileServicesOperations)operations).ListAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all file services in storage accounts
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is
        /// case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FileServiceItems> ListAsync(this IFileServicesOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Sets the properties of file services in storage accounts, including CORS
        /// (Cross-Origin Resource Sharing) rules.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is
        /// case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        public static FileServiceProperties SetServiceProperties(this IFileServicesOperations operations, string resourceGroupName, string accountName, FileServiceProperties parameters)
        {
                return ((IFileServicesOperations)operations).SetServicePropertiesAsync(resourceGroupName, accountName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Sets the properties of file services in storage accounts, including CORS
        /// (Cross-Origin Resource Sharing) rules.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is
        /// case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FileServiceProperties> SetServicePropertiesAsync(this IFileServicesOperations operations, string resourceGroupName, string accountName, FileServiceProperties parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.SetServicePropertiesWithHttpMessagesAsync(resourceGroupName, accountName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the properties of file services in storage accounts, including CORS
        /// (Cross-Origin Resource Sharing) rules.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is
        /// case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        public static FileServiceProperties GetServiceProperties(this IFileServicesOperations operations, string resourceGroupName, string accountName)
        {
                return ((IFileServicesOperations)operations).GetServicePropertiesAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the properties of file services in storage accounts, including CORS
        /// (Cross-Origin Resource Sharing) rules.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is
        /// case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FileServiceProperties> GetServicePropertiesAsync(this IFileServicesOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetServicePropertiesWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the usages of file service in storage account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is
        /// case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='maxpagesize'>
        /// Optional, specifies the maximum number of file service usages to be
        /// included in the list response.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<FileServiceUsage> ListServiceUsages(this IFileServicesOperations operations, string resourceGroupName, string accountName, int? maxpagesize = default(int?))
        {
                return ((IFileServicesOperations)operations).ListServiceUsagesAsync(resourceGroupName, accountName, maxpagesize).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the usages of file service in storage account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is
        /// case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='maxpagesize'>
        /// Optional, specifies the maximum number of file service usages to be
        /// included in the list response.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<FileServiceUsage>> ListServiceUsagesAsync(this IFileServicesOperations operations, string resourceGroupName, string accountName, int? maxpagesize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListServiceUsagesWithHttpMessagesAsync(resourceGroupName, accountName, maxpagesize, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the usage of file service in storage account including account limits,
        /// file share limits and constants used in recommendations and bursting
        /// formula.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is
        /// case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        public static FileServiceUsage GetServiceUsage(this IFileServicesOperations operations, string resourceGroupName, string accountName)
        {
                return ((IFileServicesOperations)operations).GetServiceUsageAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the usage of file service in storage account including account limits,
        /// file share limits and constants used in recommendations and bursting
        /// formula.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the user&#39;s subscription. The name is
        /// case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FileServiceUsage> GetServiceUsageAsync(this IFileServicesOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetServiceUsageWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the usages of file service in storage account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<FileServiceUsage> ListServiceUsagesNext(this IFileServicesOperations operations, string nextPageLink)
        {
                return ((IFileServicesOperations)operations).ListServiceUsagesNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the usages of file service in storage account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<FileServiceUsage>> ListServiceUsagesNextAsync(this IFileServicesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListServiceUsagesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
