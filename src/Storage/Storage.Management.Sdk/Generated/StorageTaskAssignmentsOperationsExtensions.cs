// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Storage
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for StorageTaskAssignmentsOperations
    /// </summary>
    public static partial class StorageTaskAssignmentsOperationsExtensions
    {
        /// <summary>
        /// List all the storage task assignments in an account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='top'>
        /// Optional, specifies the maximum number of storage task assignment Ids to be
        /// included in the list response.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StorageTaskAssignment> List(this IStorageTaskAssignmentsOperations operations, string resourceGroupName, string accountName, int? top = default(int?))
        {
                return ((IStorageTaskAssignmentsOperations)operations).ListAsync(resourceGroupName, accountName, top).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all the storage task assignments in an account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='top'>
        /// Optional, specifies the maximum number of storage task assignment Ids to be
        /// included in the list response.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StorageTaskAssignment>> ListAsync(this IStorageTaskAssignmentsOperations operations, string resourceGroupName, string accountName, int? top = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, top, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get the storage task assignment properties
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='storageTaskAssignmentName'>
        /// The name of the storage task assignment within the specified resource
        /// group. Storage task assignment names must be between 3 and 24 characters in
        /// length and use numbers and lower-case letters only.
        /// </param>
        public static StorageTaskAssignment Get(this IStorageTaskAssignmentsOperations operations, string resourceGroupName, string accountName, string storageTaskAssignmentName)
        {
                return ((IStorageTaskAssignmentsOperations)operations).GetAsync(resourceGroupName, accountName, storageTaskAssignmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the storage task assignment properties
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='storageTaskAssignmentName'>
        /// The name of the storage task assignment within the specified resource
        /// group. Storage task assignment names must be between 3 and 24 characters in
        /// length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StorageTaskAssignment> GetAsync(this IStorageTaskAssignmentsOperations operations, string resourceGroupName, string accountName, string storageTaskAssignmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, storageTaskAssignmentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Asynchronously creates a new storage task assignment sub-resource with the
        /// specified parameters. If a storage task assignment is already created and a
        /// subsequent create request is issued with different properties, the storage
        /// task assignment properties will be updated. If a storage task assignment is
        /// already created and a subsequent create or update request is issued with
        /// the exact same set of properties, the request will succeed.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='storageTaskAssignmentName'>
        /// The name of the storage task assignment within the specified resource
        /// group. Storage task assignment names must be between 3 and 24 characters in
        /// length and use numbers and lower-case letters only.
        /// </param>
        public static StorageTaskAssignment Create(this IStorageTaskAssignmentsOperations operations, string resourceGroupName, string accountName, string storageTaskAssignmentName, StorageTaskAssignmentProperties properties)
        {
                return ((IStorageTaskAssignmentsOperations)operations).CreateAsync(resourceGroupName, accountName, storageTaskAssignmentName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Asynchronously creates a new storage task assignment sub-resource with the
        /// specified parameters. If a storage task assignment is already created and a
        /// subsequent create request is issued with different properties, the storage
        /// task assignment properties will be updated. If a storage task assignment is
        /// already created and a subsequent create or update request is issued with
        /// the exact same set of properties, the request will succeed.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='storageTaskAssignmentName'>
        /// The name of the storage task assignment within the specified resource
        /// group. Storage task assignment names must be between 3 and 24 characters in
        /// length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StorageTaskAssignment> CreateAsync(this IStorageTaskAssignmentsOperations operations, string resourceGroupName, string accountName, string storageTaskAssignmentName, StorageTaskAssignmentProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, storageTaskAssignmentName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update storage task assignment properties
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='storageTaskAssignmentName'>
        /// The name of the storage task assignment within the specified resource
        /// group. Storage task assignment names must be between 3 and 24 characters in
        /// length and use numbers and lower-case letters only.
        /// </param>
        public static StorageTaskAssignment Update(this IStorageTaskAssignmentsOperations operations, string resourceGroupName, string accountName, string storageTaskAssignmentName, StorageTaskAssignmentUpdateProperties properties = default(StorageTaskAssignmentUpdateProperties))
        {
                return ((IStorageTaskAssignmentsOperations)operations).UpdateAsync(resourceGroupName, accountName, storageTaskAssignmentName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update storage task assignment properties
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='storageTaskAssignmentName'>
        /// The name of the storage task assignment within the specified resource
        /// group. Storage task assignment names must be between 3 and 24 characters in
        /// length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StorageTaskAssignment> UpdateAsync(this IStorageTaskAssignmentsOperations operations, string resourceGroupName, string accountName, string storageTaskAssignmentName, StorageTaskAssignmentUpdateProperties properties = default(StorageTaskAssignmentUpdateProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, storageTaskAssignmentName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete the storage task assignment sub-resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='storageTaskAssignmentName'>
        /// The name of the storage task assignment within the specified resource
        /// group. Storage task assignment names must be between 3 and 24 characters in
        /// length and use numbers and lower-case letters only.
        /// </param>
        public static StorageTaskAssignmentsDeleteHeaders Delete(this IStorageTaskAssignmentsOperations operations, string resourceGroupName, string accountName, string storageTaskAssignmentName)
        {
                return ((IStorageTaskAssignmentsOperations)operations).DeleteAsync(resourceGroupName, accountName, storageTaskAssignmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete the storage task assignment sub-resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='storageTaskAssignmentName'>
        /// The name of the storage task assignment within the specified resource
        /// group. Storage task assignment names must be between 3 and 24 characters in
        /// length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StorageTaskAssignmentsDeleteHeaders> DeleteAsync(this IStorageTaskAssignmentsOperations operations, string resourceGroupName, string accountName, string storageTaskAssignmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, storageTaskAssignmentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Asynchronously creates a new storage task assignment sub-resource with the
        /// specified parameters. If a storage task assignment is already created and a
        /// subsequent create request is issued with different properties, the storage
        /// task assignment properties will be updated. If a storage task assignment is
        /// already created and a subsequent create or update request is issued with
        /// the exact same set of properties, the request will succeed.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='storageTaskAssignmentName'>
        /// The name of the storage task assignment within the specified resource
        /// group. Storage task assignment names must be between 3 and 24 characters in
        /// length and use numbers and lower-case letters only.
        /// </param>
        public static StorageTaskAssignment BeginCreate(this IStorageTaskAssignmentsOperations operations, string resourceGroupName, string accountName, string storageTaskAssignmentName, StorageTaskAssignmentProperties properties)
        {
                return ((IStorageTaskAssignmentsOperations)operations).BeginCreateAsync(resourceGroupName, accountName, storageTaskAssignmentName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Asynchronously creates a new storage task assignment sub-resource with the
        /// specified parameters. If a storage task assignment is already created and a
        /// subsequent create request is issued with different properties, the storage
        /// task assignment properties will be updated. If a storage task assignment is
        /// already created and a subsequent create or update request is issued with
        /// the exact same set of properties, the request will succeed.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='storageTaskAssignmentName'>
        /// The name of the storage task assignment within the specified resource
        /// group. Storage task assignment names must be between 3 and 24 characters in
        /// length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StorageTaskAssignment> BeginCreateAsync(this IStorageTaskAssignmentsOperations operations, string resourceGroupName, string accountName, string storageTaskAssignmentName, StorageTaskAssignmentProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, accountName, storageTaskAssignmentName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update storage task assignment properties
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='storageTaskAssignmentName'>
        /// The name of the storage task assignment within the specified resource
        /// group. Storage task assignment names must be between 3 and 24 characters in
        /// length and use numbers and lower-case letters only.
        /// </param>
        public static StorageTaskAssignment BeginUpdate(this IStorageTaskAssignmentsOperations operations, string resourceGroupName, string accountName, string storageTaskAssignmentName, StorageTaskAssignmentUpdateProperties properties = default(StorageTaskAssignmentUpdateProperties))
        {
                return ((IStorageTaskAssignmentsOperations)operations).BeginUpdateAsync(resourceGroupName, accountName, storageTaskAssignmentName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update storage task assignment properties
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='storageTaskAssignmentName'>
        /// The name of the storage task assignment within the specified resource
        /// group. Storage task assignment names must be between 3 and 24 characters in
        /// length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StorageTaskAssignment> BeginUpdateAsync(this IStorageTaskAssignmentsOperations operations, string resourceGroupName, string accountName, string storageTaskAssignmentName, StorageTaskAssignmentUpdateProperties properties = default(StorageTaskAssignmentUpdateProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, accountName, storageTaskAssignmentName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete the storage task assignment sub-resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='storageTaskAssignmentName'>
        /// The name of the storage task assignment within the specified resource
        /// group. Storage task assignment names must be between 3 and 24 characters in
        /// length and use numbers and lower-case letters only.
        /// </param>
        public static StorageTaskAssignmentsDeleteHeaders BeginDelete(this IStorageTaskAssignmentsOperations operations, string resourceGroupName, string accountName, string storageTaskAssignmentName)
        {
                return ((IStorageTaskAssignmentsOperations)operations).BeginDeleteAsync(resourceGroupName, accountName, storageTaskAssignmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete the storage task assignment sub-resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the storage account within the specified resource group.
        /// Storage account names must be between 3 and 24 characters in length and use
        /// numbers and lower-case letters only.
        /// </param>
        /// <param name='storageTaskAssignmentName'>
        /// The name of the storage task assignment within the specified resource
        /// group. Storage task assignment names must be between 3 and 24 characters in
        /// length and use numbers and lower-case letters only.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StorageTaskAssignmentsDeleteHeaders> BeginDeleteAsync(this IStorageTaskAssignmentsOperations operations, string resourceGroupName, string accountName, string storageTaskAssignmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, storageTaskAssignmentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// List all the storage task assignments in an account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StorageTaskAssignment> ListNext(this IStorageTaskAssignmentsOperations operations, string nextPageLink)
        {
                return ((IStorageTaskAssignmentsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all the storage task assignments in an account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StorageTaskAssignment>> ListNextAsync(this IStorageTaskAssignmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
