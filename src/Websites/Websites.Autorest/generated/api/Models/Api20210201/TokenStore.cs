// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Extensions;

    /// <summary>The configuration settings of the token store.</summary>
    public partial class TokenStore :
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.ITokenStore,
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.ITokenStoreInternal
    {

        /// <summary>Backing field for <see cref="AzureBlobStorage" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IBlobStorageTokenStore _azureBlobStorage;

        /// <summary>
        /// The configuration settings of the storage of the tokens if blob storage is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IBlobStorageTokenStore AzureBlobStorage { get => (this._azureBlobStorage = this._azureBlobStorage ?? new Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.BlobStorageTokenStore()); set => this._azureBlobStorage = value; }

        /// <summary>
        /// The name of the app setting containing the SAS URL of the blob storage containing the tokens.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Inlined)]
        public string AzureBlobStorageSasUrlSettingName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IBlobStorageTokenStoreInternal)AzureBlobStorage).SasUrlSettingName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IBlobStorageTokenStoreInternal)AzureBlobStorage).SasUrlSettingName = value ?? null; }

        /// <summary>Backing field for <see cref="Enabled" /> property.</summary>
        private bool? _enabled;

        /// <summary>
        /// <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise,
        /// <code>false</code>.
        /// The default is <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Owned)]
        public bool? Enabled { get => this._enabled; set => this._enabled = value; }

        /// <summary>Backing field for <see cref="FileSystem" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IFileSystemTokenStore _fileSystem;

        /// <summary>
        /// The configuration settings of the storage of the tokens if a file system is used.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IFileSystemTokenStore FileSystem { get => (this._fileSystem = this._fileSystem ?? new Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.FileSystemTokenStore()); set => this._fileSystem = value; }

        /// <summary>The directory in which the tokens will be stored.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Inlined)]
        public string FileSystemDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IFileSystemTokenStoreInternal)FileSystem).Directory; set => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IFileSystemTokenStoreInternal)FileSystem).Directory = value ?? null; }

        /// <summary>Internal Acessors for AzureBlobStorage</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IBlobStorageTokenStore Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.ITokenStoreInternal.AzureBlobStorage { get => (this._azureBlobStorage = this._azureBlobStorage ?? new Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.BlobStorageTokenStore()); set { {_azureBlobStorage = value;} } }

        /// <summary>Internal Acessors for FileSystem</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IFileSystemTokenStore Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.ITokenStoreInternal.FileSystem { get => (this._fileSystem = this._fileSystem ?? new Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.FileSystemTokenStore()); set { {_fileSystem = value;} } }

        /// <summary>Backing field for <see cref="TokenRefreshExtensionHour" /> property.</summary>
        private double? _tokenRefreshExtensionHour;

        /// <summary>
        /// The number of hours after session token expiration that a session token can be used to
        /// call the token refresh API. The default is 72 hours.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Owned)]
        public double? TokenRefreshExtensionHour { get => this._tokenRefreshExtensionHour; set => this._tokenRefreshExtensionHour = value; }

        /// <summary>Creates an new <see cref="TokenStore" /> instance.</summary>
        public TokenStore()
        {

        }
    }
    /// The configuration settings of the token store.
    public partial interface ITokenStore :
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The name of the app setting containing the SAS URL of the blob storage containing the tokens.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the app setting containing the SAS URL of the blob storage containing the tokens.",
        SerializedName = @"sasUrlSettingName",
        PossibleTypes = new [] { typeof(string) })]
        string AzureBlobStorageSasUrlSettingName { get; set; }
        /// <summary>
        /// <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise,
        /// <code>false</code>.
        /// The default is <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.
         The default is <code>false</code>.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Enabled { get; set; }
        /// <summary>The directory in which the tokens will be stored.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The directory in which the tokens will be stored.",
        SerializedName = @"directory",
        PossibleTypes = new [] { typeof(string) })]
        string FileSystemDirectory { get; set; }
        /// <summary>
        /// The number of hours after session token expiration that a session token can be used to
        /// call the token refresh API. The default is 72 hours.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of hours after session token expiration that a session token can be used to
        call the token refresh API. The default is 72 hours.",
        SerializedName = @"tokenRefreshExtensionHours",
        PossibleTypes = new [] { typeof(double) })]
        double? TokenRefreshExtensionHour { get; set; }

    }
    /// The configuration settings of the token store.
    internal partial interface ITokenStoreInternal

    {
        /// <summary>
        /// The configuration settings of the storage of the tokens if blob storage is used.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IBlobStorageTokenStore AzureBlobStorage { get; set; }
        /// <summary>
        /// The name of the app setting containing the SAS URL of the blob storage containing the tokens.
        /// </summary>
        string AzureBlobStorageSasUrlSettingName { get; set; }
        /// <summary>
        /// <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise,
        /// <code>false</code>.
        /// The default is <code>false</code>.
        /// </summary>
        bool? Enabled { get; set; }
        /// <summary>
        /// The configuration settings of the storage of the tokens if a file system is used.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IFileSystemTokenStore FileSystem { get; set; }
        /// <summary>The directory in which the tokens will be stored.</summary>
        string FileSystemDirectory { get; set; }
        /// <summary>
        /// The number of hours after session token expiration that a session token can be used to
        /// call the token refresh API. The default is 72 hours.
        /// </summary>
        double? TokenRefreshExtensionHour { get; set; }

    }
}