// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Extensions;

    /// <summary>
    /// The configuration settings of the storage of the tokens if a file system is used.
    /// </summary>
    public partial class FileSystemTokenStore :
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IFileSystemTokenStore,
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IFileSystemTokenStoreInternal
    {

        /// <summary>Backing field for <see cref="Directory" /> property.</summary>
        private string _directory;

        /// <summary>The directory in which the tokens will be stored.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Owned)]
        public string Directory { get => this._directory; set => this._directory = value; }

        /// <summary>Creates an new <see cref="FileSystemTokenStore" /> instance.</summary>
        public FileSystemTokenStore()
        {

        }
    }
    /// The configuration settings of the storage of the tokens if a file system is used.
    public partial interface IFileSystemTokenStore :
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.IJsonSerializable
    {
        /// <summary>The directory in which the tokens will be stored.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The directory in which the tokens will be stored.",
        SerializedName = @"directory",
        PossibleTypes = new [] { typeof(string) })]
        string Directory { get; set; }

    }
    /// The configuration settings of the storage of the tokens if a file system is used.
    internal partial interface IFileSystemTokenStoreInternal

    {
        /// <summary>The directory in which the tokens will be stored.</summary>
        string Directory { get; set; }

    }
}