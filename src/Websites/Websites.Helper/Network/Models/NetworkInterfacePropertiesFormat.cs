// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network.Models
{
    using System.Linq;

    /// <summary>
    /// NetworkInterface properties.
    /// </summary>
    public partial class NetworkInterfacePropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the NetworkInterfacePropertiesFormat class.
        /// </summary>
        public NetworkInterfacePropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NetworkInterfacePropertiesFormat class.
        /// </summary>

        /// <param name="virtualMachine">The reference to a virtual machine.
        /// </param>

        /// <param name="networkSecurityGroup">The reference to the NetworkSecurityGroup resource.
        /// </param>

        /// <param name="privateEndpoint">A reference to the private endpoint to which the network interface is
        /// linked.
        /// </param>

        /// <param name="ipConfigurations">A list of IPConfigurations of the network interface.
        /// </param>

        /// <param name="tapConfigurations">A list of TapConfigurations of the network interface.
        /// </param>

        /// <param name="dnsSettings">The DNS settings in network interface.
        /// </param>

        /// <param name="macAddress">The MAC address of the network interface.
        /// </param>

        /// <param name="primary">Whether this is a primary network interface on a virtual machine.
        /// </param>

        /// <param name="enableAcceleratedNetworking">If the network interface is accelerated networking enabled.
        /// </param>

        /// <param name="enableIPForwarding">Indicates whether IP forwarding is enabled on this network interface.
        /// </param>

        /// <param name="hostedWorkloads">A list of references to linked BareMetal resources.
        /// </param>

        /// <param name="dscpConfiguration">A reference to the dscp configuration to which the network interface is
        /// linked.
        /// </param>

        /// <param name="resourceGuid">The resource GUID property of the network interface resource.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the network interface resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>
        public NetworkInterfacePropertiesFormat(SubResource virtualMachine = default(SubResource), NetworkSecurityGroup networkSecurityGroup = default(NetworkSecurityGroup), PrivateEndpoint privateEndpoint = default(PrivateEndpoint), System.Collections.Generic.IList<NetworkInterfaceIPConfiguration> ipConfigurations = default(System.Collections.Generic.IList<NetworkInterfaceIPConfiguration>), System.Collections.Generic.IList<NetworkInterfaceTapConfiguration> tapConfigurations = default(System.Collections.Generic.IList<NetworkInterfaceTapConfiguration>), NetworkInterfaceDnsSettings dnsSettings = default(NetworkInterfaceDnsSettings), string macAddress = default(string), bool? primary = default(bool?), bool? enableAcceleratedNetworking = default(bool?), bool? enableIPForwarding = default(bool?), System.Collections.Generic.IList<string> hostedWorkloads = default(System.Collections.Generic.IList<string>), SubResource dscpConfiguration = default(SubResource), string resourceGuid = default(string), string provisioningState = default(string))

        {
            this.VirtualMachine = virtualMachine;
            this.NetworkSecurityGroup = networkSecurityGroup;
            this.PrivateEndpoint = privateEndpoint;
            this.IPConfigurations = ipConfigurations;
            this.TapConfigurations = tapConfigurations;
            this.DnsSettings = dnsSettings;
            this.MacAddress = macAddress;
            this.Primary = primary;
            this.EnableAcceleratedNetworking = enableAcceleratedNetworking;
            this.EnableIPForwarding = enableIPForwarding;
            this.HostedWorkloads = hostedWorkloads;
            this.DscpConfiguration = dscpConfiguration;
            this.ResourceGuid = resourceGuid;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the reference to a virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "virtualMachine")]
        public SubResource VirtualMachine {get; private set; }

        /// <summary>
        /// Gets or sets the reference to the NetworkSecurityGroup resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkSecurityGroup")]
        public NetworkSecurityGroup NetworkSecurityGroup {get; set; }

        /// <summary>
        /// Gets a reference to the private endpoint to which the network interface is
        /// linked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateEndpoint")]
        public PrivateEndpoint PrivateEndpoint {get; private set; }

        /// <summary>
        /// Gets or sets a list of IPConfigurations of the network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipConfigurations")]
        public System.Collections.Generic.IList<NetworkInterfaceIPConfiguration> IPConfigurations {get; set; }

        /// <summary>
        /// Gets a list of TapConfigurations of the network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tapConfigurations")]
        public System.Collections.Generic.IList<NetworkInterfaceTapConfiguration> TapConfigurations {get; private set; }

        /// <summary>
        /// Gets or sets the DNS settings in network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dnsSettings")]
        public NetworkInterfaceDnsSettings DnsSettings {get; set; }

        /// <summary>
        /// Gets the MAC address of the network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "macAddress")]
        public string MacAddress {get; private set; }

        /// <summary>
        /// Gets whether this is a primary network interface on a virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primary")]
        public bool? Primary {get; private set; }

        /// <summary>
        /// Gets or sets if the network interface is accelerated networking enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableAcceleratedNetworking")]
        public bool? EnableAcceleratedNetworking {get; set; }

        /// <summary>
        /// Gets or sets indicates whether IP forwarding is enabled on this network
        /// interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableIPForwarding")]
        public bool? EnableIPForwarding {get; set; }

        /// <summary>
        /// Gets a list of references to linked BareMetal resources.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostedWorkloads")]
        public System.Collections.Generic.IList<string> HostedWorkloads {get; private set; }

        /// <summary>
        /// Gets a reference to the dscp configuration to which the network interface
        /// is linked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dscpConfiguration")]
        public SubResource DscpConfiguration {get; private set; }

        /// <summary>
        /// Gets the resource GUID property of the network interface resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceGuid")]
        public string ResourceGuid {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the network interface resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }
    }
}