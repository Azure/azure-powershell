// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for AppServicePlansOperations
    /// </summary>
    public static partial class AppServicePlansOperationsExtensions
    {
        /// <summary>
        /// Description for Get all App Service plans for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='detailed'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to return all App Service plan properties. The
        /// default is &lt;code&gt;false&lt;/code&gt;, which returns a subset of the properties.
        /// Retrieval of all properties may increase the API latency.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AppServicePlan> List(this IAppServicePlansOperations operations, bool? detailed = default(bool?))
        {
                return ((IAppServicePlansOperations)operations).ListAsync(detailed).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all App Service plans for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='detailed'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to return all App Service plan properties. The
        /// default is &lt;code&gt;false&lt;/code&gt;, which returns a subset of the properties.
        /// Retrieval of all properties may increase the API latency.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AppServicePlan>> ListAsync(this IAppServicePlansOperations operations, bool? detailed = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(detailed, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all App Service plans in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AppServicePlan> ListByResourceGroup(this IAppServicePlansOperations operations, string resourceGroupName)
        {
                return ((IAppServicePlansOperations)operations).ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all App Service plans in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AppServicePlan>> ListByResourceGroupAsync(this IAppServicePlansOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        public static AppServicePlan Get(this IAppServicePlansOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServicePlansOperations)operations).GetAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AppServicePlan> GetAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates or updates an App Service Plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        public static AppServicePlan CreateOrUpdate(this IAppServicePlansOperations operations, string resourceGroupName, string name, AppServicePlan appServicePlan)
        {
                return ((IAppServicePlansOperations)operations).CreateOrUpdateAsync(resourceGroupName, name, appServicePlan).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates or updates an App Service Plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AppServicePlan> CreateOrUpdateAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, AppServicePlan appServicePlan, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, appServicePlan, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        public static void Delete(this IAppServicePlansOperations operations, string resourceGroupName, string name)
        {
                ((IAppServicePlansOperations)operations).DeleteAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates or updates an App Service Plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        public static AppServicePlan Update(this IAppServicePlansOperations operations, string resourceGroupName, string name, AppServicePlanPatchResource appServicePlan)
        {
                return ((IAppServicePlansOperations)operations).UpdateAsync(resourceGroupName, name, appServicePlan).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates or updates an App Service Plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AppServicePlan> UpdateAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, AppServicePlanPatchResource appServicePlan, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, name, appServicePlan, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List all capabilities of an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        public static System.Collections.Generic.IList<Capability> ListCapabilities(this IAppServicePlansOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServicePlansOperations)operations).ListCapabilitiesAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List all capabilities of an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<Capability>> ListCapabilitiesAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListCapabilitiesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Retrieve a Hybrid Connection in use in an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='namespaceName'>
        /// Name of the Service Bus namespace.
        /// </param>
        /// <param name='relayName'>
        /// Name of the Service Bus relay.
        /// </param>
        public static HybridConnection GetHybridConnection(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
        {
                return ((IAppServicePlansOperations)operations).GetHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Retrieve a Hybrid Connection in use in an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='namespaceName'>
        /// Name of the Service Bus namespace.
        /// </param>
        /// <param name='relayName'>
        /// Name of the Service Bus relay.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HybridConnection> GetHybridConnectionAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete a Hybrid Connection in use in an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='namespaceName'>
        /// Name of the Service Bus namespace.
        /// </param>
        /// <param name='relayName'>
        /// Name of the Service Bus relay.
        /// </param>
        public static void DeleteHybridConnection(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
        {
                ((IAppServicePlansOperations)operations).DeleteHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete a Hybrid Connection in use in an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='namespaceName'>
        /// Name of the Service Bus namespace.
        /// </param>
        /// <param name='relayName'>
        /// Name of the Service Bus relay.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteHybridConnectionAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Get the send key name and value of a Hybrid Connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='namespaceName'>
        /// The name of the Service Bus namespace.
        /// </param>
        /// <param name='relayName'>
        /// The name of the Service Bus relay.
        /// </param>
        public static HybridConnectionKey ListHybridConnectionKeys(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
        {
                return ((IAppServicePlansOperations)operations).ListHybridConnectionKeysAsync(resourceGroupName, name, namespaceName, relayName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the send key name and value of a Hybrid Connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='namespaceName'>
        /// The name of the Service Bus namespace.
        /// </param>
        /// <param name='relayName'>
        /// The name of the Service Bus relay.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HybridConnectionKey> ListHybridConnectionKeysAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListHybridConnectionKeysWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all apps that use a Hybrid Connection in an App Service
        /// Plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='namespaceName'>
        /// Name of the Hybrid Connection namespace.
        /// </param>
        /// <param name='relayName'>
        /// Name of the Hybrid Connection relay.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<string> ListWebAppsByHybridConnection(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
        {
                return ((IAppServicePlansOperations)operations).ListWebAppsByHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all apps that use a Hybrid Connection in an App Service
        /// Plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='namespaceName'>
        /// Name of the Hybrid Connection namespace.
        /// </param>
        /// <param name='relayName'>
        /// Name of the Hybrid Connection relay.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<string>> ListWebAppsByHybridConnectionAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWebAppsByHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the maximum number of Hybrid Connections allowed in an
        /// App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        public static HybridConnectionLimits GetHybridConnectionPlanLimit(this IAppServicePlansOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServicePlansOperations)operations).GetHybridConnectionPlanLimitAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the maximum number of Hybrid Connections allowed in an
        /// App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HybridConnectionLimits> GetHybridConnectionPlanLimitAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetHybridConnectionPlanLimitWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Retrieve all Hybrid Connections in use in an App Service
        /// plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<HybridConnection> ListHybridConnections(this IAppServicePlansOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServicePlansOperations)operations).ListHybridConnectionsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Retrieve all Hybrid Connections in use in an App Service
        /// plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<HybridConnection>> ListHybridConnectionsAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListHybridConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Restart all apps in an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='softRestart'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to perform a soft restart, applies the
        /// configuration settings and restarts the apps if necessary. The default is
        /// &lt;code&gt;false&lt;/code&gt;, which always restarts and reprovisions the apps
        /// </param>
        public static void RestartWebApps(this IAppServicePlansOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?))
        {
                ((IAppServicePlansOperations)operations).RestartWebAppsAsync(resourceGroupName, name, softRestart).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restart all apps in an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='softRestart'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to perform a soft restart, applies the
        /// configuration settings and restarts the apps if necessary. The default is
        /// &lt;code&gt;false&lt;/code&gt;, which always restarts and reprovisions the apps
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RestartWebAppsAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RestartWebAppsWithHttpMessagesAsync(resourceGroupName, name, softRestart, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Get all apps associated with an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='skipToken'>
        /// Skip to a web app in the list of webapps associated with app service plan.
        /// If specified, the resulting list will contain web apps starting from
        /// (including) the skipToken. Otherwise, the resulting list contains web apps
        /// from the start of the list
        /// </param>
        /// <param name='filter'>
        /// Supported filter: $filter=state eq running. Returns only web apps that are
        /// currently running
        /// </param>
        /// <param name='top'>
        /// List page size. If specified, results are paged.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> ListWebApps(this IAppServicePlansOperations operations, string resourceGroupName, string name, string skipToken = default(string), string filter = default(string), string top = default(string))
        {
                return ((IAppServicePlansOperations)operations).ListWebAppsAsync(resourceGroupName, name, skipToken, filter, top).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all apps associated with an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='skipToken'>
        /// Skip to a web app in the list of webapps associated with app service plan.
        /// If specified, the resulting list will contain web apps starting from
        /// (including) the skipToken. Otherwise, the resulting list contains web apps
        /// from the start of the list
        /// </param>
        /// <param name='filter'>
        /// Supported filter: $filter=state eq running. Returns only web apps that are
        /// currently running
        /// </param>
        /// <param name='top'>
        /// List page size. If specified, results are paged.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> ListWebAppsAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string skipToken = default(string), string filter = default(string), string top = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWebAppsWithHttpMessagesAsync(resourceGroupName, name, skipToken, filter, top, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets all selectable SKUs for a given App Service Plan
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        public static object GetServerFarmSkus(this IAppServicePlansOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServicePlansOperations)operations).GetServerFarmSkusAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets all selectable SKUs for a given App Service Plan
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> GetServerFarmSkusAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetServerFarmSkusWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets server farm usage information
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='filter'>
        /// Return only usages/metrics specified in the filter. Filter conforms to
        /// odata syntax. Example: $filter=(name.value eq &#39;Metric1&#39; or name.value eq
        /// &#39;Metric2&#39;).
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CsmUsageQuota> ListUsages(this IAppServicePlansOperations operations, string resourceGroupName, string name, string filter = default(string))
        {
                return ((IAppServicePlansOperations)operations).ListUsagesAsync(resourceGroupName, name, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets server farm usage information
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of App Service Plan
        /// </param>
        /// <param name='filter'>
        /// Return only usages/metrics specified in the filter. Filter conforms to
        /// odata syntax. Example: $filter=(name.value eq &#39;Metric1&#39; or name.value eq
        /// &#39;Metric2&#39;).
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CsmUsageQuota>> ListUsagesAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListUsagesWithHttpMessagesAsync(resourceGroupName, name, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all Virtual Networks associated with an App Service
        /// plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        public static System.Collections.Generic.IList<VnetInfo> ListVnets(this IAppServicePlansOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServicePlansOperations)operations).ListVnetsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all Virtual Networks associated with an App Service
        /// plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<VnetInfo>> ListVnetsAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListVnetsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get a Virtual Network associated with an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        public static VnetInfo GetVnetFromServerFarm(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName)
        {
                return ((IAppServicePlansOperations)operations).GetVnetFromServerFarmAsync(resourceGroupName, name, vnetName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get a Virtual Network associated with an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VnetInfo> GetVnetFromServerFarmAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetVnetFromServerFarmWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get a Virtual Network gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='gatewayName'>
        /// Name of the gateway. Only the &#39;primary&#39; gateway is supported.
        /// </param>
        public static VnetGateway GetVnetGateway(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName)
        {
                return ((IAppServicePlansOperations)operations).GetVnetGatewayAsync(resourceGroupName, name, vnetName, gatewayName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get a Virtual Network gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='gatewayName'>
        /// Name of the gateway. Only the &#39;primary&#39; gateway is supported.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VnetGateway> GetVnetGatewayAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetVnetGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Update a Virtual Network gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='gatewayName'>
        /// Name of the gateway. Only the &#39;primary&#39; gateway is supported.
        /// </param>
        public static VnetGateway UpdateVnetGateway(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope)
        {
                return ((IAppServicePlansOperations)operations).UpdateVnetGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Update a Virtual Network gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='gatewayName'>
        /// Name of the gateway. Only the &#39;primary&#39; gateway is supported.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VnetGateway> UpdateVnetGatewayAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateVnetGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all routes that are associated with a Virtual Network
        /// in an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        public static System.Collections.Generic.IList<VnetRoute> ListRoutesForVnet(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName)
        {
                return ((IAppServicePlansOperations)operations).ListRoutesForVnetAsync(resourceGroupName, name, vnetName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all routes that are associated with a Virtual Network
        /// in an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<VnetRoute>> ListRoutesForVnetAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListRoutesForVnetWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get a Virtual Network route in an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='routeName'>
        /// Name of the Virtual Network route.
        /// </param>
        public static System.Collections.Generic.IList<VnetRoute> GetRouteForVnet(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName)
        {
                return ((IAppServicePlansOperations)operations).GetRouteForVnetAsync(resourceGroupName, name, vnetName, routeName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get a Virtual Network route in an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='routeName'>
        /// Name of the Virtual Network route.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<VnetRoute>> GetRouteForVnetAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetRouteForVnetWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Create or update a Virtual Network route in an App Service
        /// plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='routeName'>
        /// Name of the Virtual Network route.
        /// </param>
        public static VnetRoute CreateOrUpdateVnetRoute(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route)
        {
                return ((IAppServicePlansOperations)operations).CreateOrUpdateVnetRouteAsync(resourceGroupName, name, vnetName, routeName, route).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Create or update a Virtual Network route in an App Service
        /// plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='routeName'>
        /// Name of the Virtual Network route.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VnetRoute> CreateOrUpdateVnetRouteAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateVnetRouteWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, route, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete a Virtual Network route in an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='routeName'>
        /// Name of the Virtual Network route.
        /// </param>
        public static void DeleteVnetRoute(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName)
        {
                ((IAppServicePlansOperations)operations).DeleteVnetRouteAsync(resourceGroupName, name, vnetName, routeName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete a Virtual Network route in an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='routeName'>
        /// Name of the Virtual Network route.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteVnetRouteAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteVnetRouteWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Create or update a Virtual Network route in an App Service
        /// plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='routeName'>
        /// Name of the Virtual Network route.
        /// </param>
        public static VnetRoute UpdateVnetRoute(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route)
        {
                return ((IAppServicePlansOperations)operations).UpdateVnetRouteAsync(resourceGroupName, name, vnetName, routeName, route).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Create or update a Virtual Network route in an App Service
        /// plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='routeName'>
        /// Name of the Virtual Network route.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VnetRoute> UpdateVnetRouteAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateVnetRouteWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, route, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Reboot a worker machine in an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='workerName'>
        /// Name of worker machine, which typically starts with RD.
        /// </param>
        public static void RebootWorker(this IAppServicePlansOperations operations, string resourceGroupName, string name, string workerName)
        {
                ((IAppServicePlansOperations)operations).RebootWorkerAsync(resourceGroupName, name, workerName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Reboot a worker machine in an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='workerName'>
        /// Name of worker machine, which typically starts with RD.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RebootWorkerAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string workerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RebootWorkerWithHttpMessagesAsync(resourceGroupName, name, workerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates or updates an App Service Plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        public static AppServicePlan BeginCreateOrUpdate(this IAppServicePlansOperations operations, string resourceGroupName, string name, AppServicePlan appServicePlan)
        {
                return ((IAppServicePlansOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, name, appServicePlan).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates or updates an App Service Plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service plan.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AppServicePlan> BeginCreateOrUpdateAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, AppServicePlan appServicePlan, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, appServicePlan, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all App Service plans for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AppServicePlan> ListNext(this IAppServicePlansOperations operations, string nextPageLink)
        {
                return ((IAppServicePlansOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all App Service plans for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AppServicePlan>> ListNextAsync(this IAppServicePlansOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all App Service plans in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AppServicePlan> ListByResourceGroupNext(this IAppServicePlansOperations operations, string nextPageLink)
        {
                return ((IAppServicePlansOperations)operations).ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all App Service plans in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AppServicePlan>> ListByResourceGroupNextAsync(this IAppServicePlansOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all apps that use a Hybrid Connection in an App Service
        /// Plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<string> ListWebAppsByHybridConnectionNext(this IAppServicePlansOperations operations, string nextPageLink)
        {
                return ((IAppServicePlansOperations)operations).ListWebAppsByHybridConnectionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all apps that use a Hybrid Connection in an App Service
        /// Plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<string>> ListWebAppsByHybridConnectionNextAsync(this IAppServicePlansOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWebAppsByHybridConnectionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Retrieve all Hybrid Connections in use in an App Service
        /// plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<HybridConnection> ListHybridConnectionsNext(this IAppServicePlansOperations operations, string nextPageLink)
        {
                return ((IAppServicePlansOperations)operations).ListHybridConnectionsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Retrieve all Hybrid Connections in use in an App Service
        /// plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<HybridConnection>> ListHybridConnectionsNextAsync(this IAppServicePlansOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListHybridConnectionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all apps associated with an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> ListWebAppsNext(this IAppServicePlansOperations operations, string nextPageLink)
        {
                return ((IAppServicePlansOperations)operations).ListWebAppsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all apps associated with an App Service plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> ListWebAppsNextAsync(this IAppServicePlansOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWebAppsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets server farm usage information
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CsmUsageQuota> ListUsagesNext(this IAppServicePlansOperations operations, string nextPageLink)
        {
                return ((IAppServicePlansOperations)operations).ListUsagesNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets server farm usage information
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CsmUsageQuota>> ListUsagesNextAsync(this IAppServicePlansOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListUsagesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
