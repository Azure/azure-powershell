// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for AppServiceEnvironmentsOperations
    /// </summary>
    public static partial class AppServiceEnvironmentsOperationsExtensions
    {
        /// <summary>
        /// Description for Get all App Service Environments for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AppServiceEnvironmentResource> List(this IAppServiceEnvironmentsOperations operations)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all App Service Environments for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AppServiceEnvironmentResource>> ListAsync(this IAppServiceEnvironmentsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all App Service Environments in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AppServiceEnvironmentResource> ListByResourceGroup(this IAppServiceEnvironmentsOperations operations, string resourceGroupName)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all App Service Environments in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AppServiceEnvironmentResource>> ListByResourceGroupAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the properties of an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static AppServiceEnvironmentResource Get(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).GetAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the properties of an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AppServiceEnvironmentResource> GetAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Create or update an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static AppServiceEnvironmentResource CreateOrUpdate(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, AppServiceEnvironmentResource hostingEnvironmentEnvelope)
        {
                return ((IAppServiceEnvironmentsOperations)operations).CreateOrUpdateAsync(resourceGroupName, name, hostingEnvironmentEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Create or update an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AppServiceEnvironmentResource> CreateOrUpdateAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, AppServiceEnvironmentResource hostingEnvironmentEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, hostingEnvironmentEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='forceDelete'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to force the deletion even if the App Service
        /// Environment contains resources. The default is &lt;code&gt;false&lt;/code&gt;.
        /// </param>
        public static void Delete(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?))
        {
                ((IAppServiceEnvironmentsOperations)operations).DeleteAsync(resourceGroupName, name, forceDelete).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='forceDelete'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to force the deletion even if the App Service
        /// Environment contains resources. The default is &lt;code&gt;false&lt;/code&gt;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, name, forceDelete, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Create or update an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static AppServiceEnvironmentResource Update(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, AppServiceEnvironmentPatchResource hostingEnvironmentEnvelope)
        {
                return ((IAppServiceEnvironmentsOperations)operations).UpdateAsync(resourceGroupName, name, hostingEnvironmentEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Create or update an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AppServiceEnvironmentResource> UpdateAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, AppServiceEnvironmentPatchResource hostingEnvironmentEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, name, hostingEnvironmentEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the used, available, and total worker capacity an App
        /// Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StampCapacity> ListCapacities(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListCapacitiesAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the used, available, and total worker capacity an App
        /// Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StampCapacity>> ListCapacitiesAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListCapacitiesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get IP addresses assigned to an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static AddressResponse GetVipInfo(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).GetVipInfoAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get IP addresses assigned to an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AddressResponse> GetVipInfoAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetVipInfoWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Move an App Service Environment to a different VNET.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> ChangeVnet(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, VirtualNetworkProfile vnetInfo)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ChangeVnetAsync(resourceGroupName, name, vnetInfo).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Move an App Service Environment to a different VNET.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> ChangeVnetAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, VirtualNetworkProfile vnetInfo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ChangeVnetWithHttpMessagesAsync(resourceGroupName, name, vnetInfo, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get networking configuration of an App Service Environment
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static AseV3NetworkingConfiguration GetAseV3NetworkingConfiguration(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).GetAseV3NetworkingConfigurationAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get networking configuration of an App Service Environment
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AseV3NetworkingConfiguration> GetAseV3NetworkingConfigurationAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAseV3NetworkingConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Update networking configuration of an App Service
        /// Environment
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static AseV3NetworkingConfiguration UpdateAseNetworkingConfiguration(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, AseV3NetworkingConfiguration aseNetworkingConfiguration)
        {
                return ((IAppServiceEnvironmentsOperations)operations).UpdateAseNetworkingConfigurationAsync(resourceGroupName, name, aseNetworkingConfiguration).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Update networking configuration of an App Service
        /// Environment
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AseV3NetworkingConfiguration> UpdateAseNetworkingConfigurationAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, AseV3NetworkingConfiguration aseNetworkingConfiguration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateAseNetworkingConfigurationWithHttpMessagesAsync(resourceGroupName, name, aseNetworkingConfiguration, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get diagnostic information for an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static System.Collections.Generic.IList<HostingEnvironmentDiagnostics> ListDiagnostics(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListDiagnosticsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get diagnostic information for an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<HostingEnvironmentDiagnostics>> ListDiagnosticsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListDiagnosticsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get a diagnostics item for an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='diagnosticsName'>
        /// Name of the diagnostics item.
        /// </param>
        public static HostingEnvironmentDiagnostics GetDiagnosticsItem(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string diagnosticsName)
        {
                return ((IAppServiceEnvironmentsOperations)operations).GetDiagnosticsItemAsync(resourceGroupName, name, diagnosticsName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get a diagnostics item for an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='diagnosticsName'>
        /// Name of the diagnostics item.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HostingEnvironmentDiagnostics> GetDiagnosticsItemAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string diagnosticsName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetDiagnosticsItemWithHttpMessagesAsync(resourceGroupName, name, diagnosticsName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the network endpoints of all inbound dependencies of an
        /// App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<InboundEnvironmentEndpoint> GetInboundNetworkDependenciesEndpoints(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).GetInboundNetworkDependenciesEndpointsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the network endpoints of all inbound dependencies of an
        /// App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<InboundEnvironmentEndpoint>> GetInboundNetworkDependenciesEndpointsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetInboundNetworkDependenciesEndpointsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all multi-role pools.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WorkerPoolResource> ListMultiRolePools(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListMultiRolePoolsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all multi-role pools.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WorkerPoolResource>> ListMultiRolePoolsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListMultiRolePoolsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get properties of a multi-role pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static WorkerPoolResource GetMultiRolePool(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).GetMultiRolePoolAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get properties of a multi-role pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkerPoolResource> GetMultiRolePoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetMultiRolePoolWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Create or update a multi-role pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static WorkerPoolResource CreateOrUpdateMultiRolePool(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPoolResource multiRolePoolEnvelope)
        {
                return ((IAppServiceEnvironmentsOperations)operations).CreateOrUpdateMultiRolePoolAsync(resourceGroupName, name, multiRolePoolEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Create or update a multi-role pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkerPoolResource> CreateOrUpdateMultiRolePoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPoolResource multiRolePoolEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateMultiRolePoolWithHttpMessagesAsync(resourceGroupName, name, multiRolePoolEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Create or update a multi-role pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static WorkerPoolResource UpdateMultiRolePool(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPoolResource multiRolePoolEnvelope)
        {
                return ((IAppServiceEnvironmentsOperations)operations).UpdateMultiRolePoolAsync(resourceGroupName, name, multiRolePoolEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Create or update a multi-role pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkerPoolResource> UpdateMultiRolePoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPoolResource multiRolePoolEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateMultiRolePoolWithHttpMessagesAsync(resourceGroupName, name, multiRolePoolEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get metric definitions for a specific instance of a
        /// multi-role pool of an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='instance'>
        /// Name of the instance in the multi-role pool.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ResourceMetricDefinition> ListMultiRolePoolInstanceMetricDefinitions(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string instance)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListMultiRolePoolInstanceMetricDefinitionsAsync(resourceGroupName, name, instance).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get metric definitions for a specific instance of a
        /// multi-role pool of an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='instance'>
        /// Name of the instance in the multi-role pool.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ResourceMetricDefinition>> ListMultiRolePoolInstanceMetricDefinitionsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string instance, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListMultiRolePoolInstanceMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, instance, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get metric definitions for a multi-role pool of an App
        /// Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ResourceMetricDefinition> ListMultiRoleMetricDefinitions(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListMultiRoleMetricDefinitionsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get metric definitions for a multi-role pool of an App
        /// Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ResourceMetricDefinition>> ListMultiRoleMetricDefinitionsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListMultiRoleMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get available SKUs for scaling a multi-role pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SkuInfo> ListMultiRolePoolSkus(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListMultiRolePoolSkusAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get available SKUs for scaling a multi-role pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SkuInfo>> ListMultiRolePoolSkusAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListMultiRolePoolSkusWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get usage metrics for a multi-role pool of an App Service
        /// Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Usage> ListMultiRoleUsages(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListMultiRoleUsagesAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get usage metrics for a multi-role pool of an App Service
        /// Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Usage>> ListMultiRoleUsagesAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListMultiRoleUsagesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List all currently running operations on the App Service
        /// Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static System.Collections.Generic.IList<Operation> ListOperations(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListOperationsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List all currently running operations on the App Service
        /// Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<Operation>> ListOperationsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListOperationsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the network endpoints of all outbound dependencies of
        /// an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<OutboundEnvironmentEndpoint> GetOutboundNetworkDependenciesEndpoints(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).GetOutboundNetworkDependenciesEndpointsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the network endpoints of all outbound dependencies of
        /// an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<OutboundEnvironmentEndpoint>> GetOutboundNetworkDependenciesEndpointsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetOutboundNetworkDependenciesEndpointsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the list of private endpoints associated with a
        /// hosting environment
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RemotePrivateEndpointConnectionARMResource> GetPrivateEndpointConnectionList(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).GetPrivateEndpointConnectionListAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the list of private endpoints associated with a
        /// hosting environment
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RemotePrivateEndpointConnectionARMResource>> GetPrivateEndpointConnectionListAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPrivateEndpointConnectionListWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection.
        /// </param>
        public static RemotePrivateEndpointConnectionARMResource GetPrivateEndpointConnection(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName)
        {
                return ((IAppServiceEnvironmentsOperations)operations).GetPrivateEndpointConnectionAsync(resourceGroupName, name, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RemotePrivateEndpointConnectionARMResource> GetPrivateEndpointConnectionAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Approves or rejects a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        public static RemotePrivateEndpointConnectionARMResource ApproveOrRejectPrivateEndpointConnection(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ApproveOrRejectPrivateEndpointConnectionAsync(resourceGroupName, name, privateEndpointConnectionName, privateEndpointWrapper).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Approves or rejects a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RemotePrivateEndpointConnectionARMResource> ApproveOrRejectPrivateEndpointConnectionAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApproveOrRejectPrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, privateEndpointWrapper, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        public static object DeletePrivateEndpointConnection(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName)
        {
                return ((IAppServiceEnvironmentsOperations)operations).DeletePrivateEndpointConnectionAsync(resourceGroupName, name, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> DeletePrivateEndpointConnectionAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeletePrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the private link resources
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static PrivateLinkResourcesWrapper GetPrivateLinkResources(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).GetPrivateLinkResourcesAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the private link resources
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateLinkResourcesWrapper> GetPrivateLinkResourcesAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPrivateLinkResourcesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Reboot all machines in an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static void Reboot(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                ((IAppServiceEnvironmentsOperations)operations).RebootAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Reboot all machines in an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RebootAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RebootWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Resume an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> Resume(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ResumeAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Resume an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> ResumeAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ResumeWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all App Service plans in an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AppServicePlan> ListAppServicePlans(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListAppServicePlansAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all App Service plans in an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AppServicePlan>> ListAppServicePlansAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAppServicePlansWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all apps in an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='propertiesToInclude'>
        /// Comma separated list of app properties to include.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> ListWebApps(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string propertiesToInclude = default(string))
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListWebAppsAsync(resourceGroupName, name, propertiesToInclude).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all apps in an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='propertiesToInclude'>
        /// Comma separated list of app properties to include.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> ListWebAppsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string propertiesToInclude = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWebAppsWithHttpMessagesAsync(resourceGroupName, name, propertiesToInclude, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Suspend an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> Suspend(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).SuspendAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Suspend an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> SuspendAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.SuspendWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get global usage metrics of an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='filter'>
        /// Return only usages/metrics specified in the filter. Filter conforms to
        /// odata syntax. Example: $filter=(name.value eq &#39;Metric1&#39; or name.value eq
        /// &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq
        /// 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CsmUsageQuota> ListUsages(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string filter = default(string))
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListUsagesAsync(resourceGroupName, name, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get global usage metrics of an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='filter'>
        /// Return only usages/metrics specified in the filter. Filter conforms to
        /// odata syntax. Example: $filter=(name.value eq &#39;Metric1&#39; or name.value eq
        /// &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq
        /// 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CsmUsageQuota>> ListUsagesAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListUsagesWithHttpMessagesAsync(resourceGroupName, name, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all worker pools of an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WorkerPoolResource> ListWorkerPools(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListWorkerPoolsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all worker pools of an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WorkerPoolResource>> ListWorkerPoolsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWorkerPoolsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get properties of a worker pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='workerPoolName'>
        /// Name of the worker pool.
        /// </param>
        public static WorkerPoolResource GetWorkerPool(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName)
        {
                return ((IAppServiceEnvironmentsOperations)operations).GetWorkerPoolAsync(resourceGroupName, name, workerPoolName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get properties of a worker pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='workerPoolName'>
        /// Name of the worker pool.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkerPoolResource> GetWorkerPoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWorkerPoolWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Create or update a worker pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='workerPoolName'>
        /// Name of the worker pool.
        /// </param>
        public static WorkerPoolResource CreateOrUpdateWorkerPool(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPoolResource workerPoolEnvelope)
        {
                return ((IAppServiceEnvironmentsOperations)operations).CreateOrUpdateWorkerPoolAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Create or update a worker pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='workerPoolName'>
        /// Name of the worker pool.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkerPoolResource> CreateOrUpdateWorkerPoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPoolResource workerPoolEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWorkerPoolWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Create or update a worker pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='workerPoolName'>
        /// Name of the worker pool.
        /// </param>
        public static WorkerPoolResource UpdateWorkerPool(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPoolResource workerPoolEnvelope)
        {
                return ((IAppServiceEnvironmentsOperations)operations).UpdateWorkerPoolAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Create or update a worker pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='workerPoolName'>
        /// Name of the worker pool.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkerPoolResource> UpdateWorkerPoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPoolResource workerPoolEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWorkerPoolWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get metric definitions for a specific instance of a worker
        /// pool of an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='workerPoolName'>
        /// Name of the worker pool.
        /// </param>
        /// <param name='instance'>
        /// Name of the instance in the worker pool.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ResourceMetricDefinition> ListWorkerPoolInstanceMetricDefinitions(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, string instance)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListWorkerPoolInstanceMetricDefinitionsAsync(resourceGroupName, name, workerPoolName, instance).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get metric definitions for a specific instance of a worker
        /// pool of an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='workerPoolName'>
        /// Name of the worker pool.
        /// </param>
        /// <param name='instance'>
        /// Name of the instance in the worker pool.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ResourceMetricDefinition>> ListWorkerPoolInstanceMetricDefinitionsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, string instance, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWorkerPoolInstanceMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, instance, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get metric definitions for a worker pool of an App Service
        /// Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='workerPoolName'>
        /// Name of the worker pool.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ResourceMetricDefinition> ListWebWorkerMetricDefinitions(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListWebWorkerMetricDefinitionsAsync(resourceGroupName, name, workerPoolName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get metric definitions for a worker pool of an App Service
        /// Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='workerPoolName'>
        /// Name of the worker pool.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ResourceMetricDefinition>> ListWebWorkerMetricDefinitionsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWebWorkerMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get available SKUs for scaling a worker pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='workerPoolName'>
        /// Name of the worker pool.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SkuInfo> ListWorkerPoolSkus(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListWorkerPoolSkusAsync(resourceGroupName, name, workerPoolName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get available SKUs for scaling a worker pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='workerPoolName'>
        /// Name of the worker pool.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SkuInfo>> ListWorkerPoolSkusAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWorkerPoolSkusWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get usage metrics for a worker pool of an App Service
        /// Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='workerPoolName'>
        /// Name of the worker pool.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Usage> ListWebWorkerUsages(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListWebWorkerUsagesAsync(resourceGroupName, name, workerPoolName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get usage metrics for a worker pool of an App Service
        /// Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='workerPoolName'>
        /// Name of the worker pool.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Usage>> ListWebWorkerUsagesAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWebWorkerUsagesWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Create or update an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static AppServiceEnvironmentResource BeginCreateOrUpdate(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, AppServiceEnvironmentResource hostingEnvironmentEnvelope)
        {
                return ((IAppServiceEnvironmentsOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, name, hostingEnvironmentEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Create or update an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AppServiceEnvironmentResource> BeginCreateOrUpdateAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, AppServiceEnvironmentResource hostingEnvironmentEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, hostingEnvironmentEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='forceDelete'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to force the deletion even if the App Service
        /// Environment contains resources. The default is &lt;code&gt;false&lt;/code&gt;.
        /// </param>
        public static void BeginDelete(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?))
        {
                ((IAppServiceEnvironmentsOperations)operations).BeginDeleteAsync(resourceGroupName, name, forceDelete).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='forceDelete'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to force the deletion even if the App Service
        /// Environment contains resources. The default is &lt;code&gt;false&lt;/code&gt;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, name, forceDelete, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Move an App Service Environment to a different VNET.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> BeginChangeVnet(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, VirtualNetworkProfile vnetInfo)
        {
                return ((IAppServiceEnvironmentsOperations)operations).BeginChangeVnetAsync(resourceGroupName, name, vnetInfo).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Move an App Service Environment to a different VNET.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> BeginChangeVnetAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, VirtualNetworkProfile vnetInfo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginChangeVnetWithHttpMessagesAsync(resourceGroupName, name, vnetInfo, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Create or update a multi-role pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static WorkerPoolResource BeginCreateOrUpdateMultiRolePool(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPoolResource multiRolePoolEnvelope)
        {
                return ((IAppServiceEnvironmentsOperations)operations).BeginCreateOrUpdateMultiRolePoolAsync(resourceGroupName, name, multiRolePoolEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Create or update a multi-role pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkerPoolResource> BeginCreateOrUpdateMultiRolePoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPoolResource multiRolePoolEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateMultiRolePoolWithHttpMessagesAsync(resourceGroupName, name, multiRolePoolEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Approves or rejects a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        public static RemotePrivateEndpointConnectionARMResource BeginApproveOrRejectPrivateEndpointConnection(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper)
        {
                return ((IAppServiceEnvironmentsOperations)operations).BeginApproveOrRejectPrivateEndpointConnectionAsync(resourceGroupName, name, privateEndpointConnectionName, privateEndpointWrapper).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Approves or rejects a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RemotePrivateEndpointConnectionARMResource> BeginApproveOrRejectPrivateEndpointConnectionAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginApproveOrRejectPrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, privateEndpointWrapper, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        public static object BeginDeletePrivateEndpointConnection(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName)
        {
                return ((IAppServiceEnvironmentsOperations)operations).BeginDeletePrivateEndpointConnectionAsync(resourceGroupName, name, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> BeginDeletePrivateEndpointConnectionAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeletePrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Resume an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> BeginResume(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).BeginResumeAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Resume an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> BeginResumeAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginResumeWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Suspend an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> BeginSuspend(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name)
        {
                return ((IAppServiceEnvironmentsOperations)operations).BeginSuspendAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Suspend an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> BeginSuspendAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginSuspendWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Create or update a worker pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='workerPoolName'>
        /// Name of the worker pool.
        /// </param>
        public static WorkerPoolResource BeginCreateOrUpdateWorkerPool(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPoolResource workerPoolEnvelope)
        {
                return ((IAppServiceEnvironmentsOperations)operations).BeginCreateOrUpdateWorkerPoolAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Create or update a worker pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the App Service Environment.
        /// </param>
        /// <param name='workerPoolName'>
        /// Name of the worker pool.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkerPoolResource> BeginCreateOrUpdateWorkerPoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPoolResource workerPoolEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWorkerPoolWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all App Service Environments for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AppServiceEnvironmentResource> ListNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all App Service Environments for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AppServiceEnvironmentResource>> ListNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all App Service Environments in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AppServiceEnvironmentResource> ListByResourceGroupNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all App Service Environments in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AppServiceEnvironmentResource>> ListByResourceGroupNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the used, available, and total worker capacity an App
        /// Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StampCapacity> ListCapacitiesNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListCapacitiesNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the used, available, and total worker capacity an App
        /// Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StampCapacity>> ListCapacitiesNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListCapacitiesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Move an App Service Environment to a different VNET.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> ChangeVnetNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ChangeVnetNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Move an App Service Environment to a different VNET.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> ChangeVnetNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ChangeVnetNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the network endpoints of all inbound dependencies of an
        /// App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<InboundEnvironmentEndpoint> GetInboundNetworkDependenciesEndpointsNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).GetInboundNetworkDependenciesEndpointsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the network endpoints of all inbound dependencies of an
        /// App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<InboundEnvironmentEndpoint>> GetInboundNetworkDependenciesEndpointsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetInboundNetworkDependenciesEndpointsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all multi-role pools.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WorkerPoolResource> ListMultiRolePoolsNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListMultiRolePoolsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all multi-role pools.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WorkerPoolResource>> ListMultiRolePoolsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListMultiRolePoolsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get metric definitions for a specific instance of a
        /// multi-role pool of an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ResourceMetricDefinition> ListMultiRolePoolInstanceMetricDefinitionsNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListMultiRolePoolInstanceMetricDefinitionsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get metric definitions for a specific instance of a
        /// multi-role pool of an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ResourceMetricDefinition>> ListMultiRolePoolInstanceMetricDefinitionsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListMultiRolePoolInstanceMetricDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get metric definitions for a multi-role pool of an App
        /// Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ResourceMetricDefinition> ListMultiRoleMetricDefinitionsNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListMultiRoleMetricDefinitionsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get metric definitions for a multi-role pool of an App
        /// Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ResourceMetricDefinition>> ListMultiRoleMetricDefinitionsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListMultiRoleMetricDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get available SKUs for scaling a multi-role pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SkuInfo> ListMultiRolePoolSkusNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListMultiRolePoolSkusNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get available SKUs for scaling a multi-role pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SkuInfo>> ListMultiRolePoolSkusNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListMultiRolePoolSkusNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get usage metrics for a multi-role pool of an App Service
        /// Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Usage> ListMultiRoleUsagesNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListMultiRoleUsagesNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get usage metrics for a multi-role pool of an App Service
        /// Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Usage>> ListMultiRoleUsagesNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListMultiRoleUsagesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the network endpoints of all outbound dependencies of
        /// an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<OutboundEnvironmentEndpoint> GetOutboundNetworkDependenciesEndpointsNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).GetOutboundNetworkDependenciesEndpointsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the network endpoints of all outbound dependencies of
        /// an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<OutboundEnvironmentEndpoint>> GetOutboundNetworkDependenciesEndpointsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetOutboundNetworkDependenciesEndpointsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the list of private endpoints associated with a
        /// hosting environment
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RemotePrivateEndpointConnectionARMResource> GetPrivateEndpointConnectionListNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).GetPrivateEndpointConnectionListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the list of private endpoints associated with a
        /// hosting environment
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RemotePrivateEndpointConnectionARMResource>> GetPrivateEndpointConnectionListNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPrivateEndpointConnectionListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Resume an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> ResumeNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ResumeNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Resume an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> ResumeNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ResumeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all App Service plans in an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AppServicePlan> ListAppServicePlansNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListAppServicePlansNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all App Service plans in an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AppServicePlan>> ListAppServicePlansNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAppServicePlansNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all apps in an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> ListWebAppsNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListWebAppsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all apps in an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> ListWebAppsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWebAppsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Suspend an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> SuspendNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).SuspendNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Suspend an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> SuspendNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.SuspendNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get global usage metrics of an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CsmUsageQuota> ListUsagesNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListUsagesNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get global usage metrics of an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CsmUsageQuota>> ListUsagesNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListUsagesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all worker pools of an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WorkerPoolResource> ListWorkerPoolsNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListWorkerPoolsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all worker pools of an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WorkerPoolResource>> ListWorkerPoolsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWorkerPoolsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get metric definitions for a specific instance of a worker
        /// pool of an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ResourceMetricDefinition> ListWorkerPoolInstanceMetricDefinitionsNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListWorkerPoolInstanceMetricDefinitionsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get metric definitions for a specific instance of a worker
        /// pool of an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ResourceMetricDefinition>> ListWorkerPoolInstanceMetricDefinitionsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWorkerPoolInstanceMetricDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get metric definitions for a worker pool of an App Service
        /// Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ResourceMetricDefinition> ListWebWorkerMetricDefinitionsNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListWebWorkerMetricDefinitionsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get metric definitions for a worker pool of an App Service
        /// Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ResourceMetricDefinition>> ListWebWorkerMetricDefinitionsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWebWorkerMetricDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get available SKUs for scaling a worker pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SkuInfo> ListWorkerPoolSkusNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListWorkerPoolSkusNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get available SKUs for scaling a worker pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SkuInfo>> ListWorkerPoolSkusNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWorkerPoolSkusNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get usage metrics for a worker pool of an App Service
        /// Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Usage> ListWebWorkerUsagesNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).ListWebWorkerUsagesNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get usage metrics for a worker pool of an App Service
        /// Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Usage>> ListWebWorkerUsagesNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWebWorkerUsagesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Move an App Service Environment to a different VNET.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> BeginChangeVnetNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).BeginChangeVnetNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Move an App Service Environment to a different VNET.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> BeginChangeVnetNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginChangeVnetNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Resume an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> BeginResumeNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).BeginResumeNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Resume an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> BeginResumeNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginResumeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Suspend an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> BeginSuspendNext(this IAppServiceEnvironmentsOperations operations, string nextPageLink)
        {
                return ((IAppServiceEnvironmentsOperations)operations).BeginSuspendNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Suspend an App Service Environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> BeginSuspendNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginSuspendNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
