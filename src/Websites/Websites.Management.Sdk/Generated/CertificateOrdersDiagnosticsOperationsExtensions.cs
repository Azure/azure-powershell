// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for CertificateOrdersDiagnosticsOperations
    /// </summary>
    public static partial class CertificateOrdersDiagnosticsOperationsExtensions
    {
        /// <summary>
        /// Description for Microsoft.CertificateRegistration to get the list of
        /// detectors for this RP.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='certificateOrderName'>
        /// The certificate order name for which the response is needed.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DetectorResponse> ListAppServiceCertificateOrderDetectorResponse(this ICertificateOrdersDiagnosticsOperations operations, string resourceGroupName, string certificateOrderName)
        {
                return ((ICertificateOrdersDiagnosticsOperations)operations).ListAppServiceCertificateOrderDetectorResponseAsync(resourceGroupName, certificateOrderName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Microsoft.CertificateRegistration to get the list of
        /// detectors for this RP.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='certificateOrderName'>
        /// The certificate order name for which the response is needed.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DetectorResponse>> ListAppServiceCertificateOrderDetectorResponseAsync(this ICertificateOrdersDiagnosticsOperations operations, string resourceGroupName, string certificateOrderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAppServiceCertificateOrderDetectorResponseWithHttpMessagesAsync(resourceGroupName, certificateOrderName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Microsoft.CertificateRegistration call to get a detector
        /// response from App Lens.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='certificateOrderName'>
        /// The certificate order name for which the response is needed.
        /// </param>
        /// <param name='detectorName'>
        /// The detector name which needs to be run.
        /// </param>
        /// <param name='startTime'>
        /// The start time for detector response.
        /// </param>
        /// <param name='endTime'>
        /// The end time for the detector response.
        /// </param>
        /// <param name='timeGrain'>
        /// The time grain for the detector response.
        /// </param>
        public static DetectorResponse GetAppServiceCertificateOrderDetectorResponse(this ICertificateOrdersDiagnosticsOperations operations, string resourceGroupName, string certificateOrderName, string detectorName, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string))
        {
                return ((ICertificateOrdersDiagnosticsOperations)operations).GetAppServiceCertificateOrderDetectorResponseAsync(resourceGroupName, certificateOrderName, detectorName, startTime, endTime, timeGrain).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Microsoft.CertificateRegistration call to get a detector
        /// response from App Lens.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='certificateOrderName'>
        /// The certificate order name for which the response is needed.
        /// </param>
        /// <param name='detectorName'>
        /// The detector name which needs to be run.
        /// </param>
        /// <param name='startTime'>
        /// The start time for detector response.
        /// </param>
        /// <param name='endTime'>
        /// The end time for the detector response.
        /// </param>
        /// <param name='timeGrain'>
        /// The time grain for the detector response.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DetectorResponse> GetAppServiceCertificateOrderDetectorResponseAsync(this ICertificateOrdersDiagnosticsOperations operations, string resourceGroupName, string certificateOrderName, string detectorName, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAppServiceCertificateOrderDetectorResponseWithHttpMessagesAsync(resourceGroupName, certificateOrderName, detectorName, startTime, endTime, timeGrain, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Microsoft.CertificateRegistration to get the list of
        /// detectors for this RP.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DetectorResponse> ListAppServiceCertificateOrderDetectorResponseNext(this ICertificateOrdersDiagnosticsOperations operations, string nextPageLink)
        {
                return ((ICertificateOrdersDiagnosticsOperations)operations).ListAppServiceCertificateOrderDetectorResponseNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Microsoft.CertificateRegistration to get the list of
        /// detectors for this RP.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DetectorResponse>> ListAppServiceCertificateOrderDetectorResponseNextAsync(this ICertificateOrdersDiagnosticsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAppServiceCertificateOrderDetectorResponseNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
