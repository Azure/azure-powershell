// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for GlobalModelOperations
    /// </summary>
    public static partial class GlobalModelOperationsExtensions
    {
        /// <summary>
        /// Description for Get deleted app for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deletedSiteId'>
        /// The numeric ID of the deleted app, e.g. 12345
        /// </param>
        public static DeletedSite GetDeletedWebApp(this IGlobalModelOperations operations, string deletedSiteId)
        {
                return ((IGlobalModelOperations)operations).GetDeletedWebAppAsync(deletedSiteId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get deleted app for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deletedSiteId'>
        /// The numeric ID of the deleted app, e.g. 12345
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeletedSite> GetDeletedWebAppAsync(this IGlobalModelOperations operations, string deletedSiteId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetDeletedWebAppWithHttpMessagesAsync(deletedSiteId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all deleted apps for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deletedSiteId'>
        /// The numeric ID of the deleted app, e.g. 12345
        /// </param>
        public static System.Collections.Generic.IList<Snapshot> GetDeletedWebAppSnapshots(this IGlobalModelOperations operations, string deletedSiteId)
        {
                return ((IGlobalModelOperations)operations).GetDeletedWebAppSnapshotsAsync(deletedSiteId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all deleted apps for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deletedSiteId'>
        /// The numeric ID of the deleted app, e.g. 12345
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<Snapshot>> GetDeletedWebAppSnapshotsAsync(this IGlobalModelOperations operations, string deletedSiteId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetDeletedWebAppSnapshotsWithHttpMessagesAsync(deletedSiteId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets an operation in a subscription and given region
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// Location name
        /// </param>
        /// <param name='operationId'>
        /// Operation Id
        /// </param>
        public static void GetSubscriptionOperationWithAsyncResponse(this IGlobalModelOperations operations, string location, string operationId)
        {
                ((IGlobalModelOperations)operations).GetSubscriptionOperationWithAsyncResponseAsync(location, operationId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets an operation in a subscription and given region
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// Location name
        /// </param>
        /// <param name='operationId'>
        /// Operation Id
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task GetSubscriptionOperationWithAsyncResponseAsync(this IGlobalModelOperations operations, string location, string operationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.GetSubscriptionOperationWithAsyncResponseWithHttpMessagesAsync(location, operationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
    }
}
