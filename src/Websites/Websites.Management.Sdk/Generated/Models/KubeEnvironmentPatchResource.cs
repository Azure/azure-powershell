// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// ARM resource for a KubeEnvironment when patching
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class KubeEnvironmentPatchResource : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the KubeEnvironmentPatchResource class.
        /// </summary>
        public KubeEnvironmentPatchResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the KubeEnvironmentPatchResource class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="arcConfiguration">Cluster configuration which determines the ARC cluster
        /// components types. Eg: Choosing between BuildService kind,
        /// FrontEnd Service ArtifactsStorageType etc.
        /// </param>

        /// <param name="provisioningState">Provisioning state of the Kubernetes Environment.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;Waiting&#39;,
        /// &#39;InitializationInProgress&#39;, &#39;InfrastructureSetupInProgress&#39;,
        /// &#39;InfrastructureSetupComplete&#39;, &#39;ScheduledForDelete&#39;, &#39;UpgradeRequested&#39;,
        /// &#39;UpgradeFailed&#39;</param>

        /// <param name="deploymentErrors">Any errors that occurred during deployment or deployment validation
        /// </param>

        /// <param name="internalLoadBalancerEnabled">Only visible within Vnet/Subnet
        /// </param>

        /// <param name="defaultDomain">Default Domain Name for the cluster
        /// </param>

        /// <param name="staticIP">Static IP of the KubeEnvironment
        /// </param>

        /// <param name="appLogsConfiguration">Cluster configuration which enables the log daemon to export
        /// app logs to a destination. Currently only &#34;log-analytics&#34; is
        /// supported
        /// </param>

        /// <param name="aksResourceId">
        /// </param>
        public KubeEnvironmentPatchResource(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), ArcConfiguration arcConfiguration = default(ArcConfiguration), KubeEnvironmentProvisioningState? provisioningState = default(KubeEnvironmentProvisioningState?), string deploymentErrors = default(string), bool? internalLoadBalancerEnabled = default(bool?), string defaultDomain = default(string), string staticIP = default(string), AppLogsConfiguration appLogsConfiguration = default(AppLogsConfiguration), string aksResourceId = default(string))

        : base(id, name, kind, type)
        {
            this.ArcConfiguration = arcConfiguration;
            this.ProvisioningState = provisioningState;
            this.DeploymentErrors = deploymentErrors;
            this.InternalLoadBalancerEnabled = internalLoadBalancerEnabled;
            this.DefaultDomain = defaultDomain;
            this.StaticIP = staticIP;
            this.AppLogsConfiguration = appLogsConfiguration;
            this.AksResourceId = aksResourceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets cluster configuration which determines the ARC cluster
        /// components types. Eg: Choosing between BuildService kind,
        /// FrontEnd Service ArtifactsStorageType etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.arcConfiguration")]
        public ArcConfiguration ArcConfiguration {get; set; }

        /// <summary>
        /// Gets provisioning state of the Kubernetes Environment. Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;Waiting&#39;, &#39;InitializationInProgress&#39;, &#39;InfrastructureSetupInProgress&#39;, &#39;InfrastructureSetupComplete&#39;, &#39;ScheduledForDelete&#39;, &#39;UpgradeRequested&#39;, &#39;UpgradeFailed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public KubeEnvironmentProvisioningState? ProvisioningState {get; private set; }

        /// <summary>
        /// Gets any errors that occurred during deployment or deployment validation
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.deploymentErrors")]
        public string DeploymentErrors {get; private set; }

        /// <summary>
        /// Gets or sets only visible within Vnet/Subnet
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.internalLoadBalancerEnabled")]
        public bool? InternalLoadBalancerEnabled {get; set; }

        /// <summary>
        /// Gets default Domain Name for the cluster
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.defaultDomain")]
        public string DefaultDomain {get; private set; }

        /// <summary>
        /// Gets or sets static IP of the KubeEnvironment
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.staticIp")]
        public string StaticIP {get; set; }

        /// <summary>
        /// Gets or sets cluster configuration which enables the log daemon to export
        /// app logs to a destination. Currently only &#34;log-analytics&#34; is
        /// supported
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.appLogsConfiguration")]
        public AppLogsConfiguration AppLogsConfiguration {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.aksResourceID")]
        public string AksResourceId {get; set; }
    }
}