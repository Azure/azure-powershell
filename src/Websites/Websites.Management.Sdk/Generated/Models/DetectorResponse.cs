// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Class representing Response from Detector
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class DetectorResponse : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the DetectorResponse class.
        /// </summary>
        public DetectorResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DetectorResponse class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="status">Indicates status of the most severe insight.
        /// </param>

        /// <param name="metadata">metadata for the detector
        /// </param>

        /// <param name="dataset">Data Set
        /// </param>

        /// <param name="dataProvidersMetadata">Additional configuration for different data providers to be used by the UI
        /// </param>

        /// <param name="suggestedUtterances">Suggested utterances where the detector can be applicable.
        /// </param>
        public DetectorResponse(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), Status status = default(Status), DetectorInfo metadata = default(DetectorInfo), System.Collections.Generic.IList<DiagnosticData> dataset = default(System.Collections.Generic.IList<DiagnosticData>), System.Collections.Generic.IList<DataProviderMetadata> dataProvidersMetadata = default(System.Collections.Generic.IList<DataProviderMetadata>), QueryUtterancesResults suggestedUtterances = default(QueryUtterancesResults))

        : base(id, name, kind, type)
        {
            this.Status = status;
            this.Metadata = metadata;
            this.Dataset = dataset;
            this.DataProvidersMetadata = dataProvidersMetadata;
            this.SuggestedUtterances = suggestedUtterances;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets indicates status of the most severe insight.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public Status Status {get; set; }

        /// <summary>
        /// Gets or sets metadata for the detector
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.metadata")]
        public DetectorInfo Metadata {get; set; }

        /// <summary>
        /// Gets or sets data Set
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dataset")]
        public System.Collections.Generic.IList<DiagnosticData> Dataset {get; set; }

        /// <summary>
        /// Gets or sets additional configuration for different data providers to be
        /// used by the UI
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dataProvidersMetadata")]
        public System.Collections.Generic.IList<DataProviderMetadata> DataProvidersMetadata {get; set; }

        /// <summary>
        /// Gets or sets suggested utterances where the detector can be applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.suggestedUtterances")]
        public QueryUtterancesResults SuggestedUtterances {get; set; }
    }
}