// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// ARM resource for a app service plan.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class AppServicePlanPatchResource : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the AppServicePlanPatchResource class.
        /// </summary>
        public AppServicePlanPatchResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AppServicePlanPatchResource class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="provisioningState">Provisioning state of the App Service Plan.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;InProgress&#39;,
        /// &#39;Deleting&#39;</param>

        /// <param name="workerTierName">Target worker tier assigned to the App Service plan.
        /// </param>

        /// <param name="status">App Service plan status.
        /// Possible values include: &#39;Ready&#39;, &#39;Pending&#39;, &#39;Creating&#39;</param>

        /// <param name="subscription">App Service plan subscription.
        /// </param>

        /// <param name="hostingEnvironmentProfile">Specification for the App Service Environment to use for the App Service
        /// plan.
        /// </param>

        /// <param name="maximumNumberOfWorkers">Maximum number of instances that can be assigned to this App Service plan.
        /// </param>

        /// <param name="geoRegion">Geographical location for the App Service plan.
        /// </param>

        /// <param name="perSiteScaling">If &lt;code&gt;true&lt;/code&gt;, apps assigned to this App Service plan can be scaled
        /// independently.
        /// If &lt;code&gt;false&lt;/code&gt;, apps assigned to this App Service plan will scale to
        /// all instances of the plan.
        /// </param>

        /// <param name="elasticScaleEnabled">ServerFarm supports ElasticScale. Apps in this plan will scale as if the
        /// ServerFarm was ElasticPremium sku
        /// </param>

        /// <param name="maximumElasticWorkerCount">Maximum number of total workers allowed for this ElasticScaleEnabled App
        /// Service Plan
        /// </param>

        /// <param name="numberOfSites">Number of apps assigned to this App Service plan.
        /// </param>

        /// <param name="isSpot">If &lt;code&gt;true&lt;/code&gt;, this App Service Plan owns spot instances.
        /// </param>

        /// <param name="spotExpirationTime">The time when the server farm expires. Valid only if it is a spot server
        /// farm.
        /// </param>

        /// <param name="freeOfferExpirationTime">The time when the server farm free offer expires.
        /// </param>

        /// <param name="resourceGroup">Resource group of the App Service plan.
        /// </param>

        /// <param name="reserved">If Linux app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.
        /// </param>

        /// <param name="isXenon">Obsolete: If Hyper-V container app service plan &lt;code&gt;true&lt;/code&gt;,
        /// &lt;code&gt;false&lt;/code&gt; otherwise.
        /// </param>

        /// <param name="hyperV">If Hyper-V container app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;
        /// otherwise.
        /// </param>

        /// <param name="targetWorkerCount">Scaling worker count.
        /// </param>

        /// <param name="targetWorkerSizeId">Scaling worker size ID.
        /// </param>

        /// <param name="kubeEnvironmentProfile">Specification for the Kubernetes Environment to use for the App Service
        /// plan.
        /// </param>
        public AppServicePlanPatchResource(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), ProvisioningState? provisioningState = default(ProvisioningState?), string workerTierName = default(string), StatusOptions? status = default(StatusOptions?), string subscription = default(string), HostingEnvironmentProfile hostingEnvironmentProfile = default(HostingEnvironmentProfile), int? maximumNumberOfWorkers = default(int?), string geoRegion = default(string), bool? perSiteScaling = default(bool?), bool? elasticScaleEnabled = default(bool?), int? maximumElasticWorkerCount = default(int?), int? numberOfSites = default(int?), bool? isSpot = default(bool?), System.DateTime? spotExpirationTime = default(System.DateTime?), System.DateTime? freeOfferExpirationTime = default(System.DateTime?), string resourceGroup = default(string), bool? reserved = default(bool?), bool? isXenon = default(bool?), bool? hyperV = default(bool?), int? targetWorkerCount = default(int?), int? targetWorkerSizeId = default(int?), KubeEnvironmentProfile kubeEnvironmentProfile = default(KubeEnvironmentProfile))

        : base(id, name, kind, type)
        {
            this.ProvisioningState = provisioningState;
            this.WorkerTierName = workerTierName;
            this.Status = status;
            this.Subscription = subscription;
            this.HostingEnvironmentProfile = hostingEnvironmentProfile;
            this.MaximumNumberOfWorkers = maximumNumberOfWorkers;
            this.GeoRegion = geoRegion;
            this.PerSiteScaling = perSiteScaling;
            this.ElasticScaleEnabled = elasticScaleEnabled;
            this.MaximumElasticWorkerCount = maximumElasticWorkerCount;
            this.NumberOfSites = numberOfSites;
            this.IsSpot = isSpot;
            this.SpotExpirationTime = spotExpirationTime;
            this.FreeOfferExpirationTime = freeOfferExpirationTime;
            this.ResourceGroup = resourceGroup;
            this.Reserved = reserved;
            this.IsXenon = isXenon;
            this.HyperV = hyperV;
            this.TargetWorkerCount = targetWorkerCount;
            this.TargetWorkerSizeId = targetWorkerSizeId;
            this.KubeEnvironmentProfile = kubeEnvironmentProfile;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets provisioning state of the App Service Plan. Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;InProgress&#39;, &#39;Deleting&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState? ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets target worker tier assigned to the App Service plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.workerTierName")]
        public string WorkerTierName {get; set; }

        /// <summary>
        /// Gets app Service plan status. Possible values include: &#39;Ready&#39;, &#39;Pending&#39;, &#39;Creating&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public StatusOptions? Status {get; private set; }

        /// <summary>
        /// Gets app Service plan subscription.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.subscription")]
        public string Subscription {get; private set; }

        /// <summary>
        /// Gets or sets specification for the App Service Environment to use for the
        /// App Service plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hostingEnvironmentProfile")]
        public HostingEnvironmentProfile HostingEnvironmentProfile {get; set; }

        /// <summary>
        /// Gets maximum number of instances that can be assigned to this App Service
        /// plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maximumNumberOfWorkers")]
        public int? MaximumNumberOfWorkers {get; private set; }

        /// <summary>
        /// Gets geographical location for the App Service plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.geoRegion")]
        public string GeoRegion {get; private set; }

        /// <summary>
        /// Gets or sets if &lt;code&gt;true&lt;/code&gt;, apps assigned to this App Service plan
        /// can be scaled independently.
        /// If &lt;code&gt;false&lt;/code&gt;, apps assigned to this App Service plan will scale to
        /// all instances of the plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.perSiteScaling")]
        public bool? PerSiteScaling {get; set; }

        /// <summary>
        /// Gets or sets serverFarm supports ElasticScale. Apps in this plan will scale
        /// as if the ServerFarm was ElasticPremium sku
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.elasticScaleEnabled")]
        public bool? ElasticScaleEnabled {get; set; }

        /// <summary>
        /// Gets or sets maximum number of total workers allowed for this
        /// ElasticScaleEnabled App Service Plan
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maximumElasticWorkerCount")]
        public int? MaximumElasticWorkerCount {get; set; }

        /// <summary>
        /// Gets number of apps assigned to this App Service plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.numberOfSites")]
        public int? NumberOfSites {get; private set; }

        /// <summary>
        /// Gets or sets if &lt;code&gt;true&lt;/code&gt;, this App Service Plan owns spot
        /// instances.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isSpot")]
        public bool? IsSpot {get; set; }

        /// <summary>
        /// Gets or sets the time when the server farm expires. Valid only if it is a
        /// spot server farm.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.spotExpirationTime")]
        public System.DateTime? SpotExpirationTime {get; set; }

        /// <summary>
        /// Gets or sets the time when the server farm free offer expires.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.freeOfferExpirationTime")]
        public System.DateTime? FreeOfferExpirationTime {get; set; }

        /// <summary>
        /// Gets resource group of the App Service plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceGroup")]
        public string ResourceGroup {get; private set; }

        /// <summary>
        /// Gets or sets if Linux app service plan &lt;code&gt;true&lt;/code&gt;,
        /// &lt;code&gt;false&lt;/code&gt; otherwise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.reserved")]
        public bool? Reserved {get; set; }

        /// <summary>
        /// Gets or sets obsolete: If Hyper-V container app service plan
        /// &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isXenon")]
        public bool? IsXenon {get; set; }

        /// <summary>
        /// Gets or sets if Hyper-V container app service plan &lt;code&gt;true&lt;/code&gt;,
        /// &lt;code&gt;false&lt;/code&gt; otherwise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hyperV")]
        public bool? HyperV {get; set; }

        /// <summary>
        /// Gets or sets scaling worker count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.targetWorkerCount")]
        public int? TargetWorkerCount {get; set; }

        /// <summary>
        /// Gets or sets scaling worker size ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.targetWorkerSizeId")]
        public int? TargetWorkerSizeId {get; set; }

        /// <summary>
        /// Gets or sets specification for the Kubernetes Environment to use for the
        /// App Service plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.kubeEnvironmentProfile")]
        public KubeEnvironmentProfile KubeEnvironmentProfile {get; set; }
    }
}