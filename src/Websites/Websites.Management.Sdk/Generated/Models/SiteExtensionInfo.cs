// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Site Extension Information.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SiteExtensionInfo : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the SiteExtensionInfo class.
        /// </summary>
        public SiteExtensionInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SiteExtensionInfo class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="extensionId">Site extension ID.
        /// </param>

        /// <param name="title">
        /// </param>

        /// <param name="extensionType">Site extension type.
        /// Possible values include: &#39;Gallery&#39;, &#39;WebRoot&#39;</param>

        /// <param name="summary">Summary description.
        /// </param>

        /// <param name="description">Detailed description.
        /// </param>

        /// <param name="version">Version information.
        /// </param>

        /// <param name="extensionUrl">Extension URL.
        /// </param>

        /// <param name="projectUrl">Project URL.
        /// </param>

        /// <param name="iconUrl">Icon URL.
        /// </param>

        /// <param name="licenseUrl">License URL.
        /// </param>

        /// <param name="feedUrl">Feed URL.
        /// </param>

        /// <param name="authors">List of authors.
        /// </param>

        /// <param name="installerCommandLineParams">Installer command line parameters.
        /// </param>

        /// <param name="publishedDateTime">Published timestamp.
        /// </param>

        /// <param name="downloadCount">Count of downloads.
        /// </param>

        /// <param name="localIsLatestVersion">&lt;code&gt;true&lt;/code&gt; if the local version is the latest version;
        /// &lt;code&gt;false&lt;/code&gt; otherwise.
        /// </param>

        /// <param name="localPath">Local path.
        /// </param>

        /// <param name="installedDateTime">Installed timestamp.
        /// </param>

        /// <param name="provisioningState">Provisioning state.
        /// </param>

        /// <param name="comment">Site Extension comment.
        /// </param>
        public SiteExtensionInfo(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), string extensionId = default(string), string title = default(string), SiteExtensionType? extensionType = default(SiteExtensionType?), string summary = default(string), string description = default(string), string version = default(string), string extensionUrl = default(string), string projectUrl = default(string), string iconUrl = default(string), string licenseUrl = default(string), string feedUrl = default(string), System.Collections.Generic.IList<string> authors = default(System.Collections.Generic.IList<string>), string installerCommandLineParams = default(string), System.DateTime? publishedDateTime = default(System.DateTime?), int? downloadCount = default(int?), bool? localIsLatestVersion = default(bool?), string localPath = default(string), System.DateTime? installedDateTime = default(System.DateTime?), string provisioningState = default(string), string comment = default(string))

        : base(id, name, kind, type)
        {
            this.ExtensionId = extensionId;
            this.Title = title;
            this.ExtensionType = extensionType;
            this.Summary = summary;
            this.Description = description;
            this.Version = version;
            this.ExtensionUrl = extensionUrl;
            this.ProjectUrl = projectUrl;
            this.IconUrl = iconUrl;
            this.LicenseUrl = licenseUrl;
            this.FeedUrl = feedUrl;
            this.Authors = authors;
            this.InstallerCommandLineParams = installerCommandLineParams;
            this.PublishedDateTime = publishedDateTime;
            this.DownloadCount = downloadCount;
            this.LocalIsLatestVersion = localIsLatestVersion;
            this.LocalPath = localPath;
            this.InstalledDateTime = installedDateTime;
            this.ProvisioningState = provisioningState;
            this.Comment = comment;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets site extension ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.extension_id")]
        public string ExtensionId {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.title")]
        public string Title {get; set; }

        /// <summary>
        /// Gets or sets site extension type. Possible values include: &#39;Gallery&#39;, &#39;WebRoot&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.extension_type")]
        public SiteExtensionType? ExtensionType {get; set; }

        /// <summary>
        /// Gets or sets summary description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.summary")]
        public string Summary {get; set; }

        /// <summary>
        /// Gets or sets detailed description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets version information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.version")]
        public string Version {get; set; }

        /// <summary>
        /// Gets or sets extension URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.extension_url")]
        public string ExtensionUrl {get; set; }

        /// <summary>
        /// Gets or sets project URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.project_url")]
        public string ProjectUrl {get; set; }

        /// <summary>
        /// Gets or sets icon URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.icon_url")]
        public string IconUrl {get; set; }

        /// <summary>
        /// Gets or sets license URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.license_url")]
        public string LicenseUrl {get; set; }

        /// <summary>
        /// Gets or sets feed URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.feed_url")]
        public string FeedUrl {get; set; }

        /// <summary>
        /// Gets or sets list of authors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.authors")]
        public System.Collections.Generic.IList<string> Authors {get; set; }

        /// <summary>
        /// Gets or sets installer command line parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.installer_command_line_params")]
        public string InstallerCommandLineParams {get; set; }

        /// <summary>
        /// Gets or sets published timestamp.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.published_date_time")]
        public System.DateTime? PublishedDateTime {get; set; }

        /// <summary>
        /// Gets or sets count of downloads.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.download_count")]
        public int? DownloadCount {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if the local version is the latest version;
        /// &lt;code&gt;false&lt;/code&gt; otherwise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.local_is_latest_version")]
        public bool? LocalIsLatestVersion {get; set; }

        /// <summary>
        /// Gets or sets local path.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.local_path")]
        public string LocalPath {get; set; }

        /// <summary>
        /// Gets or sets installed timestamp.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.installed_date_time")]
        public System.DateTime? InstalledDateTime {get; set; }

        /// <summary>
        /// Gets or sets provisioning state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; set; }

        /// <summary>
        /// Gets or sets site Extension comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.comment")]
        public string Comment {get; set; }
    }
}