// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Class representing Abnormal Time Period detected.
    /// </summary>
    public partial class DetectorAbnormalTimePeriod
    {
        /// <summary>
        /// Initializes a new instance of the DetectorAbnormalTimePeriod class.
        /// </summary>
        public DetectorAbnormalTimePeriod()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DetectorAbnormalTimePeriod class.
        /// </summary>

        /// <param name="startTime">Start time of the correlated event
        /// </param>

        /// <param name="endTime">End time of the correlated event
        /// </param>

        /// <param name="message">Message describing the event
        /// </param>

        /// <param name="source">Represents the name of the Detector
        /// </param>

        /// <param name="priority">Represents the rank of the Detector
        /// </param>

        /// <param name="metaData">Downtime metadata
        /// </param>

        /// <param name="type">Represents the type of the Detector
        /// Possible values include: &#39;ServiceIncident&#39;, &#39;AppDeployment&#39;, &#39;AppCrash&#39;,
        /// &#39;RuntimeIssueDetected&#39;, &#39;AseDeployment&#39;, &#39;UserIssue&#39;, &#39;PlatformIssue&#39;,
        /// &#39;Other&#39;</param>

        /// <param name="solutions">List of proposed solutions
        /// </param>
        public DetectorAbnormalTimePeriod(System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string message = default(string), string source = default(string), double? priority = default(double?), System.Collections.Generic.IList<System.Collections.Generic.IList<NameValuePair>> metaData = default(System.Collections.Generic.IList<System.Collections.Generic.IList<NameValuePair>>), IssueType? type = default(IssueType?), System.Collections.Generic.IList<Solution> solutions = default(System.Collections.Generic.IList<Solution>))

        {
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.Message = message;
            this.Source = source;
            this.Priority = priority;
            this.MetaData = metaData;
            this.Type = type;
            this.Solutions = solutions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets start time of the correlated event
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTime")]
        public System.DateTime? StartTime {get; set; }

        /// <summary>
        /// Gets or sets end time of the correlated event
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endTime")]
        public System.DateTime? EndTime {get; set; }

        /// <summary>
        /// Gets or sets message describing the event
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "message")]
        public string Message {get; set; }

        /// <summary>
        /// Gets or sets represents the name of the Detector
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "source")]
        public string Source {get; set; }

        /// <summary>
        /// Gets or sets represents the rank of the Detector
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "priority")]
        public double? Priority {get; set; }

        /// <summary>
        /// Gets or sets downtime metadata
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metaData")]
        public System.Collections.Generic.IList<System.Collections.Generic.IList<NameValuePair>> MetaData {get; set; }

        /// <summary>
        /// Gets or sets represents the type of the Detector Possible values include: &#39;ServiceIncident&#39;, &#39;AppDeployment&#39;, &#39;AppCrash&#39;, &#39;RuntimeIssueDetected&#39;, &#39;AseDeployment&#39;, &#39;UserIssue&#39;, &#39;PlatformIssue&#39;, &#39;Other&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public IssueType? Type {get; set; }

        /// <summary>
        /// Gets or sets list of proposed solutions
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "solutions")]
        public System.Collections.Generic.IList<Solution> Solutions {get; set; }
    }
}