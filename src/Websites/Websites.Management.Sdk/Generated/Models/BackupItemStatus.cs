// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{

    /// <summary>
    /// Defines values for BackupItemStatus.
    /// </summary>


    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum BackupItemStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "InProgress")]
        InProgress,
        [System.Runtime.Serialization.EnumMember(Value = "Failed")]
        Failed,
        [System.Runtime.Serialization.EnumMember(Value = "Succeeded")]
        Succeeded,
        [System.Runtime.Serialization.EnumMember(Value = "TimedOut")]
        TimedOut,
        [System.Runtime.Serialization.EnumMember(Value = "Created")]
        Created,
        [System.Runtime.Serialization.EnumMember(Value = "Skipped")]
        Skipped,
        [System.Runtime.Serialization.EnumMember(Value = "PartiallySucceeded")]
        PartiallySucceeded,
        [System.Runtime.Serialization.EnumMember(Value = "DeleteInProgress")]
        DeleteInProgress,
        [System.Runtime.Serialization.EnumMember(Value = "DeleteFailed")]
        DeleteFailed,
        [System.Runtime.Serialization.EnumMember(Value = "Deleted")]
        Deleted
    }
    internal static class BackupItemStatusEnumExtension
    {
        internal static string ToSerializedValue(this BackupItemStatus? value)
        {
            return value == null ? null : ((BackupItemStatus)value).ToSerializedValue();
        }
        internal static string ToSerializedValue(this BackupItemStatus value)
        {
            switch( value )
            {
                case BackupItemStatus.InProgress:
                    return "InProgress";
                case BackupItemStatus.Failed:
                    return "Failed";
                case BackupItemStatus.Succeeded:
                    return "Succeeded";
                case BackupItemStatus.TimedOut:
                    return "TimedOut";
                case BackupItemStatus.Created:
                    return "Created";
                case BackupItemStatus.Skipped:
                    return "Skipped";
                case BackupItemStatus.PartiallySucceeded:
                    return "PartiallySucceeded";
                case BackupItemStatus.DeleteInProgress:
                    return "DeleteInProgress";
                case BackupItemStatus.DeleteFailed:
                    return "DeleteFailed";
                case BackupItemStatus.Deleted:
                    return "Deleted";
            }
            return null;
        }
        internal static BackupItemStatus? ParseBackupItemStatus(this string value)
        {
            switch( value )
            {
                case "InProgress":
                    return BackupItemStatus.InProgress;
                case "Failed":
                    return BackupItemStatus.Failed;
                case "Succeeded":
                    return BackupItemStatus.Succeeded;
                case "TimedOut":
                    return BackupItemStatus.TimedOut;
                case "Created":
                    return BackupItemStatus.Created;
                case "Skipped":
                    return BackupItemStatus.Skipped;
                case "PartiallySucceeded":
                    return BackupItemStatus.PartiallySucceeded;
                case "DeleteInProgress":
                    return BackupItemStatus.DeleteInProgress;
                case "DeleteFailed":
                    return BackupItemStatus.DeleteFailed;
                case "Deleted":
                    return BackupItemStatus.Deleted;
            }
            return null;
        }
    }
}