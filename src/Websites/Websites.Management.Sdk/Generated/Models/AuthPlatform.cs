// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// The configuration settings of the platform of App Service
    /// Authentication/Authorization.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class AuthPlatform : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the AuthPlatform class.
        /// </summary>
        public AuthPlatform()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AuthPlatform class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="enabled">&lt;code&gt;true&lt;/code&gt; if the Authentication / Authorization feature is enabled
        /// for the current app; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="runtimeVersion">The RuntimeVersion of the Authentication / Authorization feature in use for
        /// the current app.
        /// The setting in this value can control the behavior of certain features in
        /// the Authentication / Authorization module.
        /// </param>

        /// <param name="configFilePath">The path of the config file containing auth settings if they come from a
        /// file.
        /// If the path is relative, base will the site&#39;s root directory.
        /// </param>
        public AuthPlatform(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), bool? enabled = default(bool?), string runtimeVersion = default(string), string configFilePath = default(string))

        : base(id, name, kind, type)
        {
            this.Enabled = enabled;
            this.RuntimeVersion = runtimeVersion;
            this.ConfigFilePath = configFilePath;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if the Authentication / Authorization
        /// feature is enabled for the current app; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enabled")]
        public bool? Enabled {get; set; }

        /// <summary>
        /// Gets or sets the RuntimeVersion of the Authentication / Authorization
        /// feature in use for the current app.
        /// The setting in this value can control the behavior of certain features in
        /// the Authentication / Authorization module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.runtimeVersion")]
        public string RuntimeVersion {get; set; }

        /// <summary>
        /// Gets or sets the path of the config file containing auth settings if they
        /// come from a file.
        /// If the path is relative, base will the site&#39;s root directory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.configFilePath")]
        public string ConfigFilePath {get; set; }
    }
}