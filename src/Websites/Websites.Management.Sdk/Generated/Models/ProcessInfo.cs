// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Process Information.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ProcessInfo : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the ProcessInfo class.
        /// </summary>
        public ProcessInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProcessInfo class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="identifier">ARM Identifier for deployment.
        /// </param>

        /// <param name="deploymentName">Deployment name.
        /// </param>

        /// <param name="href">HRef URI.
        /// </param>

        /// <param name="minidump">Minidump URI.
        /// </param>

        /// <param name="isProfileRunning">Is profile running?
        /// </param>

        /// <param name="isIisProfileRunning">Is the IIS Profile running?
        /// </param>

        /// <param name="iisProfileTimeoutInSeconds">IIS Profile timeout (seconds).
        /// </param>

        /// <param name="parent">Parent process.
        /// </param>

        /// <param name="children">Child process list.
        /// </param>

        /// <param name="threads">Thread list.
        /// </param>

        /// <param name="openFileHandles">List of open files.
        /// </param>

        /// <param name="modules">List of modules.
        /// </param>

        /// <param name="fileName">File name of this process.
        /// </param>

        /// <param name="commandLine">Command line.
        /// </param>

        /// <param name="userName">User name.
        /// </param>

        /// <param name="handleCount">Handle count.
        /// </param>

        /// <param name="moduleCount">Module count.
        /// </param>

        /// <param name="threadCount">Thread count.
        /// </param>

        /// <param name="startTime">Start time.
        /// </param>

        /// <param name="totalCpuTime">Total CPU time.
        /// </param>

        /// <param name="userCpuTime">User CPU time.
        /// </param>

        /// <param name="privilegedCpuTime">Privileged CPU time.
        /// </param>

        /// <param name="workingSet">Working set.
        /// </param>

        /// <param name="peakWorkingSet">Peak working set.
        /// </param>

        /// <param name="privateMemory">Private memory size.
        /// </param>

        /// <param name="virtualMemory">Virtual memory size.
        /// </param>

        /// <param name="peakVirtualMemory">Peak virtual memory usage.
        /// </param>

        /// <param name="pagedSystemMemory">Paged system memory.
        /// </param>

        /// <param name="nonPagedSystemMemory">Non-paged system memory.
        /// </param>

        /// <param name="pagedMemory">Paged memory.
        /// </param>

        /// <param name="peakPagedMemory">Peak paged memory.
        /// </param>

        /// <param name="timeStamp">Time stamp.
        /// </param>

        /// <param name="environmentVariables">List of environment variables.
        /// </param>

        /// <param name="isScmSite">Is this the SCM site?
        /// </param>

        /// <param name="isWebjob">Is this a Web Job?
        /// </param>

        /// <param name="description">Description of process.
        /// </param>
        public ProcessInfo(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), int? identifier = default(int?), string deploymentName = default(string), string href = default(string), string minidump = default(string), bool? isProfileRunning = default(bool?), bool? isIisProfileRunning = default(bool?), double? iisProfileTimeoutInSeconds = default(double?), string parent = default(string), System.Collections.Generic.IList<string> children = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<ProcessThreadInfo> threads = default(System.Collections.Generic.IList<ProcessThreadInfo>), System.Collections.Generic.IList<string> openFileHandles = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<ProcessModuleInfo> modules = default(System.Collections.Generic.IList<ProcessModuleInfo>), string fileName = default(string), string commandLine = default(string), string userName = default(string), int? handleCount = default(int?), int? moduleCount = default(int?), int? threadCount = default(int?), System.DateTime? startTime = default(System.DateTime?), string totalCpuTime = default(string), string userCpuTime = default(string), string privilegedCpuTime = default(string), long? workingSet = default(long?), long? peakWorkingSet = default(long?), long? privateMemory = default(long?), long? virtualMemory = default(long?), long? peakVirtualMemory = default(long?), long? pagedSystemMemory = default(long?), long? nonPagedSystemMemory = default(long?), long? pagedMemory = default(long?), long? peakPagedMemory = default(long?), System.DateTime? timeStamp = default(System.DateTime?), System.Collections.Generic.IDictionary<string, string> environmentVariables = default(System.Collections.Generic.IDictionary<string, string>), bool? isScmSite = default(bool?), bool? isWebjob = default(bool?), string description = default(string))

        : base(id, name, kind, type)
        {
            this.Identifier = identifier;
            this.DeploymentName = deploymentName;
            this.Href = href;
            this.Minidump = minidump;
            this.IsProfileRunning = isProfileRunning;
            this.IsIisProfileRunning = isIisProfileRunning;
            this.IisProfileTimeoutInSeconds = iisProfileTimeoutInSeconds;
            this.Parent = parent;
            this.Children = children;
            this.Threads = threads;
            this.OpenFileHandles = openFileHandles;
            this.Modules = modules;
            this.FileName = fileName;
            this.CommandLine = commandLine;
            this.UserName = userName;
            this.HandleCount = handleCount;
            this.ModuleCount = moduleCount;
            this.ThreadCount = threadCount;
            this.StartTime = startTime;
            this.TotalCpuTime = totalCpuTime;
            this.UserCpuTime = userCpuTime;
            this.PrivilegedCpuTime = privilegedCpuTime;
            this.WorkingSet = workingSet;
            this.PeakWorkingSet = peakWorkingSet;
            this.PrivateMemory = privateMemory;
            this.VirtualMemory = virtualMemory;
            this.PeakVirtualMemory = peakVirtualMemory;
            this.PagedSystemMemory = pagedSystemMemory;
            this.NonPagedSystemMemory = nonPagedSystemMemory;
            this.PagedMemory = pagedMemory;
            this.PeakPagedMemory = peakPagedMemory;
            this.TimeStamp = timeStamp;
            this.EnvironmentVariables = environmentVariables;
            this.IsScmSite = isScmSite;
            this.IsWebjob = isWebjob;
            this.Description = description;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets aRM Identifier for deployment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.identifier")]
        public int? Identifier {get; private set; }

        /// <summary>
        /// Gets or sets deployment name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.deployment_name")]
        public string DeploymentName {get; set; }

        /// <summary>
        /// Gets or sets hRef URI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.href")]
        public string Href {get; set; }

        /// <summary>
        /// Gets or sets minidump URI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.minidump")]
        public string Minidump {get; set; }

        /// <summary>
        /// Gets or sets is profile running?
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.is_profile_running")]
        public bool? IsProfileRunning {get; set; }

        /// <summary>
        /// Gets or sets is the IIS Profile running?
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.is_iis_profile_running")]
        public bool? IsIisProfileRunning {get; set; }

        /// <summary>
        /// Gets or sets iIS Profile timeout (seconds).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.iis_profile_timeout_in_seconds")]
        public double? IisProfileTimeoutInSeconds {get; set; }

        /// <summary>
        /// Gets or sets parent process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.parent")]
        public string Parent {get; set; }

        /// <summary>
        /// Gets or sets child process list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.children")]
        public System.Collections.Generic.IList<string> Children {get; set; }

        /// <summary>
        /// Gets or sets thread list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.threads")]
        public System.Collections.Generic.IList<ProcessThreadInfo> Threads {get; set; }

        /// <summary>
        /// Gets or sets list of open files.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.open_file_handles")]
        public System.Collections.Generic.IList<string> OpenFileHandles {get; set; }

        /// <summary>
        /// Gets or sets list of modules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.modules")]
        public System.Collections.Generic.IList<ProcessModuleInfo> Modules {get; set; }

        /// <summary>
        /// Gets or sets file name of this process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.file_name")]
        public string FileName {get; set; }

        /// <summary>
        /// Gets or sets command line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.command_line")]
        public string CommandLine {get; set; }

        /// <summary>
        /// Gets or sets user name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.user_name")]
        public string UserName {get; set; }

        /// <summary>
        /// Gets or sets handle count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.handle_count")]
        public int? HandleCount {get; set; }

        /// <summary>
        /// Gets or sets module count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.module_count")]
        public int? ModuleCount {get; set; }

        /// <summary>
        /// Gets or sets thread count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.thread_count")]
        public int? ThreadCount {get; set; }

        /// <summary>
        /// Gets or sets start time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.start_time")]
        public System.DateTime? StartTime {get; set; }

        /// <summary>
        /// Gets or sets total CPU time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.total_cpu_time")]
        public string TotalCpuTime {get; set; }

        /// <summary>
        /// Gets or sets user CPU time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.user_cpu_time")]
        public string UserCpuTime {get; set; }

        /// <summary>
        /// Gets or sets privileged CPU time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privileged_cpu_time")]
        public string PrivilegedCpuTime {get; set; }

        /// <summary>
        /// Gets or sets working set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.working_set")]
        public long? WorkingSet {get; set; }

        /// <summary>
        /// Gets or sets peak working set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.peak_working_set")]
        public long? PeakWorkingSet {get; set; }

        /// <summary>
        /// Gets or sets private memory size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.private_memory")]
        public long? PrivateMemory {get; set; }

        /// <summary>
        /// Gets or sets virtual memory size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtual_memory")]
        public long? VirtualMemory {get; set; }

        /// <summary>
        /// Gets or sets peak virtual memory usage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.peak_virtual_memory")]
        public long? PeakVirtualMemory {get; set; }

        /// <summary>
        /// Gets or sets paged system memory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.paged_system_memory")]
        public long? PagedSystemMemory {get; set; }

        /// <summary>
        /// Gets or sets non-paged system memory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.non_paged_system_memory")]
        public long? NonPagedSystemMemory {get; set; }

        /// <summary>
        /// Gets or sets paged memory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.paged_memory")]
        public long? PagedMemory {get; set; }

        /// <summary>
        /// Gets or sets peak paged memory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.peak_paged_memory")]
        public long? PeakPagedMemory {get; set; }

        /// <summary>
        /// Gets or sets time stamp.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.time_stamp")]
        public System.DateTime? TimeStamp {get; set; }

        /// <summary>
        /// Gets or sets list of environment variables.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.environment_variables")]
        public System.Collections.Generic.IDictionary<string, string> EnvironmentVariables {get; set; }

        /// <summary>
        /// Gets or sets is this the SCM site?
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.is_scm_site")]
        public bool? IsScmSite {get; set; }

        /// <summary>
        /// Gets or sets is this a Web Job?
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.is_webjob")]
        public bool? IsWebjob {get; set; }

        /// <summary>
        /// Gets or sets description of process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }
    }
}