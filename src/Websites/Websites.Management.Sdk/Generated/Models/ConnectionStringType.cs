// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{

    /// <summary>
    /// Defines values for ConnectionStringType.
    /// </summary>


    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ConnectionStringType
    {
        [System.Runtime.Serialization.EnumMember(Value = "MySql")]
        MySql,
        [System.Runtime.Serialization.EnumMember(Value = "SQLServer")]
        SQLServer,
        [System.Runtime.Serialization.EnumMember(Value = "SQLAzure")]
        SQLAzure,
        [System.Runtime.Serialization.EnumMember(Value = "Custom")]
        Custom,
        [System.Runtime.Serialization.EnumMember(Value = "NotificationHub")]
        NotificationHub,
        [System.Runtime.Serialization.EnumMember(Value = "ServiceBus")]
        ServiceBus,
        [System.Runtime.Serialization.EnumMember(Value = "EventHub")]
        EventHub,
        [System.Runtime.Serialization.EnumMember(Value = "ApiHub")]
        ApiHub,
        [System.Runtime.Serialization.EnumMember(Value = "DocDb")]
        DocDb,
        [System.Runtime.Serialization.EnumMember(Value = "RedisCache")]
        RedisCache,
        [System.Runtime.Serialization.EnumMember(Value = "PostgreSQL")]
        PostgreSQL
    }
    internal static class ConnectionStringTypeEnumExtension
    {
        internal static string ToSerializedValue(this ConnectionStringType? value)
        {
            return value == null ? null : ((ConnectionStringType)value).ToSerializedValue();
        }
        internal static string ToSerializedValue(this ConnectionStringType value)
        {
            switch( value )
            {
                case ConnectionStringType.MySql:
                    return "MySql";
                case ConnectionStringType.SQLServer:
                    return "SQLServer";
                case ConnectionStringType.SQLAzure:
                    return "SQLAzure";
                case ConnectionStringType.Custom:
                    return "Custom";
                case ConnectionStringType.NotificationHub:
                    return "NotificationHub";
                case ConnectionStringType.ServiceBus:
                    return "ServiceBus";
                case ConnectionStringType.EventHub:
                    return "EventHub";
                case ConnectionStringType.ApiHub:
                    return "ApiHub";
                case ConnectionStringType.DocDb:
                    return "DocDb";
                case ConnectionStringType.RedisCache:
                    return "RedisCache";
                case ConnectionStringType.PostgreSQL:
                    return "PostgreSQL";
            }
            return null;
        }
        internal static ConnectionStringType? ParseConnectionStringType(this string value)
        {
            switch( value )
            {
                case "MySql":
                    return ConnectionStringType.MySql;
                case "SQLServer":
                    return ConnectionStringType.SQLServer;
                case "SQLAzure":
                    return ConnectionStringType.SQLAzure;
                case "Custom":
                    return ConnectionStringType.Custom;
                case "NotificationHub":
                    return ConnectionStringType.NotificationHub;
                case "ServiceBus":
                    return ConnectionStringType.ServiceBus;
                case "EventHub":
                    return ConnectionStringType.EventHub;
                case "ApiHub":
                    return ConnectionStringType.ApiHub;
                case "DocDb":
                    return ConnectionStringType.DocDb;
                case "RedisCache":
                    return ConnectionStringType.RedisCache;
                case "PostgreSQL":
                    return ConnectionStringType.PostgreSQL;
            }
            return null;
        }
    }
}