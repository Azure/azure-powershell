// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// IP security restriction on an app.
    /// </summary>
    public partial class IpSecurityRestriction
    {
        /// <summary>
        /// Initializes a new instance of the IpSecurityRestriction class.
        /// </summary>
        public IpSecurityRestriction()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IpSecurityRestriction class.
        /// </summary>

        /// <param name="ipAddress">IP address the security restriction is valid for.
        /// It can be in form of pure ipv4 address (required SubnetMask property) or
        /// CIDR notation such as ipv4/mask (leading bit match). For CIDR,
        /// SubnetMask property must not be specified.
        /// </param>

        /// <param name="subnetMask">Subnet mask for the range of IP addresses the restriction is valid for.
        /// </param>

        /// <param name="vnetSubnetResourceId">Virtual network resource id
        /// </param>

        /// <param name="vnetTrafficTag">(internal) Vnet traffic tag
        /// </param>

        /// <param name="subnetTrafficTag">(internal) Subnet traffic tag
        /// </param>

        /// <param name="action">Allow or Deny access for this IP range.
        /// </param>

        /// <param name="tag">Defines what this IP filter will be used for. This is to support IP
        /// filtering on proxies.
        /// Possible values include: &#39;Default&#39;, &#39;XffProxy&#39;, &#39;ServiceTag&#39;</param>

        /// <param name="priority">Priority of IP restriction rule.
        /// </param>

        /// <param name="name">IP restriction rule name.
        /// </param>

        /// <param name="description">IP restriction rule description.
        /// </param>

        /// <param name="headers">IP restriction rule headers.
        /// X-Forwarded-Host
        /// (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host#Examples).
        /// The matching logic is ..
        /// - If the property is null or empty (default), all hosts(or lack of) are
        /// allowed.
        /// - A value is compared using ordinal-ignore-case (excluding port number).
        /// - Subdomain wildcards are permitted but don&#39;t match the root domain. For
        /// example, *.contoso.com matches the subdomain foo.contoso.com
        /// but not the root domain contoso.com or multi-level foo.bar.contoso.com
        /// - Unicode host names are allowed but are converted to Punycode for
        /// matching.
        /// X-Forwarded-For
        /// (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#Examples).
        /// The matching logic is ..
        /// - If the property is null or empty (default), any forwarded-for chains (or
        /// lack of) are allowed.
        /// - If any address (excluding port number) in the chain (comma separated)
        /// matches the CIDR defined by the property.
        /// X-Azure-FDID and X-FD-HealthProbe.
        /// The matching logic is exact match.
        /// </param>
        public IpSecurityRestriction(string ipAddress = default(string), string subnetMask = default(string), string vnetSubnetResourceId = default(string), int? vnetTrafficTag = default(int?), int? subnetTrafficTag = default(int?), string action = default(string), string tag = default(string), int? priority = default(int?), string name = default(string), string description = default(string), System.Collections.Generic.IDictionary<string, System.Collections.Generic.IList<string>> headers = default(System.Collections.Generic.IDictionary<string, System.Collections.Generic.IList<string>>))

        {
            this.IpAddress = ipAddress;
            this.SubnetMask = subnetMask;
            this.VnetSubnetResourceId = vnetSubnetResourceId;
            this.VnetTrafficTag = vnetTrafficTag;
            this.SubnetTrafficTag = subnetTrafficTag;
            this.Action = action;
            this.Tag = tag;
            this.Priority = priority;
            this.Name = name;
            this.Description = description;
            this.Headers = headers;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets iP address the security restriction is valid for.
        /// It can be in form of pure ipv4 address (required SubnetMask property) or
        /// CIDR notation such as ipv4/mask (leading bit match). For CIDR,
        /// SubnetMask property must not be specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipAddress")]
        public string IpAddress {get; set; }

        /// <summary>
        /// Gets or sets subnet mask for the range of IP addresses the restriction is
        /// valid for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subnetMask")]
        public string SubnetMask {get; set; }

        /// <summary>
        /// Gets or sets virtual network resource id
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vnetSubnetResourceId")]
        public string VnetSubnetResourceId {get; set; }

        /// <summary>
        /// Gets or sets (internal) Vnet traffic tag
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vnetTrafficTag")]
        public int? VnetTrafficTag {get; set; }

        /// <summary>
        /// Gets or sets (internal) Subnet traffic tag
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subnetTrafficTag")]
        public int? SubnetTrafficTag {get; set; }

        /// <summary>
        /// Gets or sets allow or Deny access for this IP range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "action")]
        public string Action {get; set; }

        /// <summary>
        /// Gets or sets defines what this IP filter will be used for. This is to
        /// support IP filtering on proxies. Possible values include: &#39;Default&#39;, &#39;XffProxy&#39;, &#39;ServiceTag&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tag")]
        public string Tag {get; set; }

        /// <summary>
        /// Gets or sets priority of IP restriction rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "priority")]
        public int? Priority {get; set; }

        /// <summary>
        /// Gets or sets iP restriction rule name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets iP restriction rule description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets iP restriction rule headers.
        /// X-Forwarded-Host
        /// (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host#Examples).
        /// The matching logic is ..
        /// - If the property is null or empty (default), all hosts(or lack of) are
        /// allowed.
        /// - A value is compared using ordinal-ignore-case (excluding port number).
        /// - Subdomain wildcards are permitted but don&#39;t match the root domain. For
        /// example, *.contoso.com matches the subdomain foo.contoso.com
        /// but not the root domain contoso.com or multi-level foo.bar.contoso.com
        /// - Unicode host names are allowed but are converted to Punycode for
        /// matching.
        /// X-Forwarded-For
        /// (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#Examples).
        /// The matching logic is ..
        /// - If the property is null or empty (default), any forwarded-for chains (or
        /// lack of) are allowed.
        /// - If any address (excluding port number) in the chain (comma separated)
        /// matches the CIDR defined by the property.
        /// X-Azure-FDID and X-FD-HealthProbe.
        /// The matching logic is exact match.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "headers")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IList<string>> Headers {get; set; }
    }
}