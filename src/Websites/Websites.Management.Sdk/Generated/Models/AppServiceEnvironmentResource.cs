// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// App Service Environment ARM resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class AppServiceEnvironmentResource : Resource
    {
        /// <summary>
        /// Initializes a new instance of the AppServiceEnvironmentResource class.
        /// </summary>
        public AppServiceEnvironmentResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AppServiceEnvironmentResource class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="location">Resource Location.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="provisioningState">Provisioning state of the App Service Environment.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;InProgress&#39;,
        /// &#39;Deleting&#39;</param>

        /// <param name="status">Current status of the App Service Environment.
        /// Possible values include: &#39;Preparing&#39;, &#39;Ready&#39;, &#39;Scaling&#39;, &#39;Deleting&#39;</param>

        /// <param name="virtualNetwork">Description of the Virtual Network.
        /// </param>

        /// <param name="internalLoadBalancingMode">Specifies which endpoints to serve internally in the Virtual Network for
        /// the App Service Environment.
        /// Possible values include: &#39;None&#39;, &#39;Web&#39;, &#39;Publishing&#39;, &#39;Web, Publishing&#39;</param>

        /// <param name="multiSize">Front-end VM size, e.g. &#34;Medium&#34;, &#34;Large&#34;.
        /// </param>

        /// <param name="multiRoleCount">Number of front-end instances.
        /// </param>

        /// <param name="ipsslAddressCount">Number of IP SSL addresses reserved for the App Service Environment.
        /// </param>

        /// <param name="dnsSuffix">DNS suffix of the App Service Environment.
        /// </param>

        /// <param name="maximumNumberOfMachines">Maximum number of VMs in the App Service Environment.
        /// </param>

        /// <param name="frontEndScaleFactor">Scale factor for front-ends.
        /// </param>

        /// <param name="suspended">&lt;code&gt;true&lt;/code&gt; if the App Service Environment is suspended; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;. The environment can be suspended, e.g. when the
        /// management endpoint is no longer available
        /// (most likely because NSG blocked the incoming traffic).
        /// </param>

        /// <param name="clusterSettings">Custom settings for changing the behavior of the App Service Environment.
        /// </param>

        /// <param name="userWhitelistedIPRanges">User added ip ranges to whitelist on ASE db
        /// </param>

        /// <param name="hasLinuxWorkers">Flag that displays whether an ASE has linux workers or not
        /// </param>

        /// <param name="dedicatedHostCount">Dedicated Host Count
        /// </param>
        public AppServiceEnvironmentResource(string location, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), ProvisioningState? provisioningState = default(ProvisioningState?), HostingEnvironmentStatus? status = default(HostingEnvironmentStatus?), VirtualNetworkProfile virtualNetwork = default(VirtualNetworkProfile), string internalLoadBalancingMode = default(string), string multiSize = default(string), int? multiRoleCount = default(int?), int? ipsslAddressCount = default(int?), string dnsSuffix = default(string), int? maximumNumberOfMachines = default(int?), int? frontEndScaleFactor = default(int?), bool? suspended = default(bool?), System.Collections.Generic.IList<NameValuePair> clusterSettings = default(System.Collections.Generic.IList<NameValuePair>), System.Collections.Generic.IList<string> userWhitelistedIPRanges = default(System.Collections.Generic.IList<string>), bool? hasLinuxWorkers = default(bool?), int? dedicatedHostCount = default(int?))

        : base(location, id, name, kind, type, tags)
        {
            this.ProvisioningState = provisioningState;
            this.Status = status;
            this.VirtualNetwork = virtualNetwork;
            this.InternalLoadBalancingMode = internalLoadBalancingMode;
            this.MultiSize = multiSize;
            this.MultiRoleCount = multiRoleCount;
            this.IpsslAddressCount = ipsslAddressCount;
            this.DnsSuffix = dnsSuffix;
            this.MaximumNumberOfMachines = maximumNumberOfMachines;
            this.FrontEndScaleFactor = frontEndScaleFactor;
            this.Suspended = suspended;
            this.ClusterSettings = clusterSettings;
            this.UserWhitelistedIPRanges = userWhitelistedIPRanges;
            this.HasLinuxWorkers = hasLinuxWorkers;
            this.DedicatedHostCount = dedicatedHostCount;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets provisioning state of the App Service Environment. Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;InProgress&#39;, &#39;Deleting&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState? ProvisioningState {get; private set; }

        /// <summary>
        /// Gets current status of the App Service Environment. Possible values include: &#39;Preparing&#39;, &#39;Ready&#39;, &#39;Scaling&#39;, &#39;Deleting&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public HostingEnvironmentStatus? Status {get; private set; }

        /// <summary>
        /// Gets or sets description of the Virtual Network.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualNetwork")]
        public VirtualNetworkProfile VirtualNetwork {get; set; }

        /// <summary>
        /// Gets or sets specifies which endpoints to serve internally in the Virtual
        /// Network for the App Service Environment. Possible values include: &#39;None&#39;, &#39;Web&#39;, &#39;Publishing&#39;, &#39;Web, Publishing&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.internalLoadBalancingMode")]
        public string InternalLoadBalancingMode {get; set; }

        /// <summary>
        /// Gets or sets front-end VM size, e.g. &#34;Medium&#34;, &#34;Large&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.multiSize")]
        public string MultiSize {get; set; }

        /// <summary>
        /// Gets number of front-end instances.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.multiRoleCount")]
        public int? MultiRoleCount {get; private set; }

        /// <summary>
        /// Gets or sets number of IP SSL addresses reserved for the App Service
        /// Environment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ipsslAddressCount")]
        public int? IpsslAddressCount {get; set; }

        /// <summary>
        /// Gets or sets dNS suffix of the App Service Environment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dnsSuffix")]
        public string DnsSuffix {get; set; }

        /// <summary>
        /// Gets maximum number of VMs in the App Service Environment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maximumNumberOfMachines")]
        public int? MaximumNumberOfMachines {get; private set; }

        /// <summary>
        /// Gets or sets scale factor for front-ends.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.frontEndScaleFactor")]
        public int? FrontEndScaleFactor {get; set; }

        /// <summary>
        /// Gets &lt;code&gt;true&lt;/code&gt; if the App Service Environment is suspended;
        /// otherwise, &lt;code&gt;false&lt;/code&gt;. The environment can be suspended, e.g. when
        /// the management endpoint is no longer available
        /// (most likely because NSG blocked the incoming traffic).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.suspended")]
        public bool? Suspended {get; private set; }

        /// <summary>
        /// Gets or sets custom settings for changing the behavior of the App Service
        /// Environment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.clusterSettings")]
        public System.Collections.Generic.IList<NameValuePair> ClusterSettings {get; set; }

        /// <summary>
        /// Gets or sets user added ip ranges to whitelist on ASE db
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.userWhitelistedIpRanges")]
        public System.Collections.Generic.IList<string> UserWhitelistedIPRanges {get; set; }

        /// <summary>
        /// Gets flag that displays whether an ASE has linux workers or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hasLinuxWorkers")]
        public bool? HasLinuxWorkers {get; private set; }

        /// <summary>
        /// Gets dedicated Host Count
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dedicatedHostCount")]
        public int? DedicatedHostCount {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();


            if (this.VirtualNetwork != null)
            {
                this.VirtualNetwork.Validate();
            }





        }
    }
}