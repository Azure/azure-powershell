// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Hybrid Connection for an App Service app.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class RelayServiceConnectionEntity : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the RelayServiceConnectionEntity class.
        /// </summary>
        public RelayServiceConnectionEntity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RelayServiceConnectionEntity class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="entityName">
        /// </param>

        /// <param name="entityConnectionString">
        /// </param>

        /// <param name="resourceType">
        /// </param>

        /// <param name="resourceConnectionString">
        /// </param>

        /// <param name="hostname">
        /// </param>

        /// <param name="port">
        /// </param>

        /// <param name="biztalkUri">
        /// </param>
        public RelayServiceConnectionEntity(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), string entityName = default(string), string entityConnectionString = default(string), string resourceType = default(string), string resourceConnectionString = default(string), string hostname = default(string), int? port = default(int?), string biztalkUri = default(string))

        : base(id, name, kind, type)
        {
            this.EntityName = entityName;
            this.EntityConnectionString = entityConnectionString;
            this.ResourceType = resourceType;
            this.ResourceConnectionString = resourceConnectionString;
            this.Hostname = hostname;
            this.Port = port;
            this.BiztalkUri = biztalkUri;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.entityName")]
        public string EntityName {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.entityConnectionString")]
        public string EntityConnectionString {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceType")]
        public string ResourceType {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceConnectionString")]
        public string ResourceConnectionString {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hostname")]
        public string Hostname {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.port")]
        public int? Port {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.biztalkUri")]
        public string BiztalkUri {get; set; }
    }
}