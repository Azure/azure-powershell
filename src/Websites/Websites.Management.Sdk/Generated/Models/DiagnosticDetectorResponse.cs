// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Class representing Response from Diagnostic Detectors
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class DiagnosticDetectorResponse : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the DiagnosticDetectorResponse class.
        /// </summary>
        public DiagnosticDetectorResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DiagnosticDetectorResponse class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="detectorDefinition">Detector&#39;s definition
        /// </param>

        /// <param name="startTime">Start time of the period
        /// </param>

        /// <param name="endTime">End time of the period
        /// </param>

        /// <param name="issueDetected">Flag representing Issue was detected.
        /// </param>

        /// <param name="metrics">Metrics provided by the detector
        /// </param>

        /// <param name="abnormalTimePeriods">List of Correlated events found by the detector
        /// </param>

        /// <param name="data">Additional Data that detector wants to send.
        /// </param>

        /// <param name="responseMetaData">Meta Data
        /// </param>
        public DiagnosticDetectorResponse(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), DetectorDefinition detectorDefinition = default(DetectorDefinition), System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), bool? issueDetected = default(bool?), System.Collections.Generic.IList<DiagnosticMetricSet> metrics = default(System.Collections.Generic.IList<DiagnosticMetricSet>), System.Collections.Generic.IList<DetectorAbnormalTimePeriod> abnormalTimePeriods = default(System.Collections.Generic.IList<DetectorAbnormalTimePeriod>), System.Collections.Generic.IList<System.Collections.Generic.IList<NameValuePair>> data = default(System.Collections.Generic.IList<System.Collections.Generic.IList<NameValuePair>>), ResponseMetaData responseMetaData = default(ResponseMetaData))

        : base(id, name, kind, type)
        {
            this.DetectorDefinition = detectorDefinition;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.IssueDetected = issueDetected;
            this.Metrics = metrics;
            this.AbnormalTimePeriods = abnormalTimePeriods;
            this.Data = data;
            this.ResponseMetaData = responseMetaData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets detector&#39;s definition
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.detectorDefinition")]
        public DetectorDefinition DetectorDefinition {get; set; }

        /// <summary>
        /// Gets or sets start time of the period
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.startTime")]
        public System.DateTime? StartTime {get; set; }

        /// <summary>
        /// Gets or sets end time of the period
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.endTime")]
        public System.DateTime? EndTime {get; set; }

        /// <summary>
        /// Gets or sets flag representing Issue was detected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.issueDetected")]
        public bool? IssueDetected {get; set; }

        /// <summary>
        /// Gets or sets metrics provided by the detector
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.metrics")]
        public System.Collections.Generic.IList<DiagnosticMetricSet> Metrics {get; set; }

        /// <summary>
        /// Gets or sets list of Correlated events found by the detector
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.abnormalTimePeriods")]
        public System.Collections.Generic.IList<DetectorAbnormalTimePeriod> AbnormalTimePeriods {get; set; }

        /// <summary>
        /// Gets or sets additional Data that detector wants to send.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.data")]
        public System.Collections.Generic.IList<System.Collections.Generic.IList<NameValuePair>> Data {get; set; }

        /// <summary>
        /// Gets or sets meta Data
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.responseMetaData")]
        public ResponseMetaData ResponseMetaData {get; set; }
    }
}