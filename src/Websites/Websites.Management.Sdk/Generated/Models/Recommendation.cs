// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Represents a recommendation result generated by the recommendation engine.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Recommendation : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the Recommendation class.
        /// </summary>
        public Recommendation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Recommendation class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="channels">List of channels that this recommendation can apply.
        /// Possible values include: &#39;Notification&#39;, &#39;Api&#39;, &#39;Email&#39;, &#39;Webhook&#39;, &#39;All&#39;</param>

        /// <param name="creationTime">Timestamp when this instance was created.
        /// </param>

        /// <param name="recommendationId">A GUID value that each recommendation object is associated with.
        /// </param>

        /// <param name="resourceId">Full ARM resource ID string that this recommendation object is associated
        /// with.
        /// </param>

        /// <param name="resourceScope">Name of a resource type this recommendation applies, e.g. Subscription,
        /// ServerFarm, Site.
        /// Possible values include: &#39;ServerFarm&#39;, &#39;Subscription&#39;, &#39;WebSite&#39;</param>

        /// <param name="ruleName">Unique name of the rule.
        /// </param>

        /// <param name="displayName">UI friendly name of the rule (may not be unique).
        /// </param>

        /// <param name="message">Recommendation text.
        /// </param>

        /// <param name="level">Level indicating how critical this recommendation can impact.
        /// Possible values include: &#39;Critical&#39;, &#39;Warning&#39;, &#39;Information&#39;,
        /// &#39;NonUrgentSuggestion&#39;</param>

        /// <param name="categoryTags">The list of category tags that this recommendation belongs to.
        /// </param>

        /// <param name="actionName">Name of action recommended by this object.
        /// </param>

        /// <param name="enabled">True if this recommendation is still valid (i.e. &#34;actionable&#34;). False if it
        /// is invalid.
        /// </param>

        /// <param name="states">The list of states of this recommendation. If it&#39;s null then it should be
        /// considered &#34;Active&#34;.
        /// </param>

        /// <param name="startTime">The beginning time in UTC of a range that the recommendation refers to.
        /// </param>

        /// <param name="endTime">The end time in UTC of a range that the recommendation refers to.
        /// </param>

        /// <param name="nextNotificationTime">When to notify this recommendation next in UTC. Null means that this will
        /// never be notified anymore.
        /// </param>

        /// <param name="notificationExpirationTime">Date and time in UTC when this notification expires.
        /// </param>

        /// <param name="notifiedTime">Last timestamp in UTC this instance was actually notified. Null means that
        /// this recommendation hasn&#39;t been notified yet.
        /// </param>

        /// <param name="score">A metric value measured by the rule.
        /// </param>

        /// <param name="isDynamic">True if this is associated with a dynamically added rule
        /// </param>

        /// <param name="extensionName">Extension name of the portal if exists.
        /// </param>

        /// <param name="bladeName">Deep link to a blade on the portal.
        /// </param>

        /// <param name="forwardLink">Forward link to an external document associated with the rule.
        /// </param>
        public Recommendation(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), Channels? channels = default(Channels?), System.DateTime? creationTime = default(System.DateTime?), System.Guid? recommendationId = default(System.Guid?), string resourceId = default(string), string resourceScope = default(string), string ruleName = default(string), string displayName = default(string), string message = default(string), NotificationLevel? level = default(NotificationLevel?), System.Collections.Generic.IList<string> categoryTags = default(System.Collections.Generic.IList<string>), string actionName = default(string), int? enabled = default(int?), System.Collections.Generic.IList<string> states = default(System.Collections.Generic.IList<string>), System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), System.DateTime? nextNotificationTime = default(System.DateTime?), System.DateTime? notificationExpirationTime = default(System.DateTime?), System.DateTime? notifiedTime = default(System.DateTime?), double? score = default(double?), bool? isDynamic = default(bool?), string extensionName = default(string), string bladeName = default(string), string forwardLink = default(string))

        : base(id, name, kind, type)
        {
            this.Channels = channels;
            this.CreationTime = creationTime;
            this.RecommendationId = recommendationId;
            this.ResourceId = resourceId;
            this.ResourceScope = resourceScope;
            this.RuleName = ruleName;
            this.DisplayName = displayName;
            this.Message = message;
            this.Level = level;
            this.CategoryTags = categoryTags;
            this.ActionName = actionName;
            this.Enabled = enabled;
            this.States = states;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.NextNotificationTime = nextNotificationTime;
            this.NotificationExpirationTime = notificationExpirationTime;
            this.NotifiedTime = notifiedTime;
            this.Score = score;
            this.IsDynamic = isDynamic;
            this.ExtensionName = extensionName;
            this.BladeName = bladeName;
            this.ForwardLink = forwardLink;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets list of channels that this recommendation can apply. Possible values include: &#39;Notification&#39;, &#39;Api&#39;, &#39;Email&#39;, &#39;Webhook&#39;, &#39;All&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.channels")]
        public Channels? Channels {get; set; }

        /// <summary>
        /// Gets or sets timestamp when this instance was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.creationTime")]
        public System.DateTime? CreationTime {get; set; }

        /// <summary>
        /// Gets or sets a GUID value that each recommendation object is associated
        /// with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.recommendationId")]
        public System.Guid? RecommendationId {get; set; }

        /// <summary>
        /// Gets or sets full ARM resource ID string that this recommendation object is
        /// associated with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceId")]
        public string ResourceId {get; set; }

        /// <summary>
        /// Gets or sets name of a resource type this recommendation applies, e.g.
        /// Subscription, ServerFarm, Site. Possible values include: &#39;ServerFarm&#39;, &#39;Subscription&#39;, &#39;WebSite&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceScope")]
        public string ResourceScope {get; set; }

        /// <summary>
        /// Gets or sets unique name of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ruleName")]
        public string RuleName {get; set; }

        /// <summary>
        /// Gets or sets uI friendly name of the rule (may not be unique).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets recommendation text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.message")]
        public string Message {get; set; }

        /// <summary>
        /// Gets or sets level indicating how critical this recommendation can impact. Possible values include: &#39;Critical&#39;, &#39;Warning&#39;, &#39;Information&#39;, &#39;NonUrgentSuggestion&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.level")]
        public NotificationLevel? Level {get; set; }

        /// <summary>
        /// Gets the list of category tags that this recommendation belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.categoryTags")]
        public System.Collections.Generic.IList<string> CategoryTags {get; private set; }

        /// <summary>
        /// Gets or sets name of action recommended by this object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.actionName")]
        public string ActionName {get; set; }

        /// <summary>
        /// Gets or sets true if this recommendation is still valid (i.e.
        /// &#34;actionable&#34;). False if it is invalid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enabled")]
        public int? Enabled {get; set; }

        /// <summary>
        /// Gets or sets the list of states of this recommendation. If it&#39;s null then
        /// it should be considered &#34;Active&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.states")]
        public System.Collections.Generic.IList<string> States {get; set; }

        /// <summary>
        /// Gets or sets the beginning time in UTC of a range that the recommendation
        /// refers to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.startTime")]
        public System.DateTime? StartTime {get; set; }

        /// <summary>
        /// Gets or sets the end time in UTC of a range that the recommendation refers
        /// to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.endTime")]
        public System.DateTime? EndTime {get; set; }

        /// <summary>
        /// Gets or sets when to notify this recommendation next in UTC. Null means
        /// that this will never be notified anymore.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.nextNotificationTime")]
        public System.DateTime? NextNotificationTime {get; set; }

        /// <summary>
        /// Gets or sets date and time in UTC when this notification expires.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.notificationExpirationTime")]
        public System.DateTime? NotificationExpirationTime {get; set; }

        /// <summary>
        /// Gets or sets last timestamp in UTC this instance was actually notified.
        /// Null means that this recommendation hasn&#39;t been notified yet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.notifiedTime")]
        public System.DateTime? NotifiedTime {get; set; }

        /// <summary>
        /// Gets or sets a metric value measured by the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.score")]
        public double? Score {get; set; }

        /// <summary>
        /// Gets or sets true if this is associated with a dynamically added rule
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isDynamic")]
        public bool? IsDynamic {get; set; }

        /// <summary>
        /// Gets or sets extension name of the portal if exists.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.extensionName")]
        public string ExtensionName {get; set; }

        /// <summary>
        /// Gets or sets deep link to a blade on the portal.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.bladeName")]
        public string BladeName {get; set; }

        /// <summary>
        /// Gets or sets forward link to an external document associated with the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.forwardLink")]
        public string ForwardLink {get; set; }
    }
}