// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// SSL-enabled hostname.
    /// </summary>
    public partial class HostNameSslState
    {
        /// <summary>
        /// Initializes a new instance of the HostNameSslState class.
        /// </summary>
        public HostNameSslState()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HostNameSslState class.
        /// </summary>

        /// <param name="name">Hostname.
        /// </param>

        /// <param name="sslState">SSL type.
        /// Possible values include: &#39;Disabled&#39;, &#39;SniEnabled&#39;, &#39;IpBasedEnabled&#39;</param>

        /// <param name="virtualIP">Virtual IP address assigned to the hostname if IP based SSL is enabled.
        /// </param>

        /// <param name="thumbprint">SSL certificate thumbprint.
        /// </param>

        /// <param name="toUpdate">Set to &lt;code&gt;true&lt;/code&gt; to update existing hostname.
        /// </param>

        /// <param name="hostType">Indicates whether the hostname is a standard or repository hostname.
        /// Possible values include: &#39;Standard&#39;, &#39;Repository&#39;</param>
        public HostNameSslState(string name = default(string), SslState? sslState = default(SslState?), string virtualIP = default(string), string thumbprint = default(string), bool? toUpdate = default(bool?), HostType? hostType = default(HostType?))

        {
            this.Name = name;
            this.SslState = sslState;
            this.VirtualIP = virtualIP;
            this.Thumbprint = thumbprint;
            this.ToUpdate = toUpdate;
            this.HostType = hostType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets hostname.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets sSL type. Possible values include: &#39;Disabled&#39;, &#39;SniEnabled&#39;, &#39;IpBasedEnabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sslState")]
        public SslState? SslState {get; set; }

        /// <summary>
        /// Gets or sets virtual IP address assigned to the hostname if IP based SSL is
        /// enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "virtualIP")]
        public string VirtualIP {get; set; }

        /// <summary>
        /// Gets or sets sSL certificate thumbprint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "thumbprint")]
        public string Thumbprint {get; set; }

        /// <summary>
        /// Gets or sets set to &lt;code&gt;true&lt;/code&gt; to update existing hostname.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "toUpdate")]
        public bool? ToUpdate {get; set; }

        /// <summary>
        /// Gets or sets indicates whether the hostname is a standard or repository
        /// hostname. Possible values include: &#39;Standard&#39;, &#39;Repository&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostType")]
        public HostType? HostType {get; set; }
    }
}