// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Application stack major version.
    /// </summary>
    public partial class StackMajorVersion
    {
        /// <summary>
        /// Initializes a new instance of the StackMajorVersion class.
        /// </summary>
        public StackMajorVersion()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StackMajorVersion class.
        /// </summary>

        /// <param name="displayVersion">Application stack major version (display only).
        /// </param>

        /// <param name="runtimeVersion">Application stack major version (runtime only).
        /// </param>

        /// <param name="isDefault">&lt;code&gt;true&lt;/code&gt; if this is the default major version; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="minorVersions">Minor versions associated with the major version.
        /// </param>

        /// <param name="applicationInsights">&lt;code&gt;true&lt;/code&gt; if this supports Application Insights; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="isPreview">&lt;code&gt;true&lt;/code&gt; if this stack is in Preview, otherwise
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="isDeprecated">&lt;code&gt;true&lt;/code&gt; if this stack has been deprecated, otherwise
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="isHidden">&lt;code&gt;true&lt;/code&gt; if this stack should be hidden for new customers on
        /// portal, otherwise &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="appSettingsDictionary">&lt;appSettings&gt;
        /// &lt;appSetting name=&#34;FUNCTIONS_WORKER_RUNTIME&#34; value=&#34;dotnet&#34; /&gt;
        /// &lt;/appSettings&gt;
        /// Example: All the function apps need AppSetting: &#34;FUNCTIONS_WORKER_RUNTIME&#34;
        /// to be set stack name
        /// </param>

        /// <param name="siteConfigPropertiesDictionary">&lt;siteConfigProperties&gt;
        /// &lt;siteConfigProperty name=&#34;Use32BitWorkerProcess&#34; value=&#34;false&#34; /&gt;
        /// &lt;/siteConfigProperties&gt;
        /// Example: All Linux Function Apps, need Use32BitWorkerProcess to be set to 0
        /// </param>
        public StackMajorVersion(string displayVersion = default(string), string runtimeVersion = default(string), bool? isDefault = default(bool?), System.Collections.Generic.IList<StackMinorVersion> minorVersions = default(System.Collections.Generic.IList<StackMinorVersion>), bool? applicationInsights = default(bool?), bool? isPreview = default(bool?), bool? isDeprecated = default(bool?), bool? isHidden = default(bool?), System.Collections.Generic.IDictionary<string, object> appSettingsDictionary = default(System.Collections.Generic.IDictionary<string, object>), System.Collections.Generic.IDictionary<string, object> siteConfigPropertiesDictionary = default(System.Collections.Generic.IDictionary<string, object>))

        {
            this.DisplayVersion = displayVersion;
            this.RuntimeVersion = runtimeVersion;
            this.IsDefault = isDefault;
            this.MinorVersions = minorVersions;
            this.ApplicationInsights = applicationInsights;
            this.IsPreview = isPreview;
            this.IsDeprecated = isDeprecated;
            this.IsHidden = isHidden;
            this.AppSettingsDictionary = appSettingsDictionary;
            this.SiteConfigPropertiesDictionary = siteConfigPropertiesDictionary;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets application stack major version (display only).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "displayVersion")]
        public string DisplayVersion {get; set; }

        /// <summary>
        /// Gets or sets application stack major version (runtime only).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runtimeVersion")]
        public string RuntimeVersion {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if this is the default major version;
        /// otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isDefault")]
        public bool? IsDefault {get; set; }

        /// <summary>
        /// Gets or sets minor versions associated with the major version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minorVersions")]
        public System.Collections.Generic.IList<StackMinorVersion> MinorVersions {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if this supports Application Insights;
        /// otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "applicationInsights")]
        public bool? ApplicationInsights {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if this stack is in Preview, otherwise
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isPreview")]
        public bool? IsPreview {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if this stack has been deprecated, otherwise
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isDeprecated")]
        public bool? IsDeprecated {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if this stack should be hidden for new
        /// customers on portal, otherwise &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isHidden")]
        public bool? IsHidden {get; set; }

        /// <summary>
        /// Gets or sets &lt;appSettings&gt;
        /// &lt;appSetting name=&#34;FUNCTIONS_WORKER_RUNTIME&#34; value=&#34;dotnet&#34; /&gt;
        /// &lt;/appSettings&gt;
        /// Example: All the function apps need AppSetting: &#34;FUNCTIONS_WORKER_RUNTIME&#34;
        /// to be set stack name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "appSettingsDictionary")]
        public System.Collections.Generic.IDictionary<string, object> AppSettingsDictionary {get; set; }

        /// <summary>
        /// Gets or sets &lt;siteConfigProperties&gt;
        /// &lt;siteConfigProperty name=&#34;Use32BitWorkerProcess&#34; value=&#34;false&#34; /&gt;
        /// &lt;/siteConfigProperties&gt;
        /// Example: All Linux Function Apps, need Use32BitWorkerProcess to be set to 0
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "siteConfigPropertiesDictionary")]
        public System.Collections.Generic.IDictionary<string, object> SiteConfigPropertiesDictionary {get; set; }
    }
}