// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Represents a recommendation rule that the recommendation engine can
    /// perform.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class RecommendationRule : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the RecommendationRule class.
        /// </summary>
        public RecommendationRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RecommendationRule class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="channels">List of available channels that this rule applies.
        /// Possible values include: &#39;Notification&#39;, &#39;Api&#39;, &#39;Email&#39;, &#39;Webhook&#39;, &#39;All&#39;</param>

        /// <param name="recommendationName">Unique name of the rule.
        /// </param>

        /// <param name="displayName">UI friendly name of the rule.
        /// </param>

        /// <param name="message">Localized name of the rule (Good for UI).
        /// </param>

        /// <param name="recommendationId">Recommendation ID of an associated recommendation object tied to the rule,
        /// if exists.
        /// If such an object doesn&#39;t exist, it is set to null.
        /// </param>

        /// <param name="description">Localized detailed description of the rule.
        /// </param>

        /// <param name="actionName">Name of action that is recommended by this rule in string.
        /// </param>

        /// <param name="level">Level of impact indicating how critical this rule is.
        /// Possible values include: &#39;Critical&#39;, &#39;Warning&#39;, &#39;Information&#39;,
        /// &#39;NonUrgentSuggestion&#39;</param>

        /// <param name="categoryTags">The list of category tags that this recommendation rule belongs to.
        /// </param>

        /// <param name="isDynamic">True if this is associated with a dynamically added rule
        /// </param>

        /// <param name="extensionName">Extension name of the portal if exists. Applicable to dynamic rule only.
        /// </param>

        /// <param name="bladeName">Deep link to a blade on the portal. Applicable to dynamic rule only.
        /// </param>

        /// <param name="forwardLink">Forward link to an external document associated with the rule. Applicable
        /// to dynamic rule only.
        /// </param>
        public RecommendationRule(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), Channels? channels = default(Channels?), string recommendationName = default(string), string displayName = default(string), string message = default(string), System.Guid? recommendationId = default(System.Guid?), string description = default(string), string actionName = default(string), NotificationLevel? level = default(NotificationLevel?), System.Collections.Generic.IList<string> categoryTags = default(System.Collections.Generic.IList<string>), bool? isDynamic = default(bool?), string extensionName = default(string), string bladeName = default(string), string forwardLink = default(string))

        : base(id, name, kind, type)
        {
            this.Channels = channels;
            this.RecommendationName = recommendationName;
            this.DisplayName = displayName;
            this.Message = message;
            this.RecommendationId = recommendationId;
            this.Description = description;
            this.ActionName = actionName;
            this.Level = level;
            this.CategoryTags = categoryTags;
            this.IsDynamic = isDynamic;
            this.ExtensionName = extensionName;
            this.BladeName = bladeName;
            this.ForwardLink = forwardLink;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets list of available channels that this rule applies. Possible values include: &#39;Notification&#39;, &#39;Api&#39;, &#39;Email&#39;, &#39;Webhook&#39;, &#39;All&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.channels")]
        public Channels? Channels {get; set; }

        /// <summary>
        /// Gets or sets unique name of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.recommendationName")]
        public string RecommendationName {get; set; }

        /// <summary>
        /// Gets or sets uI friendly name of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets localized name of the rule (Good for UI).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.message")]
        public string Message {get; set; }

        /// <summary>
        /// Gets or sets recommendation ID of an associated recommendation object tied
        /// to the rule, if exists.
        /// If such an object doesn&#39;t exist, it is set to null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.recommendationId")]
        public System.Guid? RecommendationId {get; set; }

        /// <summary>
        /// Gets or sets localized detailed description of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets name of action that is recommended by this rule in string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.actionName")]
        public string ActionName {get; set; }

        /// <summary>
        /// Gets or sets level of impact indicating how critical this rule is. Possible values include: &#39;Critical&#39;, &#39;Warning&#39;, &#39;Information&#39;, &#39;NonUrgentSuggestion&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.level")]
        public NotificationLevel? Level {get; set; }

        /// <summary>
        /// Gets the list of category tags that this recommendation rule belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.categoryTags")]
        public System.Collections.Generic.IList<string> CategoryTags {get; private set; }

        /// <summary>
        /// Gets or sets true if this is associated with a dynamically added rule
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isDynamic")]
        public bool? IsDynamic {get; set; }

        /// <summary>
        /// Gets or sets extension name of the portal if exists. Applicable to dynamic
        /// rule only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.extensionName")]
        public string ExtensionName {get; set; }

        /// <summary>
        /// Gets or sets deep link to a blade on the portal. Applicable to dynamic rule
        /// only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.bladeName")]
        public string BladeName {get; set; }

        /// <summary>
        /// Gets or sets forward link to an external document associated with the rule.
        /// Applicable to dynamic rule only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.forwardLink")]
        public string ForwardLink {get; set; }
    }
}