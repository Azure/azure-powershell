// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Details about app recovery operation.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SnapshotRestoreRequest : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the SnapshotRestoreRequest class.
        /// </summary>
        public SnapshotRestoreRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SnapshotRestoreRequest class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="snapshotTime">Point in time in which the app restore should be done, formatted as a
        /// DateTime string.
        /// </param>

        /// <param name="recoverySource">Optional. Specifies the web app that snapshot contents will be retrieved
        /// from.
        /// If empty, the targeted web app will be used as the source.
        /// </param>

        /// <param name="overwrite">If &lt;code&gt;true&lt;/code&gt; the restore operation can overwrite source app;
        /// otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="recoverConfiguration">If true, site configuration, in addition to content, will be reverted.
        /// </param>

        /// <param name="ignoreConflictingHostNames">If true, custom hostname conflicts will be ignored when recovering to a
        /// target web app.
        /// This setting is only necessary when RecoverConfiguration is enabled.
        /// </param>

        /// <param name="useDrSecondary">If true, the snapshot is retrieved from DRSecondary endpoint.
        /// </param>
        public SnapshotRestoreRequest(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), string snapshotTime = default(string), SnapshotRecoverySource recoverySource = default(SnapshotRecoverySource), bool? overwrite = default(bool?), bool? recoverConfiguration = default(bool?), bool? ignoreConflictingHostNames = default(bool?), bool? useDrSecondary = default(bool?))

        : base(id, name, kind, type)
        {
            this.SnapshotTime = snapshotTime;
            this.RecoverySource = recoverySource;
            this.Overwrite = overwrite;
            this.RecoverConfiguration = recoverConfiguration;
            this.IgnoreConflictingHostNames = ignoreConflictingHostNames;
            this.UseDrSecondary = useDrSecondary;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets point in time in which the app restore should be done,
        /// formatted as a DateTime string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.snapshotTime")]
        public string SnapshotTime {get; set; }

        /// <summary>
        /// Gets or sets optional. Specifies the web app that snapshot contents will be
        /// retrieved from.
        /// If empty, the targeted web app will be used as the source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.recoverySource")]
        public SnapshotRecoverySource RecoverySource {get; set; }

        /// <summary>
        /// Gets or sets if &lt;code&gt;true&lt;/code&gt; the restore operation can overwrite
        /// source app; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.overwrite")]
        public bool? Overwrite {get; set; }

        /// <summary>
        /// Gets or sets if true, site configuration, in addition to content, will be
        /// reverted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.recoverConfiguration")]
        public bool? RecoverConfiguration {get; set; }

        /// <summary>
        /// Gets or sets if true, custom hostname conflicts will be ignored when
        /// recovering to a target web app.
        /// This setting is only necessary when RecoverConfiguration is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ignoreConflictingHostNames")]
        public bool? IgnoreConflictingHostNames {get; set; }

        /// <summary>
        /// Gets or sets if true, the snapshot is retrieved from DRSecondary endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.useDRSecondary")]
        public bool? UseDrSecondary {get; set; }
    }
}