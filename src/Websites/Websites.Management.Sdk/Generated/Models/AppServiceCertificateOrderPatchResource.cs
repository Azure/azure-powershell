// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// ARM resource for a certificate order that is purchased through Azure.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class AppServiceCertificateOrderPatchResource : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the AppServiceCertificateOrderPatchResource class.
        /// </summary>
        public AppServiceCertificateOrderPatchResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AppServiceCertificateOrderPatchResource class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="provisioningState">Status of certificate order.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;InProgress&#39;,
        /// &#39;Deleting&#39;</param>

        /// <param name="certificates">State of the Key Vault secret.
        /// </param>

        /// <param name="distinguishedName">Certificate distinguished name.
        /// </param>

        /// <param name="domainVerificationToken">Domain verification token.
        /// </param>

        /// <param name="validityInYears">Duration in years (must be 1).
        /// </param>

        /// <param name="keySize">Certificate key size.
        /// </param>

        /// <param name="productType">Certificate product type.
        /// Possible values include: &#39;StandardDomainValidatedSsl&#39;,
        /// &#39;StandardDomainValidatedWildCardSsl&#39;</param>

        /// <param name="autoRenew">&lt;code&gt;true&lt;/code&gt; if the certificate should be automatically renewed when
        /// it expires; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="status">Current order status.
        /// Possible values include: &#39;Pendingissuance&#39;, &#39;Issued&#39;, &#39;Revoked&#39;,
        /// &#39;Canceled&#39;, &#39;Denied&#39;, &#39;Pendingrevocation&#39;, &#39;PendingRekey&#39;, &#39;Unused&#39;,
        /// &#39;Expired&#39;, &#39;NotSubmitted&#39;</param>

        /// <param name="signedCertificate">Signed certificate.
        /// </param>

        /// <param name="csr">Last CSR that was created for this order.
        /// </param>

        /// <param name="intermediate">Intermediate certificate.
        /// </param>

        /// <param name="root">Root certificate.
        /// </param>

        /// <param name="serialNumber">Current serial number of the certificate.
        /// </param>

        /// <param name="lastCertificateIssuanceTime">Certificate last issuance time.
        /// </param>

        /// <param name="expirationTime">Certificate expiration time.
        /// </param>

        /// <param name="isPrivateKeyExternal">&lt;code&gt;true&lt;/code&gt; if private key is external; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="appServiceCertificateNotRenewableReasons">Reasons why App Service Certificate is not renewable at the current moment.
        /// </param>

        /// <param name="nextAutoRenewalTimeStamp">Time stamp when the certificate would be auto renewed next
        /// </param>

        /// <param name="contact">Contact info
        /// </param>
        public AppServiceCertificateOrderPatchResource(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), ProvisioningState? provisioningState = default(ProvisioningState?), System.Collections.Generic.IDictionary<string, AppServiceCertificate> certificates = default(System.Collections.Generic.IDictionary<string, AppServiceCertificate>), string distinguishedName = default(string), string domainVerificationToken = default(string), int? validityInYears = default(int?), int? keySize = default(int?), CertificateProductType? productType = default(CertificateProductType?), bool? autoRenew = default(bool?), CertificateOrderStatus? status = default(CertificateOrderStatus?), CertificateDetails signedCertificate = default(CertificateDetails), string csr = default(string), CertificateDetails intermediate = default(CertificateDetails), CertificateDetails root = default(CertificateDetails), string serialNumber = default(string), System.DateTime? lastCertificateIssuanceTime = default(System.DateTime?), System.DateTime? expirationTime = default(System.DateTime?), bool? isPrivateKeyExternal = default(bool?), System.Collections.Generic.IList<string> appServiceCertificateNotRenewableReasons = default(System.Collections.Generic.IList<string>), System.DateTime? nextAutoRenewalTimeStamp = default(System.DateTime?), CertificateOrderContact contact = default(CertificateOrderContact))

        : base(id, name, kind, type)
        {
            this.ProvisioningState = provisioningState;
            this.Certificates = certificates;
            this.DistinguishedName = distinguishedName;
            this.DomainVerificationToken = domainVerificationToken;
            this.ValidityInYears = validityInYears;
            this.KeySize = keySize;
            this.ProductType = productType;
            this.AutoRenew = autoRenew;
            this.Status = status;
            this.SignedCertificate = signedCertificate;
            this.Csr = csr;
            this.Intermediate = intermediate;
            this.Root = root;
            this.SerialNumber = serialNumber;
            this.LastCertificateIssuanceTime = lastCertificateIssuanceTime;
            this.ExpirationTime = expirationTime;
            this.IsPrivateKeyExternal = isPrivateKeyExternal;
            this.AppServiceCertificateNotRenewableReasons = appServiceCertificateNotRenewableReasons;
            this.NextAutoRenewalTimeStamp = nextAutoRenewalTimeStamp;
            this.Contact = contact;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets status of certificate order. Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;InProgress&#39;, &#39;Deleting&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState? ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets state of the Key Vault secret.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.certificates")]
        public System.Collections.Generic.IDictionary<string, AppServiceCertificate> Certificates {get; set; }

        /// <summary>
        /// Gets or sets certificate distinguished name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.distinguishedName")]
        public string DistinguishedName {get; set; }

        /// <summary>
        /// Gets domain verification token.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.domainVerificationToken")]
        public string DomainVerificationToken {get; private set; }

        /// <summary>
        /// Gets or sets duration in years (must be 1).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.validityInYears")]
        public int? ValidityInYears {get; set; }

        /// <summary>
        /// Gets or sets certificate key size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.keySize")]
        public int? KeySize {get; set; }

        /// <summary>
        /// Gets or sets certificate product type. Possible values include: &#39;StandardDomainValidatedSsl&#39;, &#39;StandardDomainValidatedWildCardSsl&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.productType")]
        public CertificateProductType? ProductType {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if the certificate should be automatically
        /// renewed when it expires; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.autoRenew")]
        public bool? AutoRenew {get; set; }

        /// <summary>
        /// Gets current order status. Possible values include: &#39;Pendingissuance&#39;, &#39;Issued&#39;, &#39;Revoked&#39;, &#39;Canceled&#39;, &#39;Denied&#39;, &#39;Pendingrevocation&#39;, &#39;PendingRekey&#39;, &#39;Unused&#39;, &#39;Expired&#39;, &#39;NotSubmitted&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public CertificateOrderStatus? Status {get; private set; }

        /// <summary>
        /// Gets signed certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.signedCertificate")]
        public CertificateDetails SignedCertificate {get; private set; }

        /// <summary>
        /// Gets or sets last CSR that was created for this order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.csr")]
        public string Csr {get; set; }

        /// <summary>
        /// Gets intermediate certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.intermediate")]
        public CertificateDetails Intermediate {get; private set; }

        /// <summary>
        /// Gets root certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.root")]
        public CertificateDetails Root {get; private set; }

        /// <summary>
        /// Gets current serial number of the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serialNumber")]
        public string SerialNumber {get; private set; }

        /// <summary>
        /// Gets certificate last issuance time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.lastCertificateIssuanceTime")]
        public System.DateTime? LastCertificateIssuanceTime {get; private set; }

        /// <summary>
        /// Gets certificate expiration time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.expirationTime")]
        public System.DateTime? ExpirationTime {get; private set; }

        /// <summary>
        /// Gets &lt;code&gt;true&lt;/code&gt; if private key is external; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isPrivateKeyExternal")]
        public bool? IsPrivateKeyExternal {get; private set; }

        /// <summary>
        /// Gets reasons why App Service Certificate is not renewable at the current
        /// moment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.appServiceCertificateNotRenewableReasons")]
        public System.Collections.Generic.IList<string> AppServiceCertificateNotRenewableReasons {get; private set; }

        /// <summary>
        /// Gets time stamp when the certificate would be auto renewed next
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.nextAutoRenewalTimeStamp")]
        public System.DateTime? NextAutoRenewalTimeStamp {get; private set; }

        /// <summary>
        /// Gets contact info
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.contact")]
        public CertificateOrderContact Contact {get; private set; }
    }
}