// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Linux Java Container settings.
    /// </summary>
    public partial class LinuxJavaContainerSettings
    {
        /// <summary>
        /// Initializes a new instance of the LinuxJavaContainerSettings class.
        /// </summary>
        public LinuxJavaContainerSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LinuxJavaContainerSettings class.
        /// </summary>

        /// <param name="java11Runtime">Java 11 version (runtime only).
        /// </param>

        /// <param name="java8Runtime">Java 8 version (runtime only).
        /// </param>

        /// <param name="isPreview">&lt;code&gt;true&lt;/code&gt; if the stack is in preview; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="isDeprecated">&lt;code&gt;true&lt;/code&gt; if the stack is deprecated; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="isHidden">&lt;code&gt;true&lt;/code&gt; if the stack should be hidden; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="endOfLifeDate">End-of-life date for the minor version.
        /// </param>

        /// <param name="isAutoUpdate">&lt;code&gt;true&lt;/code&gt; if the stack version is auto-updated; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="isEarlyAccess">&lt;code&gt;true&lt;/code&gt; if the minor version is early-access; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>
        public LinuxJavaContainerSettings(string java11Runtime = default(string), string java8Runtime = default(string), bool? isPreview = default(bool?), bool? isDeprecated = default(bool?), bool? isHidden = default(bool?), System.DateTime? endOfLifeDate = default(System.DateTime?), bool? isAutoUpdate = default(bool?), bool? isEarlyAccess = default(bool?))

        {
            this.Java11Runtime = java11Runtime;
            this.Java8Runtime = java8Runtime;
            this.IsPreview = isPreview;
            this.IsDeprecated = isDeprecated;
            this.IsHidden = isHidden;
            this.EndOfLifeDate = endOfLifeDate;
            this.IsAutoUpdate = isAutoUpdate;
            this.IsEarlyAccess = isEarlyAccess;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets java 11 version (runtime only).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "java11Runtime")]
        public string Java11Runtime {get; private set; }

        /// <summary>
        /// Gets java 8 version (runtime only).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "java8Runtime")]
        public string Java8Runtime {get; private set; }

        /// <summary>
        /// Gets &lt;code&gt;true&lt;/code&gt; if the stack is in preview; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isPreview")]
        public bool? IsPreview {get; private set; }

        /// <summary>
        /// Gets &lt;code&gt;true&lt;/code&gt; if the stack is deprecated; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isDeprecated")]
        public bool? IsDeprecated {get; private set; }

        /// <summary>
        /// Gets &lt;code&gt;true&lt;/code&gt; if the stack should be hidden; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isHidden")]
        public bool? IsHidden {get; private set; }

        /// <summary>
        /// Gets end-of-life date for the minor version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endOfLifeDate")]
        public System.DateTime? EndOfLifeDate {get; private set; }

        /// <summary>
        /// Gets &lt;code&gt;true&lt;/code&gt; if the stack version is auto-updated; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isAutoUpdate")]
        public bool? IsAutoUpdate {get; private set; }

        /// <summary>
        /// Gets &lt;code&gt;true&lt;/code&gt; if the minor version is early-access; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isEarlyAccess")]
        public bool? IsEarlyAccess {get; private set; }
    }
}