// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// A web app, a mobile app backend, or an API app.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Site : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Site class.
        /// </summary>
        public Site()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Site class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="location">Resource Location.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="identity">Managed service identity.
        /// </param>

        /// <param name="extendedLocation">Extended Location.
        /// </param>

        /// <param name="usageState">State indicating whether the app has exceeded its quota usage. Read-only.
        /// Possible values include: &#39;Normal&#39;, &#39;Exceeded&#39;</param>

        /// <param name="siteConfig">Configuration of the app.
        /// </param>

        /// <param name="cloningInfo">If specified during app creation, the app is cloned from a source app.
        /// </param>

        /// <param name="redundancyMode">Site redundancy mode
        /// Possible values include: &#39;None&#39;, &#39;Manual&#39;, &#39;Failover&#39;, &#39;ActiveActive&#39;,
        /// &#39;GeoRedundant&#39;</param>

        /// <param name="state">Current state of the app.
        /// </param>

        /// <param name="hostNames">Hostnames associated with the app.
        /// </param>

        /// <param name="repositorySiteName">Name of the repository site.
        /// </param>

        /// <param name="enabled">&lt;code&gt;true&lt;/code&gt; if the app is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// Setting this value to false disables the app (takes the app offline).
        /// </param>

        /// <param name="enabledHostNames">Enabled hostnames for the app.Hostnames need to be assigned (see HostNames)
        /// AND enabled. Otherwise,
        /// the app is not served on those hostnames.
        /// </param>

        /// <param name="availabilityState">Management information availability state for the app.
        /// Possible values include: &#39;Normal&#39;, &#39;Limited&#39;, &#39;DisasterRecoveryMode&#39;</param>

        /// <param name="hostNameSslStates">Hostname SSL states are used to manage the SSL bindings for app&#39;s
        /// hostnames.
        /// </param>

        /// <param name="serverFarmId">Resource ID of the associated App Service plan, formatted as:
        /// &#34;/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}&#34;.
        /// </param>

        /// <param name="reserved">&lt;code&gt;true&lt;/code&gt; if reserved; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="isXenon">Obsolete: Hyper-V sandbox.
        /// </param>

        /// <param name="hyperV">Hyper-V sandbox.
        /// </param>

        /// <param name="lastModifiedTimeUtc">Last time the app was modified, in UTC. Read-only.
        /// </param>

        /// <param name="trafficManagerHostNames">Azure Traffic Manager hostnames associated with the app. Read-only.
        /// </param>

        /// <param name="scmSiteAlsoStopped">&lt;code&gt;true&lt;/code&gt; to stop SCM (KUDU) site when the app is stopped;
        /// otherwise, &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="targetSwapSlot">Specifies which deployment slot this app will swap into. Read-only.
        /// </param>

        /// <param name="hostingEnvironmentProfile">App Service Environment to use for the app.
        /// </param>

        /// <param name="clientAffinityEnabled">&lt;code&gt;true&lt;/code&gt; to enable client affinity; &lt;code&gt;false&lt;/code&gt; to stop
        /// sending session affinity cookies, which route client requests in the same
        /// session to the same instance. Default is &lt;code&gt;true&lt;/code&gt;.
        /// </param>

        /// <param name="clientCertEnabled">&lt;code&gt;true&lt;/code&gt; to enable client certificate authentication (TLS mutual
        /// authentication); otherwise, &lt;code&gt;false&lt;/code&gt;. Default is
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="clientCertMode">This composes with ClientCertEnabled setting.
        /// - ClientCertEnabled: false means ClientCert is ignored.
        /// - ClientCertEnabled: true and ClientCertMode: Required means ClientCert is
        /// required.
        /// - ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is
        /// optional or accepted.
        /// Possible values include: &#39;Required&#39;, &#39;Optional&#39;, &#39;OptionalInteractiveUser&#39;</param>

        /// <param name="clientCertExclusionPaths">client certificate authentication comma-separated exclusion paths
        /// </param>

        /// <param name="hostNamesDisabled">&lt;code&gt;true&lt;/code&gt; to disable the public hostnames of the app; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// If &lt;code&gt;true&lt;/code&gt;, the app is only accessible via API management
        /// process.
        /// </param>

        /// <param name="customDomainVerificationId">Unique identifier that verifies the custom domains assigned to the app.
        /// Customer will add this id to a txt record for verification.
        /// </param>

        /// <param name="outboundIPAddresses">List of IP addresses that the app uses for outbound connections (e.g.
        /// database access). Includes VIPs from tenants that site can be hosted with
        /// current settings. Read-only.
        /// </param>

        /// <param name="possibleOutboundIPAddresses">List of IP addresses that the app uses for outbound connections (e.g.
        /// database access). Includes VIPs from all tenants except dataComponent.
        /// Read-only.
        /// </param>

        /// <param name="containerSize">Size of the function container.
        /// </param>

        /// <param name="dailyMemoryTimeQuota">Maximum allowed daily memory-time quota (applicable on dynamic apps only).
        /// </param>

        /// <param name="suspendedTill">App suspended till in case memory-time quota is exceeded.
        /// </param>

        /// <param name="maxNumberOfWorkers">Maximum number of workers.
        /// This only applies to Functions container.
        /// </param>

        /// <param name="resourceGroup">Name of the resource group the app belongs to. Read-only.
        /// </param>

        /// <param name="isDefaultContainer">&lt;code&gt;true&lt;/code&gt; if the app is a default container; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="defaultHostName">Default hostname of the app. Read-only.
        /// </param>

        /// <param name="slotSwapStatus">Status of the last deployment slot swap operation.
        /// </param>

        /// <param name="httpsOnly">HttpsOnly: configures a web site to accept only https requests. Issues
        /// redirect for
        /// http requests
        /// </param>

        /// <param name="inProgressOperationId">Specifies an operation id if this site has a pending operation.
        /// </param>

        /// <param name="storageAccountRequired">Checks if Customer provided storage account is required
        /// </param>

        /// <param name="keyVaultReferenceIdentity">Identity to use for Key Vault Reference authentication.
        /// </param>

        /// <param name="virtualNetworkSubnetId">Azure Resource Manager ID of the Virtual network and subnet to be joined by
        /// Regional VNET Integration.
        /// This must be of the form
        /// /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}
        /// </param>
        public Site(string location, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), ManagedServiceIdentity identity = default(ManagedServiceIdentity), ExtendedLocation extendedLocation = default(ExtendedLocation), UsageState? usageState = default(UsageState?), SiteConfig siteConfig = default(SiteConfig), CloningInfo cloningInfo = default(CloningInfo), RedundancyMode? redundancyMode = default(RedundancyMode?), string state = default(string), System.Collections.Generic.IList<string> hostNames = default(System.Collections.Generic.IList<string>), string repositorySiteName = default(string), bool? enabled = default(bool?), System.Collections.Generic.IList<string> enabledHostNames = default(System.Collections.Generic.IList<string>), SiteAvailabilityState? availabilityState = default(SiteAvailabilityState?), System.Collections.Generic.IList<HostNameSslState> hostNameSslStates = default(System.Collections.Generic.IList<HostNameSslState>), string serverFarmId = default(string), bool? reserved = default(bool?), bool? isXenon = default(bool?), bool? hyperV = default(bool?), System.DateTime? lastModifiedTimeUtc = default(System.DateTime?), System.Collections.Generic.IList<string> trafficManagerHostNames = default(System.Collections.Generic.IList<string>), bool? scmSiteAlsoStopped = default(bool?), string targetSwapSlot = default(string), HostingEnvironmentProfile hostingEnvironmentProfile = default(HostingEnvironmentProfile), bool? clientAffinityEnabled = default(bool?), bool? clientCertEnabled = default(bool?), ClientCertMode? clientCertMode = default(ClientCertMode?), string clientCertExclusionPaths = default(string), bool? hostNamesDisabled = default(bool?), string customDomainVerificationId = default(string), string outboundIPAddresses = default(string), string possibleOutboundIPAddresses = default(string), int? containerSize = default(int?), int? dailyMemoryTimeQuota = default(int?), System.DateTime? suspendedTill = default(System.DateTime?), int? maxNumberOfWorkers = default(int?), string resourceGroup = default(string), bool? isDefaultContainer = default(bool?), string defaultHostName = default(string), SlotSwapStatus slotSwapStatus = default(SlotSwapStatus), bool? httpsOnly = default(bool?), System.Guid? inProgressOperationId = default(System.Guid?), bool? storageAccountRequired = default(bool?), string keyVaultReferenceIdentity = default(string), string virtualNetworkSubnetId = default(string))

        : base(location, id, name, kind, type, tags)
        {
            this.Identity = identity;
            this.ExtendedLocation = extendedLocation;
            this.UsageState = usageState;
            this.SiteConfig = siteConfig;
            this.CloningInfo = cloningInfo;
            this.RedundancyMode = redundancyMode;
            this.State = state;
            this.HostNames = hostNames;
            this.RepositorySiteName = repositorySiteName;
            this.Enabled = enabled;
            this.EnabledHostNames = enabledHostNames;
            this.AvailabilityState = availabilityState;
            this.HostNameSslStates = hostNameSslStates;
            this.ServerFarmId = serverFarmId;
            this.Reserved = reserved;
            this.IsXenon = isXenon;
            this.HyperV = hyperV;
            this.LastModifiedTimeUtc = lastModifiedTimeUtc;
            this.TrafficManagerHostNames = trafficManagerHostNames;
            this.ScmSiteAlsoStopped = scmSiteAlsoStopped;
            this.TargetSwapSlot = targetSwapSlot;
            this.HostingEnvironmentProfile = hostingEnvironmentProfile;
            this.ClientAffinityEnabled = clientAffinityEnabled;
            this.ClientCertEnabled = clientCertEnabled;
            this.ClientCertMode = clientCertMode;
            this.ClientCertExclusionPaths = clientCertExclusionPaths;
            this.HostNamesDisabled = hostNamesDisabled;
            this.CustomDomainVerificationId = customDomainVerificationId;
            this.OutboundIPAddresses = outboundIPAddresses;
            this.PossibleOutboundIPAddresses = possibleOutboundIPAddresses;
            this.ContainerSize = containerSize;
            this.DailyMemoryTimeQuota = dailyMemoryTimeQuota;
            this.SuspendedTill = suspendedTill;
            this.MaxNumberOfWorkers = maxNumberOfWorkers;
            this.ResourceGroup = resourceGroup;
            this.IsDefaultContainer = isDefaultContainer;
            this.DefaultHostName = defaultHostName;
            this.SlotSwapStatus = slotSwapStatus;
            this.HttpsOnly = httpsOnly;
            this.InProgressOperationId = inProgressOperationId;
            this.StorageAccountRequired = storageAccountRequired;
            this.KeyVaultReferenceIdentity = keyVaultReferenceIdentity;
            this.VirtualNetworkSubnetId = virtualNetworkSubnetId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets managed service identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public ManagedServiceIdentity Identity {get; set; }

        /// <summary>
        /// Gets or sets extended Location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "extendedLocation")]
        public ExtendedLocation ExtendedLocation {get; set; }

        /// <summary>
        /// Gets state indicating whether the app has exceeded its quota usage.
        /// Read-only. Possible values include: &#39;Normal&#39;, &#39;Exceeded&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.usageState")]
        public UsageState? UsageState {get; private set; }

        /// <summary>
        /// Gets or sets configuration of the app.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.siteConfig")]
        public SiteConfig SiteConfig {get; set; }

        /// <summary>
        /// Gets or sets if specified during app creation, the app is cloned from a
        /// source app.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.cloningInfo")]
        public CloningInfo CloningInfo {get; set; }

        /// <summary>
        /// Gets or sets site redundancy mode Possible values include: &#39;None&#39;, &#39;Manual&#39;, &#39;Failover&#39;, &#39;ActiveActive&#39;, &#39;GeoRedundant&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.redundancyMode")]
        public RedundancyMode? RedundancyMode {get; set; }

        /// <summary>
        /// Gets current state of the app.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.state")]
        public string State {get; private set; }

        /// <summary>
        /// Gets hostnames associated with the app.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hostNames")]
        public System.Collections.Generic.IList<string> HostNames {get; private set; }

        /// <summary>
        /// Gets name of the repository site.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.repositorySiteName")]
        public string RepositorySiteName {get; private set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if the app is enabled; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;. Setting this value to false disables the app (takes the
        /// app offline).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enabled")]
        public bool? Enabled {get; set; }

        /// <summary>
        /// Gets enabled hostnames for the app.Hostnames need to be assigned (see
        /// HostNames) AND enabled. Otherwise,
        /// the app is not served on those hostnames.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enabledHostNames")]
        public System.Collections.Generic.IList<string> EnabledHostNames {get; private set; }

        /// <summary>
        /// Gets management information availability state for the app. Possible values include: &#39;Normal&#39;, &#39;Limited&#39;, &#39;DisasterRecoveryMode&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.availabilityState")]
        public SiteAvailabilityState? AvailabilityState {get; private set; }

        /// <summary>
        /// Gets or sets hostname SSL states are used to manage the SSL bindings for
        /// app&#39;s hostnames.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hostNameSslStates")]
        public System.Collections.Generic.IList<HostNameSslState> HostNameSslStates {get; set; }

        /// <summary>
        /// Gets or sets resource ID of the associated App Service plan, formatted as:
        /// &#34;/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serverFarmId")]
        public string ServerFarmId {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if reserved; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.reserved")]
        public bool? Reserved {get; set; }

        /// <summary>
        /// Gets or sets obsolete: Hyper-V sandbox.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isXenon")]
        public bool? IsXenon {get; set; }

        /// <summary>
        /// Gets or sets hyper-V sandbox.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hyperV")]
        public bool? HyperV {get; set; }

        /// <summary>
        /// Gets last time the app was modified, in UTC. Read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.lastModifiedTimeUtc")]
        public System.DateTime? LastModifiedTimeUtc {get; private set; }

        /// <summary>
        /// Gets azure Traffic Manager hostnames associated with the app. Read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.trafficManagerHostNames")]
        public System.Collections.Generic.IList<string> TrafficManagerHostNames {get; private set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; to stop SCM (KUDU) site when the app is
        /// stopped; otherwise, &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.scmSiteAlsoStopped")]
        public bool? ScmSiteAlsoStopped {get; set; }

        /// <summary>
        /// Gets specifies which deployment slot this app will swap into. Read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.targetSwapSlot")]
        public string TargetSwapSlot {get; private set; }

        /// <summary>
        /// Gets or sets app Service Environment to use for the app.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hostingEnvironmentProfile")]
        public HostingEnvironmentProfile HostingEnvironmentProfile {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; to enable client affinity;
        /// &lt;code&gt;false&lt;/code&gt; to stop sending session affinity cookies, which route
        /// client requests in the same session to the same instance. Default is
        /// &lt;code&gt;true&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.clientAffinityEnabled")]
        public bool? ClientAffinityEnabled {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; to enable client certificate authentication
        /// (TLS mutual authentication); otherwise, &lt;code&gt;false&lt;/code&gt;. Default is
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.clientCertEnabled")]
        public bool? ClientCertEnabled {get; set; }

        /// <summary>
        /// Gets or sets this composes with ClientCertEnabled setting.
        /// - ClientCertEnabled: false means ClientCert is ignored.
        /// - ClientCertEnabled: true and ClientCertMode: Required means ClientCert is
        /// required.
        /// - ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is
        /// optional or accepted. Possible values include: &#39;Required&#39;, &#39;Optional&#39;, &#39;OptionalInteractiveUser&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.clientCertMode")]
        public ClientCertMode? ClientCertMode {get; set; }

        /// <summary>
        /// Gets or sets client certificate authentication comma-separated exclusion
        /// paths
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.clientCertExclusionPaths")]
        public string ClientCertExclusionPaths {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; to disable the public hostnames of the app;
        /// otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// If &lt;code&gt;true&lt;/code&gt;, the app is only accessible via API management
        /// process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hostNamesDisabled")]
        public bool? HostNamesDisabled {get; set; }

        /// <summary>
        /// Gets or sets unique identifier that verifies the custom domains assigned to
        /// the app. Customer will add this id to a txt record for verification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.customDomainVerificationId")]
        public string CustomDomainVerificationId {get; set; }

        /// <summary>
        /// Gets list of IP addresses that the app uses for outbound connections (e.g.
        /// database access). Includes VIPs from tenants that site can be hosted with
        /// current settings. Read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.outboundIpAddresses")]
        public string OutboundIPAddresses {get; private set; }

        /// <summary>
        /// Gets list of IP addresses that the app uses for outbound connections (e.g.
        /// database access). Includes VIPs from all tenants except dataComponent.
        /// Read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.possibleOutboundIpAddresses")]
        public string PossibleOutboundIPAddresses {get; private set; }

        /// <summary>
        /// Gets or sets size of the function container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.containerSize")]
        public int? ContainerSize {get; set; }

        /// <summary>
        /// Gets or sets maximum allowed daily memory-time quota (applicable on dynamic
        /// apps only).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dailyMemoryTimeQuota")]
        public int? DailyMemoryTimeQuota {get; set; }

        /// <summary>
        /// Gets app suspended till in case memory-time quota is exceeded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.suspendedTill")]
        public System.DateTime? SuspendedTill {get; private set; }

        /// <summary>
        /// Gets maximum number of workers.
        /// This only applies to Functions container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maxNumberOfWorkers")]
        public int? MaxNumberOfWorkers {get; private set; }

        /// <summary>
        /// Gets name of the resource group the app belongs to. Read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceGroup")]
        public string ResourceGroup {get; private set; }

        /// <summary>
        /// Gets &lt;code&gt;true&lt;/code&gt; if the app is a default container; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isDefaultContainer")]
        public bool? IsDefaultContainer {get; private set; }

        /// <summary>
        /// Gets default hostname of the app. Read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.defaultHostName")]
        public string DefaultHostName {get; private set; }

        /// <summary>
        /// Gets status of the last deployment slot swap operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.slotSwapStatus")]
        public SlotSwapStatus SlotSwapStatus {get; private set; }

        /// <summary>
        /// Gets or sets httpsOnly: configures a web site to accept only https
        /// requests. Issues redirect for
        /// http requests
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.httpsOnly")]
        public bool? HttpsOnly {get; set; }

        /// <summary>
        /// Gets specifies an operation id if this site has a pending operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.inProgressOperationId")]
        public System.Guid? InProgressOperationId {get; private set; }

        /// <summary>
        /// Gets or sets checks if Customer provided storage account is required
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.storageAccountRequired")]
        public bool? StorageAccountRequired {get; set; }

        /// <summary>
        /// Gets or sets identity to use for Key Vault Reference authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.keyVaultReferenceIdentity")]
        public string KeyVaultReferenceIdentity {get; set; }

        /// <summary>
        /// Gets or sets azure Resource Manager ID of the Virtual network and subnet to
        /// be joined by Regional VNET Integration.
        /// This must be of the form
        /// /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualNetworkSubnetId")]
        public string VirtualNetworkSubnetId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();



            if (this.SiteConfig != null)
            {
                this.SiteConfig.Validate();
            }
            if (this.CloningInfo != null)
            {
                this.CloningInfo.Validate();
            }





















        }
    }
}