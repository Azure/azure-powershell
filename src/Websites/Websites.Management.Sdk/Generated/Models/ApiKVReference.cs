// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Description of site key vault references.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ApiKVReference : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the ApiKVReference class.
        /// </summary>
        public ApiKVReference()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApiKVReference class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="reference">
        /// </param>

        /// <param name="status">
        /// Possible values include: &#39;Initialized&#39;, &#39;Resolved&#39;, &#39;InvalidSyntax&#39;,
        /// &#39;MSINotEnabled&#39;, &#39;VaultNotFound&#39;, &#39;SecretNotFound&#39;,
        /// &#39;SecretVersionNotFound&#39;, &#39;AccessToKeyVaultDenied&#39;, &#39;OtherReasons&#39;,
        /// &#39;FetchTimedOut&#39;, &#39;UnauthorizedClient&#39;</param>

        /// <param name="vaultName">
        /// </param>

        /// <param name="secretName">
        /// </param>

        /// <param name="secretVersion">
        /// </param>

        /// <param name="identityType">Managed service identity.
        /// </param>

        /// <param name="details">
        /// </param>

        /// <param name="source">
        /// Possible values include: &#39;KeyVault&#39;</param>

        /// <param name="activeVersion">
        /// </param>
        public ApiKVReference(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), string reference = default(string), ResolveStatus? status = default(ResolveStatus?), string vaultName = default(string), string secretName = default(string), string secretVersion = default(string), ManagedServiceIdentity identityType = default(ManagedServiceIdentity), string details = default(string), ConfigReferenceSource? source = default(ConfigReferenceSource?), string activeVersion = default(string))

        : base(id, name, kind, type)
        {
            this.Reference = reference;
            this.Status = status;
            this.VaultName = vaultName;
            this.SecretName = secretName;
            this.SecretVersion = secretVersion;
            this.IdentityType = identityType;
            this.Details = details;
            this.Source = source;
            this.ActiveVersion = activeVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.reference")]
        public string Reference {get; set; }

        /// <summary>
        /// Gets or sets Possible values include: &#39;Initialized&#39;, &#39;Resolved&#39;, &#39;InvalidSyntax&#39;, &#39;MSINotEnabled&#39;, &#39;VaultNotFound&#39;, &#39;SecretNotFound&#39;, &#39;SecretVersionNotFound&#39;, &#39;AccessToKeyVaultDenied&#39;, &#39;OtherReasons&#39;, &#39;FetchTimedOut&#39;, &#39;UnauthorizedClient&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public ResolveStatus? Status {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.vaultName")]
        public string VaultName {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.secretName")]
        public string SecretName {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.secretVersion")]
        public string SecretVersion {get; set; }

        /// <summary>
        /// Gets or sets managed service identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.identityType")]
        public ManagedServiceIdentity IdentityType {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.details")]
        public string Details {get; set; }

        /// <summary>
        /// Gets or sets Possible values include: &#39;KeyVault&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.source")]
        public ConfigReferenceSource? Source {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.activeVersion")]
        public string ActiveVersion {get; set; }
    }
}