// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Function App runtime settings.
    /// </summary>
    public partial class FunctionAppRuntimeSettings
    {
        /// <summary>
        /// Initializes a new instance of the FunctionAppRuntimeSettings class.
        /// </summary>
        public FunctionAppRuntimeSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FunctionAppRuntimeSettings class.
        /// </summary>

        /// <param name="runtimeVersion">Function App stack minor version (runtime only).
        /// </param>

        /// <param name="remoteDebuggingSupported">&lt;code&gt;true&lt;/code&gt; if remote debugging is supported for the stack;
        /// otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="appInsightsSettings">Application Insights settings associated with the minor version.
        /// </param>

        /// <param name="gitHubActionSettings">GitHub Actions settings associated with the minor version.
        /// </param>

        /// <param name="appSettingsDictionary">Application settings associated with the minor version.
        /// </param>

        /// <param name="siteConfigPropertiesDictionary">Configuration settings associated with the minor version.
        /// </param>

        /// <param name="supportedFunctionsExtensionVersions">List of supported Functions extension versions.
        /// </param>

        /// <param name="isPreview">&lt;code&gt;true&lt;/code&gt; if the stack is in preview; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="isDeprecated">&lt;code&gt;true&lt;/code&gt; if the stack is deprecated; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="isHidden">&lt;code&gt;true&lt;/code&gt; if the stack should be hidden; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="endOfLifeDate">End-of-life date for the minor version.
        /// </param>

        /// <param name="isAutoUpdate">&lt;code&gt;true&lt;/code&gt; if the stack version is auto-updated; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="isEarlyAccess">&lt;code&gt;true&lt;/code&gt; if the minor version is early-access; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="isDefault">&lt;code&gt;true&lt;/code&gt; if the minor version the default; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>
        public FunctionAppRuntimeSettings(string runtimeVersion = default(string), bool? remoteDebuggingSupported = default(bool?), AppInsightsWebAppStackSettings appInsightsSettings = default(AppInsightsWebAppStackSettings), GitHubActionWebAppStackSettings gitHubActionSettings = default(GitHubActionWebAppStackSettings), System.Collections.Generic.IDictionary<string, string> appSettingsDictionary = default(System.Collections.Generic.IDictionary<string, string>), SiteConfigPropertiesDictionary siteConfigPropertiesDictionary = default(SiteConfigPropertiesDictionary), System.Collections.Generic.IList<string> supportedFunctionsExtensionVersions = default(System.Collections.Generic.IList<string>), bool? isPreview = default(bool?), bool? isDeprecated = default(bool?), bool? isHidden = default(bool?), System.DateTime? endOfLifeDate = default(System.DateTime?), bool? isAutoUpdate = default(bool?), bool? isEarlyAccess = default(bool?), bool? isDefault = default(bool?))

        {
            this.RuntimeVersion = runtimeVersion;
            this.RemoteDebuggingSupported = remoteDebuggingSupported;
            this.AppInsightsSettings = appInsightsSettings;
            this.GitHubActionSettings = gitHubActionSettings;
            this.AppSettingsDictionary = appSettingsDictionary;
            this.SiteConfigPropertiesDictionary = siteConfigPropertiesDictionary;
            this.SupportedFunctionsExtensionVersions = supportedFunctionsExtensionVersions;
            this.IsPreview = isPreview;
            this.IsDeprecated = isDeprecated;
            this.IsHidden = isHidden;
            this.EndOfLifeDate = endOfLifeDate;
            this.IsAutoUpdate = isAutoUpdate;
            this.IsEarlyAccess = isEarlyAccess;
            this.IsDefault = isDefault;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets function App stack minor version (runtime only).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runtimeVersion")]
        public string RuntimeVersion {get; private set; }

        /// <summary>
        /// Gets &lt;code&gt;true&lt;/code&gt; if remote debugging is supported for the stack;
        /// otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "remoteDebuggingSupported")]
        public bool? RemoteDebuggingSupported {get; private set; }

        /// <summary>
        /// Gets application Insights settings associated with the minor version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "appInsightsSettings")]
        public AppInsightsWebAppStackSettings AppInsightsSettings {get; private set; }

        /// <summary>
        /// Gets gitHub Actions settings associated with the minor version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "gitHubActionSettings")]
        public GitHubActionWebAppStackSettings GitHubActionSettings {get; private set; }

        /// <summary>
        /// Gets application settings associated with the minor version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "appSettingsDictionary")]
        public System.Collections.Generic.IDictionary<string, string> AppSettingsDictionary {get; private set; }

        /// <summary>
        /// Gets configuration settings associated with the minor version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "siteConfigPropertiesDictionary")]
        public SiteConfigPropertiesDictionary SiteConfigPropertiesDictionary {get; private set; }

        /// <summary>
        /// Gets list of supported Functions extension versions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supportedFunctionsExtensionVersions")]
        public System.Collections.Generic.IList<string> SupportedFunctionsExtensionVersions {get; private set; }

        /// <summary>
        /// Gets &lt;code&gt;true&lt;/code&gt; if the stack is in preview; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isPreview")]
        public bool? IsPreview {get; private set; }

        /// <summary>
        /// Gets &lt;code&gt;true&lt;/code&gt; if the stack is deprecated; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isDeprecated")]
        public bool? IsDeprecated {get; private set; }

        /// <summary>
        /// Gets &lt;code&gt;true&lt;/code&gt; if the stack should be hidden; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isHidden")]
        public bool? IsHidden {get; private set; }

        /// <summary>
        /// Gets end-of-life date for the minor version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endOfLifeDate")]
        public System.DateTime? EndOfLifeDate {get; private set; }

        /// <summary>
        /// Gets &lt;code&gt;true&lt;/code&gt; if the stack version is auto-updated; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isAutoUpdate")]
        public bool? IsAutoUpdate {get; private set; }

        /// <summary>
        /// Gets &lt;code&gt;true&lt;/code&gt; if the minor version is early-access; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isEarlyAccess")]
        public bool? IsEarlyAccess {get; private set; }

        /// <summary>
        /// Gets &lt;code&gt;true&lt;/code&gt; if the minor version the default; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isDefault")]
        public bool? IsDefault {get; private set; }
    }
}