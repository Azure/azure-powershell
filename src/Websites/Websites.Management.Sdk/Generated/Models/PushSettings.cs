// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Push settings for the App.
    /// </summary>
    public partial class PushSettings : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the PushSettings class.
        /// </summary>
        public PushSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PushSettings class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="isPushEnabled">Gets or sets a flag indicating whether the Push endpoint is enabled.
        /// </param>

        /// <param name="tagWhitelistJson">Gets or sets a JSON string containing a list of tags that are in the
        /// allowed list for use by the push registration endpoint.
        /// </param>

        /// <param name="tagsRequiringAuth">Gets or sets a JSON string containing a list of tags that require user
        /// authentication to be used in the push registration endpoint.
        /// Tags can consist of alphanumeric characters and the following:
        /// &#39;_&#39;, &#39;@&#39;, &#39;#&#39;, &#39;.&#39;, &#39;:&#39;, &#39;-&#39;.
        /// Validation should be performed at the PushRequestHandler.
        /// </param>

        /// <param name="dynamicTagsJson">Gets or sets a JSON string containing a list of dynamic tags that will be
        /// evaluated from user claims in the push registration endpoint.
        /// </param>
        public PushSettings(bool isPushEnabled, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), string tagWhitelistJson = default(string), string tagsRequiringAuth = default(string), string dynamicTagsJson = default(string))

        : base(id, name, kind, type)
        {
            this.IsPushEnabled = isPushEnabled;
            this.TagWhitelistJson = tagWhitelistJson;
            this.TagsRequiringAuth = tagsRequiringAuth;
            this.DynamicTagsJson = dynamicTagsJson;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets gets or sets a flag indicating whether the Push endpoint is
        /// enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isPushEnabled")]
        public bool IsPushEnabled {get; set; }

        /// <summary>
        /// Gets or sets gets or sets a JSON string containing a list of tags that are
        /// in the allowed list for use by the push registration endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tagWhitelistJson")]
        public string TagWhitelistJson {get; set; }

        /// <summary>
        /// Gets or sets gets or sets a JSON string containing a list of tags that
        /// require user authentication to be used in the push registration endpoint.
        /// Tags can consist of alphanumeric characters and the following:
        /// &#39;_&#39;, &#39;@&#39;, &#39;#&#39;, &#39;.&#39;, &#39;:&#39;, &#39;-&#39;.
        /// Validation should be performed at the PushRequestHandler.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tagsRequiringAuth")]
        public string TagsRequiringAuth {get; set; }

        /// <summary>
        /// Gets or sets gets or sets a JSON string containing a list of dynamic tags
        /// that will be evaluated from user claims in the push registration endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dynamicTagsJson")]
        public string DynamicTagsJson {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {



        }
    }
}