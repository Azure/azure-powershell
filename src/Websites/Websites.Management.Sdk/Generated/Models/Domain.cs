// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Information about a domain.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Domain : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Domain class.
        /// </summary>
        public Domain()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Domain class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="location">Resource Location.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="contactAdmin">Administrative contact.
        /// </param>

        /// <param name="contactBilling">Billing contact.
        /// </param>

        /// <param name="contactRegistrant">Registrant contact.
        /// </param>

        /// <param name="contactTech">Technical contact.
        /// </param>

        /// <param name="provisioningState">Domain provisioning state.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;InProgress&#39;,
        /// &#39;Deleting&#39;</param>

        /// <param name="dnsType">Current DNS type
        /// Possible values include: &#39;AzureDns&#39;, &#39;DefaultDomainRegistrarDns&#39;</param>

        /// <param name="registrationStatus">Domain registration status.
        /// Possible values include: &#39;Active&#39;, &#39;Awaiting&#39;, &#39;Cancelled&#39;, &#39;Confiscated&#39;,
        /// &#39;Disabled&#39;, &#39;Excluded&#39;, &#39;Expired&#39;, &#39;Failed&#39;, &#39;Held&#39;, &#39;Locked&#39;, &#39;Parked&#39;,
        /// &#39;Pending&#39;, &#39;Reserved&#39;, &#39;Reverted&#39;, &#39;Suspended&#39;, &#39;Transferred&#39;, &#39;Unknown&#39;,
        /// &#39;Unlocked&#39;, &#39;Unparked&#39;, &#39;Updated&#39;, &#39;JsonConverterFailed&#39;</param>

        /// <param name="nameServers">Name servers.
        /// </param>

        /// <param name="privacy">&lt;code&gt;true&lt;/code&gt; if domain privacy is enabled for this domain; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="createdTime">Domain creation timestamp.
        /// </param>

        /// <param name="expirationTime">Domain expiration timestamp.
        /// </param>

        /// <param name="lastRenewedTime">Timestamp when the domain was renewed last time.
        /// </param>

        /// <param name="autoRenew">&lt;code&gt;true&lt;/code&gt; if the domain should be automatically renewed; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="readyForDnsRecordManagement">&lt;code&gt;true&lt;/code&gt; if Azure can assign this domain to App Service apps;
        /// otherwise, &lt;code&gt;false&lt;/code&gt;. This value will be &lt;code&gt;true&lt;/code&gt; if
        /// domain registration status is active and
        /// it is hosted on name servers Azure has programmatic access to.
        /// </param>

        /// <param name="managedHostNames">All hostnames derived from the domain and assigned to Azure resources.
        /// </param>

        /// <param name="consent">Legal agreement consent.
        /// </param>

        /// <param name="domainNotRenewableReasons">Reasons why domain is not renewable.
        /// </param>

        /// <param name="dnsZoneId">Azure DNS Zone to use
        /// </param>

        /// <param name="targetDnsType">Target DNS type (would be used for migration)
        /// Possible values include: &#39;AzureDns&#39;, &#39;DefaultDomainRegistrarDns&#39;</param>

        /// <param name="authCode">
        /// </param>
        public Domain(string location, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), Contact contactAdmin = default(Contact), Contact contactBilling = default(Contact), Contact contactRegistrant = default(Contact), Contact contactTech = default(Contact), ProvisioningState? provisioningState = default(ProvisioningState?), DnsType? dnsType = default(DnsType?), DomainStatus? registrationStatus = default(DomainStatus?), System.Collections.Generic.IList<string> nameServers = default(System.Collections.Generic.IList<string>), bool? privacy = default(bool?), System.DateTime? createdTime = default(System.DateTime?), System.DateTime? expirationTime = default(System.DateTime?), System.DateTime? lastRenewedTime = default(System.DateTime?), bool? autoRenew = default(bool?), bool? readyForDnsRecordManagement = default(bool?), System.Collections.Generic.IList<HostName> managedHostNames = default(System.Collections.Generic.IList<HostName>), DomainPurchaseConsent consent = default(DomainPurchaseConsent), System.Collections.Generic.IList<string> domainNotRenewableReasons = default(System.Collections.Generic.IList<string>), string dnsZoneId = default(string), DnsType? targetDnsType = default(DnsType?), string authCode = default(string))

        : base(location, id, name, kind, type, tags)
        {
            this.ContactAdmin = contactAdmin;
            this.ContactBilling = contactBilling;
            this.ContactRegistrant = contactRegistrant;
            this.ContactTech = contactTech;
            this.ProvisioningState = provisioningState;
            this.DnsType = dnsType;
            this.RegistrationStatus = registrationStatus;
            this.NameServers = nameServers;
            this.Privacy = privacy;
            this.CreatedTime = createdTime;
            this.ExpirationTime = expirationTime;
            this.LastRenewedTime = lastRenewedTime;
            this.AutoRenew = autoRenew;
            this.ReadyForDnsRecordManagement = readyForDnsRecordManagement;
            this.ManagedHostNames = managedHostNames;
            this.Consent = consent;
            this.DomainNotRenewableReasons = domainNotRenewableReasons;
            this.DnsZoneId = dnsZoneId;
            this.TargetDnsType = targetDnsType;
            this.AuthCode = authCode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets administrative contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.contactAdmin")]
        public Contact ContactAdmin {get; set; }

        /// <summary>
        /// Gets or sets billing contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.contactBilling")]
        public Contact ContactBilling {get; set; }

        /// <summary>
        /// Gets or sets registrant contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.contactRegistrant")]
        public Contact ContactRegistrant {get; set; }

        /// <summary>
        /// Gets or sets technical contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.contactTech")]
        public Contact ContactTech {get; set; }

        /// <summary>
        /// Gets domain provisioning state. Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;InProgress&#39;, &#39;Deleting&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState? ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets current DNS type Possible values include: &#39;AzureDns&#39;, &#39;DefaultDomainRegistrarDns&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dnsType")]
        public DnsType? DnsType {get; set; }

        /// <summary>
        /// Gets domain registration status. Possible values include: &#39;Active&#39;, &#39;Awaiting&#39;, &#39;Cancelled&#39;, &#39;Confiscated&#39;, &#39;Disabled&#39;, &#39;Excluded&#39;, &#39;Expired&#39;, &#39;Failed&#39;, &#39;Held&#39;, &#39;Locked&#39;, &#39;Parked&#39;, &#39;Pending&#39;, &#39;Reserved&#39;, &#39;Reverted&#39;, &#39;Suspended&#39;, &#39;Transferred&#39;, &#39;Unknown&#39;, &#39;Unlocked&#39;, &#39;Unparked&#39;, &#39;Updated&#39;, &#39;JsonConverterFailed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.registrationStatus")]
        public DomainStatus? RegistrationStatus {get; private set; }

        /// <summary>
        /// Gets name servers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.nameServers")]
        public System.Collections.Generic.IList<string> NameServers {get; private set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if domain privacy is enabled for this
        /// domain; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privacy")]
        public bool? Privacy {get; set; }

        /// <summary>
        /// Gets domain creation timestamp.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.createdTime")]
        public System.DateTime? CreatedTime {get; private set; }

        /// <summary>
        /// Gets domain expiration timestamp.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.expirationTime")]
        public System.DateTime? ExpirationTime {get; private set; }

        /// <summary>
        /// Gets timestamp when the domain was renewed last time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.lastRenewedTime")]
        public System.DateTime? LastRenewedTime {get; private set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if the domain should be automatically
        /// renewed; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.autoRenew")]
        public bool? AutoRenew {get; set; }

        /// <summary>
        /// Gets &lt;code&gt;true&lt;/code&gt; if Azure can assign this domain to App Service apps;
        /// otherwise, &lt;code&gt;false&lt;/code&gt;. This value will be &lt;code&gt;true&lt;/code&gt; if
        /// domain registration status is active and
        /// it is hosted on name servers Azure has programmatic access to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.readyForDnsRecordManagement")]
        public bool? ReadyForDnsRecordManagement {get; private set; }

        /// <summary>
        /// Gets all hostnames derived from the domain and assigned to Azure resources.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.managedHostNames")]
        public System.Collections.Generic.IList<HostName> ManagedHostNames {get; private set; }

        /// <summary>
        /// Gets or sets legal agreement consent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.consent")]
        public DomainPurchaseConsent Consent {get; set; }

        /// <summary>
        /// Gets reasons why domain is not renewable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.domainNotRenewableReasons")]
        public System.Collections.Generic.IList<string> DomainNotRenewableReasons {get; private set; }

        /// <summary>
        /// Gets or sets azure DNS Zone to use
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dnsZoneId")]
        public string DnsZoneId {get; set; }

        /// <summary>
        /// Gets or sets target DNS type (would be used for migration) Possible values include: &#39;AzureDns&#39;, &#39;DefaultDomainRegistrarDns&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.targetDnsType")]
        public DnsType? TargetDnsType {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.authCode")]
        public string AuthCode {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.ContactAdmin != null)
            {
                this.ContactAdmin.Validate();
            }
            if (this.ContactBilling != null)
            {
                this.ContactBilling.Validate();
            }
            if (this.ContactRegistrant != null)
            {
                this.ContactRegistrant.Validate();
            }
            if (this.ContactTech != null)
            {
                this.ContactTech.Validate();
            }










        }
    }
}