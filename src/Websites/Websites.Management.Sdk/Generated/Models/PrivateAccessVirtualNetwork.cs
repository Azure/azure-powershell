// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Description of a Virtual Network that is useable for private site access.
    /// </summary>
    public partial class PrivateAccessVirtualNetwork
    {
        /// <summary>
        /// Initializes a new instance of the PrivateAccessVirtualNetwork class.
        /// </summary>
        public PrivateAccessVirtualNetwork()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PrivateAccessVirtualNetwork class.
        /// </summary>

        /// <param name="name">The name of the Virtual Network.
        /// </param>

        /// <param name="key">The key (ID) of the Virtual Network.
        /// </param>

        /// <param name="resourceId">The ARM uri of the Virtual Network
        /// </param>

        /// <param name="subnets">A List of subnets that access is allowed to on this Virtual Network. An
        /// empty array (but not null) is interpreted to mean that all subnets are
        /// allowed within this Virtual Network.
        /// </param>
        public PrivateAccessVirtualNetwork(string name = default(string), int? key = default(int?), string resourceId = default(string), System.Collections.Generic.IList<PrivateAccessSubnet> subnets = default(System.Collections.Generic.IList<PrivateAccessSubnet>))

        {
            this.Name = name;
            this.Key = key;
            this.ResourceId = resourceId;
            this.Subnets = subnets;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the Virtual Network.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets the key (ID) of the Virtual Network.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "key")]
        public int? Key {get; set; }

        /// <summary>
        /// Gets or sets the ARM uri of the Virtual Network
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceId")]
        public string ResourceId {get; set; }

        /// <summary>
        /// Gets or sets a List of subnets that access is allowed to on this Virtual
        /// Network. An empty array (but not null) is interpreted to mean that all
        /// subnets are allowed within this Virtual Network.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subnets")]
        public System.Collections.Generic.IList<PrivateAccessSubnet> Subnets {get; set; }
    }
}