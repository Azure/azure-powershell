// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Application logs to Azure table storage configuration.
    /// </summary>
    public partial class AzureTableStorageApplicationLogsConfig
    {
        /// <summary>
        /// Initializes a new instance of the AzureTableStorageApplicationLogsConfig class.
        /// </summary>
        public AzureTableStorageApplicationLogsConfig()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureTableStorageApplicationLogsConfig class.
        /// </summary>

        /// <param name="level">Log level.
        /// Possible values include: &#39;Off&#39;, &#39;Verbose&#39;, &#39;Information&#39;, &#39;Warning&#39;,
        /// &#39;Error&#39;</param>

        /// <param name="sasUrl">SAS URL to an Azure table with add/query/delete permissions.
        /// </param>
        public AzureTableStorageApplicationLogsConfig(string sasUrl, LogLevel? level = default(LogLevel?))

        {
            this.Level = level;
            this.SasUrl = sasUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets log level. Possible values include: &#39;Off&#39;, &#39;Verbose&#39;, &#39;Information&#39;, &#39;Warning&#39;, &#39;Error&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "level")]
        public LogLevel? Level {get; set; }

        /// <summary>
        /// Gets or sets sAS URL to an Azure table with add/query/delete permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sasUrl")]
        public string SasUrl {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.SasUrl == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SasUrl");
            }


        }
    }
}