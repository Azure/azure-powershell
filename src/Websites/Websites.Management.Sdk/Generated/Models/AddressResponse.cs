// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Describes main public IP address and any extra virtual IPs.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class AddressResponse : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the AddressResponse class.
        /// </summary>
        public AddressResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AddressResponse class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="serviceIPAddress">Main public virtual IP.
        /// </param>

        /// <param name="internalIPAddress">Virtual Network internal IP address of the App Service Environment if it is
        /// in internal load-balancing mode.
        /// </param>

        /// <param name="outboundIPAddresses">IP addresses appearing on outbound connections.
        /// </param>

        /// <param name="vipMappings">Additional virtual IPs.
        /// </param>
        public AddressResponse(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), string serviceIPAddress = default(string), string internalIPAddress = default(string), System.Collections.Generic.IList<string> outboundIPAddresses = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<VirtualIPMapping> vipMappings = default(System.Collections.Generic.IList<VirtualIPMapping>))

        : base(id, name, kind, type)
        {
            this.ServiceIPAddress = serviceIPAddress;
            this.InternalIPAddress = internalIPAddress;
            this.OutboundIPAddresses = outboundIPAddresses;
            this.VipMappings = vipMappings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets main public virtual IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serviceIpAddress")]
        public string ServiceIPAddress {get; set; }

        /// <summary>
        /// Gets or sets virtual Network internal IP address of the App Service
        /// Environment if it is in internal load-balancing mode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.internalIpAddress")]
        public string InternalIPAddress {get; set; }

        /// <summary>
        /// Gets or sets iP addresses appearing on outbound connections.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.outboundIpAddresses")]
        public System.Collections.Generic.IList<string> OutboundIPAddresses {get; set; }

        /// <summary>
        /// Gets or sets additional virtual IPs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.vipMappings")]
        public System.Collections.Generic.IList<VirtualIPMapping> VipMappings {get; set; }
    }
}