// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Web app configuration ARM resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SiteConfigResource : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the SiteConfigResource class.
        /// </summary>
        public SiteConfigResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SiteConfigResource class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="scmType">SCM type.
        /// Possible values include: &#39;None&#39;, &#39;Dropbox&#39;, &#39;Tfs&#39;, &#39;LocalGit&#39;, &#39;GitHub&#39;,
        /// &#39;CodePlexGit&#39;, &#39;CodePlexHg&#39;, &#39;BitbucketGit&#39;, &#39;BitbucketHg&#39;, &#39;ExternalGit&#39;,
        /// &#39;ExternalHg&#39;, &#39;OneDrive&#39;, &#39;VSO&#39;, &#39;VSTSRM&#39;</param>

        /// <param name="experiments">This is work around for polymorphic types.
        /// </param>

        /// <param name="ftpsState">State of FTP / FTPS service
        /// Possible values include: &#39;AllAllowed&#39;, &#39;FtpsOnly&#39;, &#39;Disabled&#39;</param>

        /// <param name="numberOfWorkers">Number of workers.
        /// </param>

        /// <param name="defaultDocuments">Default documents.
        /// </param>

        /// <param name="netFrameworkVersion">.NET Framework version.
        /// </param>

        /// <param name="phpVersion">Version of PHP.
        /// </param>

        /// <param name="pythonVersion">Version of Python.
        /// </param>

        /// <param name="nodeVersion">Version of Node.js.
        /// </param>

        /// <param name="powerShellVersion">Version of PowerShell.
        /// </param>

        /// <param name="linuxFxVersion">Linux App Framework and version
        /// </param>

        /// <param name="windowsFxVersion">Xenon App Framework and version
        /// </param>

        /// <param name="requestTracingEnabled">&lt;code&gt;true&lt;/code&gt; if request tracing is enabled; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="requestTracingExpirationTime">Request tracing expiration time.
        /// </param>

        /// <param name="remoteDebuggingEnabled">&lt;code&gt;true&lt;/code&gt; if remote debugging is enabled; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="remoteDebuggingVersion">Remote debugging version.
        /// </param>

        /// <param name="httpLoggingEnabled">&lt;code&gt;true&lt;/code&gt; if HTTP logging is enabled; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="acrUseManagedIdentityCreds">Flag to use Managed Identity Creds for ACR pull
        /// </param>

        /// <param name="acrUserManagedIdentityId">If using user managed identity, the user managed identity ClientId
        /// </param>

        /// <param name="logsDirectorySizeLimit">HTTP logs directory size limit.
        /// </param>

        /// <param name="detailedErrorLoggingEnabled">&lt;code&gt;true&lt;/code&gt; if detailed error logging is enabled; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="publishingUsername">Publishing user name.
        /// </param>

        /// <param name="appSettings">Application settings.
        /// </param>

        /// <param name="connectionStrings">Connection strings.
        /// </param>

        /// <param name="machineKey">Site MachineKey.
        /// </param>

        /// <param name="handlerMappings">Handler mappings.
        /// </param>

        /// <param name="documentRoot">Document root.
        /// </param>

        /// <param name="use32BitWorkerProcess">&lt;code&gt;true&lt;/code&gt; to use 32-bit worker process; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="webSocketsEnabled">&lt;code&gt;true&lt;/code&gt; if WebSocket is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="alwaysOn">&lt;code&gt;true&lt;/code&gt; if Always On is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="javaVersion">Java version.
        /// </param>

        /// <param name="javaContainer">Java container.
        /// </param>

        /// <param name="javaContainerVersion">Java container version.
        /// </param>

        /// <param name="appCommandLine">App command line to launch.
        /// </param>

        /// <param name="managedPipelineMode">Managed pipeline mode.
        /// Possible values include: &#39;Integrated&#39;, &#39;Classic&#39;</param>

        /// <param name="virtualApplications">Virtual applications.
        /// </param>

        /// <param name="loadBalancing">Site load balancing.
        /// Possible values include: &#39;WeightedRoundRobin&#39;, &#39;LeastRequests&#39;,
        /// &#39;LeastResponseTime&#39;, &#39;WeightedTotalTraffic&#39;, &#39;RequestHash&#39;,
        /// &#39;PerSiteRoundRobin&#39;</param>

        /// <param name="limits">Site limits.
        /// </param>

        /// <param name="autoHealEnabled">&lt;code&gt;true&lt;/code&gt; if Auto Heal is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="autoHealRules">Auto Heal rules.
        /// </param>

        /// <param name="tracingOptions">Tracing options.
        /// </param>

        /// <param name="vnetName">Virtual Network name.
        /// </param>

        /// <param name="vnetRouteAllEnabled">Virtual Network Route All enabled. This causes all outbound traffic to have
        /// Virtual Network Security Groups and User Defined Routes applied.
        /// </param>

        /// <param name="vnetPrivatePortsCount">The number of private ports assigned to this app. These will be assigned
        /// dynamically on runtime.
        /// </param>

        /// <param name="cors">Cross-Origin Resource Sharing (CORS) settings.
        /// </param>

        /// <param name="push">Push endpoint settings.
        /// </param>

        /// <param name="apiDefinition">Information about the formal API definition for the app.
        /// </param>

        /// <param name="apiManagementConfig">Azure API management settings linked to the app.
        /// </param>

        /// <param name="autoSwapSlotName">Auto-swap slot name.
        /// </param>

        /// <param name="localMySqlEnabled">&lt;code&gt;true&lt;/code&gt; to enable local MySQL; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="managedServiceIdentityId">Managed Service Identity Id
        /// </param>

        /// <param name="xManagedServiceIdentityId">Explicit Managed Service Identity Id
        /// </param>

        /// <param name="keyVaultReferenceIdentity">Identity to use for Key Vault Reference authentication.
        /// </param>

        /// <param name="ipSecurityRestrictions">IP security restrictions for main.
        /// </param>

        /// <param name="scmIPSecurityRestrictions">IP security restrictions for scm.
        /// </param>

        /// <param name="scmIPSecurityRestrictionsUseMain">IP security restrictions for scm to use main.
        /// </param>

        /// <param name="http20Enabled">Http20Enabled: configures a web site to allow clients to connect over
        /// http2.0
        /// </param>

        /// <param name="minTlsVersion">MinTlsVersion: configures the minimum version of TLS required for SSL
        /// requests
        /// Possible values include: &#39;1.0&#39;, &#39;1.1&#39;, &#39;1.2&#39;</param>

        /// <param name="scmMinTlsVersion">ScmMinTlsVersion: configures the minimum version of TLS required for SSL
        /// requests for SCM site
        /// Possible values include: &#39;1.0&#39;, &#39;1.1&#39;, &#39;1.2&#39;</param>

        /// <param name="preWarmedInstanceCount">Number of preWarmed instances.
        /// This setting only applies to the Consumption and Elastic Plans
        /// </param>

        /// <param name="functionAppScaleLimit">Maximum number of workers that a site can scale out to.
        /// This setting only applies to the Consumption and Elastic Premium Plans
        /// </param>

        /// <param name="healthCheckPath">Health check path
        /// </param>

        /// <param name="functionsRuntimeScaleMonitoringEnabled">Gets or sets a value indicating whether functions runtime scale monitoring
        /// is enabled. When enabled,
        /// the ScaleController will not monitor event sources directly, but will
        /// instead call to the
        /// runtime to get scale status.
        /// </param>

        /// <param name="websiteTimeZone">Sets the time zone a site uses for generating timestamps. Compatible with
        /// Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting
        /// takes precedence over this config. For Linux, expects tz database values
        /// https://www.iana.org/time-zones (for a quick reference see
        /// https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For Windows,
        /// expects one of the time zones listed under
        /// HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones
        /// </param>

        /// <param name="minimumElasticInstanceCount">Number of minimum instance count for a site
        /// This setting only applies to the Elastic Plans
        /// </param>

        /// <param name="azureStorageAccounts">List of Azure Storage Accounts.
        /// </param>

        /// <param name="publicNetworkAccess">Property to allow or block all public traffic.
        /// </param>
        public SiteConfigResource(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), string scmType = default(string), Experiments experiments = default(Experiments), string ftpsState = default(string), int? numberOfWorkers = default(int?), System.Collections.Generic.IList<string> defaultDocuments = default(System.Collections.Generic.IList<string>), string netFrameworkVersion = default(string), string phpVersion = default(string), string pythonVersion = default(string), string nodeVersion = default(string), string powerShellVersion = default(string), string linuxFxVersion = default(string), string windowsFxVersion = default(string), bool? requestTracingEnabled = default(bool?), System.DateTime? requestTracingExpirationTime = default(System.DateTime?), bool? remoteDebuggingEnabled = default(bool?), string remoteDebuggingVersion = default(string), bool? httpLoggingEnabled = default(bool?), bool? acrUseManagedIdentityCreds = default(bool?), string acrUserManagedIdentityId = default(string), int? logsDirectorySizeLimit = default(int?), bool? detailedErrorLoggingEnabled = default(bool?), string publishingUsername = default(string), System.Collections.Generic.IList<NameValuePair> appSettings = default(System.Collections.Generic.IList<NameValuePair>), System.Collections.Generic.IList<ConnStringInfo> connectionStrings = default(System.Collections.Generic.IList<ConnStringInfo>), SiteMachineKey machineKey = default(SiteMachineKey), System.Collections.Generic.IList<HandlerMapping> handlerMappings = default(System.Collections.Generic.IList<HandlerMapping>), string documentRoot = default(string), bool? use32BitWorkerProcess = default(bool?), bool? webSocketsEnabled = default(bool?), bool? alwaysOn = default(bool?), string javaVersion = default(string), string javaContainer = default(string), string javaContainerVersion = default(string), string appCommandLine = default(string), ManagedPipelineMode? managedPipelineMode = default(ManagedPipelineMode?), System.Collections.Generic.IList<VirtualApplication> virtualApplications = default(System.Collections.Generic.IList<VirtualApplication>), SiteLoadBalancing? loadBalancing = default(SiteLoadBalancing?), SiteLimits limits = default(SiteLimits), bool? autoHealEnabled = default(bool?), AutoHealRules autoHealRules = default(AutoHealRules), string tracingOptions = default(string), string vnetName = default(string), bool? vnetRouteAllEnabled = default(bool?), int? vnetPrivatePortsCount = default(int?), CorsSettings cors = default(CorsSettings), PushSettings push = default(PushSettings), ApiDefinitionInfo apiDefinition = default(ApiDefinitionInfo), ApiManagementConfig apiManagementConfig = default(ApiManagementConfig), string autoSwapSlotName = default(string), bool? localMySqlEnabled = default(bool?), int? managedServiceIdentityId = default(int?), int? xManagedServiceIdentityId = default(int?), string keyVaultReferenceIdentity = default(string), System.Collections.Generic.IList<IpSecurityRestriction> ipSecurityRestrictions = default(System.Collections.Generic.IList<IpSecurityRestriction>), System.Collections.Generic.IList<IpSecurityRestriction> scmIPSecurityRestrictions = default(System.Collections.Generic.IList<IpSecurityRestriction>), bool? scmIPSecurityRestrictionsUseMain = default(bool?), bool? http20Enabled = default(bool?), string minTlsVersion = default(string), string scmMinTlsVersion = default(string), int? preWarmedInstanceCount = default(int?), int? functionAppScaleLimit = default(int?), string healthCheckPath = default(string), bool? functionsRuntimeScaleMonitoringEnabled = default(bool?), string websiteTimeZone = default(string), int? minimumElasticInstanceCount = default(int?), System.Collections.Generic.IDictionary<string, AzureStorageInfoValue> azureStorageAccounts = default(System.Collections.Generic.IDictionary<string, AzureStorageInfoValue>), string publicNetworkAccess = default(string))

        : base(id, name, kind, type)
        {
            this.ScmType = scmType;
            this.Experiments = experiments;
            this.FtpsState = ftpsState;
            this.NumberOfWorkers = numberOfWorkers;
            this.DefaultDocuments = defaultDocuments;
            this.NetFrameworkVersion = netFrameworkVersion;
            this.PhpVersion = phpVersion;
            this.PythonVersion = pythonVersion;
            this.NodeVersion = nodeVersion;
            this.PowerShellVersion = powerShellVersion;
            this.LinuxFxVersion = linuxFxVersion;
            this.WindowsFxVersion = windowsFxVersion;
            this.RequestTracingEnabled = requestTracingEnabled;
            this.RequestTracingExpirationTime = requestTracingExpirationTime;
            this.RemoteDebuggingEnabled = remoteDebuggingEnabled;
            this.RemoteDebuggingVersion = remoteDebuggingVersion;
            this.HttpLoggingEnabled = httpLoggingEnabled;
            this.AcrUseManagedIdentityCreds = acrUseManagedIdentityCreds;
            this.AcrUserManagedIdentityId = acrUserManagedIdentityId;
            this.LogsDirectorySizeLimit = logsDirectorySizeLimit;
            this.DetailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
            this.PublishingUsername = publishingUsername;
            this.AppSettings = appSettings;
            this.ConnectionStrings = connectionStrings;
            this.MachineKey = machineKey;
            this.HandlerMappings = handlerMappings;
            this.DocumentRoot = documentRoot;
            this.Use32BitWorkerProcess = use32BitWorkerProcess;
            this.WebSocketsEnabled = webSocketsEnabled;
            this.AlwaysOn = alwaysOn;
            this.JavaVersion = javaVersion;
            this.JavaContainer = javaContainer;
            this.JavaContainerVersion = javaContainerVersion;
            this.AppCommandLine = appCommandLine;
            this.ManagedPipelineMode = managedPipelineMode;
            this.VirtualApplications = virtualApplications;
            this.LoadBalancing = loadBalancing;
            this.Limits = limits;
            this.AutoHealEnabled = autoHealEnabled;
            this.AutoHealRules = autoHealRules;
            this.TracingOptions = tracingOptions;
            this.VnetName = vnetName;
            this.VnetRouteAllEnabled = vnetRouteAllEnabled;
            this.VnetPrivatePortsCount = vnetPrivatePortsCount;
            this.Cors = cors;
            this.Push = push;
            this.ApiDefinition = apiDefinition;
            this.ApiManagementConfig = apiManagementConfig;
            this.AutoSwapSlotName = autoSwapSlotName;
            this.LocalMySqlEnabled = localMySqlEnabled;
            this.ManagedServiceIdentityId = managedServiceIdentityId;
            this.XManagedServiceIdentityId = xManagedServiceIdentityId;
            this.KeyVaultReferenceIdentity = keyVaultReferenceIdentity;
            this.IPSecurityRestrictions = ipSecurityRestrictions;
            this.ScmIPSecurityRestrictions = scmIPSecurityRestrictions;
            this.ScmIPSecurityRestrictionsUseMain = scmIPSecurityRestrictionsUseMain;
            this.Http20Enabled = http20Enabled;
            this.MinTlsVersion = minTlsVersion;
            this.ScmMinTlsVersion = scmMinTlsVersion;
            this.PreWarmedInstanceCount = preWarmedInstanceCount;
            this.FunctionAppScaleLimit = functionAppScaleLimit;
            this.HealthCheckPath = healthCheckPath;
            this.FunctionsRuntimeScaleMonitoringEnabled = functionsRuntimeScaleMonitoringEnabled;
            this.WebsiteTimeZone = websiteTimeZone;
            this.MinimumElasticInstanceCount = minimumElasticInstanceCount;
            this.AzureStorageAccounts = azureStorageAccounts;
            this.PublicNetworkAccess = publicNetworkAccess;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets sCM type. Possible values include: &#39;None&#39;, &#39;Dropbox&#39;, &#39;Tfs&#39;, &#39;LocalGit&#39;, &#39;GitHub&#39;, &#39;CodePlexGit&#39;, &#39;CodePlexHg&#39;, &#39;BitbucketGit&#39;, &#39;BitbucketHg&#39;, &#39;ExternalGit&#39;, &#39;ExternalHg&#39;, &#39;OneDrive&#39;, &#39;VSO&#39;, &#39;VSTSRM&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.scmType")]
        public string ScmType {get; set; }

        /// <summary>
        /// Gets or sets this is work around for polymorphic types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.experiments")]
        public Experiments Experiments {get; set; }

        /// <summary>
        /// Gets or sets state of FTP / FTPS service Possible values include: &#39;AllAllowed&#39;, &#39;FtpsOnly&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ftpsState")]
        public string FtpsState {get; set; }

        /// <summary>
        /// Gets or sets number of workers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.numberOfWorkers")]
        public int? NumberOfWorkers {get; set; }

        /// <summary>
        /// Gets or sets default documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.defaultDocuments")]
        public System.Collections.Generic.IList<string> DefaultDocuments {get; set; }

        /// <summary>
        /// Gets or sets .NET Framework version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.netFrameworkVersion")]
        public string NetFrameworkVersion {get; set; }

        /// <summary>
        /// Gets or sets version of PHP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.phpVersion")]
        public string PhpVersion {get; set; }

        /// <summary>
        /// Gets or sets version of Python.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.pythonVersion")]
        public string PythonVersion {get; set; }

        /// <summary>
        /// Gets or sets version of Node.js.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.nodeVersion")]
        public string NodeVersion {get; set; }

        /// <summary>
        /// Gets or sets version of PowerShell.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.powerShellVersion")]
        public string PowerShellVersion {get; set; }

        /// <summary>
        /// Gets or sets linux App Framework and version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.linuxFxVersion")]
        public string LinuxFxVersion {get; set; }

        /// <summary>
        /// Gets or sets xenon App Framework and version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.windowsFxVersion")]
        public string WindowsFxVersion {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if request tracing is enabled; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.requestTracingEnabled")]
        public bool? RequestTracingEnabled {get; set; }

        /// <summary>
        /// Gets or sets request tracing expiration time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.requestTracingExpirationTime")]
        public System.DateTime? RequestTracingExpirationTime {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if remote debugging is enabled; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.remoteDebuggingEnabled")]
        public bool? RemoteDebuggingEnabled {get; set; }

        /// <summary>
        /// Gets or sets remote debugging version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.remoteDebuggingVersion")]
        public string RemoteDebuggingVersion {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if HTTP logging is enabled; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.httpLoggingEnabled")]
        public bool? HttpLoggingEnabled {get; set; }

        /// <summary>
        /// Gets or sets flag to use Managed Identity Creds for ACR pull
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.acrUseManagedIdentityCreds")]
        public bool? AcrUseManagedIdentityCreds {get; set; }

        /// <summary>
        /// Gets or sets if using user managed identity, the user managed identity
        /// ClientId
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.acrUserManagedIdentityID")]
        public string AcrUserManagedIdentityId {get; set; }

        /// <summary>
        /// Gets or sets hTTP logs directory size limit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.logsDirectorySizeLimit")]
        public int? LogsDirectorySizeLimit {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if detailed error logging is enabled;
        /// otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.detailedErrorLoggingEnabled")]
        public bool? DetailedErrorLoggingEnabled {get; set; }

        /// <summary>
        /// Gets or sets publishing user name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publishingUsername")]
        public string PublishingUsername {get; set; }

        /// <summary>
        /// Gets or sets application settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.appSettings")]
        public System.Collections.Generic.IList<NameValuePair> AppSettings {get; set; }

        /// <summary>
        /// Gets or sets connection strings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.connectionStrings")]
        public System.Collections.Generic.IList<ConnStringInfo> ConnectionStrings {get; set; }

        /// <summary>
        /// Gets site MachineKey.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.machineKey")]
        public SiteMachineKey MachineKey {get; private set; }

        /// <summary>
        /// Gets or sets handler mappings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.handlerMappings")]
        public System.Collections.Generic.IList<HandlerMapping> HandlerMappings {get; set; }

        /// <summary>
        /// Gets or sets document root.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.documentRoot")]
        public string DocumentRoot {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; to use 32-bit worker process; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.use32BitWorkerProcess")]
        public bool? Use32BitWorkerProcess {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if WebSocket is enabled; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.webSocketsEnabled")]
        public bool? WebSocketsEnabled {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if Always On is enabled; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.alwaysOn")]
        public bool? AlwaysOn {get; set; }

        /// <summary>
        /// Gets or sets java version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.javaVersion")]
        public string JavaVersion {get; set; }

        /// <summary>
        /// Gets or sets java container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.javaContainer")]
        public string JavaContainer {get; set; }

        /// <summary>
        /// Gets or sets java container version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.javaContainerVersion")]
        public string JavaContainerVersion {get; set; }

        /// <summary>
        /// Gets or sets app command line to launch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.appCommandLine")]
        public string AppCommandLine {get; set; }

        /// <summary>
        /// Gets or sets managed pipeline mode. Possible values include: &#39;Integrated&#39;, &#39;Classic&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.managedPipelineMode")]
        public ManagedPipelineMode? ManagedPipelineMode {get; set; }

        /// <summary>
        /// Gets or sets virtual applications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualApplications")]
        public System.Collections.Generic.IList<VirtualApplication> VirtualApplications {get; set; }

        /// <summary>
        /// Gets or sets site load balancing. Possible values include: &#39;WeightedRoundRobin&#39;, &#39;LeastRequests&#39;, &#39;LeastResponseTime&#39;, &#39;WeightedTotalTraffic&#39;, &#39;RequestHash&#39;, &#39;PerSiteRoundRobin&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.loadBalancing")]
        public SiteLoadBalancing? LoadBalancing {get; set; }

        /// <summary>
        /// Gets or sets site limits.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.limits")]
        public SiteLimits Limits {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if Auto Heal is enabled; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.autoHealEnabled")]
        public bool? AutoHealEnabled {get; set; }

        /// <summary>
        /// Gets or sets auto Heal rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.autoHealRules")]
        public AutoHealRules AutoHealRules {get; set; }

        /// <summary>
        /// Gets or sets tracing options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.tracingOptions")]
        public string TracingOptions {get; set; }

        /// <summary>
        /// Gets or sets virtual Network name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.vnetName")]
        public string VnetName {get; set; }

        /// <summary>
        /// Gets or sets virtual Network Route All enabled. This causes all outbound
        /// traffic to have Virtual Network Security Groups and User Defined Routes
        /// applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.vnetRouteAllEnabled")]
        public bool? VnetRouteAllEnabled {get; set; }

        /// <summary>
        /// Gets or sets the number of private ports assigned to this app. These will
        /// be assigned dynamically on runtime.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.vnetPrivatePortsCount")]
        public int? VnetPrivatePortsCount {get; set; }

        /// <summary>
        /// Gets or sets cross-Origin Resource Sharing (CORS) settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.cors")]
        public CorsSettings Cors {get; set; }

        /// <summary>
        /// Gets or sets push endpoint settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.push")]
        public PushSettings Push {get; set; }

        /// <summary>
        /// Gets or sets information about the formal API definition for the app.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.apiDefinition")]
        public ApiDefinitionInfo ApiDefinition {get; set; }

        /// <summary>
        /// Gets or sets azure API management settings linked to the app.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.apiManagementConfig")]
        public ApiManagementConfig ApiManagementConfig {get; set; }

        /// <summary>
        /// Gets or sets auto-swap slot name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.autoSwapSlotName")]
        public string AutoSwapSlotName {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; to enable local MySQL; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.localMySqlEnabled")]
        public bool? LocalMySqlEnabled {get; set; }

        /// <summary>
        /// Gets or sets managed Service Identity Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.managedServiceIdentityId")]
        public int? ManagedServiceIdentityId {get; set; }

        /// <summary>
        /// Gets or sets explicit Managed Service Identity Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.xManagedServiceIdentityId")]
        public int? XManagedServiceIdentityId {get; set; }

        /// <summary>
        /// Gets or sets identity to use for Key Vault Reference authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.keyVaultReferenceIdentity")]
        public string KeyVaultReferenceIdentity {get; set; }

        /// <summary>
        /// Gets or sets iP security restrictions for main.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ipSecurityRestrictions")]
        public System.Collections.Generic.IList<IpSecurityRestriction> IPSecurityRestrictions {get; set; }

        /// <summary>
        /// Gets or sets iP security restrictions for scm.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.scmIpSecurityRestrictions")]
        public System.Collections.Generic.IList<IpSecurityRestriction> ScmIPSecurityRestrictions {get; set; }

        /// <summary>
        /// Gets or sets iP security restrictions for scm to use main.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.scmIpSecurityRestrictionsUseMain")]
        public bool? ScmIPSecurityRestrictionsUseMain {get; set; }

        /// <summary>
        /// Gets or sets http20Enabled: configures a web site to allow clients to
        /// connect over http2.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.http20Enabled")]
        public bool? Http20Enabled {get; set; }

        /// <summary>
        /// Gets or sets minTlsVersion: configures the minimum version of TLS required
        /// for SSL requests Possible values include: &#39;1.0&#39;, &#39;1.1&#39;, &#39;1.2&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.minTlsVersion")]
        public string MinTlsVersion {get; set; }

        /// <summary>
        /// Gets or sets scmMinTlsVersion: configures the minimum version of TLS
        /// required for SSL requests for SCM site Possible values include: &#39;1.0&#39;, &#39;1.1&#39;, &#39;1.2&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.scmMinTlsVersion")]
        public string ScmMinTlsVersion {get; set; }

        /// <summary>
        /// Gets or sets number of preWarmed instances.
        /// This setting only applies to the Consumption and Elastic Plans
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.preWarmedInstanceCount")]
        public int? PreWarmedInstanceCount {get; set; }

        /// <summary>
        /// Gets or sets maximum number of workers that a site can scale out to.
        /// This setting only applies to the Consumption and Elastic Premium Plans
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.functionAppScaleLimit")]
        public int? FunctionAppScaleLimit {get; set; }

        /// <summary>
        /// Gets or sets health check path
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.healthCheckPath")]
        public string HealthCheckPath {get; set; }

        /// <summary>
        /// Gets or sets gets or sets a value indicating whether functions runtime
        /// scale monitoring is enabled. When enabled,
        /// the ScaleController will not monitor event sources directly, but will
        /// instead call to the
        /// runtime to get scale status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.functionsRuntimeScaleMonitoringEnabled")]
        public bool? FunctionsRuntimeScaleMonitoringEnabled {get; set; }

        /// <summary>
        /// Gets or sets sets the time zone a site uses for generating timestamps.
        /// Compatible with Linux and Windows App Service. Setting the
        /// WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux,
        /// expects tz database values https://www.iana.org/time-zones (for a quick
        /// reference see
        /// https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For Windows,
        /// expects one of the time zones listed under
        /// HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.websiteTimeZone")]
        public string WebsiteTimeZone {get; set; }

        /// <summary>
        /// Gets or sets number of minimum instance count for a site
        /// This setting only applies to the Elastic Plans
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.minimumElasticInstanceCount")]
        public int? MinimumElasticInstanceCount {get; set; }

        /// <summary>
        /// Gets or sets list of Azure Storage Accounts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.azureStorageAccounts")]
        public System.Collections.Generic.IDictionary<string, AzureStorageInfoValue> AzureStorageAccounts {get; set; }

        /// <summary>
        /// Gets or sets property to allow or block all public traffic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {































            if (this.Push != null)
            {
                this.Push.Validate();
            }








            if (this.PreWarmedInstanceCount != null)
            {
                if (this.PreWarmedInstanceCount > 10)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "PreWarmedInstanceCount", 10);
                }
                if (this.PreWarmedInstanceCount < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "PreWarmedInstanceCount", 0);
                }
            }
            if (this.FunctionAppScaleLimit != null)
            {
                if (this.FunctionAppScaleLimit < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "FunctionAppScaleLimit", 0);
                }
            }


            if (this.MinimumElasticInstanceCount != null)
            {
                if (this.MinimumElasticInstanceCount > 20)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "MinimumElasticInstanceCount", 20);
                }
                if (this.MinimumElasticInstanceCount < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MinimumElasticInstanceCount", 0);
                }
            }


        }
    }
}