// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// The configuration settings of the HTTP requests for authentication and
    /// authorization requests made against App Service
    /// Authentication/Authorization.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class HttpSettings : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the HttpSettings class.
        /// </summary>
        public HttpSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HttpSettings class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="forwardProxy">The configuration settings of a forward proxy used to make the requests.
        /// </param>

        /// <param name="requireHttps">&lt;code&gt;false&lt;/code&gt; if the authentication/authorization responses not having
        /// the HTTPS scheme are permissible; otherwise, &lt;code&gt;true&lt;/code&gt;.
        /// </param>

        /// <param name="routes">The configuration settings of the paths HTTP requests.
        /// </param>
        public HttpSettings(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), ForwardProxy forwardProxy = default(ForwardProxy), bool? requireHttps = default(bool?), HttpSettingsRoutes routes = default(HttpSettingsRoutes))

        : base(id, name, kind, type)
        {
            this.ForwardProxy = forwardProxy;
            this.RequireHttps = requireHttps;
            this.Routes = routes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the configuration settings of a forward proxy used to make the
        /// requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.forwardProxy")]
        public ForwardProxy ForwardProxy {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;false&lt;/code&gt; if the authentication/authorization
        /// responses not having the HTTPS scheme are permissible; otherwise,
        /// &lt;code&gt;true&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.requireHttps")]
        public bool? RequireHttps {get; set; }

        /// <summary>
        /// Gets or sets the configuration settings of the paths HTTP requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.routes")]
        public HttpSettingsRoutes Routes {get; set; }
    }
}