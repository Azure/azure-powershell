// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{

    /// <summary>
    /// Defines values for LogLevel.
    /// </summary>


    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum LogLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = "Off")]
        Off,
        [System.Runtime.Serialization.EnumMember(Value = "Verbose")]
        Verbose,
        [System.Runtime.Serialization.EnumMember(Value = "Information")]
        Information,
        [System.Runtime.Serialization.EnumMember(Value = "Warning")]
        Warning,
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error
    }
    internal static class LogLevelEnumExtension
    {
        internal static string ToSerializedValue(this LogLevel? value)
        {
            return value == null ? null : ((LogLevel)value).ToSerializedValue();
        }
        internal static string ToSerializedValue(this LogLevel value)
        {
            switch( value )
            {
                case LogLevel.Off:
                    return "Off";
                case LogLevel.Verbose:
                    return "Verbose";
                case LogLevel.Information:
                    return "Information";
                case LogLevel.Warning:
                    return "Warning";
                case LogLevel.Error:
                    return "Error";
            }
            return null;
        }
        internal static LogLevel? ParseLogLevel(this string value)
        {
            switch( value )
            {
                case "Off":
                    return LogLevel.Off;
                case "Verbose":
                    return LogLevel.Verbose;
                case "Information":
                    return LogLevel.Information;
                case "Warning":
                    return LogLevel.Warning;
                case "Error":
                    return LogLevel.Error;
            }
            return null;
        }
    }
}