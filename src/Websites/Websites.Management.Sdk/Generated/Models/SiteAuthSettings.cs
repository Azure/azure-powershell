// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Configuration settings for the Azure App Service Authentication /
    /// Authorization feature.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SiteAuthSettings : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the SiteAuthSettings class.
        /// </summary>
        public SiteAuthSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SiteAuthSettings class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="enabled">&lt;code&gt;true&lt;/code&gt; if the Authentication / Authorization feature is enabled
        /// for the current app; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="runtimeVersion">The RuntimeVersion of the Authentication / Authorization feature in use for
        /// the current app.
        /// The setting in this value can control the behavior of certain features in
        /// the Authentication / Authorization module.
        /// </param>

        /// <param name="unauthenticatedClientAction">The action to take when an unauthenticated client attempts to access the
        /// app.
        /// Possible values include: &#39;RedirectToLoginPage&#39;, &#39;AllowAnonymous&#39;</param>

        /// <param name="tokenStoreEnabled">&lt;code&gt;true&lt;/code&gt; to durably store platform-specific security tokens that
        /// are obtained during login flows; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// The default is &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="allowedExternalRedirectUrls">External URLs that can be redirected to as part of logging in or logging
        /// out of the app. Note that the query string part of the URL is ignored.
        /// This is an advanced setting typically only needed by Windows Store
        /// application backends.
        /// Note that URLs within the current domain are always implicitly allowed.
        /// </param>

        /// <param name="defaultProvider">The default authentication provider to use when multiple providers are
        /// configured.
        /// This setting is only needed if multiple providers are configured and the
        /// unauthenticated client
        /// action is set to &#34;RedirectToLoginPage&#34;.
        /// Possible values include: &#39;AzureActiveDirectory&#39;, &#39;Facebook&#39;, &#39;Google&#39;,
        /// &#39;MicrosoftAccount&#39;, &#39;Twitter&#39;, &#39;Github&#39;</param>

        /// <param name="tokenRefreshExtensionHours">The number of hours after session token expiration that a session token can
        /// be used to
        /// call the token refresh API. The default is 72 hours.
        /// </param>

        /// <param name="clientId">The Client ID of this relying party application, known as the client_id.
        /// This setting is required for enabling OpenID Connection authentication with
        /// Azure Active Directory or
        /// other 3rd party OpenID Connect providers.
        /// More information on OpenID Connect:
        /// http://openid.net/specs/openid-connect-core-1_0.html
        /// </param>

        /// <param name="clientSecret">The Client Secret of this relying party application (in Azure Active
        /// Directory, this is also referred to as the Key).
        /// This setting is optional. If no client secret is configured, the OpenID
        /// Connect implicit auth flow is used to authenticate end users.
        /// Otherwise, the OpenID Connect Authorization Code Flow is used to
        /// authenticate end users.
        /// More information on OpenID Connect:
        /// http://openid.net/specs/openid-connect-core-1_0.html
        /// </param>

        /// <param name="clientSecretSettingName">The app setting name that contains the client secret of the relying party
        /// application.
        /// </param>

        /// <param name="clientSecretCertificateThumbprint">An alternative to the client secret, that is the thumbprint of a
        /// certificate used for signing purposes. This property acts as
        /// a replacement for the Client Secret. It is also optional.
        /// </param>

        /// <param name="issuer">The OpenID Connect Issuer URI that represents the entity which issues
        /// access tokens for this application.
        /// When using Azure Active Directory, this value is the URI of the directory
        /// tenant, e.g. https://sts.windows.net/{tenant-guid}/.
        /// This URI is a case-sensitive identifier for the token issuer.
        /// More information on OpenID Connect Discovery:
        /// http://openid.net/specs/openid-connect-discovery-1_0.html
        /// </param>

        /// <param name="validateIssuer">Gets a value indicating whether the issuer should be a valid HTTPS url and
        /// be validated as such.
        /// </param>

        /// <param name="allowedAudiences">Allowed audience values to consider when validating JWTs issued by
        /// Azure Active Directory. Note that the &lt;code&gt;ClientID&lt;/code&gt; value is always
        /// considered an
        /// allowed audience, regardless of this setting.
        /// </param>

        /// <param name="additionalLoginParams">Login parameters to send to the OpenID Connect authorization endpoint when
        /// a user logs in. Each parameter must be in the form &#34;key=value&#34;.
        /// </param>

        /// <param name="aadClaimsAuthorization">Gets a JSON string containing the Azure AD Acl settings.
        /// </param>

        /// <param name="googleClientId">The OpenID Connect Client ID for the Google web application.
        /// This setting is required for enabling Google Sign-In.
        /// Google Sign-In documentation:
        /// https://developers.google.com/identity/sign-in/web/
        /// </param>

        /// <param name="googleClientSecret">The client secret associated with the Google web application.
        /// This setting is required for enabling Google Sign-In.
        /// Google Sign-In documentation:
        /// https://developers.google.com/identity/sign-in/web/
        /// </param>

        /// <param name="googleClientSecretSettingName">The app setting name that contains the client secret associated with
        /// the Google web application.
        /// </param>

        /// <param name="googleOAuthScopes">The OAuth 2.0 scopes that will be requested as part of Google Sign-In
        /// authentication.
        /// This setting is optional. If not specified, &#34;openid&#34;, &#34;profile&#34;, and
        /// &#34;email&#34; are used as default scopes.
        /// Google Sign-In documentation:
        /// https://developers.google.com/identity/sign-in/web/
        /// </param>

        /// <param name="facebookAppId">The App ID of the Facebook app used for login.
        /// This setting is required for enabling Facebook Login.
        /// Facebook Login documentation:
        /// https://developers.facebook.com/docs/facebook-login
        /// </param>

        /// <param name="facebookAppSecret">The App Secret of the Facebook app used for Facebook Login.
        /// This setting is required for enabling Facebook Login.
        /// Facebook Login documentation:
        /// https://developers.facebook.com/docs/facebook-login
        /// </param>

        /// <param name="facebookAppSecretSettingName">The app setting name that contains the app secret used for Facebook Login.
        /// </param>

        /// <param name="facebookOAuthScopes">The OAuth 2.0 scopes that will be requested as part of Facebook Login
        /// authentication.
        /// This setting is optional.
        /// Facebook Login documentation:
        /// https://developers.facebook.com/docs/facebook-login
        /// </param>

        /// <param name="gitHubClientId">The Client Id of the GitHub app used for login.
        /// This setting is required for enabling Github login
        /// </param>

        /// <param name="gitHubClientSecret">The Client Secret of the GitHub app used for Github Login.
        /// This setting is required for enabling Github login.
        /// </param>

        /// <param name="gitHubClientSecretSettingName">The app setting name that contains the client secret of the Github
        /// app used for GitHub Login.
        /// </param>

        /// <param name="gitHubOAuthScopes">The OAuth 2.0 scopes that will be requested as part of GitHub Login
        /// authentication.
        /// This setting is optional
        /// </param>

        /// <param name="twitterConsumerKey">The OAuth 1.0a consumer key of the Twitter application used for sign-in.
        /// This setting is required for enabling Twitter Sign-In.
        /// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
        /// </param>

        /// <param name="twitterConsumerSecret">The OAuth 1.0a consumer secret of the Twitter application used for sign-in.
        /// This setting is required for enabling Twitter Sign-In.
        /// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
        /// </param>

        /// <param name="twitterConsumerSecretSettingName">The app setting name that contains the OAuth 1.0a consumer secret of the
        /// Twitter
        /// application used for sign-in.
        /// </param>

        /// <param name="microsoftAccountClientId">The OAuth 2.0 client ID that was created for the app used for
        /// authentication.
        /// This setting is required for enabling Microsoft Account authentication.
        /// Microsoft Account OAuth documentation:
        /// https://dev.onedrive.com/auth/msa_oauth.htm
        /// </param>

        /// <param name="microsoftAccountClientSecret">The OAuth 2.0 client secret that was created for the app used for
        /// authentication.
        /// This setting is required for enabling Microsoft Account authentication.
        /// Microsoft Account OAuth documentation:
        /// https://dev.onedrive.com/auth/msa_oauth.htm
        /// </param>

        /// <param name="microsoftAccountClientSecretSettingName">The app setting name containing the OAuth 2.0 client secret that was
        /// created for the
        /// app used for authentication.
        /// </param>

        /// <param name="microsoftAccountOAuthScopes">The OAuth 2.0 scopes that will be requested as part of Microsoft Account
        /// authentication.
        /// This setting is optional. If not specified, &#34;wl.basic&#34; is used as the
        /// default scope.
        /// Microsoft Account Scopes and permissions documentation:
        /// https://msdn.microsoft.com/en-us/library/dn631845.aspx
        /// </param>

        /// <param name="isAuthFromFile">&#34;true&#34; if the auth config settings should be read from a file,
        /// &#34;false&#34; otherwise
        /// </param>

        /// <param name="authFilePath">The path of the config file containing auth settings.
        /// If the path is relative, base will the site&#39;s root directory.
        /// </param>

        /// <param name="configVersion">The ConfigVersion of the Authentication / Authorization feature in use for
        /// the current app.
        /// The setting in this value can control the behavior of the control plane for
        /// Authentication / Authorization.
        /// </param>
        public SiteAuthSettings(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), bool? enabled = default(bool?), string runtimeVersion = default(string), UnauthenticatedClientAction? unauthenticatedClientAction = default(UnauthenticatedClientAction?), bool? tokenStoreEnabled = default(bool?), System.Collections.Generic.IList<string> allowedExternalRedirectUrls = default(System.Collections.Generic.IList<string>), BuiltInAuthenticationProvider? defaultProvider = default(BuiltInAuthenticationProvider?), double? tokenRefreshExtensionHours = default(double?), string clientId = default(string), string clientSecret = default(string), string clientSecretSettingName = default(string), string clientSecretCertificateThumbprint = default(string), string issuer = default(string), bool? validateIssuer = default(bool?), System.Collections.Generic.IList<string> allowedAudiences = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> additionalLoginParams = default(System.Collections.Generic.IList<string>), string aadClaimsAuthorization = default(string), string googleClientId = default(string), string googleClientSecret = default(string), string googleClientSecretSettingName = default(string), System.Collections.Generic.IList<string> googleOAuthScopes = default(System.Collections.Generic.IList<string>), string facebookAppId = default(string), string facebookAppSecret = default(string), string facebookAppSecretSettingName = default(string), System.Collections.Generic.IList<string> facebookOAuthScopes = default(System.Collections.Generic.IList<string>), string gitHubClientId = default(string), string gitHubClientSecret = default(string), string gitHubClientSecretSettingName = default(string), System.Collections.Generic.IList<string> gitHubOAuthScopes = default(System.Collections.Generic.IList<string>), string twitterConsumerKey = default(string), string twitterConsumerSecret = default(string), string twitterConsumerSecretSettingName = default(string), string microsoftAccountClientId = default(string), string microsoftAccountClientSecret = default(string), string microsoftAccountClientSecretSettingName = default(string), System.Collections.Generic.IList<string> microsoftAccountOAuthScopes = default(System.Collections.Generic.IList<string>), string isAuthFromFile = default(string), string authFilePath = default(string), string configVersion = default(string))

        : base(id, name, kind, type)
        {
            this.Enabled = enabled;
            this.RuntimeVersion = runtimeVersion;
            this.UnauthenticatedClientAction = unauthenticatedClientAction;
            this.TokenStoreEnabled = tokenStoreEnabled;
            this.AllowedExternalRedirectUrls = allowedExternalRedirectUrls;
            this.DefaultProvider = defaultProvider;
            this.TokenRefreshExtensionHours = tokenRefreshExtensionHours;
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            this.ClientSecretSettingName = clientSecretSettingName;
            this.ClientSecretCertificateThumbprint = clientSecretCertificateThumbprint;
            this.Issuer = issuer;
            this.ValidateIssuer = validateIssuer;
            this.AllowedAudiences = allowedAudiences;
            this.AdditionalLoginParams = additionalLoginParams;
            this.AadClaimsAuthorization = aadClaimsAuthorization;
            this.GoogleClientId = googleClientId;
            this.GoogleClientSecret = googleClientSecret;
            this.GoogleClientSecretSettingName = googleClientSecretSettingName;
            this.GoogleOAuthScopes = googleOAuthScopes;
            this.FacebookAppId = facebookAppId;
            this.FacebookAppSecret = facebookAppSecret;
            this.FacebookAppSecretSettingName = facebookAppSecretSettingName;
            this.FacebookOAuthScopes = facebookOAuthScopes;
            this.GitHubClientId = gitHubClientId;
            this.GitHubClientSecret = gitHubClientSecret;
            this.GitHubClientSecretSettingName = gitHubClientSecretSettingName;
            this.GitHubOAuthScopes = gitHubOAuthScopes;
            this.TwitterConsumerKey = twitterConsumerKey;
            this.TwitterConsumerSecret = twitterConsumerSecret;
            this.TwitterConsumerSecretSettingName = twitterConsumerSecretSettingName;
            this.MicrosoftAccountClientId = microsoftAccountClientId;
            this.MicrosoftAccountClientSecret = microsoftAccountClientSecret;
            this.MicrosoftAccountClientSecretSettingName = microsoftAccountClientSecretSettingName;
            this.MicrosoftAccountOAuthScopes = microsoftAccountOAuthScopes;
            this.IsAuthFromFile = isAuthFromFile;
            this.AuthFilePath = authFilePath;
            this.ConfigVersion = configVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if the Authentication / Authorization
        /// feature is enabled for the current app; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enabled")]
        public bool? Enabled {get; set; }

        /// <summary>
        /// Gets or sets the RuntimeVersion of the Authentication / Authorization
        /// feature in use for the current app.
        /// The setting in this value can control the behavior of certain features in
        /// the Authentication / Authorization module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.runtimeVersion")]
        public string RuntimeVersion {get; set; }

        /// <summary>
        /// Gets or sets the action to take when an unauthenticated client attempts to
        /// access the app. Possible values include: &#39;RedirectToLoginPage&#39;, &#39;AllowAnonymous&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.unauthenticatedClientAction")]
        public UnauthenticatedClientAction? UnauthenticatedClientAction {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; to durably store platform-specific security
        /// tokens that are obtained during login flows; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// The default is &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.tokenStoreEnabled")]
        public bool? TokenStoreEnabled {get; set; }

        /// <summary>
        /// Gets or sets external URLs that can be redirected to as part of logging in
        /// or logging out of the app. Note that the query string part of the URL is
        /// ignored.
        /// This is an advanced setting typically only needed by Windows Store
        /// application backends.
        /// Note that URLs within the current domain are always implicitly allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.allowedExternalRedirectUrls")]
        public System.Collections.Generic.IList<string> AllowedExternalRedirectUrls {get; set; }

        /// <summary>
        /// Gets or sets the default authentication provider to use when multiple
        /// providers are configured.
        /// This setting is only needed if multiple providers are configured and the
        /// unauthenticated client
        /// action is set to &#34;RedirectToLoginPage&#34;. Possible values include: &#39;AzureActiveDirectory&#39;, &#39;Facebook&#39;, &#39;Google&#39;, &#39;MicrosoftAccount&#39;, &#39;Twitter&#39;, &#39;Github&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.defaultProvider")]
        public BuiltInAuthenticationProvider? DefaultProvider {get; set; }

        /// <summary>
        /// Gets or sets the number of hours after session token expiration that a
        /// session token can be used to
        /// call the token refresh API. The default is 72 hours.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.tokenRefreshExtensionHours")]
        public double? TokenRefreshExtensionHours {get; set; }

        /// <summary>
        /// Gets or sets the Client ID of this relying party application, known as the
        /// client_id.
        /// This setting is required for enabling OpenID Connection authentication with
        /// Azure Active Directory or
        /// other 3rd party OpenID Connect providers.
        /// More information on OpenID Connect:
        /// http://openid.net/specs/openid-connect-core-1_0.html
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.clientId")]
        public string ClientId {get; set; }

        /// <summary>
        /// Gets or sets the Client Secret of this relying party application (in Azure
        /// Active Directory, this is also referred to as the Key).
        /// This setting is optional. If no client secret is configured, the OpenID
        /// Connect implicit auth flow is used to authenticate end users.
        /// Otherwise, the OpenID Connect Authorization Code Flow is used to
        /// authenticate end users.
        /// More information on OpenID Connect:
        /// http://openid.net/specs/openid-connect-core-1_0.html
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.clientSecret")]
        public string ClientSecret {get; set; }

        /// <summary>
        /// Gets or sets the app setting name that contains the client secret of the
        /// relying party application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.clientSecretSettingName")]
        public string ClientSecretSettingName {get; set; }

        /// <summary>
        /// Gets or sets an alternative to the client secret, that is the thumbprint of
        /// a certificate used for signing purposes. This property acts as
        /// a replacement for the Client Secret. It is also optional.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.clientSecretCertificateThumbprint")]
        public string ClientSecretCertificateThumbprint {get; set; }

        /// <summary>
        /// Gets or sets the OpenID Connect Issuer URI that represents the entity which
        /// issues access tokens for this application.
        /// When using Azure Active Directory, this value is the URI of the directory
        /// tenant, e.g. https://sts.windows.net/{tenant-guid}/.
        /// This URI is a case-sensitive identifier for the token issuer.
        /// More information on OpenID Connect Discovery:
        /// http://openid.net/specs/openid-connect-discovery-1_0.html
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.issuer")]
        public string Issuer {get; set; }

        /// <summary>
        /// Gets or sets gets a value indicating whether the issuer should be a valid
        /// HTTPS url and be validated as such.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.validateIssuer")]
        public bool? ValidateIssuer {get; set; }

        /// <summary>
        /// Gets or sets allowed audience values to consider when validating JWTs
        /// issued by
        /// Azure Active Directory. Note that the &lt;code&gt;ClientID&lt;/code&gt; value is always
        /// considered an
        /// allowed audience, regardless of this setting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.allowedAudiences")]
        public System.Collections.Generic.IList<string> AllowedAudiences {get; set; }

        /// <summary>
        /// Gets or sets login parameters to send to the OpenID Connect authorization
        /// endpoint when
        /// a user logs in. Each parameter must be in the form &#34;key=value&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.additionalLoginParams")]
        public System.Collections.Generic.IList<string> AdditionalLoginParams {get; set; }

        /// <summary>
        /// Gets or sets gets a JSON string containing the Azure AD Acl settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.aadClaimsAuthorization")]
        public string AadClaimsAuthorization {get; set; }

        /// <summary>
        /// Gets or sets the OpenID Connect Client ID for the Google web application.
        /// This setting is required for enabling Google Sign-In.
        /// Google Sign-In documentation:
        /// https://developers.google.com/identity/sign-in/web/
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.googleClientId")]
        public string GoogleClientId {get; set; }

        /// <summary>
        /// Gets or sets the client secret associated with the Google web application.
        /// This setting is required for enabling Google Sign-In.
        /// Google Sign-In documentation:
        /// https://developers.google.com/identity/sign-in/web/
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.googleClientSecret")]
        public string GoogleClientSecret {get; set; }

        /// <summary>
        /// Gets or sets the app setting name that contains the client secret
        /// associated with
        /// the Google web application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.googleClientSecretSettingName")]
        public string GoogleClientSecretSettingName {get; set; }

        /// <summary>
        /// Gets or sets the OAuth 2.0 scopes that will be requested as part of Google
        /// Sign-In authentication.
        /// This setting is optional. If not specified, &#34;openid&#34;, &#34;profile&#34;, and
        /// &#34;email&#34; are used as default scopes.
        /// Google Sign-In documentation:
        /// https://developers.google.com/identity/sign-in/web/
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.googleOAuthScopes")]
        public System.Collections.Generic.IList<string> GoogleOAuthScopes {get; set; }

        /// <summary>
        /// Gets or sets the App ID of the Facebook app used for login.
        /// This setting is required for enabling Facebook Login.
        /// Facebook Login documentation:
        /// https://developers.facebook.com/docs/facebook-login
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.facebookAppId")]
        public string FacebookAppId {get; set; }

        /// <summary>
        /// Gets or sets the App Secret of the Facebook app used for Facebook Login.
        /// This setting is required for enabling Facebook Login.
        /// Facebook Login documentation:
        /// https://developers.facebook.com/docs/facebook-login
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.facebookAppSecret")]
        public string FacebookAppSecret {get; set; }

        /// <summary>
        /// Gets or sets the app setting name that contains the app secret used for
        /// Facebook Login.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.facebookAppSecretSettingName")]
        public string FacebookAppSecretSettingName {get; set; }

        /// <summary>
        /// Gets or sets the OAuth 2.0 scopes that will be requested as part of
        /// Facebook Login authentication.
        /// This setting is optional.
        /// Facebook Login documentation:
        /// https://developers.facebook.com/docs/facebook-login
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.facebookOAuthScopes")]
        public System.Collections.Generic.IList<string> FacebookOAuthScopes {get; set; }

        /// <summary>
        /// Gets or sets the Client Id of the GitHub app used for login.
        /// This setting is required for enabling Github login
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.gitHubClientId")]
        public string GitHubClientId {get; set; }

        /// <summary>
        /// Gets or sets the Client Secret of the GitHub app used for Github Login.
        /// This setting is required for enabling Github login.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.gitHubClientSecret")]
        public string GitHubClientSecret {get; set; }

        /// <summary>
        /// Gets or sets the app setting name that contains the client secret of the
        /// Github
        /// app used for GitHub Login.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.gitHubClientSecretSettingName")]
        public string GitHubClientSecretSettingName {get; set; }

        /// <summary>
        /// Gets or sets the OAuth 2.0 scopes that will be requested as part of GitHub
        /// Login authentication.
        /// This setting is optional
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.gitHubOAuthScopes")]
        public System.Collections.Generic.IList<string> GitHubOAuthScopes {get; set; }

        /// <summary>
        /// Gets or sets the OAuth 1.0a consumer key of the Twitter application used
        /// for sign-in.
        /// This setting is required for enabling Twitter Sign-In.
        /// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.twitterConsumerKey")]
        public string TwitterConsumerKey {get; set; }

        /// <summary>
        /// Gets or sets the OAuth 1.0a consumer secret of the Twitter application used
        /// for sign-in.
        /// This setting is required for enabling Twitter Sign-In.
        /// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.twitterConsumerSecret")]
        public string TwitterConsumerSecret {get; set; }

        /// <summary>
        /// Gets or sets the app setting name that contains the OAuth 1.0a consumer
        /// secret of the Twitter
        /// application used for sign-in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.twitterConsumerSecretSettingName")]
        public string TwitterConsumerSecretSettingName {get; set; }

        /// <summary>
        /// Gets or sets the OAuth 2.0 client ID that was created for the app used for
        /// authentication.
        /// This setting is required for enabling Microsoft Account authentication.
        /// Microsoft Account OAuth documentation:
        /// https://dev.onedrive.com/auth/msa_oauth.htm
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.microsoftAccountClientId")]
        public string MicrosoftAccountClientId {get; set; }

        /// <summary>
        /// Gets or sets the OAuth 2.0 client secret that was created for the app used
        /// for authentication.
        /// This setting is required for enabling Microsoft Account authentication.
        /// Microsoft Account OAuth documentation:
        /// https://dev.onedrive.com/auth/msa_oauth.htm
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.microsoftAccountClientSecret")]
        public string MicrosoftAccountClientSecret {get; set; }

        /// <summary>
        /// Gets or sets the app setting name containing the OAuth 2.0 client secret
        /// that was created for the
        /// app used for authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.microsoftAccountClientSecretSettingName")]
        public string MicrosoftAccountClientSecretSettingName {get; set; }

        /// <summary>
        /// Gets or sets the OAuth 2.0 scopes that will be requested as part of
        /// Microsoft Account authentication.
        /// This setting is optional. If not specified, &#34;wl.basic&#34; is used as the
        /// default scope.
        /// Microsoft Account Scopes and permissions documentation:
        /// https://msdn.microsoft.com/en-us/library/dn631845.aspx
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.microsoftAccountOAuthScopes")]
        public System.Collections.Generic.IList<string> MicrosoftAccountOAuthScopes {get; set; }

        /// <summary>
        /// Gets or sets &#34;true&#34; if the auth config settings should be read from a file,
        /// &#34;false&#34; otherwise
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isAuthFromFile")]
        public string IsAuthFromFile {get; set; }

        /// <summary>
        /// Gets or sets the path of the config file containing auth settings.
        /// If the path is relative, base will the site&#39;s root directory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.authFilePath")]
        public string AuthFilePath {get; set; }

        /// <summary>
        /// Gets or sets the ConfigVersion of the Authentication / Authorization
        /// feature in use for the current app.
        /// The setting in this value can control the behavior of the control plane for
        /// Authentication / Authorization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.configVersion")]
        public string ConfigVersion {get; set; }
    }
}