// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{

    /// <summary>
    /// Defines values for ResolveStatus.
    /// </summary>


    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ResolveStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Initialized")]
        Initialized,
        [System.Runtime.Serialization.EnumMember(Value = "Resolved")]
        Resolved,
        [System.Runtime.Serialization.EnumMember(Value = "InvalidSyntax")]
        InvalidSyntax,
        [System.Runtime.Serialization.EnumMember(Value = "MSINotEnabled")]
        MSINotEnabled,
        [System.Runtime.Serialization.EnumMember(Value = "VaultNotFound")]
        VaultNotFound,
        [System.Runtime.Serialization.EnumMember(Value = "SecretNotFound")]
        SecretNotFound,
        [System.Runtime.Serialization.EnumMember(Value = "SecretVersionNotFound")]
        SecretVersionNotFound,
        [System.Runtime.Serialization.EnumMember(Value = "AccessToKeyVaultDenied")]
        AccessToKeyVaultDenied,
        [System.Runtime.Serialization.EnumMember(Value = "OtherReasons")]
        OtherReasons,
        [System.Runtime.Serialization.EnumMember(Value = "FetchTimedOut")]
        FetchTimedOut,
        [System.Runtime.Serialization.EnumMember(Value = "UnauthorizedClient")]
        UnauthorizedClient
    }
    internal static class ResolveStatusEnumExtension
    {
        internal static string ToSerializedValue(this ResolveStatus? value)
        {
            return value == null ? null : ((ResolveStatus)value).ToSerializedValue();
        }
        internal static string ToSerializedValue(this ResolveStatus value)
        {
            switch( value )
            {
                case ResolveStatus.Initialized:
                    return "Initialized";
                case ResolveStatus.Resolved:
                    return "Resolved";
                case ResolveStatus.InvalidSyntax:
                    return "InvalidSyntax";
                case ResolveStatus.MSINotEnabled:
                    return "MSINotEnabled";
                case ResolveStatus.VaultNotFound:
                    return "VaultNotFound";
                case ResolveStatus.SecretNotFound:
                    return "SecretNotFound";
                case ResolveStatus.SecretVersionNotFound:
                    return "SecretVersionNotFound";
                case ResolveStatus.AccessToKeyVaultDenied:
                    return "AccessToKeyVaultDenied";
                case ResolveStatus.OtherReasons:
                    return "OtherReasons";
                case ResolveStatus.FetchTimedOut:
                    return "FetchTimedOut";
                case ResolveStatus.UnauthorizedClient:
                    return "UnauthorizedClient";
            }
            return null;
        }
        internal static ResolveStatus? ParseResolveStatus(this string value)
        {
            switch( value )
            {
                case "Initialized":
                    return ResolveStatus.Initialized;
                case "Resolved":
                    return ResolveStatus.Resolved;
                case "InvalidSyntax":
                    return ResolveStatus.InvalidSyntax;
                case "MSINotEnabled":
                    return ResolveStatus.MSINotEnabled;
                case "VaultNotFound":
                    return ResolveStatus.VaultNotFound;
                case "SecretNotFound":
                    return ResolveStatus.SecretNotFound;
                case "SecretVersionNotFound":
                    return ResolveStatus.SecretVersionNotFound;
                case "AccessToKeyVaultDenied":
                    return ResolveStatus.AccessToKeyVaultDenied;
                case "OtherReasons":
                    return ResolveStatus.OtherReasons;
                case "FetchTimedOut":
                    return ResolveStatus.FetchTimedOut;
                case "UnauthorizedClient":
                    return ResolveStatus.UnauthorizedClient;
            }
            return null;
        }
    }
}