// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// The configuration settings of a forward proxy used to make the requests.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ForwardProxy : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the ForwardProxy class.
        /// </summary>
        public ForwardProxy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ForwardProxy class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="convention">The convention used to determine the url of the request made.
        /// Possible values include: &#39;NoProxy&#39;, &#39;Standard&#39;, &#39;Custom&#39;</param>

        /// <param name="customHostHeaderName">The name of the header containing the host of the request.
        /// </param>

        /// <param name="customProtoHeaderName">The name of the header containing the scheme of the request.
        /// </param>
        public ForwardProxy(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), ForwardProxyConvention? convention = default(ForwardProxyConvention?), string customHostHeaderName = default(string), string customProtoHeaderName = default(string))

        : base(id, name, kind, type)
        {
            this.Convention = convention;
            this.CustomHostHeaderName = customHostHeaderName;
            this.CustomProtoHeaderName = customProtoHeaderName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the convention used to determine the url of the request made. Possible values include: &#39;NoProxy&#39;, &#39;Standard&#39;, &#39;Custom&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.convention")]
        public ForwardProxyConvention? Convention {get; set; }

        /// <summary>
        /// Gets or sets the name of the header containing the host of the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.customHostHeaderName")]
        public string CustomHostHeaderName {get; set; }

        /// <summary>
        /// Gets or sets the name of the header containing the scheme of the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.customProtoHeaderName")]
        public string CustomProtoHeaderName {get; set; }
    }
}