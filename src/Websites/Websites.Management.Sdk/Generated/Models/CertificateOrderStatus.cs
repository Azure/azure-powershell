// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{

    /// <summary>
    /// Defines values for CertificateOrderStatus.
    /// </summary>


    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum CertificateOrderStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Pendingissuance")]
        Pendingissuance,
        [System.Runtime.Serialization.EnumMember(Value = "Issued")]
        Issued,
        [System.Runtime.Serialization.EnumMember(Value = "Revoked")]
        Revoked,
        [System.Runtime.Serialization.EnumMember(Value = "Canceled")]
        Canceled,
        [System.Runtime.Serialization.EnumMember(Value = "Denied")]
        Denied,
        [System.Runtime.Serialization.EnumMember(Value = "Pendingrevocation")]
        Pendingrevocation,
        [System.Runtime.Serialization.EnumMember(Value = "PendingRekey")]
        PendingRekey,
        [System.Runtime.Serialization.EnumMember(Value = "Unused")]
        Unused,
        [System.Runtime.Serialization.EnumMember(Value = "Expired")]
        Expired,
        [System.Runtime.Serialization.EnumMember(Value = "NotSubmitted")]
        NotSubmitted
    }
    internal static class CertificateOrderStatusEnumExtension
    {
        internal static string ToSerializedValue(this CertificateOrderStatus? value)
        {
            return value == null ? null : ((CertificateOrderStatus)value).ToSerializedValue();
        }
        internal static string ToSerializedValue(this CertificateOrderStatus value)
        {
            switch( value )
            {
                case CertificateOrderStatus.Pendingissuance:
                    return "Pendingissuance";
                case CertificateOrderStatus.Issued:
                    return "Issued";
                case CertificateOrderStatus.Revoked:
                    return "Revoked";
                case CertificateOrderStatus.Canceled:
                    return "Canceled";
                case CertificateOrderStatus.Denied:
                    return "Denied";
                case CertificateOrderStatus.Pendingrevocation:
                    return "Pendingrevocation";
                case CertificateOrderStatus.PendingRekey:
                    return "PendingRekey";
                case CertificateOrderStatus.Unused:
                    return "Unused";
                case CertificateOrderStatus.Expired:
                    return "Expired";
                case CertificateOrderStatus.NotSubmitted:
                    return "NotSubmitted";
            }
            return null;
        }
        internal static CertificateOrderStatus? ParseCertificateOrderStatus(this string value)
        {
            switch( value )
            {
                case "Pendingissuance":
                    return CertificateOrderStatus.Pendingissuance;
                case "Issued":
                    return CertificateOrderStatus.Issued;
                case "Revoked":
                    return CertificateOrderStatus.Revoked;
                case "Canceled":
                    return CertificateOrderStatus.Canceled;
                case "Denied":
                    return CertificateOrderStatus.Denied;
                case "Pendingrevocation":
                    return CertificateOrderStatus.Pendingrevocation;
                case "PendingRekey":
                    return CertificateOrderStatus.PendingRekey;
                case "Unused":
                    return CertificateOrderStatus.Unused;
                case "Expired":
                    return CertificateOrderStatus.Expired;
                case "NotSubmitted":
                    return CertificateOrderStatus.NotSubmitted;
            }
            return null;
        }
    }
}