// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class WebSiteInstanceStatus : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the WebSiteInstanceStatus class.
        /// </summary>
        public WebSiteInstanceStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WebSiteInstanceStatus class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="state">
        /// Possible values include: &#39;READY&#39;, &#39;STOPPED&#39;, &#39;UNKNOWN&#39;</param>

        /// <param name="statusUrl">Link to the GetStatusApi in Kudu
        /// </param>

        /// <param name="detectorUrl">Link to the Diagnose and Solve Portal
        /// </param>

        /// <param name="consoleUrl">Link to the console to web app instance
        /// </param>

        /// <param name="healthCheckUrl">Link to the console to web app instance
        /// </param>

        /// <param name="containers">Dictionary of &lt;ContainerInfo&gt;
        /// </param>
        public WebSiteInstanceStatus(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), SiteRuntimeState? state = default(SiteRuntimeState?), string statusUrl = default(string), string detectorUrl = default(string), string consoleUrl = default(string), string healthCheckUrl = default(string), System.Collections.Generic.IDictionary<string, ContainerInfo> containers = default(System.Collections.Generic.IDictionary<string, ContainerInfo>))

        : base(id, name, kind, type)
        {
            this.State = state;
            this.StatusUrl = statusUrl;
            this.DetectorUrl = detectorUrl;
            this.ConsoleUrl = consoleUrl;
            this.HealthCheckUrl = healthCheckUrl;
            this.Containers = containers;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets Possible values include: &#39;READY&#39;, &#39;STOPPED&#39;, &#39;UNKNOWN&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.state")]
        public SiteRuntimeState? State {get; set; }

        /// <summary>
        /// Gets or sets link to the GetStatusApi in Kudu
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.statusUrl")]
        public string StatusUrl {get; set; }

        /// <summary>
        /// Gets or sets link to the Diagnose and Solve Portal
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.detectorUrl")]
        public string DetectorUrl {get; set; }

        /// <summary>
        /// Gets or sets link to the console to web app instance
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.consoleUrl")]
        public string ConsoleUrl {get; set; }

        /// <summary>
        /// Gets or sets link to the console to web app instance
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.healthCheckUrl")]
        public string HealthCheckUrl {get; set; }

        /// <summary>
        /// Gets or sets dictionary of &lt;ContainerInfo&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.containers")]
        public System.Collections.Generic.IDictionary<string, ContainerInfo> Containers {get; set; }
    }
}