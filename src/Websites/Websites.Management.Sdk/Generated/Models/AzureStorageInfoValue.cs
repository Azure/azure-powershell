// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Azure Files or Blob Storage access information value for dictionary
    /// storage.
    /// </summary>
    public partial class AzureStorageInfoValue
    {
        /// <summary>
        /// Initializes a new instance of the AzureStorageInfoValue class.
        /// </summary>
        public AzureStorageInfoValue()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureStorageInfoValue class.
        /// </summary>

        /// <param name="type">Type of storage.
        /// Possible values include: &#39;AzureFiles&#39;, &#39;AzureBlob&#39;</param>

        /// <param name="accountName">Name of the storage account.
        /// </param>

        /// <param name="shareName">Name of the file share (container name, for Blob storage).
        /// </param>

        /// <param name="accessKey">Access key for the storage account.
        /// </param>

        /// <param name="mountPath">Path to mount the storage within the site&#39;s runtime environment.
        /// </param>

        /// <param name="state">State of the storage account.
        /// Possible values include: &#39;Ok&#39;, &#39;InvalidCredentials&#39;, &#39;InvalidShare&#39;,
        /// &#39;NotValidated&#39;</param>
        public AzureStorageInfoValue(AzureStorageType? type = default(AzureStorageType?), string accountName = default(string), string shareName = default(string), string accessKey = default(string), string mountPath = default(string), AzureStorageState? state = default(AzureStorageState?))

        {
            this.Type = type;
            this.AccountName = accountName;
            this.ShareName = shareName;
            this.AccessKey = accessKey;
            this.MountPath = mountPath;
            this.State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets type of storage. Possible values include: &#39;AzureFiles&#39;, &#39;AzureBlob&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public AzureStorageType? Type {get; set; }

        /// <summary>
        /// Gets or sets name of the storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accountName")]
        public string AccountName {get; set; }

        /// <summary>
        /// Gets or sets name of the file share (container name, for Blob storage).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "shareName")]
        public string ShareName {get; set; }

        /// <summary>
        /// Gets or sets access key for the storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accessKey")]
        public string AccessKey {get; set; }

        /// <summary>
        /// Gets or sets path to mount the storage within the site&#39;s runtime
        /// environment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mountPath")]
        public string MountPath {get; set; }

        /// <summary>
        /// Gets state of the storage account. Possible values include: &#39;Ok&#39;, &#39;InvalidCredentials&#39;, &#39;InvalidShare&#39;, &#39;NotValidated&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public AzureStorageState? State {get; private set; }
    }
}