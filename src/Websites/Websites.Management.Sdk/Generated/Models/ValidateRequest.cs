// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Resource validation request content.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ValidateRequest
    {
        /// <summary>
        /// Initializes a new instance of the ValidateRequest class.
        /// </summary>
        public ValidateRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ValidateRequest class.
        /// </summary>

        /// <param name="name">Resource name to verify.
        /// </param>

        /// <param name="type">Resource type used for verification.
        /// Possible values include: &#39;ServerFarm&#39;, &#39;Site&#39;,
        /// &#39;Microsoft.Web/hostingEnvironments&#39;</param>

        /// <param name="location">Expected location of the resource.
        /// </param>

        /// <param name="serverFarmId">ARM resource ID of an App Service plan that would host the app.
        /// </param>

        /// <param name="skuName">Name of the target SKU for the App Service plan.
        /// </param>

        /// <param name="needLinuxWorkers">&lt;code&gt;true&lt;/code&gt; if App Service plan is for Linux workers; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="isSpot">&lt;code&gt;true&lt;/code&gt; if App Service plan is for Spot instances; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="capacity">Target capacity of the App Service plan (number of VMs).
        /// </param>

        /// <param name="hostingEnvironment">Name of App Service Environment where app or App Service plan should be
        /// created.
        /// </param>

        /// <param name="isXenon">&lt;code&gt;true&lt;/code&gt; if App Service plan is running as a windows container
        /// </param>

        /// <param name="containerRegistryBaseUrl">Base URL of the container registry
        /// </param>

        /// <param name="containerRegistryUsername">Username for to access the container registry
        /// </param>

        /// <param name="containerRegistryPassword">Password for to access the container registry
        /// </param>

        /// <param name="containerImageRepository">Repository name (image name)
        /// </param>

        /// <param name="containerImageTag">Image tag
        /// </param>

        /// <param name="containerImagePlatform">Platform (windows or linux)
        /// </param>

        /// <param name="appServiceEnvironment">App Service Environment Properties
        /// </param>
        public ValidateRequest(string name, string type, string location, string serverFarmId = default(string), string skuName = default(string), bool? needLinuxWorkers = default(bool?), bool? isSpot = default(bool?), int? capacity = default(int?), string hostingEnvironment = default(string), bool? isXenon = default(bool?), string containerRegistryBaseUrl = default(string), string containerRegistryUsername = default(string), string containerRegistryPassword = default(string), string containerImageRepository = default(string), string containerImageTag = default(string), string containerImagePlatform = default(string), AppServiceEnvironment appServiceEnvironment = default(AppServiceEnvironment))

        {
            this.Name = name;
            this.Type = type;
            this.Location = location;
            this.ServerFarmId = serverFarmId;
            this.SkuName = skuName;
            this.NeedLinuxWorkers = needLinuxWorkers;
            this.IsSpot = isSpot;
            this.Capacity = capacity;
            this.HostingEnvironment = hostingEnvironment;
            this.IsXenon = isXenon;
            this.ContainerRegistryBaseUrl = containerRegistryBaseUrl;
            this.ContainerRegistryUsername = containerRegistryUsername;
            this.ContainerRegistryPassword = containerRegistryPassword;
            this.ContainerImageRepository = containerImageRepository;
            this.ContainerImageTag = containerImageTag;
            this.ContainerImagePlatform = containerImagePlatform;
            this.AppServiceEnvironment = appServiceEnvironment;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets resource name to verify.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets resource type used for verification. Possible values include: &#39;ServerFarm&#39;, &#39;Site&#39;, &#39;Microsoft.Web/hostingEnvironments&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; set; }

        /// <summary>
        /// Gets or sets expected location of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location {get; set; }

        /// <summary>
        /// Gets or sets aRM resource ID of an App Service plan that would host the
        /// app.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serverFarmId")]
        public string ServerFarmId {get; set; }

        /// <summary>
        /// Gets or sets name of the target SKU for the App Service plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.skuName")]
        public string SkuName {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if App Service plan is for Linux workers;
        /// otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.needLinuxWorkers")]
        public bool? NeedLinuxWorkers {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if App Service plan is for Spot instances;
        /// otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isSpot")]
        public bool? IsSpot {get; set; }

        /// <summary>
        /// Gets or sets target capacity of the App Service plan (number of VMs).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.capacity")]
        public int? Capacity {get; set; }

        /// <summary>
        /// Gets or sets name of App Service Environment where app or App Service plan
        /// should be created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hostingEnvironment")]
        public string HostingEnvironment {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if App Service plan is running as a windows
        /// container
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isXenon")]
        public bool? IsXenon {get; set; }

        /// <summary>
        /// Gets or sets base URL of the container registry
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.containerRegistryBaseUrl")]
        public string ContainerRegistryBaseUrl {get; set; }

        /// <summary>
        /// Gets or sets username for to access the container registry
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.containerRegistryUsername")]
        public string ContainerRegistryUsername {get; set; }

        /// <summary>
        /// Gets or sets password for to access the container registry
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.containerRegistryPassword")]
        public string ContainerRegistryPassword {get; set; }

        /// <summary>
        /// Gets or sets repository name (image name)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.containerImageRepository")]
        public string ContainerImageRepository {get; set; }

        /// <summary>
        /// Gets or sets image tag
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.containerImageTag")]
        public string ContainerImageTag {get; set; }

        /// <summary>
        /// Gets or sets platform (windows or linux)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.containerImagePlatform")]
        public string ContainerImagePlatform {get; set; }

        /// <summary>
        /// Gets or sets app Service Environment Properties
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.appServiceEnvironment")]
        public AppServiceEnvironment AppServiceEnvironment {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (this.Type == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Type");
            }
            if (this.Location == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Location");
            }





            if (this.Capacity != null)
            {
                if (this.Capacity < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Capacity", 1);
                }
            }







            if (this.AppServiceEnvironment != null)
            {
                this.AppServiceEnvironment.Validate();
            }
        }
    }
}