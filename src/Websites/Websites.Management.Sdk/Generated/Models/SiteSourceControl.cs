// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Source control configuration for an app.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SiteSourceControl : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the SiteSourceControl class.
        /// </summary>
        public SiteSourceControl()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SiteSourceControl class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="repoUrl">Repository or source control URL.
        /// </param>

        /// <param name="branch">Name of branch to use for deployment.
        /// </param>

        /// <param name="isManualIntegration">&lt;code&gt;true&lt;/code&gt; to limit to manual integration; &lt;code&gt;false&lt;/code&gt; to
        /// enable continuous integration (which configures webhooks into online repos
        /// like GitHub).
        /// </param>

        /// <param name="isGitHubAction">&lt;code&gt;true&lt;/code&gt; if this is deployed via GitHub action.
        /// </param>

        /// <param name="deploymentRollbackEnabled">&lt;code&gt;true&lt;/code&gt; to enable deployment rollback; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="isMercurial">&lt;code&gt;true&lt;/code&gt; for a Mercurial repository; &lt;code&gt;false&lt;/code&gt; for a Git
        /// repository.
        /// </param>

        /// <param name="gitHubActionConfiguration">If GitHub Action is selected, than the associated configuration.
        /// </param>
        public SiteSourceControl(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), string repoUrl = default(string), string branch = default(string), bool? isManualIntegration = default(bool?), bool? isGitHubAction = default(bool?), bool? deploymentRollbackEnabled = default(bool?), bool? isMercurial = default(bool?), GitHubActionConfiguration gitHubActionConfiguration = default(GitHubActionConfiguration))

        : base(id, name, kind, type)
        {
            this.RepoUrl = repoUrl;
            this.Branch = branch;
            this.IsManualIntegration = isManualIntegration;
            this.IsGitHubAction = isGitHubAction;
            this.DeploymentRollbackEnabled = deploymentRollbackEnabled;
            this.IsMercurial = isMercurial;
            this.GitHubActionConfiguration = gitHubActionConfiguration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets repository or source control URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.repoUrl")]
        public string RepoUrl {get; set; }

        /// <summary>
        /// Gets or sets name of branch to use for deployment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.branch")]
        public string Branch {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; to limit to manual integration;
        /// &lt;code&gt;false&lt;/code&gt; to enable continuous integration (which configures
        /// webhooks into online repos like GitHub).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isManualIntegration")]
        public bool? IsManualIntegration {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if this is deployed via GitHub action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isGitHubAction")]
        public bool? IsGitHubAction {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; to enable deployment rollback; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.deploymentRollbackEnabled")]
        public bool? DeploymentRollbackEnabled {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; for a Mercurial repository;
        /// &lt;code&gt;false&lt;/code&gt; for a Git repository.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isMercurial")]
        public bool? IsMercurial {get; set; }

        /// <summary>
        /// Gets or sets if GitHub Action is selected, than the associated
        /// configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.gitHubActionConfiguration")]
        public GitHubActionConfiguration GitHubActionConfiguration {get; set; }
    }
}