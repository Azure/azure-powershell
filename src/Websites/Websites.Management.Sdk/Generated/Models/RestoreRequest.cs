// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System.Linq;

    /// <summary>
    /// Description of a restore request.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class RestoreRequest : ProxyOnlyResource
    {
        /// <summary>
        /// Initializes a new instance of the RestoreRequest class.
        /// </summary>
        public RestoreRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RestoreRequest class.
        /// </summary>

        /// <param name="id">Resource Id.
        /// </param>

        /// <param name="name">Resource Name.
        /// </param>

        /// <param name="kind">Kind of resource.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="storageAccountUrl">SAS URL to the container.
        /// </param>

        /// <param name="blobName">Name of a blob which contains the backup.
        /// </param>

        /// <param name="overwrite">&lt;code&gt;true&lt;/code&gt; if the restore operation can overwrite target app;
        /// otherwise, &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;true&lt;/code&gt; is needed if trying to
        /// restore over an existing app.
        /// </param>

        /// <param name="siteName">Name of an app.
        /// </param>

        /// <param name="databases">Collection of databases which should be restored. This list has to match
        /// the list of databases included in the backup.
        /// </param>

        /// <param name="ignoreConflictingHostNames">Changes a logic when restoring an app with custom domains.
        /// &lt;code&gt;true&lt;/code&gt; to remove custom domains automatically. If
        /// &lt;code&gt;false&lt;/code&gt;, custom domains are added to
        /// the app&#39;s object when it is being restored, but that might fail due to
        /// conflicts during the operation.
        /// </param>

        /// <param name="ignoreDatabases">Ignore the databases and only restore the site content
        /// </param>

        /// <param name="appServicePlan">Specify app service plan that will own restored site.
        /// </param>

        /// <param name="operationType">Operation type.
        /// Possible values include: &#39;Default&#39;, &#39;Clone&#39;, &#39;Relocation&#39;, &#39;Snapshot&#39;,
        /// &#39;CloudFS&#39;</param>

        /// <param name="adjustConnectionStrings">&lt;code&gt;true&lt;/code&gt; if SiteConfig.ConnectionStrings should be set in new app;
        /// otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </param>

        /// <param name="hostingEnvironment">App Service Environment name, if needed (only when restoring an app to an
        /// App Service Environment).
        /// </param>
        public RestoreRequest(string id = default(string), string name = default(string), string kind = default(string), string type = default(string), string storageAccountUrl = default(string), string blobName = default(string), bool? overwrite = default(bool?), string siteName = default(string), System.Collections.Generic.IList<DatabaseBackupSetting> databases = default(System.Collections.Generic.IList<DatabaseBackupSetting>), bool? ignoreConflictingHostNames = default(bool?), bool? ignoreDatabases = default(bool?), string appServicePlan = default(string), BackupRestoreOperationType? operationType = default(BackupRestoreOperationType?), bool? adjustConnectionStrings = default(bool?), string hostingEnvironment = default(string))

        : base(id, name, kind, type)
        {
            this.StorageAccountUrl = storageAccountUrl;
            this.BlobName = blobName;
            this.Overwrite = overwrite;
            this.SiteName = siteName;
            this.Databases = databases;
            this.IgnoreConflictingHostNames = ignoreConflictingHostNames;
            this.IgnoreDatabases = ignoreDatabases;
            this.AppServicePlan = appServicePlan;
            this.OperationType = operationType;
            this.AdjustConnectionStrings = adjustConnectionStrings;
            this.HostingEnvironment = hostingEnvironment;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets sAS URL to the container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.storageAccountUrl")]
        public string StorageAccountUrl {get; set; }

        /// <summary>
        /// Gets or sets name of a blob which contains the backup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.blobName")]
        public string BlobName {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if the restore operation can overwrite
        /// target app; otherwise, &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;true&lt;/code&gt; is needed if
        /// trying to restore over an existing app.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.overwrite")]
        public bool? Overwrite {get; set; }

        /// <summary>
        /// Gets or sets name of an app.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.siteName")]
        public string SiteName {get; set; }

        /// <summary>
        /// Gets or sets collection of databases which should be restored. This list
        /// has to match the list of databases included in the backup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.databases")]
        public System.Collections.Generic.IList<DatabaseBackupSetting> Databases {get; set; }

        /// <summary>
        /// Gets or sets changes a logic when restoring an app with custom domains.
        /// &lt;code&gt;true&lt;/code&gt; to remove custom domains automatically. If
        /// &lt;code&gt;false&lt;/code&gt;, custom domains are added to
        /// the app&#39;s object when it is being restored, but that might fail due to
        /// conflicts during the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ignoreConflictingHostNames")]
        public bool? IgnoreConflictingHostNames {get; set; }

        /// <summary>
        /// Gets or sets ignore the databases and only restore the site content
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ignoreDatabases")]
        public bool? IgnoreDatabases {get; set; }

        /// <summary>
        /// Gets or sets specify app service plan that will own restored site.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.appServicePlan")]
        public string AppServicePlan {get; set; }

        /// <summary>
        /// Gets or sets operation type. Possible values include: &#39;Default&#39;, &#39;Clone&#39;, &#39;Relocation&#39;, &#39;Snapshot&#39;, &#39;CloudFS&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.operationType")]
        public BackupRestoreOperationType? OperationType {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if SiteConfig.ConnectionStrings should be
        /// set in new app; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.adjustConnectionStrings")]
        public bool? AdjustConnectionStrings {get; set; }

        /// <summary>
        /// Gets or sets app Service Environment name, if needed (only when restoring
        /// an app to an App Service Environment).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hostingEnvironment")]
        public string HostingEnvironment {get; set; }
    }
}