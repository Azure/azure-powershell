// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ResourceHealthMetadataOperations
    /// </summary>
    public static partial class ResourceHealthMetadataOperationsExtensions
    {
        /// <summary>
        /// Description for List all ResourceHealthMetadata for all sites in the
        /// subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ResourceHealthMetadata> List(this IResourceHealthMetadataOperations operations)
        {
                return ((IResourceHealthMetadataOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List all ResourceHealthMetadata for all sites in the
        /// subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ResourceHealthMetadata>> ListAsync(this IResourceHealthMetadataOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List all ResourceHealthMetadata for all sites in the
        /// resource group in the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ResourceHealthMetadata> ListByResourceGroup(this IResourceHealthMetadataOperations operations, string resourceGroupName)
        {
                return ((IResourceHealthMetadataOperations)operations).ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List all ResourceHealthMetadata for all sites in the
        /// resource group in the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ResourceHealthMetadata>> ListByResourceGroupAsync(this IResourceHealthMetadataOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the category of ResourceHealthMetadata to use for the
        /// given site as a collection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ResourceHealthMetadata> ListBySite(this IResourceHealthMetadataOperations operations, string resourceGroupName, string name)
        {
                return ((IResourceHealthMetadataOperations)operations).ListBySiteAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the category of ResourceHealthMetadata to use for the
        /// given site as a collection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ResourceHealthMetadata>> ListBySiteAsync(this IResourceHealthMetadataOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySiteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the category of ResourceHealthMetadata to use for the
        /// given site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app
        /// </param>
        public static ResourceHealthMetadata GetBySite(this IResourceHealthMetadataOperations operations, string resourceGroupName, string name)
        {
                return ((IResourceHealthMetadataOperations)operations).GetBySiteAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the category of ResourceHealthMetadata to use for the
        /// given site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ResourceHealthMetadata> GetBySiteAsync(this IResourceHealthMetadataOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetBySiteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the category of ResourceHealthMetadata to use for the
        /// given site as a collection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ResourceHealthMetadata> ListBySiteSlot(this IResourceHealthMetadataOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IResourceHealthMetadataOperations)operations).ListBySiteSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the category of ResourceHealthMetadata to use for the
        /// given site as a collection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ResourceHealthMetadata>> ListBySiteSlotAsync(this IResourceHealthMetadataOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySiteSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the category of ResourceHealthMetadata to use for the
        /// given site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static ResourceHealthMetadata GetBySiteSlot(this IResourceHealthMetadataOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IResourceHealthMetadataOperations)operations).GetBySiteSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the category of ResourceHealthMetadata to use for the
        /// given site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ResourceHealthMetadata> GetBySiteSlotAsync(this IResourceHealthMetadataOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetBySiteSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List all ResourceHealthMetadata for all sites in the
        /// subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ResourceHealthMetadata> ListNext(this IResourceHealthMetadataOperations operations, string nextPageLink)
        {
                return ((IResourceHealthMetadataOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List all ResourceHealthMetadata for all sites in the
        /// subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ResourceHealthMetadata>> ListNextAsync(this IResourceHealthMetadataOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List all ResourceHealthMetadata for all sites in the
        /// resource group in the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ResourceHealthMetadata> ListByResourceGroupNext(this IResourceHealthMetadataOperations operations, string nextPageLink)
        {
                return ((IResourceHealthMetadataOperations)operations).ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List all ResourceHealthMetadata for all sites in the
        /// resource group in the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ResourceHealthMetadata>> ListByResourceGroupNextAsync(this IResourceHealthMetadataOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the category of ResourceHealthMetadata to use for the
        /// given site as a collection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ResourceHealthMetadata> ListBySiteNext(this IResourceHealthMetadataOperations operations, string nextPageLink)
        {
                return ((IResourceHealthMetadataOperations)operations).ListBySiteNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the category of ResourceHealthMetadata to use for the
        /// given site as a collection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ResourceHealthMetadata>> ListBySiteNextAsync(this IResourceHealthMetadataOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySiteNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the category of ResourceHealthMetadata to use for the
        /// given site as a collection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ResourceHealthMetadata> ListBySiteSlotNext(this IResourceHealthMetadataOperations operations, string nextPageLink)
        {
                return ((IResourceHealthMetadataOperations)operations).ListBySiteSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the category of ResourceHealthMetadata to use for the
        /// given site as a collection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ResourceHealthMetadata>> ListBySiteSlotNextAsync(this IResourceHealthMetadataOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySiteSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
