// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for RecommendationsOperations
    /// </summary>
    public static partial class RecommendationsOperationsExtensions
    {
        /// <summary>
        /// Description for List all recommendations for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='featured'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations.
        /// The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations.
        /// </param>
        /// <param name='filter'>
        /// Filter is specified by using OData syntax. Example: $filter=channel eq
        /// &#39;Api&#39; or channel eq &#39;Notification&#39; and startTime eq 2014-01-01T00:00:00Z
        /// and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
        /// duration&#39;[PT1H|PT1M|P1D]
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Recommendation> List(this IRecommendationsOperations operations, bool? featured = default(bool?), string filter = default(string))
        {
                return ((IRecommendationsOperations)operations).ListAsync(featured, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List all recommendations for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='featured'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations.
        /// The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations.
        /// </param>
        /// <param name='filter'>
        /// Filter is specified by using OData syntax. Example: $filter=channel eq
        /// &#39;Api&#39; or channel eq &#39;Notification&#39; and startTime eq 2014-01-01T00:00:00Z
        /// and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
        /// duration&#39;[PT1H|PT1M|P1D]
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Recommendation>> ListAsync(this IRecommendationsOperations operations, bool? featured = default(bool?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(featured, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Reset all recommendation opt-out settings for a
        /// subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static void ResetAllFilters(this IRecommendationsOperations operations)
        {
                ((IRecommendationsOperations)operations).ResetAllFiltersAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Reset all recommendation opt-out settings for a
        /// subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ResetAllFiltersAsync(this IRecommendationsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.ResetAllFiltersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Disables the specified rule so it will not apply to a
        /// subscription in the future.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// Rule name
        /// </param>
        public static void DisableRecommendationForSubscription(this IRecommendationsOperations operations, string name)
        {
                ((IRecommendationsOperations)operations).DisableRecommendationForSubscriptionAsync(name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Disables the specified rule so it will not apply to a
        /// subscription in the future.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='name'>
        /// Rule name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DisableRecommendationForSubscriptionAsync(this IRecommendationsOperations operations, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DisableRecommendationForSubscriptionWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Get past recommendations for an app, optionally specified
        /// by the time range.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='hostingEnvironmentName'>
        /// Name of the hosting environment.
        /// </param>
        /// <param name='expiredOnly'>
        /// Specify &lt;code&gt;false&lt;/code&gt; to return all recommendations. The default is
        /// &lt;code&gt;true&lt;/code&gt;, which returns only expired recommendations.
        /// </param>
        /// <param name='filter'>
        /// Filter is specified by using OData syntax. Example: $filter=channel eq
        /// &#39;Api&#39; or channel eq &#39;Notification&#39; and startTime eq 2014-01-01T00:00:00Z
        /// and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
        /// duration&#39;[PT1H|PT1M|P1D]
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Recommendation> ListHistoryForHostingEnvironment(this IRecommendationsOperations operations, string resourceGroupName, string hostingEnvironmentName, bool? expiredOnly = default(bool?), string filter = default(string))
        {
                return ((IRecommendationsOperations)operations).ListHistoryForHostingEnvironmentAsync(resourceGroupName, hostingEnvironmentName, expiredOnly, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get past recommendations for an app, optionally specified
        /// by the time range.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='hostingEnvironmentName'>
        /// Name of the hosting environment.
        /// </param>
        /// <param name='expiredOnly'>
        /// Specify &lt;code&gt;false&lt;/code&gt; to return all recommendations. The default is
        /// &lt;code&gt;true&lt;/code&gt;, which returns only expired recommendations.
        /// </param>
        /// <param name='filter'>
        /// Filter is specified by using OData syntax. Example: $filter=channel eq
        /// &#39;Api&#39; or channel eq &#39;Notification&#39; and startTime eq 2014-01-01T00:00:00Z
        /// and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
        /// duration&#39;[PT1H|PT1M|P1D]
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Recommendation>> ListHistoryForHostingEnvironmentAsync(this IRecommendationsOperations operations, string resourceGroupName, string hostingEnvironmentName, bool? expiredOnly = default(bool?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListHistoryForHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, hostingEnvironmentName, expiredOnly, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all recommendations for a hosting environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='hostingEnvironmentName'>
        /// Name of the app.
        /// </param>
        /// <param name='featured'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations.
        /// The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations.
        /// </param>
        /// <param name='filter'>
        /// Return only channels specified in the filter. Filter is specified by using
        /// OData syntax. Example: $filter=channel eq &#39;Api&#39; or channel eq
        /// &#39;Notification&#39;
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Recommendation> ListRecommendedRulesForHostingEnvironment(this IRecommendationsOperations operations, string resourceGroupName, string hostingEnvironmentName, bool? featured = default(bool?), string filter = default(string))
        {
                return ((IRecommendationsOperations)operations).ListRecommendedRulesForHostingEnvironmentAsync(resourceGroupName, hostingEnvironmentName, featured, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all recommendations for a hosting environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='hostingEnvironmentName'>
        /// Name of the app.
        /// </param>
        /// <param name='featured'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations.
        /// The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations.
        /// </param>
        /// <param name='filter'>
        /// Return only channels specified in the filter. Filter is specified by using
        /// OData syntax. Example: $filter=channel eq &#39;Api&#39; or channel eq
        /// &#39;Notification&#39;
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Recommendation>> ListRecommendedRulesForHostingEnvironmentAsync(this IRecommendationsOperations operations, string resourceGroupName, string hostingEnvironmentName, bool? featured = default(bool?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListRecommendedRulesForHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, hostingEnvironmentName, featured, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Disable all recommendations for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='environmentName'>
        /// Name of the app.
        /// </param>
        /// <param name='hostingEnvironmentName'>
        /// 
        /// </param>
        public static void DisableAllForHostingEnvironment(this IRecommendationsOperations operations, string resourceGroupName, string environmentName, string hostingEnvironmentName)
        {
                ((IRecommendationsOperations)operations).DisableAllForHostingEnvironmentAsync(resourceGroupName, environmentName, hostingEnvironmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Disable all recommendations for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='environmentName'>
        /// Name of the app.
        /// </param>
        /// <param name='hostingEnvironmentName'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DisableAllForHostingEnvironmentAsync(this IRecommendationsOperations operations, string resourceGroupName, string environmentName, string hostingEnvironmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DisableAllForHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, environmentName, hostingEnvironmentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Reset all recommendation opt-out settings for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='environmentName'>
        /// Name of the app.
        /// </param>
        /// <param name='hostingEnvironmentName'>
        /// 
        /// </param>
        public static void ResetAllFiltersForHostingEnvironment(this IRecommendationsOperations operations, string resourceGroupName, string environmentName, string hostingEnvironmentName)
        {
                ((IRecommendationsOperations)operations).ResetAllFiltersForHostingEnvironmentAsync(resourceGroupName, environmentName, hostingEnvironmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Reset all recommendation opt-out settings for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='environmentName'>
        /// Name of the app.
        /// </param>
        /// <param name='hostingEnvironmentName'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ResetAllFiltersForHostingEnvironmentAsync(this IRecommendationsOperations operations, string resourceGroupName, string environmentName, string hostingEnvironmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.ResetAllFiltersForHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, environmentName, hostingEnvironmentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Get a recommendation rule for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='hostingEnvironmentName'>
        /// Name of the hosting environment.
        /// </param>
        /// <param name='name'>
        /// Name of the recommendation.
        /// </param>
        /// <param name='updateSeen'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to update the last-seen timestamp of the
        /// recommendation object.
        /// </param>
        /// <param name='recommendationId'>
        /// The GUID of the recommendation object if you query an expired one. You
        /// don&#39;t need to specify it to query an active entry.
        /// </param>
        public static RecommendationRule GetRuleDetailsByHostingEnvironment(this IRecommendationsOperations operations, string resourceGroupName, string hostingEnvironmentName, string name, bool? updateSeen = default(bool?), string recommendationId = default(string))
        {
                return ((IRecommendationsOperations)operations).GetRuleDetailsByHostingEnvironmentAsync(resourceGroupName, hostingEnvironmentName, name, updateSeen, recommendationId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get a recommendation rule for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='hostingEnvironmentName'>
        /// Name of the hosting environment.
        /// </param>
        /// <param name='name'>
        /// Name of the recommendation.
        /// </param>
        /// <param name='updateSeen'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to update the last-seen timestamp of the
        /// recommendation object.
        /// </param>
        /// <param name='recommendationId'>
        /// The GUID of the recommendation object if you query an expired one. You
        /// don&#39;t need to specify it to query an active entry.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecommendationRule> GetRuleDetailsByHostingEnvironmentAsync(this IRecommendationsOperations operations, string resourceGroupName, string hostingEnvironmentName, string name, bool? updateSeen = default(bool?), string recommendationId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetRuleDetailsByHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, hostingEnvironmentName, name, updateSeen, recommendationId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Disables the specific rule for a web site permanently.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='environmentName'>
        /// Site name
        /// </param>
        /// <param name='name'>
        /// Rule name
        /// </param>
        /// <param name='hostingEnvironmentName'>
        /// 
        /// </param>
        public static void DisableRecommendationForHostingEnvironment(this IRecommendationsOperations operations, string resourceGroupName, string environmentName, string name, string hostingEnvironmentName)
        {
                ((IRecommendationsOperations)operations).DisableRecommendationForHostingEnvironmentAsync(resourceGroupName, environmentName, name, hostingEnvironmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Disables the specific rule for a web site permanently.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='environmentName'>
        /// Site name
        /// </param>
        /// <param name='name'>
        /// Rule name
        /// </param>
        /// <param name='hostingEnvironmentName'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DisableRecommendationForHostingEnvironmentAsync(this IRecommendationsOperations operations, string resourceGroupName, string environmentName, string name, string hostingEnvironmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DisableRecommendationForHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, environmentName, name, hostingEnvironmentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Get past recommendations for an app, optionally specified
        /// by the time range.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='siteName'>
        /// Name of the app.
        /// </param>
        /// <param name='expiredOnly'>
        /// Specify &lt;code&gt;false&lt;/code&gt; to return all recommendations. The default is
        /// &lt;code&gt;true&lt;/code&gt;, which returns only expired recommendations.
        /// </param>
        /// <param name='filter'>
        /// Filter is specified by using OData syntax. Example: $filter=channel eq
        /// &#39;Api&#39; or channel eq &#39;Notification&#39; and startTime eq 2014-01-01T00:00:00Z
        /// and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
        /// duration&#39;[PT1H|PT1M|P1D]
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Recommendation> ListHistoryForWebApp(this IRecommendationsOperations operations, string resourceGroupName, string siteName, bool? expiredOnly = default(bool?), string filter = default(string))
        {
                return ((IRecommendationsOperations)operations).ListHistoryForWebAppAsync(resourceGroupName, siteName, expiredOnly, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get past recommendations for an app, optionally specified
        /// by the time range.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='siteName'>
        /// Name of the app.
        /// </param>
        /// <param name='expiredOnly'>
        /// Specify &lt;code&gt;false&lt;/code&gt; to return all recommendations. The default is
        /// &lt;code&gt;true&lt;/code&gt;, which returns only expired recommendations.
        /// </param>
        /// <param name='filter'>
        /// Filter is specified by using OData syntax. Example: $filter=channel eq
        /// &#39;Api&#39; or channel eq &#39;Notification&#39; and startTime eq 2014-01-01T00:00:00Z
        /// and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
        /// duration&#39;[PT1H|PT1M|P1D]
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Recommendation>> ListHistoryForWebAppAsync(this IRecommendationsOperations operations, string resourceGroupName, string siteName, bool? expiredOnly = default(bool?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListHistoryForWebAppWithHttpMessagesAsync(resourceGroupName, siteName, expiredOnly, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all recommendations for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='siteName'>
        /// Name of the app.
        /// </param>
        /// <param name='featured'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations.
        /// The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations.
        /// </param>
        /// <param name='filter'>
        /// Return only channels specified in the filter. Filter is specified by using
        /// OData syntax. Example: $filter=channel eq &#39;Api&#39; or channel eq
        /// &#39;Notification&#39;
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Recommendation> ListRecommendedRulesForWebApp(this IRecommendationsOperations operations, string resourceGroupName, string siteName, bool? featured = default(bool?), string filter = default(string))
        {
                return ((IRecommendationsOperations)operations).ListRecommendedRulesForWebAppAsync(resourceGroupName, siteName, featured, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all recommendations for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='siteName'>
        /// Name of the app.
        /// </param>
        /// <param name='featured'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations.
        /// The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations.
        /// </param>
        /// <param name='filter'>
        /// Return only channels specified in the filter. Filter is specified by using
        /// OData syntax. Example: $filter=channel eq &#39;Api&#39; or channel eq
        /// &#39;Notification&#39;
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Recommendation>> ListRecommendedRulesForWebAppAsync(this IRecommendationsOperations operations, string resourceGroupName, string siteName, bool? featured = default(bool?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListRecommendedRulesForWebAppWithHttpMessagesAsync(resourceGroupName, siteName, featured, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Disable all recommendations for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='siteName'>
        /// Name of the app.
        /// </param>
        public static void DisableAllForWebApp(this IRecommendationsOperations operations, string resourceGroupName, string siteName)
        {
                ((IRecommendationsOperations)operations).DisableAllForWebAppAsync(resourceGroupName, siteName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Disable all recommendations for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='siteName'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DisableAllForWebAppAsync(this IRecommendationsOperations operations, string resourceGroupName, string siteName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DisableAllForWebAppWithHttpMessagesAsync(resourceGroupName, siteName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Reset all recommendation opt-out settings for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='siteName'>
        /// Name of the app.
        /// </param>
        public static void ResetAllFiltersForWebApp(this IRecommendationsOperations operations, string resourceGroupName, string siteName)
        {
                ((IRecommendationsOperations)operations).ResetAllFiltersForWebAppAsync(resourceGroupName, siteName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Reset all recommendation opt-out settings for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='siteName'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ResetAllFiltersForWebAppAsync(this IRecommendationsOperations operations, string resourceGroupName, string siteName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.ResetAllFiltersForWebAppWithHttpMessagesAsync(resourceGroupName, siteName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Get a recommendation rule for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='siteName'>
        /// Name of the app.
        /// </param>
        /// <param name='name'>
        /// Name of the recommendation.
        /// </param>
        /// <param name='updateSeen'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to update the last-seen timestamp of the
        /// recommendation object.
        /// </param>
        /// <param name='recommendationId'>
        /// The GUID of the recommendation object if you query an expired one. You
        /// don&#39;t need to specify it to query an active entry.
        /// </param>
        public static RecommendationRule GetRuleDetailsByWebApp(this IRecommendationsOperations operations, string resourceGroupName, string siteName, string name, bool? updateSeen = default(bool?), string recommendationId = default(string))
        {
                return ((IRecommendationsOperations)operations).GetRuleDetailsByWebAppAsync(resourceGroupName, siteName, name, updateSeen, recommendationId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get a recommendation rule for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='siteName'>
        /// Name of the app.
        /// </param>
        /// <param name='name'>
        /// Name of the recommendation.
        /// </param>
        /// <param name='updateSeen'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to update the last-seen timestamp of the
        /// recommendation object.
        /// </param>
        /// <param name='recommendationId'>
        /// The GUID of the recommendation object if you query an expired one. You
        /// don&#39;t need to specify it to query an active entry.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecommendationRule> GetRuleDetailsByWebAppAsync(this IRecommendationsOperations operations, string resourceGroupName, string siteName, string name, bool? updateSeen = default(bool?), string recommendationId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetRuleDetailsByWebAppWithHttpMessagesAsync(resourceGroupName, siteName, name, updateSeen, recommendationId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Disables the specific rule for a web site permanently.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='siteName'>
        /// Site name
        /// </param>
        /// <param name='name'>
        /// Rule name
        /// </param>
        public static void DisableRecommendationForSite(this IRecommendationsOperations operations, string resourceGroupName, string siteName, string name)
        {
                ((IRecommendationsOperations)operations).DisableRecommendationForSiteAsync(resourceGroupName, siteName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Disables the specific rule for a web site permanently.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='siteName'>
        /// Site name
        /// </param>
        /// <param name='name'>
        /// Rule name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DisableRecommendationForSiteAsync(this IRecommendationsOperations operations, string resourceGroupName, string siteName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DisableRecommendationForSiteWithHttpMessagesAsync(resourceGroupName, siteName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for List all recommendations for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Recommendation> ListNext(this IRecommendationsOperations operations, string nextPageLink)
        {
                return ((IRecommendationsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List all recommendations for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Recommendation>> ListNextAsync(this IRecommendationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get past recommendations for an app, optionally specified
        /// by the time range.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Recommendation> ListHistoryForHostingEnvironmentNext(this IRecommendationsOperations operations, string nextPageLink)
        {
                return ((IRecommendationsOperations)operations).ListHistoryForHostingEnvironmentNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get past recommendations for an app, optionally specified
        /// by the time range.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Recommendation>> ListHistoryForHostingEnvironmentNextAsync(this IRecommendationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListHistoryForHostingEnvironmentNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all recommendations for a hosting environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Recommendation> ListRecommendedRulesForHostingEnvironmentNext(this IRecommendationsOperations operations, string nextPageLink)
        {
                return ((IRecommendationsOperations)operations).ListRecommendedRulesForHostingEnvironmentNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all recommendations for a hosting environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Recommendation>> ListRecommendedRulesForHostingEnvironmentNextAsync(this IRecommendationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListRecommendedRulesForHostingEnvironmentNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get past recommendations for an app, optionally specified
        /// by the time range.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Recommendation> ListHistoryForWebAppNext(this IRecommendationsOperations operations, string nextPageLink)
        {
                return ((IRecommendationsOperations)operations).ListHistoryForWebAppNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get past recommendations for an app, optionally specified
        /// by the time range.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Recommendation>> ListHistoryForWebAppNextAsync(this IRecommendationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListHistoryForWebAppNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all recommendations for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Recommendation> ListRecommendedRulesForWebAppNext(this IRecommendationsOperations operations, string nextPageLink)
        {
                return ((IRecommendationsOperations)operations).ListRecommendedRulesForWebAppNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all recommendations for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Recommendation>> ListRecommendedRulesForWebAppNextAsync(this IRecommendationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListRecommendedRulesForWebAppNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
