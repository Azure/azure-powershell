// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for WebAppsOperations
    /// </summary>
    public static partial class WebAppsOperationsExtensions
    {
        /// <summary>
        /// Description for Get all apps for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> List(this IWebAppsOperations operations)
        {
                return ((IWebAppsOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all apps for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> ListAsync(this IWebAppsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets all web, mobile, and API apps in the specified
        /// resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='includeSlots'>
        /// Specify &lt;strong&gt;true&lt;/strong&gt; to include deployment slots in results. The
        /// default is false, which only gives you the production slot of all apps.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> ListByResourceGroup(this IWebAppsOperations operations, string resourceGroupName, bool? includeSlots = default(bool?))
        {
                return ((IWebAppsOperations)operations).ListByResourceGroupAsync(resourceGroupName, includeSlots).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets all web, mobile, and API apps in the specified
        /// resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='includeSlots'>
        /// Specify &lt;strong&gt;true&lt;/strong&gt; to include deployment slots in results. The
        /// default is false, which only gives you the production slot of all apps.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> ListByResourceGroupAsync(this IWebAppsOperations operations, string resourceGroupName, bool? includeSlots = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, includeSlots, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the details of a web, mobile, or API app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static Site Get(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the details of a web, mobile, or API app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Site> GetAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates a new web, mobile, or API app in an existing
        /// resource group, or updates an existing app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Unique name of the app to create or update. To create or update a
        /// deployment slot, use the {slot} parameter.
        /// </param>
        public static Site CreateOrUpdate(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateAsync(resourceGroupName, name, siteEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a new web, mobile, or API app in an existing
        /// resource group, or updates an existing app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Unique name of the app to create or update. To create or update a
        /// deployment slot, use the {slot} parameter.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Site> CreateOrUpdateAsync(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a web, mobile, or API app, or one of the deployment
        /// slots.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app to delete.
        /// </param>
        /// <param name='deleteMetrics'>
        /// If true, web app metrics are also deleted.
        /// </param>
        /// <param name='deleteEmptyServerFarm'>
        /// Specify false if you want to keep empty App Service plan. By default, empty
        /// App Service plan is deleted.
        /// </param>
        public static void Delete(this IWebAppsOperations operations, string resourceGroupName, string name, bool? deleteMetrics = default(bool?), bool? deleteEmptyServerFarm = default(bool?))
        {
                ((IWebAppsOperations)operations).DeleteAsync(resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a web, mobile, or API app, or one of the deployment
        /// slots.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app to delete.
        /// </param>
        /// <param name='deleteMetrics'>
        /// If true, web app metrics are also deleted.
        /// </param>
        /// <param name='deleteEmptyServerFarm'>
        /// Specify false if you want to keep empty App Service plan. By default, empty
        /// App Service plan is deleted.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IWebAppsOperations operations, string resourceGroupName, string name, bool? deleteMetrics = default(bool?), bool? deleteEmptyServerFarm = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates a new web, mobile, or API app in an existing
        /// resource group, or updates an existing app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Unique name of the app to create or update. To create or update a
        /// deployment slot, use the {slot} parameter.
        /// </param>
        public static Site Update(this IWebAppsOperations operations, string resourceGroupName, string name, SitePatchResource siteEnvelope)
        {
                return ((IWebAppsOperations)operations).UpdateAsync(resourceGroupName, name, siteEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a new web, mobile, or API app in an existing
        /// resource group, or updates an existing app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Unique name of the app to create or update. To create or update a
        /// deployment slot, use the {slot} parameter.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Site> UpdateAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SitePatchResource siteEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Analyze a custom hostname.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='hostName'>
        /// Custom hostname.
        /// </param>
        public static CustomHostnameAnalysisResult AnalyzeCustomHostname(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName = default(string))
        {
                return ((IWebAppsOperations)operations).AnalyzeCustomHostnameAsync(resourceGroupName, name, hostName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Analyze a custom hostname.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='hostName'>
        /// Custom hostname.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CustomHostnameAnalysisResult> AnalyzeCustomHostnameAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.AnalyzeCustomHostnameWithHttpMessagesAsync(resourceGroupName, name, hostName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Applies the configuration settings from the target slot
        /// onto the current slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static void ApplySlotConfigToProduction(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity)
        {
                ((IWebAppsOperations)operations).ApplySlotConfigToProductionAsync(resourceGroupName, name, slotSwapEntity).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Applies the configuration settings from the target slot
        /// onto the current slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApplySlotConfigToProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.ApplySlotConfigToProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates a backup of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static BackupItem Backup(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request)
        {
                return ((IWebAppsOperations)operations).BackupAsync(resourceGroupName, name, request).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a backup of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupItem> BackupAsync(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BackupWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets existing backups of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BackupItem> ListBackups(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListBackupsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets existing backups of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BackupItem>> ListBackupsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBackupsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a backup of an app by its ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='backupId'>
        /// ID of the backup.
        /// </param>
        public static BackupItem GetBackupStatus(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId)
        {
                return ((IWebAppsOperations)operations).GetBackupStatusAsync(resourceGroupName, name, backupId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a backup of an app by its ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='backupId'>
        /// ID of the backup.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupItem> GetBackupStatusAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetBackupStatusWithHttpMessagesAsync(resourceGroupName, name, backupId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a backup of an app by its ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='backupId'>
        /// ID of the backup.
        /// </param>
        public static void DeleteBackup(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId)
        {
                ((IWebAppsOperations)operations).DeleteBackupAsync(resourceGroupName, name, backupId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a backup of an app by its ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='backupId'>
        /// ID of the backup.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteBackupAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteBackupWithHttpMessagesAsync(resourceGroupName, name, backupId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Gets status of a web app backup that may be in progress,
        /// including secrets associated with the backup, such as the Azure Storage SAS
        /// URL. Also can be used to update the SAS URL for the backup if a new URL is
        /// passed in the request body.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='backupId'>
        /// ID of backup.
        /// </param>
        public static BackupItem ListBackupStatusSecrets(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, BackupRequest request)
        {
                return ((IWebAppsOperations)operations).ListBackupStatusSecretsAsync(resourceGroupName, name, backupId, request).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets status of a web app backup that may be in progress,
        /// including secrets associated with the backup, such as the Azure Storage SAS
        /// URL. Also can be used to update the SAS URL for the backup if a new URL is
        /// passed in the request body.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='backupId'>
        /// ID of backup.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupItem> ListBackupStatusSecretsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, BackupRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBackupStatusSecretsWithHttpMessagesAsync(resourceGroupName, name, backupId, request, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Restores a specific backup to another app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='backupId'>
        /// ID of the backup.
        /// </param>
        public static void Restore(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request)
        {
                ((IWebAppsOperations)operations).RestoreAsync(resourceGroupName, name, backupId, request).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restores a specific backup to another app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='backupId'>
        /// ID of the backup.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RestoreAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RestoreWithHttpMessagesAsync(resourceGroupName, name, backupId, request, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Returns whether Scm basic auth is allowed and whether Ftp
        /// is allowed for a given site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CsmPublishingCredentialsPoliciesEntity> ListBasicPublishingCredentialsPolicies(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListBasicPublishingCredentialsPoliciesAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Returns whether Scm basic auth is allowed and whether Ftp
        /// is allowed for a given site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CsmPublishingCredentialsPoliciesEntity>> ListBasicPublishingCredentialsPoliciesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBasicPublishingCredentialsPoliciesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Returns whether FTP is allowed on the site or not.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static CsmPublishingCredentialsPoliciesEntity GetFtpAllowed(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetFtpAllowedAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Returns whether FTP is allowed on the site or not.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CsmPublishingCredentialsPoliciesEntity> GetFtpAllowedAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetFtpAllowedWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates whether FTP is allowed on the site or not.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static CsmPublishingCredentialsPoliciesEntity UpdateFtpAllowed(this IWebAppsOperations operations, string resourceGroupName, string name, CsmPublishingCredentialsPoliciesEntity csmPublishingAccessPoliciesEntity)
        {
                return ((IWebAppsOperations)operations).UpdateFtpAllowedAsync(resourceGroupName, name, csmPublishingAccessPoliciesEntity).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates whether FTP is allowed on the site or not.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CsmPublishingCredentialsPoliciesEntity> UpdateFtpAllowedAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmPublishingCredentialsPoliciesEntity csmPublishingAccessPoliciesEntity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateFtpAllowedWithHttpMessagesAsync(resourceGroupName, name, csmPublishingAccessPoliciesEntity, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Returns whether Scm basic auth is allowed on the site or
        /// not.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static CsmPublishingCredentialsPoliciesEntity GetScmAllowed(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetScmAllowedAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Returns whether Scm basic auth is allowed on the site or
        /// not.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CsmPublishingCredentialsPoliciesEntity> GetScmAllowedAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetScmAllowedWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates whether user publishing credentials are allowed on
        /// the site or not.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static CsmPublishingCredentialsPoliciesEntity UpdateScmAllowed(this IWebAppsOperations operations, string resourceGroupName, string name, CsmPublishingCredentialsPoliciesEntity csmPublishingAccessPoliciesEntity)
        {
                return ((IWebAppsOperations)operations).UpdateScmAllowedAsync(resourceGroupName, name, csmPublishingAccessPoliciesEntity).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates whether user publishing credentials are allowed on
        /// the site or not.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CsmPublishingCredentialsPoliciesEntity> UpdateScmAllowedAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmPublishingCredentialsPoliciesEntity csmPublishingAccessPoliciesEntity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateScmAllowedWithHttpMessagesAsync(resourceGroupName, name, csmPublishingAccessPoliciesEntity, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List the configurations of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SiteConfigResource> ListConfigurations(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListConfigurationsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List the configurations of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SiteConfigResource>> ListConfigurationsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListConfigurationsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Replaces the application settings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static StringDictionary UpdateApplicationSettings(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary appSettings)
        {
                return ((IWebAppsOperations)operations).UpdateApplicationSettingsAsync(resourceGroupName, name, appSettings).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Replaces the application settings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringDictionary> UpdateApplicationSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary appSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateApplicationSettingsWithHttpMessagesAsync(resourceGroupName, name, appSettings, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the application settings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static StringDictionary ListApplicationSettings(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListApplicationSettingsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the application settings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringDictionary> ListApplicationSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListApplicationSettingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates the Authentication / Authorization settings
        /// associated with web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static SiteAuthSettings UpdateAuthSettings(this IWebAppsOperations operations, string resourceGroupName, string name, SiteAuthSettings siteAuthSettings)
        {
                return ((IWebAppsOperations)operations).UpdateAuthSettingsAsync(resourceGroupName, name, siteAuthSettings).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the Authentication / Authorization settings
        /// associated with web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteAuthSettings> UpdateAuthSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteAuthSettings siteAuthSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateAuthSettingsWithHttpMessagesAsync(resourceGroupName, name, siteAuthSettings, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the Authentication/Authorization settings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static SiteAuthSettings GetAuthSettings(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetAuthSettingsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the Authentication/Authorization settings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteAuthSettings> GetAuthSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAuthSettingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates site&#39;s Authentication / Authorization settings for
        /// apps via the V2 format
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static SiteAuthSettingsV2 UpdateAuthSettingsV2(this IWebAppsOperations operations, string resourceGroupName, string name, SiteAuthSettingsV2 siteAuthSettingsV2)
        {
                return ((IWebAppsOperations)operations).UpdateAuthSettingsV2Async(resourceGroupName, name, siteAuthSettingsV2).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates site&#39;s Authentication / Authorization settings for
        /// apps via the V2 format
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteAuthSettingsV2> UpdateAuthSettingsV2Async(this IWebAppsOperations operations, string resourceGroupName, string name, SiteAuthSettingsV2 siteAuthSettingsV2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateAuthSettingsV2WithHttpMessagesAsync(resourceGroupName, name, siteAuthSettingsV2, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets site&#39;s Authentication / Authorization settings for
        /// apps via the V2 format
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static SiteAuthSettingsV2 GetAuthSettingsV2(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetAuthSettingsV2Async(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets site&#39;s Authentication / Authorization settings for
        /// apps via the V2 format
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteAuthSettingsV2> GetAuthSettingsV2Async(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAuthSettingsV2WithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates the Azure storage account configurations of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static AzureStoragePropertyDictionaryResource UpdateAzureStorageAccounts(this IWebAppsOperations operations, string resourceGroupName, string name, AzureStoragePropertyDictionaryResource azureStorageAccounts)
        {
                return ((IWebAppsOperations)operations).UpdateAzureStorageAccountsAsync(resourceGroupName, name, azureStorageAccounts).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the Azure storage account configurations of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AzureStoragePropertyDictionaryResource> UpdateAzureStorageAccountsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, AzureStoragePropertyDictionaryResource azureStorageAccounts, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateAzureStorageAccountsWithHttpMessagesAsync(resourceGroupName, name, azureStorageAccounts, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the Azure storage account configurations of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static AzureStoragePropertyDictionaryResource ListAzureStorageAccounts(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListAzureStorageAccountsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the Azure storage account configurations of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AzureStoragePropertyDictionaryResource> ListAzureStorageAccountsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAzureStorageAccountsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates the backup configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static BackupRequest UpdateBackupConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request)
        {
                return ((IWebAppsOperations)operations).UpdateBackupConfigurationAsync(resourceGroupName, name, request).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the backup configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupRequest> UpdateBackupConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes the backup configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static void DeleteBackupConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                ((IWebAppsOperations)operations).DeleteBackupConfigurationAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes the backup configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteBackupConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Gets the backup configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static BackupRequest GetBackupConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetBackupConfigurationAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the backup configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupRequest> GetBackupConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the config reference app settings and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ApiKVReference> GetAppSettingsKeyVaultReferences(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetAppSettingsKeyVaultReferencesAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the config reference app settings and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ApiKVReference>> GetAppSettingsKeyVaultReferencesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAppSettingsKeyVaultReferencesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the config reference and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='appSettingKey'>
        /// App Setting key name.
        /// </param>
        public static ApiKVReference GetAppSettingKeyVaultReference(this IWebAppsOperations operations, string resourceGroupName, string name, string appSettingKey)
        {
                return ((IWebAppsOperations)operations).GetAppSettingKeyVaultReferenceAsync(resourceGroupName, name, appSettingKey).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the config reference and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='appSettingKey'>
        /// App Setting key name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ApiKVReference> GetAppSettingKeyVaultReferenceAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string appSettingKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAppSettingKeyVaultReferenceWithHttpMessagesAsync(resourceGroupName, name, appSettingKey, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the config reference app settings and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ApiKVReference> GetSiteConnectionStringKeyVaultReferences(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetSiteConnectionStringKeyVaultReferencesAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the config reference app settings and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ApiKVReference>> GetSiteConnectionStringKeyVaultReferencesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetSiteConnectionStringKeyVaultReferencesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the config reference and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='connectionStringKey'>
        /// 
        /// </param>
        public static ApiKVReference GetSiteConnectionStringKeyVaultReference(this IWebAppsOperations operations, string resourceGroupName, string name, string connectionStringKey)
        {
                return ((IWebAppsOperations)operations).GetSiteConnectionStringKeyVaultReferenceAsync(resourceGroupName, name, connectionStringKey).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the config reference and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='connectionStringKey'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ApiKVReference> GetSiteConnectionStringKeyVaultReferenceAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string connectionStringKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetSiteConnectionStringKeyVaultReferenceWithHttpMessagesAsync(resourceGroupName, name, connectionStringKey, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Replaces the connection strings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static ConnectionStringDictionary UpdateConnectionStrings(this IWebAppsOperations operations, string resourceGroupName, string name, ConnectionStringDictionary connectionStrings)
        {
                return ((IWebAppsOperations)operations).UpdateConnectionStringsAsync(resourceGroupName, name, connectionStrings).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Replaces the connection strings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ConnectionStringDictionary> UpdateConnectionStringsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, ConnectionStringDictionary connectionStrings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateConnectionStringsWithHttpMessagesAsync(resourceGroupName, name, connectionStrings, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the connection strings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static ConnectionStringDictionary ListConnectionStrings(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListConnectionStringsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the connection strings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ConnectionStringDictionary> ListConnectionStringsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListConnectionStringsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the logging configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static SiteLogsConfig GetDiagnosticLogsConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetDiagnosticLogsConfigurationAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the logging configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteLogsConfig> GetDiagnosticLogsConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetDiagnosticLogsConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates the logging configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static SiteLogsConfig UpdateDiagnosticLogsConfig(this IWebAppsOperations operations, string resourceGroupName, string name, SiteLogsConfig siteLogsConfig)
        {
                return ((IWebAppsOperations)operations).UpdateDiagnosticLogsConfigAsync(resourceGroupName, name, siteLogsConfig).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the logging configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteLogsConfig> UpdateDiagnosticLogsConfigAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteLogsConfig siteLogsConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateDiagnosticLogsConfigWithHttpMessagesAsync(resourceGroupName, name, siteLogsConfig, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Replaces the metadata of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static StringDictionary UpdateMetadata(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary metadata)
        {
                return ((IWebAppsOperations)operations).UpdateMetadataAsync(resourceGroupName, name, metadata).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Replaces the metadata of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringDictionary> UpdateMetadataAsync(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary metadata, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateMetadataWithHttpMessagesAsync(resourceGroupName, name, metadata, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the metadata of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static StringDictionary ListMetadata(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListMetadataAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the metadata of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringDictionary> ListMetadataAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListMetadataWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the Git/FTP publishing credentials of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static User ListPublishingCredentials(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListPublishingCredentialsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the Git/FTP publishing credentials of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<User> ListPublishingCredentialsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListPublishingCredentialsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates the Push settings associated with web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static PushSettings UpdateSitePushSettings(this IWebAppsOperations operations, string resourceGroupName, string name, PushSettings pushSettings)
        {
                return ((IWebAppsOperations)operations).UpdateSitePushSettingsAsync(resourceGroupName, name, pushSettings).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the Push settings associated with web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PushSettings> UpdateSitePushSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, PushSettings pushSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateSitePushSettingsWithHttpMessagesAsync(resourceGroupName, name, pushSettings, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the Push settings associated with web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static PushSettings ListSitePushSettings(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListSitePushSettingsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the Push settings associated with web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PushSettings> ListSitePushSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSitePushSettingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the names of app settings and connection strings that
        /// stick to the slot (not swapped).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static SlotConfigNamesResource ListSlotConfigurationNames(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListSlotConfigurationNamesAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the names of app settings and connection strings that
        /// stick to the slot (not swapped).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SlotConfigNamesResource> ListSlotConfigurationNamesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSlotConfigurationNamesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates the names of application settings and connection
        /// string that remain with the slot during swap operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static SlotConfigNamesResource UpdateSlotConfigurationNames(this IWebAppsOperations operations, string resourceGroupName, string name, SlotConfigNamesResource slotConfigNames)
        {
                return ((IWebAppsOperations)operations).UpdateSlotConfigurationNamesAsync(resourceGroupName, name, slotConfigNames).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the names of application settings and connection
        /// string that remain with the slot during swap operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SlotConfigNamesResource> UpdateSlotConfigurationNamesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SlotConfigNamesResource slotConfigNames, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateSlotConfigurationNamesWithHttpMessagesAsync(resourceGroupName, name, slotConfigNames, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the configuration of an app, such as platform version
        /// and bitness, default documents, virtual applications, Always On, etc.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static SiteConfigResource GetConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetConfigurationAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the configuration of an app, such as platform version
        /// and bitness, default documents, virtual applications, Always On, etc.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteConfigResource> GetConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates the configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static SiteConfigResource CreateOrUpdateConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfigResource siteConfig)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateConfigurationAsync(resourceGroupName, name, siteConfig).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteConfigResource> CreateOrUpdateConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfigResource siteConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateConfigurationWithHttpMessagesAsync(resourceGroupName, name, siteConfig, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates the configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static SiteConfigResource UpdateConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfigResource siteConfig)
        {
                return ((IWebAppsOperations)operations).UpdateConfigurationAsync(resourceGroupName, name, siteConfig).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteConfigResource> UpdateConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfigResource siteConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateConfigurationWithHttpMessagesAsync(resourceGroupName, name, siteConfig, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a list of web app configuration snapshots identifiers.
        /// Each element of the list contains a timestamp and the ID of the snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SiteConfigurationSnapshotInfo> ListConfigurationSnapshotInfo(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListConfigurationSnapshotInfoAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a list of web app configuration snapshots identifiers.
        /// Each element of the list contains a timestamp and the ID of the snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SiteConfigurationSnapshotInfo>> ListConfigurationSnapshotInfoAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListConfigurationSnapshotInfoWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a snapshot of the configuration of an app at a
        /// previous point in time.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='snapshotId'>
        /// The ID of the snapshot to read.
        /// </param>
        public static SiteConfigResource GetConfigurationSnapshot(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId)
        {
                return ((IWebAppsOperations)operations).GetConfigurationSnapshotAsync(resourceGroupName, name, snapshotId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a snapshot of the configuration of an app at a
        /// previous point in time.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='snapshotId'>
        /// The ID of the snapshot to read.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteConfigResource> GetConfigurationSnapshotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetConfigurationSnapshotWithHttpMessagesAsync(resourceGroupName, name, snapshotId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Reverts the configuration of an app to a previous snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='snapshotId'>
        /// The ID of the snapshot to read.
        /// </param>
        public static void RecoverSiteConfigurationSnapshot(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId)
        {
                ((IWebAppsOperations)operations).RecoverSiteConfigurationSnapshotAsync(resourceGroupName, name, snapshotId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Reverts the configuration of an app to a previous snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='snapshotId'>
        /// The ID of the snapshot to read.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RecoverSiteConfigurationSnapshotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RecoverSiteConfigurationSnapshotWithHttpMessagesAsync(resourceGroupName, name, snapshotId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Gets the last lines of docker logs for the given site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static System.IO.Stream GetWebSiteContainerLogs(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetWebSiteContainerLogsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the last lines of docker logs for the given site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.IO.Stream> GetWebSiteContainerLogsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var _result = await operations.GetWebSiteContainerLogsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
            _result.Request.Dispose();
            return _result.Body;
        }
        /// <summary>
        /// Description for Gets the ZIP archived docker log files for the given site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static System.IO.Stream GetContainerLogsZip(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetContainerLogsZipAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the ZIP archived docker log files for the given site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.IO.Stream> GetContainerLogsZipAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var _result = await operations.GetContainerLogsZipWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
            _result.Request.Dispose();
            return _result.Body;
        }
        /// <summary>
        /// Description for List continuous web jobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ContinuousWebJob> ListContinuousWebJobs(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListContinuousWebJobsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List continuous web jobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ContinuousWebJob>> ListContinuousWebJobsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListContinuousWebJobsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a continuous web job by its ID for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        public static ContinuousWebJob GetContinuousWebJob(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName)
        {
                return ((IWebAppsOperations)operations).GetContinuousWebJobAsync(resourceGroupName, name, webJobName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a continuous web job by its ID for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ContinuousWebJob> GetContinuousWebJobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetContinuousWebJobWithHttpMessagesAsync(resourceGroupName, name, webJobName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete a continuous web job by its ID for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        public static void DeleteContinuousWebJob(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName)
        {
                ((IWebAppsOperations)operations).DeleteContinuousWebJobAsync(resourceGroupName, name, webJobName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete a continuous web job by its ID for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteContinuousWebJobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteContinuousWebJobWithHttpMessagesAsync(resourceGroupName, name, webJobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Start a continuous web job for an app, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        public static void StartContinuousWebJob(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName)
        {
                ((IWebAppsOperations)operations).StartContinuousWebJobAsync(resourceGroupName, name, webJobName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Start a continuous web job for an app, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task StartContinuousWebJobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.StartContinuousWebJobWithHttpMessagesAsync(resourceGroupName, name, webJobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Stop a continuous web job for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        public static void StopContinuousWebJob(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName)
        {
                ((IWebAppsOperations)operations).StopContinuousWebJobAsync(resourceGroupName, name, webJobName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Stop a continuous web job for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task StopContinuousWebJobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.StopContinuousWebJobWithHttpMessagesAsync(resourceGroupName, name, webJobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for List deployments for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Deployment> ListDeployments(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListDeploymentsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List deployments for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Deployment>> ListDeploymentsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListDeploymentsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get a deployment by its ID for an app, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='id'>
        /// Deployment ID.
        /// </param>
        public static Deployment GetDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id)
        {
                return ((IWebAppsOperations)operations).GetDeploymentAsync(resourceGroupName, name, id).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get a deployment by its ID for an app, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='id'>
        /// Deployment ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Deployment> GetDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Create a deployment for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='id'>
        /// ID of an existing deployment.
        /// </param>
        public static Deployment CreateDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id, Deployment deployment)
        {
                return ((IWebAppsOperations)operations).CreateDeploymentAsync(resourceGroupName, name, id, deployment).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Create a deployment for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='id'>
        /// ID of an existing deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Deployment> CreateDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, Deployment deployment, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, deployment, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete a deployment by its ID for an app, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='id'>
        /// Deployment ID.
        /// </param>
        public static void DeleteDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id)
        {
                ((IWebAppsOperations)operations).DeleteDeploymentAsync(resourceGroupName, name, id).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete a deployment by its ID for an app, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='id'>
        /// Deployment ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for List deployment log for specific deployment for an app, or
        /// a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='id'>
        /// The ID of a specific deployment. This is the value of the name property in
        /// the JSON response from &#34;GET /api/sites/{siteName}/deployments&#34;.
        /// </param>
        public static Deployment ListDeploymentLog(this IWebAppsOperations operations, string resourceGroupName, string name, string id)
        {
                return ((IWebAppsOperations)operations).ListDeploymentLogAsync(resourceGroupName, name, id).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List deployment log for specific deployment for an app, or
        /// a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='id'>
        /// The ID of a specific deployment. This is the value of the name property in
        /// the JSON response from &#34;GET /api/sites/{siteName}/deployments&#34;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Deployment> ListDeploymentLogAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListDeploymentLogWithHttpMessagesAsync(resourceGroupName, name, id, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Discovers an existing app backup that can be restored from
        /// a blob in Azure storage. Use this to get information about the databases
        /// stored in a backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static RestoreRequest DiscoverBackup(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequest request)
        {
                return ((IWebAppsOperations)operations).DiscoverBackupAsync(resourceGroupName, name, request).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Discovers an existing app backup that can be restored from
        /// a blob in Azure storage. Use this to get information about the databases
        /// stored in a backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RestoreRequest> DiscoverBackupAsync(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DiscoverBackupWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Lists ownership identifiers for domain associated with web
        /// app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Identifier> ListDomainOwnershipIdentifiers(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListDomainOwnershipIdentifiersAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Lists ownership identifiers for domain associated with web
        /// app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Identifier>> ListDomainOwnershipIdentifiersAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListDomainOwnershipIdentifiersWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get domain ownership identifier for web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='domainOwnershipIdentifierName'>
        /// Name of domain ownership identifier.
        /// </param>
        public static Identifier GetDomainOwnershipIdentifier(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName)
        {
                return ((IWebAppsOperations)operations).GetDomainOwnershipIdentifierAsync(resourceGroupName, name, domainOwnershipIdentifierName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get domain ownership identifier for web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='domainOwnershipIdentifierName'>
        /// Name of domain ownership identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Identifier> GetDomainOwnershipIdentifierAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetDomainOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates a domain ownership identifier for web app, or
        /// updates an existing ownership identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='domainOwnershipIdentifierName'>
        /// Name of domain ownership identifier.
        /// </param>
        public static Identifier CreateOrUpdateDomainOwnershipIdentifier(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, Identifier domainOwnershipIdentifier)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateDomainOwnershipIdentifierAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a domain ownership identifier for web app, or
        /// updates an existing ownership identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='domainOwnershipIdentifierName'>
        /// Name of domain ownership identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Identifier> CreateOrUpdateDomainOwnershipIdentifierAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, Identifier domainOwnershipIdentifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateDomainOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a domain ownership identifier for a web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='domainOwnershipIdentifierName'>
        /// Name of domain ownership identifier.
        /// </param>
        public static void DeleteDomainOwnershipIdentifier(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName)
        {
                ((IWebAppsOperations)operations).DeleteDomainOwnershipIdentifierAsync(resourceGroupName, name, domainOwnershipIdentifierName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a domain ownership identifier for a web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='domainOwnershipIdentifierName'>
        /// Name of domain ownership identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteDomainOwnershipIdentifierAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteDomainOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates a domain ownership identifier for web app, or
        /// updates an existing ownership identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='domainOwnershipIdentifierName'>
        /// Name of domain ownership identifier.
        /// </param>
        public static Identifier UpdateDomainOwnershipIdentifier(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, Identifier domainOwnershipIdentifier)
        {
                return ((IWebAppsOperations)operations).UpdateDomainOwnershipIdentifierAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a domain ownership identifier for web app, or
        /// updates an existing ownership identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='domainOwnershipIdentifierName'>
        /// Name of domain ownership identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Identifier> UpdateDomainOwnershipIdentifierAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, Identifier domainOwnershipIdentifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateDomainOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the status of the last MSDeploy operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static MSDeployStatus GetMSDeployStatus(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetMSDeployStatusAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the status of the last MSDeploy operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MSDeployStatus> GetMSDeployStatusAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetMSDeployStatusWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Invoke the MSDeploy web app extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static MSDeployStatus CreateMSDeployOperation(this IWebAppsOperations operations, string resourceGroupName, string name, MSDeploy MSDeploy)
        {
                return ((IWebAppsOperations)operations).CreateMSDeployOperationAsync(resourceGroupName, name, MSDeploy).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Invoke the MSDeploy web app extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MSDeployStatus> CreateMSDeployOperationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, MSDeploy MSDeploy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateMSDeployOperationWithHttpMessagesAsync(resourceGroupName, name, MSDeploy, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the MSDeploy Log for the last MSDeploy operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static MSDeployLog GetMSDeployLog(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetMSDeployLogAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the MSDeploy Log for the last MSDeploy operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MSDeployLog> GetMSDeployLogAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetMSDeployLogWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List the functions for a web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<FunctionEnvelope> ListFunctions(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListFunctionsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List the functions for a web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<FunctionEnvelope>> ListFunctionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListFunctionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Fetch a short lived token that can be exchanged for a
        /// master key.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static string GetFunctionsAdminToken(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetFunctionsAdminTokenAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Fetch a short lived token that can be exchanged for a
        /// master key.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<string> GetFunctionsAdminTokenAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetFunctionsAdminTokenWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get function information by its ID for web site, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        public static FunctionEnvelope GetFunction(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName)
        {
                return ((IWebAppsOperations)operations).GetFunctionAsync(resourceGroupName, name, functionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get function information by its ID for web site, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FunctionEnvelope> GetFunctionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetFunctionWithHttpMessagesAsync(resourceGroupName, name, functionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Create function for web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        public static FunctionEnvelope CreateFunction(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, FunctionEnvelope functionEnvelope)
        {
                return ((IWebAppsOperations)operations).CreateFunctionAsync(resourceGroupName, name, functionName, functionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Create function for web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FunctionEnvelope> CreateFunctionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, FunctionEnvelope functionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateFunctionWithHttpMessagesAsync(resourceGroupName, name, functionName, functionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete a function for web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        public static void DeleteFunction(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName)
        {
                ((IWebAppsOperations)operations).DeleteFunctionAsync(resourceGroupName, name, functionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete a function for web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteFunctionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteFunctionWithHttpMessagesAsync(resourceGroupName, name, functionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Add or update a function secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// The name of the function.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        public static KeyInfo CreateOrUpdateFunctionSecret(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string keyName, KeyInfo key)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateFunctionSecretAsync(resourceGroupName, name, functionName, keyName, key).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Add or update a function secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// The name of the function.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<KeyInfo> CreateOrUpdateFunctionSecretAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string keyName, KeyInfo key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateFunctionSecretWithHttpMessagesAsync(resourceGroupName, name, functionName, keyName, key, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete a function secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// The name of the function.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        public static void DeleteFunctionSecret(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string keyName)
        {
                ((IWebAppsOperations)operations).DeleteFunctionSecretAsync(resourceGroupName, name, functionName, keyName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete a function secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// The name of the function.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteFunctionSecretAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string keyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteFunctionSecretWithHttpMessagesAsync(resourceGroupName, name, functionName, keyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Get function keys for a function in a web site, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        public static StringDictionary ListFunctionKeys(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName)
        {
                return ((IWebAppsOperations)operations).ListFunctionKeysAsync(resourceGroupName, name, functionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get function keys for a function in a web site, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringDictionary> ListFunctionKeysAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListFunctionKeysWithHttpMessagesAsync(resourceGroupName, name, functionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get function secrets for a function in a web site, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        public static FunctionSecrets ListFunctionSecrets(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName)
        {
                return ((IWebAppsOperations)operations).ListFunctionSecretsAsync(resourceGroupName, name, functionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get function secrets for a function in a web site, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FunctionSecrets> ListFunctionSecretsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListFunctionSecretsWithHttpMessagesAsync(resourceGroupName, name, functionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get host secrets for a function app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        public static HostKeys ListHostKeys(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListHostKeysAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get host secrets for a function app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HostKeys> ListHostKeysAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListHostKeysWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for This is to allow calling via powershell and ARM template.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static void ListSyncStatus(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                ((IWebAppsOperations)operations).ListSyncStatusAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for This is to allow calling via powershell and ARM template.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ListSyncStatusAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.ListSyncStatusWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Syncs function trigger metadata to the management database
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static void SyncFunctions(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                ((IWebAppsOperations)operations).SyncFunctionsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Syncs function trigger metadata to the management database
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task SyncFunctionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.SyncFunctionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Add or update a host level secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='keyType'>
        /// The type of host key.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        public static KeyInfo CreateOrUpdateHostSecret(this IWebAppsOperations operations, string resourceGroupName, string name, string keyType, string keyName, KeyInfo key)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateHostSecretAsync(resourceGroupName, name, keyType, keyName, key).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Add or update a host level secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='keyType'>
        /// The type of host key.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<KeyInfo> CreateOrUpdateHostSecretAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string keyType, string keyName, KeyInfo key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateHostSecretWithHttpMessagesAsync(resourceGroupName, name, keyType, keyName, key, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete a host level secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='keyType'>
        /// The type of host key.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        public static void DeleteHostSecret(this IWebAppsOperations operations, string resourceGroupName, string name, string keyType, string keyName)
        {
                ((IWebAppsOperations)operations).DeleteHostSecretAsync(resourceGroupName, name, keyType, keyName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete a host level secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='keyType'>
        /// The type of host key.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteHostSecretAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string keyType, string keyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteHostSecretWithHttpMessagesAsync(resourceGroupName, name, keyType, keyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Get hostname bindings for an app or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<HostNameBinding> ListHostNameBindings(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListHostNameBindingsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get hostname bindings for an app or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<HostNameBinding>> ListHostNameBindingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListHostNameBindingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the named hostname binding for an app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='hostName'>
        /// Hostname in the hostname binding.
        /// </param>
        public static HostNameBinding GetHostNameBinding(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName)
        {
                return ((IWebAppsOperations)operations).GetHostNameBindingAsync(resourceGroupName, name, hostName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the named hostname binding for an app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='hostName'>
        /// Hostname in the hostname binding.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HostNameBinding> GetHostNameBindingAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, hostName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates a hostname binding for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='hostName'>
        /// Hostname in the hostname binding.
        /// </param>
        public static HostNameBinding CreateOrUpdateHostNameBinding(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, HostNameBinding hostNameBinding)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateHostNameBindingAsync(resourceGroupName, name, hostName, hostNameBinding).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a hostname binding for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='hostName'>
        /// Hostname in the hostname binding.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HostNameBinding> CreateOrUpdateHostNameBindingAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, HostNameBinding hostNameBinding, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, hostName, hostNameBinding, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a hostname binding for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='hostName'>
        /// Hostname in the hostname binding.
        /// </param>
        public static void DeleteHostNameBinding(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName)
        {
                ((IWebAppsOperations)operations).DeleteHostNameBindingAsync(resourceGroupName, name, hostName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a hostname binding for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='hostName'>
        /// Hostname in the hostname binding.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteHostNameBindingAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, hostName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Retrieves a specific Service Bus Hybrid Connection used by
        /// this Web App.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace for this hybrid connection.
        /// </param>
        /// <param name='relayName'>
        /// The relay name for this hybrid connection.
        /// </param>
        public static HybridConnection GetHybridConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
        {
                return ((IWebAppsOperations)operations).GetHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Retrieves a specific Service Bus Hybrid Connection used by
        /// this Web App.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace for this hybrid connection.
        /// </param>
        /// <param name='relayName'>
        /// The relay name for this hybrid connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HybridConnection> GetHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates a new Hybrid Connection using a Service Bus relay.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace for this hybrid connection.
        /// </param>
        /// <param name='relayName'>
        /// The relay name for this hybrid connection.
        /// </param>
        public static HybridConnection CreateOrUpdateHybridConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a new Hybrid Connection using a Service Bus relay.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace for this hybrid connection.
        /// </param>
        /// <param name='relayName'>
        /// The relay name for this hybrid connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HybridConnection> CreateOrUpdateHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Removes a Hybrid Connection from this site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace for this hybrid connection.
        /// </param>
        /// <param name='relayName'>
        /// The relay name for this hybrid connection.
        /// </param>
        public static void DeleteHybridConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
        {
                ((IWebAppsOperations)operations).DeleteHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Removes a Hybrid Connection from this site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace for this hybrid connection.
        /// </param>
        /// <param name='relayName'>
        /// The relay name for this hybrid connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates a new Hybrid Connection using a Service Bus relay.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace for this hybrid connection.
        /// </param>
        /// <param name='relayName'>
        /// The relay name for this hybrid connection.
        /// </param>
        public static HybridConnection UpdateHybridConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).UpdateHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a new Hybrid Connection using a Service Bus relay.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace for this hybrid connection.
        /// </param>
        /// <param name='relayName'>
        /// The relay name for this hybrid connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HybridConnection> UpdateHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Retrieves all Service Bus Hybrid Connections used by this
        /// Web App.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        public static HybridConnection ListHybridConnections(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListHybridConnectionsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Retrieves all Service Bus Hybrid Connections used by this
        /// Web App.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HybridConnection> ListHybridConnectionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListHybridConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets hybrid connections configured for an app (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static RelayServiceConnectionEntity ListRelayServiceConnections(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListRelayServiceConnectionsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets hybrid connections configured for an app (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RelayServiceConnectionEntity> ListRelayServiceConnectionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListRelayServiceConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a hybrid connection configuration by its name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='entityName'>
        /// Name of the hybrid connection.
        /// </param>
        public static RelayServiceConnectionEntity GetRelayServiceConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName)
        {
                return ((IWebAppsOperations)operations).GetRelayServiceConnectionAsync(resourceGroupName, name, entityName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a hybrid connection configuration by its name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='entityName'>
        /// Name of the hybrid connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RelayServiceConnectionEntity> GetRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates a new hybrid connection configuration (PUT), or
        /// updates an existing one (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='entityName'>
        /// Name of the hybrid connection configuration.
        /// </param>
        public static RelayServiceConnectionEntity CreateOrUpdateRelayServiceConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateRelayServiceConnectionAsync(resourceGroupName, name, entityName, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a new hybrid connection configuration (PUT), or
        /// updates an existing one (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='entityName'>
        /// Name of the hybrid connection configuration.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RelayServiceConnectionEntity> CreateOrUpdateRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a relay service connection by its name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='entityName'>
        /// Name of the hybrid connection configuration.
        /// </param>
        public static void DeleteRelayServiceConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName)
        {
                ((IWebAppsOperations)operations).DeleteRelayServiceConnectionAsync(resourceGroupName, name, entityName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a relay service connection by its name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='entityName'>
        /// Name of the hybrid connection configuration.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates a new hybrid connection configuration (PUT), or
        /// updates an existing one (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='entityName'>
        /// Name of the hybrid connection configuration.
        /// </param>
        public static RelayServiceConnectionEntity UpdateRelayServiceConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).UpdateRelayServiceConnectionAsync(resourceGroupName, name, entityName, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a new hybrid connection configuration (PUT), or
        /// updates an existing one (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='entityName'>
        /// Name of the hybrid connection configuration.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RelayServiceConnectionEntity> UpdateRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets all scale-out instances of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WebSiteInstanceStatus> ListInstanceIdentifiers(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListInstanceIdentifiersAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets all scale-out instances of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WebSiteInstanceStatus>> ListInstanceIdentifiersAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListInstanceIdentifiersWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets all scale-out instances of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='instanceId'>
        /// 
        /// </param>
        public static WebSiteInstanceStatus GetInstanceInfo(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId)
        {
                return ((IWebAppsOperations)operations).GetInstanceInfoAsync(resourceGroupName, name, instanceId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets all scale-out instances of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='instanceId'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WebSiteInstanceStatus> GetInstanceInfoAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetInstanceInfoWithHttpMessagesAsync(resourceGroupName, name, instanceId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the status of the last MSDeploy operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='instanceId'>
        /// ID of web app instance.
        /// </param>
        public static MSDeployStatus GetInstanceMsDeployStatus(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId)
        {
                return ((IWebAppsOperations)operations).GetInstanceMsDeployStatusAsync(resourceGroupName, name, instanceId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the status of the last MSDeploy operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='instanceId'>
        /// ID of web app instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MSDeployStatus> GetInstanceMsDeployStatusAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetInstanceMsDeployStatusWithHttpMessagesAsync(resourceGroupName, name, instanceId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Invoke the MSDeploy web app extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='instanceId'>
        /// ID of web app instance.
        /// </param>
        public static MSDeployStatus CreateInstanceMSDeployOperation(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, MSDeploy MSDeploy)
        {
                return ((IWebAppsOperations)operations).CreateInstanceMSDeployOperationAsync(resourceGroupName, name, instanceId, MSDeploy).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Invoke the MSDeploy web app extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='instanceId'>
        /// ID of web app instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MSDeployStatus> CreateInstanceMSDeployOperationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, MSDeploy MSDeploy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateInstanceMSDeployOperationWithHttpMessagesAsync(resourceGroupName, name, instanceId, MSDeploy, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the MSDeploy Log for the last MSDeploy operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='instanceId'>
        /// ID of web app instance.
        /// </param>
        public static MSDeployLog GetInstanceMSDeployLog(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId)
        {
                return ((IWebAppsOperations)operations).GetInstanceMSDeployLogAsync(resourceGroupName, name, instanceId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the MSDeploy Log for the last MSDeploy operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='instanceId'>
        /// ID of web app instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MSDeployLog> GetInstanceMSDeployLogAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetInstanceMSDeployLogWithHttpMessagesAsync(resourceGroupName, name, instanceId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get list of processes for a web site, or a deployment slot,
        /// or for a specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessInfo> ListInstanceProcesses(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId)
        {
                return ((IWebAppsOperations)operations).ListInstanceProcessesAsync(resourceGroupName, name, instanceId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get list of processes for a web site, or a deployment slot,
        /// or for a specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessInfo>> ListInstanceProcessesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListInstanceProcessesWithHttpMessagesAsync(resourceGroupName, name, instanceId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get process information by its ID for a specific scaled-out
        /// instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        public static ProcessInfo GetInstanceProcess(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string instanceId)
        {
                return ((IWebAppsOperations)operations).GetInstanceProcessAsync(resourceGroupName, name, processId, instanceId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get process information by its ID for a specific scaled-out
        /// instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProcessInfo> GetInstanceProcessAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetInstanceProcessWithHttpMessagesAsync(resourceGroupName, name, processId, instanceId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Terminate a process by its ID for a web site, or a
        /// deployment slot, or specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        public static void DeleteInstanceProcess(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string instanceId)
        {
                ((IWebAppsOperations)operations).DeleteInstanceProcessAsync(resourceGroupName, name, processId, instanceId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Terminate a process by its ID for a web site, or a
        /// deployment slot, or specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteInstanceProcessAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteInstanceProcessWithHttpMessagesAsync(resourceGroupName, name, processId, instanceId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Get a memory dump of a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        public static System.IO.Stream GetInstanceProcessDump(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string instanceId)
        {
                return ((IWebAppsOperations)operations).GetInstanceProcessDumpAsync(resourceGroupName, name, processId, instanceId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get a memory dump of a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.IO.Stream> GetInstanceProcessDumpAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var _result = await operations.GetInstanceProcessDumpWithHttpMessagesAsync(resourceGroupName, name, processId, instanceId, null, cancellationToken).ConfigureAwait(false);
            _result.Request.Dispose();
            return _result.Body;
        }
        /// <summary>
        /// Description for List module information for a process by its ID for a
        /// specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessModuleInfo> ListInstanceProcessModules(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string instanceId)
        {
                return ((IWebAppsOperations)operations).ListInstanceProcessModulesAsync(resourceGroupName, name, processId, instanceId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List module information for a process by its ID for a
        /// specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessModuleInfo>> ListInstanceProcessModulesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListInstanceProcessModulesWithHttpMessagesAsync(resourceGroupName, name, processId, instanceId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get process information by its ID for a specific scaled-out
        /// instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='baseAddress'>
        /// Module base address.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        public static ProcessModuleInfo GetInstanceProcessModule(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string baseAddress, string instanceId)
        {
                return ((IWebAppsOperations)operations).GetInstanceProcessModuleAsync(resourceGroupName, name, processId, baseAddress, instanceId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get process information by its ID for a specific scaled-out
        /// instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='baseAddress'>
        /// Module base address.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProcessModuleInfo> GetInstanceProcessModuleAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string baseAddress, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetInstanceProcessModuleWithHttpMessagesAsync(resourceGroupName, name, processId, baseAddress, instanceId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List the threads in a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessThreadInfo> ListInstanceProcessThreads(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string instanceId)
        {
                return ((IWebAppsOperations)operations).ListInstanceProcessThreadsAsync(resourceGroupName, name, processId, instanceId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List the threads in a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessThreadInfo>> ListInstanceProcessThreadsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListInstanceProcessThreadsWithHttpMessagesAsync(resourceGroupName, name, processId, instanceId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Shows whether an app can be cloned to another resource
        /// group or subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static SiteCloneability IsCloneable(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).IsCloneableAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Shows whether an app can be cloned to another resource
        /// group or subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteCloneability> IsCloneableAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.IsCloneableWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets existing backups of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BackupItem> ListSiteBackups(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListSiteBackupsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets existing backups of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BackupItem>> ListSiteBackupsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSiteBackupsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for This is to allow calling via powershell and ARM template.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static FunctionSecrets ListSyncFunctionTriggers(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListSyncFunctionTriggersAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for This is to allow calling via powershell and ARM template.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FunctionSecrets> ListSyncFunctionTriggersAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSyncFunctionTriggersWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Restores a web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='subscriptionName'>
        /// Azure subscription.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static StorageMigrationResponse MigrateStorage(this IWebAppsOperations operations, string subscriptionName, string resourceGroupName, string name, StorageMigrationOptions migrationOptions)
        {
                return ((IWebAppsOperations)operations).MigrateStorageAsync(subscriptionName, resourceGroupName, name, migrationOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restores a web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='subscriptionName'>
        /// Azure subscription.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StorageMigrationResponse> MigrateStorageAsync(this IWebAppsOperations operations, string subscriptionName, string resourceGroupName, string name, StorageMigrationOptions migrationOptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.MigrateStorageWithHttpMessagesAsync(subscriptionName, resourceGroupName, name, migrationOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Migrates a local (in-app) MySql database to a remote MySql
        /// database.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static Operation MigrateMySql(this IWebAppsOperations operations, string resourceGroupName, string name, MigrateMySqlRequest migrationRequestEnvelope)
        {
                return ((IWebAppsOperations)operations).MigrateMySqlAsync(resourceGroupName, name, migrationRequestEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Migrates a local (in-app) MySql database to a remote MySql
        /// database.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Operation> MigrateMySqlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, MigrateMySqlRequest migrationRequestEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.MigrateMySqlWithHttpMessagesAsync(resourceGroupName, name, migrationRequestEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Returns the status of MySql in app migration, if one is
        /// active, and whether or not MySql in app is enabled
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static MigrateMySqlStatus GetMigrateMySqlStatus(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetMigrateMySqlStatusAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Returns the status of MySql in app migration, if one is
        /// active, and whether or not MySql in app is enabled
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MigrateMySqlStatus> GetMigrateMySqlStatusAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetMigrateMySqlStatusWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a Swift Virtual Network connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static SwiftVirtualNetwork GetSwiftVirtualNetworkConnection(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetSwiftVirtualNetworkConnectionAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a Swift Virtual Network connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SwiftVirtualNetwork> GetSwiftVirtualNetworkConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetSwiftVirtualNetworkConnectionWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Integrates this Web App with a Virtual Network. This
        /// requires that 1) &#34;swiftSupported&#34; is true when doing a GET against this
        /// resource, and 2) that the target Subnet has already been delegated, and is
        /// not
        /// in use by another App Service Plan other than the one this App is in.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static SwiftVirtualNetwork CreateOrUpdateSwiftVirtualNetworkConnectionWithCheck(this IWebAppsOperations operations, string resourceGroupName, string name, SwiftVirtualNetwork connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateSwiftVirtualNetworkConnectionWithCheckAsync(resourceGroupName, name, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Integrates this Web App with a Virtual Network. This
        /// requires that 1) &#34;swiftSupported&#34; is true when doing a GET against this
        /// resource, and 2) that the target Subnet has already been delegated, and is
        /// not
        /// in use by another App Service Plan other than the one this App is in.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SwiftVirtualNetwork> CreateOrUpdateSwiftVirtualNetworkConnectionWithCheckAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SwiftVirtualNetwork connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateSwiftVirtualNetworkConnectionWithCheckWithHttpMessagesAsync(resourceGroupName, name, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a Swift Virtual Network connection from an app (or
        /// deployment slot).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static void DeleteSwiftVirtualNetwork(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                ((IWebAppsOperations)operations).DeleteSwiftVirtualNetworkAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a Swift Virtual Network connection from an app (or
        /// deployment slot).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteSwiftVirtualNetworkAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteSwiftVirtualNetworkWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Integrates this Web App with a Virtual Network. This
        /// requires that 1) &#34;swiftSupported&#34; is true when doing a GET against this
        /// resource, and 2) that the target Subnet has already been delegated, and is
        /// not
        /// in use by another App Service Plan other than the one this App is in.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static SwiftVirtualNetwork UpdateSwiftVirtualNetworkConnectionWithCheck(this IWebAppsOperations operations, string resourceGroupName, string name, SwiftVirtualNetwork connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).UpdateSwiftVirtualNetworkConnectionWithCheckAsync(resourceGroupName, name, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Integrates this Web App with a Virtual Network. This
        /// requires that 1) &#34;swiftSupported&#34; is true when doing a GET against this
        /// resource, and 2) that the target Subnet has already been delegated, and is
        /// not
        /// in use by another App Service Plan other than the one this App is in.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SwiftVirtualNetwork> UpdateSwiftVirtualNetworkConnectionWithCheckAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SwiftVirtualNetwork connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateSwiftVirtualNetworkConnectionWithCheckWithHttpMessagesAsync(resourceGroupName, name, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets all network features used by the app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='view'>
        /// The type of view. Only &#34;summary&#34; is supported at this time.
        /// </param>
        public static NetworkFeatures ListNetworkFeatures(this IWebAppsOperations operations, string resourceGroupName, string name, string view)
        {
                return ((IWebAppsOperations)operations).ListNetworkFeaturesAsync(resourceGroupName, name, view).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets all network features used by the app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='view'>
        /// The type of view. Only &#34;summary&#34; is supported at this time.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<NetworkFeatures> ListNetworkFeaturesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string view, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNetworkFeaturesWithHttpMessagesAsync(resourceGroupName, name, view, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='operationId'>
        /// GUID of the operation.
        /// </param>
        public static object GetNetworkTraceOperation(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId)
        {
                return ((IWebAppsOperations)operations).GetNetworkTraceOperationAsync(resourceGroupName, name, operationId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='operationId'>
        /// GUID of the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> GetNetworkTraceOperationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetNetworkTraceOperationWithHttpMessagesAsync(resourceGroupName, name, operationId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Start capturing network packets for the site (To be
        /// deprecated).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        public static string StartWebSiteNetworkTrace(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string))
        {
                return ((IWebAppsOperations)operations).StartWebSiteNetworkTraceAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Start capturing network packets for the site (To be
        /// deprecated).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<string> StartWebSiteNetworkTraceAsync(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.StartWebSiteNetworkTraceWithHttpMessagesAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        public static object StartWebSiteNetworkTraceOperation(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string))
        {
                return ((IWebAppsOperations)operations).StartWebSiteNetworkTraceOperationAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> StartWebSiteNetworkTraceOperationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.StartWebSiteNetworkTraceOperationWithHttpMessagesAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Stop ongoing capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        public static void StopWebSiteNetworkTrace(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                ((IWebAppsOperations)operations).StopWebSiteNetworkTraceAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Stop ongoing capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task StopWebSiteNetworkTraceAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.StopWebSiteNetworkTraceWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='operationId'>
        /// GUID of the operation.
        /// </param>
        public static System.Collections.Generic.IList<NetworkTrace> GetNetworkTraces(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId)
        {
                return ((IWebAppsOperations)operations).GetNetworkTracesAsync(resourceGroupName, name, operationId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='operationId'>
        /// GUID of the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<NetworkTrace>> GetNetworkTracesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetNetworkTracesWithHttpMessagesAsync(resourceGroupName, name, operationId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='operationId'>
        /// GUID of the operation.
        /// </param>
        public static object GetNetworkTraceOperationV2(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId)
        {
                return ((IWebAppsOperations)operations).GetNetworkTraceOperationV2Async(resourceGroupName, name, operationId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='operationId'>
        /// GUID of the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> GetNetworkTraceOperationV2Async(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetNetworkTraceOperationV2WithHttpMessagesAsync(resourceGroupName, name, operationId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='operationId'>
        /// GUID of the operation.
        /// </param>
        public static System.Collections.Generic.IList<NetworkTrace> GetNetworkTracesV2(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId)
        {
                return ((IWebAppsOperations)operations).GetNetworkTracesV2Async(resourceGroupName, name, operationId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='operationId'>
        /// GUID of the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<NetworkTrace>> GetNetworkTracesV2Async(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetNetworkTracesV2WithHttpMessagesAsync(resourceGroupName, name, operationId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Generates a new publishing password for an app (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static void GenerateNewSitePublishingPassword(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                ((IWebAppsOperations)operations).GenerateNewSitePublishingPasswordAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Generates a new publishing password for an app (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task GenerateNewSitePublishingPasswordAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.GenerateNewSitePublishingPasswordWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Gets perfmon counters for web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='filter'>
        /// Return only usages/metrics specified in the filter. Filter conforms to
        /// odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and
        /// endTime eq 2014-12-31T23:59:59Z and timeGrain eq
        /// duration&#39;[Hour|Minute|Day]&#39;.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PerfMonResponse> ListPerfMonCounters(this IWebAppsOperations operations, string resourceGroupName, string name, string filter = default(string))
        {
                return ((IWebAppsOperations)operations).ListPerfMonCountersAsync(resourceGroupName, name, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets perfmon counters for web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='filter'>
        /// Return only usages/metrics specified in the filter. Filter conforms to
        /// odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and
        /// endTime eq 2014-12-31T23:59:59Z and timeGrain eq
        /// duration&#39;[Hour|Minute|Day]&#39;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PerfMonResponse>> ListPerfMonCountersAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListPerfMonCountersWithHttpMessagesAsync(resourceGroupName, name, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets web app&#39;s event logs.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static SitePhpErrorLogFlag GetSitePhpErrorLogFlag(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetSitePhpErrorLogFlagAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets web app&#39;s event logs.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SitePhpErrorLogFlag> GetSitePhpErrorLogFlagAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetSitePhpErrorLogFlagWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the premier add-ons of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static PremierAddOn ListPremierAddOns(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListPremierAddOnsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the premier add-ons of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PremierAddOn> ListPremierAddOnsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListPremierAddOnsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a named add-on of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='premierAddOnName'>
        /// Add-on name.
        /// </param>
        public static PremierAddOn GetPremierAddOn(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName)
        {
                return ((IWebAppsOperations)operations).GetPremierAddOnAsync(resourceGroupName, name, premierAddOnName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a named add-on of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='premierAddOnName'>
        /// Add-on name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PremierAddOn> GetPremierAddOnAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates a named add-on of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='premierAddOnName'>
        /// Add-on name.
        /// </param>
        public static PremierAddOn AddPremierAddOn(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOn premierAddOn)
        {
                return ((IWebAppsOperations)operations).AddPremierAddOnAsync(resourceGroupName, name, premierAddOnName, premierAddOn).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates a named add-on of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='premierAddOnName'>
        /// Add-on name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PremierAddOn> AddPremierAddOnAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOn premierAddOn, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.AddPremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, premierAddOn, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete a premier add-on from an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='premierAddOnName'>
        /// Add-on name.
        /// </param>
        public static void DeletePremierAddOn(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName)
        {
                ((IWebAppsOperations)operations).DeletePremierAddOnAsync(resourceGroupName, name, premierAddOnName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete a premier add-on from an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='premierAddOnName'>
        /// Add-on name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeletePremierAddOnAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeletePremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Updates a named add-on of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='premierAddOnName'>
        /// Add-on name.
        /// </param>
        public static PremierAddOn UpdatePremierAddOn(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOnPatchResource premierAddOn)
        {
                return ((IWebAppsOperations)operations).UpdatePremierAddOnAsync(resourceGroupName, name, premierAddOnName, premierAddOn).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates a named add-on of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='premierAddOnName'>
        /// Add-on name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PremierAddOn> UpdatePremierAddOnAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOnPatchResource premierAddOn, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdatePremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, premierAddOn, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets data around private site access enablement and
        /// authorized Virtual Networks that can access the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        public static PrivateAccess GetPrivateAccess(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetPrivateAccessAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets data around private site access enablement and
        /// authorized Virtual Networks that can access the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateAccess> GetPrivateAccessAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPrivateAccessWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Sets data around private site access enablement and
        /// authorized Virtual Networks that can access the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        public static PrivateAccess PutPrivateAccessVnet(this IWebAppsOperations operations, string resourceGroupName, string name, PrivateAccess access)
        {
                return ((IWebAppsOperations)operations).PutPrivateAccessVnetAsync(resourceGroupName, name, access).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Sets data around private site access enablement and
        /// authorized Virtual Networks that can access the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateAccess> PutPrivateAccessVnetAsync(this IWebAppsOperations operations, string resourceGroupName, string name, PrivateAccess access, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.PutPrivateAccessVnetWithHttpMessagesAsync(resourceGroupName, name, access, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the list of private endpoint connections associated
        /// with a site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RemotePrivateEndpointConnectionARMResource> GetPrivateEndpointConnectionList(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetPrivateEndpointConnectionListAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the list of private endpoint connections associated
        /// with a site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RemotePrivateEndpointConnectionARMResource>> GetPrivateEndpointConnectionListAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPrivateEndpointConnectionListWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection.
        /// </param>
        public static RemotePrivateEndpointConnectionARMResource GetPrivateEndpointConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName)
        {
                return ((IWebAppsOperations)operations).GetPrivateEndpointConnectionAsync(resourceGroupName, name, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RemotePrivateEndpointConnectionARMResource> GetPrivateEndpointConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Approves or rejects a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        public static RemotePrivateEndpointConnectionARMResource ApproveOrRejectPrivateEndpointConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper)
        {
                return ((IWebAppsOperations)operations).ApproveOrRejectPrivateEndpointConnectionAsync(resourceGroupName, name, privateEndpointConnectionName, privateEndpointWrapper).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Approves or rejects a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RemotePrivateEndpointConnectionARMResource> ApproveOrRejectPrivateEndpointConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApproveOrRejectPrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, privateEndpointWrapper, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        public static object DeletePrivateEndpointConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName)
        {
                return ((IWebAppsOperations)operations).DeletePrivateEndpointConnectionAsync(resourceGroupName, name, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> DeletePrivateEndpointConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeletePrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the private link resources
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        public static PrivateLinkResourcesWrapper GetPrivateLinkResources(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetPrivateLinkResourcesAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the private link resources
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateLinkResourcesWrapper> GetPrivateLinkResourcesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPrivateLinkResourcesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get list of processes for a web site, or a deployment slot,
        /// or for a specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessInfo> ListProcesses(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListProcessesAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get list of processes for a web site, or a deployment slot,
        /// or for a specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessInfo>> ListProcessesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListProcessesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get process information by its ID for a specific scaled-out
        /// instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        public static ProcessInfo GetProcess(this IWebAppsOperations operations, string resourceGroupName, string name, string processId)
        {
                return ((IWebAppsOperations)operations).GetProcessAsync(resourceGroupName, name, processId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get process information by its ID for a specific scaled-out
        /// instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProcessInfo> GetProcessAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetProcessWithHttpMessagesAsync(resourceGroupName, name, processId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Terminate a process by its ID for a web site, or a
        /// deployment slot, or specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        public static void DeleteProcess(this IWebAppsOperations operations, string resourceGroupName, string name, string processId)
        {
                ((IWebAppsOperations)operations).DeleteProcessAsync(resourceGroupName, name, processId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Terminate a process by its ID for a web site, or a
        /// deployment slot, or specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteProcessAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteProcessWithHttpMessagesAsync(resourceGroupName, name, processId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Get a memory dump of a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        public static System.IO.Stream GetProcessDump(this IWebAppsOperations operations, string resourceGroupName, string name, string processId)
        {
                return ((IWebAppsOperations)operations).GetProcessDumpAsync(resourceGroupName, name, processId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get a memory dump of a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.IO.Stream> GetProcessDumpAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var _result = await operations.GetProcessDumpWithHttpMessagesAsync(resourceGroupName, name, processId, null, cancellationToken).ConfigureAwait(false);
            _result.Request.Dispose();
            return _result.Body;
        }
        /// <summary>
        /// Description for List module information for a process by its ID for a
        /// specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessModuleInfo> ListProcessModules(this IWebAppsOperations operations, string resourceGroupName, string name, string processId)
        {
                return ((IWebAppsOperations)operations).ListProcessModulesAsync(resourceGroupName, name, processId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List module information for a process by its ID for a
        /// specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessModuleInfo>> ListProcessModulesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListProcessModulesWithHttpMessagesAsync(resourceGroupName, name, processId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get process information by its ID for a specific scaled-out
        /// instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='baseAddress'>
        /// Module base address.
        /// </param>
        public static ProcessModuleInfo GetProcessModule(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string baseAddress)
        {
                return ((IWebAppsOperations)operations).GetProcessModuleAsync(resourceGroupName, name, processId, baseAddress).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get process information by its ID for a specific scaled-out
        /// instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='baseAddress'>
        /// Module base address.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProcessModuleInfo> GetProcessModuleAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string baseAddress, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetProcessModuleWithHttpMessagesAsync(resourceGroupName, name, processId, baseAddress, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List the threads in a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessThreadInfo> ListProcessThreads(this IWebAppsOperations operations, string resourceGroupName, string name, string processId)
        {
                return ((IWebAppsOperations)operations).ListProcessThreadsAsync(resourceGroupName, name, processId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List the threads in a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessThreadInfo>> ListProcessThreadsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListProcessThreadsWithHttpMessagesAsync(resourceGroupName, name, processId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get public certificates for an app or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PublicCertificate> ListPublicCertificates(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListPublicCertificatesAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get public certificates for an app or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PublicCertificate>> ListPublicCertificatesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListPublicCertificatesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the named public certificate for an app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='publicCertificateName'>
        /// Public certificate name.
        /// </param>
        public static PublicCertificate GetPublicCertificate(this IWebAppsOperations operations, string resourceGroupName, string name, string publicCertificateName)
        {
                return ((IWebAppsOperations)operations).GetPublicCertificateAsync(resourceGroupName, name, publicCertificateName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the named public certificate for an app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='publicCertificateName'>
        /// Public certificate name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PublicCertificate> GetPublicCertificateAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string publicCertificateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPublicCertificateWithHttpMessagesAsync(resourceGroupName, name, publicCertificateName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates a hostname binding for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='publicCertificateName'>
        /// Public certificate name.
        /// </param>
        public static PublicCertificate CreateOrUpdatePublicCertificate(this IWebAppsOperations operations, string resourceGroupName, string name, string publicCertificateName, PublicCertificate publicCertificate)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdatePublicCertificateAsync(resourceGroupName, name, publicCertificateName, publicCertificate).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a hostname binding for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='publicCertificateName'>
        /// Public certificate name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PublicCertificate> CreateOrUpdatePublicCertificateAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string publicCertificateName, PublicCertificate publicCertificate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdatePublicCertificateWithHttpMessagesAsync(resourceGroupName, name, publicCertificateName, publicCertificate, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a hostname binding for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='publicCertificateName'>
        /// Public certificate name.
        /// </param>
        public static void DeletePublicCertificate(this IWebAppsOperations operations, string resourceGroupName, string name, string publicCertificateName)
        {
                ((IWebAppsOperations)operations).DeletePublicCertificateAsync(resourceGroupName, name, publicCertificateName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a hostname binding for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='publicCertificateName'>
        /// Public certificate name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeletePublicCertificateAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string publicCertificateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeletePublicCertificateWithHttpMessagesAsync(resourceGroupName, name, publicCertificateName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Gets the publishing profile for an app (or deployment slot,
        /// if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static System.IO.Stream ListPublishingProfileXmlWithSecrets(this IWebAppsOperations operations, string resourceGroupName, string name, CsmPublishingProfileOptions publishingProfileOptions)
        {
                return ((IWebAppsOperations)operations).ListPublishingProfileXmlWithSecretsAsync(resourceGroupName, name, publishingProfileOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the publishing profile for an app (or deployment slot,
        /// if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.IO.Stream> ListPublishingProfileXmlWithSecretsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmPublishingProfileOptions publishingProfileOptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var _result = await operations.ListPublishingProfileXmlWithSecretsWithHttpMessagesAsync(resourceGroupName, name, publishingProfileOptions, null, cancellationToken).ConfigureAwait(false);
            _result.Request.Dispose();
            return _result.Body;
        }
        /// <summary>
        /// Description for Resets the configuration settings of the current slot if
        /// they were previously modified by calling the API with POST.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static void ResetProductionSlotConfig(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                ((IWebAppsOperations)operations).ResetProductionSlotConfigAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Resets the configuration settings of the current slot if
        /// they were previously modified by calling the API with POST.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ResetProductionSlotConfigAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.ResetProductionSlotConfigWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Restarts an app (or deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='softRestart'>
        /// Specify true to apply the configuration settings and restarts the app only
        /// if necessary. By default, the API always restarts and reprovisions the app.
        /// </param>
        /// <param name='synchronous'>
        /// Specify true to block until the app is restarted. By default, it is set to
        /// false, and the API responds immediately (asynchronous).
        /// </param>
        public static void Restart(this IWebAppsOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?), bool? synchronous = default(bool?))
        {
                ((IWebAppsOperations)operations).RestartAsync(resourceGroupName, name, softRestart, synchronous).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restarts an app (or deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='softRestart'>
        /// Specify true to apply the configuration settings and restarts the app only
        /// if necessary. By default, the API always restarts and reprovisions the app.
        /// </param>
        /// <param name='synchronous'>
        /// Specify true to block until the app is restarted. By default, it is set to
        /// false, and the API responds immediately (asynchronous).
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RestartAsync(this IWebAppsOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?), bool? synchronous = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RestartWithHttpMessagesAsync(resourceGroupName, name, softRestart, synchronous, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Restores an app from a backup blob in Azure Storage.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static void RestoreFromBackupBlob(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequest request)
        {
                ((IWebAppsOperations)operations).RestoreFromBackupBlobAsync(resourceGroupName, name, request).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restores an app from a backup blob in Azure Storage.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RestoreFromBackupBlobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RestoreFromBackupBlobWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Restores a deleted web app to this web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static void RestoreFromDeletedApp(this IWebAppsOperations operations, string resourceGroupName, string name, DeletedAppRestoreRequest restoreRequest)
        {
                ((IWebAppsOperations)operations).RestoreFromDeletedAppAsync(resourceGroupName, name, restoreRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restores a deleted web app to this web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RestoreFromDeletedAppAsync(this IWebAppsOperations operations, string resourceGroupName, string name, DeletedAppRestoreRequest restoreRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RestoreFromDeletedAppWithHttpMessagesAsync(resourceGroupName, name, restoreRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Restores a web app from a snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static void RestoreSnapshot(this IWebAppsOperations operations, string resourceGroupName, string name, SnapshotRestoreRequest restoreRequest)
        {
                ((IWebAppsOperations)operations).RestoreSnapshotAsync(resourceGroupName, name, restoreRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restores a web app from a snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RestoreSnapshotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SnapshotRestoreRequest restoreRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RestoreSnapshotWithHttpMessagesAsync(resourceGroupName, name, restoreRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Get list of siteextensions for a web site, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SiteExtensionInfo> ListSiteExtensions(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListSiteExtensionsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get list of siteextensions for a web site, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SiteExtensionInfo>> ListSiteExtensionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSiteExtensionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get site extension information by its ID for a web site, or
        /// a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='siteExtensionId'>
        /// Site extension name.
        /// </param>
        public static SiteExtensionInfo GetSiteExtension(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId)
        {
                return ((IWebAppsOperations)operations).GetSiteExtensionAsync(resourceGroupName, name, siteExtensionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get site extension information by its ID for a web site, or
        /// a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='siteExtensionId'>
        /// Site extension name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteExtensionInfo> GetSiteExtensionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetSiteExtensionWithHttpMessagesAsync(resourceGroupName, name, siteExtensionId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Install site extension on a web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='siteExtensionId'>
        /// Site extension name.
        /// </param>
        public static SiteExtensionInfo InstallSiteExtension(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId)
        {
                return ((IWebAppsOperations)operations).InstallSiteExtensionAsync(resourceGroupName, name, siteExtensionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Install site extension on a web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='siteExtensionId'>
        /// Site extension name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteExtensionInfo> InstallSiteExtensionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.InstallSiteExtensionWithHttpMessagesAsync(resourceGroupName, name, siteExtensionId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Remove a site extension from a web site, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='siteExtensionId'>
        /// Site extension name.
        /// </param>
        public static void DeleteSiteExtension(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId)
        {
                ((IWebAppsOperations)operations).DeleteSiteExtensionAsync(resourceGroupName, name, siteExtensionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Remove a site extension from a web site, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='siteExtensionId'>
        /// Site extension name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteSiteExtensionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteSiteExtensionWithHttpMessagesAsync(resourceGroupName, name, siteExtensionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Gets an app&#39;s deployment slots.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> ListSlots(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListSlotsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets an app&#39;s deployment slots.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> ListSlotsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSlotsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the details of a web, mobile, or API app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. By default, this API returns the production
        /// slot.
        /// </param>
        public static Site GetSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the details of a web, mobile, or API app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. By default, this API returns the production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Site> GetSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates a new web, mobile, or API app in an existing
        /// resource group, or updates an existing app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Unique name of the app to create or update. To create or update a
        /// deployment slot, use the {slot} parameter.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot to create or update. By default, this API
        /// attempts to create or modify the production slot.
        /// </param>
        public static Site CreateOrUpdateSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, Site siteEnvelope)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateSlotAsync(resourceGroupName, name, slot, siteEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a new web, mobile, or API app in an existing
        /// resource group, or updates an existing app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Unique name of the app to create or update. To create or update a
        /// deployment slot, use the {slot} parameter.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot to create or update. By default, this API
        /// attempts to create or modify the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Site> CreateOrUpdateSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, Site siteEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateSlotWithHttpMessagesAsync(resourceGroupName, name, slot, siteEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a web, mobile, or API app, or one of the deployment
        /// slots.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app to delete.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot to delete. By default, the API deletes the
        /// production slot.
        /// </param>
        /// <param name='deleteMetrics'>
        /// If true, web app metrics are also deleted.
        /// </param>
        /// <param name='deleteEmptyServerFarm'>
        /// Specify false if you want to keep empty App Service plan. By default, empty
        /// App Service plan is deleted.
        /// </param>
        public static void DeleteSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? deleteMetrics = default(bool?), bool? deleteEmptyServerFarm = default(bool?))
        {
                ((IWebAppsOperations)operations).DeleteSlotAsync(resourceGroupName, name, slot, deleteMetrics, deleteEmptyServerFarm).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a web, mobile, or API app, or one of the deployment
        /// slots.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app to delete.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot to delete. By default, the API deletes the
        /// production slot.
        /// </param>
        /// <param name='deleteMetrics'>
        /// If true, web app metrics are also deleted.
        /// </param>
        /// <param name='deleteEmptyServerFarm'>
        /// Specify false if you want to keep empty App Service plan. By default, empty
        /// App Service plan is deleted.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? deleteMetrics = default(bool?), bool? deleteEmptyServerFarm = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteSlotWithHttpMessagesAsync(resourceGroupName, name, slot, deleteMetrics, deleteEmptyServerFarm, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates a new web, mobile, or API app in an existing
        /// resource group, or updates an existing app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Unique name of the app to create or update. To create or update a
        /// deployment slot, use the {slot} parameter.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot to create or update. By default, this API
        /// attempts to create or modify the production slot.
        /// </param>
        public static Site UpdateSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SitePatchResource siteEnvelope)
        {
                return ((IWebAppsOperations)operations).UpdateSlotAsync(resourceGroupName, name, slot, siteEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a new web, mobile, or API app in an existing
        /// resource group, or updates an existing app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Unique name of the app to create or update. To create or update a
        /// deployment slot, use the {slot} parameter.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot to create or update. By default, this API
        /// attempts to create or modify the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Site> UpdateSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SitePatchResource siteEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateSlotWithHttpMessagesAsync(resourceGroupName, name, slot, siteEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Analyze a custom hostname.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='hostName'>
        /// Custom hostname.
        /// </param>
        public static CustomHostnameAnalysisResult AnalyzeCustomHostnameSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName = default(string))
        {
                return ((IWebAppsOperations)operations).AnalyzeCustomHostnameSlotAsync(resourceGroupName, name, slot, hostName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Analyze a custom hostname.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='hostName'>
        /// Custom hostname.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CustomHostnameAnalysisResult> AnalyzeCustomHostnameSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.AnalyzeCustomHostnameSlotWithHttpMessagesAsync(resourceGroupName, name, slot, hostName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Applies the configuration settings from the target slot
        /// onto the current slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the source slot. If a slot is not specified, the production slot is
        /// used as the source slot.
        /// </param>
        public static void ApplySlotConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CsmSlotEntity slotSwapEntity)
        {
                ((IWebAppsOperations)operations).ApplySlotConfigurationSlotAsync(resourceGroupName, name, slot, slotSwapEntity).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Applies the configuration settings from the target slot
        /// onto the current slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the source slot. If a slot is not specified, the production slot is
        /// used as the source slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApplySlotConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CsmSlotEntity slotSwapEntity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.ApplySlotConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, slotSwapEntity, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates a backup of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// create a backup for the production slot.
        /// </param>
        public static BackupItem BackupSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, BackupRequest request)
        {
                return ((IWebAppsOperations)operations).BackupSlotAsync(resourceGroupName, name, slot, request).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a backup of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// create a backup for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupItem> BackupSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, BackupRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BackupSlotWithHttpMessagesAsync(resourceGroupName, name, slot, request, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets existing backups of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// backups of the production slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BackupItem> ListBackupsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListBackupsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets existing backups of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// backups of the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BackupItem>> ListBackupsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBackupsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a backup of an app by its ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='backupId'>
        /// ID of the backup.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get a
        /// backup of the production slot.
        /// </param>
        public static BackupItem GetBackupStatusSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot)
        {
                return ((IWebAppsOperations)operations).GetBackupStatusSlotAsync(resourceGroupName, name, backupId, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a backup of an app by its ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='backupId'>
        /// ID of the backup.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get a
        /// backup of the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupItem> GetBackupStatusSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetBackupStatusSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a backup of an app by its ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='backupId'>
        /// ID of the backup.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete a backup of the production slot.
        /// </param>
        public static void DeleteBackupSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot)
        {
                ((IWebAppsOperations)operations).DeleteBackupSlotAsync(resourceGroupName, name, backupId, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a backup of an app by its ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='backupId'>
        /// ID of the backup.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete a backup of the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteBackupSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteBackupSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Gets status of a web app backup that may be in progress,
        /// including secrets associated with the backup, such as the Azure Storage SAS
        /// URL. Also can be used to update the SAS URL for the backup if a new URL is
        /// passed in the request body.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='backupId'>
        /// ID of backup.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static BackupItem ListBackupStatusSecretsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot, BackupRequest request)
        {
                return ((IWebAppsOperations)operations).ListBackupStatusSecretsSlotAsync(resourceGroupName, name, backupId, slot, request).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets status of a web app backup that may be in progress,
        /// including secrets associated with the backup, such as the Azure Storage SAS
        /// URL. Also can be used to update the SAS URL for the backup if a new URL is
        /// passed in the request body.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='backupId'>
        /// ID of backup.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupItem> ListBackupStatusSecretsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot, BackupRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBackupStatusSecretsSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, slot, request, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Restores a specific backup to another app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='backupId'>
        /// ID of the backup.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// restore a backup of the production slot.
        /// </param>
        public static void RestoreSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot, RestoreRequest request)
        {
                ((IWebAppsOperations)operations).RestoreSlotAsync(resourceGroupName, name, backupId, slot, request).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restores a specific backup to another app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='backupId'>
        /// ID of the backup.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// restore a backup of the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RestoreSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot, RestoreRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RestoreSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, slot, request, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Returns whether Scm basic auth is allowed and whether Ftp
        /// is allowed for a given site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CsmPublishingCredentialsPoliciesEntity> ListBasicPublishingCredentialsPoliciesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListBasicPublishingCredentialsPoliciesSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Returns whether Scm basic auth is allowed and whether Ftp
        /// is allowed for a given site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CsmPublishingCredentialsPoliciesEntity>> ListBasicPublishingCredentialsPoliciesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBasicPublishingCredentialsPoliciesSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Returns whether FTP is allowed on the site or not.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        public static CsmPublishingCredentialsPoliciesEntity GetFtpAllowedSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetFtpAllowedSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Returns whether FTP is allowed on the site or not.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CsmPublishingCredentialsPoliciesEntity> GetFtpAllowedSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetFtpAllowedSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates whether FTP is allowed on the site or not.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        public static CsmPublishingCredentialsPoliciesEntity UpdateFtpAllowedSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CsmPublishingCredentialsPoliciesEntity csmPublishingAccessPoliciesEntity)
        {
                return ((IWebAppsOperations)operations).UpdateFtpAllowedSlotAsync(resourceGroupName, name, slot, csmPublishingAccessPoliciesEntity).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates whether FTP is allowed on the site or not.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CsmPublishingCredentialsPoliciesEntity> UpdateFtpAllowedSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CsmPublishingCredentialsPoliciesEntity csmPublishingAccessPoliciesEntity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateFtpAllowedSlotWithHttpMessagesAsync(resourceGroupName, name, slot, csmPublishingAccessPoliciesEntity, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Returns whether Scm basic auth is allowed on the site or
        /// not.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        public static CsmPublishingCredentialsPoliciesEntity GetScmAllowedSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetScmAllowedSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Returns whether Scm basic auth is allowed on the site or
        /// not.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CsmPublishingCredentialsPoliciesEntity> GetScmAllowedSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetScmAllowedSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates whether user publishing credentials are allowed on
        /// the site or not.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        public static CsmPublishingCredentialsPoliciesEntity UpdateScmAllowedSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CsmPublishingCredentialsPoliciesEntity csmPublishingAccessPoliciesEntity)
        {
                return ((IWebAppsOperations)operations).UpdateScmAllowedSlotAsync(resourceGroupName, name, slot, csmPublishingAccessPoliciesEntity).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates whether user publishing credentials are allowed on
        /// the site or not.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CsmPublishingCredentialsPoliciesEntity> UpdateScmAllowedSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CsmPublishingCredentialsPoliciesEntity csmPublishingAccessPoliciesEntity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateScmAllowedSlotWithHttpMessagesAsync(resourceGroupName, name, slot, csmPublishingAccessPoliciesEntity, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List the configurations of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// return configuration for the production slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SiteConfigResource> ListConfigurationsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListConfigurationsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List the configurations of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// return configuration for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SiteConfigResource>> ListConfigurationsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListConfigurationsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Replaces the application settings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the application settings for the production slot.
        /// </param>
        public static StringDictionary UpdateApplicationSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, StringDictionary appSettings)
        {
                return ((IWebAppsOperations)operations).UpdateApplicationSettingsSlotAsync(resourceGroupName, name, slot, appSettings).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Replaces the application settings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the application settings for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringDictionary> UpdateApplicationSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, StringDictionary appSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateApplicationSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, appSettings, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the application settings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the application settings for the production slot.
        /// </param>
        public static StringDictionary ListApplicationSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListApplicationSettingsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the application settings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the application settings for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringDictionary> ListApplicationSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListApplicationSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates the Authentication / Authorization settings
        /// associated with web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static SiteAuthSettings UpdateAuthSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SiteAuthSettings siteAuthSettings)
        {
                return ((IWebAppsOperations)operations).UpdateAuthSettingsSlotAsync(resourceGroupName, name, slot, siteAuthSettings).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the Authentication / Authorization settings
        /// associated with web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteAuthSettings> UpdateAuthSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SiteAuthSettings siteAuthSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateAuthSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, siteAuthSettings, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the Authentication/Authorization settings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the settings for the production slot.
        /// </param>
        public static SiteAuthSettings GetAuthSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetAuthSettingsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the Authentication/Authorization settings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the settings for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteAuthSettings> GetAuthSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAuthSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates site&#39;s Authentication / Authorization settings for
        /// apps via the V2 format
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static SiteAuthSettingsV2 UpdateAuthSettingsV2Slot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SiteAuthSettingsV2 siteAuthSettingsV2)
        {
                return ((IWebAppsOperations)operations).UpdateAuthSettingsV2SlotAsync(resourceGroupName, name, slot, siteAuthSettingsV2).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates site&#39;s Authentication / Authorization settings for
        /// apps via the V2 format
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteAuthSettingsV2> UpdateAuthSettingsV2SlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SiteAuthSettingsV2 siteAuthSettingsV2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateAuthSettingsV2SlotWithHttpMessagesAsync(resourceGroupName, name, slot, siteAuthSettingsV2, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets site&#39;s Authentication / Authorization settings for
        /// apps via the V2 format
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the settings for the production slot.
        /// </param>
        public static SiteAuthSettingsV2 GetAuthSettingsV2Slot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetAuthSettingsV2SlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets site&#39;s Authentication / Authorization settings for
        /// apps via the V2 format
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the settings for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteAuthSettingsV2> GetAuthSettingsV2SlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAuthSettingsV2SlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates the Azure storage account configurations of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the Azure storage account configurations for the production slot.
        /// </param>
        public static AzureStoragePropertyDictionaryResource UpdateAzureStorageAccountsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, AzureStoragePropertyDictionaryResource azureStorageAccounts)
        {
                return ((IWebAppsOperations)operations).UpdateAzureStorageAccountsSlotAsync(resourceGroupName, name, slot, azureStorageAccounts).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the Azure storage account configurations of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the Azure storage account configurations for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AzureStoragePropertyDictionaryResource> UpdateAzureStorageAccountsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, AzureStoragePropertyDictionaryResource azureStorageAccounts, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateAzureStorageAccountsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, azureStorageAccounts, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the Azure storage account configurations of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the Azure storage account configurations for the production slot.
        /// </param>
        public static AzureStoragePropertyDictionaryResource ListAzureStorageAccountsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListAzureStorageAccountsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the Azure storage account configurations of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the Azure storage account configurations for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AzureStoragePropertyDictionaryResource> ListAzureStorageAccountsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAzureStorageAccountsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates the backup configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the backup configuration for the production slot.
        /// </param>
        public static BackupRequest UpdateBackupConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, BackupRequest request)
        {
                return ((IWebAppsOperations)operations).UpdateBackupConfigurationSlotAsync(resourceGroupName, name, slot, request).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the backup configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the backup configuration for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupRequest> UpdateBackupConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, BackupRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateBackupConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, request, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes the backup configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the backup configuration for the production slot.
        /// </param>
        public static void DeleteBackupConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                ((IWebAppsOperations)operations).DeleteBackupConfigurationSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes the backup configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the backup configuration for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteBackupConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteBackupConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Gets the backup configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the backup configuration for the production slot.
        /// </param>
        public static BackupRequest GetBackupConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetBackupConfigurationSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the backup configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the backup configuration for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupRequest> GetBackupConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetBackupConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the config reference app settings and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ApiKVReference> GetAppSettingsKeyVaultReferencesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetAppSettingsKeyVaultReferencesSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the config reference app settings and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ApiKVReference>> GetAppSettingsKeyVaultReferencesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAppSettingsKeyVaultReferencesSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the config reference and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='appSettingKey'>
        /// App Setting key name.
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        public static ApiKVReference GetAppSettingKeyVaultReferenceSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string appSettingKey, string slot)
        {
                return ((IWebAppsOperations)operations).GetAppSettingKeyVaultReferenceSlotAsync(resourceGroupName, name, appSettingKey, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the config reference and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='appSettingKey'>
        /// App Setting key name.
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ApiKVReference> GetAppSettingKeyVaultReferenceSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string appSettingKey, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAppSettingKeyVaultReferenceSlotWithHttpMessagesAsync(resourceGroupName, name, appSettingKey, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the config reference app settings and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ApiKVReference> GetSiteConnectionStringKeyVaultReferencesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetSiteConnectionStringKeyVaultReferencesSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the config reference app settings and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ApiKVReference>> GetSiteConnectionStringKeyVaultReferencesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetSiteConnectionStringKeyVaultReferencesSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the config reference and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='connectionStringKey'>
        /// 
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        public static ApiKVReference GetSiteConnectionStringKeyVaultReferenceSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string connectionStringKey, string slot)
        {
                return ((IWebAppsOperations)operations).GetSiteConnectionStringKeyVaultReferenceSlotAsync(resourceGroupName, name, connectionStringKey, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the config reference and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='connectionStringKey'>
        /// 
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ApiKVReference> GetSiteConnectionStringKeyVaultReferenceSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string connectionStringKey, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetSiteConnectionStringKeyVaultReferenceSlotWithHttpMessagesAsync(resourceGroupName, name, connectionStringKey, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Replaces the connection strings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the connection settings for the production slot.
        /// </param>
        public static ConnectionStringDictionary UpdateConnectionStringsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, ConnectionStringDictionary connectionStrings)
        {
                return ((IWebAppsOperations)operations).UpdateConnectionStringsSlotAsync(resourceGroupName, name, slot, connectionStrings).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Replaces the connection strings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the connection settings for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ConnectionStringDictionary> UpdateConnectionStringsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, ConnectionStringDictionary connectionStrings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateConnectionStringsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, connectionStrings, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the connection strings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the connection settings for the production slot.
        /// </param>
        public static ConnectionStringDictionary ListConnectionStringsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListConnectionStringsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the connection strings of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the connection settings for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ConnectionStringDictionary> ListConnectionStringsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListConnectionStringsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the logging configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the logging configuration for the production slot.
        /// </param>
        public static SiteLogsConfig GetDiagnosticLogsConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetDiagnosticLogsConfigurationSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the logging configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the logging configuration for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteLogsConfig> GetDiagnosticLogsConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetDiagnosticLogsConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates the logging configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the logging configuration for the production slot.
        /// </param>
        public static SiteLogsConfig UpdateDiagnosticLogsConfigSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SiteLogsConfig siteLogsConfig)
        {
                return ((IWebAppsOperations)operations).UpdateDiagnosticLogsConfigSlotAsync(resourceGroupName, name, slot, siteLogsConfig).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the logging configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the logging configuration for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteLogsConfig> UpdateDiagnosticLogsConfigSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SiteLogsConfig siteLogsConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateDiagnosticLogsConfigSlotWithHttpMessagesAsync(resourceGroupName, name, slot, siteLogsConfig, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Replaces the metadata of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the metadata for the production slot.
        /// </param>
        public static StringDictionary UpdateMetadataSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, StringDictionary metadata)
        {
                return ((IWebAppsOperations)operations).UpdateMetadataSlotAsync(resourceGroupName, name, slot, metadata).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Replaces the metadata of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the metadata for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringDictionary> UpdateMetadataSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, StringDictionary metadata, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateMetadataSlotWithHttpMessagesAsync(resourceGroupName, name, slot, metadata, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the metadata of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the metadata for the production slot.
        /// </param>
        public static StringDictionary ListMetadataSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListMetadataSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the metadata of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the metadata for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringDictionary> ListMetadataSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListMetadataSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the Git/FTP publishing credentials of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the publishing credentials for the production slot.
        /// </param>
        public static User ListPublishingCredentialsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListPublishingCredentialsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the Git/FTP publishing credentials of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the publishing credentials for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<User> ListPublishingCredentialsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListPublishingCredentialsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates the Push settings associated with web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static PushSettings UpdateSitePushSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, PushSettings pushSettings)
        {
                return ((IWebAppsOperations)operations).UpdateSitePushSettingsSlotAsync(resourceGroupName, name, slot, pushSettings).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the Push settings associated with web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PushSettings> UpdateSitePushSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, PushSettings pushSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateSitePushSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, pushSettings, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the Push settings associated with web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static PushSettings ListSitePushSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListSitePushSettingsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the Push settings associated with web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PushSettings> ListSitePushSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSitePushSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the configuration of an app, such as platform version
        /// and bitness, default documents, virtual applications, Always On, etc.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// return configuration for the production slot.
        /// </param>
        public static SiteConfigResource GetConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetConfigurationSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the configuration of an app, such as platform version
        /// and bitness, default documents, virtual applications, Always On, etc.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// return configuration for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteConfigResource> GetConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates the configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update configuration for the production slot.
        /// </param>
        public static SiteConfigResource CreateOrUpdateConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SiteConfigResource siteConfig)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateConfigurationSlotAsync(resourceGroupName, name, slot, siteConfig).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update configuration for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteConfigResource> CreateOrUpdateConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SiteConfigResource siteConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, siteConfig, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates the configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update configuration for the production slot.
        /// </param>
        public static SiteConfigResource UpdateConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SiteConfigResource siteConfig)
        {
                return ((IWebAppsOperations)operations).UpdateConfigurationSlotAsync(resourceGroupName, name, slot, siteConfig).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update configuration for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteConfigResource> UpdateConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SiteConfigResource siteConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, siteConfig, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a list of web app configuration snapshots identifiers.
        /// Each element of the list contains a timestamp and the ID of the snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// return configuration for the production slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SiteConfigurationSnapshotInfo> ListConfigurationSnapshotInfoSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListConfigurationSnapshotInfoSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a list of web app configuration snapshots identifiers.
        /// Each element of the list contains a timestamp and the ID of the snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// return configuration for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SiteConfigurationSnapshotInfo>> ListConfigurationSnapshotInfoSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListConfigurationSnapshotInfoSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a snapshot of the configuration of an app at a
        /// previous point in time.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='snapshotId'>
        /// The ID of the snapshot to read.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// return configuration for the production slot.
        /// </param>
        public static SiteConfigResource GetConfigurationSnapshotSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId, string slot)
        {
                return ((IWebAppsOperations)operations).GetConfigurationSnapshotSlotAsync(resourceGroupName, name, snapshotId, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a snapshot of the configuration of an app at a
        /// previous point in time.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='snapshotId'>
        /// The ID of the snapshot to read.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// return configuration for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteConfigResource> GetConfigurationSnapshotSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetConfigurationSnapshotSlotWithHttpMessagesAsync(resourceGroupName, name, snapshotId, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Reverts the configuration of an app to a previous snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='snapshotId'>
        /// The ID of the snapshot to read.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// return configuration for the production slot.
        /// </param>
        public static void RecoverSiteConfigurationSnapshotSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId, string slot)
        {
                ((IWebAppsOperations)operations).RecoverSiteConfigurationSnapshotSlotAsync(resourceGroupName, name, snapshotId, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Reverts the configuration of an app to a previous snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='snapshotId'>
        /// The ID of the snapshot to read.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// return configuration for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RecoverSiteConfigurationSnapshotSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RecoverSiteConfigurationSnapshotSlotWithHttpMessagesAsync(resourceGroupName, name, snapshotId, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Gets the last lines of docker logs for the given site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static System.IO.Stream GetWebSiteContainerLogsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetWebSiteContainerLogsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the last lines of docker logs for the given site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.IO.Stream> GetWebSiteContainerLogsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var _result = await operations.GetWebSiteContainerLogsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
            _result.Request.Dispose();
            return _result.Body;
        }
        /// <summary>
        /// Description for Gets the ZIP archived docker log files for the given site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static System.IO.Stream GetContainerLogsZipSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetContainerLogsZipSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the ZIP archived docker log files for the given site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.IO.Stream> GetContainerLogsZipSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var _result = await operations.GetContainerLogsZipSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
            _result.Request.Dispose();
            return _result.Body;
        }
        /// <summary>
        /// Description for List continuous web jobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API deletes a
        /// deployment for the production slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ContinuousWebJob> ListContinuousWebJobsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListContinuousWebJobsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List continuous web jobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API deletes a
        /// deployment for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ContinuousWebJob>> ListContinuousWebJobsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListContinuousWebJobsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a continuous web job by its ID for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API deletes a
        /// deployment for the production slot.
        /// </param>
        public static ContinuousWebJob GetContinuousWebJobSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot)
        {
                return ((IWebAppsOperations)operations).GetContinuousWebJobSlotAsync(resourceGroupName, name, webJobName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a continuous web job by its ID for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API deletes a
        /// deployment for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ContinuousWebJob> GetContinuousWebJobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetContinuousWebJobSlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete a continuous web job by its ID for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API deletes a
        /// deployment for the production slot.
        /// </param>
        public static void DeleteContinuousWebJobSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot)
        {
                ((IWebAppsOperations)operations).DeleteContinuousWebJobSlotAsync(resourceGroupName, name, webJobName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete a continuous web job by its ID for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API deletes a
        /// deployment for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteContinuousWebJobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteContinuousWebJobSlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Start a continuous web job for an app, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API deletes a
        /// deployment for the production slot.
        /// </param>
        public static void StartContinuousWebJobSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot)
        {
                ((IWebAppsOperations)operations).StartContinuousWebJobSlotAsync(resourceGroupName, name, webJobName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Start a continuous web job for an app, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API deletes a
        /// deployment for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task StartContinuousWebJobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.StartContinuousWebJobSlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Stop a continuous web job for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API deletes a
        /// deployment for the production slot.
        /// </param>
        public static void StopContinuousWebJobSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot)
        {
                ((IWebAppsOperations)operations).StopContinuousWebJobSlotAsync(resourceGroupName, name, webJobName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Stop a continuous web job for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API deletes a
        /// deployment for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task StopContinuousWebJobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.StopContinuousWebJobSlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for List deployments for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Deployment> ListDeploymentsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListDeploymentsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List deployments for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Deployment>> ListDeploymentsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListDeploymentsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get a deployment by its ID for an app, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='id'>
        /// Deployment ID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API gets a
        /// deployment for the production slot.
        /// </param>
        public static Deployment GetDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot)
        {
                return ((IWebAppsOperations)operations).GetDeploymentSlotAsync(resourceGroupName, name, id, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get a deployment by its ID for an app, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='id'>
        /// Deployment ID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API gets a
        /// deployment for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Deployment> GetDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Create a deployment for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='id'>
        /// ID of an existing deployment.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API creates a
        /// deployment for the production slot.
        /// </param>
        public static Deployment CreateDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, Deployment deployment)
        {
                return ((IWebAppsOperations)operations).CreateDeploymentSlotAsync(resourceGroupName, name, id, slot, deployment).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Create a deployment for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='id'>
        /// ID of an existing deployment.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API creates a
        /// deployment for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Deployment> CreateDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, Deployment deployment, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, deployment, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete a deployment by its ID for an app, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='id'>
        /// Deployment ID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API deletes a
        /// deployment for the production slot.
        /// </param>
        public static void DeleteDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot)
        {
                ((IWebAppsOperations)operations).DeleteDeploymentSlotAsync(resourceGroupName, name, id, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete a deployment by its ID for an app, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='id'>
        /// Deployment ID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API deletes a
        /// deployment for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for List deployment log for specific deployment for an app, or
        /// a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='id'>
        /// The ID of a specific deployment. This is the value of the name property in
        /// the JSON response from &#34;GET /api/sites/{siteName}/deployments&#34;.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        public static Deployment ListDeploymentLogSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot)
        {
                return ((IWebAppsOperations)operations).ListDeploymentLogSlotAsync(resourceGroupName, name, id, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List deployment log for specific deployment for an app, or
        /// a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='id'>
        /// The ID of a specific deployment. This is the value of the name property in
        /// the JSON response from &#34;GET /api/sites/{siteName}/deployments&#34;.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Deployment> ListDeploymentLogSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListDeploymentLogSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Discovers an existing app backup that can be restored from
        /// a blob in Azure storage. Use this to get information about the databases
        /// stored in a backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// perform discovery for the production slot.
        /// </param>
        public static RestoreRequest DiscoverBackupSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, RestoreRequest request)
        {
                return ((IWebAppsOperations)operations).DiscoverBackupSlotAsync(resourceGroupName, name, slot, request).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Discovers an existing app backup that can be restored from
        /// a blob in Azure storage. Use this to get information about the databases
        /// stored in a backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// perform discovery for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RestoreRequest> DiscoverBackupSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, RestoreRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DiscoverBackupSlotWithHttpMessagesAsync(resourceGroupName, name, slot, request, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Lists ownership identifiers for domain associated with web
        /// app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the binding for the production slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Identifier> ListDomainOwnershipIdentifiersSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListDomainOwnershipIdentifiersSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Lists ownership identifiers for domain associated with web
        /// app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the binding for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Identifier>> ListDomainOwnershipIdentifiersSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListDomainOwnershipIdentifiersSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get domain ownership identifier for web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='domainOwnershipIdentifierName'>
        /// Name of domain ownership identifier.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the binding for the production slot.
        /// </param>
        public static Identifier GetDomainOwnershipIdentifierSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot)
        {
                return ((IWebAppsOperations)operations).GetDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get domain ownership identifier for web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='domainOwnershipIdentifierName'>
        /// Name of domain ownership identifier.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the binding for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Identifier> GetDomainOwnershipIdentifierSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetDomainOwnershipIdentifierSlotWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates a domain ownership identifier for web app, or
        /// updates an existing ownership identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='domainOwnershipIdentifierName'>
        /// Name of domain ownership identifier.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the binding for the production slot.
        /// </param>
        public static Identifier CreateOrUpdateDomainOwnershipIdentifierSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot, Identifier domainOwnershipIdentifier)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot, domainOwnershipIdentifier).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a domain ownership identifier for web app, or
        /// updates an existing ownership identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='domainOwnershipIdentifierName'>
        /// Name of domain ownership identifier.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the binding for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Identifier> CreateOrUpdateDomainOwnershipIdentifierSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot, Identifier domainOwnershipIdentifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateDomainOwnershipIdentifierSlotWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot, domainOwnershipIdentifier, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a domain ownership identifier for a web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='domainOwnershipIdentifierName'>
        /// Name of domain ownership identifier.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the binding for the production slot.
        /// </param>
        public static void DeleteDomainOwnershipIdentifierSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot)
        {
                ((IWebAppsOperations)operations).DeleteDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a domain ownership identifier for a web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='domainOwnershipIdentifierName'>
        /// Name of domain ownership identifier.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the binding for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteDomainOwnershipIdentifierSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteDomainOwnershipIdentifierSlotWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates a domain ownership identifier for web app, or
        /// updates an existing ownership identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='domainOwnershipIdentifierName'>
        /// Name of domain ownership identifier.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the binding for the production slot.
        /// </param>
        public static Identifier UpdateDomainOwnershipIdentifierSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot, Identifier domainOwnershipIdentifier)
        {
                return ((IWebAppsOperations)operations).UpdateDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot, domainOwnershipIdentifier).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a domain ownership identifier for web app, or
        /// updates an existing ownership identifier.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='domainOwnershipIdentifierName'>
        /// Name of domain ownership identifier.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the binding for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Identifier> UpdateDomainOwnershipIdentifierSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot, Identifier domainOwnershipIdentifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateDomainOwnershipIdentifierSlotWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot, domainOwnershipIdentifier, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the status of the last MSDeploy operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static MSDeployStatus GetMSDeployStatusSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetMSDeployStatusSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the status of the last MSDeploy operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MSDeployStatus> GetMSDeployStatusSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetMSDeployStatusSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Invoke the MSDeploy web app extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static MSDeployStatus CreateMSDeployOperationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, MSDeploy MSDeploy)
        {
                return ((IWebAppsOperations)operations).CreateMSDeployOperationSlotAsync(resourceGroupName, name, slot, MSDeploy).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Invoke the MSDeploy web app extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MSDeployStatus> CreateMSDeployOperationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, MSDeploy MSDeploy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateMSDeployOperationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, MSDeploy, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the MSDeploy Log for the last MSDeploy operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static MSDeployLog GetMSDeployLogSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetMSDeployLogSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the MSDeploy Log for the last MSDeploy operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MSDeployLog> GetMSDeployLogSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetMSDeployLogSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List the functions for a web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<FunctionEnvelope> ListInstanceFunctionsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListInstanceFunctionsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List the functions for a web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<FunctionEnvelope>> ListInstanceFunctionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListInstanceFunctionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Fetch a short lived token that can be exchanged for a
        /// master key.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static string GetFunctionsAdminTokenSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetFunctionsAdminTokenSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Fetch a short lived token that can be exchanged for a
        /// master key.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<string> GetFunctionsAdminTokenSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetFunctionsAdminTokenSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get function information by its ID for web site, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        public static FunctionEnvelope GetInstanceFunctionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string slot)
        {
                return ((IWebAppsOperations)operations).GetInstanceFunctionSlotAsync(resourceGroupName, name, functionName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get function information by its ID for web site, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FunctionEnvelope> GetInstanceFunctionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetInstanceFunctionSlotWithHttpMessagesAsync(resourceGroupName, name, functionName, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Create function for web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        public static FunctionEnvelope CreateInstanceFunctionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string slot, FunctionEnvelope functionEnvelope)
        {
                return ((IWebAppsOperations)operations).CreateInstanceFunctionSlotAsync(resourceGroupName, name, functionName, slot, functionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Create function for web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FunctionEnvelope> CreateInstanceFunctionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string slot, FunctionEnvelope functionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateInstanceFunctionSlotWithHttpMessagesAsync(resourceGroupName, name, functionName, slot, functionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete a function for web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        public static void DeleteInstanceFunctionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string slot)
        {
                ((IWebAppsOperations)operations).DeleteInstanceFunctionSlotAsync(resourceGroupName, name, functionName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete a function for web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteInstanceFunctionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteInstanceFunctionSlotWithHttpMessagesAsync(resourceGroupName, name, functionName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Add or update a function secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// The name of the function.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        public static KeyInfo CreateOrUpdateFunctionSecretSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string keyName, string slot, KeyInfo key)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateFunctionSecretSlotAsync(resourceGroupName, name, functionName, keyName, slot, key).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Add or update a function secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// The name of the function.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<KeyInfo> CreateOrUpdateFunctionSecretSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string keyName, string slot, KeyInfo key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateFunctionSecretSlotWithHttpMessagesAsync(resourceGroupName, name, functionName, keyName, slot, key, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete a function secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// The name of the function.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        public static void DeleteFunctionSecretSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string keyName, string slot)
        {
                ((IWebAppsOperations)operations).DeleteFunctionSecretSlotAsync(resourceGroupName, name, functionName, keyName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete a function secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// The name of the function.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteFunctionSecretSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string keyName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteFunctionSecretSlotWithHttpMessagesAsync(resourceGroupName, name, functionName, keyName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Get function keys for a function in a web site, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        public static StringDictionary ListFunctionKeysSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string slot)
        {
                return ((IWebAppsOperations)operations).ListFunctionKeysSlotAsync(resourceGroupName, name, functionName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get function keys for a function in a web site, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringDictionary> ListFunctionKeysSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListFunctionKeysSlotWithHttpMessagesAsync(resourceGroupName, name, functionName, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get function secrets for a function in a web site, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        public static FunctionSecrets ListFunctionSecretsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string slot)
        {
                return ((IWebAppsOperations)operations).ListFunctionSecretsSlotAsync(resourceGroupName, name, functionName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get function secrets for a function in a web site, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FunctionSecrets> ListFunctionSecretsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListFunctionSecretsSlotWithHttpMessagesAsync(resourceGroupName, name, functionName, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get host secrets for a function app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        public static HostKeys ListHostKeysSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListHostKeysSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get host secrets for a function app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HostKeys> ListHostKeysSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListHostKeysSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for This is to allow calling via powershell and ARM template.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        public static void ListSyncStatusSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                ((IWebAppsOperations)operations).ListSyncStatusSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for This is to allow calling via powershell and ARM template.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ListSyncStatusSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.ListSyncStatusSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Syncs function trigger metadata to the management database
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        public static void SyncFunctionsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                ((IWebAppsOperations)operations).SyncFunctionsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Syncs function trigger metadata to the management database
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task SyncFunctionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.SyncFunctionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Add or update a host level secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='keyType'>
        /// The type of host key.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        public static KeyInfo CreateOrUpdateHostSecretSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string keyType, string keyName, string slot, KeyInfo key)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateHostSecretSlotAsync(resourceGroupName, name, keyType, keyName, slot, key).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Add or update a host level secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='keyType'>
        /// The type of host key.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<KeyInfo> CreateOrUpdateHostSecretSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string keyType, string keyName, string slot, KeyInfo key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateHostSecretSlotWithHttpMessagesAsync(resourceGroupName, name, keyType, keyName, slot, key, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete a host level secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='keyType'>
        /// The type of host key.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        public static void DeleteHostSecretSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string keyType, string keyName, string slot)
        {
                ((IWebAppsOperations)operations).DeleteHostSecretSlotAsync(resourceGroupName, name, keyType, keyName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete a host level secret.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='keyType'>
        /// The type of host key.
        /// </param>
        /// <param name='keyName'>
        /// The name of the key.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteHostSecretSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string keyType, string keyName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteHostSecretSlotWithHttpMessagesAsync(resourceGroupName, name, keyType, keyName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Get hostname bindings for an app or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API gets
        /// hostname bindings for the production slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<HostNameBinding> ListHostNameBindingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListHostNameBindingsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get hostname bindings for an app or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API gets
        /// hostname bindings for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<HostNameBinding>> ListHostNameBindingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListHostNameBindingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the named hostname binding for an app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API the named
        /// binding for the production slot.
        /// </param>
        /// <param name='hostName'>
        /// Hostname in the hostname binding.
        /// </param>
        public static HostNameBinding GetHostNameBindingSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName)
        {
                return ((IWebAppsOperations)operations).GetHostNameBindingSlotAsync(resourceGroupName, name, slot, hostName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the named hostname binding for an app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API the named
        /// binding for the production slot.
        /// </param>
        /// <param name='hostName'>
        /// Hostname in the hostname binding.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HostNameBinding> GetHostNameBindingSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetHostNameBindingSlotWithHttpMessagesAsync(resourceGroupName, name, slot, hostName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates a hostname binding for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='hostName'>
        /// Hostname in the hostname binding.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// create a binding for the production slot.
        /// </param>
        public static HostNameBinding CreateOrUpdateHostNameBindingSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, string slot, HostNameBinding hostNameBinding)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateHostNameBindingSlotAsync(resourceGroupName, name, hostName, slot, hostNameBinding).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a hostname binding for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='hostName'>
        /// Hostname in the hostname binding.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// create a binding for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HostNameBinding> CreateOrUpdateHostNameBindingSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, string slot, HostNameBinding hostNameBinding, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateHostNameBindingSlotWithHttpMessagesAsync(resourceGroupName, name, hostName, slot, hostNameBinding, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a hostname binding for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the binding for the production slot.
        /// </param>
        /// <param name='hostName'>
        /// Hostname in the hostname binding.
        /// </param>
        public static void DeleteHostNameBindingSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName)
        {
                ((IWebAppsOperations)operations).DeleteHostNameBindingSlotAsync(resourceGroupName, name, slot, hostName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a hostname binding for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the binding for the production slot.
        /// </param>
        /// <param name='hostName'>
        /// Hostname in the hostname binding.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteHostNameBindingSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteHostNameBindingSlotWithHttpMessagesAsync(resourceGroupName, name, slot, hostName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Retrieves a specific Service Bus Hybrid Connection used by
        /// this Web App.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace for this hybrid connection.
        /// </param>
        /// <param name='relayName'>
        /// The relay name for this hybrid connection.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for the web app.
        /// </param>
        public static HybridConnection GetHybridConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot)
        {
                return ((IWebAppsOperations)operations).GetHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Retrieves a specific Service Bus Hybrid Connection used by
        /// this Web App.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace for this hybrid connection.
        /// </param>
        /// <param name='relayName'>
        /// The relay name for this hybrid connection.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for the web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HybridConnection> GetHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates a new Hybrid Connection using a Service Bus relay.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace for this hybrid connection.
        /// </param>
        /// <param name='relayName'>
        /// The relay name for this hybrid connection.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for the web app.
        /// </param>
        public static HybridConnection CreateOrUpdateHybridConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot, HybridConnection connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, slot, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a new Hybrid Connection using a Service Bus relay.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace for this hybrid connection.
        /// </param>
        /// <param name='relayName'>
        /// The relay name for this hybrid connection.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for the web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HybridConnection> CreateOrUpdateHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot, HybridConnection connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, slot, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Removes a Hybrid Connection from this site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace for this hybrid connection.
        /// </param>
        /// <param name='relayName'>
        /// The relay name for this hybrid connection.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for the web app.
        /// </param>
        public static void DeleteHybridConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot)
        {
                ((IWebAppsOperations)operations).DeleteHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Removes a Hybrid Connection from this site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace for this hybrid connection.
        /// </param>
        /// <param name='relayName'>
        /// The relay name for this hybrid connection.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for the web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates a new Hybrid Connection using a Service Bus relay.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace for this hybrid connection.
        /// </param>
        /// <param name='relayName'>
        /// The relay name for this hybrid connection.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for the web app.
        /// </param>
        public static HybridConnection UpdateHybridConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot, HybridConnection connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).UpdateHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, slot, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a new Hybrid Connection using a Service Bus relay.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace for this hybrid connection.
        /// </param>
        /// <param name='relayName'>
        /// The relay name for this hybrid connection.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for the web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HybridConnection> UpdateHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot, HybridConnection connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, slot, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Retrieves all Service Bus Hybrid Connections used by this
        /// Web App.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for the web app.
        /// </param>
        public static HybridConnection ListHybridConnectionsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListHybridConnectionsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Retrieves all Service Bus Hybrid Connections used by this
        /// Web App.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for the web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HybridConnection> ListHybridConnectionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListHybridConnectionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets hybrid connections configured for an app (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// hybrid connections for the production slot.
        /// </param>
        public static RelayServiceConnectionEntity ListRelayServiceConnectionsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListRelayServiceConnectionsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets hybrid connections configured for an app (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// hybrid connections for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RelayServiceConnectionEntity> ListRelayServiceConnectionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListRelayServiceConnectionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a hybrid connection configuration by its name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='entityName'>
        /// Name of the hybrid connection.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get a
        /// hybrid connection for the production slot.
        /// </param>
        public static RelayServiceConnectionEntity GetRelayServiceConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot)
        {
                return ((IWebAppsOperations)operations).GetRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a hybrid connection configuration by its name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='entityName'>
        /// Name of the hybrid connection.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get a
        /// hybrid connection for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RelayServiceConnectionEntity> GetRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates a new hybrid connection configuration (PUT), or
        /// updates an existing one (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='entityName'>
        /// Name of the hybrid connection configuration.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// create or update a hybrid connection for the production slot.
        /// </param>
        public static RelayServiceConnectionEntity CreateOrUpdateRelayServiceConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot, RelayServiceConnectionEntity connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a new hybrid connection configuration (PUT), or
        /// updates an existing one (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='entityName'>
        /// Name of the hybrid connection configuration.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// create or update a hybrid connection for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RelayServiceConnectionEntity> CreateOrUpdateRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot, RelayServiceConnectionEntity connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, slot, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a relay service connection by its name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='entityName'>
        /// Name of the hybrid connection configuration.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete a hybrid connection for the production slot.
        /// </param>
        public static void DeleteRelayServiceConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot)
        {
                ((IWebAppsOperations)operations).DeleteRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a relay service connection by its name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='entityName'>
        /// Name of the hybrid connection configuration.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete a hybrid connection for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates a new hybrid connection configuration (PUT), or
        /// updates an existing one (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='entityName'>
        /// Name of the hybrid connection configuration.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// create or update a hybrid connection for the production slot.
        /// </param>
        public static RelayServiceConnectionEntity UpdateRelayServiceConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot, RelayServiceConnectionEntity connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).UpdateRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a new hybrid connection configuration (PUT), or
        /// updates an existing one (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='entityName'>
        /// Name of the hybrid connection configuration.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// create or update a hybrid connection for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RelayServiceConnectionEntity> UpdateRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot, RelayServiceConnectionEntity connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, slot, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets all scale-out instances of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API gets the
        /// production slot instances.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WebSiteInstanceStatus> ListInstanceIdentifiersSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListInstanceIdentifiersSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets all scale-out instances of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API gets the
        /// production slot instances.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WebSiteInstanceStatus>> ListInstanceIdentifiersSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListInstanceIdentifiersSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets all scale-out instances of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='instanceId'>
        /// 
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API gets the
        /// production slot instances.
        /// </param>
        public static WebSiteInstanceStatus GetInstanceInfoSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, string slot)
        {
                return ((IWebAppsOperations)operations).GetInstanceInfoSlotAsync(resourceGroupName, name, instanceId, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets all scale-out instances of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='instanceId'>
        /// 
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API gets the
        /// production slot instances.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WebSiteInstanceStatus> GetInstanceInfoSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetInstanceInfoSlotWithHttpMessagesAsync(resourceGroupName, name, instanceId, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the status of the last MSDeploy operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of web app instance.
        /// </param>
        public static MSDeployStatus GetInstanceMsDeployStatusSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId)
        {
                return ((IWebAppsOperations)operations).GetInstanceMsDeployStatusSlotAsync(resourceGroupName, name, slot, instanceId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the status of the last MSDeploy operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of web app instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MSDeployStatus> GetInstanceMsDeployStatusSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetInstanceMsDeployStatusSlotWithHttpMessagesAsync(resourceGroupName, name, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Invoke the MSDeploy web app extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of web app instance.
        /// </param>
        public static MSDeployStatus CreateInstanceMSDeployOperationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId, MSDeploy MSDeploy)
        {
                return ((IWebAppsOperations)operations).CreateInstanceMSDeployOperationSlotAsync(resourceGroupName, name, slot, instanceId, MSDeploy).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Invoke the MSDeploy web app extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of web app instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MSDeployStatus> CreateInstanceMSDeployOperationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId, MSDeploy MSDeploy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateInstanceMSDeployOperationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, instanceId, MSDeploy, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the MSDeploy Log for the last MSDeploy operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of web app instance.
        /// </param>
        public static MSDeployLog GetInstanceMSDeployLogSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId)
        {
                return ((IWebAppsOperations)operations).GetInstanceMSDeployLogSlotAsync(resourceGroupName, name, slot, instanceId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the MSDeploy Log for the last MSDeploy operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of web app instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MSDeployLog> GetInstanceMSDeployLogSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetInstanceMSDeployLogSlotWithHttpMessagesAsync(resourceGroupName, name, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get list of processes for a web site, or a deployment slot,
        /// or for a specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessInfo> ListInstanceProcessesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId)
        {
                return ((IWebAppsOperations)operations).ListInstanceProcessesSlotAsync(resourceGroupName, name, slot, instanceId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get list of processes for a web site, or a deployment slot,
        /// or for a specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessInfo>> ListInstanceProcessesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListInstanceProcessesSlotWithHttpMessagesAsync(resourceGroupName, name, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get process information by its ID for a specific scaled-out
        /// instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        public static ProcessInfo GetInstanceProcessSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, string instanceId)
        {
                return ((IWebAppsOperations)operations).GetInstanceProcessSlotAsync(resourceGroupName, name, processId, slot, instanceId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get process information by its ID for a specific scaled-out
        /// instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProcessInfo> GetInstanceProcessSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetInstanceProcessSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Terminate a process by its ID for a web site, or a
        /// deployment slot, or specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        public static void DeleteInstanceProcessSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, string instanceId)
        {
                ((IWebAppsOperations)operations).DeleteInstanceProcessSlotAsync(resourceGroupName, name, processId, slot, instanceId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Terminate a process by its ID for a web site, or a
        /// deployment slot, or specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteInstanceProcessSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteInstanceProcessSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, instanceId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Get a memory dump of a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        public static System.IO.Stream GetInstanceProcessDumpSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, string instanceId)
        {
                return ((IWebAppsOperations)operations).GetInstanceProcessDumpSlotAsync(resourceGroupName, name, processId, slot, instanceId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get a memory dump of a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.IO.Stream> GetInstanceProcessDumpSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var _result = await operations.GetInstanceProcessDumpSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, instanceId, null, cancellationToken).ConfigureAwait(false);
            _result.Request.Dispose();
            return _result.Body;
        }
        /// <summary>
        /// Description for List module information for a process by its ID for a
        /// specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessModuleInfo> ListInstanceProcessModulesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, string instanceId)
        {
                return ((IWebAppsOperations)operations).ListInstanceProcessModulesSlotAsync(resourceGroupName, name, processId, slot, instanceId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List module information for a process by its ID for a
        /// specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessModuleInfo>> ListInstanceProcessModulesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListInstanceProcessModulesSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get process information by its ID for a specific scaled-out
        /// instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='baseAddress'>
        /// Module base address.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        public static ProcessModuleInfo GetInstanceProcessModuleSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string baseAddress, string slot, string instanceId)
        {
                return ((IWebAppsOperations)operations).GetInstanceProcessModuleSlotAsync(resourceGroupName, name, processId, baseAddress, slot, instanceId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get process information by its ID for a specific scaled-out
        /// instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='baseAddress'>
        /// Module base address.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProcessModuleInfo> GetInstanceProcessModuleSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string baseAddress, string slot, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetInstanceProcessModuleSlotWithHttpMessagesAsync(resourceGroupName, name, processId, baseAddress, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List the threads in a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessThreadInfo> ListInstanceProcessThreadsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, string instanceId)
        {
                return ((IWebAppsOperations)operations).ListInstanceProcessThreadsSlotAsync(resourceGroupName, name, processId, slot, instanceId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List the threads in a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of a specific scaled-out instance. This is the value of the name
        /// property in the JSON response from &#34;GET api/sites/{siteName}/instances&#34;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessThreadInfo>> ListInstanceProcessThreadsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListInstanceProcessThreadsSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Shows whether an app can be cloned to another resource
        /// group or subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. By default, this API returns information on
        /// the production slot.
        /// </param>
        public static SiteCloneability IsCloneableSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).IsCloneableSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Shows whether an app can be cloned to another resource
        /// group or subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. By default, this API returns information on
        /// the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteCloneability> IsCloneableSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.IsCloneableSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets existing backups of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// backups of the production slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BackupItem> ListSiteBackupsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListSiteBackupsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets existing backups of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// backups of the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BackupItem>> ListSiteBackupsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSiteBackupsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for This is to allow calling via powershell and ARM template.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        public static FunctionSecrets ListSyncFunctionTriggersSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListSyncFunctionTriggersSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for This is to allow calling via powershell and ARM template.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FunctionSecrets> ListSyncFunctionTriggersSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSyncFunctionTriggersSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Returns the status of MySql in app migration, if one is
        /// active, and whether or not MySql in app is enabled
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        public static MigrateMySqlStatus GetMigrateMySqlStatusSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetMigrateMySqlStatusSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Returns the status of MySql in app migration, if one is
        /// active, and whether or not MySql in app is enabled
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MigrateMySqlStatus> GetMigrateMySqlStatusSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetMigrateMySqlStatusSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a Swift Virtual Network connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get a
        /// gateway for the production slot&#39;s Virtual Network.
        /// </param>
        public static SwiftVirtualNetwork GetSwiftVirtualNetworkConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetSwiftVirtualNetworkConnectionSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a Swift Virtual Network connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get a
        /// gateway for the production slot&#39;s Virtual Network.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SwiftVirtualNetwork> GetSwiftVirtualNetworkConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetSwiftVirtualNetworkConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Integrates this Web App with a Virtual Network. This
        /// requires that 1) &#34;swiftSupported&#34; is true when doing a GET against this
        /// resource, and 2) that the target Subnet has already been delegated, and is
        /// not
        /// in use by another App Service Plan other than the one this App is in.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will add
        /// or update connections for the production slot.
        /// </param>
        public static SwiftVirtualNetwork CreateOrUpdateSwiftVirtualNetworkConnectionWithCheckSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SwiftVirtualNetwork connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateSwiftVirtualNetworkConnectionWithCheckSlotAsync(resourceGroupName, name, slot, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Integrates this Web App with a Virtual Network. This
        /// requires that 1) &#34;swiftSupported&#34; is true when doing a GET against this
        /// resource, and 2) that the target Subnet has already been delegated, and is
        /// not
        /// in use by another App Service Plan other than the one this App is in.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will add
        /// or update connections for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SwiftVirtualNetwork> CreateOrUpdateSwiftVirtualNetworkConnectionWithCheckSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SwiftVirtualNetwork connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateSwiftVirtualNetworkConnectionWithCheckSlotWithHttpMessagesAsync(resourceGroupName, name, slot, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a Swift Virtual Network connection from an app (or
        /// deployment slot).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the connection for the production slot.
        /// </param>
        public static void DeleteSwiftVirtualNetworkSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                ((IWebAppsOperations)operations).DeleteSwiftVirtualNetworkSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a Swift Virtual Network connection from an app (or
        /// deployment slot).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the connection for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteSwiftVirtualNetworkSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteSwiftVirtualNetworkSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Integrates this Web App with a Virtual Network. This
        /// requires that 1) &#34;swiftSupported&#34; is true when doing a GET against this
        /// resource, and 2) that the target Subnet has already been delegated, and is
        /// not
        /// in use by another App Service Plan other than the one this App is in.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will add
        /// or update connections for the production slot.
        /// </param>
        public static SwiftVirtualNetwork UpdateSwiftVirtualNetworkConnectionWithCheckSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SwiftVirtualNetwork connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).UpdateSwiftVirtualNetworkConnectionWithCheckSlotAsync(resourceGroupName, name, slot, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Integrates this Web App with a Virtual Network. This
        /// requires that 1) &#34;swiftSupported&#34; is true when doing a GET against this
        /// resource, and 2) that the target Subnet has already been delegated, and is
        /// not
        /// in use by another App Service Plan other than the one this App is in.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will add
        /// or update connections for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SwiftVirtualNetwork> UpdateSwiftVirtualNetworkConnectionWithCheckSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SwiftVirtualNetwork connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateSwiftVirtualNetworkConnectionWithCheckSlotWithHttpMessagesAsync(resourceGroupName, name, slot, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets all network features used by the app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='view'>
        /// The type of view. Only &#34;summary&#34; is supported at this time.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// network features for the production slot.
        /// </param>
        public static NetworkFeatures ListNetworkFeaturesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string view, string slot)
        {
                return ((IWebAppsOperations)operations).ListNetworkFeaturesSlotAsync(resourceGroupName, name, view, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets all network features used by the app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='view'>
        /// The type of view. Only &#34;summary&#34; is supported at this time.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// network features for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<NetworkFeatures> ListNetworkFeaturesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string view, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNetworkFeaturesSlotWithHttpMessagesAsync(resourceGroupName, name, view, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='operationId'>
        /// GUID of the operation.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// an operation for the production slot.
        /// </param>
        public static object GetNetworkTraceOperationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, string slot)
        {
                return ((IWebAppsOperations)operations).GetNetworkTraceOperationSlotAsync(resourceGroupName, name, operationId, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='operationId'>
        /// GUID of the operation.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// an operation for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> GetNetworkTraceOperationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetNetworkTraceOperationSlotWithHttpMessagesAsync(resourceGroupName, name, operationId, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Start capturing network packets for the site (To be
        /// deprecated).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for this web app.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        public static string StartWebSiteNetworkTraceSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string))
        {
                return ((IWebAppsOperations)operations).StartWebSiteNetworkTraceSlotAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Start capturing network packets for the site (To be
        /// deprecated).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for this web app.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<string> StartWebSiteNetworkTraceSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.StartWebSiteNetworkTraceSlotWithHttpMessagesAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for this web app.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        public static object StartWebSiteNetworkTraceOperationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string))
        {
                return ((IWebAppsOperations)operations).StartWebSiteNetworkTraceOperationSlotAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for this web app.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> StartWebSiteNetworkTraceOperationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.StartWebSiteNetworkTraceOperationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Stop ongoing capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for this web app.
        /// </param>
        public static void StopWebSiteNetworkTraceSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                ((IWebAppsOperations)operations).StopWebSiteNetworkTraceSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Stop ongoing capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for this web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task StopWebSiteNetworkTraceSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.StopWebSiteNetworkTraceSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='operationId'>
        /// GUID of the operation.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// an operation for the production slot.
        /// </param>
        public static System.Collections.Generic.IList<NetworkTrace> GetNetworkTracesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, string slot)
        {
                return ((IWebAppsOperations)operations).GetNetworkTracesSlotAsync(resourceGroupName, name, operationId, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='operationId'>
        /// GUID of the operation.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// an operation for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<NetworkTrace>> GetNetworkTracesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetNetworkTracesSlotWithHttpMessagesAsync(resourceGroupName, name, operationId, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='operationId'>
        /// GUID of the operation.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// an operation for the production slot.
        /// </param>
        public static object GetNetworkTraceOperationSlotV2(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, string slot)
        {
                return ((IWebAppsOperations)operations).GetNetworkTraceOperationSlotV2Async(resourceGroupName, name, operationId, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='operationId'>
        /// GUID of the operation.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// an operation for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> GetNetworkTraceOperationSlotV2Async(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetNetworkTraceOperationSlotV2WithHttpMessagesAsync(resourceGroupName, name, operationId, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='operationId'>
        /// GUID of the operation.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// an operation for the production slot.
        /// </param>
        public static System.Collections.Generic.IList<NetworkTrace> GetNetworkTracesSlotV2(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, string slot)
        {
                return ((IWebAppsOperations)operations).GetNetworkTracesSlotV2Async(resourceGroupName, name, operationId, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a named operation for a network trace capturing (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='operationId'>
        /// GUID of the operation.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// an operation for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<NetworkTrace>> GetNetworkTracesSlotV2Async(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetNetworkTracesSlotV2WithHttpMessagesAsync(resourceGroupName, name, operationId, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Generates a new publishing password for an app (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API generate a
        /// new publishing password for the production slot.
        /// </param>
        public static void GenerateNewSitePublishingPasswordSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                ((IWebAppsOperations)operations).GenerateNewSitePublishingPasswordSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Generates a new publishing password for an app (or
        /// deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API generate a
        /// new publishing password for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task GenerateNewSitePublishingPasswordSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.GenerateNewSitePublishingPasswordSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Gets perfmon counters for web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='filter'>
        /// Return only usages/metrics specified in the filter. Filter conforms to
        /// odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and
        /// endTime eq 2014-12-31T23:59:59Z and timeGrain eq
        /// duration&#39;[Hour|Minute|Day]&#39;.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PerfMonResponse> ListPerfMonCountersSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string filter = default(string))
        {
                return ((IWebAppsOperations)operations).ListPerfMonCountersSlotAsync(resourceGroupName, name, slot, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets perfmon counters for web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='filter'>
        /// Return only usages/metrics specified in the filter. Filter conforms to
        /// odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and
        /// endTime eq 2014-12-31T23:59:59Z and timeGrain eq
        /// duration&#39;[Hour|Minute|Day]&#39;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PerfMonResponse>> ListPerfMonCountersSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListPerfMonCountersSlotWithHttpMessagesAsync(resourceGroupName, name, slot, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets web app&#39;s event logs.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static SitePhpErrorLogFlag GetSitePhpErrorLogFlagSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetSitePhpErrorLogFlagSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets web app&#39;s event logs.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SitePhpErrorLogFlag> GetSitePhpErrorLogFlagSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetSitePhpErrorLogFlagSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the premier add-ons of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the premier add-ons for the production slot.
        /// </param>
        public static PremierAddOn ListPremierAddOnsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListPremierAddOnsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the premier add-ons of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the premier add-ons for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PremierAddOn> ListPremierAddOnsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListPremierAddOnsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a named add-on of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='premierAddOnName'>
        /// Add-on name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the named add-on for the production slot.
        /// </param>
        public static PremierAddOn GetPremierAddOnSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot)
        {
                return ((IWebAppsOperations)operations).GetPremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a named add-on of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='premierAddOnName'>
        /// Add-on name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the named add-on for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PremierAddOn> GetPremierAddOnSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPremierAddOnSlotWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates a named add-on of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='premierAddOnName'>
        /// Add-on name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the named add-on for the production slot.
        /// </param>
        public static PremierAddOn AddPremierAddOnSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot, PremierAddOn premierAddOn)
        {
                return ((IWebAppsOperations)operations).AddPremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot, premierAddOn).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates a named add-on of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='premierAddOnName'>
        /// Add-on name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the named add-on for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PremierAddOn> AddPremierAddOnSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot, PremierAddOn premierAddOn, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.AddPremierAddOnSlotWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, slot, premierAddOn, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete a premier add-on from an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='premierAddOnName'>
        /// Add-on name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the named add-on for the production slot.
        /// </param>
        public static void DeletePremierAddOnSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot)
        {
                ((IWebAppsOperations)operations).DeletePremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete a premier add-on from an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='premierAddOnName'>
        /// Add-on name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the named add-on for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeletePremierAddOnSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeletePremierAddOnSlotWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Updates a named add-on of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='premierAddOnName'>
        /// Add-on name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the named add-on for the production slot.
        /// </param>
        public static PremierAddOn UpdatePremierAddOnSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot, PremierAddOnPatchResource premierAddOn)
        {
                return ((IWebAppsOperations)operations).UpdatePremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot, premierAddOn).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates a named add-on of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='premierAddOnName'>
        /// Add-on name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the named add-on for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PremierAddOn> UpdatePremierAddOnSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot, PremierAddOnPatchResource premierAddOn, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdatePremierAddOnSlotWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, slot, premierAddOn, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets data around private site access enablement and
        /// authorized Virtual Networks that can access the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for the web app.
        /// </param>
        public static PrivateAccess GetPrivateAccessSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetPrivateAccessSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets data around private site access enablement and
        /// authorized Virtual Networks that can access the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for the web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateAccess> GetPrivateAccessSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPrivateAccessSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Sets data around private site access enablement and
        /// authorized Virtual Networks that can access the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for the web app.
        /// </param>
        public static PrivateAccess PutPrivateAccessVnetSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, PrivateAccess access)
        {
                return ((IWebAppsOperations)operations).PutPrivateAccessVnetSlotAsync(resourceGroupName, name, slot, access).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Sets data around private site access enablement and
        /// authorized Virtual Networks that can access the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for the web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateAccess> PutPrivateAccessVnetSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, PrivateAccess access, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.PutPrivateAccessVnetSlotWithHttpMessagesAsync(resourceGroupName, name, slot, access, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the list of private endpoint connections associated
        /// with a site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='slot'>
        /// Name of the site deployment slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RemotePrivateEndpointConnectionARMResource> GetPrivateEndpointConnectionListSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetPrivateEndpointConnectionListSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the list of private endpoint connections associated
        /// with a site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='slot'>
        /// Name of the site deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RemotePrivateEndpointConnectionARMResource>> GetPrivateEndpointConnectionListSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPrivateEndpointConnectionListSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection.
        /// </param>
        /// <param name='slot'>
        /// Name of the site deployment slot.
        /// </param>
        public static RemotePrivateEndpointConnectionARMResource GetPrivateEndpointConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, string slot)
        {
                return ((IWebAppsOperations)operations).GetPrivateEndpointConnectionSlotAsync(resourceGroupName, name, privateEndpointConnectionName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection.
        /// </param>
        /// <param name='slot'>
        /// Name of the site deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RemotePrivateEndpointConnectionARMResource> GetPrivateEndpointConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPrivateEndpointConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Approves or rejects a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        public static RemotePrivateEndpointConnectionARMResource ApproveOrRejectPrivateEndpointConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, string slot, PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper)
        {
                return ((IWebAppsOperations)operations).ApproveOrRejectPrivateEndpointConnectionSlotAsync(resourceGroupName, name, privateEndpointConnectionName, slot, privateEndpointWrapper).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Approves or rejects a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RemotePrivateEndpointConnectionARMResource> ApproveOrRejectPrivateEndpointConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, string slot, PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApproveOrRejectPrivateEndpointConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, slot, privateEndpointWrapper, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        public static object DeletePrivateEndpointConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, string slot)
        {
                return ((IWebAppsOperations)operations).DeletePrivateEndpointConnectionSlotAsync(resourceGroupName, name, privateEndpointConnectionName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> DeletePrivateEndpointConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeletePrivateEndpointConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the private link resources
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        public static PrivateLinkResourcesWrapper GetPrivateLinkResourcesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetPrivateLinkResourcesSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the private link resources
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateLinkResourcesWrapper> GetPrivateLinkResourcesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPrivateLinkResourcesSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get list of processes for a web site, or a deployment slot,
        /// or for a specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessInfo> ListProcessesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListProcessesSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get list of processes for a web site, or a deployment slot,
        /// or for a specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessInfo>> ListProcessesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListProcessesSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get process information by its ID for a specific scaled-out
        /// instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        public static ProcessInfo GetProcessSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot)
        {
                return ((IWebAppsOperations)operations).GetProcessSlotAsync(resourceGroupName, name, processId, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get process information by its ID for a specific scaled-out
        /// instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProcessInfo> GetProcessSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetProcessSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Terminate a process by its ID for a web site, or a
        /// deployment slot, or specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        public static void DeleteProcessSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot)
        {
                ((IWebAppsOperations)operations).DeleteProcessSlotAsync(resourceGroupName, name, processId, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Terminate a process by its ID for a web site, or a
        /// deployment slot, or specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteProcessSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteProcessSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Get a memory dump of a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        public static System.IO.Stream GetProcessDumpSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot)
        {
                return ((IWebAppsOperations)operations).GetProcessDumpSlotAsync(resourceGroupName, name, processId, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get a memory dump of a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.IO.Stream> GetProcessDumpSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var _result = await operations.GetProcessDumpSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, null, cancellationToken).ConfigureAwait(false);
            _result.Request.Dispose();
            return _result.Body;
        }
        /// <summary>
        /// Description for List module information for a process by its ID for a
        /// specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessModuleInfo> ListProcessModulesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot)
        {
                return ((IWebAppsOperations)operations).ListProcessModulesSlotAsync(resourceGroupName, name, processId, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List module information for a process by its ID for a
        /// specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessModuleInfo>> ListProcessModulesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListProcessModulesSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get process information by its ID for a specific scaled-out
        /// instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='baseAddress'>
        /// Module base address.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        public static ProcessModuleInfo GetProcessModuleSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string baseAddress, string slot)
        {
                return ((IWebAppsOperations)operations).GetProcessModuleSlotAsync(resourceGroupName, name, processId, baseAddress, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get process information by its ID for a specific scaled-out
        /// instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='baseAddress'>
        /// Module base address.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProcessModuleInfo> GetProcessModuleSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string baseAddress, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetProcessModuleSlotWithHttpMessagesAsync(resourceGroupName, name, processId, baseAddress, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List the threads in a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessThreadInfo> ListProcessThreadsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot)
        {
                return ((IWebAppsOperations)operations).ListProcessThreadsSlotAsync(resourceGroupName, name, processId, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List the threads in a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='processId'>
        /// PID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessThreadInfo>> ListProcessThreadsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListProcessThreadsSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get public certificates for an app or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API gets
        /// hostname bindings for the production slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PublicCertificate> ListPublicCertificatesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListPublicCertificatesSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get public certificates for an app or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API gets
        /// hostname bindings for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PublicCertificate>> ListPublicCertificatesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListPublicCertificatesSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the named public certificate for an app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API the named
        /// binding for the production slot.
        /// </param>
        /// <param name='publicCertificateName'>
        /// Public certificate name.
        /// </param>
        public static PublicCertificate GetPublicCertificateSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string publicCertificateName)
        {
                return ((IWebAppsOperations)operations).GetPublicCertificateSlotAsync(resourceGroupName, name, slot, publicCertificateName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the named public certificate for an app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API the named
        /// binding for the production slot.
        /// </param>
        /// <param name='publicCertificateName'>
        /// Public certificate name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PublicCertificate> GetPublicCertificateSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string publicCertificateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPublicCertificateSlotWithHttpMessagesAsync(resourceGroupName, name, slot, publicCertificateName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates a hostname binding for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='publicCertificateName'>
        /// Public certificate name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// create a binding for the production slot.
        /// </param>
        public static PublicCertificate CreateOrUpdatePublicCertificateSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string publicCertificateName, string slot, PublicCertificate publicCertificate)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdatePublicCertificateSlotAsync(resourceGroupName, name, publicCertificateName, slot, publicCertificate).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a hostname binding for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='publicCertificateName'>
        /// Public certificate name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// create a binding for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PublicCertificate> CreateOrUpdatePublicCertificateSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string publicCertificateName, string slot, PublicCertificate publicCertificate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdatePublicCertificateSlotWithHttpMessagesAsync(resourceGroupName, name, publicCertificateName, slot, publicCertificate, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a hostname binding for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the binding for the production slot.
        /// </param>
        /// <param name='publicCertificateName'>
        /// Public certificate name.
        /// </param>
        public static void DeletePublicCertificateSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string publicCertificateName)
        {
                ((IWebAppsOperations)operations).DeletePublicCertificateSlotAsync(resourceGroupName, name, slot, publicCertificateName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a hostname binding for an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the binding for the production slot.
        /// </param>
        /// <param name='publicCertificateName'>
        /// Public certificate name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeletePublicCertificateSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string publicCertificateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeletePublicCertificateSlotWithHttpMessagesAsync(resourceGroupName, name, slot, publicCertificateName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Gets the publishing profile for an app (or deployment slot,
        /// if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the publishing profile for the production slot.
        /// </param>
        public static System.IO.Stream ListPublishingProfileXmlWithSecretsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CsmPublishingProfileOptions publishingProfileOptions)
        {
                return ((IWebAppsOperations)operations).ListPublishingProfileXmlWithSecretsSlotAsync(resourceGroupName, name, slot, publishingProfileOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the publishing profile for an app (or deployment slot,
        /// if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the publishing profile for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.IO.Stream> ListPublishingProfileXmlWithSecretsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CsmPublishingProfileOptions publishingProfileOptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var _result = await operations.ListPublishingProfileXmlWithSecretsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, publishingProfileOptions, null, cancellationToken).ConfigureAwait(false);
            _result.Request.Dispose();
            return _result.Body;
        }
        /// <summary>
        /// Description for Resets the configuration settings of the current slot if
        /// they were previously modified by calling the API with POST.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API resets
        /// configuration settings for the production slot.
        /// </param>
        public static void ResetSlotConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                ((IWebAppsOperations)operations).ResetSlotConfigurationSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Resets the configuration settings of the current slot if
        /// they were previously modified by calling the API with POST.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API resets
        /// configuration settings for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ResetSlotConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.ResetSlotConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Restarts an app (or deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// restart the production slot.
        /// </param>
        /// <param name='softRestart'>
        /// Specify true to apply the configuration settings and restarts the app only
        /// if necessary. By default, the API always restarts and reprovisions the app.
        /// </param>
        /// <param name='synchronous'>
        /// Specify true to block until the app is restarted. By default, it is set to
        /// false, and the API responds immediately (asynchronous).
        /// </param>
        public static void RestartSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? softRestart = default(bool?), bool? synchronous = default(bool?))
        {
                ((IWebAppsOperations)operations).RestartSlotAsync(resourceGroupName, name, slot, softRestart, synchronous).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restarts an app (or deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// restart the production slot.
        /// </param>
        /// <param name='softRestart'>
        /// Specify true to apply the configuration settings and restarts the app only
        /// if necessary. By default, the API always restarts and reprovisions the app.
        /// </param>
        /// <param name='synchronous'>
        /// Specify true to block until the app is restarted. By default, it is set to
        /// false, and the API responds immediately (asynchronous).
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RestartSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? softRestart = default(bool?), bool? synchronous = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RestartSlotWithHttpMessagesAsync(resourceGroupName, name, slot, softRestart, synchronous, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Restores an app from a backup blob in Azure Storage.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// restore a backup of the production slot.
        /// </param>
        public static void RestoreFromBackupBlobSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, RestoreRequest request)
        {
                ((IWebAppsOperations)operations).RestoreFromBackupBlobSlotAsync(resourceGroupName, name, slot, request).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restores an app from a backup blob in Azure Storage.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// restore a backup of the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RestoreFromBackupBlobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, RestoreRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RestoreFromBackupBlobSlotWithHttpMessagesAsync(resourceGroupName, name, slot, request, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Restores a deleted web app to this web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static void RestoreFromDeletedAppSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, DeletedAppRestoreRequest restoreRequest)
        {
                ((IWebAppsOperations)operations).RestoreFromDeletedAppSlotAsync(resourceGroupName, name, slot, restoreRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restores a deleted web app to this web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RestoreFromDeletedAppSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, DeletedAppRestoreRequest restoreRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RestoreFromDeletedAppSlotWithHttpMessagesAsync(resourceGroupName, name, slot, restoreRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Restores a web app from a snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static void RestoreSnapshotSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SnapshotRestoreRequest restoreRequest)
        {
                ((IWebAppsOperations)operations).RestoreSnapshotSlotAsync(resourceGroupName, name, slot, restoreRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restores a web app from a snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RestoreSnapshotSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SnapshotRestoreRequest restoreRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RestoreSnapshotSlotWithHttpMessagesAsync(resourceGroupName, name, slot, restoreRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Get list of siteextensions for a web site, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API uses the
        /// production slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SiteExtensionInfo> ListSiteExtensionsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListSiteExtensionsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get list of siteextensions for a web site, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API uses the
        /// production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SiteExtensionInfo>> ListSiteExtensionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSiteExtensionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get site extension information by its ID for a web site, or
        /// a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='siteExtensionId'>
        /// Site extension name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API uses the
        /// production slot.
        /// </param>
        public static SiteExtensionInfo GetSiteExtensionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, string slot)
        {
                return ((IWebAppsOperations)operations).GetSiteExtensionSlotAsync(resourceGroupName, name, siteExtensionId, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get site extension information by its ID for a web site, or
        /// a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='siteExtensionId'>
        /// Site extension name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API uses the
        /// production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteExtensionInfo> GetSiteExtensionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetSiteExtensionSlotWithHttpMessagesAsync(resourceGroupName, name, siteExtensionId, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Install site extension on a web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='siteExtensionId'>
        /// Site extension name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API uses the
        /// production slot.
        /// </param>
        public static SiteExtensionInfo InstallSiteExtensionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, string slot)
        {
                return ((IWebAppsOperations)operations).InstallSiteExtensionSlotAsync(resourceGroupName, name, siteExtensionId, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Install site extension on a web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='siteExtensionId'>
        /// Site extension name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API uses the
        /// production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteExtensionInfo> InstallSiteExtensionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.InstallSiteExtensionSlotWithHttpMessagesAsync(resourceGroupName, name, siteExtensionId, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Remove a site extension from a web site, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='siteExtensionId'>
        /// Site extension name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API deletes a
        /// deployment for the production slot.
        /// </param>
        public static void DeleteSiteExtensionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, string slot)
        {
                ((IWebAppsOperations)operations).DeleteSiteExtensionSlotAsync(resourceGroupName, name, siteExtensionId, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Remove a site extension from a web site, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='siteExtensionId'>
        /// Site extension name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API deletes a
        /// deployment for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteSiteExtensionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteSiteExtensionSlotWithHttpMessagesAsync(resourceGroupName, name, siteExtensionId, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Get the difference in configuration settings between two
        /// web app slots.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the source slot. If a slot is not specified, the production slot is
        /// used as the source slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SlotDifference> ListSlotDifferencesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CsmSlotEntity slotSwapEntity)
        {
                return ((IWebAppsOperations)operations).ListSlotDifferencesSlotAsync(resourceGroupName, name, slot, slotSwapEntity).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the difference in configuration settings between two
        /// web app slots.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the source slot. If a slot is not specified, the production slot is
        /// used as the source slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SlotDifference>> ListSlotDifferencesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CsmSlotEntity slotSwapEntity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSlotDifferencesSlotWithHttpMessagesAsync(resourceGroupName, name, slot, slotSwapEntity, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Swaps two deployment slots of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the source slot. If a slot is not specified, the production slot is
        /// used as the source slot.
        /// </param>
        public static void SwapSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CsmSlotEntity slotSwapEntity)
        {
                ((IWebAppsOperations)operations).SwapSlotAsync(resourceGroupName, name, slot, slotSwapEntity).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Swaps two deployment slots of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the source slot. If a slot is not specified, the production slot is
        /// used as the source slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task SwapSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CsmSlotEntity slotSwapEntity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.SwapSlotWithHttpMessagesAsync(resourceGroupName, name, slot, slotSwapEntity, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Returns all Snapshots to the user.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Website Name.
        /// </param>
        /// <param name='slot'>
        /// Website Slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Snapshot> ListSnapshotsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListSnapshotsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Returns all Snapshots to the user.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Website Name.
        /// </param>
        /// <param name='slot'>
        /// Website Slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Snapshot>> ListSnapshotsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSnapshotsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Returns all Snapshots to the user from DRSecondary
        /// endpoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Website Name.
        /// </param>
        /// <param name='slot'>
        /// Website Slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Snapshot> ListSnapshotsFromDRSecondarySlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListSnapshotsFromDRSecondarySlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Returns all Snapshots to the user from DRSecondary
        /// endpoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Website Name.
        /// </param>
        /// <param name='slot'>
        /// Website Slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Snapshot>> ListSnapshotsFromDRSecondarySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSnapshotsFromDRSecondarySlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the source control configuration for the production slot.
        /// </param>
        public static SiteSourceControl GetSourceControlSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).GetSourceControlSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the source control configuration for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteSourceControl> GetSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the source control configuration for the production slot.
        /// </param>
        public static SiteSourceControl CreateOrUpdateSourceControlSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SiteSourceControl siteSourceControl)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateSourceControlSlotAsync(resourceGroupName, name, slot, siteSourceControl).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the source control configuration for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteSourceControl> CreateOrUpdateSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SiteSourceControl siteSourceControl, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, slot, siteSourceControl, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the source control configuration for the production slot.
        /// </param>
        /// <param name='additionalFlags'>
        /// 
        /// </param>
        public static void DeleteSourceControlSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string additionalFlags = default(string))
        {
                ((IWebAppsOperations)operations).DeleteSourceControlSlotAsync(resourceGroupName, name, slot, additionalFlags).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the source control configuration for the production slot.
        /// </param>
        /// <param name='additionalFlags'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string additionalFlags = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, slot, additionalFlags, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Updates the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the source control configuration for the production slot.
        /// </param>
        public static SiteSourceControl UpdateSourceControlSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SiteSourceControl siteSourceControl)
        {
                return ((IWebAppsOperations)operations).UpdateSourceControlSlotAsync(resourceGroupName, name, slot, siteSourceControl).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the source control configuration for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteSourceControl> UpdateSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SiteSourceControl siteSourceControl, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, slot, siteSourceControl, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Starts an app (or deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will start
        /// the production slot.
        /// </param>
        public static void StartSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                ((IWebAppsOperations)operations).StartSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Starts an app (or deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will start
        /// the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task StartSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.StartSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for this web app.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        public static object StartNetworkTraceSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string))
        {
                return ((IWebAppsOperations)operations).StartNetworkTraceSlotAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for this web app.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> StartNetworkTraceSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.StartNetworkTraceSlotWithHttpMessagesAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Stops an app (or deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will stop
        /// the production slot.
        /// </param>
        public static void StopSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                ((IWebAppsOperations)operations).StopSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Stops an app (or deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will stop
        /// the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task StopSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.StopSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Stop ongoing capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for this web app.
        /// </param>
        public static void StopNetworkTraceSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                ((IWebAppsOperations)operations).StopNetworkTraceSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Stop ongoing capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for this web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task StopNetworkTraceSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.StopNetworkTraceSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Sync web app repository.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static void SyncRepositorySlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                ((IWebAppsOperations)operations).SyncRepositorySlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Sync web app repository.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task SyncRepositorySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.SyncRepositorySlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Syncs function trigger metadata to the management database
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        public static void SyncFunctionTriggersSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                ((IWebAppsOperations)operations).SyncFunctionTriggersSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Syncs function trigger metadata to the management database
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task SyncFunctionTriggersSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.SyncFunctionTriggersSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for List triggered web jobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API deletes a
        /// deployment for the production slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TriggeredWebJob> ListTriggeredWebJobsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListTriggeredWebJobsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List triggered web jobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API deletes a
        /// deployment for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TriggeredWebJob>> ListTriggeredWebJobsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListTriggeredWebJobsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a triggered web job by its ID for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API uses the
        /// production slot.
        /// </param>
        public static TriggeredWebJob GetTriggeredWebJobSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot)
        {
                return ((IWebAppsOperations)operations).GetTriggeredWebJobSlotAsync(resourceGroupName, name, webJobName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a triggered web job by its ID for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API uses the
        /// production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TriggeredWebJob> GetTriggeredWebJobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetTriggeredWebJobSlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete a triggered web job by its ID for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API deletes
        /// web job for the production slot.
        /// </param>
        public static void DeleteTriggeredWebJobSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot)
        {
                ((IWebAppsOperations)operations).DeleteTriggeredWebJobSlotAsync(resourceGroupName, name, webJobName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete a triggered web job by its ID for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API deletes
        /// web job for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteTriggeredWebJobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteTriggeredWebJobSlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for List a triggered web job&#39;s history for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API uses the
        /// production slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TriggeredJobHistory> ListTriggeredWebJobHistorySlot(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot)
        {
                return ((IWebAppsOperations)operations).ListTriggeredWebJobHistorySlotAsync(resourceGroupName, name, webJobName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List a triggered web job&#39;s history for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API uses the
        /// production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TriggeredJobHistory>> ListTriggeredWebJobHistorySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListTriggeredWebJobHistorySlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a triggered web job&#39;s history by its ID for an app, ,
        /// or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='id'>
        /// History ID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API uses the
        /// production slot.
        /// </param>
        public static TriggeredJobHistory GetTriggeredWebJobHistorySlot(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string id, string slot)
        {
                return ((IWebAppsOperations)operations).GetTriggeredWebJobHistorySlotAsync(resourceGroupName, name, webJobName, id, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a triggered web job&#39;s history by its ID for an app, ,
        /// or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='id'>
        /// History ID.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API uses the
        /// production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TriggeredJobHistory> GetTriggeredWebJobHistorySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string id, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetTriggeredWebJobHistorySlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, id, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Run a triggered web job for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API uses the
        /// production slot.
        /// </param>
        public static void RunTriggeredWebJobSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot)
        {
                ((IWebAppsOperations)operations).RunTriggeredWebJobSlotAsync(resourceGroupName, name, webJobName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Run a triggered web job for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API uses the
        /// production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RunTriggeredWebJobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RunTriggeredWebJobSlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Gets the quota usage information of an app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// quota information of the production slot.
        /// </param>
        /// <param name='filter'>
        /// Return only information specified in the filter (using OData syntax). For
        /// example: $filter=(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and
        /// startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and
        /// timeGrain eq duration&#39;[Hour|Minute|Day]&#39;.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CsmUsageQuota> ListUsagesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string filter = default(string))
        {
                return ((IWebAppsOperations)operations).ListUsagesSlotAsync(resourceGroupName, name, slot, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the quota usage information of an app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// quota information of the production slot.
        /// </param>
        /// <param name='filter'>
        /// Return only information specified in the filter (using OData syntax). For
        /// example: $filter=(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and
        /// startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and
        /// timeGrain eq duration&#39;[Hour|Minute|Day]&#39;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CsmUsageQuota>> ListUsagesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListUsagesSlotWithHttpMessagesAsync(resourceGroupName, name, slot, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the virtual networks the app (or deployment slot) is
        /// connected to.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// virtual network connections for the production slot.
        /// </param>
        public static System.Collections.Generic.IList<VnetInfo> ListVnetConnectionsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListVnetConnectionsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the virtual networks the app (or deployment slot) is
        /// connected to.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// virtual network connections for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<VnetInfo>> ListVnetConnectionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListVnetConnectionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a virtual network the app (or deployment slot) is
        /// connected to by name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the virtual network.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the named virtual network for the production slot.
        /// </param>
        public static VnetInfo GetVnetConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot)
        {
                return ((IWebAppsOperations)operations).GetVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a virtual network the app (or deployment slot) is
        /// connected to by name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the virtual network.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the named virtual network for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VnetInfo> GetVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Adds a Virtual Network connection to an app or slot (PUT)
        /// or updates the connection properties (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of an existing Virtual Network.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will add
        /// or update connections for the production slot.
        /// </param>
        public static VnetInfo CreateOrUpdateVnetConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot, VnetInfo connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Adds a Virtual Network connection to an app or slot (PUT)
        /// or updates the connection properties (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of an existing Virtual Network.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will add
        /// or update connections for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VnetInfo> CreateOrUpdateVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot, VnetInfo connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, slot, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a connection from an app (or deployment slot to a
        /// named virtual network.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the virtual network.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the connection for the production slot.
        /// </param>
        public static void DeleteVnetConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot)
        {
                ((IWebAppsOperations)operations).DeleteVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a connection from an app (or deployment slot to a
        /// named virtual network.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the virtual network.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// delete the connection for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Adds a Virtual Network connection to an app or slot (PUT)
        /// or updates the connection properties (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of an existing Virtual Network.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will add
        /// or update connections for the production slot.
        /// </param>
        public static VnetInfo UpdateVnetConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot, VnetInfo connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).UpdateVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Adds a Virtual Network connection to an app or slot (PUT)
        /// or updates the connection properties (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of an existing Virtual Network.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will add
        /// or update connections for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VnetInfo> UpdateVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot, VnetInfo connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, slot, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets an app&#39;s Virtual Network gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='gatewayName'>
        /// Name of the gateway. Currently, the only supported string is &#34;primary&#34;.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get a
        /// gateway for the production slot&#39;s Virtual Network.
        /// </param>
        public static VnetGateway GetVnetConnectionGatewaySlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, string slot)
        {
                return ((IWebAppsOperations)operations).GetVnetConnectionGatewaySlotAsync(resourceGroupName, name, vnetName, gatewayName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets an app&#39;s Virtual Network gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='gatewayName'>
        /// Name of the gateway. Currently, the only supported string is &#34;primary&#34;.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get a
        /// gateway for the production slot&#39;s Virtual Network.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VnetGateway> GetVnetConnectionGatewaySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetVnetConnectionGatewaySlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Adds a gateway to a connected Virtual Network (PUT) or
        /// updates it (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='gatewayName'>
        /// Name of the gateway. Currently, the only supported string is &#34;primary&#34;.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will add
        /// or update a gateway for the production slot&#39;s Virtual Network.
        /// </param>
        public static VnetGateway CreateOrUpdateVnetConnectionGatewaySlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, string slot, VnetGateway connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateVnetConnectionGatewaySlotAsync(resourceGroupName, name, vnetName, gatewayName, slot, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Adds a gateway to a connected Virtual Network (PUT) or
        /// updates it (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='gatewayName'>
        /// Name of the gateway. Currently, the only supported string is &#34;primary&#34;.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will add
        /// or update a gateway for the production slot&#39;s Virtual Network.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VnetGateway> CreateOrUpdateVnetConnectionGatewaySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, string slot, VnetGateway connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateVnetConnectionGatewaySlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, slot, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Adds a gateway to a connected Virtual Network (PUT) or
        /// updates it (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='gatewayName'>
        /// Name of the gateway. Currently, the only supported string is &#34;primary&#34;.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will add
        /// or update a gateway for the production slot&#39;s Virtual Network.
        /// </param>
        public static VnetGateway UpdateVnetConnectionGatewaySlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, string slot, VnetGateway connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).UpdateVnetConnectionGatewaySlotAsync(resourceGroupName, name, vnetName, gatewayName, slot, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Adds a gateway to a connected Virtual Network (PUT) or
        /// updates it (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='gatewayName'>
        /// Name of the gateway. Currently, the only supported string is &#34;primary&#34;.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will add
        /// or update a gateway for the production slot&#39;s Virtual Network.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VnetGateway> UpdateVnetConnectionGatewaySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, string slot, VnetGateway connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateVnetConnectionGatewaySlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, slot, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List webjobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WebJob> ListWebJobsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).ListWebJobsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List webjobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WebJob>> ListWebJobsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWebJobsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get webjob information for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of the web job.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        public static WebJob GetWebJobSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot)
        {
                return ((IWebAppsOperations)operations).GetWebJobSlotAsync(resourceGroupName, name, webJobName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get webjob information for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of the web job.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API returns
        /// deployments for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WebJob> GetWebJobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWebJobSlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the difference in configuration settings between two
        /// web app slots.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SlotDifference> ListSlotDifferencesFromProduction(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity)
        {
                return ((IWebAppsOperations)operations).ListSlotDifferencesFromProductionAsync(resourceGroupName, name, slotSwapEntity).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the difference in configuration settings between two
        /// web app slots.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SlotDifference>> ListSlotDifferencesFromProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSlotDifferencesFromProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Swaps two deployment slots of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static void SwapSlotWithProduction(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity)
        {
                ((IWebAppsOperations)operations).SwapSlotWithProductionAsync(resourceGroupName, name, slotSwapEntity).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Swaps two deployment slots of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task SwapSlotWithProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.SwapSlotWithProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Returns all Snapshots to the user.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Website Name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Snapshot> ListSnapshots(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListSnapshotsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Returns all Snapshots to the user.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Website Name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Snapshot>> ListSnapshotsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSnapshotsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Returns all Snapshots to the user from DRSecondary
        /// endpoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Website Name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Snapshot> ListSnapshotsFromDRSecondary(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListSnapshotsFromDRSecondaryAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Returns all Snapshots to the user from DRSecondary
        /// endpoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Website Name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Snapshot>> ListSnapshotsFromDRSecondaryAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSnapshotsFromDRSecondaryWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static SiteSourceControl GetSourceControl(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).GetSourceControlAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteSourceControl> GetSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetSourceControlWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Updates the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static SiteSourceControl CreateOrUpdateSourceControl(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateSourceControlAsync(resourceGroupName, name, siteSourceControl).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteSourceControl> CreateOrUpdateSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateSourceControlWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='additionalFlags'>
        /// 
        /// </param>
        public static void DeleteSourceControl(this IWebAppsOperations operations, string resourceGroupName, string name, string additionalFlags = default(string))
        {
                ((IWebAppsOperations)operations).DeleteSourceControlAsync(resourceGroupName, name, additionalFlags).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='additionalFlags'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string additionalFlags = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteSourceControlWithHttpMessagesAsync(resourceGroupName, name, additionalFlags, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Updates the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static SiteSourceControl UpdateSourceControl(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl)
        {
                return ((IWebAppsOperations)operations).UpdateSourceControlAsync(resourceGroupName, name, siteSourceControl).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteSourceControl> UpdateSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateSourceControlWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Starts an app (or deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static void Start(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                ((IWebAppsOperations)operations).StartAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Starts an app (or deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task StartAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.StartWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        public static object StartNetworkTrace(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string))
        {
                return ((IWebAppsOperations)operations).StartNetworkTraceAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> StartNetworkTraceAsync(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.StartNetworkTraceWithHttpMessagesAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Stops an app (or deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static void Stop(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                ((IWebAppsOperations)operations).StopAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Stops an app (or deployment slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task StopAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.StopWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Stop ongoing capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        public static void StopNetworkTrace(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                ((IWebAppsOperations)operations).StopNetworkTraceAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Stop ongoing capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task StopNetworkTraceAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.StopNetworkTraceWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Sync web app repository.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static void SyncRepository(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                ((IWebAppsOperations)operations).SyncRepositoryAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Sync web app repository.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task SyncRepositoryAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.SyncRepositoryWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Syncs function trigger metadata to the management database
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static void SyncFunctionTriggers(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                ((IWebAppsOperations)operations).SyncFunctionTriggersAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Syncs function trigger metadata to the management database
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task SyncFunctionTriggersAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.SyncFunctionTriggersWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for List triggered web jobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TriggeredWebJob> ListTriggeredWebJobs(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListTriggeredWebJobsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List triggered web jobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TriggeredWebJob>> ListTriggeredWebJobsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListTriggeredWebJobsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a triggered web job by its ID for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        public static TriggeredWebJob GetTriggeredWebJob(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName)
        {
                return ((IWebAppsOperations)operations).GetTriggeredWebJobAsync(resourceGroupName, name, webJobName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a triggered web job by its ID for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TriggeredWebJob> GetTriggeredWebJobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetTriggeredWebJobWithHttpMessagesAsync(resourceGroupName, name, webJobName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete a triggered web job by its ID for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        public static void DeleteTriggeredWebJob(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName)
        {
                ((IWebAppsOperations)operations).DeleteTriggeredWebJobAsync(resourceGroupName, name, webJobName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete a triggered web job by its ID for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteTriggeredWebJobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteTriggeredWebJobWithHttpMessagesAsync(resourceGroupName, name, webJobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for List a triggered web job&#39;s history for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TriggeredJobHistory> ListTriggeredWebJobHistory(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName)
        {
                return ((IWebAppsOperations)operations).ListTriggeredWebJobHistoryAsync(resourceGroupName, name, webJobName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List a triggered web job&#39;s history for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TriggeredJobHistory>> ListTriggeredWebJobHistoryAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListTriggeredWebJobHistoryWithHttpMessagesAsync(resourceGroupName, name, webJobName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a triggered web job&#39;s history by its ID for an app, ,
        /// or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='id'>
        /// History ID.
        /// </param>
        public static TriggeredJobHistory GetTriggeredWebJobHistory(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string id)
        {
                return ((IWebAppsOperations)operations).GetTriggeredWebJobHistoryAsync(resourceGroupName, name, webJobName, id).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a triggered web job&#39;s history by its ID for an app, ,
        /// or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='id'>
        /// History ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TriggeredJobHistory> GetTriggeredWebJobHistoryAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetTriggeredWebJobHistoryWithHttpMessagesAsync(resourceGroupName, name, webJobName, id, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Run a triggered web job for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        public static void RunTriggeredWebJob(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName)
        {
                ((IWebAppsOperations)operations).RunTriggeredWebJobAsync(resourceGroupName, name, webJobName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Run a triggered web job for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of Web Job.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RunTriggeredWebJobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RunTriggeredWebJobWithHttpMessagesAsync(resourceGroupName, name, webJobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Gets the quota usage information of an app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='filter'>
        /// Return only information specified in the filter (using OData syntax). For
        /// example: $filter=(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and
        /// startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and
        /// timeGrain eq duration&#39;[Hour|Minute|Day]&#39;.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CsmUsageQuota> ListUsages(this IWebAppsOperations operations, string resourceGroupName, string name, string filter = default(string))
        {
                return ((IWebAppsOperations)operations).ListUsagesAsync(resourceGroupName, name, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the quota usage information of an app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='filter'>
        /// Return only information specified in the filter (using OData syntax). For
        /// example: $filter=(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and
        /// startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and
        /// timeGrain eq duration&#39;[Hour|Minute|Day]&#39;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CsmUsageQuota>> ListUsagesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListUsagesWithHttpMessagesAsync(resourceGroupName, name, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the virtual networks the app (or deployment slot) is
        /// connected to.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static System.Collections.Generic.IList<VnetInfo> ListVnetConnections(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListVnetConnectionsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the virtual networks the app (or deployment slot) is
        /// connected to.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<VnetInfo>> ListVnetConnectionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListVnetConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a virtual network the app (or deployment slot) is
        /// connected to by name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the virtual network.
        /// </param>
        public static VnetInfo GetVnetConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName)
        {
                return ((IWebAppsOperations)operations).GetVnetConnectionAsync(resourceGroupName, name, vnetName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a virtual network the app (or deployment slot) is
        /// connected to by name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the virtual network.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VnetInfo> GetVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Adds a Virtual Network connection to an app or slot (PUT)
        /// or updates the connection properties (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of an existing Virtual Network.
        /// </param>
        public static VnetInfo CreateOrUpdateVnetConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateVnetConnectionAsync(resourceGroupName, name, vnetName, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Adds a Virtual Network connection to an app or slot (PUT)
        /// or updates the connection properties (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of an existing Virtual Network.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VnetInfo> CreateOrUpdateVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a connection from an app (or deployment slot to a
        /// named virtual network.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the virtual network.
        /// </param>
        public static void DeleteVnetConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName)
        {
                ((IWebAppsOperations)operations).DeleteVnetConnectionAsync(resourceGroupName, name, vnetName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a connection from an app (or deployment slot to a
        /// named virtual network.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the virtual network.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Adds a Virtual Network connection to an app or slot (PUT)
        /// or updates the connection properties (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of an existing Virtual Network.
        /// </param>
        public static VnetInfo UpdateVnetConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).UpdateVnetConnectionAsync(resourceGroupName, name, vnetName, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Adds a Virtual Network connection to an app or slot (PUT)
        /// or updates the connection properties (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of an existing Virtual Network.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VnetInfo> UpdateVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets an app&#39;s Virtual Network gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='gatewayName'>
        /// Name of the gateway. Currently, the only supported string is &#34;primary&#34;.
        /// </param>
        public static VnetGateway GetVnetConnectionGateway(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName)
        {
                return ((IWebAppsOperations)operations).GetVnetConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets an app&#39;s Virtual Network gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='gatewayName'>
        /// Name of the gateway. Currently, the only supported string is &#34;primary&#34;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VnetGateway> GetVnetConnectionGatewayAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetVnetConnectionGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Adds a gateway to a connected Virtual Network (PUT) or
        /// updates it (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='gatewayName'>
        /// Name of the gateway. Currently, the only supported string is &#34;primary&#34;.
        /// </param>
        public static VnetGateway CreateOrUpdateVnetConnectionGateway(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).CreateOrUpdateVnetConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Adds a gateway to a connected Virtual Network (PUT) or
        /// updates it (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='gatewayName'>
        /// Name of the gateway. Currently, the only supported string is &#34;primary&#34;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VnetGateway> CreateOrUpdateVnetConnectionGatewayAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateVnetConnectionGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Adds a gateway to a connected Virtual Network (PUT) or
        /// updates it (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='gatewayName'>
        /// Name of the gateway. Currently, the only supported string is &#34;primary&#34;.
        /// </param>
        public static VnetGateway UpdateVnetConnectionGateway(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope)
        {
                return ((IWebAppsOperations)operations).UpdateVnetConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Adds a gateway to a connected Virtual Network (PUT) or
        /// updates it (PATCH).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='vnetName'>
        /// Name of the Virtual Network.
        /// </param>
        /// <param name='gatewayName'>
        /// Name of the gateway. Currently, the only supported string is &#34;primary&#34;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VnetGateway> UpdateVnetConnectionGatewayAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateVnetConnectionGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List webjobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WebJob> ListWebJobs(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).ListWebJobsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List webjobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WebJob>> ListWebJobsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWebJobsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get webjob information for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of the web job.
        /// </param>
        public static WebJob GetWebJob(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName)
        {
                return ((IWebAppsOperations)operations).GetWebJobAsync(resourceGroupName, name, webJobName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get webjob information for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='webJobName'>
        /// Name of the web job.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WebJob> GetWebJobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWebJobWithHttpMessagesAsync(resourceGroupName, name, webJobName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates a new web, mobile, or API app in an existing
        /// resource group, or updates an existing app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Unique name of the app to create or update. To create or update a
        /// deployment slot, use the {slot} parameter.
        /// </param>
        public static Site BeginCreateOrUpdate(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope)
        {
                return ((IWebAppsOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, name, siteEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a new web, mobile, or API app in an existing
        /// resource group, or updates an existing app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Unique name of the app to create or update. To create or update a
        /// deployment slot, use the {slot} parameter.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Site> BeginCreateOrUpdateAsync(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Restores a specific backup to another app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='backupId'>
        /// ID of the backup.
        /// </param>
        public static void BeginRestore(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request)
        {
                ((IWebAppsOperations)operations).BeginRestoreAsync(resourceGroupName, name, backupId, request).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restores a specific backup to another app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='backupId'>
        /// ID of the backup.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginRestoreAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginRestoreWithHttpMessagesAsync(resourceGroupName, name, backupId, request, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Gets the Git/FTP publishing credentials of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static User BeginListPublishingCredentials(this IWebAppsOperations operations, string resourceGroupName, string name)
        {
                return ((IWebAppsOperations)operations).BeginListPublishingCredentialsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the Git/FTP publishing credentials of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<User> BeginListPublishingCredentialsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginListPublishingCredentialsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Invoke the MSDeploy web app extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static MSDeployStatus BeginCreateMSDeployOperation(this IWebAppsOperations operations, string resourceGroupName, string name, MSDeploy MSDeploy)
        {
                return ((IWebAppsOperations)operations).BeginCreateMSDeployOperationAsync(resourceGroupName, name, MSDeploy).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Invoke the MSDeploy web app extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MSDeployStatus> BeginCreateMSDeployOperationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, MSDeploy MSDeploy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateMSDeployOperationWithHttpMessagesAsync(resourceGroupName, name, MSDeploy, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Create function for web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        public static FunctionEnvelope BeginCreateFunction(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, FunctionEnvelope functionEnvelope)
        {
                return ((IWebAppsOperations)operations).BeginCreateFunctionAsync(resourceGroupName, name, functionName, functionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Create function for web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FunctionEnvelope> BeginCreateFunctionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, FunctionEnvelope functionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateFunctionWithHttpMessagesAsync(resourceGroupName, name, functionName, functionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Invoke the MSDeploy web app extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='instanceId'>
        /// ID of web app instance.
        /// </param>
        public static MSDeployStatus BeginCreateInstanceMSDeployOperation(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, MSDeploy MSDeploy)
        {
                return ((IWebAppsOperations)operations).BeginCreateInstanceMSDeployOperationAsync(resourceGroupName, name, instanceId, MSDeploy).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Invoke the MSDeploy web app extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='instanceId'>
        /// ID of web app instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MSDeployStatus> BeginCreateInstanceMSDeployOperationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, MSDeploy MSDeploy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateInstanceMSDeployOperationWithHttpMessagesAsync(resourceGroupName, name, instanceId, MSDeploy, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Restores a web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='subscriptionName'>
        /// Azure subscription.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static StorageMigrationResponse BeginMigrateStorage(this IWebAppsOperations operations, string subscriptionName, string resourceGroupName, string name, StorageMigrationOptions migrationOptions)
        {
                return ((IWebAppsOperations)operations).BeginMigrateStorageAsync(subscriptionName, resourceGroupName, name, migrationOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restores a web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='subscriptionName'>
        /// Azure subscription.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StorageMigrationResponse> BeginMigrateStorageAsync(this IWebAppsOperations operations, string subscriptionName, string resourceGroupName, string name, StorageMigrationOptions migrationOptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginMigrateStorageWithHttpMessagesAsync(subscriptionName, resourceGroupName, name, migrationOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Migrates a local (in-app) MySql database to a remote MySql
        /// database.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static Operation BeginMigrateMySql(this IWebAppsOperations operations, string resourceGroupName, string name, MigrateMySqlRequest migrationRequestEnvelope)
        {
                return ((IWebAppsOperations)operations).BeginMigrateMySqlAsync(resourceGroupName, name, migrationRequestEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Migrates a local (in-app) MySql database to a remote MySql
        /// database.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Operation> BeginMigrateMySqlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, MigrateMySqlRequest migrationRequestEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginMigrateMySqlWithHttpMessagesAsync(resourceGroupName, name, migrationRequestEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        public static object BeginStartWebSiteNetworkTraceOperation(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string))
        {
                return ((IWebAppsOperations)operations).BeginStartWebSiteNetworkTraceOperationAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> BeginStartWebSiteNetworkTraceOperationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginStartWebSiteNetworkTraceOperationWithHttpMessagesAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Approves or rejects a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        public static RemotePrivateEndpointConnectionARMResource BeginApproveOrRejectPrivateEndpointConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper)
        {
                return ((IWebAppsOperations)operations).BeginApproveOrRejectPrivateEndpointConnectionAsync(resourceGroupName, name, privateEndpointConnectionName, privateEndpointWrapper).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Approves or rejects a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RemotePrivateEndpointConnectionARMResource> BeginApproveOrRejectPrivateEndpointConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginApproveOrRejectPrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, privateEndpointWrapper, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        public static object BeginDeletePrivateEndpointConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName)
        {
                return ((IWebAppsOperations)operations).BeginDeletePrivateEndpointConnectionAsync(resourceGroupName, name, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> BeginDeletePrivateEndpointConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeletePrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Restores an app from a backup blob in Azure Storage.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static void BeginRestoreFromBackupBlob(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequest request)
        {
                ((IWebAppsOperations)operations).BeginRestoreFromBackupBlobAsync(resourceGroupName, name, request).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restores an app from a backup blob in Azure Storage.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginRestoreFromBackupBlobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginRestoreFromBackupBlobWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Restores a deleted web app to this web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static void BeginRestoreFromDeletedApp(this IWebAppsOperations operations, string resourceGroupName, string name, DeletedAppRestoreRequest restoreRequest)
        {
                ((IWebAppsOperations)operations).BeginRestoreFromDeletedAppAsync(resourceGroupName, name, restoreRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restores a deleted web app to this web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginRestoreFromDeletedAppAsync(this IWebAppsOperations operations, string resourceGroupName, string name, DeletedAppRestoreRequest restoreRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginRestoreFromDeletedAppWithHttpMessagesAsync(resourceGroupName, name, restoreRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Restores a web app from a snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        public static void BeginRestoreSnapshot(this IWebAppsOperations operations, string resourceGroupName, string name, SnapshotRestoreRequest restoreRequest)
        {
                ((IWebAppsOperations)operations).BeginRestoreSnapshotAsync(resourceGroupName, name, restoreRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restores a web app from a snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginRestoreSnapshotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SnapshotRestoreRequest restoreRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginRestoreSnapshotWithHttpMessagesAsync(resourceGroupName, name, restoreRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Install site extension on a web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='siteExtensionId'>
        /// Site extension name.
        /// </param>
        public static SiteExtensionInfo BeginInstallSiteExtension(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId)
        {
                return ((IWebAppsOperations)operations).BeginInstallSiteExtensionAsync(resourceGroupName, name, siteExtensionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Install site extension on a web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='siteExtensionId'>
        /// Site extension name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteExtensionInfo> BeginInstallSiteExtensionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginInstallSiteExtensionWithHttpMessagesAsync(resourceGroupName, name, siteExtensionId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates a new web, mobile, or API app in an existing
        /// resource group, or updates an existing app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Unique name of the app to create or update. To create or update a
        /// deployment slot, use the {slot} parameter.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot to create or update. By default, this API
        /// attempts to create or modify the production slot.
        /// </param>
        public static Site BeginCreateOrUpdateSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, Site siteEnvelope)
        {
                return ((IWebAppsOperations)operations).BeginCreateOrUpdateSlotAsync(resourceGroupName, name, slot, siteEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a new web, mobile, or API app in an existing
        /// resource group, or updates an existing app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Unique name of the app to create or update. To create or update a
        /// deployment slot, use the {slot} parameter.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot to create or update. By default, this API
        /// attempts to create or modify the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Site> BeginCreateOrUpdateSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, Site siteEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateSlotWithHttpMessagesAsync(resourceGroupName, name, slot, siteEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Restores a specific backup to another app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='backupId'>
        /// ID of the backup.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// restore a backup of the production slot.
        /// </param>
        public static void BeginRestoreSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot, RestoreRequest request)
        {
                ((IWebAppsOperations)operations).BeginRestoreSlotAsync(resourceGroupName, name, backupId, slot, request).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restores a specific backup to another app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='backupId'>
        /// ID of the backup.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// restore a backup of the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginRestoreSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot, RestoreRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginRestoreSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, slot, request, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Gets the Git/FTP publishing credentials of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the publishing credentials for the production slot.
        /// </param>
        public static User BeginListPublishingCredentialsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
        {
                return ((IWebAppsOperations)operations).BeginListPublishingCredentialsSlotAsync(resourceGroupName, name, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the Git/FTP publishing credentials of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will get
        /// the publishing credentials for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<User> BeginListPublishingCredentialsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginListPublishingCredentialsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Invoke the MSDeploy web app extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static MSDeployStatus BeginCreateMSDeployOperationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, MSDeploy MSDeploy)
        {
                return ((IWebAppsOperations)operations).BeginCreateMSDeployOperationSlotAsync(resourceGroupName, name, slot, MSDeploy).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Invoke the MSDeploy web app extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MSDeployStatus> BeginCreateMSDeployOperationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, MSDeploy MSDeploy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateMSDeployOperationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, MSDeploy, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Create function for web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        public static FunctionEnvelope BeginCreateInstanceFunctionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string slot, FunctionEnvelope functionEnvelope)
        {
                return ((IWebAppsOperations)operations).BeginCreateInstanceFunctionSlotAsync(resourceGroupName, name, functionName, slot, functionEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Create function for web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='functionName'>
        /// Function name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FunctionEnvelope> BeginCreateInstanceFunctionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string slot, FunctionEnvelope functionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateInstanceFunctionSlotWithHttpMessagesAsync(resourceGroupName, name, functionName, slot, functionEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Invoke the MSDeploy web app extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of web app instance.
        /// </param>
        public static MSDeployStatus BeginCreateInstanceMSDeployOperationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId, MSDeploy MSDeploy)
        {
                return ((IWebAppsOperations)operations).BeginCreateInstanceMSDeployOperationSlotAsync(resourceGroupName, name, slot, instanceId, MSDeploy).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Invoke the MSDeploy web app extension.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='instanceId'>
        /// ID of web app instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MSDeployStatus> BeginCreateInstanceMSDeployOperationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId, MSDeploy MSDeploy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateInstanceMSDeployOperationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, instanceId, MSDeploy, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for this web app.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        public static object BeginStartWebSiteNetworkTraceOperationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string))
        {
                return ((IWebAppsOperations)operations).BeginStartWebSiteNetworkTraceOperationSlotAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for this web app.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> BeginStartWebSiteNetworkTraceOperationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginStartWebSiteNetworkTraceOperationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Approves or rejects a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        public static RemotePrivateEndpointConnectionARMResource BeginApproveOrRejectPrivateEndpointConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, string slot, PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper)
        {
                return ((IWebAppsOperations)operations).BeginApproveOrRejectPrivateEndpointConnectionSlotAsync(resourceGroupName, name, privateEndpointConnectionName, slot, privateEndpointWrapper).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Approves or rejects a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RemotePrivateEndpointConnectionARMResource> BeginApproveOrRejectPrivateEndpointConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, string slot, PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginApproveOrRejectPrivateEndpointConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, slot, privateEndpointWrapper, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        public static object BeginDeletePrivateEndpointConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, string slot)
        {
                return ((IWebAppsOperations)operations).BeginDeletePrivateEndpointConnectionSlotAsync(resourceGroupName, name, privateEndpointConnectionName, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// 
        /// </param>
        /// <param name='slot'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> BeginDeletePrivateEndpointConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeletePrivateEndpointConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Restores an app from a backup blob in Azure Storage.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// restore a backup of the production slot.
        /// </param>
        public static void BeginRestoreFromBackupBlobSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, RestoreRequest request)
        {
                ((IWebAppsOperations)operations).BeginRestoreFromBackupBlobSlotAsync(resourceGroupName, name, slot, request).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restores an app from a backup blob in Azure Storage.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// restore a backup of the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginRestoreFromBackupBlobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, RestoreRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginRestoreFromBackupBlobSlotWithHttpMessagesAsync(resourceGroupName, name, slot, request, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Restores a deleted web app to this web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static void BeginRestoreFromDeletedAppSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, DeletedAppRestoreRequest restoreRequest)
        {
                ((IWebAppsOperations)operations).BeginRestoreFromDeletedAppSlotAsync(resourceGroupName, name, slot, restoreRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restores a deleted web app to this web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginRestoreFromDeletedAppSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, DeletedAppRestoreRequest restoreRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginRestoreFromDeletedAppSlotWithHttpMessagesAsync(resourceGroupName, name, slot, restoreRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Restores a web app from a snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        public static void BeginRestoreSnapshotSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SnapshotRestoreRequest restoreRequest)
        {
                ((IWebAppsOperations)operations).BeginRestoreSnapshotSlotAsync(resourceGroupName, name, slot, restoreRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Restores a web app from a snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of web app.
        /// </param>
        /// <param name='slot'>
        /// Name of web app slot. If not specified then will default to production
        /// slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginRestoreSnapshotSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SnapshotRestoreRequest restoreRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginRestoreSnapshotSlotWithHttpMessagesAsync(resourceGroupName, name, slot, restoreRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Install site extension on a web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='siteExtensionId'>
        /// Site extension name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API uses the
        /// production slot.
        /// </param>
        public static SiteExtensionInfo BeginInstallSiteExtensionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, string slot)
        {
                return ((IWebAppsOperations)operations).BeginInstallSiteExtensionSlotAsync(resourceGroupName, name, siteExtensionId, slot).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Install site extension on a web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Site name.
        /// </param>
        /// <param name='siteExtensionId'>
        /// Site extension name.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API uses the
        /// production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteExtensionInfo> BeginInstallSiteExtensionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginInstallSiteExtensionSlotWithHttpMessagesAsync(resourceGroupName, name, siteExtensionId, slot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Swaps two deployment slots of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the source slot. If a slot is not specified, the production slot is
        /// used as the source slot.
        /// </param>
        public static void BeginSwapSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CsmSlotEntity slotSwapEntity)
        {
                ((IWebAppsOperations)operations).BeginSwapSlotAsync(resourceGroupName, name, slot, slotSwapEntity).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Swaps two deployment slots of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the source slot. If a slot is not specified, the production slot is
        /// used as the source slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginSwapSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CsmSlotEntity slotSwapEntity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginSwapSlotWithHttpMessagesAsync(resourceGroupName, name, slot, slotSwapEntity, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Updates the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the source control configuration for the production slot.
        /// </param>
        public static SiteSourceControl BeginCreateOrUpdateSourceControlSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SiteSourceControl siteSourceControl)
        {
                return ((IWebAppsOperations)operations).BeginCreateOrUpdateSourceControlSlotAsync(resourceGroupName, name, slot, siteSourceControl).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='slot'>
        /// Name of the deployment slot. If a slot is not specified, the API will
        /// update the source control configuration for the production slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteSourceControl> BeginCreateOrUpdateSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, SiteSourceControl siteSourceControl, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, slot, siteSourceControl, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for this web app.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        public static object BeginStartNetworkTraceSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string))
        {
                return ((IWebAppsOperations)operations).BeginStartNetworkTraceSlotAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='slot'>
        /// The name of the slot for this web app.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> BeginStartNetworkTraceSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginStartNetworkTraceSlotWithHttpMessagesAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Swaps two deployment slots of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static void BeginSwapSlotWithProduction(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity)
        {
                ((IWebAppsOperations)operations).BeginSwapSlotWithProductionAsync(resourceGroupName, name, slotSwapEntity).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Swaps two deployment slots of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginSwapSlotWithProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginSwapSlotWithProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Updates the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        public static SiteSourceControl BeginCreateOrUpdateSourceControl(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl)
        {
                return ((IWebAppsOperations)operations).BeginCreateOrUpdateSourceControlAsync(resourceGroupName, name, siteSourceControl).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates the source control configuration of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the app.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SiteSourceControl> BeginCreateOrUpdateSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateSourceControlWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        public static object BeginStartNetworkTrace(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string))
        {
                return ((IWebAppsOperations)operations).BeginStartNetworkTraceAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Start capturing network packets for the site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// The name of the web app.
        /// </param>
        /// <param name='durationInSeconds'>
        /// The duration to keep capturing in seconds.
        /// </param>
        /// <param name='maxFrameLength'>
        /// The maximum frame length in bytes (Optional).
        /// </param>
        /// <param name='sasUrl'>
        /// The Blob URL to store capture file.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> BeginStartNetworkTraceAsync(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginStartNetworkTraceWithHttpMessagesAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all apps for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> ListNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all apps for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> ListNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets all web, mobile, and API apps in the specified
        /// resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> ListByResourceGroupNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets all web, mobile, and API apps in the specified
        /// resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> ListByResourceGroupNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets existing backups of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BackupItem> ListBackupsNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListBackupsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets existing backups of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BackupItem>> ListBackupsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBackupsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Returns whether Scm basic auth is allowed and whether Ftp
        /// is allowed for a given site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CsmPublishingCredentialsPoliciesEntity> ListBasicPublishingCredentialsPoliciesNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListBasicPublishingCredentialsPoliciesNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Returns whether Scm basic auth is allowed and whether Ftp
        /// is allowed for a given site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CsmPublishingCredentialsPoliciesEntity>> ListBasicPublishingCredentialsPoliciesNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBasicPublishingCredentialsPoliciesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List the configurations of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SiteConfigResource> ListConfigurationsNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListConfigurationsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List the configurations of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SiteConfigResource>> ListConfigurationsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListConfigurationsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the config reference app settings and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ApiKVReference> GetAppSettingsKeyVaultReferencesNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).GetAppSettingsKeyVaultReferencesNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the config reference app settings and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ApiKVReference>> GetAppSettingsKeyVaultReferencesNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAppSettingsKeyVaultReferencesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the config reference app settings and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ApiKVReference> GetSiteConnectionStringKeyVaultReferencesNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).GetSiteConnectionStringKeyVaultReferencesNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the config reference app settings and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ApiKVReference>> GetSiteConnectionStringKeyVaultReferencesNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetSiteConnectionStringKeyVaultReferencesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a list of web app configuration snapshots identifiers.
        /// Each element of the list contains a timestamp and the ID of the snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SiteConfigurationSnapshotInfo> ListConfigurationSnapshotInfoNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListConfigurationSnapshotInfoNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a list of web app configuration snapshots identifiers.
        /// Each element of the list contains a timestamp and the ID of the snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SiteConfigurationSnapshotInfo>> ListConfigurationSnapshotInfoNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListConfigurationSnapshotInfoNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List continuous web jobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ContinuousWebJob> ListContinuousWebJobsNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListContinuousWebJobsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List continuous web jobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ContinuousWebJob>> ListContinuousWebJobsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListContinuousWebJobsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List deployments for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Deployment> ListDeploymentsNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListDeploymentsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List deployments for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Deployment>> ListDeploymentsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListDeploymentsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Lists ownership identifiers for domain associated with web
        /// app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Identifier> ListDomainOwnershipIdentifiersNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListDomainOwnershipIdentifiersNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Lists ownership identifiers for domain associated with web
        /// app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Identifier>> ListDomainOwnershipIdentifiersNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListDomainOwnershipIdentifiersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List the functions for a web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<FunctionEnvelope> ListFunctionsNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListFunctionsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List the functions for a web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<FunctionEnvelope>> ListFunctionsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListFunctionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get hostname bindings for an app or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<HostNameBinding> ListHostNameBindingsNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListHostNameBindingsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get hostname bindings for an app or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<HostNameBinding>> ListHostNameBindingsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListHostNameBindingsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets all scale-out instances of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WebSiteInstanceStatus> ListInstanceIdentifiersNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListInstanceIdentifiersNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets all scale-out instances of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WebSiteInstanceStatus>> ListInstanceIdentifiersNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListInstanceIdentifiersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get list of processes for a web site, or a deployment slot,
        /// or for a specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessInfo> ListInstanceProcessesNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListInstanceProcessesNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get list of processes for a web site, or a deployment slot,
        /// or for a specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessInfo>> ListInstanceProcessesNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListInstanceProcessesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List module information for a process by its ID for a
        /// specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessModuleInfo> ListInstanceProcessModulesNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListInstanceProcessModulesNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List module information for a process by its ID for a
        /// specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessModuleInfo>> ListInstanceProcessModulesNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListInstanceProcessModulesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List the threads in a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessThreadInfo> ListInstanceProcessThreadsNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListInstanceProcessThreadsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List the threads in a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessThreadInfo>> ListInstanceProcessThreadsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListInstanceProcessThreadsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets existing backups of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BackupItem> ListSiteBackupsNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListSiteBackupsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets existing backups of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BackupItem>> ListSiteBackupsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSiteBackupsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets perfmon counters for web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PerfMonResponse> ListPerfMonCountersNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListPerfMonCountersNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets perfmon counters for web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PerfMonResponse>> ListPerfMonCountersNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListPerfMonCountersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the list of private endpoint connections associated
        /// with a site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RemotePrivateEndpointConnectionARMResource> GetPrivateEndpointConnectionListNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).GetPrivateEndpointConnectionListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the list of private endpoint connections associated
        /// with a site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RemotePrivateEndpointConnectionARMResource>> GetPrivateEndpointConnectionListNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPrivateEndpointConnectionListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get list of processes for a web site, or a deployment slot,
        /// or for a specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessInfo> ListProcessesNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListProcessesNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get list of processes for a web site, or a deployment slot,
        /// or for a specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessInfo>> ListProcessesNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListProcessesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List module information for a process by its ID for a
        /// specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessModuleInfo> ListProcessModulesNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListProcessModulesNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List module information for a process by its ID for a
        /// specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessModuleInfo>> ListProcessModulesNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListProcessModulesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List the threads in a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessThreadInfo> ListProcessThreadsNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListProcessThreadsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List the threads in a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessThreadInfo>> ListProcessThreadsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListProcessThreadsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get public certificates for an app or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PublicCertificate> ListPublicCertificatesNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListPublicCertificatesNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get public certificates for an app or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PublicCertificate>> ListPublicCertificatesNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListPublicCertificatesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get list of siteextensions for a web site, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SiteExtensionInfo> ListSiteExtensionsNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListSiteExtensionsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get list of siteextensions for a web site, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SiteExtensionInfo>> ListSiteExtensionsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSiteExtensionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets an app&#39;s deployment slots.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Site> ListSlotsNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListSlotsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets an app&#39;s deployment slots.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Site>> ListSlotsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSlotsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets existing backups of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BackupItem> ListBackupsSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListBackupsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets existing backups of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BackupItem>> ListBackupsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBackupsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Returns whether Scm basic auth is allowed and whether Ftp
        /// is allowed for a given site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CsmPublishingCredentialsPoliciesEntity> ListBasicPublishingCredentialsPoliciesSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListBasicPublishingCredentialsPoliciesSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Returns whether Scm basic auth is allowed and whether Ftp
        /// is allowed for a given site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CsmPublishingCredentialsPoliciesEntity>> ListBasicPublishingCredentialsPoliciesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBasicPublishingCredentialsPoliciesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List the configurations of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SiteConfigResource> ListConfigurationsSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListConfigurationsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List the configurations of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SiteConfigResource>> ListConfigurationsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListConfigurationsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the config reference app settings and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ApiKVReference> GetAppSettingsKeyVaultReferencesSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).GetAppSettingsKeyVaultReferencesSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the config reference app settings and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ApiKVReference>> GetAppSettingsKeyVaultReferencesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAppSettingsKeyVaultReferencesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the config reference app settings and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ApiKVReference> GetSiteConnectionStringKeyVaultReferencesSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).GetSiteConnectionStringKeyVaultReferencesSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the config reference app settings and status of an app
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ApiKVReference>> GetSiteConnectionStringKeyVaultReferencesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetSiteConnectionStringKeyVaultReferencesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a list of web app configuration snapshots identifiers.
        /// Each element of the list contains a timestamp and the ID of the snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SiteConfigurationSnapshotInfo> ListConfigurationSnapshotInfoSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListConfigurationSnapshotInfoSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a list of web app configuration snapshots identifiers.
        /// Each element of the list contains a timestamp and the ID of the snapshot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SiteConfigurationSnapshotInfo>> ListConfigurationSnapshotInfoSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListConfigurationSnapshotInfoSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List continuous web jobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ContinuousWebJob> ListContinuousWebJobsSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListContinuousWebJobsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List continuous web jobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ContinuousWebJob>> ListContinuousWebJobsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListContinuousWebJobsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List deployments for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Deployment> ListDeploymentsSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListDeploymentsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List deployments for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Deployment>> ListDeploymentsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListDeploymentsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Lists ownership identifiers for domain associated with web
        /// app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Identifier> ListDomainOwnershipIdentifiersSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListDomainOwnershipIdentifiersSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Lists ownership identifiers for domain associated with web
        /// app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Identifier>> ListDomainOwnershipIdentifiersSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListDomainOwnershipIdentifiersSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List the functions for a web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<FunctionEnvelope> ListInstanceFunctionsSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListInstanceFunctionsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List the functions for a web site, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<FunctionEnvelope>> ListInstanceFunctionsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListInstanceFunctionsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get hostname bindings for an app or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<HostNameBinding> ListHostNameBindingsSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListHostNameBindingsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get hostname bindings for an app or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<HostNameBinding>> ListHostNameBindingsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListHostNameBindingsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets all scale-out instances of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WebSiteInstanceStatus> ListInstanceIdentifiersSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListInstanceIdentifiersSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets all scale-out instances of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WebSiteInstanceStatus>> ListInstanceIdentifiersSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListInstanceIdentifiersSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get list of processes for a web site, or a deployment slot,
        /// or for a specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessInfo> ListInstanceProcessesSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListInstanceProcessesSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get list of processes for a web site, or a deployment slot,
        /// or for a specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessInfo>> ListInstanceProcessesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListInstanceProcessesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List module information for a process by its ID for a
        /// specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessModuleInfo> ListInstanceProcessModulesSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListInstanceProcessModulesSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List module information for a process by its ID for a
        /// specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessModuleInfo>> ListInstanceProcessModulesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListInstanceProcessModulesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List the threads in a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessThreadInfo> ListInstanceProcessThreadsSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListInstanceProcessThreadsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List the threads in a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessThreadInfo>> ListInstanceProcessThreadsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListInstanceProcessThreadsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets existing backups of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BackupItem> ListSiteBackupsSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListSiteBackupsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets existing backups of an app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BackupItem>> ListSiteBackupsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSiteBackupsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets perfmon counters for web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PerfMonResponse> ListPerfMonCountersSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListPerfMonCountersSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets perfmon counters for web app.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PerfMonResponse>> ListPerfMonCountersSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListPerfMonCountersSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the list of private endpoint connections associated
        /// with a site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RemotePrivateEndpointConnectionARMResource> GetPrivateEndpointConnectionListSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).GetPrivateEndpointConnectionListSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the list of private endpoint connections associated
        /// with a site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RemotePrivateEndpointConnectionARMResource>> GetPrivateEndpointConnectionListSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPrivateEndpointConnectionListSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get list of processes for a web site, or a deployment slot,
        /// or for a specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessInfo> ListProcessesSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListProcessesSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get list of processes for a web site, or a deployment slot,
        /// or for a specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessInfo>> ListProcessesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListProcessesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List module information for a process by its ID for a
        /// specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessModuleInfo> ListProcessModulesSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListProcessModulesSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List module information for a process by its ID for a
        /// specific scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessModuleInfo>> ListProcessModulesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListProcessModulesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List the threads in a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProcessThreadInfo> ListProcessThreadsSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListProcessThreadsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List the threads in a process by its ID for a specific
        /// scaled-out instance in a web site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProcessThreadInfo>> ListProcessThreadsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListProcessThreadsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get public certificates for an app or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PublicCertificate> ListPublicCertificatesSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListPublicCertificatesSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get public certificates for an app or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PublicCertificate>> ListPublicCertificatesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListPublicCertificatesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get list of siteextensions for a web site, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SiteExtensionInfo> ListSiteExtensionsSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListSiteExtensionsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get list of siteextensions for a web site, or a deployment
        /// slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SiteExtensionInfo>> ListSiteExtensionsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSiteExtensionsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the difference in configuration settings between two
        /// web app slots.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SlotDifference> ListSlotDifferencesSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListSlotDifferencesSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the difference in configuration settings between two
        /// web app slots.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SlotDifference>> ListSlotDifferencesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSlotDifferencesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Returns all Snapshots to the user.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Snapshot> ListSnapshotsSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListSnapshotsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Returns all Snapshots to the user.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Snapshot>> ListSnapshotsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSnapshotsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Returns all Snapshots to the user from DRSecondary
        /// endpoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Snapshot> ListSnapshotsFromDRSecondarySlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListSnapshotsFromDRSecondarySlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Returns all Snapshots to the user from DRSecondary
        /// endpoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Snapshot>> ListSnapshotsFromDRSecondarySlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSnapshotsFromDRSecondarySlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List triggered web jobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TriggeredWebJob> ListTriggeredWebJobsSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListTriggeredWebJobsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List triggered web jobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TriggeredWebJob>> ListTriggeredWebJobsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListTriggeredWebJobsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List a triggered web job&#39;s history for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TriggeredJobHistory> ListTriggeredWebJobHistorySlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListTriggeredWebJobHistorySlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List a triggered web job&#39;s history for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TriggeredJobHistory>> ListTriggeredWebJobHistorySlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListTriggeredWebJobHistorySlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the quota usage information of an app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CsmUsageQuota> ListUsagesSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListUsagesSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the quota usage information of an app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CsmUsageQuota>> ListUsagesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListUsagesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List webjobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WebJob> ListWebJobsSlotNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListWebJobsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List webjobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WebJob>> ListWebJobsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWebJobsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get the difference in configuration settings between two
        /// web app slots.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SlotDifference> ListSlotDifferencesFromProductionNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListSlotDifferencesFromProductionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get the difference in configuration settings between two
        /// web app slots.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SlotDifference>> ListSlotDifferencesFromProductionNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSlotDifferencesFromProductionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Returns all Snapshots to the user.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Snapshot> ListSnapshotsNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListSnapshotsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Returns all Snapshots to the user.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Snapshot>> ListSnapshotsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSnapshotsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Returns all Snapshots to the user from DRSecondary
        /// endpoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Snapshot> ListSnapshotsFromDRSecondaryNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListSnapshotsFromDRSecondaryNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Returns all Snapshots to the user from DRSecondary
        /// endpoint.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Snapshot>> ListSnapshotsFromDRSecondaryNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSnapshotsFromDRSecondaryNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List triggered web jobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TriggeredWebJob> ListTriggeredWebJobsNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListTriggeredWebJobsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List triggered web jobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TriggeredWebJob>> ListTriggeredWebJobsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListTriggeredWebJobsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List a triggered web job&#39;s history for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TriggeredJobHistory> ListTriggeredWebJobHistoryNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListTriggeredWebJobHistoryNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List a triggered web job&#39;s history for an app, or a
        /// deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TriggeredJobHistory>> ListTriggeredWebJobHistoryNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListTriggeredWebJobHistoryNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the quota usage information of an app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CsmUsageQuota> ListUsagesNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListUsagesNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the quota usage information of an app (or deployment
        /// slot, if specified).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CsmUsageQuota>> ListUsagesNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListUsagesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for List webjobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WebJob> ListWebJobsNext(this IWebAppsOperations operations, string nextPageLink)
        {
                return ((IWebAppsOperations)operations).ListWebJobsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for List webjobs for an app, or a deployment slot.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WebJob>> ListWebJobsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWebJobsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
