// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DomainsOperations
    /// </summary>
    public static partial class DomainsOperationsExtensions
    {
        /// <summary>
        /// Description for Check if a domain is available for registration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static DomainAvailabilityCheckResult CheckAvailability(this IDomainsOperations operations, NameIdentifier identifier)
        {
                return ((IDomainsOperations)operations).CheckAvailabilityAsync(identifier).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Check if a domain is available for registration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DomainAvailabilityCheckResult> CheckAvailabilityAsync(this IDomainsOperations operations, NameIdentifier identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckAvailabilityWithHttpMessagesAsync(identifier, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all domains in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Domain> List(this IDomainsOperations operations)
        {
                return ((IDomainsOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all domains in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Domain>> ListAsync(this IDomainsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Generate a single sign-on request for the domain management
        /// portal.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static DomainControlCenterSsoRequest GetControlCenterSsoRequest(this IDomainsOperations operations)
        {
                return ((IDomainsOperations)operations).GetControlCenterSsoRequestAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Generate a single sign-on request for the domain management
        /// portal.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DomainControlCenterSsoRequest> GetControlCenterSsoRequestAsync(this IDomainsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetControlCenterSsoRequestWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get domain name recommendations based on keywords.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<NameIdentifier> ListRecommendations(this IDomainsOperations operations, DomainRecommendationSearchParameters parameters)
        {
                return ((IDomainsOperations)operations).ListRecommendationsAsync(parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get domain name recommendations based on keywords.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<NameIdentifier>> ListRecommendationsAsync(this IDomainsOperations operations, DomainRecommendationSearchParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListRecommendationsWithHttpMessagesAsync(parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all domains in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Domain> ListByResourceGroup(this IDomainsOperations operations, string resourceGroupName)
        {
                return ((IDomainsOperations)operations).ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all domains in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Domain>> ListByResourceGroupAsync(this IDomainsOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get a domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of the domain.
        /// </param>
        public static Domain Get(this IDomainsOperations operations, string resourceGroupName, string domainName)
        {
                return ((IDomainsOperations)operations).GetAsync(resourceGroupName, domainName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get a domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of the domain.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Domain> GetAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, domainName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates or updates a domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of the domain.
        /// </param>
        public static Domain CreateOrUpdate(this IDomainsOperations operations, string resourceGroupName, string domainName, Domain domain)
        {
                return ((IDomainsOperations)operations).CreateOrUpdateAsync(resourceGroupName, domainName, domain).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates or updates a domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of the domain.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Domain> CreateOrUpdateAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, Domain domain, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, domainName, domain, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete a domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of the domain.
        /// </param>
        /// <param name='forceHardDeleteDomain'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to delete the domain immediately. The default is
        /// &lt;code&gt;false&lt;/code&gt; which deletes the domain after 24 hours.
        /// </param>
        public static void Delete(this IDomainsOperations operations, string resourceGroupName, string domainName, bool? forceHardDeleteDomain = default(bool?))
        {
                ((IDomainsOperations)operations).DeleteAsync(resourceGroupName, domainName, forceHardDeleteDomain).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete a domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of the domain.
        /// </param>
        /// <param name='forceHardDeleteDomain'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to delete the domain immediately. The default is
        /// &lt;code&gt;false&lt;/code&gt; which deletes the domain after 24 hours.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, bool? forceHardDeleteDomain = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, domainName, forceHardDeleteDomain, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates or updates a domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of the domain.
        /// </param>
        public static Domain Update(this IDomainsOperations operations, string resourceGroupName, string domainName, DomainPatchResource domain)
        {
                return ((IDomainsOperations)operations).UpdateAsync(resourceGroupName, domainName, domain).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates or updates a domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of the domain.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Domain> UpdateAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, DomainPatchResource domain, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, domainName, domain, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Lists domain ownership identifiers.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of domain.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DomainOwnershipIdentifier> ListOwnershipIdentifiers(this IDomainsOperations operations, string resourceGroupName, string domainName)
        {
                return ((IDomainsOperations)operations).ListOwnershipIdentifiersAsync(resourceGroupName, domainName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Lists domain ownership identifiers.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of domain.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DomainOwnershipIdentifier>> ListOwnershipIdentifiersAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListOwnershipIdentifiersWithHttpMessagesAsync(resourceGroupName, domainName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get ownership identifier for domain
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of domain.
        /// </param>
        /// <param name='name'>
        /// Name of identifier.
        /// </param>
        public static DomainOwnershipIdentifier GetOwnershipIdentifier(this IDomainsOperations operations, string resourceGroupName, string domainName, string name)
        {
                return ((IDomainsOperations)operations).GetOwnershipIdentifierAsync(resourceGroupName, domainName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get ownership identifier for domain
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of domain.
        /// </param>
        /// <param name='name'>
        /// Name of identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DomainOwnershipIdentifier> GetOwnershipIdentifierAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, domainName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates an ownership identifier for a domain or updates
        /// identifier details for an existing identifier
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of domain.
        /// </param>
        /// <param name='name'>
        /// Name of identifier.
        /// </param>
        public static DomainOwnershipIdentifier CreateOrUpdateOwnershipIdentifier(this IDomainsOperations operations, string resourceGroupName, string domainName, string name, DomainOwnershipIdentifier domainOwnershipIdentifier)
        {
                return ((IDomainsOperations)operations).CreateOrUpdateOwnershipIdentifierAsync(resourceGroupName, domainName, name, domainOwnershipIdentifier).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates an ownership identifier for a domain or updates
        /// identifier details for an existing identifier
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of domain.
        /// </param>
        /// <param name='name'>
        /// Name of identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DomainOwnershipIdentifier> CreateOrUpdateOwnershipIdentifierAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, string name, DomainOwnershipIdentifier domainOwnershipIdentifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, domainName, name, domainOwnershipIdentifier, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Delete ownership identifier for domain
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of domain.
        /// </param>
        /// <param name='name'>
        /// Name of identifier.
        /// </param>
        public static void DeleteOwnershipIdentifier(this IDomainsOperations operations, string resourceGroupName, string domainName, string name)
        {
                ((IDomainsOperations)operations).DeleteOwnershipIdentifierAsync(resourceGroupName, domainName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Delete ownership identifier for domain
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of domain.
        /// </param>
        /// <param name='name'>
        /// Name of identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteOwnershipIdentifierAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, domainName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates an ownership identifier for a domain or updates
        /// identifier details for an existing identifier
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of domain.
        /// </param>
        /// <param name='name'>
        /// Name of identifier.
        /// </param>
        public static DomainOwnershipIdentifier UpdateOwnershipIdentifier(this IDomainsOperations operations, string resourceGroupName, string domainName, string name, DomainOwnershipIdentifier domainOwnershipIdentifier)
        {
                return ((IDomainsOperations)operations).UpdateOwnershipIdentifierAsync(resourceGroupName, domainName, name, domainOwnershipIdentifier).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates an ownership identifier for a domain or updates
        /// identifier details for an existing identifier
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of domain.
        /// </param>
        /// <param name='name'>
        /// Name of identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DomainOwnershipIdentifier> UpdateOwnershipIdentifierAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, string name, DomainOwnershipIdentifier domainOwnershipIdentifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, domainName, name, domainOwnershipIdentifier, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Renew a domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of the domain.
        /// </param>
        public static void Renew(this IDomainsOperations operations, string resourceGroupName, string domainName)
        {
                ((IDomainsOperations)operations).RenewAsync(resourceGroupName, domainName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Renew a domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of the domain.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RenewAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RenewWithHttpMessagesAsync(resourceGroupName, domainName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates or updates a domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of the domain.
        /// </param>
        public static Domain BeginCreateOrUpdate(this IDomainsOperations operations, string resourceGroupName, string domainName, Domain domain)
        {
                return ((IDomainsOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, domainName, domain).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates or updates a domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='domainName'>
        /// Name of the domain.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Domain> BeginCreateOrUpdateAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, Domain domain, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, domainName, domain, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all domains in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Domain> ListNext(this IDomainsOperations operations, string nextPageLink)
        {
                return ((IDomainsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all domains in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Domain>> ListNextAsync(this IDomainsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get domain name recommendations based on keywords.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<NameIdentifier> ListRecommendationsNext(this IDomainsOperations operations, string nextPageLink)
        {
                return ((IDomainsOperations)operations).ListRecommendationsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get domain name recommendations based on keywords.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<NameIdentifier>> ListRecommendationsNextAsync(this IDomainsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListRecommendationsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all domains in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Domain> ListByResourceGroupNext(this IDomainsOperations operations, string nextPageLink)
        {
                return ((IDomainsOperations)operations).ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all domains in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Domain>> ListByResourceGroupNextAsync(this IDomainsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Lists domain ownership identifiers.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DomainOwnershipIdentifier> ListOwnershipIdentifiersNext(this IDomainsOperations operations, string nextPageLink)
        {
                return ((IDomainsOperations)operations).ListOwnershipIdentifiersNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Lists domain ownership identifiers.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DomainOwnershipIdentifier>> ListOwnershipIdentifiersNextAsync(this IDomainsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListOwnershipIdentifiersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
