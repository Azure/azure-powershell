// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for StaticSitesOperations
    /// </summary>
    public static partial class StaticSitesOperationsExtensions
    {
        /// <summary>
        /// Description for Generates a preview workflow file for the static site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// Location where you plan to create the static site.
        /// </param>
        public static StaticSitesWorkflowPreview PreviewWorkflow(this IStaticSitesOperations operations, string location, StaticSitesWorkflowPreviewRequest staticSitesWorkflowPreviewRequest)
        {
                return ((IStaticSitesOperations)operations).PreviewWorkflowAsync(location, staticSitesWorkflowPreviewRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Generates a preview workflow file for the static site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// Location where you plan to create the static site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StaticSitesWorkflowPreview> PreviewWorkflowAsync(this IStaticSitesOperations operations, string location, StaticSitesWorkflowPreviewRequest staticSitesWorkflowPreviewRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.PreviewWorkflowWithHttpMessagesAsync(location, staticSitesWorkflowPreviewRequest, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get all Static Sites for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StaticSiteARMResource> List(this IStaticSitesOperations operations)
        {
                return ((IStaticSitesOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all Static Sites for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StaticSiteARMResource>> ListAsync(this IStaticSitesOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets all static sites in the specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StaticSiteARMResource> GetStaticSitesByResourceGroup(this IStaticSitesOperations operations, string resourceGroupName)
        {
                return ((IStaticSitesOperations)operations).GetStaticSitesByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets all static sites in the specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StaticSiteARMResource>> GetStaticSitesByResourceGroupAsync(this IStaticSitesOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetStaticSitesByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the details of a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        public static StaticSiteARMResource GetStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name)
        {
                return ((IStaticSitesOperations)operations).GetStaticSiteAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the details of a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StaticSiteARMResource> GetStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetStaticSiteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates a new static site in an existing resource group, or
        /// updates an existing static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site to create or update.
        /// </param>
        public static StaticSiteARMResource CreateOrUpdateStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSiteARMResource staticSiteEnvelope)
        {
                return ((IStaticSitesOperations)operations).CreateOrUpdateStaticSiteAsync(resourceGroupName, name, staticSiteEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a new static site in an existing resource group, or
        /// updates an existing static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site to create or update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StaticSiteARMResource> CreateOrUpdateStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSiteARMResource staticSiteEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateStaticSiteWithHttpMessagesAsync(resourceGroupName, name, staticSiteEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site to delete.
        /// </param>
        public static void DeleteStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name)
        {
                ((IStaticSitesOperations)operations).DeleteStaticSiteAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteStaticSiteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates a new static site in an existing resource group, or
        /// updates an existing static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site to create or update.
        /// </param>
        public static StaticSiteARMResource UpdateStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSitePatchResource staticSiteEnvelope)
        {
                return ((IStaticSitesOperations)operations).UpdateStaticSiteAsync(resourceGroupName, name, staticSiteEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a new static site in an existing resource group, or
        /// updates an existing static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site to create or update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StaticSiteARMResource> UpdateStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSitePatchResource staticSiteEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateStaticSiteWithHttpMessagesAsync(resourceGroupName, name, staticSiteEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the list of users of a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='authprovider'>
        /// The auth provider for the users.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StaticSiteUserARMResource> ListStaticSiteUsers(this IStaticSitesOperations operations, string resourceGroupName, string name, string authprovider)
        {
                return ((IStaticSitesOperations)operations).ListStaticSiteUsersAsync(resourceGroupName, name, authprovider).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the list of users of a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='authprovider'>
        /// The auth provider for the users.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StaticSiteUserARMResource>> ListStaticSiteUsersAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string authprovider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListStaticSiteUsersWithHttpMessagesAsync(resourceGroupName, name, authprovider, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes the user entry from the static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the staticsite.
        /// </param>
        /// <param name='authprovider'>
        /// The auth provider for this user.
        /// </param>
        /// <param name='userid'>
        /// The user id of the user.
        /// </param>
        public static void DeleteStaticSiteUser(this IStaticSitesOperations operations, string resourceGroupName, string name, string authprovider, string userid)
        {
                ((IStaticSitesOperations)operations).DeleteStaticSiteUserAsync(resourceGroupName, name, authprovider, userid).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes the user entry from the static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the staticsite.
        /// </param>
        /// <param name='authprovider'>
        /// The auth provider for this user.
        /// </param>
        /// <param name='userid'>
        /// The user id of the user.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteStaticSiteUserAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string authprovider, string userid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteStaticSiteUserWithHttpMessagesAsync(resourceGroupName, name, authprovider, userid, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Updates a user entry with the listed roles
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='authprovider'>
        /// The auth provider for this user.
        /// </param>
        /// <param name='userid'>
        /// The user id of the user.
        /// </param>
        public static StaticSiteUserARMResource UpdateStaticSiteUser(this IStaticSitesOperations operations, string resourceGroupName, string name, string authprovider, string userid, StaticSiteUserARMResource staticSiteUserEnvelope)
        {
                return ((IStaticSitesOperations)operations).UpdateStaticSiteUserAsync(resourceGroupName, name, authprovider, userid, staticSiteUserEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Updates a user entry with the listed roles
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='authprovider'>
        /// The auth provider for this user.
        /// </param>
        /// <param name='userid'>
        /// The user id of the user.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StaticSiteUserARMResource> UpdateStaticSiteUserAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string authprovider, string userid, StaticSiteUserARMResource staticSiteUserEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateStaticSiteUserWithHttpMessagesAsync(resourceGroupName, name, authprovider, userid, staticSiteUserEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets all static site builds for a particular static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StaticSiteBuildARMResource> GetStaticSiteBuilds(this IStaticSitesOperations operations, string resourceGroupName, string name)
        {
                return ((IStaticSitesOperations)operations).GetStaticSiteBuildsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets all static site builds for a particular static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StaticSiteBuildARMResource>> GetStaticSiteBuildsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetStaticSiteBuildsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the details of a static site build.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        public static StaticSiteBuildARMResource GetStaticSiteBuild(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName)
        {
                return ((IStaticSitesOperations)operations).GetStaticSiteBuildAsync(resourceGroupName, name, environmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the details of a static site build.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StaticSiteBuildARMResource> GetStaticSiteBuildAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetStaticSiteBuildWithHttpMessagesAsync(resourceGroupName, name, environmentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a static site build.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        public static void DeleteStaticSiteBuild(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName)
        {
                ((IStaticSitesOperations)operations).DeleteStaticSiteBuildAsync(resourceGroupName, name, environmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a static site build.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteStaticSiteBuildAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteStaticSiteBuildWithHttpMessagesAsync(resourceGroupName, name, environmentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates or updates the app settings of a static site build.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        public static StringDictionary CreateOrUpdateStaticSiteBuildAppSettings(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, StringDictionary appSettings)
        {
                return ((IStaticSitesOperations)operations).CreateOrUpdateStaticSiteBuildAppSettingsAsync(resourceGroupName, name, environmentName, appSettings).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates or updates the app settings of a static site build.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringDictionary> CreateOrUpdateStaticSiteBuildAppSettingsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, StringDictionary appSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateStaticSiteBuildAppSettingsWithHttpMessagesAsync(resourceGroupName, name, environmentName, appSettings, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates or updates the function app settings of a static
        /// site build.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        public static StringDictionary CreateOrUpdateStaticSiteBuildFunctionAppSettings(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, StringDictionary appSettings)
        {
                return ((IStaticSitesOperations)operations).CreateOrUpdateStaticSiteBuildFunctionAppSettingsAsync(resourceGroupName, name, environmentName, appSettings).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates or updates the function app settings of a static
        /// site build.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringDictionary> CreateOrUpdateStaticSiteBuildFunctionAppSettingsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, StringDictionary appSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateStaticSiteBuildFunctionAppSettingsWithHttpMessagesAsync(resourceGroupName, name, environmentName, appSettings, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the functions of a particular static site build.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StaticSiteFunctionOverviewARMResource> ListStaticSiteBuildFunctions(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName)
        {
                return ((IStaticSitesOperations)operations).ListStaticSiteBuildFunctionsAsync(resourceGroupName, name, environmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the functions of a particular static site build.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StaticSiteFunctionOverviewARMResource>> ListStaticSiteBuildFunctionsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListStaticSiteBuildFunctionsWithHttpMessagesAsync(resourceGroupName, name, environmentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the application settings of a static site build.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        public static StringDictionary ListStaticSiteBuildAppSettings(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName)
        {
                return ((IStaticSitesOperations)operations).ListStaticSiteBuildAppSettingsAsync(resourceGroupName, name, environmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the application settings of a static site build.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringDictionary> ListStaticSiteBuildAppSettingsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListStaticSiteBuildAppSettingsWithHttpMessagesAsync(resourceGroupName, name, environmentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the application settings of a static site build.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        public static StringDictionary ListStaticSiteBuildFunctionAppSettings(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName)
        {
                return ((IStaticSitesOperations)operations).ListStaticSiteBuildFunctionAppSettingsAsync(resourceGroupName, name, environmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the application settings of a static site build.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringDictionary> ListStaticSiteBuildFunctionAppSettingsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListStaticSiteBuildFunctionAppSettingsWithHttpMessagesAsync(resourceGroupName, name, environmentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the details of the user provided function apps
        /// registered with a static site build
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StaticSiteUserProvidedFunctionAppARMResource> GetUserProvidedFunctionAppsForStaticSiteBuild(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName)
        {
                return ((IStaticSitesOperations)operations).GetUserProvidedFunctionAppsForStaticSiteBuildAsync(resourceGroupName, name, environmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the details of the user provided function apps
        /// registered with a static site build
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StaticSiteUserProvidedFunctionAppARMResource>> GetUserProvidedFunctionAppsForStaticSiteBuildAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetUserProvidedFunctionAppsForStaticSiteBuildWithHttpMessagesAsync(resourceGroupName, name, environmentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the details of the user provided function app
        /// registered with a static site build
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        /// <param name='functionAppName'>
        /// Name of the function app registered with the static site build.
        /// </param>
        public static StaticSiteUserProvidedFunctionAppARMResource GetUserProvidedFunctionAppForStaticSiteBuild(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, string functionAppName)
        {
                return ((IStaticSitesOperations)operations).GetUserProvidedFunctionAppForStaticSiteBuildAsync(resourceGroupName, name, environmentName, functionAppName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the details of the user provided function app
        /// registered with a static site build
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        /// <param name='functionAppName'>
        /// Name of the function app registered with the static site build.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StaticSiteUserProvidedFunctionAppARMResource> GetUserProvidedFunctionAppForStaticSiteBuildAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, string functionAppName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetUserProvidedFunctionAppForStaticSiteBuildWithHttpMessagesAsync(resourceGroupName, name, environmentName, functionAppName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Register a user provided function app with a static site
        /// build
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        /// <param name='functionAppName'>
        /// Name of the function app to register with the static site build.
        /// </param>
        /// <param name='isForced'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to force the update of the auth configuration on
        /// the function app even if an AzureStaticWebApps provider is already
        /// configured on the function app. The default is &lt;code&gt;false&lt;/code&gt;.
        /// </param>
        public static StaticSiteUserProvidedFunctionAppARMResource RegisterUserProvidedFunctionAppWithStaticSiteBuild(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, string functionAppName, StaticSiteUserProvidedFunctionAppARMResource staticSiteUserProvidedFunctionEnvelope, bool? isForced = default(bool?))
        {
                return ((IStaticSitesOperations)operations).RegisterUserProvidedFunctionAppWithStaticSiteBuildAsync(resourceGroupName, name, environmentName, functionAppName, staticSiteUserProvidedFunctionEnvelope, isForced).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Register a user provided function app with a static site
        /// build
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        /// <param name='functionAppName'>
        /// Name of the function app to register with the static site build.
        /// </param>
        /// <param name='isForced'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to force the update of the auth configuration on
        /// the function app even if an AzureStaticWebApps provider is already
        /// configured on the function app. The default is &lt;code&gt;false&lt;/code&gt;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StaticSiteUserProvidedFunctionAppARMResource> RegisterUserProvidedFunctionAppWithStaticSiteBuildAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, string functionAppName, StaticSiteUserProvidedFunctionAppARMResource staticSiteUserProvidedFunctionEnvelope, bool? isForced = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.RegisterUserProvidedFunctionAppWithStaticSiteBuildWithHttpMessagesAsync(resourceGroupName, name, environmentName, functionAppName, staticSiteUserProvidedFunctionEnvelope, isForced, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Detach the user provided function app from the static site
        /// build
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        /// <param name='functionAppName'>
        /// Name of the function app registered with the static site build.
        /// </param>
        public static void DetachUserProvidedFunctionAppFromStaticSiteBuild(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, string functionAppName)
        {
                ((IStaticSitesOperations)operations).DetachUserProvidedFunctionAppFromStaticSiteBuildAsync(resourceGroupName, name, environmentName, functionAppName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Detach the user provided function app from the static site
        /// build
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        /// <param name='functionAppName'>
        /// Name of the function app registered with the static site build.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DetachUserProvidedFunctionAppFromStaticSiteBuildAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, string functionAppName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DetachUserProvidedFunctionAppFromStaticSiteBuildWithHttpMessagesAsync(resourceGroupName, name, environmentName, functionAppName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Deploys zipped content to a specific environment of a
        /// static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// Name of the environment.
        /// </param>
        public static void CreateZipDeploymentForStaticSiteBuild(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, StaticSiteZipDeploymentARMResource staticSiteZipDeploymentEnvelope)
        {
                ((IStaticSitesOperations)operations).CreateZipDeploymentForStaticSiteBuildAsync(resourceGroupName, name, environmentName, staticSiteZipDeploymentEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deploys zipped content to a specific environment of a
        /// static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// Name of the environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task CreateZipDeploymentForStaticSiteBuildAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, StaticSiteZipDeploymentARMResource staticSiteZipDeploymentEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.CreateZipDeploymentForStaticSiteBuildWithHttpMessagesAsync(resourceGroupName, name, environmentName, staticSiteZipDeploymentEnvelope, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates or updates the app settings of a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        public static StringDictionary CreateOrUpdateStaticSiteAppSettings(this IStaticSitesOperations operations, string resourceGroupName, string name, StringDictionary appSettings)
        {
                return ((IStaticSitesOperations)operations).CreateOrUpdateStaticSiteAppSettingsAsync(resourceGroupName, name, appSettings).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates or updates the app settings of a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringDictionary> CreateOrUpdateStaticSiteAppSettingsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, StringDictionary appSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateStaticSiteAppSettingsWithHttpMessagesAsync(resourceGroupName, name, appSettings, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates or updates the function app settings of a static
        /// site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        public static StringDictionary CreateOrUpdateStaticSiteFunctionAppSettings(this IStaticSitesOperations operations, string resourceGroupName, string name, StringDictionary appSettings)
        {
                return ((IStaticSitesOperations)operations).CreateOrUpdateStaticSiteFunctionAppSettingsAsync(resourceGroupName, name, appSettings).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates or updates the function app settings of a static
        /// site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringDictionary> CreateOrUpdateStaticSiteFunctionAppSettingsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, StringDictionary appSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateStaticSiteFunctionAppSettingsWithHttpMessagesAsync(resourceGroupName, name, appSettings, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates an invitation link for a user with the role
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        public static StaticSiteUserInvitationResponseResource CreateUserRolesInvitationLink(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSiteUserInvitationRequestResource staticSiteUserRolesInvitationEnvelope)
        {
                return ((IStaticSitesOperations)operations).CreateUserRolesInvitationLinkAsync(resourceGroupName, name, staticSiteUserRolesInvitationEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates an invitation link for a user with the role
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StaticSiteUserInvitationResponseResource> CreateUserRolesInvitationLinkAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSiteUserInvitationRequestResource staticSiteUserRolesInvitationEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateUserRolesInvitationLinkWithHttpMessagesAsync(resourceGroupName, name, staticSiteUserRolesInvitationEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets all static site custom domains for a particular static
        /// site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site resource to search in.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StaticSiteCustomDomainOverviewARMResource> ListStaticSiteCustomDomains(this IStaticSitesOperations operations, string resourceGroupName, string name)
        {
                return ((IStaticSitesOperations)operations).ListStaticSiteCustomDomainsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets all static site custom domains for a particular static
        /// site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site resource to search in.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StaticSiteCustomDomainOverviewARMResource>> ListStaticSiteCustomDomainsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListStaticSiteCustomDomainsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets an existing custom domain for a particular static
        /// site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site resource to search in.
        /// </param>
        /// <param name='domainName'>
        /// The custom domain name.
        /// </param>
        public static StaticSiteCustomDomainOverviewARMResource GetStaticSiteCustomDomain(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName)
        {
                return ((IStaticSitesOperations)operations).GetStaticSiteCustomDomainAsync(resourceGroupName, name, domainName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets an existing custom domain for a particular static
        /// site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site resource to search in.
        /// </param>
        /// <param name='domainName'>
        /// The custom domain name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StaticSiteCustomDomainOverviewARMResource> GetStaticSiteCustomDomainAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetStaticSiteCustomDomainWithHttpMessagesAsync(resourceGroupName, name, domainName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Creates a new static site custom domain in an existing
        /// resource group and static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='domainName'>
        /// The custom domain to create.
        /// </param>
        public static StaticSiteCustomDomainOverviewARMResource CreateOrUpdateStaticSiteCustomDomain(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName, StaticSiteCustomDomainRequestPropertiesARMResource staticSiteCustomDomainRequestPropertiesEnvelope)
        {
                return ((IStaticSitesOperations)operations).CreateOrUpdateStaticSiteCustomDomainAsync(resourceGroupName, name, domainName, staticSiteCustomDomainRequestPropertiesEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a new static site custom domain in an existing
        /// resource group and static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='domainName'>
        /// The custom domain to create.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StaticSiteCustomDomainOverviewARMResource> CreateOrUpdateStaticSiteCustomDomainAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName, StaticSiteCustomDomainRequestPropertiesARMResource staticSiteCustomDomainRequestPropertiesEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateStaticSiteCustomDomainWithHttpMessagesAsync(resourceGroupName, name, domainName, staticSiteCustomDomainRequestPropertiesEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a custom domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='domainName'>
        /// The custom domain to delete.
        /// </param>
        public static void DeleteStaticSiteCustomDomain(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName)
        {
                ((IStaticSitesOperations)operations).DeleteStaticSiteCustomDomainAsync(resourceGroupName, name, domainName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a custom domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='domainName'>
        /// The custom domain to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteStaticSiteCustomDomainAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteStaticSiteCustomDomainWithHttpMessagesAsync(resourceGroupName, name, domainName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Validates a particular custom domain can be added to a
        /// static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='domainName'>
        /// The custom domain to validate.
        /// </param>
        public static void ValidateCustomDomainCanBeAddedToStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName, StaticSiteCustomDomainRequestPropertiesARMResource staticSiteCustomDomainRequestPropertiesEnvelope)
        {
                ((IStaticSitesOperations)operations).ValidateCustomDomainCanBeAddedToStaticSiteAsync(resourceGroupName, name, domainName, staticSiteCustomDomainRequestPropertiesEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Validates a particular custom domain can be added to a
        /// static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='domainName'>
        /// The custom domain to validate.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ValidateCustomDomainCanBeAddedToStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName, StaticSiteCustomDomainRequestPropertiesARMResource staticSiteCustomDomainRequestPropertiesEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.ValidateCustomDomainCanBeAddedToStaticSiteWithHttpMessagesAsync(resourceGroupName, name, domainName, staticSiteCustomDomainRequestPropertiesEnvelope, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Detaches a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site to detach.
        /// </param>
        public static void DetachStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name)
        {
                ((IStaticSitesOperations)operations).DetachStaticSiteAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Detaches a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site to detach.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DetachStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DetachStaticSiteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Gets the functions of a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StaticSiteFunctionOverviewARMResource> ListStaticSiteFunctions(this IStaticSitesOperations operations, string resourceGroupName, string name)
        {
                return ((IStaticSitesOperations)operations).ListStaticSiteFunctionsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the functions of a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StaticSiteFunctionOverviewARMResource>> ListStaticSiteFunctionsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListStaticSiteFunctionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the application settings of a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        public static StringDictionary ListStaticSiteAppSettings(this IStaticSitesOperations operations, string resourceGroupName, string name)
        {
                return ((IStaticSitesOperations)operations).ListStaticSiteAppSettingsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the application settings of a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringDictionary> ListStaticSiteAppSettingsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListStaticSiteAppSettingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Lists the roles configured for the static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        public static StringList ListStaticSiteConfiguredRoles(this IStaticSitesOperations operations, string resourceGroupName, string name)
        {
                return ((IStaticSitesOperations)operations).ListStaticSiteConfiguredRolesAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Lists the roles configured for the static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringList> ListStaticSiteConfiguredRolesAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListStaticSiteConfiguredRolesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the application settings of a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        public static StringDictionary ListStaticSiteFunctionAppSettings(this IStaticSitesOperations operations, string resourceGroupName, string name)
        {
                return ((IStaticSitesOperations)operations).ListStaticSiteFunctionAppSettingsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the application settings of a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringDictionary> ListStaticSiteFunctionAppSettingsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListStaticSiteFunctionAppSettingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Lists the secrets for an existing static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        public static StringDictionary ListStaticSiteSecrets(this IStaticSitesOperations operations, string resourceGroupName, string name)
        {
                return ((IStaticSitesOperations)operations).ListStaticSiteSecretsAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Lists the secrets for an existing static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringDictionary> ListStaticSiteSecretsAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListStaticSiteSecretsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the list of private endpoint connections associated
        /// with a static site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RemotePrivateEndpointConnectionARMResource> GetPrivateEndpointConnectionList(this IStaticSitesOperations operations, string resourceGroupName, string name)
        {
                return ((IStaticSitesOperations)operations).GetPrivateEndpointConnectionListAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the list of private endpoint connections associated
        /// with a static site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RemotePrivateEndpointConnectionARMResource>> GetPrivateEndpointConnectionListAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPrivateEndpointConnectionListWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection.
        /// </param>
        public static RemotePrivateEndpointConnectionARMResource GetPrivateEndpointConnection(this IStaticSitesOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName)
        {
                return ((IStaticSitesOperations)operations).GetPrivateEndpointConnectionAsync(resourceGroupName, name, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RemotePrivateEndpointConnectionARMResource> GetPrivateEndpointConnectionAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Approves or rejects a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection.
        /// </param>
        public static RemotePrivateEndpointConnectionARMResource ApproveOrRejectPrivateEndpointConnection(this IStaticSitesOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper)
        {
                return ((IStaticSitesOperations)operations).ApproveOrRejectPrivateEndpointConnectionAsync(resourceGroupName, name, privateEndpointConnectionName, privateEndpointWrapper).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Approves or rejects a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RemotePrivateEndpointConnectionARMResource> ApproveOrRejectPrivateEndpointConnectionAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApproveOrRejectPrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, privateEndpointWrapper, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection.
        /// </param>
        public static object DeletePrivateEndpointConnection(this IStaticSitesOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName)
        {
                return ((IStaticSitesOperations)operations).DeletePrivateEndpointConnectionAsync(resourceGroupName, name, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> DeletePrivateEndpointConnectionAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeletePrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the private link resources
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        public static PrivateLinkResourcesWrapper GetPrivateLinkResources(this IStaticSitesOperations operations, string resourceGroupName, string name)
        {
                return ((IStaticSitesOperations)operations).GetPrivateLinkResourcesAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the private link resources
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateLinkResourcesWrapper> GetPrivateLinkResourcesAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPrivateLinkResourcesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Resets the api key for an existing static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        public static void ResetStaticSiteApiKey(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSiteResetPropertiesARMResource resetPropertiesEnvelope)
        {
                ((IStaticSitesOperations)operations).ResetStaticSiteApiKeyAsync(resourceGroupName, name, resetPropertiesEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Resets the api key for an existing static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ResetStaticSiteApiKeyAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSiteResetPropertiesARMResource resetPropertiesEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.ResetStaticSiteApiKeyWithHttpMessagesAsync(resourceGroupName, name, resetPropertiesEnvelope, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Gets the details of the user provided function apps
        /// registered with a static site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StaticSiteUserProvidedFunctionAppARMResource> GetUserProvidedFunctionAppsForStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name)
        {
                return ((IStaticSitesOperations)operations).GetUserProvidedFunctionAppsForStaticSiteAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the details of the user provided function apps
        /// registered with a static site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StaticSiteUserProvidedFunctionAppARMResource>> GetUserProvidedFunctionAppsForStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetUserProvidedFunctionAppsForStaticSiteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the details of the user provided function app
        /// registered with a static site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='functionAppName'>
        /// Name of the function app registered with the static site.
        /// </param>
        public static StaticSiteUserProvidedFunctionAppARMResource GetUserProvidedFunctionAppForStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name, string functionAppName)
        {
                return ((IStaticSitesOperations)operations).GetUserProvidedFunctionAppForStaticSiteAsync(resourceGroupName, name, functionAppName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the details of the user provided function app
        /// registered with a static site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='functionAppName'>
        /// Name of the function app registered with the static site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StaticSiteUserProvidedFunctionAppARMResource> GetUserProvidedFunctionAppForStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string functionAppName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetUserProvidedFunctionAppForStaticSiteWithHttpMessagesAsync(resourceGroupName, name, functionAppName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Register a user provided function app with a static site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='functionAppName'>
        /// Name of the function app to register with the static site.
        /// </param>
        /// <param name='isForced'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to force the update of the auth configuration on
        /// the function app even if an AzureStaticWebApps provider is already
        /// configured on the function app. The default is &lt;code&gt;false&lt;/code&gt;.
        /// </param>
        public static StaticSiteUserProvidedFunctionAppARMResource RegisterUserProvidedFunctionAppWithStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name, string functionAppName, StaticSiteUserProvidedFunctionAppARMResource staticSiteUserProvidedFunctionEnvelope, bool? isForced = default(bool?))
        {
                return ((IStaticSitesOperations)operations).RegisterUserProvidedFunctionAppWithStaticSiteAsync(resourceGroupName, name, functionAppName, staticSiteUserProvidedFunctionEnvelope, isForced).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Register a user provided function app with a static site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='functionAppName'>
        /// Name of the function app to register with the static site.
        /// </param>
        /// <param name='isForced'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to force the update of the auth configuration on
        /// the function app even if an AzureStaticWebApps provider is already
        /// configured on the function app. The default is &lt;code&gt;false&lt;/code&gt;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StaticSiteUserProvidedFunctionAppARMResource> RegisterUserProvidedFunctionAppWithStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string functionAppName, StaticSiteUserProvidedFunctionAppARMResource staticSiteUserProvidedFunctionEnvelope, bool? isForced = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.RegisterUserProvidedFunctionAppWithStaticSiteWithHttpMessagesAsync(resourceGroupName, name, functionAppName, staticSiteUserProvidedFunctionEnvelope, isForced, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Detach the user provided function app from the static site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='functionAppName'>
        /// Name of the function app registered with the static site.
        /// </param>
        public static void DetachUserProvidedFunctionAppFromStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name, string functionAppName)
        {
                ((IStaticSitesOperations)operations).DetachUserProvidedFunctionAppFromStaticSiteAsync(resourceGroupName, name, functionAppName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Detach the user provided function app from the static site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='functionAppName'>
        /// Name of the function app registered with the static site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DetachUserProvidedFunctionAppFromStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string functionAppName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DetachUserProvidedFunctionAppFromStaticSiteWithHttpMessagesAsync(resourceGroupName, name, functionAppName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Deploys zipped content to a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        public static void CreateZipDeploymentForStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSiteZipDeploymentARMResource staticSiteZipDeploymentEnvelope)
        {
                ((IStaticSitesOperations)operations).CreateZipDeploymentForStaticSiteAsync(resourceGroupName, name, staticSiteZipDeploymentEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deploys zipped content to a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task CreateZipDeploymentForStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSiteZipDeploymentARMResource staticSiteZipDeploymentEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.CreateZipDeploymentForStaticSiteWithHttpMessagesAsync(resourceGroupName, name, staticSiteZipDeploymentEnvelope, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates a new static site in an existing resource group, or
        /// updates an existing static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site to create or update.
        /// </param>
        public static StaticSiteARMResource BeginCreateOrUpdateStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSiteARMResource staticSiteEnvelope)
        {
                return ((IStaticSitesOperations)operations).BeginCreateOrUpdateStaticSiteAsync(resourceGroupName, name, staticSiteEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a new static site in an existing resource group, or
        /// updates an existing static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site to create or update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StaticSiteARMResource> BeginCreateOrUpdateStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSiteARMResource staticSiteEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateStaticSiteWithHttpMessagesAsync(resourceGroupName, name, staticSiteEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site to delete.
        /// </param>
        public static void BeginDeleteStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name)
        {
                ((IStaticSitesOperations)operations).BeginDeleteStaticSiteAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteStaticSiteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Deletes a static site build.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        public static void BeginDeleteStaticSiteBuild(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName)
        {
                ((IStaticSitesOperations)operations).BeginDeleteStaticSiteBuildAsync(resourceGroupName, name, environmentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a static site build.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteStaticSiteBuildAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteStaticSiteBuildWithHttpMessagesAsync(resourceGroupName, name, environmentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Register a user provided function app with a static site
        /// build
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        /// <param name='functionAppName'>
        /// Name of the function app to register with the static site build.
        /// </param>
        /// <param name='isForced'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to force the update of the auth configuration on
        /// the function app even if an AzureStaticWebApps provider is already
        /// configured on the function app. The default is &lt;code&gt;false&lt;/code&gt;.
        /// </param>
        public static StaticSiteUserProvidedFunctionAppARMResource BeginRegisterUserProvidedFunctionAppWithStaticSiteBuild(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, string functionAppName, StaticSiteUserProvidedFunctionAppARMResource staticSiteUserProvidedFunctionEnvelope, bool? isForced = default(bool?))
        {
                return ((IStaticSitesOperations)operations).BeginRegisterUserProvidedFunctionAppWithStaticSiteBuildAsync(resourceGroupName, name, environmentName, functionAppName, staticSiteUserProvidedFunctionEnvelope, isForced).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Register a user provided function app with a static site
        /// build
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// The stage site identifier.
        /// </param>
        /// <param name='functionAppName'>
        /// Name of the function app to register with the static site build.
        /// </param>
        /// <param name='isForced'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to force the update of the auth configuration on
        /// the function app even if an AzureStaticWebApps provider is already
        /// configured on the function app. The default is &lt;code&gt;false&lt;/code&gt;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StaticSiteUserProvidedFunctionAppARMResource> BeginRegisterUserProvidedFunctionAppWithStaticSiteBuildAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, string functionAppName, StaticSiteUserProvidedFunctionAppARMResource staticSiteUserProvidedFunctionEnvelope, bool? isForced = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginRegisterUserProvidedFunctionAppWithStaticSiteBuildWithHttpMessagesAsync(resourceGroupName, name, environmentName, functionAppName, staticSiteUserProvidedFunctionEnvelope, isForced, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deploys zipped content to a specific environment of a
        /// static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// Name of the environment.
        /// </param>
        public static void BeginCreateZipDeploymentForStaticSiteBuild(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, StaticSiteZipDeploymentARMResource staticSiteZipDeploymentEnvelope)
        {
                ((IStaticSitesOperations)operations).BeginCreateZipDeploymentForStaticSiteBuildAsync(resourceGroupName, name, environmentName, staticSiteZipDeploymentEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deploys zipped content to a specific environment of a
        /// static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='environmentName'>
        /// Name of the environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginCreateZipDeploymentForStaticSiteBuildAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string environmentName, StaticSiteZipDeploymentARMResource staticSiteZipDeploymentEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginCreateZipDeploymentForStaticSiteBuildWithHttpMessagesAsync(resourceGroupName, name, environmentName, staticSiteZipDeploymentEnvelope, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Creates a new static site custom domain in an existing
        /// resource group and static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='domainName'>
        /// The custom domain to create.
        /// </param>
        public static StaticSiteCustomDomainOverviewARMResource BeginCreateOrUpdateStaticSiteCustomDomain(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName, StaticSiteCustomDomainRequestPropertiesARMResource staticSiteCustomDomainRequestPropertiesEnvelope)
        {
                return ((IStaticSitesOperations)operations).BeginCreateOrUpdateStaticSiteCustomDomainAsync(resourceGroupName, name, domainName, staticSiteCustomDomainRequestPropertiesEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Creates a new static site custom domain in an existing
        /// resource group and static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='domainName'>
        /// The custom domain to create.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StaticSiteCustomDomainOverviewARMResource> BeginCreateOrUpdateStaticSiteCustomDomainAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName, StaticSiteCustomDomainRequestPropertiesARMResource staticSiteCustomDomainRequestPropertiesEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateStaticSiteCustomDomainWithHttpMessagesAsync(resourceGroupName, name, domainName, staticSiteCustomDomainRequestPropertiesEnvelope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a custom domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='domainName'>
        /// The custom domain to delete.
        /// </param>
        public static void BeginDeleteStaticSiteCustomDomain(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName)
        {
                ((IStaticSitesOperations)operations).BeginDeleteStaticSiteCustomDomainAsync(resourceGroupName, name, domainName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a custom domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='domainName'>
        /// The custom domain to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteStaticSiteCustomDomainAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteStaticSiteCustomDomainWithHttpMessagesAsync(resourceGroupName, name, domainName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Validates a particular custom domain can be added to a
        /// static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='domainName'>
        /// The custom domain to validate.
        /// </param>
        public static void BeginValidateCustomDomainCanBeAddedToStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName, StaticSiteCustomDomainRequestPropertiesARMResource staticSiteCustomDomainRequestPropertiesEnvelope)
        {
                ((IStaticSitesOperations)operations).BeginValidateCustomDomainCanBeAddedToStaticSiteAsync(resourceGroupName, name, domainName, staticSiteCustomDomainRequestPropertiesEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Validates a particular custom domain can be added to a
        /// static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='domainName'>
        /// The custom domain to validate.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginValidateCustomDomainCanBeAddedToStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string domainName, StaticSiteCustomDomainRequestPropertiesARMResource staticSiteCustomDomainRequestPropertiesEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginValidateCustomDomainCanBeAddedToStaticSiteWithHttpMessagesAsync(resourceGroupName, name, domainName, staticSiteCustomDomainRequestPropertiesEnvelope, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Detaches a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site to detach.
        /// </param>
        public static void BeginDetachStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name)
        {
                ((IStaticSitesOperations)operations).BeginDetachStaticSiteAsync(resourceGroupName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Detaches a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site to detach.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDetachStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDetachStaticSiteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Approves or rejects a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection.
        /// </param>
        public static RemotePrivateEndpointConnectionARMResource BeginApproveOrRejectPrivateEndpointConnection(this IStaticSitesOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper)
        {
                return ((IStaticSitesOperations)operations).BeginApproveOrRejectPrivateEndpointConnectionAsync(resourceGroupName, name, privateEndpointConnectionName, privateEndpointWrapper).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Approves or rejects a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RemotePrivateEndpointConnectionARMResource> BeginApproveOrRejectPrivateEndpointConnectionAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginApproveOrRejectPrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, privateEndpointWrapper, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deletes a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection.
        /// </param>
        public static object BeginDeletePrivateEndpointConnection(this IStaticSitesOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName)
        {
                return ((IStaticSitesOperations)operations).BeginDeletePrivateEndpointConnectionAsync(resourceGroupName, name, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deletes a private endpoint connection
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// Name of the private endpoint connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> BeginDeletePrivateEndpointConnectionAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeletePrivateEndpointConnectionWithHttpMessagesAsync(resourceGroupName, name, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Register a user provided function app with a static site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='functionAppName'>
        /// Name of the function app to register with the static site.
        /// </param>
        /// <param name='isForced'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to force the update of the auth configuration on
        /// the function app even if an AzureStaticWebApps provider is already
        /// configured on the function app. The default is &lt;code&gt;false&lt;/code&gt;.
        /// </param>
        public static StaticSiteUserProvidedFunctionAppARMResource BeginRegisterUserProvidedFunctionAppWithStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name, string functionAppName, StaticSiteUserProvidedFunctionAppARMResource staticSiteUserProvidedFunctionEnvelope, bool? isForced = default(bool?))
        {
                return ((IStaticSitesOperations)operations).BeginRegisterUserProvidedFunctionAppWithStaticSiteAsync(resourceGroupName, name, functionAppName, staticSiteUserProvidedFunctionEnvelope, isForced).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Register a user provided function app with a static site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='functionAppName'>
        /// Name of the function app to register with the static site.
        /// </param>
        /// <param name='isForced'>
        /// Specify &lt;code&gt;true&lt;/code&gt; to force the update of the auth configuration on
        /// the function app even if an AzureStaticWebApps provider is already
        /// configured on the function app. The default is &lt;code&gt;false&lt;/code&gt;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StaticSiteUserProvidedFunctionAppARMResource> BeginRegisterUserProvidedFunctionAppWithStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, string functionAppName, StaticSiteUserProvidedFunctionAppARMResource staticSiteUserProvidedFunctionEnvelope, bool? isForced = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginRegisterUserProvidedFunctionAppWithStaticSiteWithHttpMessagesAsync(resourceGroupName, name, functionAppName, staticSiteUserProvidedFunctionEnvelope, isForced, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Deploys zipped content to a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        public static void BeginCreateZipDeploymentForStaticSite(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSiteZipDeploymentARMResource staticSiteZipDeploymentEnvelope)
        {
                ((IStaticSitesOperations)operations).BeginCreateZipDeploymentForStaticSiteAsync(resourceGroupName, name, staticSiteZipDeploymentEnvelope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Deploys zipped content to a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group to which the resource belongs.
        /// </param>
        /// <param name='name'>
        /// Name of the static site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginCreateZipDeploymentForStaticSiteAsync(this IStaticSitesOperations operations, string resourceGroupName, string name, StaticSiteZipDeploymentARMResource staticSiteZipDeploymentEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginCreateZipDeploymentForStaticSiteWithHttpMessagesAsync(resourceGroupName, name, staticSiteZipDeploymentEnvelope, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Description for Get all Static Sites for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StaticSiteARMResource> ListNext(this IStaticSitesOperations operations, string nextPageLink)
        {
                return ((IStaticSitesOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get all Static Sites for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StaticSiteARMResource>> ListNextAsync(this IStaticSitesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets all static sites in the specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StaticSiteARMResource> GetStaticSitesByResourceGroupNext(this IStaticSitesOperations operations, string nextPageLink)
        {
                return ((IStaticSitesOperations)operations).GetStaticSitesByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets all static sites in the specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StaticSiteARMResource>> GetStaticSitesByResourceGroupNextAsync(this IStaticSitesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetStaticSitesByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the list of users of a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StaticSiteUserARMResource> ListStaticSiteUsersNext(this IStaticSitesOperations operations, string nextPageLink)
        {
                return ((IStaticSitesOperations)operations).ListStaticSiteUsersNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the list of users of a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StaticSiteUserARMResource>> ListStaticSiteUsersNextAsync(this IStaticSitesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListStaticSiteUsersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets all static site builds for a particular static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StaticSiteBuildARMResource> GetStaticSiteBuildsNext(this IStaticSitesOperations operations, string nextPageLink)
        {
                return ((IStaticSitesOperations)operations).GetStaticSiteBuildsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets all static site builds for a particular static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StaticSiteBuildARMResource>> GetStaticSiteBuildsNextAsync(this IStaticSitesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetStaticSiteBuildsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the functions of a particular static site build.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StaticSiteFunctionOverviewARMResource> ListStaticSiteBuildFunctionsNext(this IStaticSitesOperations operations, string nextPageLink)
        {
                return ((IStaticSitesOperations)operations).ListStaticSiteBuildFunctionsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the functions of a particular static site build.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StaticSiteFunctionOverviewARMResource>> ListStaticSiteBuildFunctionsNextAsync(this IStaticSitesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListStaticSiteBuildFunctionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the details of the user provided function apps
        /// registered with a static site build
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StaticSiteUserProvidedFunctionAppARMResource> GetUserProvidedFunctionAppsForStaticSiteBuildNext(this IStaticSitesOperations operations, string nextPageLink)
        {
                return ((IStaticSitesOperations)operations).GetUserProvidedFunctionAppsForStaticSiteBuildNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the details of the user provided function apps
        /// registered with a static site build
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StaticSiteUserProvidedFunctionAppARMResource>> GetUserProvidedFunctionAppsForStaticSiteBuildNextAsync(this IStaticSitesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetUserProvidedFunctionAppsForStaticSiteBuildNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets all static site custom domains for a particular static
        /// site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StaticSiteCustomDomainOverviewARMResource> ListStaticSiteCustomDomainsNext(this IStaticSitesOperations operations, string nextPageLink)
        {
                return ((IStaticSitesOperations)operations).ListStaticSiteCustomDomainsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets all static site custom domains for a particular static
        /// site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StaticSiteCustomDomainOverviewARMResource>> ListStaticSiteCustomDomainsNextAsync(this IStaticSitesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListStaticSiteCustomDomainsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the functions of a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StaticSiteFunctionOverviewARMResource> ListStaticSiteFunctionsNext(this IStaticSitesOperations operations, string nextPageLink)
        {
                return ((IStaticSitesOperations)operations).ListStaticSiteFunctionsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the functions of a static site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StaticSiteFunctionOverviewARMResource>> ListStaticSiteFunctionsNextAsync(this IStaticSitesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListStaticSiteFunctionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the list of private endpoint connections associated
        /// with a static site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RemotePrivateEndpointConnectionARMResource> GetPrivateEndpointConnectionListNext(this IStaticSitesOperations operations, string nextPageLink)
        {
                return ((IStaticSitesOperations)operations).GetPrivateEndpointConnectionListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the list of private endpoint connections associated
        /// with a static site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RemotePrivateEndpointConnectionARMResource>> GetPrivateEndpointConnectionListNextAsync(this IStaticSitesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPrivateEndpointConnectionListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets the details of the user provided function apps
        /// registered with a static site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<StaticSiteUserProvidedFunctionAppARMResource> GetUserProvidedFunctionAppsForStaticSiteNext(this IStaticSitesOperations operations, string nextPageLink)
        {
                return ((IStaticSitesOperations)operations).GetUserProvidedFunctionAppsForStaticSiteNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets the details of the user provided function apps
        /// registered with a static site
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<StaticSiteUserProvidedFunctionAppARMResource>> GetUserProvidedFunctionAppsForStaticSiteNextAsync(this IStaticSitesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetUserProvidedFunctionAppsForStaticSiteNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
