// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ProviderOperations
    /// </summary>
    public static partial class ProviderOperationsExtensions
    {
        /// <summary>
        /// Description for Get available application frameworks and their versions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='osTypeSelected'>
        /// 
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ApplicationStackResource> GetAvailableStacks(this IProviderOperations operations, string osTypeSelected = default(string))
        {
                return ((IProviderOperations)operations).GetAvailableStacksAsync(osTypeSelected).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get available application frameworks and their versions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='osTypeSelected'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ApplicationStackResource>> GetAvailableStacksAsync(this IProviderOperations operations, string osTypeSelected = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAvailableStacksWithHttpMessagesAsync(osTypeSelected, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get available Function app frameworks and their versions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='stackOsType'>
        /// Stack OS Type
        /// </param>
        public static Microsoft.Rest.Azure.IPage<FunctionAppStack> GetFunctionAppStacks(this IProviderOperations operations, string stackOsType = default(string))
        {
                return ((IProviderOperations)operations).GetFunctionAppStacksAsync(stackOsType).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get available Function app frameworks and their versions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='stackOsType'>
        /// Stack OS Type
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<FunctionAppStack>> GetFunctionAppStacksAsync(this IProviderOperations operations, string stackOsType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetFunctionAppStacksWithHttpMessagesAsync(stackOsType, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get available Function app frameworks and their versions
        /// for location
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// Function App stack location.
        /// </param>
        /// <param name='stackOsType'>
        /// Stack OS Type
        /// </param>
        public static Microsoft.Rest.Azure.IPage<FunctionAppStack> GetFunctionAppStacksForLocation(this IProviderOperations operations, string location, string stackOsType = default(string))
        {
                return ((IProviderOperations)operations).GetFunctionAppStacksForLocationAsync(location, stackOsType).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get available Function app frameworks and their versions
        /// for location
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// Function App stack location.
        /// </param>
        /// <param name='stackOsType'>
        /// Stack OS Type
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<FunctionAppStack>> GetFunctionAppStacksForLocationAsync(this IProviderOperations operations, string location, string stackOsType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetFunctionAppStacksForLocationWithHttpMessagesAsync(location, stackOsType, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get available Web app frameworks and their versions for
        /// location
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// Web App stack location.
        /// </param>
        /// <param name='stackOsType'>
        /// Stack OS Type
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WebAppStack> GetWebAppStacksForLocation(this IProviderOperations operations, string location, string stackOsType = default(string))
        {
                return ((IProviderOperations)operations).GetWebAppStacksForLocationAsync(location, stackOsType).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get available Web app frameworks and their versions for
        /// location
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// Web App stack location.
        /// </param>
        /// <param name='stackOsType'>
        /// Stack OS Type
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WebAppStack>> GetWebAppStacksForLocationAsync(this IProviderOperations operations, string location, string stackOsType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWebAppStacksForLocationWithHttpMessagesAsync(location, stackOsType, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets all available operations for the Microsoft.Web
        /// resource provider. Also exposes resource metric definitions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CsmOperationDescription> ListOperations(this IProviderOperations operations)
        {
                return ((IProviderOperations)operations).ListOperationsAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets all available operations for the Microsoft.Web
        /// resource provider. Also exposes resource metric definitions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CsmOperationDescription>> ListOperationsAsync(this IProviderOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListOperationsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get available Web app frameworks and their versions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='stackOsType'>
        /// Stack OS Type
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WebAppStack> GetWebAppStacks(this IProviderOperations operations, string stackOsType = default(string))
        {
                return ((IProviderOperations)operations).GetWebAppStacksAsync(stackOsType).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get available Web app frameworks and their versions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='stackOsType'>
        /// Stack OS Type
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WebAppStack>> GetWebAppStacksAsync(this IProviderOperations operations, string stackOsType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWebAppStacksWithHttpMessagesAsync(stackOsType, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get available application frameworks and their versions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='osTypeSelected'>
        /// 
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ApplicationStackResource> GetAvailableStacksOnPrem(this IProviderOperations operations, string osTypeSelected = default(string))
        {
                return ((IProviderOperations)operations).GetAvailableStacksOnPremAsync(osTypeSelected).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get available application frameworks and their versions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='osTypeSelected'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ApplicationStackResource>> GetAvailableStacksOnPremAsync(this IProviderOperations operations, string osTypeSelected = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAvailableStacksOnPremWithHttpMessagesAsync(osTypeSelected, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get available application frameworks and their versions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ApplicationStackResource> GetAvailableStacksNext(this IProviderOperations operations, string nextPageLink)
        {
                return ((IProviderOperations)operations).GetAvailableStacksNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get available application frameworks and their versions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ApplicationStackResource>> GetAvailableStacksNextAsync(this IProviderOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAvailableStacksNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get available Function app frameworks and their versions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<FunctionAppStack> GetFunctionAppStacksNext(this IProviderOperations operations, string nextPageLink)
        {
                return ((IProviderOperations)operations).GetFunctionAppStacksNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get available Function app frameworks and their versions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<FunctionAppStack>> GetFunctionAppStacksNextAsync(this IProviderOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetFunctionAppStacksNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get available Function app frameworks and their versions
        /// for location
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<FunctionAppStack> GetFunctionAppStacksForLocationNext(this IProviderOperations operations, string nextPageLink)
        {
                return ((IProviderOperations)operations).GetFunctionAppStacksForLocationNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get available Function app frameworks and their versions
        /// for location
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<FunctionAppStack>> GetFunctionAppStacksForLocationNextAsync(this IProviderOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetFunctionAppStacksForLocationNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get available Web app frameworks and their versions for
        /// location
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WebAppStack> GetWebAppStacksForLocationNext(this IProviderOperations operations, string nextPageLink)
        {
                return ((IProviderOperations)operations).GetWebAppStacksForLocationNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get available Web app frameworks and their versions for
        /// location
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WebAppStack>> GetWebAppStacksForLocationNextAsync(this IProviderOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWebAppStacksForLocationNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Gets all available operations for the Microsoft.Web
        /// resource provider. Also exposes resource metric definitions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CsmOperationDescription> ListOperationsNext(this IProviderOperations operations, string nextPageLink)
        {
                return ((IProviderOperations)operations).ListOperationsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Gets all available operations for the Microsoft.Web
        /// resource provider. Also exposes resource metric definitions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CsmOperationDescription>> ListOperationsNextAsync(this IProviderOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListOperationsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get available Web app frameworks and their versions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WebAppStack> GetWebAppStacksNext(this IProviderOperations operations, string nextPageLink)
        {
                return ((IProviderOperations)operations).GetWebAppStacksNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get available Web app frameworks and their versions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WebAppStack>> GetWebAppStacksNextAsync(this IProviderOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWebAppStacksNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Description for Get available application frameworks and their versions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ApplicationStackResource> GetAvailableStacksOnPremNext(this IProviderOperations operations, string nextPageLink)
        {
                return ((IProviderOperations)operations).GetAvailableStacksOnPremNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Description for Get available application frameworks and their versions
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ApplicationStackResource>> GetAvailableStacksOnPremNextAsync(this IProviderOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAvailableStacksOnPremNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
