//
// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Warning: This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using Microsoft.Azure.Commands.Common.Authentication;
using Microsoft.Azure.Commands.Common.Authentication.Abstractions;
using Microsoft.Azure.Commands.Common.Strategies;
using Microsoft.Azure.Commands.Compute.Automation.Models;
using Microsoft.Azure.Commands.ResourceManager.Common.ArgumentCompleters;
using Microsoft.Azure.Management.Compute;
using Microsoft.Azure.Management.Compute.Models;
using Microsoft.Azure.Management.ResourceGraph;
using Microsoft.Azure.Management.ResourceGraph.Models;
using Microsoft.WindowsAzure.Commands.Utilities.Common;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;

namespace Microsoft.Azure.Commands.Compute.Automation
{
    [Cmdlet(VerbsData.Update, ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "GalleryInVMAccessControlProfile", SupportsShouldProcess = true)]
    [OutputType(typeof(PSGalleryInVMAccessControlProfile))]
    public partial class UpdateAzureRmGalleryInVMAccessControlProfile : ComputeAutomationBaseCmdlet
    {
        [Parameter(
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The name of the resource group.")]
        [ResourceGroupCompleter]
        public string ResourceGroupName { get; set; }

        [Parameter(
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The name of the gallery.")]
        public string GalleryName { get; set; }

        [Alias("Name")]
        [Parameter(
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The name of the Gallery In VM Access Control Profile.")]
        public string GalleryInVMAccessControlProfileName { get; set; }

        [Parameter(
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The location of the Gallery In VM Access Control Profile.")]
        public string Location { get; set; }

        [Parameter(
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "This property allows you to specify the Endpoint type for which this profile is defining the access control for.")]
        [PSArgumentCompleter("WireServer","IMDS")]
        public string ApplicableHostEndPoint { get; set; }

        [Parameter(
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The description of this gallery inVMAccessControlProfile resource. This property is updatable.")]
        public string Description { get; set; }

        public override void ExecuteCmdlet()
        {
            base.ExecuteCmdlet();
            ExecuteClientAction(() =>
            {
                if (ShouldProcess(this.GalleryInVMAccessControlProfileName, VerbsData.Update))
                {
                    string resourceGroupName = this.ResourceGroupName;
                    string galleryName = this.GalleryName;
                    string galleryInVMAccessControlProfileName = this.GalleryInVMAccessControlProfileName;
                    GalleryInVMAccessControlProfile galleryInVMAccessControlProfile = new GalleryInVMAccessControlProfile();
                    galleryInVMAccessControlProfile.Location = this.Location;

                    galleryInVMAccessControlProfile.Properties = new GalleryInVMAccessControlProfileProperties();

                    if (this.IsParameterBound(c => c.Description))
                    {
                        galleryInVMAccessControlProfile.Properties.Description = this.Description;
                    }

                    if (this.IsParameterBound(c => c.ApplicableHostEndPoint))
                    {
                        if (this.ApplicableHostEndPoint.Equals("WireServer", StringComparison.OrdinalIgnoreCase))
                        {
                            galleryInVMAccessControlProfile.Properties.ApplicableHostEndpoint = EndpointTypes.WireServer;
                        }
                        else if (this.ApplicableHostEndPoint.Equals("IMDS", StringComparison.OrdinalIgnoreCase))
                        {
                            galleryInVMAccessControlProfile.Properties.ApplicableHostEndpoint = EndpointTypes.IMDS;
                        }
                        else
                        {
                            throw new ArgumentException("Invalid applicable host endpoint type specified. Valid values are 'WireServer' or 'IMDS'.");
                        }
                    }
                    

                    var result = GalleryInVMAccessControlProfileClient.CreateOrUpdate(resourceGroupName, galleryName, galleryInVMAccessControlProfileName, galleryInVMAccessControlProfile);

                    var psObject = new PSGalleryInVMAccessControlProfile();
                    ComputeAutomationAutoMapperProfile.Mapper.Map<GalleryInVMAccessControlProfile, PSGalleryInVMAccessControlProfile>(result, psObject);
                    WriteObject(psObject);
                }

            });
        }
    }
}