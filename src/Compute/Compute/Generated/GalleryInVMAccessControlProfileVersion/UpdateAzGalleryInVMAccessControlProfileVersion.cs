//
// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Warning: This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using Microsoft.Azure.Commands.Common.Authentication;
using Microsoft.Azure.Commands.Common.Authentication.Abstractions;
using Microsoft.Azure.Commands.Common.Strategies;
using Microsoft.Azure.Commands.Compute.Automation.Models;
using Microsoft.Azure.Commands.ResourceManager.Common.ArgumentCompleters;
using Microsoft.Azure.Management.Compute;
using Microsoft.Azure.Management.Compute.Models;
using Microsoft.Azure.Management.ResourceGraph;
using Microsoft.Azure.Management.ResourceGraph.Models;
using Microsoft.WindowsAzure.Commands.Utilities.Common;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;

namespace Microsoft.Azure.Commands.Compute.Automation
{
    [Cmdlet(VerbsData.Update, ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "GalleryInVMAccessControlProfileVersion", SupportsShouldProcess = true)]
    [OutputType(typeof(PSGalleryInVMAccessControlProfileVersion))]
    public partial class UpdateAzureRmGalleryInVMAccessControlProfileVersion : ComputeAutomationBaseCmdlet
    {

        [Parameter(
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "PSGalleryInVmAccessControlProfileVersion object created from New-AzGalleryInVMAccessControlProfileVersionConfig.")]
        public PSGalleryInVMAccessControlProfileVersion GalleryInVmAccessControlProfileVersion { get; set; }

        [Parameter(
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The names of the target regions where the Resource Profile version is going to be replicated to. This property is updatable.")]
        public string[] TargetLocation { get; set; }

        [Parameter(
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "If set to true, Virtual Machines deployed from the latest version of the Resource Profile won't use this Profile version.")]
        public bool? ExcludeFromLatest { get; set; }

        public override void ExecuteCmdlet()
        {
            base.ExecuteCmdlet();
            ExecuteClientAction(() =>
            {
                if (ShouldProcess(this.GalleryInVmAccessControlProfileVersion.Name, VerbsData.Update))
                {
                    PSGalleryInVMAccessControlProfileVersion psGalleryInVMAccessControlProfileVersion = this.GalleryInVmAccessControlProfileVersion;

                    string resourceGroupName = GetResourceGroupName(psGalleryInVMAccessControlProfileVersion.Id);
                    string galleryName = GetGalleryNameFromInVMAccessControlProfileResourceId(psGalleryInVMAccessControlProfileVersion.Id);
                    string galleryInVMAccessControlProfileName = GetInVMAccessControlProfileNameFromInVMAccessControlProfileResourceId(psGalleryInVMAccessControlProfileVersion.Id);
                    string galleryInVMAccessControlProfileVersionName = GetInVMAccessControlProfileVersionNameFromInVMAccessControlProfileVersionResourceId(psGalleryInVMAccessControlProfileVersion.Id);

                    psGalleryInVMAccessControlProfileVersion.ExcludeFromLatest = this.IsParameterBound(c => c.ExcludeFromLatest) ? this.ExcludeFromLatest : psGalleryInVMAccessControlProfileVersion.ExcludeFromLatest;
                    if (this.IsParameterBound(c => c.TargetLocation))
                    {
                        List<TargetRegion> targetRegions = new List<TargetRegion>();

                        // loop through this.TargetRegion
                        foreach (var region in this.TargetLocation)
                        {
                            // create TargetRegion and assign name 
                            TargetRegion targetRegion = new TargetRegion
                            {
                                Name = region
                            };
                            // add to list of TargetRegions
                            targetRegions.Add(targetRegion);
                        }
                        psGalleryInVMAccessControlProfileVersion.TargetLocations = targetRegions;
                    }

                    GalleryInVMAccessControlProfileVersion galleryInVMAccessControlProfileVersion = new GalleryInVMAccessControlProfileVersion();
                    ComputeAutomationAutoMapperProfile.Mapper.Map<PSGalleryInVMAccessControlProfileVersion, GalleryInVMAccessControlProfileVersion>(psGalleryInVMAccessControlProfileVersion, galleryInVMAccessControlProfileVersion);
                    var result = GalleryInVMAccessControlProfileVersionClient.CreateOrUpdate(resourceGroupName, galleryName, galleryInVMAccessControlProfileName, galleryInVMAccessControlProfileVersionName, galleryInVMAccessControlProfileVersion);
                    var psObject = new PSGalleryInVMAccessControlProfileVersion();
                    ComputeAutomationAutoMapperProfile.Mapper.Map<GalleryInVMAccessControlProfileVersion, PSGalleryInVMAccessControlProfileVersion>(result, psObject);
                    WriteObject(psObject);
                }
            });
        }
    }
}