//
// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Warning: This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using Microsoft.Azure.Commands.Compute.Automation.Models;
using Microsoft.Azure.Management.Compute.Models;
using Microsoft.WindowsAzure.Commands.Utilities.Common;

namespace Microsoft.Azure.Commands.Compute.Automation
{
    [Cmdlet(VerbsCommon.Remove, ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "VmssSkuProfileVMSize", SupportsShouldProcess = true)]
    [OutputType(typeof(PSVirtualMachineScaleSet))]
    public partial class RemoveAzureRmVmssSkuProfileVmSizeCommand : Microsoft.Azure.Commands.ResourceManager.Common.AzureRMCmdlet
    {
        [Parameter(
            Mandatory = true,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public PSVirtualMachineScaleSet VirtualMachineScaleSet { get; set; }

        [Parameter(
            Mandatory = true,
            ValueFromPipelineByPropertyName = true)]
        public string VmSize { get; set; }

        protected override void ProcessRecord()
        {
            if (this.VirtualMachineScaleSet.SkuProfile == null)
            {
                WriteObject(this.VirtualMachineScaleSet);
                return;
            }

            if (this.VirtualMachineScaleSet.SkuProfile.VmSizes  == null) 
            {
                WriteObject(this.VirtualMachineScaleSet);
                return;
            }

            if (this.IsParameterBound(c => c.VmSize))
            {
                List<SkuProfileVMSize> toRemove = new List<SkuProfileVMSize>();
                foreach (SkuProfileVMSize vmSize in this.VirtualMachineScaleSet.SkuProfile.VmSizes)
                {
                    if (vmSize.Name.Equals(this.VmSize, StringComparison.OrdinalIgnoreCase))
                    {
                        toRemove.Add(vmSize);
                    }
                }

                foreach (SkuProfileVMSize vmSize in toRemove)
                {
                    this.VirtualMachineScaleSet.SkuProfile.VmSizes.Remove(vmSize);
                }
            }

            WriteObject(this.VirtualMachineScaleSet);
        }
    }
}
