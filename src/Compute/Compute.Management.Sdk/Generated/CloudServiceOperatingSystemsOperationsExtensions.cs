// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CloudServiceOperatingSystemsOperations.
    /// </summary>
    public static partial class CloudServiceOperatingSystemsOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// </param>
            /// <param name='osVersionName'>
            /// </param>
            public static OSVersion GetOSVersion(this ICloudServiceOperatingSystemsOperations operations, string location, string osVersionName)
            {
                return operations.GetOSVersionAsync(location, osVersionName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// </param>
            /// <param name='osVersionName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OSVersion> GetOSVersionAsync(this ICloudServiceOperatingSystemsOperations operations, string location, string osVersionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOSVersionWithHttpMessagesAsync(location, osVersionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// </param>
            public static IPage<OSVersion> ListOSVersions(this ICloudServiceOperatingSystemsOperations operations, string location)
            {
                return operations.ListOSVersionsAsync(location).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OSVersion>> ListOSVersionsAsync(this ICloudServiceOperatingSystemsOperations operations, string location, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOSVersionsWithHttpMessagesAsync(location, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// </param>
            /// <param name='osFamilyName'>
            /// </param>
            public static OSFamily GetOSFamily(this ICloudServiceOperatingSystemsOperations operations, string location, string osFamilyName)
            {
                return operations.GetOSFamilyAsync(location, osFamilyName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// </param>
            /// <param name='osFamilyName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OSFamily> GetOSFamilyAsync(this ICloudServiceOperatingSystemsOperations operations, string location, string osFamilyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOSFamilyWithHttpMessagesAsync(location, osFamilyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// </param>
            public static IPage<OSFamily> ListOSFamilies(this ICloudServiceOperatingSystemsOperations operations, string location)
            {
                return operations.ListOSFamiliesAsync(location).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OSFamily>> ListOSFamiliesAsync(this ICloudServiceOperatingSystemsOperations operations, string location, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOSFamiliesWithHttpMessagesAsync(location, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OSVersion> ListOSVersionsNext(this ICloudServiceOperatingSystemsOperations operations, string nextPageLink)
            {
                return operations.ListOSVersionsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OSVersion>> ListOSVersionsNextAsync(this ICloudServiceOperatingSystemsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOSVersionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OSFamily> ListOSFamiliesNext(this ICloudServiceOperatingSystemsOperations operations, string nextPageLink)
            {
                return operations.ListOSFamiliesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OSFamily>> ListOSFamiliesNextAsync(this ICloudServiceOperatingSystemsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOSFamiliesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
