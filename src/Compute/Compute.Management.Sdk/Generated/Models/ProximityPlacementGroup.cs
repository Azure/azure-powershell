// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    [Rest.Serialization.JsonTransformation]
    public partial class ProximityPlacementGroup : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the ProximityPlacementGroup class.
        /// </summary>
        public ProximityPlacementGroup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProximityPlacementGroup class.
        /// </summary>
        /// <param name="proximityPlacementGroupType">Possible values include:
        /// 'Standard', 'Ultra'</param>
        public ProximityPlacementGroup(string location, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), IDictionary<string, string> tags = default(IDictionary<string, string>), string proximityPlacementGroupType = default(string), IList<SubResourceWithColocationStatus> virtualMachines = default(IList<SubResourceWithColocationStatus>), IList<SubResourceWithColocationStatus> virtualMachineScaleSets = default(IList<SubResourceWithColocationStatus>), IList<SubResourceWithColocationStatus> availabilitySets = default(IList<SubResourceWithColocationStatus>), InstanceViewStatus colocationStatus = default(InstanceViewStatus), ProximityPlacementGroupPropertiesIntent intent = default(ProximityPlacementGroupPropertiesIntent), IList<string> zones = default(IList<string>))
            : base(location, id, name, type, systemData, tags)
        {
            ProximityPlacementGroupType = proximityPlacementGroupType;
            VirtualMachines = virtualMachines;
            VirtualMachineScaleSets = virtualMachineScaleSets;
            AvailabilitySets = availabilitySets;
            ColocationStatus = colocationStatus;
            Intent = intent;
            Zones = zones;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'Standard', 'Ultra'
        /// </summary>
        [JsonProperty(PropertyName = "properties.proximityPlacementGroupType")]
        public string ProximityPlacementGroupType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualMachines")]
        public IList<SubResourceWithColocationStatus> VirtualMachines { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualMachineScaleSets")]
        public IList<SubResourceWithColocationStatus> VirtualMachineScaleSets { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.availabilitySets")]
        public IList<SubResourceWithColocationStatus> AvailabilitySets { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.colocationStatus")]
        public InstanceViewStatus ColocationStatus { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.intent")]
        public ProximityPlacementGroupPropertiesIntent Intent { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "zones")]
        public IList<string> Zones { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
