// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    [Rest.Serialization.JsonTransformation]
    public partial class DiskRestorePoint : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the DiskRestorePoint class.
        /// </summary>
        public DiskRestorePoint()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DiskRestorePoint class.
        /// </summary>
        /// <param name="osType">Possible values include: 'Windows',
        /// 'Linux'</param>
        /// <param name="hyperVGeneration">Possible values include: 'V1',
        /// 'V2'</param>
        /// <param name="networkAccessPolicy">Possible values include:
        /// 'AllowAll', 'AllowPrivate', 'DenyAll'</param>
        /// <param name="publicNetworkAccess">Possible values include:
        /// 'Enabled', 'Disabled'</param>
        public DiskRestorePoint(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), System.DateTime? timeCreated = default(System.DateTime?), string sourceResourceId = default(string), OperatingSystemTypes? osType = default(OperatingSystemTypes?), string hyperVGeneration = default(string), DiskPurchasePlan purchasePlan = default(DiskPurchasePlan), SupportedCapabilities supportedCapabilities = default(SupportedCapabilities), string familyId = default(string), string sourceUniqueId = default(string), Encryption encryption = default(Encryption), bool? supportsHibernation = default(bool?), string networkAccessPolicy = default(string), string publicNetworkAccess = default(string), string diskAccessId = default(string), double? completionPercent = default(double?), string replicationState = default(string), string sourceResourceLocation = default(string), DiskSecurityProfile securityProfile = default(DiskSecurityProfile), int? logicalSectorSize = default(int?))
            : base(id, name, type, systemData)
        {
            TimeCreated = timeCreated;
            SourceResourceId = sourceResourceId;
            OsType = osType;
            HyperVGeneration = hyperVGeneration;
            PurchasePlan = purchasePlan;
            SupportedCapabilities = supportedCapabilities;
            FamilyId = familyId;
            SourceUniqueId = sourceUniqueId;
            Encryption = encryption;
            SupportsHibernation = supportsHibernation;
            NetworkAccessPolicy = networkAccessPolicy;
            PublicNetworkAccess = publicNetworkAccess;
            DiskAccessId = diskAccessId;
            CompletionPercent = completionPercent;
            ReplicationState = replicationState;
            SourceResourceLocation = sourceResourceLocation;
            SecurityProfile = securityProfile;
            LogicalSectorSize = logicalSectorSize;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.timeCreated")]
        public System.DateTime? TimeCreated { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceResourceId")]
        public string SourceResourceId { get; private set; }

        /// <summary>
        /// Gets possible values include: 'Windows', 'Linux'
        /// </summary>
        [JsonProperty(PropertyName = "properties.osType")]
        public OperatingSystemTypes? OsType { get; private set; }

        /// <summary>
        /// Gets or sets possible values include: 'V1', 'V2'
        /// </summary>
        [JsonProperty(PropertyName = "properties.hyperVGeneration")]
        public string HyperVGeneration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.purchasePlan")]
        public DiskPurchasePlan PurchasePlan { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.supportedCapabilities")]
        public SupportedCapabilities SupportedCapabilities { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.familyId")]
        public string FamilyId { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceUniqueId")]
        public string SourceUniqueId { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.encryption")]
        public Encryption Encryption { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.supportsHibernation")]
        public bool? SupportsHibernation { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'AllowAll', 'AllowPrivate',
        /// 'DenyAll'
        /// </summary>
        [JsonProperty(PropertyName = "properties.networkAccessPolicy")]
        public string NetworkAccessPolicy { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.diskAccessId")]
        public string DiskAccessId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.completionPercent")]
        public double? CompletionPercent { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.replicationState")]
        public string ReplicationState { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceResourceLocation")]
        public string SourceResourceLocation { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.securityProfile")]
        public DiskSecurityProfile SecurityProfile { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.logicalSectorSize")]
        public int? LogicalSectorSize { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PurchasePlan != null)
            {
                PurchasePlan.Validate();
            }
        }
    }
}
