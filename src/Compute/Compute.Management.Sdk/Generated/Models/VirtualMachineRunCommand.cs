// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    [Rest.Serialization.JsonTransformation]
    public partial class VirtualMachineRunCommand : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineRunCommand class.
        /// </summary>
        public VirtualMachineRunCommand()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineRunCommand class.
        /// </summary>
        /// <param name="location">Resource location</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        public VirtualMachineRunCommand(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), VirtualMachineRunCommandScriptSource source = default(VirtualMachineRunCommandScriptSource), IList<RunCommandInputParameter> parameters = default(IList<RunCommandInputParameter>), IList<RunCommandInputParameter> protectedParameters = default(IList<RunCommandInputParameter>), bool? asyncExecution = default(bool?), string runAsUser = default(string), string runAsPassword = default(string), int? timeoutInSeconds = default(int?), string outputBlobUri = default(string), string errorBlobUri = default(string), RunCommandManagedIdentity outputBlobManagedIdentity = default(RunCommandManagedIdentity), RunCommandManagedIdentity errorBlobManagedIdentity = default(RunCommandManagedIdentity), string provisioningState = default(string), VirtualMachineRunCommandInstanceView instanceView = default(VirtualMachineRunCommandInstanceView), bool? treatFailureAsDeploymentFailure = default(bool?))
            : base(location, id, name, type, tags)
        {
            Source = source;
            Parameters = parameters;
            ProtectedParameters = protectedParameters;
            AsyncExecution = asyncExecution;
            RunAsUser = runAsUser;
            RunAsPassword = runAsPassword;
            TimeoutInSeconds = timeoutInSeconds;
            OutputBlobUri = outputBlobUri;
            ErrorBlobUri = errorBlobUri;
            OutputBlobManagedIdentity = outputBlobManagedIdentity;
            ErrorBlobManagedIdentity = errorBlobManagedIdentity;
            ProvisioningState = provisioningState;
            InstanceView = instanceView;
            TreatFailureAsDeploymentFailure = treatFailureAsDeploymentFailure;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.source")]
        public VirtualMachineRunCommandScriptSource Source { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.parameters")]
        public IList<RunCommandInputParameter> Parameters { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.protectedParameters")]
        public IList<RunCommandInputParameter> ProtectedParameters { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.asyncExecution")]
        public bool? AsyncExecution { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.runAsUser")]
        public string RunAsUser { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.runAsPassword")]
        public string RunAsPassword { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.timeoutInSeconds")]
        public int? TimeoutInSeconds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.outputBlobUri")]
        public string OutputBlobUri { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.errorBlobUri")]
        public string ErrorBlobUri { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.outputBlobManagedIdentity")]
        public RunCommandManagedIdentity OutputBlobManagedIdentity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.errorBlobManagedIdentity")]
        public RunCommandManagedIdentity ErrorBlobManagedIdentity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.instanceView")]
        public VirtualMachineRunCommandInstanceView InstanceView { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.treatFailureAsDeploymentFailure")]
        public bool? TreatFailureAsDeploymentFailure { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Parameters != null)
            {
                foreach (var element in Parameters)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (ProtectedParameters != null)
            {
                foreach (var element1 in ProtectedParameters)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
