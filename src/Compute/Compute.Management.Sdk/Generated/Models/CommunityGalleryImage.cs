// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    [Rest.Serialization.JsonTransformation]
    public partial class CommunityGalleryImage : PirCommunityGalleryResource
    {
        /// <summary>
        /// Initializes a new instance of the CommunityGalleryImage class.
        /// </summary>
        public CommunityGalleryImage()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CommunityGalleryImage class.
        /// </summary>
        /// <param name="osType">Possible values include: 'Windows',
        /// 'Linux'</param>
        /// <param name="osState">Possible values include: 'Generalized',
        /// 'Specialized'</param>
        /// <param name="hyperVGeneration">Possible values include: 'V1',
        /// 'V2'</param>
        /// <param name="architecture">Possible values include: 'x64',
        /// 'Arm64'</param>
        public CommunityGalleryImage(OperatingSystemTypes osType, OperatingSystemStateTypes osState, CommunityGalleryImageIdentifier communityGalleryImageIdentifier, string name = default(string), string location = default(string), string type = default(string), string uniqueId = default(string), System.DateTime? endOfLifeDate = default(System.DateTime?), RecommendedMachineConfiguration recommended = default(RecommendedMachineConfiguration), Disallowed disallowed = default(Disallowed), string hyperVGeneration = default(string), IList<GalleryImageFeature> features = default(IList<GalleryImageFeature>), ImagePurchasePlan purchasePlan = default(ImagePurchasePlan), string architecture = default(string), string privacyStatementUri = default(string), string eula = default(string), string disclaimer = default(string), IDictionary<string, string> artifactTags = default(IDictionary<string, string>))
            : base(name, location, type, uniqueId)
        {
            OsType = osType;
            OsState = osState;
            EndOfLifeDate = endOfLifeDate;
            CommunityGalleryImageIdentifier = communityGalleryImageIdentifier;
            Recommended = recommended;
            Disallowed = disallowed;
            HyperVGeneration = hyperVGeneration;
            Features = features;
            PurchasePlan = purchasePlan;
            Architecture = architecture;
            PrivacyStatementUri = privacyStatementUri;
            Eula = eula;
            Disclaimer = disclaimer;
            ArtifactTags = artifactTags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'Windows', 'Linux'
        /// </summary>
        [JsonProperty(PropertyName = "properties.osType")]
        public OperatingSystemTypes OsType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Generalized', 'Specialized'
        /// </summary>
        [JsonProperty(PropertyName = "properties.osState")]
        public OperatingSystemStateTypes OsState { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.endOfLifeDate")]
        public System.DateTime? EndOfLifeDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.identifier")]
        public CommunityGalleryImageIdentifier CommunityGalleryImageIdentifier { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.recommended")]
        public RecommendedMachineConfiguration Recommended { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.disallowed")]
        public Disallowed Disallowed { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'V1', 'V2'
        /// </summary>
        [JsonProperty(PropertyName = "properties.hyperVGeneration")]
        public string HyperVGeneration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.features")]
        public IList<GalleryImageFeature> Features { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.purchasePlan")]
        public ImagePurchasePlan PurchasePlan { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'x64', 'Arm64'
        /// </summary>
        [JsonProperty(PropertyName = "properties.architecture")]
        public string Architecture { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.privacyStatementUri")]
        public string PrivacyStatementUri { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.eula")]
        public string Eula { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.disclaimer")]
        public string Disclaimer { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.artifactTags")]
        public IDictionary<string, string> ArtifactTags { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CommunityGalleryImageIdentifier == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CommunityGalleryImageIdentifier");
            }
        }
    }
}
