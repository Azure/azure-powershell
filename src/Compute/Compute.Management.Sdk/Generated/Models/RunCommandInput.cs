// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class RunCommandInput
    {
        /// <summary>
        /// Initializes a new instance of the RunCommandInput class.
        /// </summary>
        public RunCommandInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RunCommandInput class.
        /// </summary>
        public RunCommandInput(string commandId, IList<string> script = default(IList<string>), IList<RunCommandInputParameter> parameters = default(IList<RunCommandInputParameter>))
        {
            CommandId = commandId;
            Script = script;
            Parameters = parameters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "commandId")]
        public string CommandId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "script")]
        public IList<string> Script { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parameters")]
        public IList<RunCommandInputParameter> Parameters { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CommandId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CommandId");
            }
            if (Parameters != null)
            {
                foreach (var element in Parameters)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
