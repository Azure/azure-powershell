// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ImageStorageProfile
    {
        /// <summary>
        /// Initializes a new instance of the ImageStorageProfile class.
        /// </summary>
        public ImageStorageProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImageStorageProfile class.
        /// </summary>
        public ImageStorageProfile(ImageOSDisk osDisk = default(ImageOSDisk), IList<ImageDataDisk> dataDisks = default(IList<ImageDataDisk>), bool? zoneResilient = default(bool?))
        {
            OsDisk = osDisk;
            DataDisks = dataDisks;
            ZoneResilient = zoneResilient;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "osDisk")]
        public ImageOSDisk OsDisk { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dataDisks")]
        public IList<ImageDataDisk> DataDisks { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "zoneResilient")]
        public bool? ZoneResilient { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (OsDisk != null)
            {
                OsDisk.Validate();
            }
            if (DataDisks != null)
            {
                foreach (var element in DataDisks)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
