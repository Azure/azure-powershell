// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class LastPatchInstallationSummary
    {
        /// <summary>
        /// Initializes a new instance of the LastPatchInstallationSummary
        /// class.
        /// </summary>
        public LastPatchInstallationSummary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LastPatchInstallationSummary
        /// class.
        /// </summary>
        /// <param name="status">Possible values include: 'Unknown',
        /// 'InProgress', 'Failed', 'Succeeded',
        /// 'CompletedWithWarnings'</param>
        public LastPatchInstallationSummary(string status = default(string), string installationActivityId = default(string), bool? maintenanceWindowExceeded = default(bool?), int? notSelectedPatchCount = default(int?), int? excludedPatchCount = default(int?), int? pendingPatchCount = default(int?), int? installedPatchCount = default(int?), int? failedPatchCount = default(int?), System.DateTime? startTime = default(System.DateTime?), System.DateTime? lastModifiedTime = default(System.DateTime?), ApiError error = default(ApiError))
        {
            Status = status;
            InstallationActivityId = installationActivityId;
            MaintenanceWindowExceeded = maintenanceWindowExceeded;
            NotSelectedPatchCount = notSelectedPatchCount;
            ExcludedPatchCount = excludedPatchCount;
            PendingPatchCount = pendingPatchCount;
            InstalledPatchCount = installedPatchCount;
            FailedPatchCount = failedPatchCount;
            StartTime = startTime;
            LastModifiedTime = lastModifiedTime;
            Error = error;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets possible values include: 'Unknown', 'InProgress', 'Failed',
        /// 'Succeeded', 'CompletedWithWarnings'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "installationActivityId")]
        public string InstallationActivityId { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maintenanceWindowExceeded")]
        public bool? MaintenanceWindowExceeded { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "notSelectedPatchCount")]
        public int? NotSelectedPatchCount { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "excludedPatchCount")]
        public int? ExcludedPatchCount { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pendingPatchCount")]
        public int? PendingPatchCount { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "installedPatchCount")]
        public int? InstalledPatchCount { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "failedPatchCount")]
        public int? FailedPatchCount { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public System.DateTime? StartTime { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedTime")]
        public System.DateTime? LastModifiedTime { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public ApiError Error { get; private set; }

    }
}
