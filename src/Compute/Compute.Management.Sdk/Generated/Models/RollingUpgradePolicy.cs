// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class RollingUpgradePolicy
    {
        /// <summary>
        /// Initializes a new instance of the RollingUpgradePolicy class.
        /// </summary>
        public RollingUpgradePolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RollingUpgradePolicy class.
        /// </summary>
        public RollingUpgradePolicy(int? maxBatchInstancePercent = default(int?), int? maxUnhealthyInstancePercent = default(int?), int? maxUnhealthyUpgradedInstancePercent = default(int?), string pauseTimeBetweenBatches = default(string), bool? enableCrossZoneUpgrade = default(bool?), bool? prioritizeUnhealthyInstances = default(bool?), bool? rollbackFailedInstancesOnPolicyBreach = default(bool?), bool? maxSurge = default(bool?))
        {
            MaxBatchInstancePercent = maxBatchInstancePercent;
            MaxUnhealthyInstancePercent = maxUnhealthyInstancePercent;
            MaxUnhealthyUpgradedInstancePercent = maxUnhealthyUpgradedInstancePercent;
            PauseTimeBetweenBatches = pauseTimeBetweenBatches;
            EnableCrossZoneUpgrade = enableCrossZoneUpgrade;
            PrioritizeUnhealthyInstances = prioritizeUnhealthyInstances;
            RollbackFailedInstancesOnPolicyBreach = rollbackFailedInstancesOnPolicyBreach;
            MaxSurge = maxSurge;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maxBatchInstancePercent")]
        public int? MaxBatchInstancePercent { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maxUnhealthyInstancePercent")]
        public int? MaxUnhealthyInstancePercent { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maxUnhealthyUpgradedInstancePercent")]
        public int? MaxUnhealthyUpgradedInstancePercent { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pauseTimeBetweenBatches")]
        public string PauseTimeBetweenBatches { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enableCrossZoneUpgrade")]
        public bool? EnableCrossZoneUpgrade { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "prioritizeUnhealthyInstances")]
        public bool? PrioritizeUnhealthyInstances { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rollbackFailedInstancesOnPolicyBreach")]
        public bool? RollbackFailedInstancesOnPolicyBreach { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maxSurge")]
        public bool? MaxSurge { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MaxBatchInstancePercent != null)
            {
                if (MaxBatchInstancePercent > 100)
                {
                    throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxBatchInstancePercent", 100);
                }
                if (MaxBatchInstancePercent < 5)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxBatchInstancePercent", 5);
                }
            }
            if (MaxUnhealthyInstancePercent != null)
            {
                if (MaxUnhealthyInstancePercent > 100)
                {
                    throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxUnhealthyInstancePercent", 100);
                }
                if (MaxUnhealthyInstancePercent < 5)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxUnhealthyInstancePercent", 5);
                }
            }
            if (MaxUnhealthyUpgradedInstancePercent != null)
            {
                if (MaxUnhealthyUpgradedInstancePercent > 100)
                {
                    throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxUnhealthyUpgradedInstancePercent", 100);
                }
            }
        }
    }
}
