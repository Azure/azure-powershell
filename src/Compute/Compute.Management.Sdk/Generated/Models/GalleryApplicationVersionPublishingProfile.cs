// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class GalleryApplicationVersionPublishingProfile : GalleryArtifactPublishingProfileBase
    {
        /// <summary>
        /// Initializes a new instance of the
        /// GalleryApplicationVersionPublishingProfile class.
        /// </summary>
        public GalleryApplicationVersionPublishingProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// GalleryApplicationVersionPublishingProfile class.
        /// </summary>
        /// <param name="storageAccountType">Possible values include:
        /// 'Standard_LRS', 'Standard_ZRS', 'Premium_LRS',
        /// 'PremiumV2_LRS'</param>
        /// <param name="replicationMode">Possible values include: 'Full',
        /// 'Shallow'</param>
        public GalleryApplicationVersionPublishingProfile(UserArtifactSource source, IList<TargetRegion> targetRegions = default(IList<TargetRegion>), int? replicaCount = default(int?), bool? excludeFromLatest = default(bool?), System.DateTime? publishedDate = default(System.DateTime?), System.DateTime? endOfLifeDate = default(System.DateTime?), string storageAccountType = default(string), string replicationMode = default(string), IList<GalleryTargetExtendedLocation> targetExtendedLocations = default(IList<GalleryTargetExtendedLocation>), UserArtifactManage manageActions = default(UserArtifactManage), UserArtifactSettings settings = default(UserArtifactSettings), IDictionary<string, string> advancedSettings = default(IDictionary<string, string>), bool? enableHealthCheck = default(bool?), IList<GalleryApplicationCustomAction> customActions = default(IList<GalleryApplicationCustomAction>))
            : base(targetRegions, replicaCount, excludeFromLatest, publishedDate, endOfLifeDate, storageAccountType, replicationMode, targetExtendedLocations)
        {
            Source = source;
            ManageActions = manageActions;
            Settings = settings;
            AdvancedSettings = advancedSettings;
            EnableHealthCheck = enableHealthCheck;
            CustomActions = customActions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public UserArtifactSource Source { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "manageActions")]
        public UserArtifactManage ManageActions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "settings")]
        public UserArtifactSettings Settings { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "advancedSettings")]
        public IDictionary<string, string> AdvancedSettings { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enableHealthCheck")]
        public bool? EnableHealthCheck { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "customActions")]
        public IList<GalleryApplicationCustomAction> CustomActions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Source == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Source");
            }
            if (Source != null)
            {
                Source.Validate();
            }
            if (ManageActions != null)
            {
                ManageActions.Validate();
            }
            if (CustomActions != null)
            {
                foreach (var element in CustomActions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
