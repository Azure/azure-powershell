// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    [Rest.Serialization.JsonTransformation]
    public partial class DiskEncryptionSet : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the DiskEncryptionSet class.
        /// </summary>
        public DiskEncryptionSet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DiskEncryptionSet class.
        /// </summary>
        /// <param name="location">Resource location</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="encryptionType">Possible values include:
        /// 'EncryptionAtRestWithCustomerKey',
        /// 'EncryptionAtRestWithPlatformAndCustomerKeys',
        /// 'ConfidentialVmEncryptedWithCustomerKey'</param>
        public DiskEncryptionSet(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string encryptionType = default(string), KeyForDiskEncryptionSet activeKey = default(KeyForDiskEncryptionSet), IList<KeyForDiskEncryptionSet> previousKeys = default(IList<KeyForDiskEncryptionSet>), string provisioningState = default(string), bool? rotationToLatestKeyVersionEnabled = default(bool?), System.DateTime? lastKeyRotationTimestamp = default(System.DateTime?), ApiError autoKeyRotationError = default(ApiError), string federatedClientId = default(string), EncryptionSetIdentity identity = default(EncryptionSetIdentity))
            : base(location, id, name, type, tags)
        {
            EncryptionType = encryptionType;
            ActiveKey = activeKey;
            PreviousKeys = previousKeys;
            ProvisioningState = provisioningState;
            RotationToLatestKeyVersionEnabled = rotationToLatestKeyVersionEnabled;
            LastKeyRotationTimestamp = lastKeyRotationTimestamp;
            AutoKeyRotationError = autoKeyRotationError;
            FederatedClientId = federatedClientId;
            Identity = identity;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include:
        /// 'EncryptionAtRestWithCustomerKey',
        /// 'EncryptionAtRestWithPlatformAndCustomerKeys',
        /// 'ConfidentialVmEncryptedWithCustomerKey'
        /// </summary>
        [JsonProperty(PropertyName = "properties.encryptionType")]
        public string EncryptionType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.activeKey")]
        public KeyForDiskEncryptionSet ActiveKey { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.previousKeys")]
        public IList<KeyForDiskEncryptionSet> PreviousKeys { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.rotationToLatestKeyVersionEnabled")]
        public bool? RotationToLatestKeyVersionEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastKeyRotationTimestamp")]
        public System.DateTime? LastKeyRotationTimestamp { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.autoKeyRotationError")]
        public ApiError AutoKeyRotationError { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.federatedClientId")]
        public string FederatedClientId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public EncryptionSetIdentity Identity { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (ActiveKey != null)
            {
                ActiveKey.Validate();
            }
            if (PreviousKeys != null)
            {
                foreach (var element in PreviousKeys)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
