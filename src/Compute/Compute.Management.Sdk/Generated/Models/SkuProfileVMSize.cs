// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Specifies the VM Size.
    /// </summary>
    public partial class SkuProfileVMSize
    {
        /// <summary>
        /// Initializes a new instance of the SkuProfileVMSize class.
        /// </summary>
        public SkuProfileVMSize()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SkuProfileVMSize class.
        /// </summary>
        /// <param name="name">Specifies the name of the VM Size.</param>
        /// <param name="rank">Specifies the rank (a.k.a priority) associated
        /// with the VM Size.</param>
        public SkuProfileVMSize(string name = default(string), int? rank = default(int?))
        {
            Name = name;
            Rank = rank;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specifies the name of the VM Size.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets specifies the rank (a.k.a priority) associated with
        /// the VM Size.
        /// </summary>
        [JsonProperty(PropertyName = "rank")]
        public int? Rank { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Rank != null)
            {
                if (Rank < 0)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "Rank", 0);
                }
            }
        }
    }
}
