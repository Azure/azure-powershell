// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes the data disk to be attached.
    /// </summary>
    public partial class DataDisksToAttach
    {
        /// <summary>
        /// Initializes a new instance of the DataDisksToAttach class.
        /// </summary>
        public DataDisksToAttach()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataDisksToAttach class.
        /// </summary>
        /// <param name="diskId">ID of the managed data disk.</param>
        /// <param name="lun">The logical unit number of the data disk. This
        /// value is used to identify data disks within the VM and therefore
        /// must be unique for each data disk attached to a VM. If not
        /// specified, lun would be auto assigned.</param>
        /// <param name="caching">Specifies the caching requirements. Possible
        /// values are: **None,** **ReadOnly,** **ReadWrite.** The defaulting
        /// behavior is: **None for Standard storage. ReadOnly for Premium
        /// storage.**. Possible values include: 'None', 'ReadOnly',
        /// 'ReadWrite'</param>
        /// <param name="deleteOption">Specifies whether data disk should be
        /// deleted or detached upon VM deletion. Possible values are:
        /// **Delete.** If this value is used, the data disk is deleted when VM
        /// is deleted. **Detach.** If this value is used, the data disk is
        /// retained after VM is deleted. The default value is set to
        /// **Detach**. Possible values include: 'Delete', 'Detach'</param>
        /// <param name="diskEncryptionSet">Specifies the customer managed disk
        /// encryption set resource id for the managed disk.</param>
        /// <param name="writeAcceleratorEnabled">Specifies whether
        /// writeAccelerator should be enabled or disabled on the disk.</param>
        public DataDisksToAttach(string diskId, int? lun = default(int?), CachingTypes? caching = default(CachingTypes?), string deleteOption = default(string), DiskEncryptionSetParameters diskEncryptionSet = default(DiskEncryptionSetParameters), bool? writeAcceleratorEnabled = default(bool?))
        {
            DiskId = diskId;
            Lun = lun;
            Caching = caching;
            DeleteOption = deleteOption;
            DiskEncryptionSet = diskEncryptionSet;
            WriteAcceleratorEnabled = writeAcceleratorEnabled;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets ID of the managed data disk.
        /// </summary>
        [JsonProperty(PropertyName = "diskId")]
        public string DiskId { get; set; }

        /// <summary>
        /// Gets or sets the logical unit number of the data disk. This value
        /// is used to identify data disks within the VM and therefore must be
        /// unique for each data disk attached to a VM. If not specified, lun
        /// would be auto assigned.
        /// </summary>
        [JsonProperty(PropertyName = "lun")]
        public int? Lun { get; set; }

        /// <summary>
        /// Gets or sets specifies the caching requirements. Possible values
        /// are: **None,** **ReadOnly,** **ReadWrite.** The defaulting behavior
        /// is: **None for Standard storage. ReadOnly for Premium storage.**.
        /// Possible values include: 'None', 'ReadOnly', 'ReadWrite'
        /// </summary>
        [JsonProperty(PropertyName = "caching")]
        public CachingTypes? Caching { get; set; }

        /// <summary>
        /// Gets or sets specifies whether data disk should be deleted or
        /// detached upon VM deletion. Possible values are: **Delete.** If this
        /// value is used, the data disk is deleted when VM is deleted.
        /// **Detach.** If this value is used, the data disk is retained after
        /// VM is deleted. The default value is set to **Detach**. Possible
        /// values include: 'Delete', 'Detach'
        /// </summary>
        [JsonProperty(PropertyName = "deleteOption")]
        public string DeleteOption { get; set; }

        /// <summary>
        /// Gets or sets specifies the customer managed disk encryption set
        /// resource id for the managed disk.
        /// </summary>
        [JsonProperty(PropertyName = "diskEncryptionSet")]
        public DiskEncryptionSetParameters DiskEncryptionSet { get; set; }

        /// <summary>
        /// Gets or sets specifies whether writeAccelerator should be enabled
        /// or disabled on the disk.
        /// </summary>
        [JsonProperty(PropertyName = "writeAcceleratorEnabled")]
        public bool? WriteAcceleratorEnabled { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DiskId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DiskId");
            }
        }
    }
}
