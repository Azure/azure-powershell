// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    [Rest.Serialization.JsonTransformation]
    public partial class GalleryInVMAccessControlProfileVersion : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// GalleryInVMAccessControlProfileVersion class.
        /// </summary>
        public GalleryInVMAccessControlProfileVersion()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// GalleryInVMAccessControlProfileVersion class.
        /// </summary>
        /// <param name="location">Resource location</param>
        /// <param name="mode">Possible values include: 'Audit', 'Enforce',
        /// 'Disabled'</param>
        /// <param name="defaultAccess">Possible values include: 'Allow',
        /// 'Deny'</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="provisioningState">Possible values include:
        /// 'Creating', 'Updating', 'Failed', 'Succeeded', 'Deleting',
        /// 'Migrating'</param>
        public GalleryInVMAccessControlProfileVersion(string location, string mode, string defaultAccess, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), IList<TargetRegion> targetLocations = default(IList<TargetRegion>), bool? excludeFromLatest = default(bool?), System.DateTime? publishedDate = default(System.DateTime?), string provisioningState = default(string), ReplicationStatus replicationStatus = default(ReplicationStatus), AccessControlRules rules = default(AccessControlRules))
            : base(location, id, name, type, tags)
        {
            TargetLocations = targetLocations;
            ExcludeFromLatest = excludeFromLatest;
            PublishedDate = publishedDate;
            ProvisioningState = provisioningState;
            ReplicationStatus = replicationStatus;
            Mode = mode;
            DefaultAccess = defaultAccess;
            Rules = rules;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetLocations")]
        public IList<TargetRegion> TargetLocations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.excludeFromLatest")]
        public bool? ExcludeFromLatest { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.publishedDate")]
        public System.DateTime? PublishedDate { get; private set; }

        /// <summary>
        /// Gets possible values include: 'Creating', 'Updating', 'Failed',
        /// 'Succeeded', 'Deleting', 'Migrating'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.replicationStatus")]
        public ReplicationStatus ReplicationStatus { get; private set; }

        /// <summary>
        /// Gets or sets possible values include: 'Audit', 'Enforce',
        /// 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.mode")]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Allow', 'Deny'
        /// </summary>
        [JsonProperty(PropertyName = "properties.defaultAccess")]
        public string DefaultAccess { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.rules")]
        public AccessControlRules Rules { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Mode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Mode");
            }
            if (DefaultAccess == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DefaultAccess");
            }
            if (TargetLocations != null)
            {
                foreach (var element in TargetLocations)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
