// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    [Rest.Serialization.JsonTransformation]
    public partial class RestorePoint : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the RestorePoint class.
        /// </summary>
        public RestorePoint()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RestorePoint class.
        /// </summary>
        /// <param name="consistencyMode">Possible values include:
        /// 'CrashConsistent', 'FileSystemConsistent',
        /// 'ApplicationConsistent'</param>
        public RestorePoint(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), IList<ApiEntityReference> excludeDisks = default(IList<ApiEntityReference>), RestorePointSourceMetadata sourceMetadata = default(RestorePointSourceMetadata), string provisioningState = default(string), string consistencyMode = default(string), System.DateTime? timeCreated = default(System.DateTime?), ApiEntityReference sourceRestorePoint = default(ApiEntityReference), RestorePointInstanceView instanceView = default(RestorePointInstanceView))
            : base(id, name, type, systemData)
        {
            ExcludeDisks = excludeDisks;
            SourceMetadata = sourceMetadata;
            ProvisioningState = provisioningState;
            ConsistencyMode = consistencyMode;
            TimeCreated = timeCreated;
            SourceRestorePoint = sourceRestorePoint;
            InstanceView = instanceView;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.excludeDisks")]
        public IList<ApiEntityReference> ExcludeDisks { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceMetadata")]
        public RestorePointSourceMetadata SourceMetadata { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets possible values include: 'CrashConsistent',
        /// 'FileSystemConsistent', 'ApplicationConsistent'
        /// </summary>
        [JsonProperty(PropertyName = "properties.consistencyMode")]
        public string ConsistencyMode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.timeCreated")]
        public System.DateTime? TimeCreated { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceRestorePoint")]
        public ApiEntityReference SourceRestorePoint { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.instanceView")]
        public RestorePointInstanceView InstanceView { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SourceMetadata != null)
            {
                SourceMetadata.Validate();
            }
        }
    }
}
