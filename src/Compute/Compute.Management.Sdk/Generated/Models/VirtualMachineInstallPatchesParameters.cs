// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class VirtualMachineInstallPatchesParameters
    {
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineInstallPatchesParameters class.
        /// </summary>
        public VirtualMachineInstallPatchesParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineInstallPatchesParameters class.
        /// </summary>
        /// <param name="rebootSetting">Possible values include: 'IfRequired',
        /// 'Never', 'Always'</param>
        public VirtualMachineInstallPatchesParameters(string rebootSetting, System.TimeSpan? maximumDuration = default(System.TimeSpan?), WindowsParameters windowsParameters = default(WindowsParameters), LinuxParameters linuxParameters = default(LinuxParameters))
        {
            MaximumDuration = maximumDuration;
            RebootSetting = rebootSetting;
            WindowsParameters = windowsParameters;
            LinuxParameters = linuxParameters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maximumDuration")]
        public System.TimeSpan? MaximumDuration { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'IfRequired', 'Never',
        /// 'Always'
        /// </summary>
        [JsonProperty(PropertyName = "rebootSetting")]
        public string RebootSetting { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "windowsParameters")]
        public WindowsParameters WindowsParameters { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "linuxParameters")]
        public LinuxParameters LinuxParameters { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RebootSetting == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RebootSetting");
            }
        }
    }
}
