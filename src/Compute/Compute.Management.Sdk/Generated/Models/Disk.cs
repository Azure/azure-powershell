// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    [Rest.Serialization.JsonTransformation]
    public partial class Disk : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the Disk class.
        /// </summary>
        public Disk()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Disk class.
        /// </summary>
        /// <param name="location">Resource location</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="osType">Possible values include: 'Windows',
        /// 'Linux'</param>
        /// <param name="hyperVGeneration">Possible values include: 'V1',
        /// 'V2'</param>
        /// <param name="diskState">Possible values include: 'Unattached',
        /// 'Attached', 'Reserved', 'Frozen', 'ActiveSAS', 'ActiveSASFrozen',
        /// 'ReadyToUpload', 'ActiveUpload'</param>
        /// <param name="networkAccessPolicy">Possible values include:
        /// 'AllowAll', 'AllowPrivate', 'DenyAll'</param>
        /// <param name="publicNetworkAccess">Possible values include:
        /// 'Enabled', 'Disabled'</param>
        /// <param name="dataAccessAuthMode">Possible values include:
        /// 'AzureActiveDirectory', 'None'</param>
        public Disk(string location, CreationData creationData, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), System.DateTime? timeCreated = default(System.DateTime?), OperatingSystemTypes? osType = default(OperatingSystemTypes?), string hyperVGeneration = default(string), DiskPurchasePlan purchasePlan = default(DiskPurchasePlan), SupportedCapabilities supportedCapabilities = default(SupportedCapabilities), int? diskSizeGB = default(int?), long? diskSizeBytes = default(long?), string uniqueId = default(string), EncryptionSettingsCollection encryptionSettingsCollection = default(EncryptionSettingsCollection), string provisioningState = default(string), long? diskIOPSReadWrite = default(long?), long? diskMBpsReadWrite = default(long?), long? diskIOPSReadOnly = default(long?), long? diskMBpsReadOnly = default(long?), string diskState = default(string), Encryption encryption = default(Encryption), int? maxShares = default(int?), IList<ShareInfoElement> shareInfo = default(IList<ShareInfoElement>), string networkAccessPolicy = default(string), string diskAccessId = default(string), System.DateTime? burstingEnabledTime = default(System.DateTime?), string tier = default(string), bool? burstingEnabled = default(bool?), PropertyUpdatesInProgress propertyUpdatesInProgress = default(PropertyUpdatesInProgress), bool? supportsHibernation = default(bool?), DiskSecurityProfile securityProfile = default(DiskSecurityProfile), double? completionPercent = default(double?), string publicNetworkAccess = default(string), string dataAccessAuthMode = default(string), bool? optimizedForFrequentAttach = default(bool?), System.DateTime? lastOwnershipUpdateTime = default(System.DateTime?), string managedBy = default(string), IList<string> managedByExtended = default(IList<string>), DiskSku sku = default(DiskSku), IList<string> zones = default(IList<string>), ExtendedLocation extendedLocation = default(ExtendedLocation))
            : base(location, id, name, type, tags)
        {
            TimeCreated = timeCreated;
            OsType = osType;
            HyperVGeneration = hyperVGeneration;
            PurchasePlan = purchasePlan;
            SupportedCapabilities = supportedCapabilities;
            CreationData = creationData;
            DiskSizeGB = diskSizeGB;
            DiskSizeBytes = diskSizeBytes;
            UniqueId = uniqueId;
            EncryptionSettingsCollection = encryptionSettingsCollection;
            ProvisioningState = provisioningState;
            DiskIOPSReadWrite = diskIOPSReadWrite;
            DiskMBpsReadWrite = diskMBpsReadWrite;
            DiskIOPSReadOnly = diskIOPSReadOnly;
            DiskMBpsReadOnly = diskMBpsReadOnly;
            DiskState = diskState;
            Encryption = encryption;
            MaxShares = maxShares;
            ShareInfo = shareInfo;
            NetworkAccessPolicy = networkAccessPolicy;
            DiskAccessId = diskAccessId;
            BurstingEnabledTime = burstingEnabledTime;
            Tier = tier;
            BurstingEnabled = burstingEnabled;
            PropertyUpdatesInProgress = propertyUpdatesInProgress;
            SupportsHibernation = supportsHibernation;
            SecurityProfile = securityProfile;
            CompletionPercent = completionPercent;
            PublicNetworkAccess = publicNetworkAccess;
            DataAccessAuthMode = dataAccessAuthMode;
            OptimizedForFrequentAttach = optimizedForFrequentAttach;
            LastOwnershipUpdateTime = lastOwnershipUpdateTime;
            ManagedBy = managedBy;
            ManagedByExtended = managedByExtended;
            Sku = sku;
            Zones = zones;
            ExtendedLocation = extendedLocation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.timeCreated")]
        public System.DateTime? TimeCreated { get; private set; }

        /// <summary>
        /// Gets or sets possible values include: 'Windows', 'Linux'
        /// </summary>
        [JsonProperty(PropertyName = "properties.osType")]
        public OperatingSystemTypes? OsType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'V1', 'V2'
        /// </summary>
        [JsonProperty(PropertyName = "properties.hyperVGeneration")]
        public string HyperVGeneration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.purchasePlan")]
        public DiskPurchasePlan PurchasePlan { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.supportedCapabilities")]
        public SupportedCapabilities SupportedCapabilities { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.creationData")]
        public CreationData CreationData { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.diskSizeGB")]
        public int? DiskSizeGB { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.diskSizeBytes")]
        public long? DiskSizeBytes { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.uniqueId")]
        public string UniqueId { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.encryptionSettingsCollection")]
        public EncryptionSettingsCollection EncryptionSettingsCollection { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.diskIOPSReadWrite")]
        public long? DiskIOPSReadWrite { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.diskMBpsReadWrite")]
        public long? DiskMBpsReadWrite { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.diskIOPSReadOnly")]
        public long? DiskIOPSReadOnly { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.diskMBpsReadOnly")]
        public long? DiskMBpsReadOnly { get; set; }

        /// <summary>
        /// Gets possible values include: 'Unattached', 'Attached', 'Reserved',
        /// 'Frozen', 'ActiveSAS', 'ActiveSASFrozen', 'ReadyToUpload',
        /// 'ActiveUpload'
        /// </summary>
        [JsonProperty(PropertyName = "properties.diskState")]
        public string DiskState { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.encryption")]
        public Encryption Encryption { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.maxShares")]
        public int? MaxShares { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.shareInfo")]
        public IList<ShareInfoElement> ShareInfo { get; private set; }

        /// <summary>
        /// Gets or sets possible values include: 'AllowAll', 'AllowPrivate',
        /// 'DenyAll'
        /// </summary>
        [JsonProperty(PropertyName = "properties.networkAccessPolicy")]
        public string NetworkAccessPolicy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.diskAccessId")]
        public string DiskAccessId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.burstingEnabledTime")]
        public System.DateTime? BurstingEnabledTime { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.tier")]
        public string Tier { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.burstingEnabled")]
        public bool? BurstingEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.propertyUpdatesInProgress")]
        public PropertyUpdatesInProgress PropertyUpdatesInProgress { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.supportsHibernation")]
        public bool? SupportsHibernation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.securityProfile")]
        public DiskSecurityProfile SecurityProfile { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.completionPercent")]
        public double? CompletionPercent { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'AzureActiveDirectory',
        /// 'None'
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataAccessAuthMode")]
        public string DataAccessAuthMode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.optimizedForFrequentAttach")]
        public bool? OptimizedForFrequentAttach { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.LastOwnershipUpdateTime")]
        public System.DateTime? LastOwnershipUpdateTime { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "managedBy")]
        public string ManagedBy { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "managedByExtended")]
        public IList<string> ManagedByExtended { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public DiskSku Sku { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "zones")]
        public IList<string> Zones { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "extendedLocation")]
        public ExtendedLocation ExtendedLocation { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (CreationData == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CreationData");
            }
            if (PurchasePlan != null)
            {
                PurchasePlan.Validate();
            }
            if (CreationData != null)
            {
                CreationData.Validate();
            }
            if (EncryptionSettingsCollection != null)
            {
                EncryptionSettingsCollection.Validate();
            }
        }
    }
}
