
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create the provisioned cluster instance
.Description
Create the provisioned cluster instance
.Example
New-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -ControlPlaneCount 3
.Example
New-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -EnableAutoScaling -MinCount 1 -MaxCount 5
.Example
New-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -NfCsiDriverEnabled
.Example
New-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -SmbCsiDriverEnabled
.Example
New-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -LicenseProfileAzureHybridBenefit
.Example
New-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -LicenseProfileAzureHybridBenefit:$false
.Example
New-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -EnableAutoScaling:$false
.Example
New-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -NfCsiDriverEnabled:$false
.Example
New-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -SmbCsiDriverEnabled:$false
.Example
New-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -AdminGroupObjectID @("2e00cb64-66d8-4c9c-92d8-6462caf99e33", "1b28ff4f-f7c5-4aaa-aa79-ba8b775ab443")

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IProvisionedCluster
.Notes
.Link
https://learn.microsoft.com/powershell/module/az.aksarc/new-azaksarccluster
#>
function New-AzAksArcCluster {
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IProvisionedCluster])]
    [CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
    param(
        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Path')]
        [System.String]
        # The name of the Kubernetes cluster on which get is called.
        ${ClusterName},
    
        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Path')]
        [System.String]
        # The name of the resource group.
        # The name is case insensitive.
        ${ResourceGroupName},
    
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
        [System.String]
        # The ID of the target subscription.
        ${SubscriptionId},

        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [System.String]
        # ARM Id of the extended location.
        ${CustomLocationName},
    
        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [System.String]
        # List of ARM resource Ids (maximum 1) for the infrastructure network object e.g.
        # /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/logicalNetworks/{logicalNetworkName}
        ${VnetId},

        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [System.String]
        # IP address of the Kubernetes API server
        ${ControlPlaneEndpointHostIP},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [System.String]
        # Location
        ${Location},

        [Parameter()]
        [AllowEmptyCollection()]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [System.String[]]
        ${AdminGroupObjectID},
    
        [Parameter(ParameterSetName='CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [System.String]
        # IP Address or CIDR for SSH access to VMs in the provisioned cluster
        ${ClusterVMAccessProfileAuthorizedIprange},

        [Parameter(ParameterSetName='CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [System.Int32]
        # Number of control plane nodes.
        # The default value is 1, and the count should be an odd number
        ${ControlPlaneCount},
    
        [Parameter(ParameterSetName='CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [System.String]
        # VM sku size of the control plane nodes
        ${ControlPlaneVMSize},
    
        [Parameter(ParameterSetName='CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [System.String]
        # The version of Kubernetes in use by the provisioned cluster.
        ${KubernetesVersion},
    
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Indicates whether Azure Hybrid Benefit is opted in.
        # Default value is false
        ${EnableAzureHybridBenefit},
    
        [Parameter(ParameterSetName='CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [System.Int32]
        # Number of HA Proxy load balancer VMs.
        # The default value is 0.
        ${LoadBalancerProfileCount},
    
        [Parameter(ParameterSetName='CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [System.String]
        # A CIDR notation IP Address range from which to assign pod IPs.
        ${NetworkProfilePodCidr},
    
        [Parameter(ParameterSetName='CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Indicates whether to enable NFS CSI Driver.
        # The default value is true.
        ${NfCsiDriverEnabled},
    
        [Parameter(ParameterSetName='CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Indicates whether to enable SMB CSI Driver.
        # The default value is true.
        ${SmbCsiDriverEnabled},

        [Parameter(ParameterSetName='CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [System.String]
        # The list of SSH public keys used to authenticate with VMs.
        # A maximum of 1 key may be specified.
        ${SshKeyValue},

        [Parameter(ParameterSetName='CreateExpanded')]
        [Parameter(ParameterSetName='AutoScaling', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Path')]
        [System.Int32]
        ${MinCount},

        [Parameter(ParameterSetName='CreateExpanded')]
        [Parameter(ParameterSetName='AutoScaling', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Path')]
        [System.Int32]
        ${MaxCount},

        [Parameter(ParameterSetName='CreateExpanded')]
        [Parameter(ParameterSetName='AutoScaling', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Indicates whether to enable NFS CSI Driver.
        # The default value is true.
        ${EnableAutoScaling},

        [Parameter(ParameterSetName='CreateExpanded')]
        [Parameter(ParameterSetName='AutoScaling', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Path')]
        [System.Int32]
        ${MaxPod},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IAgentPoolProfileNodeLabels]))]
        [System.Collections.Hashtable]
        # The node labels to be persisted across all nodes in agent pool.
        ${NodeLabel},

        [Parameter()]
        [AllowEmptyCollection()]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [System.String[]]
        # Taints added to new nodes during node pool create and scale.
        # For example, key=value:NoSchedule.
        ${NodeTaint},

        [Parameter(ParameterSetName='CreateViaJsonFilePath', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [System.String]
        # Path of Json file supplied to the Create operation
        ${JsonFilePath},
    
        [Parameter(ParameterSetName='CreateViaJsonString', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
        [System.String]
        # Json string supplied to the Create operation
        ${JsonString},
    
        [Parameter()]
        [Alias('AzureRMContext', 'AzureCredential')]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Azure')]
        [System.Management.Automation.PSObject]
        # The DefaultProfile parameter is not functional.
        # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
        ${DefaultProfile},
    
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command as a job
        ${AsJob},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Wait for .NET debugger to attach
        ${Break},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be appended to the front of the pipeline
        ${HttpPipelineAppend},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be prepended to the front of the pipeline
        ${HttpPipelinePrepend},
    
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command asynchronously
        ${NoWait},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
        [System.Uri]
        # The URI for the proxy server to use
        ${Proxy},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
        [System.Management.Automation.PSCredential]
        # Credentials for a proxy server to use for the remote call
        ${ProxyCredential},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Use the default credentials for the proxy
        ${ProxyUseDefaultCredentials}
    )

    process {
        $Scope = GetConnectedClusterResourceURI -SubscriptionId $SubscriptionId -ResourceGroupName $ResourceGroupName -ClusterName $ClusterName
        $null = $PSBoundParameters.Remove("SubscriptionId")
        $null = $PSBoundParameters.Remove("ResourceGroupName")
        $null = $PSBoundParameters.Remove("ClusterName")
        $null = $PSBoundParameters.Add("ConnectedClusterResourceUri", $Scope)

        # Network Validations
        $response = Invoke-AzRestMethod -Path "$VnetId/?api-version=2024-01-01" -Method GET
        if ($response.StatusCode -eq 200) {
            $lnet = ($response.Content | ConvertFrom-Json)
            $err = ValidateLogicalNetwork -lnet $lnet -ControlPlaneIP $ControlPlaneEndpointHostIP
            if ($err) {
                throw $err
            }
        } else {
            throw "Could not locate logical network with id: $VnetId"
        }

        # Edit parameters
        $null = $PSBoundParameters.Add("InfraNetworkProfileVnetSubnetId", @($VnetId))
        $null = $PSBoundParameters.Add("ExtendedLocationType", "CustomLocation")
        $null = $PSBoundParameters.Add("ExtendedLocationName", $CustomLocationName)
        $null = $PSBoundParameters.Add("NetworkProfileNetworkPolicy", "calico")
        $null = $PSBoundParameters.Remove("Location")
        $null = $PSBoundParameters.Remove("CustomLocationName")
        $null = $PSBoundParameters.Remove("VnetId")


        # Create connected cluster parent resource
        if (!$Location) {
            $Location = "eastus"
        }
        CreateConnectedCluster -SubscriptionId $SubscriptionId -ResourceGroupName $ResourceGroupName -ClusterName $ClusterName -Location $Location -AdminGroupObjectID $AdminGroupObjectID
        $null = $PSBoundParameters.Remove("AdminGroupObjectID")
        
        # Generate public ssh key if one is not provided
        $SshPublicKeyObj = [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.LinuxProfilePropertiesSshPublicKeysItem]::New()
        if ($PSBoundParameters.ContainsKey('SshKeyValue')) {
            $SshPublicKeyObj.KeyData = $SshKeyValue
        } else {
            $SshPublicKeyObj = GenerateSSHKey ClusterName $ClusterName
        }
        $null = $PSBoundParameters.Remove("SshKeyValue")
        $null = $PSBoundParameters.Add("SshPublicKey", @($SshPublicKeyObj))

        # Configure Agent Pool
        $AgentPoolProfile = CreateAgentPoolProfile -EnableAutoScaling:$EnableAutoScaling -MinCount $MinCount -MaxCount $MaxCount -MaxPod $MaxPod -NodeTaint $NodeTaint -NodeLabel $NodeLabel
        $null = $PSBoundParameters.Add("AgentPoolProfile", $AgentPoolProfile)

        # Create Provisioned Cluster
        if ($EnableAzureHybridBenefit) {
            $null = $PSBoundParameters.Add("LicenseProfileAzureHybridBenefit", $true)
        } else {
            $null = $PSBoundParameters.Add("LicenseProfileAzureHybridBenefit", $false)
        }
        $null = $PSBoundParameters.Remove("EnableAzureHybridBenefit")
        Az.AksArc.internal\New-AzAksArcCluster @PSBoundParameters
    }
    }
    