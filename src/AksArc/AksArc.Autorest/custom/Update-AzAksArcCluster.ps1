
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Update the provisioned cluster instance
.Description
Update the provisioned cluster instance
.Example
Update-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -ControlPlaneCount 3
.Example
Update-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -EnableAutoScaling -MinCount 1 -MaxCount 5
.Example
Update-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -NfCsiDriverEnabled
.Example
Update-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -SmbCsiDriverEnabled
.Example
Update-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -LicenseProfileAzureHybridBenefit
.Example
Update-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -LicenseProfileAzureHybridBenefit:$false
.Example
Update-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -EnableAutoScaling:$false
.Example
Update-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -NfCsiDriverEnabled:$false
.Example
Update-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -SmbCsiDriverEnabled:$false
.Example
Update-AzAksArcCluster -ClusterName azps_test_cluster -ResourceGroupName azps_test_group -AdminGroupObjectID @("2e00cb64-66d8-4c9c-92d8-6462caf99e33", "1b28ff4f-f7c5-4aaa-aa79-ba8b775ab443")

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IProvisionedCluster
.Link
https://learn.microsoft.com/powershell/module/az.aksarc/update-azaksarccluster
#>
function Update-AzAksArcCluster {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IProvisionedCluster])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Path')]
    [System.String]
    # The name of the Kubernetes cluster on which get is called.
    ${ClusterName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String[]]
    ${AdminGroupObjectID},

    [Parameter(ParameterSetName='AutoScaling', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Path')]
    [System.Int32]
    # Min nodes in autoscalar
    ${MinCount},

    [Parameter(ParameterSetName='AutoScaling', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Path')]
    [System.Int32]
    # Max nodes in autoscalar
    ${MaxCount},

    [Parameter(ParameterSetName='AutoScaling', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Indicates whether to enable autoscalar.
    # The default value is true.
    ${EnableAutoScaling},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Indicates whether Azure Hybrid Benefit is opted in.
    # Default value is false
    ${EnableAzureHybridBenefit},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.Int32]
    # Number of control plane nodes.
    # The default value is 1, and the count should be an odd number
    ${ControlPlaneCount},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Indicates whether to enable NFS CSI Driver.
    # The default value is true.
    ${NfCsiDriverEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Indicates whether to enable SMB CSI Driver.
    # The default value is true.
    ${SmbCsiDriverEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String]
    # Valid values are 'true' and 'false'
    ${AutoScalerProfileBalanceSimilarNodeGroup},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.PSArgumentCompleterAttribute("least-waste", "most-pods", "priority", "random")]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String]
    # If not specified, the default is 'random'.
    # See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders) for more information.
    ${AutoScalerProfileExpander},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String]
    # The default is 10.
    ${AutoScalerProfileMaxEmptyBulkDelete},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String]
    # The default is 600.
    ${AutoScalerProfileMaxGracefulTerminationSec},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String]
    # The default is '15m'.
    # Values must be an integer followed by an 'm'.
    # No unit of time other than minutes (m) is supported.
    ${AutoScalerProfileMaxNodeProvisionTime},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String]
    # The default is 45.
    # The maximum is 100 and the minimum is 0.
    ${AutoScalerProfileMaxTotalUnreadyPercentage},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String]
    # For scenarios like burst/batch scale where you don't want CA to act before the kubernetes scheduler could schedule all the pods, you can tell CA to ignore unscheduled pods before they're a certain age.
    # The default is '0s'.
    # Values must be an integer followed by a unit ('s' for seconds, 'm' for minutes, 'h' for hours, etc).
    ${AutoScalerProfileNewPodScaleUpDelay},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String]
    # This must be an integer.
    # The default is 3.
    ${AutoScalerProfileOkTotalUnreadyCount},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String]
    # The default is '10m'.
    # Values must be an integer followed by an 'm'.
    # No unit of time other than minutes (m) is supported.
    ${AutoScalerProfileScaleDownDelayAfterAdd},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String]
    # The default is the scan-interval.
    # Values must be an integer followed by an 'm'.
    # No unit of time other than minutes (m) is supported.
    ${AutoScalerProfileScaleDownDelayAfterDelete},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String]
    # The default is '3m'.
    # Values must be an integer followed by an 'm'.
    # No unit of time other than minutes (m) is supported.
    ${AutoScalerProfileScaleDownDelayAfterFailure},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String]
    # The default is '10m'.
    # Values must be an integer followed by an 'm'.
    # No unit of time other than minutes (m) is supported.
    ${AutoScalerProfileScaleDownUnneededTime},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String]
    # The default is '20m'.
    # Values must be an integer followed by an 'm'.
    # No unit of time other than minutes (m) is supported.
    ${AutoScalerProfileScaleDownUnreadyTime},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String]
    # The default is '0.5'.
    ${AutoScalerProfileScaleDownUtilizationThreshold},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String]
    # The default is '10'.
    # Values must be an integer number of seconds.
    ${AutoScalerProfileScanInterval},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String]
    # The default is true.
    ${AutoScalerProfileSkipNodesWithLocalStorage},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String]
    # The default is true.
    ${AutoScalerProfileSkipNodesWithSystemPod},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

process {
    $Scope = GetConnectedClusterResourceURI -SubscriptionId $SubscriptionId -ResourceGroupName $ResourceGroupName -ClusterName $ClusterName
    $null = $PSBoundParameters.Remove("SubscriptionId")
    $null = $PSBoundParameters.Remove("ResourceGroupName")
    $null = $PSBoundParameters.Remove("ClusterName")
    $null = $PSBoundParameters.Add("ConnectedClusterResourceUri", $Scope)

    # Update Connected Cluster Parent Resource
    if ($PSBoundParameters.ContainsKey("AdminGroupObjectID")) {
        $ShouldUpdateConnectedCluster = $true
    }

    if ($ShouldUpdateConnectedCluster) {
        UpdateConnectedCluster -SubscriptionId $SubscriptionId -ResourceGroupName $ResourceGroupName -ClusterName $ClusterName -AdminGroupObjectID $AdminGroupObjectID
    }

    # Update Default Nodepool
    if ($PSBoundParameters.ContainsKey("MinCount"))
    {
        $ShouldUpdateDefaultNodepool = $true
    }

    if ($PSBoundParameters.ContainsKey("MaxCount"))
    {
        $ShouldUpdateDefaultNodepool = $true
    }

    if ($PSBoundParameters.ContainsKey("EnableAutoScaling"))
    {
        $ShouldUpdateDefaultNodepool = $true
    }

    if ($ShouldUpdateDefaultNodepool) {
        $nodepools = Get-AzAksArcNodepool -ClusterName $ClusterName -ResourceGroupName $ResourceGroupName -SubscriptionId $SubscriptionId
        if ($nodepools.length -ne 1) {
            Write-Error "Error invalid number of nodepools."
            return
        }

        Update-AzAksArcNodepool -ClusterName $ClusterName -ResourceGroupName $ResourceGroupName -SubscriptionId $SubscriptionId -Name $nodepools.Name -EnableAutoScaling:$EnableAutoScaling -MinCount $MinCount -MaxCount $MaxCount
        $null = $PSBoundParameters.Remove("MinCount")
        $null = $PSBoundParameters.Remove("MaxCount")
        $null = $PSBoundParameters.Remove("EnableAutoScaling")
        return
    }

    # Update Provisioned Cluster
    if ($EnableAzureHybridBenefit) {
        $null = $PSBoundParameters.Add("LicenseProfileAzureHybridBenefit", $true)
    } else {
        $null = $PSBoundParameters.Add("LicenseProfileAzureHybridBenefit", $false)
    }
    $null = $PSBoundParameters.Remove("EnableAzureHybridBenefit")

    Az.AksArc.internal\Update-AzAksArcCluster @PSBoundParameters
}
}
