
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Gets the provisioned cluster instance
.Description
Gets the provisioned cluster instance
.Example
Get-AzAksArcLog -ipAddress 1.1.1.1 -sshkeypath "" -outdir "/logs"

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IProvisionedCluster
.Link
https://learn.microsoft.com/powershell/module/az.aksarc/get-azaksarclog
#>
function Get-AzAksArcLog {
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IProvisionedCluster])]
    [CmdletBinding(DefaultParameterSetName='Get', PositionalBinding=$false)]
    param(
        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Path')]
        [System.String]
        # IP Address of provisioned cluster
        ${ipAddress},
    
        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Path')]
        [System.String]
        # Path to ssh key for provisioned cluster
        ${sshkeypath},

        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Path')]
        [System.String]
        # Directory to output logs
        ${outdir},
    
        [Parameter()]
        [Alias('AzureRMContext', 'AzureCredential')]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Azure')]
        [System.Management.Automation.PSObject]
        # The DefaultProfile parameter is not functional.
        # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
        ${DefaultProfile},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Wait for .NET debugger to attach
        ${Break},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be appended to the front of the pipeline
        ${HttpPipelineAppend},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be prepended to the front of the pipeline
        ${HttpPipelinePrepend},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
        [System.Uri]
        # The URI for the proxy server to use
        ${Proxy},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
        [System.Management.Automation.PSCredential]
        # Credentials for a proxy server to use for the remote call
        ${ProxyCredential},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Use the default credentials for the proxy
        ${ProxyUseDefaultCredentials}
    )
    
    process {
        try {
            $null = ssh -i $sshkeypath clouduser@$ipAddress -o StrictHostKeyChecking=no "sudo /usr/local/logs_target_cluster.sh 2>&1"

            $date = Get-Date -format "yyyyMMdd"
            $filename = "logs_" + $ipAddress + "_" + $date
            $filepath = $outdir + "/" + $filename

            if (-not (Test-Path -Path $outdir)) {
                $null = New-Item -Path $outdir -ItemType Directory
            }
    
            $null = scp -i $sshkeypath clouduser@${ipAddress}:"/var/log/targetclusterlogs.tar.gz" $filepath
        } catch {
            Write-Error "Error while collecting logs from target cluster"
        }
    }
    }