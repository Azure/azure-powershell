// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Extensions;

    public partial class ImportImageParameters :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportImageParameters,
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportImageParametersInternal
    {

        /// <summary>The password used to authenticate with the source registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public string CredentialsPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportSourceInternal)Source).CredentialsPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportSourceInternal)Source).CredentialsPassword = value ?? null; }

        /// <summary>The username to authenticate with the source registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public string CredentialsUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportSourceInternal)Source).CredentialsUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportSourceInternal)Source).CredentialsUsername = value ?? null; }

        /// <summary>Internal Acessors for Source</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportSource Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportImageParametersInternal.Source { get => (this._source = this._source ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.ImportSource()); set { {_source = value;} } }

        /// <summary>Internal Acessors for SourceCredentials</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportSourceCredentials Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportImageParametersInternal.SourceCredentials { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportSourceInternal)Source).Credentials; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportSourceInternal)Source).Credentials = value; }

        /// <summary>Backing field for <see cref="Mode" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.ImportMode? _mode;

        /// <summary>
        /// When Force, any existing target tags will be overwritten. When NoForce, any existing target tags will fail the operation
        /// before any copying begins.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.ImportMode? Mode { get => this._mode; set => this._mode = value; }

        /// <summary>Backing field for <see cref="Source" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportSource _source;

        /// <summary>The source of the image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportSource Source { get => (this._source = this._source ?? new Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.ImportSource()); set => this._source = value; }

        /// <summary>
        /// Repository name of the source image.
        /// Specify an image by repository ('hello-world'). This will use the 'latest' tag.
        /// Specify an image by tag ('hello-world:latest').
        /// Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public string SourceImage { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportSourceInternal)Source).SourceImage; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportSourceInternal)Source).SourceImage = value ; }

        /// <summary>The address of the source registry (e.g. 'mcr.microsoft.com').</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public string SourceRegistryUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportSourceInternal)Source).RegistryUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportSourceInternal)Source).RegistryUri = value ?? null; }

        /// <summary>The resource identifier of the source Azure Container Registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inlined)]
        public string SourceResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportSourceInternal)Source).ResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportSourceInternal)Source).ResourceId = value ?? null; }

        /// <summary>Backing field for <see cref="TargetTag" /> property.</summary>
        private string[] _targetTag;

        /// <summary>
        /// List of strings of the form repo[:tag]. When tag is omitted the source will be used (or 'latest' if source tag is also
        /// omitted).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Owned)]
        public string[] TargetTag { get => this._targetTag; set => this._targetTag = value; }

        /// <summary>Backing field for <see cref="UntaggedTargetRepository" /> property.</summary>
        private string[] _untaggedTargetRepository;

        /// <summary>
        /// List of strings of repository names to do a manifest only copy. No tag will be created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Owned)]
        public string[] UntaggedTargetRepository { get => this._untaggedTargetRepository; set => this._untaggedTargetRepository = value; }

        /// <summary>Creates an new <see cref="ImportImageParameters" /> instance.</summary>
        public ImportImageParameters()
        {

        }
    }
    public partial interface IImportImageParameters :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.IJsonSerializable
    {
        /// <summary>The password used to authenticate with the source registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The password used to authenticate with the source registry.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string CredentialsPassword { get; set; }
        /// <summary>The username to authenticate with the source registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The username to authenticate with the source registry.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string CredentialsUsername { get; set; }
        /// <summary>
        /// When Force, any existing target tags will be overwritten. When NoForce, any existing target tags will fail the operation
        /// before any copying begins.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When Force, any existing target tags will be overwritten. When NoForce, any existing target tags will fail the operation before any copying begins.",
        SerializedName = @"mode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.ImportMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.ImportMode? Mode { get; set; }
        /// <summary>
        /// Repository name of the source image.
        /// Specify an image by repository ('hello-world'). This will use the 'latest' tag.
        /// Specify an image by tag ('hello-world:latest').
        /// Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Repository name of the source image.
        Specify an image by repository ('hello-world'). This will use the 'latest' tag.
        Specify an image by tag ('hello-world:latest').
        Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').",
        SerializedName = @"sourceImage",
        PossibleTypes = new [] { typeof(string) })]
        string SourceImage { get; set; }
        /// <summary>The address of the source registry (e.g. 'mcr.microsoft.com').</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The address of the source registry (e.g. 'mcr.microsoft.com').",
        SerializedName = @"registryUri",
        PossibleTypes = new [] { typeof(string) })]
        string SourceRegistryUri { get; set; }
        /// <summary>The resource identifier of the source Azure Container Registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource identifier of the source Azure Container Registry.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string SourceResourceId { get; set; }
        /// <summary>
        /// List of strings of the form repo[:tag]. When tag is omitted the source will be used (or 'latest' if source tag is also
        /// omitted).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of strings of the form repo[:tag]. When tag is omitted the source will be used (or 'latest' if source tag is also omitted).",
        SerializedName = @"targetTags",
        PossibleTypes = new [] { typeof(string) })]
        string[] TargetTag { get; set; }
        /// <summary>
        /// List of strings of repository names to do a manifest only copy. No tag will be created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of strings of repository names to do a manifest only copy. No tag will be created.",
        SerializedName = @"untaggedTargetRepositories",
        PossibleTypes = new [] { typeof(string) })]
        string[] UntaggedTargetRepository { get; set; }

    }
    internal partial interface IImportImageParametersInternal

    {
        /// <summary>The password used to authenticate with the source registry.</summary>
        string CredentialsPassword { get; set; }
        /// <summary>The username to authenticate with the source registry.</summary>
        string CredentialsUsername { get; set; }
        /// <summary>
        /// When Force, any existing target tags will be overwritten. When NoForce, any existing target tags will fail the operation
        /// before any copying begins.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.ImportMode? Mode { get; set; }
        /// <summary>The source of the image.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportSource Source { get; set; }
        /// <summary>Credentials used when importing from a registry uri.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api202301Preview.IImportSourceCredentials SourceCredentials { get; set; }
        /// <summary>
        /// Repository name of the source image.
        /// Specify an image by repository ('hello-world'). This will use the 'latest' tag.
        /// Specify an image by tag ('hello-world:latest').
        /// Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
        /// </summary>
        string SourceImage { get; set; }
        /// <summary>The address of the source registry (e.g. 'mcr.microsoft.com').</summary>
        string SourceRegistryUri { get; set; }
        /// <summary>The resource identifier of the source Azure Container Registry.</summary>
        string SourceResourceId { get; set; }
        /// <summary>
        /// List of strings of the form repo[:tag]. When tag is omitted the source will be used (or 'latest' if source tag is also
        /// omitted).
        /// </summary>
        string[] TargetTag { get; set; }
        /// <summary>
        /// List of strings of repository names to do a manifest only copy. No tag will be created.
        /// </summary>
        string[] UntaggedTargetRepository { get; set; }

    }
}