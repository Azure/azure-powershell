// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.OperationalInsights.Support
{

    /// <summary>
    /// The subtype describes what APIs can be used to interact with the table, and what features are available against it.
    /// </summary>
    public partial struct TableSubTypeEnum :
        System.IEquatable<TableSubTypeEnum>
    {
        /// <summary>The default subtype with which built-in tables are created.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.OperationalInsights.Support.TableSubTypeEnum Any = @"Any";

        /// <summary>
        /// Indicates a table created through the Data Collector API or with the custom logs feature of the MMA agent, or any table
        /// against which Custom Fields were created.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.OperationalInsights.Support.TableSubTypeEnum Classic = @"Classic";

        /// <summary>
        /// A table eligible to have data sent into it via any of the means supported by Data Collection Rules: the Data Collection
        /// Endpoint API, ingestion-time transformations, or any other mechanism provided by Data Collection Rules
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.OperationalInsights.Support.TableSubTypeEnum DataCollectionRuleBased = @"DataCollectionRuleBased";

        /// <summary>the value for an instance of the <see cref="TableSubTypeEnum" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to TableSubTypeEnum</summary>
        /// <param name="value">the value to convert to an instance of <see cref="TableSubTypeEnum" />.</param>
        internal static object CreateFrom(object value)
        {
            return new TableSubTypeEnum(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type TableSubTypeEnum</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.OperationalInsights.Support.TableSubTypeEnum e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type TableSubTypeEnum (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is TableSubTypeEnum && Equals((TableSubTypeEnum)obj);
        }

        /// <summary>Returns hashCode for enum TableSubTypeEnum</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Creates an instance of the <see cref="TableSubTypeEnum" Enum class./></summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private TableSubTypeEnum(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Returns string representation for TableSubTypeEnum</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to TableSubTypeEnum</summary>
        /// <param name="value">the value to convert to an instance of <see cref="TableSubTypeEnum" />.</param>

        public static implicit operator TableSubTypeEnum(string value)
        {
            return new TableSubTypeEnum(value);
        }

        /// <summary>Implicit operator to convert TableSubTypeEnum to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="TableSubTypeEnum" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.OperationalInsights.Support.TableSubTypeEnum e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum TableSubTypeEnum</summary>
        /// <param name="e1">the value to compare against <see cref="e2" /></param>
        /// <param name="e2">the value to compare against <see cref="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.OperationalInsights.Support.TableSubTypeEnum e1, Microsoft.Azure.PowerShell.Cmdlets.OperationalInsights.Support.TableSubTypeEnum e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum TableSubTypeEnum</summary>
        /// <param name="e1">the value to compare against <see cref="e2" /></param>
        /// <param name="e2">the value to compare against <see cref="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.OperationalInsights.Support.TableSubTypeEnum e1, Microsoft.Azure.PowerShell.Cmdlets.OperationalInsights.Support.TableSubTypeEnum e2)
        {
            return e2.Equals(e1);
        }
    }
}