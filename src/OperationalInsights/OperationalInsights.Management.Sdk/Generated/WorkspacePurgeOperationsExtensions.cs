// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.OperationalInsights
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for WorkspacePurgeOperations
    /// </summary>
    public static partial class WorkspacePurgeOperationsExtensions
    {
        /// <summary>
        /// Purges data in an Log Analytics workspace by a set of user-defined filters.
        /// In order to manage system resources, purge requests are throttled at 50
        /// requests per hour. You should batch the execution of purge requests by
        /// sending a single command whose predicate includes all user identities that
        /// require purging. Use the in operator to specify multiple identities. You
        /// should run the query prior to using for a purge request to verify that the
        /// results are expected.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        public static WorkspacePurgeResponse Purge(this IWorkspacePurgeOperations operations, string resourceGroupName, string workspaceName, WorkspacePurgeBody body)
        {
                return ((IWorkspacePurgeOperations)operations).PurgeAsync(resourceGroupName, workspaceName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Purges data in an Log Analytics workspace by a set of user-defined filters.
        /// In order to manage system resources, purge requests are throttled at 50
        /// requests per hour. You should batch the execution of purge requests by
        /// sending a single command whose predicate includes all user identities that
        /// require purging. Use the in operator to specify multiple identities. You
        /// should run the query prior to using for a purge request to verify that the
        /// results are expected.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkspacePurgeResponse> PurgeAsync(this IWorkspacePurgeOperations operations, string resourceGroupName, string workspaceName, WorkspacePurgeBody body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.PurgeWithHttpMessagesAsync(resourceGroupName, workspaceName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets status of an ongoing purge operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='purgeId'>
        /// In a purge status request, this is the Id of the operation the status of
        /// which is returned.
        /// </param>
        public static WorkspacePurgeStatusResponse GetPurgeStatus(this IWorkspacePurgeOperations operations, string resourceGroupName, string workspaceName, string purgeId)
        {
                return ((IWorkspacePurgeOperations)operations).GetPurgeStatusAsync(resourceGroupName, workspaceName, purgeId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets status of an ongoing purge operation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='purgeId'>
        /// In a purge status request, this is the Id of the operation the status of
        /// which is returned.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkspacePurgeStatusResponse> GetPurgeStatusAsync(this IWorkspacePurgeOperations operations, string resourceGroupName, string workspaceName, string purgeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPurgeStatusWithHttpMessagesAsync(resourceGroupName, workspaceName, purgeId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
