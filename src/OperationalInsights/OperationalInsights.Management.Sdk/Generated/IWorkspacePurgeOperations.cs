// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.OperationalInsights
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// WorkspacePurgeOperations operations.
    /// </summary>
    public partial interface IWorkspacePurgeOperations
    {
        /// <summary>
        /// Purges data in an Log Analytics workspace by a set of user-defined filters.
        /// In order to manage system resources, purge requests are throttled at 50
        /// requests per hour. You should batch the execution of purge requests by
        /// sending a single command whose predicate includes all user identities that
        /// require purging. Use the in operator to specify multiple identities. You
        /// should run the query prior to using for a purge request to verify that the
        /// results are expected.
        /// </summary>
        /// <remarks>
        /// Purges data in an Log Analytics workspace by a set of user-defined filters.
        /// In order to manage system resources, purge requests are throttled at 50
        /// requests per hour. You should batch the execution of purge requests by
        /// sending a single command whose predicate includes all user identities that
        /// require purging. Use the in operator to specify multiple identities. You
        /// should run the query prior to using for a purge request to verify that the
        /// results are expected.
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='body'>
        /// Describes the body of a request to purge data in a single table of an Log
        /// Analytics Workspace
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<WorkspacePurgeResponse,WorkspacePurgeHeaders>> PurgeWithHttpMessagesAsync(string resourceGroupName, string workspaceName, WorkspacePurgeBody body, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets status of an ongoing purge operation.
        /// </summary>
        /// <remarks>
        /// Gets status of an ongoing purge operation.
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='purgeId'>
        /// In a purge status request, this is the Id of the operation the status of
        /// which is returned.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<WorkspacePurgeStatusResponse>> GetPurgeStatusWithHttpMessagesAsync(string resourceGroupName, string workspaceName, string purgeId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }
}