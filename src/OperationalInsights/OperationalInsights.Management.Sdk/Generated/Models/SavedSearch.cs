// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.OperationalInsights.Models
{
    using System.Linq;

    /// <summary>
    /// Value object for saved search results.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SavedSearch : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the SavedSearch class.
        /// </summary>
        public SavedSearch()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SavedSearch class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="etag">The ETag of the saved search. To override an existing saved search, use &#34;*&#34;
        /// or specify the current Etag
        /// </param>

        /// <param name="category">The category of the saved search. This helps the user to find a saved
        /// search faster.
        /// </param>

        /// <param name="displayName">Saved search display name.
        /// </param>

        /// <param name="query">The query expression for the saved search.
        /// </param>

        /// <param name="functionAlias">The function alias if query serves as a function.
        /// </param>

        /// <param name="functionParameters">The optional function parameters if query serves as a function. Value
        /// should be in the following format: &#39;param-name1:type1 = default_value1,
        /// param-name2:type2 = default_value2&#39;. For more examples and proper syntax
        /// please refer to
        /// https://docs.microsoft.com/en-us/azure/kusto/query/functions/user-defined-functions.
        /// </param>

        /// <param name="version">The version number of the query language. The current version is 2 and is
        /// the default.
        /// </param>

        /// <param name="tags">The tags attached to the saved search.
        /// </param>
        public SavedSearch(string category, string displayName, string query, string id = default(string), string name = default(string), string type = default(string), string etag = default(string), string functionAlias = default(string), string functionParameters = default(string), long? version = default(long?), System.Collections.Generic.IList<Tag> tags = default(System.Collections.Generic.IList<Tag>))

        : base(id, name, type)
        {
            this.Etag = etag;
            this.Category = category;
            this.DisplayName = displayName;
            this.Query = query;
            this.FunctionAlias = functionAlias;
            this.FunctionParameters = functionParameters;
            this.Version = version;
            this.Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the ETag of the saved search. To override an existing saved
        /// search, use &#34;*&#34; or specify the current Etag
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; set; }

        /// <summary>
        /// Gets or sets the category of the saved search. This helps the user to find
        /// a saved search faster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.category")]
        public string Category {get; set; }

        /// <summary>
        /// Gets or sets saved search display name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets the query expression for the saved search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.query")]
        public string Query {get; set; }

        /// <summary>
        /// Gets or sets the function alias if query serves as a function.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.functionAlias")]
        public string FunctionAlias {get; set; }

        /// <summary>
        /// Gets or sets the optional function parameters if query serves as a
        /// function. Value should be in the following format: &#39;param-name1:type1 =
        /// default_value1, param-name2:type2 = default_value2&#39;. For more examples and
        /// proper syntax please refer to
        /// https://docs.microsoft.com/en-us/azure/kusto/query/functions/user-defined-functions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.functionParameters")]
        public string FunctionParameters {get; set; }

        /// <summary>
        /// Gets or sets the version number of the query language. The current version
        /// is 2 and is the default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.version")]
        public long? Version {get; set; }

        /// <summary>
        /// Gets or sets the tags attached to the saved search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.tags")]
        public System.Collections.Generic.IList<Tag> Tags {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Category == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Category");
            }
            if (this.DisplayName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DisplayName");
            }
            if (this.Query == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Query");
            }






            if (this.Tags != null)
            {
                foreach (var element in this.Tags)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}