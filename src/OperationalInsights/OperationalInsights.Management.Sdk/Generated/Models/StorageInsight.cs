// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.OperationalInsights.Models
{
    using System.Linq;

    /// <summary>
    /// The top level storage insight resource container.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class StorageInsight : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the StorageInsight class.
        /// </summary>
        public StorageInsight()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageInsight class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="eTag">The ETag of the storage insight.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="storageAccount">The storage account connection details
        /// </param>

        /// <param name="containers">The names of the blob containers that the workspace should read
        /// </param>

        /// <param name="tables">The names of the Azure tables that the workspace should read
        /// </param>

        /// <param name="status">The status of the storage insight
        /// </param>
        public StorageInsight(string id = default(string), string name = default(string), string type = default(string), string eTag = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), StorageAccount storageAccount = default(StorageAccount), System.Collections.Generic.IList<string> containers = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> tables = default(System.Collections.Generic.IList<string>), StorageInsightStatus status = default(StorageInsightStatus))

        : base(id, name, type)
        {
            this.ETag = eTag;
            this.Tags = tags;
            this.StorageAccount = storageAccount;
            this.Containers = containers;
            this.Tables = tables;
            this.Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the ETag of the storage insight.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "eTag")]
        public string ETag {get; set; }

        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets or sets the storage account connection details
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.storageAccount")]
        public StorageAccount StorageAccount {get; set; }

        /// <summary>
        /// Gets or sets the names of the blob containers that the workspace should
        /// read
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.containers")]
        public System.Collections.Generic.IList<string> Containers {get; set; }

        /// <summary>
        /// Gets or sets the names of the Azure tables that the workspace should read
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.tables")]
        public System.Collections.Generic.IList<string> Tables {get; set; }

        /// <summary>
        /// Gets the status of the storage insight
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public StorageInsightStatus Status {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.StorageAccount != null)
            {
                this.StorageAccount.Validate();
            }


            if (this.Status != null)
            {
                this.Status.Validate();
            }
        }
    }
}