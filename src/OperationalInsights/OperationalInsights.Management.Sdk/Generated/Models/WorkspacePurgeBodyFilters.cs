// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.OperationalInsights.Models
{
    using System.Linq;

    /// <summary>
    /// User-defined filters to return data which will be purged from the table.
    /// </summary>
    public partial class WorkspacePurgeBodyFilters
    {
        /// <summary>
        /// Initializes a new instance of the WorkspacePurgeBodyFilters class.
        /// </summary>
        public WorkspacePurgeBodyFilters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkspacePurgeBodyFilters class.
        /// </summary>

        /// <param name="column">The column of the table over which the given query should run
        /// </param>

        /// <param name="operatorProperty">A query operator to evaluate over the provided column and value(s).
        /// Supported operators are ==, =~, in, in~, &gt;, &gt;=, &lt;, &lt;=, between, and have
        /// the same behavior as they would in a KQL query.
        /// </param>

        /// <param name="value">the value for the operator to function over. This can be a number (e.g., &gt;
        /// 100), a string (timestamp &gt;= &#39;2017-09-01&#39;) or array of values.
        /// </param>

        /// <param name="key">When filtering over custom dimensions, this key will be used as the name of
        /// the custom dimension.
        /// </param>
        public WorkspacePurgeBodyFilters(string column = default(string), string operatorProperty = default(string), object value = default(object), string key = default(string))

        {
            this.Column = column;
            this.OperatorProperty = operatorProperty;
            this.Value = value;
            this.Key = key;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the column of the table over which the given query should run
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "column")]
        public string Column {get; set; }

        /// <summary>
        /// Gets or sets a query operator to evaluate over the provided column and
        /// value(s). Supported operators are ==, =~, in, in~, &gt;, &gt;=, &lt;, &lt;=, between,
        /// and have the same behavior as they would in a KQL query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operator")]
        public string OperatorProperty {get; set; }

        /// <summary>
        /// Gets or sets the value for the operator to function over. This can be a
        /// number (e.g., &gt; 100), a string (timestamp &gt;= &#39;2017-09-01&#39;) or array of
        /// values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "value")]
        public object Value {get; set; }

        /// <summary>
        /// Gets or sets when filtering over custom dimensions, this key will be used
        /// as the name of the custom dimension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "key")]
        public string Key {get; set; }
    }
}