// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.OperationalInsights.Models
{
    using System.Linq;

    /// <summary>
    /// Table properties.
    /// </summary>
    public partial class TableProperties
    {
        /// <summary>
        /// Initializes a new instance of the TableProperties class.
        /// </summary>
        public TableProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TableProperties class.
        /// </summary>

        /// <param name="retentionInDays">The table retention in days, between 4 and 730. Setting this property to -1
        /// will default to the workspace retention.
        /// </param>

        /// <param name="totalRetentionInDays">The table total retention in days, between 4 and 2555. Setting this
        /// property to -1 will default to table retention.
        /// </param>

        /// <param name="archiveRetentionInDays">The table data archive retention in days. Calculated as
        /// (totalRetentionInDays-retentionInDays)
        /// </param>

        /// <param name="searchResults">Parameters of the search job that initiated this table.
        /// </param>

        /// <param name="restoredLogs">Parameters of the restore operation that initiated this table.
        /// </param>

        /// <param name="resultStatistics">Search job execution statistics.
        /// </param>

        /// <param name="plan">Instruct the system how to handle and charge the logs ingested to this
        /// table.
        /// Possible values include: &#39;Basic&#39;, &#39;Analytics&#39;</param>

        /// <param name="lastPlanModifiedDate">The timestamp that table plan was last modified (UTC).
        /// </param>

        /// <param name="schema">Table schema.
        /// </param>

        /// <param name="provisioningState">Table&#39;s current provisioning state. If set to &#39;updating&#39;, indicates a
        /// resource lock due to ongoing operation, forbidding any update to the table
        /// until the ongoing operation is concluded.
        /// Possible values include: &#39;Updating&#39;, &#39;InProgress&#39;, &#39;Succeeded&#39;</param>
        public TableProperties(int? retentionInDays = default(int?), int? totalRetentionInDays = default(int?), int? archiveRetentionInDays = default(int?), SearchResults searchResults = default(SearchResults), RestoredLogs restoredLogs = default(RestoredLogs), ResultStatistics resultStatistics = default(ResultStatistics), string plan = default(string), string lastPlanModifiedDate = default(string), Schema schema = default(Schema), string provisioningState = default(string))

        {
            this.RetentionInDays = retentionInDays;
            this.TotalRetentionInDays = totalRetentionInDays;
            this.ArchiveRetentionInDays = archiveRetentionInDays;
            this.SearchResults = searchResults;
            this.RestoredLogs = restoredLogs;
            this.ResultStatistics = resultStatistics;
            this.Plan = plan;
            this.LastPlanModifiedDate = lastPlanModifiedDate;
            this.Schema = schema;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the table retention in days, between 4 and 730. Setting this
        /// property to -1 will default to the workspace retention.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "retentionInDays")]
        public int? RetentionInDays {get; set; }

        /// <summary>
        /// Gets or sets the table total retention in days, between 4 and 2555. Setting
        /// this property to -1 will default to table retention.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalRetentionInDays")]
        public int? TotalRetentionInDays {get; set; }

        /// <summary>
        /// Gets the table data archive retention in days. Calculated as
        /// (totalRetentionInDays-retentionInDays)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "archiveRetentionInDays")]
        public int? ArchiveRetentionInDays {get; private set; }

        /// <summary>
        /// Gets or sets parameters of the search job that initiated this table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "searchResults")]
        public SearchResults SearchResults {get; set; }

        /// <summary>
        /// Gets or sets parameters of the restore operation that initiated this table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "restoredLogs")]
        public RestoredLogs RestoredLogs {get; set; }

        /// <summary>
        /// Gets or sets search job execution statistics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resultStatistics")]
        public ResultStatistics ResultStatistics {get; set; }

        /// <summary>
        /// Gets or sets instruct the system how to handle and charge the logs ingested
        /// to this table. Possible values include: &#39;Basic&#39;, &#39;Analytics&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "plan")]
        public string Plan {get; set; }

        /// <summary>
        /// Gets the timestamp that table plan was last modified (UTC).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastPlanModifiedDate")]
        public string LastPlanModifiedDate {get; private set; }

        /// <summary>
        /// Gets or sets table schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "schema")]
        public Schema Schema {get; set; }

        /// <summary>
        /// Gets table&#39;s current provisioning state. If set to &#39;updating&#39;, indicates a
        /// resource lock due to ongoing operation, forbidding any update to the table
        /// until the ongoing operation is concluded. Possible values include: &#39;Updating&#39;, &#39;InProgress&#39;, &#39;Succeeded&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.RetentionInDays != null)
            {
                if (this.RetentionInDays > 730)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "RetentionInDays", 730);
                }
                if (this.RetentionInDays < 4)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "RetentionInDays", 4);
                }
            }
            if (this.TotalRetentionInDays != null)
            {
                if (this.TotalRetentionInDays > 2555)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "TotalRetentionInDays", 2555);
                }
                if (this.TotalRetentionInDays < 4)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "TotalRetentionInDays", 4);
                }
            }


            if (this.ResultStatistics != null)
            {
                this.ResultStatistics.Validate();
            }




        }
    }
}