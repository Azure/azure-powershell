// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.OperationalInsights.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the body of a purge request for an App Insights Workspace
    /// </summary>
    public partial class WorkspacePurgeBody
    {
        /// <summary>
        /// Initializes a new instance of the WorkspacePurgeBody class.
        /// </summary>
        public WorkspacePurgeBody()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkspacePurgeBody class.
        /// </summary>

        /// <param name="table">Table from which to purge data.
        /// </param>

        /// <param name="filters">The set of columns and filters (queries) to run over them to purge the
        /// resulting data.
        /// </param>
        public WorkspacePurgeBody(string table, System.Collections.Generic.IList<WorkspacePurgeBodyFilters> filters)

        {
            this.Table = table;
            this.Filters = filters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets table from which to purge data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "table")]
        public string Table {get; set; }

        /// <summary>
        /// Gets or sets the set of columns and filters (queries) to run over them to
        /// purge the resulting data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "filters")]
        public System.Collections.Generic.IList<WorkspacePurgeBodyFilters> Filters {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Table == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Table");
            }
            if (this.Filters == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Filters");
            }


        }
    }
}