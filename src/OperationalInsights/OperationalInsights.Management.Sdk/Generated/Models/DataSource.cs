// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.OperationalInsights.Models
{
    using System.Linq;

    /// <summary>
    /// Datasources under OMS Workspace.
    /// </summary>
    public partial class DataSource : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the DataSource class.
        /// </summary>
        public DataSource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataSource class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="properties">The data source properties in raw json format, each kind of data source
        /// have it&#39;s own schema.
        /// </param>

        /// <param name="etag">The ETag of the data source.
        /// </param>

        /// <param name="kind">The kind of the DataSource.
        /// Possible values include: &#39;WindowsEvent&#39;, &#39;WindowsPerformanceCounter&#39;,
        /// &#39;IISLogs&#39;, &#39;LinuxSyslog&#39;, &#39;LinuxSyslogCollection&#39;,
        /// &#39;LinuxPerformanceObject&#39;, &#39;LinuxPerformanceCollection&#39;, &#39;CustomLog&#39;,
        /// &#39;CustomLogCollection&#39;, &#39;AzureAuditLog&#39;, &#39;AzureActivityLog&#39;,
        /// &#39;GenericDataSource&#39;, &#39;ChangeTrackingCustomPath&#39;, &#39;ChangeTrackingPath&#39;,
        /// &#39;ChangeTrackingServices&#39;, &#39;ChangeTrackingDataTypeConfiguration&#39;,
        /// &#39;ChangeTrackingDefaultRegistry&#39;, &#39;ChangeTrackingRegistry&#39;,
        /// &#39;ChangeTrackingLinuxPath&#39;, &#39;LinuxChangeTrackingPath&#39;,
        /// &#39;ChangeTrackingContentLocation&#39;, &#39;WindowsTelemetry&#39;, &#39;Office365&#39;,
        /// &#39;SecurityWindowsBaselineConfiguration&#39;,
        /// &#39;SecurityCenterSecurityWindowsBaselineConfiguration&#39;,
        /// &#39;SecurityEventCollectionConfiguration&#39;,
        /// &#39;SecurityInsightsSecurityEventCollectionConfiguration&#39;,
        /// &#39;ImportComputerGroup&#39;, &#39;NetworkMonitoring&#39;, &#39;Itsm&#39;, &#39;DnsAnalytics&#39;,
        /// &#39;ApplicationInsights&#39;, &#39;SqlDataClassification&#39;</param>

        /// <param name="tags">Resource tags.
        /// </param>
        public DataSource(object properties, string kind, string id = default(string), string name = default(string), string type = default(string), string etag = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>))

        : base(id, name, type)
        {
            this.Properties = properties;
            this.Etag = etag;
            this.Kind = kind;
            this.Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the data source properties in raw json format, each kind of
        /// data source have it&#39;s own schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties")]
        public object Properties {get; set; }

        /// <summary>
        /// Gets or sets the ETag of the data source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; set; }

        /// <summary>
        /// Gets or sets the kind of the DataSource. Possible values include: &#39;WindowsEvent&#39;, &#39;WindowsPerformanceCounter&#39;, &#39;IISLogs&#39;, &#39;LinuxSyslog&#39;, &#39;LinuxSyslogCollection&#39;, &#39;LinuxPerformanceObject&#39;, &#39;LinuxPerformanceCollection&#39;, &#39;CustomLog&#39;, &#39;CustomLogCollection&#39;, &#39;AzureAuditLog&#39;, &#39;AzureActivityLog&#39;, &#39;GenericDataSource&#39;, &#39;ChangeTrackingCustomPath&#39;, &#39;ChangeTrackingPath&#39;, &#39;ChangeTrackingServices&#39;, &#39;ChangeTrackingDataTypeConfiguration&#39;, &#39;ChangeTrackingDefaultRegistry&#39;, &#39;ChangeTrackingRegistry&#39;, &#39;ChangeTrackingLinuxPath&#39;, &#39;LinuxChangeTrackingPath&#39;, &#39;ChangeTrackingContentLocation&#39;, &#39;WindowsTelemetry&#39;, &#39;Office365&#39;, &#39;SecurityWindowsBaselineConfiguration&#39;, &#39;SecurityCenterSecurityWindowsBaselineConfiguration&#39;, &#39;SecurityEventCollectionConfiguration&#39;, &#39;SecurityInsightsSecurityEventCollectionConfiguration&#39;, &#39;ImportComputerGroup&#39;, &#39;NetworkMonitoring&#39;, &#39;Itsm&#39;, &#39;DnsAnalytics&#39;, &#39;ApplicationInsights&#39;, &#39;SqlDataClassification&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "kind")]
        public string Kind {get; set; }

        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Properties == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Properties");
            }
            if (this.Kind == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Kind");
            }




        }
    }
}