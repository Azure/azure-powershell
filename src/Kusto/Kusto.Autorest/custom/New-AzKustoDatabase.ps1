
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a database.
.Description
Create a database.
.Example
New-AzKustoDatabase -ResourceGroupName testrg -ClusterName testnewkustocluster -Name mykustodatabase -Kind ReadWrite -Location 'East US'

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Kusto.Models.IDatabase
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Kusto.Models.IDatabase
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

PARAMETER <IDatabase>: Class representing a Kusto database.
  Kind <String>: Kind of the database
  [Location <String>]: Resource location.
.Link
https://learn.microsoft.com/powershell/module/az.kusto/new-azkustodatabase
#>
function New-AzKustoDatabase {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Kusto.Models.IDatabase])]
[CmdletBinding(DefaultParameterSetName='CreateReadWrite', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Path')]
    [System.String]
    # The name of the Kusto cluster.
    ${ClusterName},

    [Parameter(Mandatory)]
    [Alias('DatabaseName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Path')]
    [System.String]
    # The name of the database in the Kusto cluster.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.PSArgumentCompleterAttribute("Admin", "None")]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Query')]
    [System.String]
    # By default, any user who run operation on a database become an Admin on it.
    # This property allows the caller to exclude the caller from Admins list.
    ${CallerRole},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.PSArgumentCompleterAttribute("ReadWrite", "ReadOnlyFollowing")]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Body')]
    [System.String]
    # Kind of the database
    ${Kind},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Body')]
    [System.TimeSpan]
    # The time the data should be kept in cache for fast queries in TimeSpan.
    ${HotCachePeriod},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Body')]
    [System.TimeSpan]
    # The time the data should be kept before it stops being accessible to queries in TimeSpan.
    ${SoftDeletePeriod},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Body')]
    [System.String]
    # The name of the key vault key.
    ${KeyVaultPropertyKeyName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Body')]
    [System.String]
    # The Uri of the key vault.
    ${KeyVaultPropertyKeyVaultUri},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Body')]
    [System.String]
    # The version of the key vault key.
    ${KeyVaultPropertyKeyVersion},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Body')]
    [System.String]
    # The user assigned identity (ARM resource id) that has access to the key.
    ${KeyVaultPropertyUserIdentity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Body')]
    [System.String]
    # Resource location.
    ${Location},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

    process {
        try {
            $Parameter = [Microsoft.Azure.PowerShell.Cmdlets.Kusto.Models.ReadWriteDatabase]::new()

            $Parameter.Kind = $PSBoundParameters['Kind']
            $null = $PSBoundParameters.Remove('Kind')

            $Parameter.Location = $PSBoundParameters['Location']
            $null = $PSBoundParameters.Remove('Location')

            if ($PSBoundParameters.ContainsKey('SoftDeletePeriod')) {
                $Parameter.SoftDeletePeriod = $PSBoundParameters['SoftDeletePeriod']
                $null = $PSBoundParameters.Remove('SoftDeletePeriod')
            }

            if ($PSBoundParameters.ContainsKey('HotCachePeriod')) {
                $Parameter.HotCachePeriod = $PSBoundParameters['HotCachePeriod']
                $null = $PSBoundParameters.Remove('HotCachePeriod')
            }

            if ($PSBoundParameters.ContainsKey('KeyVaultPropertyKeyName')) {
                $Parameter.KeyVaultPropertyKeyName = $PSBoundParameters['KeyVaultPropertyKeyName']
                $null = $PSBoundParameters.Remove('KeyVaultPropertyKeyName')
            }

            if ($PSBoundParameters.ContainsKey('KeyVaultPropertyKeyVaultUri')) {
                $Parameter.KeyVaultPropertyKeyVaultUri = $PSBoundParameters['KeyVaultPropertyKeyVaultUri']
                $null = $PSBoundParameters.Remove('KeyVaultPropertyKeyVaultUri')
            }

            if ($PSBoundParameters.ContainsKey('KeyVaultPropertyKeyVersion')) {
                $Parameter.KeyVaultPropertyKeyVersion = $PSBoundParameters['KeyVaultPropertyKeyVersion']
                $null = $PSBoundParameters.Remove('KeyVaultPropertyKeyVersion')
            }

            if ($PSBoundParameters.ContainsKey('KeyVaultPropertyUserIdentity')) {
                $Parameter.KeyVaultPropertyUserIdentity = $PSBoundParameters['KeyVaultPropertyUserIdentity']
                $null = $PSBoundParameters.Remove('KeyVaultPropertyUserIdentity')
            }

            $null = $PSBoundParameters.Add('Parameter', $Parameter)

            Az.Kusto.internal\New-AzKustoDatabase @PSBoundParameters
        }
        catch {
            throw
        }
    }
}
