{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "kustoApiVersion": {
            "type": "string",
            "metadata": {
                "description": "<KUSTO API Version>"
            }
        },
        "userAssignedManagedIdentityName": {
            "type": "string",
            "metadata": {
                "description": "<USER ASSIGNED IDENTITY NAME>"
            }
        },
        "kustoSkuName": {
            "type": "string",
            "metadata": {
                "description": "<KUSTO SKU NAME>"
            }
        },
        "kustoFollowerSkuName": {
            "type": "string",
            "metadata": {
                "description": "<KUSTO FOLLOWER CLUSTER SKU NAME>"
            }
        },
        "kustoClusterTier": {
            "type": "string",
            "metadata": {
                "description": "<KUSTO CLUSTER TIER>"
            }
        },
        "kustoFollowerClusterTier": {
            "type": "string",
            "metadata": {
                "description": "<KUSTO FOLLOWER CLUSTER TIER>"
            }
        },
        "kustoClusterName": {
            "type": "string",
            "metadata": {
                "description": "<KUSTO CLUSTER NAME>"
            }
        },
        "kustoFollowerClusterName": {
            "type": "string",
            "metadata": {
                "description": "<KUSTO FOLLOWER CLUSTER NAME>"
            }
        },
        "kustoMigrationClusterName": {
            "type": "string",
            "metadata": {
                "description": "<KUSTO MIGRATION CLUSTER NAME>"
            }
        },
        "kustoDatabaseName": {
            "type": "string",
            "metadata": {
                "description": "<KUSTO DATABASE NAME>"
            }
        },
        "kustoMigrationDatabaseName": {
            "type": "string",
            "metadata": {
                "description": "<KUSTO DATABASE NAME IN MIGRATION CLUSTER>"
            }
        },
        "kustoDatabaseScriptName": {
            "type": "string",
            "metadata": {
                "description": "<KUSTO DATABASE SCRIPT NAME>"
            }
        },
        "kustoTableName": {
            "type": "string",
            "metadata": {
                "description": "<KUSTO TABLE NAME>"
            }
        },
        "principalAppId": {
            "type": "string",
            "metadata": {
                "description": "<ID OF THE APP TO BE ASSIGND AS A PRINCIPAL>"
            }
        },
        "eventHubNameSpaceName": {
            "type": "string",
            "metadata": {
                "description": "<NAME OF THE EVENT HUB NAMESPACE>"
            }
        },
        "eventHubName": {
            "type": "string",
            "metadata": {
                "description": "<NAME OF THE EVENT HUB>"
            }
        },
        "iotHubName": {
            "type": "string",
            "metadata": {
                "description": "<NAME OF THE IOT HUB>"
            }
        },
        "cosmosDbAccountName": {
            "type": "string",
            "metadata": {
                "description": "<COSMOSDB ACCOUNT NAME>"
            }
        },
        "cosmosDbDatabaseName": {
            "type": "string",
            "metadata": {
                "description": "<COSMOSDB DATABASE NAME>"
            }
        },
        "cosmosDbContainerName": {
            "type": "string",
            "metadata": {
                "description": "<COSMOSDB CONTAINER NAME>"
            }
        },
        "storageAccountName": {
            "type": "string",
            "metadata": {
                "description": "<COSMOSDB CONTAINER NAME>"
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "metadata": {
                "description": "<VIRTUAL NETWORK NAME>"
            }
        },
        "subnetName": {
            "type": "string",
            "metadata": {
                "description": "<SUBNET NAME>"
            }
        },
        "privateEndpointName": {
            "type": "string",
            "metadata": {
                "description": "<PRIVATE ENDPOINT NAME>"
            }
        },
        "keyVaultName": {
            "type": "string",
            "metadata": {
                "description": "<KEY VAULT NAME>"
            }
        },
        "keyName": {
            "type": "string",
            "metadata": {
                "description": "<KEY NAME>"
            }
        }
    },
    "resources": [
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "[parameters('userAssignedManagedIdentityName')]",
            "apiVersion": "2018-11-30",
            "location": "[resourceGroup().location]"
        },
        {
            "type": "Microsoft.Kusto/clusters",
            "apiVersion": "[parameters('kustoApiVersion')]",
            "name": "[parameters('kustoClusterName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "[parameters('kustoSkuName')]",
                "tier": "[parameters('kustoClusterTier')]",
                "capacity": 1
            },
            "identity": {
                "type": "SystemAssigned, UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', toLower(parameters('userAssignedManagedIdentityName')))]": {}
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', toLower(parameters('userAssignedManagedIdentityName')))]"
            ]
        },
        {
            "type": "Microsoft.Kusto/clusters/databases",
            "name": "[concat(parameters('kustoClusterName'), '/', parameters('kustoDatabaseName'))]",
            "apiVersion": "[parameters('kustoApiVersion')]",
            "location": "[resourceGroup().location]",
            "kind": "ReadWrite",
            "properties": {
                "softDeletePeriodInDays": 365,
                "hotCachePeriodInDays": 31
            },
            "dependsOn": [
                "[resourceId('Microsoft.Kusto/clusters', parameters('kustoClusterName'))]"
            ]
        },
        {
            "type": "Microsoft.Kusto/clusters/databases/principalAssignments",
            "apiVersion": "[parameters('kustoApiVersion')]",
            "name": "[concat(parameters('kustoClusterName'), '/', parameters('kustoDatabaseName'), '/', 'DatabaseAppPrincipal')]",
            "properties": {
                "principalId": "[parameters('principalAppId')]",
                "principalType": "App",
                "role": "Admin",
                "tenantId": "[tenant().tenantId]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Kusto/clusters/databases', parameters('kustoClusterName'), parameters('kustoDatabaseName'))]"
            ]
        },
        {
            "type": "Microsoft.Kusto/clusters/databases/scripts",
            "apiVersion": "[parameters('kustoApiVersion')]",
            "name": "[concat(parameters('kustoClusterName'), '/', parameters('kustoDatabaseName'), '/', parameters('kustoDatabaseScriptName'))]",
            "properties": {
                "scriptContent": "[concat('.create table ', parameters('kustoTableName'), ' (Level:string, Timestamp:datetime, UserId:string, TraceId:string, Message:string, ProcessId:int32)')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Kusto/clusters/databases', parameters('kustoClusterName'), parameters('kustoDatabaseName'))]"
            ]
        },
        {
            "type": "Microsoft.Kusto/clusters",
            "apiVersion": "[parameters('kustoApiVersion')]",
            "name": "[parameters('kustoFollowerClusterName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "[parameters('kustoFollowerSkuName')]",
                "tier": "[parameters('kustoFollowerClusterTier')]",
                "capacity": 2
            },
            "identity": {
                "type": "SystemAssigned"
            }
        },
        {
            "type": "Microsoft.Kusto/clusters",
            "apiVersion": "[parameters('kustoApiVersion')]",
            "name": "[parameters('kustoMigrationClusterName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "[parameters('kustoSkuName')]",
                "tier": "[parameters('kustoClusterTier')]",
                "capacity": 1
            },
            "identity": {
                "type": "SystemAssigned"
            }
        },
        {
            "type": "Microsoft.Kusto/clusters/databases",
            "name": "[concat(parameters('kustoMigrationClusterName'), '/', parameters('kustoMigrationDatabaseName'))]",
            "apiVersion": "[parameters('kustoApiVersion')]",
            "location": "[resourceGroup().location]",
            "kind": "ReadWrite",
            "properties": {
                "softDeletePeriodInDays": 365,
                "hotCachePeriodInDays": 31
            },
            "dependsOn": [
                "[resourceId('Microsoft.Kusto/clusters', parameters('kustoMigrationClusterName'))]"
            ]
        },
        {
            "type": "Microsoft.EventHub/namespaces",
            "apiVersion": "2021-11-01",
            "name": "[parameters('eventHubNameSpaceName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard"
            },
            "properties": {}
        },
        {
            "type": "Microsoft.EventHub/namespaces/eventhubs",
            "apiVersion": "2021-11-01",
            "name": "[format('{0}/{1}', parameters('eventHubNameSpaceName'), parameters('eventHubName'))]",
            "properties": {},
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNameSpaceName'))]"
            ]
        },
        {
            "type": "Microsoft.Devices/IotHubs",
            "apiVersion": "2021-07-02",
            "name": "[parameters('iotHubName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "S1",
                "tier": "Standard",
                "capacity": 1
            },
            "properties": {}
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "apiVersion": "2022-05-15",
            "name": "[parameters('cosmosDbAccountName')]",
            "location": "eastus",
            "kind": "GlobalDocumentDB",
            "properties": {
                "databaseAccountOfferType": "Standard"
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
            "apiVersion": "2022-05-15",
            "name": "[format('{0}/{1}', toLower(parameters('cosmosDbAccountName')), parameters('cosmosDbDatabaseName'))]",
            "properties": {
                "resource": {
                    "id": "[parameters('cosmosDbDatabaseName')]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('cosmosDbAccountName')))]"
            ]
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
            "apiVersion": "2022-05-15",
            "name": "[format('{0}/{1}', format('{0}/{1}', toLower(parameters('cosmosDbAccountName')), parameters('cosmosDbDatabaseName')), parameters('cosmosDbContainerName'))]",
            "properties": {
                "resource": {
                    "id": "[parameters('cosmosDbContainerName')]",
                    "partitionKey": {
                        "paths": [
                            "/myPartitionKey"
                        ],
                        "kind": "Hash"
                    }
                },
                "options": {
                    "throughput": "400"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', toLower(parameters('cosmosDbAccountName')), parameters('cosmosDbDatabaseName')), '/')[0], split(format('{0}/{1}', toLower(parameters('cosmosDbDatabaseName')), parameters('cosmosDbDatabaseName')), '/')[1])]"
            ]
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid(parameters('cosmosDbAccountName'), parameters('kustoClusterName'))]",
            "scope": "[format('Microsoft.DocumentDb/databaseAccounts/{0}', parameters('cosmosDbAccountName'))]",
            "properties": {
                "description": "Granting RBAC reader permission on Cosmos DB",
                "principalId": "[reference(parameters('kustoClusterName'), parameters('kustoApiVersion'), 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/{1}', subscription().subscriptionId, 'fbdf93bf-df7d-467e-a4d2-9458aa1360c8')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('cosmosDbAccountName')))]",
                "[resourceId('Microsoft.Kusto/clusters', parameters('kustoClusterName'))]"
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2022-05-01",
            "name": "[parameters('storageAccountName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2"
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2022-07-01",
            "name": "[parameters('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.0.0.0/16"
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2022-07-01",
            "name": "[concat(parameters('virtualNetworkName'), '/',parameters('subnetName'))]",
            "properties": {
                "addressPrefix": "10.0.0.0/24",
                "privateLinkServiceNetworkPolicies": "Disabled"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2022-07-01",
            "name": "[parameters('privateEndpointName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "subnet": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]"
                },
                "privateLinkServiceConnections": [
                    {
                        "name": "[parameters('privateEndpointName')]",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.Kusto/clusters', parameters('kustoClusterName'))]",
                            "groupIds": [
                                "cluster"
                            ]
                        }
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Kusto/clusters', parameters('kustoClusterName'))]",
                "[resourceId('Microsoft.Kusto/clusters/databases/scripts', parameters('kustoClusterName'), parameters('kustoDatabaseName'), parameters('kustoDatabaseScriptName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]"
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2022-11-01",
            "name": "[parameters('keyVaultName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "enableSoftDelete": true,
                "softDeleteRetentionInDays": 7,
                "enablePurgeProtection": true,
                "tenantId": "[subscription().tenantId]",
                "sku": {
                    "name": "Standard",
                    "family": "A"
                },
                "accessPolicies": [
                    {
                        "tenantId": "[subscription().tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', toLower(parameters('userAssignedManagedIdentityName')))).principalId]",
                        "permissions": {
                            "certificates": [],
                            "keys": [
                                "Get",
                                "WrapKey",
                                "UnwrapKey"
                            ]
                        }
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', toLower(parameters('userAssignedManagedIdentityName')))]"
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/keys",
            "apiVersion": "2022-11-01",
            "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('keyName'))]",
            "properties": {
                "kty": "RSA",
                "keyOps": "[createArray('sign', 'verify', 'wrapKey', 'unwrapKey', 'encrypt', 'decrypt')]",
                "keySize": 2048,
                "attributes": {
                    "enabled": true,
                    "recoveryLevel": "Recoverable+Purgeable",
                    "recoverableDays": 90
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            ]
        }
    ],
    "outputs": {
        "kustoClusterResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Kusto/clusters', parameters('kustoClusterName'))]"
        },
        "kustoFollowerClusterResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Kusto/clusters', parameters('kustoFollowerClusterName'))]"
        },
        "kustoMigrationClusterResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Kusto/clusters', parameters('kustoMigrationClusterName'))]"
        },
        "eventHubNameSpaceResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNameSpaceName'))]"
        },
        "eventHubResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNameSpaceName'), parameters('eventHubName'))]"
        },
        "iotHubResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Devices/IotHubs', parameters('iotHubName'))]"
        },
        "cosmosDbResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))]"
        },
        "storageAccountResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
        },
        "userAssignedManagedIdentityResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', toLower(parameters('userAssignedManagedIdentityName')))]"
        },
        "keyVaultUrl": {
            "type": "string",
            "value": "[reference(concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName')), '2022-11-01').vaultUri]"
        },
        "keyVersion": {
            "type": "string",
            "value": "[last(split(reference(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName'))).keyUriWithVersion, '/'))]"
        }
    }
}