// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Extensions;

    /// <summary>
    /// Defines the certificate source parameters using user's keyvault certificate for enabling SSL.
    /// </summary>
    public partial class UserManagedHttpsParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IUserManagedHttpsParameters,
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IUserManagedHttpsParametersInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICustomDomainHttpsParameters"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICustomDomainHttpsParameters __customDomainHttpsParameters = new Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.CustomDomainHttpsParameters();

        /// <summary>Defines the source of the SSL certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.CertificateSource CertificateSource { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICustomDomainHttpsParametersInternal)__customDomainHttpsParameters).CertificateSource; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICustomDomainHttpsParametersInternal)__customDomainHttpsParameters).CertificateSource = value ; }

        /// <summary>Backing field for <see cref="CertificateSourceParameter" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParameters _certificateSourceParameter;

        /// <summary>
        /// Defines the certificate source parameters using user's keyvault certificate for enabling SSL.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParameters CertificateSourceParameter { get => (this._certificateSourceParameter = this._certificateSourceParameter ?? new Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.KeyVaultCertificateSourceParameters()); set => this._certificateSourceParameter = value; }

        /// <summary>
        /// Describes the action that shall be taken when the certificate is removed from Key Vault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string CertificateSourceParameterDeleteRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParametersInternal)CertificateSourceParameter).DeleteRule; }

        /// <summary>Resource group of the user's Key Vault containing the SSL certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string CertificateSourceParameterResourceGroupName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParametersInternal)CertificateSourceParameter).ResourceGroupName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParametersInternal)CertificateSourceParameter).ResourceGroupName = value ; }

        /// <summary>
        /// The name of Key Vault Secret (representing the full certificate PFX) in Key Vault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string CertificateSourceParameterSecretName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParametersInternal)CertificateSourceParameter).SecretName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParametersInternal)CertificateSourceParameter).SecretName = value ; }

        /// <summary>The version(GUID) of Key Vault Secret in Key Vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string CertificateSourceParameterSecretVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParametersInternal)CertificateSourceParameter).SecretVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParametersInternal)CertificateSourceParameter).SecretVersion = value ?? null; }

        /// <summary>Subscription Id of the user's Key Vault containing the SSL certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string CertificateSourceParameterSubscriptionId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParametersInternal)CertificateSourceParameter).SubscriptionId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParametersInternal)CertificateSourceParameter).SubscriptionId = value ; }

        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string CertificateSourceParameterTypeName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParametersInternal)CertificateSourceParameter).TypeName; }

        /// <summary>
        /// Describes the action that shall be taken when the certificate is updated in Key Vault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string CertificateSourceParameterUpdateRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParametersInternal)CertificateSourceParameter).UpdateRule; }

        /// <summary>The name of the user's Key Vault containing the SSL certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string CertificateSourceParameterVaultName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParametersInternal)CertificateSourceParameter).VaultName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParametersInternal)CertificateSourceParameter).VaultName = value ; }

        /// <summary>Internal Acessors for CertificateSourceParameter</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParameters Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IUserManagedHttpsParametersInternal.CertificateSourceParameter { get => (this._certificateSourceParameter = this._certificateSourceParameter ?? new Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.KeyVaultCertificateSourceParameters()); set { {_certificateSourceParameter = value;} } }

        /// <summary>Internal Acessors for CertificateSourceParameterDeleteRule</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IUserManagedHttpsParametersInternal.CertificateSourceParameterDeleteRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParametersInternal)CertificateSourceParameter).DeleteRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParametersInternal)CertificateSourceParameter).DeleteRule = value; }

        /// <summary>Internal Acessors for CertificateSourceParameterTypeName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IUserManagedHttpsParametersInternal.CertificateSourceParameterTypeName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParametersInternal)CertificateSourceParameter).TypeName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParametersInternal)CertificateSourceParameter).TypeName = value; }

        /// <summary>Internal Acessors for CertificateSourceParameterUpdateRule</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IUserManagedHttpsParametersInternal.CertificateSourceParameterUpdateRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParametersInternal)CertificateSourceParameter).UpdateRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParametersInternal)CertificateSourceParameter).UpdateRule = value; }

        /// <summary>TLS protocol version that will be used for Https</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.MinimumTlsVersion? MinimumTlsVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICustomDomainHttpsParametersInternal)__customDomainHttpsParameters).MinimumTlsVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICustomDomainHttpsParametersInternal)__customDomainHttpsParameters).MinimumTlsVersion = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.MinimumTlsVersion)""); }

        /// <summary>Defines the TLS extension protocol that is used for secure delivery.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.ProtocolType ProtocolType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICustomDomainHttpsParametersInternal)__customDomainHttpsParameters).ProtocolType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICustomDomainHttpsParametersInternal)__customDomainHttpsParameters).ProtocolType = value ; }

        /// <summary>Creates an new <see cref="UserManagedHttpsParameters" /> instance.</summary>
        public UserManagedHttpsParameters()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__customDomainHttpsParameters), __customDomainHttpsParameters);
            await eventListener.AssertObjectIsValid(nameof(__customDomainHttpsParameters), __customDomainHttpsParameters);
        }
    }
    /// Defines the certificate source parameters using user's keyvault certificate for enabling SSL.
    public partial interface IUserManagedHttpsParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICustomDomainHttpsParameters
    {
        /// <summary>
        /// Describes the action that shall be taken when the certificate is removed from Key Vault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = true,
        ReadOnly = true,
        Description = @"Describes the action that shall be taken when the certificate is removed from Key Vault.",
        SerializedName = @"deleteRule",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateSourceParameterDeleteRule { get;  }
        /// <summary>Resource group of the user's Key Vault containing the SSL certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Resource group of the user's Key Vault containing the SSL certificate",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateSourceParameterResourceGroupName { get; set; }
        /// <summary>
        /// The name of Key Vault Secret (representing the full certificate PFX) in Key Vault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of Key Vault Secret (representing the full certificate PFX) in Key Vault.",
        SerializedName = @"secretName",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateSourceParameterSecretName { get; set; }
        /// <summary>The version(GUID) of Key Vault Secret in Key Vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The version(GUID) of Key Vault Secret in Key Vault.",
        SerializedName = @"secretVersion",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateSourceParameterSecretVersion { get; set; }
        /// <summary>Subscription Id of the user's Key Vault containing the SSL certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Subscription Id of the user's Key Vault containing the SSL certificate",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateSourceParameterSubscriptionId { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = true,
        ReadOnly = true,
        Description = @"",
        SerializedName = @"typeName",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateSourceParameterTypeName { get;  }
        /// <summary>
        /// Describes the action that shall be taken when the certificate is updated in Key Vault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = true,
        ReadOnly = true,
        Description = @"Describes the action that shall be taken when the certificate is updated in Key Vault.",
        SerializedName = @"updateRule",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateSourceParameterUpdateRule { get;  }
        /// <summary>The name of the user's Key Vault containing the SSL certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the user's Key Vault containing the SSL certificate",
        SerializedName = @"vaultName",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateSourceParameterVaultName { get; set; }

    }
    /// Defines the certificate source parameters using user's keyvault certificate for enabling SSL.
    internal partial interface IUserManagedHttpsParametersInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICustomDomainHttpsParametersInternal
    {
        /// <summary>
        /// Defines the certificate source parameters using user's keyvault certificate for enabling SSL.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IKeyVaultCertificateSourceParameters CertificateSourceParameter { get; set; }
        /// <summary>
        /// Describes the action that shall be taken when the certificate is removed from Key Vault.
        /// </summary>
        string CertificateSourceParameterDeleteRule { get; set; }
        /// <summary>Resource group of the user's Key Vault containing the SSL certificate</summary>
        string CertificateSourceParameterResourceGroupName { get; set; }
        /// <summary>
        /// The name of Key Vault Secret (representing the full certificate PFX) in Key Vault.
        /// </summary>
        string CertificateSourceParameterSecretName { get; set; }
        /// <summary>The version(GUID) of Key Vault Secret in Key Vault.</summary>
        string CertificateSourceParameterSecretVersion { get; set; }
        /// <summary>Subscription Id of the user's Key Vault containing the SSL certificate</summary>
        string CertificateSourceParameterSubscriptionId { get; set; }

        string CertificateSourceParameterTypeName { get; set; }
        /// <summary>
        /// Describes the action that shall be taken when the certificate is updated in Key Vault.
        /// </summary>
        string CertificateSourceParameterUpdateRule { get; set; }
        /// <summary>The name of the user's Key Vault containing the SSL certificate</summary>
        string CertificateSourceParameterVaultName { get; set; }

    }
}