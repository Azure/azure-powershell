// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Extensions;

    /// <summary>Managed Certificate used for https</summary>
    public partial class ManagedCertificate :
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IManagedCertificate,
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.IManagedCertificateInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICertificate"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICertificate __certificate = new Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.Certificate();

        /// <summary>Certificate expiration date.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inherited)]
        public string ExpirationDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICertificateInternal)__certificate).ExpirationDate; }

        /// <summary>Internal Acessors for ExpirationDate</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICertificateInternal.ExpirationDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICertificateInternal)__certificate).ExpirationDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICertificateInternal)__certificate).ExpirationDate = value; }

        /// <summary>Internal Acessors for Subject</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICertificateInternal.Subject { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICertificateInternal)__certificate).Subject; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICertificateInternal)__certificate).Subject = value; }

        /// <summary>Subject name in the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inherited)]
        public string Subject { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICertificateInternal)__certificate).Subject; }

        /// <summary>The type of the secret resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.SecretType? Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICertificateInternal)__certificate).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICertificateInternal)__certificate).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.SecretType)""); }

        /// <summary>Creates an new <see cref="ManagedCertificate" /> instance.</summary>
        public ManagedCertificate()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__certificate), __certificate);
            await eventListener.AssertObjectIsValid(nameof(__certificate), __certificate);
        }
    }
    /// Managed Certificate used for https
    public partial interface IManagedCertificate :
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICertificate
    {

    }
    /// Managed Certificate used for https
    internal partial interface IManagedCertificateInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20230501.ICertificateInternal
    {

    }
}