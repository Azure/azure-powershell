// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Extensions;

    /// <summary>Defines the parameters for the route configuration override action.</summary>
    public partial class RouteConfigurationOverrideActionParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IRouteConfigurationOverrideActionParameters,
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IRouteConfigurationOverrideActionParametersInternal
    {

        /// <summary>Backing field for <see cref="CacheConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.ICacheConfiguration _cacheConfiguration;

        /// <summary>
        /// The caching configuration associated with this rule. To disable caching, do not provide a cacheConfiguration object.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.ICacheConfiguration CacheConfiguration { get => (this._cacheConfiguration = this._cacheConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.CacheConfiguration()); set => this._cacheConfiguration = value; }

        /// <summary>Caching behavior for the requests</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.RuleCacheBehavior? CacheConfigurationCacheBehavior { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.ICacheConfigurationInternal)CacheConfiguration).CacheBehavior; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.ICacheConfigurationInternal)CacheConfiguration).CacheBehavior = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.RuleCacheBehavior)""); }

        /// <summary>
        /// The duration for which the content needs to be cached. Allowed format is [d.]hh:mm:ss
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string CacheConfigurationCacheDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.ICacheConfigurationInternal)CacheConfiguration).CacheDuration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.ICacheConfigurationInternal)CacheConfiguration).CacheDuration = value ?? null; }

        /// <summary>
        /// Indicates whether content compression is enabled. If compression is enabled, content will be served as compressed if user
        /// requests for a compressed version. Content won't be compressed on AzureFrontDoor when requested content is smaller than
        /// 1 byte or larger than 1 MB.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.RuleIsCompressionEnabled? CacheConfigurationIsCompressionEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.ICacheConfigurationInternal)CacheConfiguration).IsCompressionEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.ICacheConfigurationInternal)CacheConfiguration).IsCompressionEnabled = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.RuleIsCompressionEnabled)""); }

        /// <summary>query parameters to include or exclude (comma separated).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string CacheConfigurationQueryParameter { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.ICacheConfigurationInternal)CacheConfiguration).QueryParameter; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.ICacheConfigurationInternal)CacheConfiguration).QueryParameter = value ?? null; }

        /// <summary>
        /// Defines how Frontdoor caches requests that include query strings. You can ignore any query strings when caching, ignore
        /// specific query strings, cache every request with a unique URL, or cache specific query strings.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.RuleQueryStringCachingBehavior? CacheConfigurationQueryStringCachingBehavior { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.ICacheConfigurationInternal)CacheConfiguration).QueryStringCachingBehavior; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.ICacheConfigurationInternal)CacheConfiguration).QueryStringCachingBehavior = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.RuleQueryStringCachingBehavior)""); }

        /// <summary>Internal Acessors for CacheConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.ICacheConfiguration Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IRouteConfigurationOverrideActionParametersInternal.CacheConfiguration { get => (this._cacheConfiguration = this._cacheConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.CacheConfiguration()); set { {_cacheConfiguration = value;} } }

        /// <summary>Internal Acessors for OriginGroupOverride</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IOriginGroupOverride Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IRouteConfigurationOverrideActionParametersInternal.OriginGroupOverride { get => (this._originGroupOverride = this._originGroupOverride ?? new Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.OriginGroupOverride()); set { {_originGroupOverride = value;} } }

        /// <summary>Internal Acessors for OriginGroupOverrideOriginGroup</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IResourceReference Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IRouteConfigurationOverrideActionParametersInternal.OriginGroupOverrideOriginGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IOriginGroupOverrideInternal)OriginGroupOverride).OriginGroup; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IOriginGroupOverrideInternal)OriginGroupOverride).OriginGroup = value; }

        /// <summary>Internal Acessors for TypeName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IRouteConfigurationOverrideActionParametersInternal.TypeName { get => this._typeName; set { {_typeName = value;} } }

        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string OriginGroupId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IOriginGroupOverrideInternal)OriginGroupOverride).OriginGroupId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IOriginGroupOverrideInternal)OriginGroupOverride).OriginGroupId = value ?? null; }

        /// <summary>Backing field for <see cref="OriginGroupOverride" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IOriginGroupOverride _originGroupOverride;

        /// <summary>
        /// A reference to the origin group override configuration. Leave empty to use the default origin group on route.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IOriginGroupOverride OriginGroupOverride { get => (this._originGroupOverride = this._originGroupOverride ?? new Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.OriginGroupOverride()); set => this._originGroupOverride = value; }

        /// <summary>Protocol this rule will use when forwarding traffic to backends.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.ForwardingProtocol? OriginGroupOverrideForwardingProtocol { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IOriginGroupOverrideInternal)OriginGroupOverride).ForwardingProtocol; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IOriginGroupOverrideInternal)OriginGroupOverride).ForwardingProtocol = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.ForwardingProtocol)""); }

        /// <summary>Backing field for <see cref="TypeName" /> property.</summary>
        private string _typeName= @"DeliveryRuleRouteConfigurationOverrideActionParameters";

        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Owned)]
        public string TypeName { get => this._typeName; }

        /// <summary>
        /// Creates an new <see cref="RouteConfigurationOverrideActionParameters" /> instance.
        /// </summary>
        public RouteConfigurationOverrideActionParameters()
        {

        }
    }
    /// Defines the parameters for the route configuration override action.
    public partial interface IRouteConfigurationOverrideActionParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.IJsonSerializable
    {
        /// <summary>Caching behavior for the requests</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Caching behavior for the requests",
        SerializedName = @"cacheBehavior",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.RuleCacheBehavior) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.RuleCacheBehavior? CacheConfigurationCacheBehavior { get; set; }
        /// <summary>
        /// The duration for which the content needs to be cached. Allowed format is [d.]hh:mm:ss
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The duration for which the content needs to be cached. Allowed format is [d.]hh:mm:ss",
        SerializedName = @"cacheDuration",
        PossibleTypes = new [] { typeof(string) })]
        string CacheConfigurationCacheDuration { get; set; }
        /// <summary>
        /// Indicates whether content compression is enabled. If compression is enabled, content will be served as compressed if user
        /// requests for a compressed version. Content won't be compressed on AzureFrontDoor when requested content is smaller than
        /// 1 byte or larger than 1 MB.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether content compression is enabled. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won't be compressed on AzureFrontDoor when requested content is smaller than 1 byte or larger than 1 MB.",
        SerializedName = @"isCompressionEnabled",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.RuleIsCompressionEnabled) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.RuleIsCompressionEnabled? CacheConfigurationIsCompressionEnabled { get; set; }
        /// <summary>query parameters to include or exclude (comma separated).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"query parameters to include or exclude (comma separated).",
        SerializedName = @"queryParameters",
        PossibleTypes = new [] { typeof(string) })]
        string CacheConfigurationQueryParameter { get; set; }
        /// <summary>
        /// Defines how Frontdoor caches requests that include query strings. You can ignore any query strings when caching, ignore
        /// specific query strings, cache every request with a unique URL, or cache specific query strings.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Defines how Frontdoor caches requests that include query strings. You can ignore any query strings when caching, ignore specific query strings, cache every request with a unique URL, or cache specific query strings.",
        SerializedName = @"queryStringCachingBehavior",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.RuleQueryStringCachingBehavior) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.RuleQueryStringCachingBehavior? CacheConfigurationQueryStringCachingBehavior { get; set; }
        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string OriginGroupId { get; set; }
        /// <summary>Protocol this rule will use when forwarding traffic to backends.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Protocol this rule will use when forwarding traffic to backends.",
        SerializedName = @"forwardingProtocol",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.ForwardingProtocol) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.ForwardingProtocol? OriginGroupOverrideForwardingProtocol { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = true,
        ReadOnly = true,
        Description = @"",
        SerializedName = @"typeName",
        PossibleTypes = new [] { typeof(string) })]
        string TypeName { get;  }

    }
    /// Defines the parameters for the route configuration override action.
    internal partial interface IRouteConfigurationOverrideActionParametersInternal

    {
        /// <summary>
        /// The caching configuration associated with this rule. To disable caching, do not provide a cacheConfiguration object.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.ICacheConfiguration CacheConfiguration { get; set; }
        /// <summary>Caching behavior for the requests</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.RuleCacheBehavior? CacheConfigurationCacheBehavior { get; set; }
        /// <summary>
        /// The duration for which the content needs to be cached. Allowed format is [d.]hh:mm:ss
        /// </summary>
        string CacheConfigurationCacheDuration { get; set; }
        /// <summary>
        /// Indicates whether content compression is enabled. If compression is enabled, content will be served as compressed if user
        /// requests for a compressed version. Content won't be compressed on AzureFrontDoor when requested content is smaller than
        /// 1 byte or larger than 1 MB.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.RuleIsCompressionEnabled? CacheConfigurationIsCompressionEnabled { get; set; }
        /// <summary>query parameters to include or exclude (comma separated).</summary>
        string CacheConfigurationQueryParameter { get; set; }
        /// <summary>
        /// Defines how Frontdoor caches requests that include query strings. You can ignore any query strings when caching, ignore
        /// specific query strings, cache every request with a unique URL, or cache specific query strings.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.RuleQueryStringCachingBehavior? CacheConfigurationQueryStringCachingBehavior { get; set; }
        /// <summary>Resource ID.</summary>
        string OriginGroupId { get; set; }
        /// <summary>
        /// A reference to the origin group override configuration. Leave empty to use the default origin group on route.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IOriginGroupOverride OriginGroupOverride { get; set; }
        /// <summary>Protocol this rule will use when forwarding traffic to backends.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.ForwardingProtocol? OriginGroupOverrideForwardingProtocol { get; set; }
        /// <summary>defines the OriginGroup that would override the DefaultOriginGroup on route.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IResourceReference OriginGroupOverrideOriginGroup { get; set; }

        string TypeName { get; set; }

    }
}