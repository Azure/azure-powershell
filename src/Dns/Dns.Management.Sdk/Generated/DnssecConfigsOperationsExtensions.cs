// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Dns
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DnssecConfigsOperations.
    /// </summary>
    public static partial class DnssecConfigsOperationsExtensions
    {
            /// <summary>
            /// Creates or updates the DNSSEC configuration on a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='ifMatch'>
            /// The etag of the DNSSEC configuration. Omit this value to always overwrite
            /// the DNSSEC configuration. Specify the last-seen etag value to prevent
            /// accidentally overwriting any concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow this DNSSEC configuration to be created, but to prevent
            /// updating existing DNSSEC configuration. Other values will be ignored.
            /// </param>
            public static DnssecConfig CreateOrUpdate(this IDnssecConfigsOperations operations, string resourceGroupName, string zoneName, string ifMatch = default(string), string ifNoneMatch = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, zoneName, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the DNSSEC configuration on a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='ifMatch'>
            /// The etag of the DNSSEC configuration. Omit this value to always overwrite
            /// the DNSSEC configuration. Specify the last-seen etag value to prevent
            /// accidentally overwriting any concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow this DNSSEC configuration to be created, but to prevent
            /// updating existing DNSSEC configuration. Other values will be ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DnssecConfig> CreateOrUpdateAsync(this IDnssecConfigsOperations operations, string resourceGroupName, string zoneName, string ifMatch = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, zoneName, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the DNSSEC configuration on a DNS zone. This operation cannot be
            /// undone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='ifMatch'>
            /// The etag of this DNSSEC configuration. Omit this value to always delete the
            /// DNSSEC configuration. Specify the last-seen etag value to prevent
            /// accidentally deleting any concurrent changes.
            /// </param>
            public static DnssecConfigsDeleteHeaders Delete(this IDnssecConfigsOperations operations, string resourceGroupName, string zoneName, string ifMatch = default(string))
            {
                return operations.DeleteAsync(resourceGroupName, zoneName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the DNSSEC configuration on a DNS zone. This operation cannot be
            /// undone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='ifMatch'>
            /// The etag of this DNSSEC configuration. Omit this value to always delete the
            /// DNSSEC configuration. Specify the last-seen etag value to prevent
            /// accidentally deleting any concurrent changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DnssecConfigsDeleteHeaders> DeleteAsync(this IDnssecConfigsOperations operations, string resourceGroupName, string zoneName, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, zoneName, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets the DNSSEC configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            public static DnssecConfig Get(this IDnssecConfigsOperations operations, string resourceGroupName, string zoneName)
            {
                return operations.GetAsync(resourceGroupName, zoneName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the DNSSEC configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DnssecConfig> GetAsync(this IDnssecConfigsOperations operations, string resourceGroupName, string zoneName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, zoneName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the DNSSEC configurations in a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            public static IPage<DnssecConfig> ListByDnsZone(this IDnssecConfigsOperations operations, string resourceGroupName, string zoneName)
            {
                return operations.ListByDnsZoneAsync(resourceGroupName, zoneName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the DNSSEC configurations in a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DnssecConfig>> ListByDnsZoneAsync(this IDnssecConfigsOperations operations, string resourceGroupName, string zoneName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDnsZoneWithHttpMessagesAsync(resourceGroupName, zoneName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the DNSSEC configuration on a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='ifMatch'>
            /// The etag of the DNSSEC configuration. Omit this value to always overwrite
            /// the DNSSEC configuration. Specify the last-seen etag value to prevent
            /// accidentally overwriting any concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow this DNSSEC configuration to be created, but to prevent
            /// updating existing DNSSEC configuration. Other values will be ignored.
            /// </param>
            public static DnssecConfig BeginCreateOrUpdate(this IDnssecConfigsOperations operations, string resourceGroupName, string zoneName, string ifMatch = default(string), string ifNoneMatch = default(string))
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, zoneName, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the DNSSEC configuration on a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='ifMatch'>
            /// The etag of the DNSSEC configuration. Omit this value to always overwrite
            /// the DNSSEC configuration. Specify the last-seen etag value to prevent
            /// accidentally overwriting any concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow this DNSSEC configuration to be created, but to prevent
            /// updating existing DNSSEC configuration. Other values will be ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DnssecConfig> BeginCreateOrUpdateAsync(this IDnssecConfigsOperations operations, string resourceGroupName, string zoneName, string ifMatch = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, zoneName, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the DNSSEC configuration on a DNS zone. This operation cannot be
            /// undone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='ifMatch'>
            /// The etag of this DNSSEC configuration. Omit this value to always delete the
            /// DNSSEC configuration. Specify the last-seen etag value to prevent
            /// accidentally deleting any concurrent changes.
            /// </param>
            public static DnssecConfigsDeleteHeaders BeginDelete(this IDnssecConfigsOperations operations, string resourceGroupName, string zoneName, string ifMatch = default(string))
            {
                return operations.BeginDeleteAsync(resourceGroupName, zoneName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the DNSSEC configuration on a DNS zone. This operation cannot be
            /// undone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='ifMatch'>
            /// The etag of this DNSSEC configuration. Omit this value to always delete the
            /// DNSSEC configuration. Specify the last-seen etag value to prevent
            /// accidentally deleting any concurrent changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DnssecConfigsDeleteHeaders> BeginDeleteAsync(this IDnssecConfigsOperations operations, string resourceGroupName, string zoneName, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, zoneName, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Lists the DNSSEC configurations in a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DnssecConfig> ListByDnsZoneNext(this IDnssecConfigsOperations operations, string nextPageLink)
            {
                return operations.ListByDnsZoneNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the DNSSEC configurations in a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DnssecConfig>> ListByDnsZoneNextAsync(this IDnssecConfigsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDnsZoneNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
