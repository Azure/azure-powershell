// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Dns.Models
{
    using System.Linq;

    /// <summary>
    /// A NAPTR record. For more information about the NAPTR record format, see RFC
    /// 3403: https://www.rfc-editor.org/rfc/rfc3403
    /// </summary>
    public partial class NaptrRecord
    {
        /// <summary>
        /// Initializes a new instance of the NaptrRecord class.
        /// </summary>
        public NaptrRecord()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NaptrRecord class.
        /// </summary>

        /// <param name="order">The order in which the NAPTR records MUST be processed in order to
        /// accurately represent the ordered list of rules. The ordering is from lowest
        /// to highest. Valid values: 0-65535.
        /// </param>

        /// <param name="preference">The preference specifies the order in which NAPTR records with equal
        /// &#39;order&#39; values should be processed, low numbers being processed before high
        /// numbers. Valid values: 0-65535.
        /// </param>

        /// <param name="flags">The flags specific to DDDS applications. Values currently defined in RFC
        /// 3404 are uppercase and lowercase letters &#34;A&#34;, &#34;P&#34;, &#34;S&#34;, and &#34;U&#34;, and the
        /// empty string, &#34;&#34;. Enclose Flags in quotation marks.
        /// </param>

        /// <param name="services">The services specific to DDDS applications. Enclose Services in quotation
        /// marks.
        /// </param>

        /// <param name="regexp">The regular expression that the DDDS application uses to convert an input
        /// value into an output value. For example: an IP phone system might use a
        /// regular expression to convert a phone number that is entered by a user into
        /// a SIP URI. Enclose the regular expression in quotation marks. Specify
        /// either a value for &#39;regexp&#39; or a value for &#39;replacement&#39;.
        /// </param>

        /// <param name="replacement">The replacement is a fully qualified domain name (FQDN) of the next domain
        /// name that you want the DDDS application to submit a DNS query for. The DDDS
        /// application replaces the input value with the value specified for
        /// replacement. Specify either a value for &#39;regexp&#39; or a value for
        /// &#39;replacement&#39;. If you specify a value for &#39;regexp&#39;, specify a dot (.) for
        /// &#39;replacement&#39;.
        /// </param>
        public NaptrRecord(int? order = default(int?), int? preference = default(int?), string flags = default(string), string services = default(string), string regexp = default(string), string replacement = default(string))

        {
            this.Order = order;
            this.Preference = preference;
            this.Flags = flags;
            this.Services = services;
            this.Regexp = regexp;
            this.Replacement = replacement;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the order in which the NAPTR records MUST be processed in
        /// order to accurately represent the ordered list of rules. The ordering is
        /// from lowest to highest. Valid values: 0-65535.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "order")]
        public int? Order {get; set; }

        /// <summary>
        /// Gets or sets the preference specifies the order in which NAPTR records with
        /// equal &#39;order&#39; values should be processed, low numbers being processed
        /// before high numbers. Valid values: 0-65535.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "preference")]
        public int? Preference {get; set; }

        /// <summary>
        /// Gets or sets the flags specific to DDDS applications. Values currently
        /// defined in RFC 3404 are uppercase and lowercase letters &#34;A&#34;, &#34;P&#34;, &#34;S&#34;, and
        /// &#34;U&#34;, and the empty string, &#34;&#34;. Enclose Flags in quotation marks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "flags")]
        public string Flags {get; set; }

        /// <summary>
        /// Gets or sets the services specific to DDDS applications. Enclose Services
        /// in quotation marks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "services")]
        public string Services {get; set; }

        /// <summary>
        /// Gets or sets the regular expression that the DDDS application uses to
        /// convert an input value into an output value. For example: an IP phone
        /// system might use a regular expression to convert a phone number that is
        /// entered by a user into a SIP URI. Enclose the regular expression in
        /// quotation marks. Specify either a value for &#39;regexp&#39; or a value for
        /// &#39;replacement&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "regexp")]
        public string Regexp {get; set; }

        /// <summary>
        /// Gets or sets the replacement is a fully qualified domain name (FQDN) of the
        /// next domain name that you want the DDDS application to submit a DNS query
        /// for. The DDDS application replaces the input value with the value specified
        /// for replacement. Specify either a value for &#39;regexp&#39; or a value for
        /// &#39;replacement&#39;. If you specify a value for &#39;regexp&#39;, specify a dot (.) for
        /// &#39;replacement&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "replacement")]
        public string Replacement {get; set; }
    }
}