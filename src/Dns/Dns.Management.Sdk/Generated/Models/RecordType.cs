// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Dns.Models
{

    /// <summary>
    /// Defines values for RecordType.
    /// </summary>


    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum RecordType
    {
        [System.Runtime.Serialization.EnumMember(Value = "A")]
        A,
        [System.Runtime.Serialization.EnumMember(Value = "AAAA")]
        Aaaa,
        [System.Runtime.Serialization.EnumMember(Value = "CAA")]
        CAA,
        [System.Runtime.Serialization.EnumMember(Value = "CNAME")]
        Cname,
        [System.Runtime.Serialization.EnumMember(Value = "MX")]
        MX,
        [System.Runtime.Serialization.EnumMember(Value = "NS")]
        NS,
        [System.Runtime.Serialization.EnumMember(Value = "PTR")]
        PTR,
        [System.Runtime.Serialization.EnumMember(Value = "SOA")]
        SOA,
        [System.Runtime.Serialization.EnumMember(Value = "SRV")]
        SRV,
        [System.Runtime.Serialization.EnumMember(Value = "TXT")]
        TXT,
        [System.Runtime.Serialization.EnumMember(Value = "TLSA")]
        Tlsa,
        [System.Runtime.Serialization.EnumMember(Value = "DS")]
        DS,
        [System.Runtime.Serialization.EnumMember(Value = "NAPTR")]
        Naptr
    }
    internal static class RecordTypeEnumExtension
    {
        internal static string ToSerializedValue(this RecordType? value)
        {
            return value == null ? null : ((RecordType)value).ToSerializedValue();
        }
        internal static string ToSerializedValue(this RecordType value)
        {
            switch( value )
            {
                case RecordType.A:
                    return "A";
                case RecordType.Aaaa:
                    return "AAAA";
                case RecordType.CAA:
                    return "CAA";
                case RecordType.Cname:
                    return "CNAME";
                case RecordType.MX:
                    return "MX";
                case RecordType.NS:
                    return "NS";
                case RecordType.PTR:
                    return "PTR";
                case RecordType.SOA:
                    return "SOA";
                case RecordType.SRV:
                    return "SRV";
                case RecordType.TXT:
                    return "TXT";
                case RecordType.Tlsa:
                    return "TLSA";
                case RecordType.DS:
                    return "DS";
                case RecordType.Naptr:
                    return "NAPTR";
            }
            return null;
        }
        internal static RecordType? ParseRecordType(this string value)
        {
            switch( value )
            {
                case "A":
                    return RecordType.A;
                case "AAAA":
                    return RecordType.Aaaa;
                case "CAA":
                    return RecordType.CAA;
                case "CNAME":
                    return RecordType.Cname;
                case "MX":
                    return RecordType.MX;
                case "NS":
                    return RecordType.NS;
                case "PTR":
                    return RecordType.PTR;
                case "SOA":
                    return RecordType.SOA;
                case "SRV":
                    return RecordType.SRV;
                case "TXT":
                    return RecordType.TXT;
                case "TLSA":
                    return RecordType.Tlsa;
                case "DS":
                    return RecordType.DS;
                case "NAPTR":
                    return RecordType.Naptr;
            }
            return null;
        }
    }
}