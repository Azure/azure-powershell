// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Dns.Models
{
    using System.Linq;

    /// <summary>
    /// Describes a DNS zone.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Zone : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Zone class.
        /// </summary>
        public Zone()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Zone class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="etag">The etag of the zone.
        /// </param>

        /// <param name="systemData">Metadata pertaining to creation and last modification of the resource.
        /// </param>

        /// <param name="zoneType">The type of this DNS zone (Public or Private).
        /// Possible values include: 'Public', 'Private'</param>

        /// <param name="maxNumberOfRecordSets">The maximum number of record sets that can be created in this DNS zone. 
        /// This is a read-only property and any attempt to set this value will be
        /// ignored.
        /// </param>

        /// <param name="maxNumberOfRecordsPerRecordSet">The maximum number of records per record set that can be created in this
        /// DNS zone.  This is a read-only property and any attempt to set this value
        /// will be ignored.
        /// </param>

        /// <param name="numberOfRecordSets">The current number of record sets in this DNS zone.  This is a read-only
        /// property and any attempt to set this value will be ignored.
        /// </param>

        /// <param name="nameServers">The name servers for this DNS zone. This is a read-only property and any
        /// attempt to set this value will be ignored.
        /// </param>

        /// <param name="registrationVirtualNetworks">A list of references to virtual networks that register hostnames in this
        /// DNS zone. This is a only when ZoneType is Private.
        /// </param>

        /// <param name="resolutionVirtualNetworks">A list of references to virtual networks that resolve records in this DNS
        /// zone. This is a only when ZoneType is Private.
        /// </param>

        /// <param name="signingKeys">The list of signing keys.
        /// </param>
        public Zone(string location, string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string etag = default(string), SystemData systemData = default(SystemData), ZoneType? zoneType = default(ZoneType?), long? maxNumberOfRecordSets = default(long?), long? maxNumberOfRecordsPerRecordSet = default(long?), long? numberOfRecordSets = default(long?), System.Collections.Generic.IList<string> nameServers = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<SubResource> registrationVirtualNetworks = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> resolutionVirtualNetworks = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SigningKey> signingKeys = default(System.Collections.Generic.IList<SigningKey>))

        : base(location, id, name, type, tags)
        {
            this.Etag = etag;
            this.SystemData = systemData;
            this.ZoneType = zoneType;
            this.MaxNumberOfRecordSets = maxNumberOfRecordSets;
            this.MaxNumberOfRecordsPerRecordSet = maxNumberOfRecordsPerRecordSet;
            this.NumberOfRecordSets = numberOfRecordSets;
            this.NameServers = nameServers;
            this.RegistrationVirtualNetworks = registrationVirtualNetworks;
            this.ResolutionVirtualNetworks = resolutionVirtualNetworks;
            this.SigningKeys = signingKeys;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the etag of the zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; set; }

        /// <summary>
        /// Gets metadata pertaining to creation and last modification of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData {get; private set; }

        /// <summary>
        /// Gets or sets the type of this DNS zone (Public or Private). Possible values include: &#39;Public&#39;, &#39;Private&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.zoneType")]
        public ZoneType? ZoneType {get; set; }

        /// <summary>
        /// Gets the maximum number of record sets that can be created in this DNS
        /// zone.  This is a read-only property and any attempt to set this value will
        /// be ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maxNumberOfRecordSets")]
        public long? MaxNumberOfRecordSets {get; private set; }

        /// <summary>
        /// Gets the maximum number of records per record set that can be created in
        /// this DNS zone.  This is a read-only property and any attempt to set this
        /// value will be ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maxNumberOfRecordsPerRecordSet")]
        public long? MaxNumberOfRecordsPerRecordSet {get; private set; }

        /// <summary>
        /// Gets the current number of record sets in this DNS zone.  This is a
        /// read-only property and any attempt to set this value will be ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.numberOfRecordSets")]
        public long? NumberOfRecordSets {get; private set; }

        /// <summary>
        /// Gets the name servers for this DNS zone. This is a read-only property and
        /// any attempt to set this value will be ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.nameServers")]
        public System.Collections.Generic.IList<string> NameServers {get; private set; }

        /// <summary>
        /// Gets or sets a list of references to virtual networks that register
        /// hostnames in this DNS zone. This is a only when ZoneType is Private.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.registrationVirtualNetworks")]
        public System.Collections.Generic.IList<SubResource> RegistrationVirtualNetworks {get; set; }

        /// <summary>
        /// Gets or sets a list of references to virtual networks that resolve records
        /// in this DNS zone. This is a only when ZoneType is Private.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resolutionVirtualNetworks")]
        public System.Collections.Generic.IList<SubResource> ResolutionVirtualNetworks {get; set; }

        /// <summary>
        /// Gets the list of signing keys.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.signingKeys")]
        public System.Collections.Generic.IList<SigningKey> SigningKeys {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();







        }
    }
}