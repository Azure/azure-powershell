// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Models.Api20220801Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Runtime.Extensions;

    /// <summary>Filter events by their name.</summary>
    public partial class EventNameFilter :
        Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Models.Api20220801Preview.IEventNameFilter,
        Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Models.Api20220801Preview.IEventNameFilterInternal,
        Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Models.Api20220801Preview.IEventListenerFilter"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Models.Api20220801Preview.IEventListenerFilter __eventListenerFilter = new Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Models.Api20220801Preview.EventListenerFilter();

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Models.Api20220801Preview.IEventListenerFilterInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Models.Api20220801Preview.IEventListenerFilterInternal)__eventListenerFilter).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Models.Api20220801Preview.IEventListenerFilterInternal)__eventListenerFilter).Type = value; }

        /// <summary>Backing field for <see cref="SystemEvent" /> property.</summary>
        private string[] _systemEvent;

        /// <summary>
        /// Gets or sets a list of system events. Supported events: "connected" and "disconnected". Blocking event "connect" is not
        /// supported because it requires a response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Origin(Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.PropertyOrigin.Owned)]
        public string[] SystemEvent { get => this._systemEvent; set => this._systemEvent = value; }

        [Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Origin(Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Models.Api20220801Preview.IEventListenerFilterInternal)__eventListenerFilter).Type; }

        /// <summary>Backing field for <see cref="UserEventPattern" /> property.</summary>
        private string _userEventPattern;

        /// <summary>
        /// Gets or sets a matching pattern for event names.
        /// There are 3 kinds of patterns supported:
        /// 1. "*", it matches any event name
        /// 2. Combine multiple events with ",", for example "event1,event2", it matches events "event1" and "event2"
        /// 3. A single event name, for example, "event1", it matches "event1"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Origin(Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.PropertyOrigin.Owned)]
        public string UserEventPattern { get => this._userEventPattern; set => this._userEventPattern = value; }

        /// <summary>Creates an new <see cref="EventNameFilter" /> instance.</summary>
        public EventNameFilter()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__eventListenerFilter), __eventListenerFilter);
            await eventListener.AssertObjectIsValid(nameof(__eventListenerFilter), __eventListenerFilter);
        }
    }
    /// Filter events by their name.
    public partial interface IEventNameFilter :
        Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Models.Api20220801Preview.IEventListenerFilter
    {
        /// <summary>
        /// Gets or sets a list of system events. Supported events: "connected" and "disconnected". Blocking event "connect" is not
        /// supported because it requires a response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets a list of system events. Supported events: ""connected"" and ""disconnected"". Blocking event ""connect"" is not supported because it requires a response.",
        SerializedName = @"systemEvents",
        PossibleTypes = new [] { typeof(string) })]
        string[] SystemEvent { get; set; }
        /// <summary>
        /// Gets or sets a matching pattern for event names.
        /// There are 3 kinds of patterns supported:
        /// 1. "*", it matches any event name
        /// 2. Combine multiple events with ",", for example "event1,event2", it matches events "event1" and "event2"
        /// 3. A single event name, for example, "event1", it matches "event1"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets a matching pattern for event names.
        There are 3 kinds of patterns supported:
            1. ""*"", it matches any event name
            2. Combine multiple events with "","", for example ""event1,event2"", it matches events ""event1"" and ""event2""
            3. A single event name, for example, ""event1"", it matches ""event1""",
        SerializedName = @"userEventPattern",
        PossibleTypes = new [] { typeof(string) })]
        string UserEventPattern { get; set; }

    }
    /// Filter events by their name.
    internal partial interface IEventNameFilterInternal :
        Microsoft.Azure.PowerShell.Cmdlets.WebPubSub.Models.Api20220801Preview.IEventListenerFilterInternal
    {
        /// <summary>
        /// Gets or sets a list of system events. Supported events: "connected" and "disconnected". Blocking event "connect" is not
        /// supported because it requires a response.
        /// </summary>
        string[] SystemEvent { get; set; }
        /// <summary>
        /// Gets or sets a matching pattern for event names.
        /// There are 3 kinds of patterns supported:
        /// 1. "*", it matches any event name
        /// 2. Combine multiple events with ",", for example "event1,event2", it matches events "event1" and "event2"
        /// 3. A single event name, for example, "event1", it matches "event1"
        /// </summary>
        string UserEventPattern { get; set; }

    }
}