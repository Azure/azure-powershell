// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.SignalR.Models
{
    using System.Linq;

    /// <summary>
    /// The billing information of the resource.
    /// </summary>
    public partial class ResourceSku
    {
        /// <summary>
        /// Initializes a new instance of the ResourceSku class.
        /// </summary>
        public ResourceSku()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResourceSku class.
        /// </summary>

        /// <param name="name">The name of the SKU. Required.
        /// Allowed values: Standard_S1, Free_F1, Premium_P1, Premium_P2
        /// </param>

        /// <param name="tier">Optional tier of this particular SKU. &#39;Standard&#39; or &#39;Free&#39;.
        /// `Basic` is deprecated, use `Standard` instead.
        /// Possible values include: &#39;Free&#39;, &#39;Basic&#39;, &#39;Standard&#39;, &#39;Premium&#39;</param>

        /// <param name="size">Not used. Retained for future use.
        /// </param>

        /// <param name="family">Not used. Retained for future use.
        /// </param>

        /// <param name="capacity">Optional, integer. The unit count of the resource.
        /// 1 for Free_F1/Standard_S1/Premium_P1, 100 for Premium_P2 by default.
        /// If present, following values are allowed:
        /// Free_F1: 1;
        /// Standard_S1: 1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100;
        /// Premium_P1:  1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100;
        /// Premium_P2:  100,200,300,400,500,600,700,800,900,1000;
        /// </param>
        public ResourceSku(string name, string tier = default(string), string size = default(string), string family = default(string), int? capacity = default(int?))

        {
            this.Name = name;
            this.Tier = tier;
            this.Size = size;
            this.Family = family;
            this.Capacity = capacity;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the SKU. Required.
        /// Allowed values: Standard_S1, Free_F1, Premium_P1, Premium_P2
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets optional tier of this particular SKU. &#39;Standard&#39; or &#39;Free&#39;.
        /// `Basic` is deprecated, use `Standard` instead. Possible values include: &#39;Free&#39;, &#39;Basic&#39;, &#39;Standard&#39;, &#39;Premium&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tier")]
        public string Tier {get; set; }

        /// <summary>
        /// Gets not used. Retained for future use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "size")]
        public string Size {get; private set; }

        /// <summary>
        /// Gets not used. Retained for future use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "family")]
        public string Family {get; private set; }

        /// <summary>
        /// Gets or sets optional, integer. The unit count of the resource.
        /// 1 for Free_F1/Standard_S1/Premium_P1, 100 for Premium_P2 by default.
        /// If present, following values are allowed:
        /// Free_F1: 1;
        /// Standard_S1: 1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100;
        /// Premium_P1:  1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100;
        /// Premium_P2:  100,200,300,400,500,600,700,800,900,1000;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "capacity")]
        public int? Capacity {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }




        }
    }
}