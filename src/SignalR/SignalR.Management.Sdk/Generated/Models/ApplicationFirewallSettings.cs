// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.SignalR.Models
{
    using System.Linq;

    /// <summary>
    /// Application firewall settings for the resource
    /// </summary>
    public partial class ApplicationFirewallSettings
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationFirewallSettings class.
        /// </summary>
        public ApplicationFirewallSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationFirewallSettings class.
        /// </summary>

        /// <param name="clientConnectionCountRules">Rules to control the client connection count
        /// </param>

        /// <param name="clientTrafficControlRules">Rules to control the client traffic
        /// </param>

        /// <param name="maxClientConnectionLifetimeInSeconds">Config to control the client connection lifetime in seconds, can be set to
        /// 0 to disable the config
        /// </param>
        public ApplicationFirewallSettings(System.Collections.Generic.IList<ClientConnectionCountRule> clientConnectionCountRules = default(System.Collections.Generic.IList<ClientConnectionCountRule>), System.Collections.Generic.IList<ClientTrafficControlRule> clientTrafficControlRules = default(System.Collections.Generic.IList<ClientTrafficControlRule>), long? maxClientConnectionLifetimeInSeconds = default(long?))

        {
            this.ClientConnectionCountRules = clientConnectionCountRules;
            this.ClientTrafficControlRules = clientTrafficControlRules;
            this.MaxClientConnectionLifetimeInSeconds = maxClientConnectionLifetimeInSeconds;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets rules to control the client connection count
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientConnectionCountRules")]
        public System.Collections.Generic.IList<ClientConnectionCountRule> ClientConnectionCountRules {get; set; }

        /// <summary>
        /// Gets or sets rules to control the client traffic
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientTrafficControlRules")]
        public System.Collections.Generic.IList<ClientTrafficControlRule> ClientTrafficControlRules {get; set; }

        /// <summary>
        /// Gets or sets config to control the client connection lifetime in seconds,
        /// can be set to 0 to disable the config
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxClientConnectionLifetimeInSeconds")]
        public long? MaxClientConnectionLifetimeInSeconds {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ClientConnectionCountRules != null)
            {
                if (this.ClientConnectionCountRules.Count > 10)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxItems, "ClientConnectionCountRules", 10);
                }
            }
            if (this.ClientTrafficControlRules != null)
            {
                if (this.ClientTrafficControlRules.Count > 10)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxItems, "ClientTrafficControlRules", 10);
                }
            }
            if (this.MaxClientConnectionLifetimeInSeconds != null)
            {
                if (this.MaxClientConnectionLifetimeInSeconds > 604800)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "MaxClientConnectionLifetimeInSeconds", 604800);
                }
                if (this.MaxClientConnectionLifetimeInSeconds < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MaxClientConnectionLifetimeInSeconds", 0);
                }
            }
        }
    }
}