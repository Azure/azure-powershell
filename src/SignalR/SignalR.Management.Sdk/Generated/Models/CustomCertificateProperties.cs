// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.SignalR.Models
{
    using System.Linq;

    /// <summary>
    /// Custom certificate properties.
    /// </summary>
    public partial class CustomCertificateProperties
    {
        /// <summary>
        /// Initializes a new instance of the CustomCertificateProperties class.
        /// </summary>
        public CustomCertificateProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CustomCertificateProperties class.
        /// </summary>

        /// <param name="provisioningState">Provisioning state of the resource.
        /// Possible values include: &#39;Unknown&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;,
        /// &#39;Running&#39;, &#39;Creating&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Moving&#39;</param>

        /// <param name="keyVaultBaseUri">Base uri of the KeyVault that stores certificate.
        /// </param>

        /// <param name="keyVaultSecretName">Certificate secret name.
        /// </param>

        /// <param name="keyVaultSecretVersion">Certificate secret version.
        /// </param>
        public CustomCertificateProperties(string keyVaultBaseUri, string keyVaultSecretName, string provisioningState = default(string), string keyVaultSecretVersion = default(string))

        {
            this.ProvisioningState = provisioningState;
            this.KeyVaultBaseUri = keyVaultBaseUri;
            this.KeyVaultSecretName = keyVaultSecretName;
            this.KeyVaultSecretVersion = keyVaultSecretVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets provisioning state of the resource. Possible values include: &#39;Unknown&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;Running&#39;, &#39;Creating&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Moving&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets base uri of the KeyVault that stores certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keyVaultBaseUri")]
        public string KeyVaultBaseUri {get; set; }

        /// <summary>
        /// Gets or sets certificate secret name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keyVaultSecretName")]
        public string KeyVaultSecretName {get; set; }

        /// <summary>
        /// Gets or sets certificate secret version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keyVaultSecretVersion")]
        public string KeyVaultSecretVersion {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.KeyVaultBaseUri == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "KeyVaultBaseUri");
            }
            if (this.KeyVaultSecretName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "KeyVaultSecretName");
            }




        }
    }
}