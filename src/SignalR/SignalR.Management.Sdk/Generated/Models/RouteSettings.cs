// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.SignalR.Models
{
    using System.Linq;

    /// <summary>
    /// Route settings for the resource
    /// </summary>
    public partial class RouteSettings
    {
        /// <summary>
        /// Initializes a new instance of the RouteSettings class.
        /// </summary>
        public RouteSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RouteSettings class.
        /// </summary>

        /// <param name="serverBalanceWeight">Gets or sets the server balance weight.
        /// A higher value means a greater balance of client connections across
        /// different app server instances.
        /// A value of 0 distributes connections randomly, while a value of 255 ensures
        /// maximum balancing.
        /// The default value is 255.
        /// Recommended ```255``` for multiple app servers in same size.
        /// </param>

        /// <param name="connectionBalanceWeight">Gets or sets the connection balance weight.
        /// A higher value means a greater balance of client connections across
        /// different server connections.
        /// A value of 0 distributes connections randomly, while a value of 255 ensures
        /// maximum balancing.
        /// The default value is 255.
        /// Recommended ```255``` for all of the cases.
        /// </param>

        /// <param name="latencyWeight">Gets or sets the weight for latency-based routing.
        /// A higher value increases the influence of latency-based routing.
        /// A value of 0 disables latency-based routing entirely, while a value of 255
        /// enables it fully.
        /// The default value is 0.
        /// Recommended ```255``` for replicas or app servers in different regions for
        /// disaster recovery.
        /// </param>
        public RouteSettings(int? serverBalanceWeight = default(int?), int? connectionBalanceWeight = default(int?), int? latencyWeight = default(int?))

        {
            this.ServerBalanceWeight = serverBalanceWeight;
            this.ConnectionBalanceWeight = connectionBalanceWeight;
            this.LatencyWeight = latencyWeight;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets gets or sets the server balance weight.
        /// A higher value means a greater balance of client connections across
        /// different app server instances.
        /// A value of 0 distributes connections randomly, while a value of 255 ensures
        /// maximum balancing.
        /// The default value is 255.
        /// Recommended ```255``` for multiple app servers in same size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverBalanceWeight")]
        public int? ServerBalanceWeight {get; set; }

        /// <summary>
        /// Gets or sets gets or sets the connection balance weight.
        /// A higher value means a greater balance of client connections across
        /// different server connections.
        /// A value of 0 distributes connections randomly, while a value of 255 ensures
        /// maximum balancing.
        /// The default value is 255.
        /// Recommended ```255``` for all of the cases.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionBalanceWeight")]
        public int? ConnectionBalanceWeight {get; set; }

        /// <summary>
        /// Gets or sets gets or sets the weight for latency-based routing.
        /// A higher value increases the influence of latency-based routing.
        /// A value of 0 disables latency-based routing entirely, while a value of 255
        /// enables it fully.
        /// The default value is 0.
        /// Recommended ```255``` for replicas or app servers in different regions for
        /// disaster recovery.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "latencyWeight")]
        public int? LatencyWeight {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ServerBalanceWeight != null)
            {
                if (this.ServerBalanceWeight > 255)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "ServerBalanceWeight", 255);
                }
                if (this.ServerBalanceWeight < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "ServerBalanceWeight", 0);
                }
            }
            if (this.ConnectionBalanceWeight != null)
            {
                if (this.ConnectionBalanceWeight > 255)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "ConnectionBalanceWeight", 255);
                }
                if (this.ConnectionBalanceWeight < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "ConnectionBalanceWeight", 0);
                }
            }
            if (this.LatencyWeight != null)
            {
                if (this.LatencyWeight > 255)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "LatencyWeight", 255);
                }
                if (this.LatencyWeight < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "LatencyWeight", 0);
                }
            }
        }
    }
}