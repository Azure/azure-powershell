// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.SignalR.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the properties of an existing Shared Private Link Resource
    /// </summary>
    public partial class SharedPrivateLinkResourceProperties
    {
        /// <summary>
        /// Initializes a new instance of the SharedPrivateLinkResourceProperties class.
        /// </summary>
        public SharedPrivateLinkResourceProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SharedPrivateLinkResourceProperties class.
        /// </summary>

        /// <param name="groupId">The group id from the provider of resource the shared private link resource
        /// is for
        /// </param>

        /// <param name="privateLinkResourceId">The resource id of the resource the shared private link resource is for
        /// </param>

        /// <param name="provisioningState">Provisioning state of the shared private link resource
        /// Possible values include: &#39;Unknown&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;,
        /// &#39;Running&#39;, &#39;Creating&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Moving&#39;</param>

        /// <param name="requestMessage">The request message for requesting approval of the shared private link
        /// resource
        /// </param>

        /// <param name="status">Status of the shared private link resource
        /// Possible values include: &#39;Pending&#39;, &#39;Approved&#39;, &#39;Rejected&#39;, &#39;Disconnected&#39;,
        /// &#39;Timeout&#39;</param>
        public SharedPrivateLinkResourceProperties(string groupId, string privateLinkResourceId, string provisioningState = default(string), string requestMessage = default(string), string status = default(string))

        {
            this.GroupId = groupId;
            this.PrivateLinkResourceId = privateLinkResourceId;
            this.ProvisioningState = provisioningState;
            this.RequestMessage = requestMessage;
            this.Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the group id from the provider of resource the shared private
        /// link resource is for
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "groupId")]
        public string GroupId {get; set; }

        /// <summary>
        /// Gets or sets the resource id of the resource the shared private link
        /// resource is for
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateLinkResourceId")]
        public string PrivateLinkResourceId {get; set; }

        /// <summary>
        /// Gets provisioning state of the shared private link resource Possible values include: &#39;Unknown&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;Running&#39;, &#39;Creating&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Moving&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the request message for requesting approval of the shared
        /// private link resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requestMessage")]
        public string RequestMessage {get; set; }

        /// <summary>
        /// Gets status of the shared private link resource Possible values include: &#39;Pending&#39;, &#39;Approved&#39;, &#39;Rejected&#39;, &#39;Disconnected&#39;, &#39;Timeout&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.GroupId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "GroupId");
            }
            if (this.PrivateLinkResourceId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "PrivateLinkResourceId");
            }





        }
    }
}