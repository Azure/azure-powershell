// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.SignalR.Models
{
    using System.Linq;

    /// <summary>
    /// A class that describes the properties of the resource
    /// </summary>
    public partial class SignalRProperties
    {
        /// <summary>
        /// Initializes a new instance of the SignalRProperties class.
        /// </summary>
        public SignalRProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SignalRProperties class.
        /// </summary>

        /// <param name="provisioningState">Provisioning state of the resource.
        /// Possible values include: &#39;Unknown&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;,
        /// &#39;Running&#39;, &#39;Creating&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Moving&#39;</param>

        /// <param name="externalIP">The publicly accessible IP of the resource.
        /// </param>

        /// <param name="hostName">FQDN of the service instance.
        /// </param>

        /// <param name="publicPort">The publicly accessible port of the resource which is designed for
        /// browser/client side usage.
        /// </param>

        /// <param name="serverPort">The publicly accessible port of the resource which is designed for customer
        /// server side usage.
        /// </param>

        /// <param name="version">Version of the resource. Probably you need the same or higher version of
        /// client SDKs.
        /// </param>

        /// <param name="privateEndpointConnections">Private endpoint connections to the resource.
        /// </param>

        /// <param name="sharedPrivateLinkResources">The list of shared private link resources.
        /// </param>

        /// <param name="tls">TLS settings for the resource
        /// </param>

        /// <param name="hostNamePrefix">Deprecated.
        /// </param>

        /// <param name="features">List of the featureFlags.
        /// FeatureFlags that are not included in the parameters for the update
        /// operation will not be modified.
        /// And the response will only include featureFlags that are explicitly set.
        /// When a featureFlag is not explicitly set, its globally default value will
        /// be used
        /// But keep in mind, the default value doesn&#39;t mean &#34;false&#34;. It varies in
        /// terms of different FeatureFlags.
        /// </param>

        /// <param name="liveTraceConfiguration">Live trace configuration of a Microsoft.SignalRService resource.
        /// </param>

        /// <param name="resourceLogConfiguration">Resource log configuration of a Microsoft.SignalRService resource.
        /// </param>

        /// <param name="cors">Cross-Origin Resource Sharing (CORS) settings.
        /// </param>

        /// <param name="serverless">Serverless settings.
        /// </param>

        /// <param name="upstream">The settings for the Upstream when the service is in server-less mode.
        /// </param>

        /// <param name="networkAcLs">Network ACLs for the resource
        /// </param>

        /// <param name="applicationFirewall">Application firewall settings for the resource
        /// </param>

        /// <param name="publicNetworkAccess">Enable or disable public network access. Default to &#34;Enabled&#34;.
        /// When it&#39;s Enabled, network ACLs still apply.
        /// When it&#39;s Disabled, public network access is always disabled no matter what
        /// you set in network ACLs.
        /// </param>

        /// <param name="disableLocalAuth">DisableLocalAuth
        /// Enable or disable local auth with AccessKey
        /// When set as true, connection with AccessKey=xxx won&#39;t work.
        /// </param>

        /// <param name="disableAadAuth">DisableLocalAuth
        /// Enable or disable aad auth
        /// When set as true, connection with AuthType=aad won&#39;t work.
        /// </param>

        /// <param name="regionEndpointEnabled">Enable or disable the regional endpoint. Default to &#34;Enabled&#34;.
        /// When it&#39;s Disabled, new connections will not be routed to this endpoint,
        /// however existing connections will not be affected.
        /// This property is replica specific. Disable the regional endpoint without
        /// replica is not allowed.
        /// </param>

        /// <param name="resourceStopped">Stop or start the resource.  Default to &#34;False&#34;.
        /// When it&#39;s true, the data plane of the resource is shutdown.
        /// When it&#39;s false, the data plane of the resource is started.
        /// </param>

        /// <param name="routeSettings">Route settings for the resource
        /// </param>
        public SignalRProperties(string provisioningState = default(string), string externalIP = default(string), string hostName = default(string), int? publicPort = default(int?), int? serverPort = default(int?), string version = default(string), System.Collections.Generic.IList<PrivateEndpointConnection> privateEndpointConnections = default(System.Collections.Generic.IList<PrivateEndpointConnection>), System.Collections.Generic.IList<SharedPrivateLinkResource> sharedPrivateLinkResources = default(System.Collections.Generic.IList<SharedPrivateLinkResource>), SignalRTlsSettings tls = default(SignalRTlsSettings), string hostNamePrefix = default(string), System.Collections.Generic.IList<SignalRFeature> features = default(System.Collections.Generic.IList<SignalRFeature>), LiveTraceConfiguration liveTraceConfiguration = default(LiveTraceConfiguration), ResourceLogConfiguration resourceLogConfiguration = default(ResourceLogConfiguration), SignalRCorsSettings cors = default(SignalRCorsSettings), ServerlessSettings serverless = default(ServerlessSettings), ServerlessUpstreamSettings upstream = default(ServerlessUpstreamSettings), SignalRNetworkACLs networkAcLs = default(SignalRNetworkACLs), ApplicationFirewallSettings applicationFirewall = default(ApplicationFirewallSettings), string publicNetworkAccess = default(string), bool? disableLocalAuth = default(bool?), bool? disableAadAuth = default(bool?), string regionEndpointEnabled = default(string), string resourceStopped = default(string), RouteSettings routeSettings = default(RouteSettings))

        {
            this.ProvisioningState = provisioningState;
            this.ExternalIP = externalIP;
            this.HostName = hostName;
            this.PublicPort = publicPort;
            this.ServerPort = serverPort;
            this.Version = version;
            this.PrivateEndpointConnections = privateEndpointConnections;
            this.SharedPrivateLinkResources = sharedPrivateLinkResources;
            this.Tls = tls;
            this.HostNamePrefix = hostNamePrefix;
            this.Features = features;
            this.LiveTraceConfiguration = liveTraceConfiguration;
            this.ResourceLogConfiguration = resourceLogConfiguration;
            this.Cors = cors;
            this.Serverless = serverless;
            this.Upstream = upstream;
            this.NetworkAcLs = networkAcLs;
            this.ApplicationFirewall = applicationFirewall;
            this.PublicNetworkAccess = publicNetworkAccess;
            this.DisableLocalAuth = disableLocalAuth;
            this.DisableAadAuth = disableAadAuth;
            this.RegionEndpointEnabled = regionEndpointEnabled;
            this.ResourceStopped = resourceStopped;
            this.RouteSettings = routeSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets provisioning state of the resource. Possible values include: &#39;Unknown&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;Running&#39;, &#39;Creating&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Moving&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets the publicly accessible IP of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "externalIP")]
        public string ExternalIP {get; private set; }

        /// <summary>
        /// Gets fQDN of the service instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostName")]
        public string HostName {get; private set; }

        /// <summary>
        /// Gets the publicly accessible port of the resource which is designed for
        /// browser/client side usage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publicPort")]
        public int? PublicPort {get; private set; }

        /// <summary>
        /// Gets the publicly accessible port of the resource which is designed for
        /// customer server side usage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverPort")]
        public int? ServerPort {get; private set; }

        /// <summary>
        /// Gets version of the resource. Probably you need the same or higher version
        /// of client SDKs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "version")]
        public string Version {get; private set; }

        /// <summary>
        /// Gets private endpoint connections to the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateEndpointConnections")]
        public System.Collections.Generic.IList<PrivateEndpointConnection> PrivateEndpointConnections {get; private set; }

        /// <summary>
        /// Gets the list of shared private link resources.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sharedPrivateLinkResources")]
        public System.Collections.Generic.IList<SharedPrivateLinkResource> SharedPrivateLinkResources {get; private set; }

        /// <summary>
        /// Gets or sets tLS settings for the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tls")]
        public SignalRTlsSettings Tls {get; set; }

        /// <summary>
        /// Gets deprecated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostNamePrefix")]
        public string HostNamePrefix {get; private set; }

        /// <summary>
        /// Gets or sets list of the featureFlags.
        /// FeatureFlags that are not included in the parameters for the update
        /// operation will not be modified.
        /// And the response will only include featureFlags that are explicitly set.
        /// When a featureFlag is not explicitly set, its globally default value will
        /// be used
        /// But keep in mind, the default value doesn&#39;t mean &#34;false&#34;. It varies in
        /// terms of different FeatureFlags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "features")]
        public System.Collections.Generic.IList<SignalRFeature> Features {get; set; }

        /// <summary>
        /// Gets or sets live trace configuration of a Microsoft.SignalRService
        /// resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "liveTraceConfiguration")]
        public LiveTraceConfiguration LiveTraceConfiguration {get; set; }

        /// <summary>
        /// Gets or sets resource log configuration of a Microsoft.SignalRService
        /// resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceLogConfiguration")]
        public ResourceLogConfiguration ResourceLogConfiguration {get; set; }

        /// <summary>
        /// Gets or sets cross-Origin Resource Sharing (CORS) settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cors")]
        public SignalRCorsSettings Cors {get; set; }

        /// <summary>
        /// Gets or sets serverless settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverless")]
        public ServerlessSettings Serverless {get; set; }

        /// <summary>
        /// Gets or sets the settings for the Upstream when the service is in
        /// server-less mode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upstream")]
        public ServerlessUpstreamSettings Upstream {get; set; }

        /// <summary>
        /// Gets or sets network ACLs for the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkACLs")]
        public SignalRNetworkACLs NetworkAcLs {get; set; }

        /// <summary>
        /// Gets or sets application firewall settings for the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "applicationFirewall")]
        public ApplicationFirewallSettings ApplicationFirewall {get; set; }

        /// <summary>
        /// Gets or sets enable or disable public network access. Default to &#34;Enabled&#34;.
        /// When it&#39;s Enabled, network ACLs still apply.
        /// When it&#39;s Disabled, public network access is always disabled no matter what
        /// you set in network ACLs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publicNetworkAccess")]
        public string PublicNetworkAccess {get; set; }

        /// <summary>
        /// Gets or sets disableLocalAuth
        /// Enable or disable local auth with AccessKey
        /// When set as true, connection with AccessKey=xxx won&#39;t work.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disableLocalAuth")]
        public bool? DisableLocalAuth {get; set; }

        /// <summary>
        /// Gets or sets disableLocalAuth
        /// Enable or disable aad auth
        /// When set as true, connection with AuthType=aad won&#39;t work.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disableAadAuth")]
        public bool? DisableAadAuth {get; set; }

        /// <summary>
        /// Gets or sets enable or disable the regional endpoint. Default to &#34;Enabled&#34;.
        /// When it&#39;s Disabled, new connections will not be routed to this endpoint,
        /// however existing connections will not be affected.
        /// This property is replica specific. Disable the regional endpoint without
        /// replica is not allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "regionEndpointEnabled")]
        public string RegionEndpointEnabled {get; set; }

        /// <summary>
        /// Gets or sets stop or start the resource.  Default to &#34;False&#34;.
        /// When it&#39;s true, the data plane of the resource is shutdown.
        /// When it&#39;s false, the data plane of the resource is started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceStopped")]
        public string ResourceStopped {get; set; }

        /// <summary>
        /// Gets or sets route settings for the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "routeSettings")]
        public RouteSettings RouteSettings {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {








            if (this.Features != null)
            {
                foreach (var element in this.Features)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }



            if (this.Serverless != null)
            {
                this.Serverless.Validate();
            }

            if (this.NetworkAcLs != null)
            {
                this.NetworkAcLs.Validate();
            }
            if (this.ApplicationFirewall != null)
            {
                this.ApplicationFirewall.Validate();
            }



            if (this.RouteSettings != null)
            {
                this.RouteSettings.Validate();
            }
        }
    }
}