// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.SignalR.Models
{
    using System.Linq;

    /// <summary>
    /// Throttle the client traffic by the JWT signature
    /// </summary>
    [Newtonsoft.Json.JsonObject("TrafficThrottleByJwtSignatureRule")]
    public partial class TrafficThrottleByJwtSignatureRule : ClientTrafficControlRule
    {
        /// <summary>
        /// Initializes a new instance of the TrafficThrottleByJwtSignatureRule class.
        /// </summary>
        public TrafficThrottleByJwtSignatureRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TrafficThrottleByJwtSignatureRule class.
        /// </summary>

        /// <param name="maxInboundMessageBytes">Maximum accumulated inbound message bytes allowed for the same JWT
        /// signature within a time window. Clients with the same JWT signature will
        /// get disconnected if the message bytes exceeds this value. Default value is
        /// 1GB.
        /// </param>

        /// <param name="aggregationWindowInSeconds">The aggregation window for the message bytes. The message bytes will be
        /// aggregated in this window and be reset after the window. Default value is
        /// 60 seconds.
        /// </param>
        public TrafficThrottleByJwtSignatureRule(long? maxInboundMessageBytes = default(long?), int? aggregationWindowInSeconds = default(int?))

        {
            this.MaxInboundMessageBytes = maxInboundMessageBytes;
            this.AggregationWindowInSeconds = aggregationWindowInSeconds;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets maximum accumulated inbound message bytes allowed for the same
        /// JWT signature within a time window. Clients with the same JWT signature
        /// will get disconnected if the message bytes exceeds this value. Default
        /// value is 1GB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxInboundMessageBytes")]
        public long? MaxInboundMessageBytes {get; set; }

        /// <summary>
        /// Gets or sets the aggregation window for the message bytes. The message
        /// bytes will be aggregated in this window and be reset after the window.
        /// Default value is 60 seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "aggregationWindowInSeconds")]
        public int? AggregationWindowInSeconds {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.MaxInboundMessageBytes != null)
            {
                if (this.MaxInboundMessageBytes < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MaxInboundMessageBytes", 0);
                }
            }
            if (this.AggregationWindowInSeconds != null)
            {
                if (this.AggregationWindowInSeconds > 3600)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "AggregationWindowInSeconds", 3600);
                }
                if (this.AggregationWindowInSeconds < 10)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "AggregationWindowInSeconds", 10);
                }
            }
        }
    }
}