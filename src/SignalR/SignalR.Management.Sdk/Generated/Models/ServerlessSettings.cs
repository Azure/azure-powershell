// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.SignalR.Models
{
    using System.Linq;

    /// <summary>
    /// Serverless settings.
    /// </summary>
    public partial class ServerlessSettings
    {
        /// <summary>
        /// Initializes a new instance of the ServerlessSettings class.
        /// </summary>
        public ServerlessSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerlessSettings class.
        /// </summary>

        /// <param name="connectionTimeoutInSeconds">Gets or sets Client Connection Timeout. Optional to be set.
        /// Value in seconds.
        /// Default value is 30 seconds.
        /// Customer should set the timeout to a shorter period if messages are
        /// expected to be sent in shorter intervals,
        /// and want the client to disconnect more quickly after the last message is
        /// sent.
        /// You can set the timeout to a longer period if messages are expected to be
        /// sent in longer intervals,
        /// and they want to keep the same client connection alive during this session.
        /// The service considers the client disconnected if it hasn&#39;t received a
        /// message (including keep-alive) in this interval.
        /// </param>

        /// <param name="keepAliveIntervalInSeconds">Gets or sets the Keep-Alive Interval. Optional to set.
        /// Value is in seconds.
        /// The default value is 15 seconds.
        /// Customers should set this value to a shorter period if they want the
        /// service to send keep-alive messages more frequently,
        /// ensuring timely checks of the connection status.
        /// Conversely, customers can set this value to a longer period if they want
        /// the service to send keep-alive messages less frequently,
        /// reducing network traffic, but note that it may take longer to detect a
        /// disconnection.
        /// This interval ensures that the connection is maintained by sending periodic
        /// keep-alive messages to the client.
        /// </param>
        public ServerlessSettings(int? connectionTimeoutInSeconds = default(int?), int? keepAliveIntervalInSeconds = default(int?))

        {
            this.ConnectionTimeoutInSeconds = connectionTimeoutInSeconds;
            this.KeepAliveIntervalInSeconds = keepAliveIntervalInSeconds;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets gets or sets Client Connection Timeout. Optional to be set.
        /// Value in seconds.
        /// Default value is 30 seconds.
        /// Customer should set the timeout to a shorter period if messages are
        /// expected to be sent in shorter intervals,
        /// and want the client to disconnect more quickly after the last message is
        /// sent.
        /// You can set the timeout to a longer period if messages are expected to be
        /// sent in longer intervals,
        /// and they want to keep the same client connection alive during this session.
        /// The service considers the client disconnected if it hasn&#39;t received a
        /// message (including keep-alive) in this interval.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionTimeoutInSeconds")]
        public int? ConnectionTimeoutInSeconds {get; set; }

        /// <summary>
        /// Gets or sets gets or sets the Keep-Alive Interval. Optional to set.
        /// Value is in seconds.
        /// The default value is 15 seconds.
        /// Customers should set this value to a shorter period if they want the
        /// service to send keep-alive messages more frequently,
        /// ensuring timely checks of the connection status.
        /// Conversely, customers can set this value to a longer period if they want
        /// the service to send keep-alive messages less frequently,
        /// reducing network traffic, but note that it may take longer to detect a
        /// disconnection.
        /// This interval ensures that the connection is maintained by sending periodic
        /// keep-alive messages to the client.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keepAliveIntervalInSeconds")]
        public int? KeepAliveIntervalInSeconds {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ConnectionTimeoutInSeconds != null)
            {
                if (this.ConnectionTimeoutInSeconds > 120)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "ConnectionTimeoutInSeconds", 120);
                }
                if (this.ConnectionTimeoutInSeconds < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "ConnectionTimeoutInSeconds", 1);
                }
            }
            if (this.KeepAliveIntervalInSeconds != null)
            {
                if (this.KeepAliveIntervalInSeconds > 120)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "KeepAliveIntervalInSeconds", 120);
                }
                if (this.KeepAliveIntervalInSeconds < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "KeepAliveIntervalInSeconds", 1);
                }
            }
        }
    }
}