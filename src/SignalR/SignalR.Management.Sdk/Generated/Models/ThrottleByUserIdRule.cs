// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.SignalR.Models
{
    using System.Linq;

    /// <summary>
    /// Throttle the client connection by the user ID
    /// </summary>
    [Newtonsoft.Json.JsonObject("ThrottleByUserIdRule")]
    public partial class ThrottleByUserIdRule : ClientConnectionCountRule
    {
        /// <summary>
        /// Initializes a new instance of the ThrottleByUserIdRule class.
        /// </summary>
        public ThrottleByUserIdRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ThrottleByUserIdRule class.
        /// </summary>

        /// <param name="maxCount">Maximum connection count allowed for the same user ID. Clients with the
        /// same user ID will get rejected if the connection count exceeds this value.
        /// Default value is 20.
        /// </param>
        public ThrottleByUserIdRule(int? maxCount = default(int?))

        {
            this.MaxCount = maxCount;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets maximum connection count allowed for the same user ID. Clients
        /// with the same user ID will get rejected if the connection count exceeds
        /// this value. Default value is 20.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxCount")]
        public int? MaxCount {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.MaxCount != null)
            {
                if (this.MaxCount > 2147483647)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "MaxCount", 2147483647);
                }
                if (this.MaxCount < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MaxCount", 0);
                }
            }
        }
    }
}