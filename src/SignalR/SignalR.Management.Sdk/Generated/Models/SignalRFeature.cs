// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.SignalR.Models
{
    using System.Linq;

    /// <summary>
    /// Feature of a SignalR resource, which controls the SignalR runtime behavior.
    /// </summary>
    public partial class SignalRFeature
    {
        /// <summary>
        /// Initializes a new instance of the SignalRFeature class.
        /// </summary>
        public SignalRFeature()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SignalRFeature class.
        /// </summary>

        /// <param name="flag">FeatureFlags is the supported features of Azure SignalR service.
        /// - ServiceMode: Flag for backend server for SignalR service. Values allowed:
        /// &#34;Default&#34;: have your own backend server; &#34;Serverless&#34;: your application
        /// doesn&#39;t have a backend server; &#34;Classic&#34;: for backward compatibility.
        /// Support both Default and Serverless mode but not recommended;
        /// &#34;PredefinedOnly&#34;: for future use.
        /// - EnableConnectivityLogs: &#34;true&#34;/&#34;false&#34;, to enable/disable the
        /// connectivity log category respectively.
        /// - EnableMessagingLogs: &#34;true&#34;/&#34;false&#34;, to enable/disable the connectivity
        /// log category respectively.
        /// - EnableLiveTrace: Live Trace allows you to know what&#39;s happening inside
        /// Azure SignalR service, it will give you live traces in real time, it will
        /// be helpful when you developing your own Azure SignalR based web application
        /// or self-troubleshooting some issues. Please note that live traces are
        /// counted as outbound messages that will be charged. Values allowed:
        /// &#34;true&#34;/&#34;false&#34;, to enable/disable live trace feature.
        /// Possible values include: &#39;ServiceMode&#39;, &#39;EnableConnectivityLogs&#39;,
        /// &#39;EnableMessagingLogs&#39;, &#39;EnableLiveTrace&#39;</param>

        /// <param name="value">Value of the feature flag. See Azure SignalR service document
        /// https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
        /// </param>

        /// <param name="properties">Optional properties related to this feature.
        /// </param>
        public SignalRFeature(string flag, string value, System.Collections.Generic.IDictionary<string, string> properties = default(System.Collections.Generic.IDictionary<string, string>))

        {
            this.Flag = flag;
            this.Value = value;
            this.Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets featureFlags is the supported features of Azure SignalR
        /// service.
        /// - ServiceMode: Flag for backend server for SignalR service. Values allowed:
        /// &#34;Default&#34;: have your own backend server; &#34;Serverless&#34;: your application
        /// doesn&#39;t have a backend server; &#34;Classic&#34;: for backward compatibility.
        /// Support both Default and Serverless mode but not recommended;
        /// &#34;PredefinedOnly&#34;: for future use.
        /// - EnableConnectivityLogs: &#34;true&#34;/&#34;false&#34;, to enable/disable the
        /// connectivity log category respectively.
        /// - EnableMessagingLogs: &#34;true&#34;/&#34;false&#34;, to enable/disable the connectivity
        /// log category respectively.
        /// - EnableLiveTrace: Live Trace allows you to know what&#39;s happening inside
        /// Azure SignalR service, it will give you live traces in real time, it will
        /// be helpful when you developing your own Azure SignalR based web application
        /// or self-troubleshooting some issues. Please note that live traces are
        /// counted as outbound messages that will be charged. Values allowed:
        /// &#34;true&#34;/&#34;false&#34;, to enable/disable live trace feature. Possible values include: &#39;ServiceMode&#39;, &#39;EnableConnectivityLogs&#39;, &#39;EnableMessagingLogs&#39;, &#39;EnableLiveTrace&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "flag")]
        public string Flag {get; set; }

        /// <summary>
        /// Gets or sets value of the feature flag. See Azure SignalR service document
        /// https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "value")]
        public string Value {get; set; }

        /// <summary>
        /// Gets or sets optional properties related to this feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties")]
        public System.Collections.Generic.IDictionary<string, string> Properties {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Flag == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Flag");
            }
            if (this.Value == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Value");
            }

            if (this.Value != null)
            {
                if (this.Value.Length > 128)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Value", 128);
                }
                if (this.Value.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "Value", 1);
                }
            }

        }
    }
}