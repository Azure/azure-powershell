// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.SignalR
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for SignalRReplicasOperations
    /// </summary>
    public static partial class SignalRReplicasOperationsExtensions
    {
        /// <summary>
        /// List all replicas belong to this resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Replica> List(this ISignalRReplicasOperations operations, string resourceGroupName, string resourceName)
        {
                return ((ISignalRReplicasOperations)operations).ListAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all replicas belong to this resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Replica>> ListAsync(this ISignalRReplicasOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get the replica and its properties.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        public static Replica Get(this ISignalRReplicasOperations operations, string resourceGroupName, string resourceName, string replicaName)
        {
                return ((ISignalRReplicasOperations)operations).GetAsync(resourceGroupName, resourceName, replicaName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the replica and its properties.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Replica> GetAsync(this ISignalRReplicasOperations operations, string resourceGroupName, string resourceName, string replicaName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, replicaName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update a replica.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        public static Replica CreateOrUpdate(this ISignalRReplicasOperations operations, string resourceGroupName, string resourceName, string replicaName, Replica parameters)
        {
                return ((ISignalRReplicasOperations)operations).CreateOrUpdateAsync(resourceGroupName, resourceName, replicaName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a replica.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Replica> CreateOrUpdateAsync(this ISignalRReplicasOperations operations, string resourceGroupName, string resourceName, string replicaName, Replica parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, replicaName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Operation to delete a replica.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        public static void Delete(this ISignalRReplicasOperations operations, string resourceGroupName, string resourceName, string replicaName)
        {
                ((ISignalRReplicasOperations)operations).DeleteAsync(resourceGroupName, resourceName, replicaName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to delete a replica.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this ISignalRReplicasOperations operations, string resourceGroupName, string resourceName, string replicaName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, replicaName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Operation to update an exiting replica.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        public static Replica Update(this ISignalRReplicasOperations operations, string resourceGroupName, string resourceName, string replicaName, Replica parameters)
        {
                return ((ISignalRReplicasOperations)operations).UpdateAsync(resourceGroupName, resourceName, replicaName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to update an exiting replica.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Replica> UpdateAsync(this ISignalRReplicasOperations operations, string resourceGroupName, string resourceName, string replicaName, Replica parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, resourceName, replicaName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Operation to restart a replica.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        public static SignalRReplicasRestartHeaders Restart(this ISignalRReplicasOperations operations, string resourceGroupName, string resourceName, string replicaName)
        {
                return ((ISignalRReplicasOperations)operations).RestartAsync(resourceGroupName, resourceName, replicaName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to restart a replica.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SignalRReplicasRestartHeaders> RestartAsync(this ISignalRReplicasOperations operations, string resourceGroupName, string resourceName, string replicaName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.RestartWithHttpMessagesAsync(resourceGroupName, resourceName, replicaName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Create or update a replica.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        public static Replica BeginCreateOrUpdate(this ISignalRReplicasOperations operations, string resourceGroupName, string resourceName, string replicaName, Replica parameters)
        {
                return ((ISignalRReplicasOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, resourceName, replicaName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a replica.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Replica> BeginCreateOrUpdateAsync(this ISignalRReplicasOperations operations, string resourceGroupName, string resourceName, string replicaName, Replica parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, replicaName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Operation to update an exiting replica.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        public static Replica BeginUpdate(this ISignalRReplicasOperations operations, string resourceGroupName, string resourceName, string replicaName, Replica parameters)
        {
                return ((ISignalRReplicasOperations)operations).BeginUpdateAsync(resourceGroupName, resourceName, replicaName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to update an exiting replica.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Replica> BeginUpdateAsync(this ISignalRReplicasOperations operations, string resourceGroupName, string resourceName, string replicaName, Replica parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, replicaName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Operation to restart a replica.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        public static SignalRReplicasRestartHeaders BeginRestart(this ISignalRReplicasOperations operations, string resourceGroupName, string resourceName, string replicaName)
        {
                return ((ISignalRReplicasOperations)operations).BeginRestartAsync(resourceGroupName, resourceName, replicaName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to restart a replica.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SignalRReplicasRestartHeaders> BeginRestartAsync(this ISignalRReplicasOperations operations, string resourceGroupName, string resourceName, string replicaName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginRestartWithHttpMessagesAsync(resourceGroupName, resourceName, replicaName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// List all replicas belong to this resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Replica> ListNext(this ISignalRReplicasOperations operations, string nextPageLink)
        {
                return ((ISignalRReplicasOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all replicas belong to this resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Replica>> ListNextAsync(this ISignalRReplicasOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
