// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.SignalR
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for SignalRReplicaSharedPrivateLinkResourcesOperations
    /// </summary>
    public static partial class SignalRReplicaSharedPrivateLinkResourcesOperationsExtensions
    {
        /// <summary>
        /// List shared private link resources
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SharedPrivateLinkResource> List(this ISignalRReplicaSharedPrivateLinkResourcesOperations operations, string resourceGroupName, string resourceName, string replicaName)
        {
                return ((ISignalRReplicaSharedPrivateLinkResourcesOperations)operations).ListAsync(resourceGroupName, resourceName, replicaName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List shared private link resources
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SharedPrivateLinkResource>> ListAsync(this ISignalRReplicaSharedPrivateLinkResourcesOperations operations, string resourceGroupName, string resourceName, string replicaName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, resourceName, replicaName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get the specified shared private link resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        /// <param name='sharedPrivateLinkResourceName'>
        /// The name of the shared private link resource.
        /// </param>
        public static SharedPrivateLinkResource Get(this ISignalRReplicaSharedPrivateLinkResourcesOperations operations, string resourceGroupName, string resourceName, string replicaName, string sharedPrivateLinkResourceName)
        {
                return ((ISignalRReplicaSharedPrivateLinkResourcesOperations)operations).GetAsync(resourceGroupName, resourceName, replicaName, sharedPrivateLinkResourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the specified shared private link resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        /// <param name='sharedPrivateLinkResourceName'>
        /// The name of the shared private link resource.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SharedPrivateLinkResource> GetAsync(this ISignalRReplicaSharedPrivateLinkResourcesOperations operations, string resourceGroupName, string resourceName, string replicaName, string sharedPrivateLinkResourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, replicaName, sharedPrivateLinkResourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update a shared private link resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        /// <param name='sharedPrivateLinkResourceName'>
        /// The name of the shared private link resource.
        /// </param>
        public static SharedPrivateLinkResource CreateOrUpdate(this ISignalRReplicaSharedPrivateLinkResourcesOperations operations, string resourceGroupName, string resourceName, string replicaName, string sharedPrivateLinkResourceName, SharedPrivateLinkResource parameters)
        {
                return ((ISignalRReplicaSharedPrivateLinkResourcesOperations)operations).CreateOrUpdateAsync(resourceGroupName, resourceName, replicaName, sharedPrivateLinkResourceName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a shared private link resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        /// <param name='sharedPrivateLinkResourceName'>
        /// The name of the shared private link resource.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SharedPrivateLinkResource> CreateOrUpdateAsync(this ISignalRReplicaSharedPrivateLinkResourcesOperations operations, string resourceGroupName, string resourceName, string replicaName, string sharedPrivateLinkResourceName, SharedPrivateLinkResource parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, replicaName, sharedPrivateLinkResourceName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update a shared private link resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        /// <param name='sharedPrivateLinkResourceName'>
        /// The name of the shared private link resource.
        /// </param>
        public static SharedPrivateLinkResource BeginCreateOrUpdate(this ISignalRReplicaSharedPrivateLinkResourcesOperations operations, string resourceGroupName, string resourceName, string replicaName, string sharedPrivateLinkResourceName, SharedPrivateLinkResource parameters)
        {
                return ((ISignalRReplicaSharedPrivateLinkResourcesOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, resourceName, replicaName, sharedPrivateLinkResourceName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a shared private link resource
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='replicaName'>
        /// The name of the replica.
        /// </param>
        /// <param name='sharedPrivateLinkResourceName'>
        /// The name of the shared private link resource.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SharedPrivateLinkResource> BeginCreateOrUpdateAsync(this ISignalRReplicaSharedPrivateLinkResourcesOperations operations, string resourceGroupName, string resourceName, string replicaName, string sharedPrivateLinkResourceName, SharedPrivateLinkResource parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, replicaName, sharedPrivateLinkResourceName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List shared private link resources
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SharedPrivateLinkResource> ListNext(this ISignalRReplicaSharedPrivateLinkResourcesOperations operations, string nextPageLink)
        {
                return ((ISignalRReplicaSharedPrivateLinkResourcesOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List shared private link resources
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SharedPrivateLinkResource>> ListNextAsync(this ISignalRReplicaSharedPrivateLinkResourcesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
