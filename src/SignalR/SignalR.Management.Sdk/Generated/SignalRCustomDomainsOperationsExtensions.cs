// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.SignalR
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for SignalRCustomDomainsOperations
    /// </summary>
    public static partial class SignalRCustomDomainsOperationsExtensions
    {
        /// <summary>
        /// List all custom domains.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CustomDomain> List(this ISignalRCustomDomainsOperations operations, string resourceGroupName, string resourceName)
        {
                return ((ISignalRCustomDomainsOperations)operations).ListAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all custom domains.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CustomDomain>> ListAsync(this ISignalRCustomDomainsOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a custom domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='name'>
        /// Custom domain name.
        /// </param>
        public static CustomDomain Get(this ISignalRCustomDomainsOperations operations, string resourceGroupName, string resourceName, string name)
        {
                return ((ISignalRCustomDomainsOperations)operations).GetAsync(resourceGroupName, resourceName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a custom domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='name'>
        /// Custom domain name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CustomDomain> GetAsync(this ISignalRCustomDomainsOperations operations, string resourceGroupName, string resourceName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update a custom domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='name'>
        /// Custom domain name.
        /// </param>
        public static CustomDomain CreateOrUpdate(this ISignalRCustomDomainsOperations operations, string resourceGroupName, string resourceName, string name, CustomDomain parameters)
        {
                return ((ISignalRCustomDomainsOperations)operations).CreateOrUpdateAsync(resourceGroupName, resourceName, name, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a custom domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='name'>
        /// Custom domain name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CustomDomain> CreateOrUpdateAsync(this ISignalRCustomDomainsOperations operations, string resourceGroupName, string resourceName, string name, CustomDomain parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, name, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a custom domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='name'>
        /// Custom domain name.
        /// </param>
        public static void Delete(this ISignalRCustomDomainsOperations operations, string resourceGroupName, string resourceName, string name)
        {
                ((ISignalRCustomDomainsOperations)operations).DeleteAsync(resourceGroupName, resourceName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a custom domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='name'>
        /// Custom domain name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this ISignalRCustomDomainsOperations operations, string resourceGroupName, string resourceName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Create or update a custom domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='name'>
        /// Custom domain name.
        /// </param>
        public static CustomDomain BeginCreateOrUpdate(this ISignalRCustomDomainsOperations operations, string resourceGroupName, string resourceName, string name, CustomDomain parameters)
        {
                return ((ISignalRCustomDomainsOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, resourceName, name, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a custom domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='name'>
        /// Custom domain name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CustomDomain> BeginCreateOrUpdateAsync(this ISignalRCustomDomainsOperations operations, string resourceGroupName, string resourceName, string name, CustomDomain parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, name, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a custom domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='name'>
        /// Custom domain name.
        /// </param>
        public static void BeginDelete(this ISignalRCustomDomainsOperations operations, string resourceGroupName, string resourceName, string name)
        {
                ((ISignalRCustomDomainsOperations)operations).BeginDeleteAsync(resourceGroupName, resourceName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a custom domain.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='name'>
        /// Custom domain name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this ISignalRCustomDomainsOperations operations, string resourceGroupName, string resourceName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, resourceName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// List all custom domains.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<CustomDomain> ListNext(this ISignalRCustomDomainsOperations operations, string nextPageLink)
        {
                return ((ISignalRCustomDomainsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all custom domains.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<CustomDomain>> ListNextAsync(this ISignalRCustomDomainsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
