// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using System.Linq;

    /// <summary>
    /// Profile of network configuration.
    /// </summary>
    public partial class ContainerServiceNetworkProfile
    {
        /// <summary>
        /// Initializes a new instance of the ContainerServiceNetworkProfile class.
        /// </summary>
        public ContainerServiceNetworkProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ContainerServiceNetworkProfile class.
        /// </summary>

        /// <param name="networkPlugin">Network plugin used for building the Kubernetes network.
        /// Possible values include: 'azure', 'kubenet', 'none'</param>

        /// <param name="networkPluginMode">The mode the network plugin should use.
        /// Possible values include: 'overlay'</param>

        /// <param name="networkPolicy">Network policy used for building the Kubernetes network.
        /// Possible values include: 'calico', 'azure', 'cilium'</param>

        /// <param name="networkMode">This cannot be specified if networkPlugin is anything other than &#39;azure&#39;.
        /// Possible values include: 'transparent', 'bridge'</param>

        /// <param name="networkDataplane">Network dataplane used in the Kubernetes cluster.
        /// Possible values include: 'azure', 'cilium'</param>

        /// <param name="podCidr">A CIDR notation IP range from which to assign pod IPs when kubenet is used.
        /// </param>

        /// <param name="serviceCidr">A CIDR notation IP range from which to assign service cluster IPs. It must
        /// not overlap with any Subnet IP ranges.
        /// </param>

        /// <param name="dnsServiceIP">An IP address assigned to the Kubernetes DNS service. It must be within the
        /// Kubernetes service address range specified in serviceCidr.
        /// </param>

        /// <param name="outboundType">This can only be set at cluster creation time and cannot be changed later.
        /// For more information see [egress outbound
        /// type](https://docs.microsoft.com/azure/aks/egress-outboundtype).
        /// Possible values include: 'loadBalancer', 'userDefinedRouting',
        /// 'managedNATGateway', 'userAssignedNATGateway'</param>

        /// <param name="loadBalancerSku">The default is &#39;standard&#39;. See [Azure Load Balancer
        /// SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more
        /// information about the differences between load balancer SKUs.
        /// Possible values include: 'standard', 'basic'</param>

        /// <param name="loadBalancerProfile">Profile of the cluster load balancer.
        /// </param>

        /// <param name="natGatewayProfile">Profile of the cluster NAT gateway.
        /// </param>

        /// <param name="podCidrs">One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for
        /// each IP family (IPv4/IPv6), is expected for dual-stack networking.
        /// </param>

        /// <param name="serviceCidrs">One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for
        /// each IP family (IPv4/IPv6), is expected for dual-stack networking. They
        /// must not overlap with any Subnet IP ranges.
        /// </param>

        /// <param name="ipFamilies">IP families are used to determine single-stack or dual-stack clusters. For
        /// single-stack, the expected value is IPv4. For dual-stack, the expected
        /// values are IPv4 and IPv6.
        /// </param>
        public ContainerServiceNetworkProfile(string networkPlugin = default(string), string networkPluginMode = default(string), string networkPolicy = default(string), string networkMode = default(string), string networkDataplane = default(string), string podCidr = default(string), string serviceCidr = default(string), string dnsServiceIP = default(string), string outboundType = default(string), string loadBalancerSku = default(string), ManagedClusterLoadBalancerProfile loadBalancerProfile = default(ManagedClusterLoadBalancerProfile), ManagedClusterNATGatewayProfile natGatewayProfile = default(ManagedClusterNATGatewayProfile), System.Collections.Generic.IList<string> podCidrs = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> serviceCidrs = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> ipFamilies = default(System.Collections.Generic.IList<string>))

        {
            this.NetworkPlugin = networkPlugin;
            this.NetworkPluginMode = networkPluginMode;
            this.NetworkPolicy = networkPolicy;
            this.NetworkMode = networkMode;
            this.NetworkDataplane = networkDataplane;
            this.PodCidr = podCidr;
            this.ServiceCidr = serviceCidr;
            this.DnsServiceIP = dnsServiceIP;
            this.OutboundType = outboundType;
            this.LoadBalancerSku = loadBalancerSku;
            this.LoadBalancerProfile = loadBalancerProfile;
            this.NatGatewayProfile = natGatewayProfile;
            this.PodCidrs = podCidrs;
            this.ServiceCidrs = serviceCidrs;
            this.IPFamilies = ipFamilies;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets network plugin used for building the Kubernetes network. Possible values include: &#39;azure&#39;, &#39;kubenet&#39;, &#39;none&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkPlugin")]
        public string NetworkPlugin {get; set; }

        /// <summary>
        /// Gets or sets the mode the network plugin should use. Possible values include: &#39;overlay&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkPluginMode")]
        public string NetworkPluginMode {get; set; }

        /// <summary>
        /// Gets or sets network policy used for building the Kubernetes network. Possible values include: &#39;calico&#39;, &#39;azure&#39;, &#39;cilium&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkPolicy")]
        public string NetworkPolicy {get; set; }

        /// <summary>
        /// Gets or sets this cannot be specified if networkPlugin is anything other
        /// than &#39;azure&#39;. Possible values include: &#39;transparent&#39;, &#39;bridge&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkMode")]
        public string NetworkMode {get; set; }

        /// <summary>
        /// Gets or sets network dataplane used in the Kubernetes cluster. Possible values include: &#39;azure&#39;, &#39;cilium&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkDataplane")]
        public string NetworkDataplane {get; set; }

        /// <summary>
        /// Gets or sets a CIDR notation IP range from which to assign pod IPs when
        /// kubenet is used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "podCidr")]
        public string PodCidr {get; set; }

        /// <summary>
        /// Gets or sets a CIDR notation IP range from which to assign service cluster
        /// IPs. It must not overlap with any Subnet IP ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceCidr")]
        public string ServiceCidr {get; set; }

        /// <summary>
        /// Gets or sets an IP address assigned to the Kubernetes DNS service. It must
        /// be within the Kubernetes service address range specified in serviceCidr.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dnsServiceIP")]
        public string DnsServiceIP {get; set; }

        /// <summary>
        /// Gets or sets this can only be set at cluster creation time and cannot be
        /// changed later. For more information see [egress outbound
        /// type](https://docs.microsoft.com/azure/aks/egress-outboundtype). Possible values include: &#39;loadBalancer&#39;, &#39;userDefinedRouting&#39;, &#39;managedNATGateway&#39;, &#39;userAssignedNATGateway&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "outboundType")]
        public string OutboundType {get; set; }

        /// <summary>
        /// Gets or sets the default is &#39;standard&#39;. See [Azure Load Balancer
        /// SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more
        /// information about the differences between load balancer SKUs. Possible values include: &#39;standard&#39;, &#39;basic&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "loadBalancerSku")]
        public string LoadBalancerSku {get; set; }

        /// <summary>
        /// Gets or sets profile of the cluster load balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "loadBalancerProfile")]
        public ManagedClusterLoadBalancerProfile LoadBalancerProfile {get; set; }

        /// <summary>
        /// Gets or sets profile of the cluster NAT gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "natGatewayProfile")]
        public ManagedClusterNATGatewayProfile NatGatewayProfile {get; set; }

        /// <summary>
        /// Gets or sets one IPv4 CIDR is expected for single-stack networking. Two
        /// CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack
        /// networking.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "podCidrs")]
        public System.Collections.Generic.IList<string> PodCidrs {get; set; }

        /// <summary>
        /// Gets or sets one IPv4 CIDR is expected for single-stack networking. Two
        /// CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack
        /// networking. They must not overlap with any Subnet IP ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceCidrs")]
        public System.Collections.Generic.IList<string> ServiceCidrs {get; set; }

        /// <summary>
        /// Gets or sets iP families are used to determine single-stack or dual-stack
        /// clusters. For single-stack, the expected value is IPv4. For dual-stack, the
        /// expected values are IPv4 and IPv6.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipFamilies")]
        public System.Collections.Generic.IList<string> IPFamilies {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {





            if (this.PodCidr != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.PodCidr, "^([0-9]{1,3}\\.){3}[0-9]{1,3}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "PodCidr", "^([0-9]{1,3}\\.){3}[0-9]{1,3}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$");
                }
            }
            if (this.ServiceCidr != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.ServiceCidr, "^([0-9]{1,3}\\.){3}[0-9]{1,3}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "ServiceCidr", "^([0-9]{1,3}\\.){3}[0-9]{1,3}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$");
                }
            }
            if (this.DnsServiceIP != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.DnsServiceIP, "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "DnsServiceIP", "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$");
                }
            }


            if (this.LoadBalancerProfile != null)
            {
                this.LoadBalancerProfile.Validate();
            }
            if (this.NatGatewayProfile != null)
            {
                this.NatGatewayProfile.Validate();
            }



        }
    }
}