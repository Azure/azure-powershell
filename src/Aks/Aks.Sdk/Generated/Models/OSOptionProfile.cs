// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using System.Linq;

    /// <summary>
    /// The OS option profile.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class OSOptionProfile
    {
        /// <summary>
        /// Initializes a new instance of the OSOptionProfile class.
        /// </summary>
        public OSOptionProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OSOptionProfile class.
        /// </summary>

        /// <param name="id">The ID of the OS option resource.
        /// </param>

        /// <param name="name">The name of the OS option resource.
        /// </param>

        /// <param name="type">The type of the OS option resource.
        /// </param>

        /// <param name="osOptionPropertyList">The list of OS options.
        /// </param>
        public OSOptionProfile(System.Collections.Generic.IList<OSOptionProperty> osOptionPropertyList, string id = default(string), string name = default(string), string type = default(string))

        {
            this.Id = id;
            this.Name = name;
            this.Type = type;
            this.OSOptionPropertyList = osOptionPropertyList;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the ID of the OS option resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; private set; }

        /// <summary>
        /// Gets the name of the OS option resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; private set; }

        /// <summary>
        /// Gets the type of the OS option resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets or sets the list of OS options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.osOptionPropertyList")]
        public System.Collections.Generic.IList<OSOptionProperty> OSOptionPropertyList {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.OSOptionPropertyList == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "OSOptionPropertyList");
            }



            if (this.OSOptionPropertyList != null)
            {
                foreach (var element in this.OSOptionPropertyList)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}