// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A node pool snapshot resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Snapshot : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the Snapshot class.
        /// </summary>
        public Snapshot()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Snapshot class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="creationData">CreationData to be used to specify the
        /// source agent pool resource ID to create this snapshot.</param>
        /// <param name="snapshotType">Possible values include:
        /// 'NodePool'</param>
        /// <param name="kubernetesVersion">The version of Kubernetes.</param>
        /// <param name="nodeImageVersion">The version of node image.</param>
        /// <param name="osType">Possible values include: 'Linux',
        /// 'Windows'</param>
        /// <param name="osSku">Possible values include: 'Ubuntu',
        /// 'AzureLinux', 'CBLMariner', 'Windows2019', 'Windows2022'</param>
        /// <param name="vmSize">The size of the VM.</param>
        /// <param name="enableFIPS">Whether to use a FIPS-enabled OS.</param>
        public Snapshot(string location, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), IDictionary<string, string> tags = default(IDictionary<string, string>), CreationData creationData = default(CreationData), string snapshotType = default(string), string kubernetesVersion = default(string), string nodeImageVersion = default(string), string osType = default(string), string osSku = default(string), string vmSize = default(string), bool? enableFIPS = default(bool?))
            : base(location, id, name, type, systemData, tags)
        {
            CreationData = creationData;
            SnapshotType = snapshotType;
            KubernetesVersion = kubernetesVersion;
            NodeImageVersion = nodeImageVersion;
            OsType = osType;
            OsSku = osSku;
            VmSize = vmSize;
            EnableFIPS = enableFIPS;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets creationData to be used to specify the source agent
        /// pool resource ID to create this snapshot.
        /// </summary>
        [JsonProperty(PropertyName = "properties.creationData")]
        public CreationData CreationData { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'NodePool'
        /// </summary>
        [JsonProperty(PropertyName = "properties.snapshotType")]
        public string SnapshotType { get; set; }

        /// <summary>
        /// Gets the version of Kubernetes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.kubernetesVersion")]
        public string KubernetesVersion { get; private set; }

        /// <summary>
        /// Gets the version of node image.
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeImageVersion")]
        public string NodeImageVersion { get; private set; }

        /// <summary>
        /// Gets possible values include: 'Linux', 'Windows'
        /// </summary>
        [JsonProperty(PropertyName = "properties.osType")]
        public string OsType { get; private set; }

        /// <summary>
        /// Gets possible values include: 'Ubuntu', 'AzureLinux', 'CBLMariner',
        /// 'Windows2019', 'Windows2022'
        /// </summary>
        [JsonProperty(PropertyName = "properties.osSku")]
        public string OsSku { get; private set; }

        /// <summary>
        /// Gets the size of the VM.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vmSize")]
        public string VmSize { get; private set; }

        /// <summary>
        /// Gets whether to use a FIPS-enabled OS.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableFIPS")]
        public bool? EnableFIPS { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
