// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using System.Linq;

    /// <summary>
    /// Agent Pool.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class AgentPool : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the AgentPool class.
        /// </summary>
        public AgentPool()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AgentPool class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">The name of the resource that is unique within a resource group. This name
        /// can be used to access the resource.
        /// </param>

        /// <param name="type">Resource type
        /// </param>

        /// <param name="workloadRuntime">Determines the type of workload a node can run.
        /// Possible values include: 'OCIContainer', 'WasmWasi'</param>

        /// <param name="osType">The operating system type. The default is Linux.
        /// Possible values include: 'Linux', 'Windows'</param>

        /// <param name="powerState">When an Agent Pool is first created it is initially Running. The Agent Pool
        /// can be stopped by setting this field to Stopped. A stopped Agent Pool stops
        /// all of its VMs and does not accrue billing charges. An Agent Pool can only
        /// be stopped if it is Running and provisioning state is Succeeded
        /// </param>

        /// <param name="kubeletConfig">The Kubelet configuration on the agent pool nodes.
        /// </param>

        /// <param name="creationData">CreationData to be used to specify the source Snapshot ID if the node pool
        /// will be created/upgraded using a snapshot.
        /// </param>

        /// <param name="count">Number of agents (VMs) to host docker containers. Allowed values must be in
        /// the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to
        /// 1000 (inclusive) for system pools. The default value is 1.
        /// </param>

        /// <param name="vmSize">VM size availability varies by region. If a node contains insufficient
        /// compute resources (memory, cpu, etc) pods might fail to run correctly. For
        /// more details on restricted VM sizes, see:
        /// https://docs.microsoft.com/azure/aks/quotas-skus-regions
        /// </param>

        /// <param name="osDiskSizeGb">OS Disk Size in GB to be used to specify the disk size for every machine in
        /// the master/agent pool. If you specify 0, it will apply the default osDisk
        /// size according to the vmSize specified.
        /// </param>

        /// <param name="osDiskType">The default is &#39;Ephemeral&#39; if the VM supports it and has a cache disk
        /// larger than the requested OSDiskSizeGB. Otherwise, defaults to &#39;Managed&#39;.
        /// May not be changed after creation. For more information see [Ephemeral
        /// OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
        /// Possible values include: 'Managed', 'Ephemeral'</param>

        /// <param name="kubeletDiskType">Determines the placement of emptyDir volumes, container runtime data root,
        /// and Kubelet ephemeral storage.
        /// Possible values include: 'OS', 'Temporary'</param>

        /// <param name="vnetSubnetId">If this is not specified, a VNET and subnet will be generated and used. If
        /// no podSubnetID is specified, this applies to nodes and pods, otherwise it
        /// applies to just nodes. This is of the form:
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
        /// </param>

        /// <param name="podSubnetId">If omitted, pod IPs are statically assigned on the node subnet (see
        /// vnetSubnetID for more details). This is of the form:
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
        /// </param>

        /// <param name="maxPods">The maximum number of pods that can run on a node.
        /// </param>

        /// <param name="osSku">Specifies the OS SKU used by the agent pool. The default is Ubuntu if
        /// OSType is Linux. The default is Windows2019 when Kubernetes &lt;= 1.24 or
        /// Windows2022 when Kubernetes &gt;= 1.25 if OSType is Windows.
        /// Possible values include: 'Ubuntu', 'AzureLinux', 'CBLMariner',
        /// 'Windows2019', 'Windows2022'</param>

        /// <param name="maxCount">The maximum number of nodes for auto-scaling
        /// </param>

        /// <param name="minCount">The minimum number of nodes for auto-scaling
        /// </param>

        /// <param name="enableAutoScaling">Whether to enable auto-scaler
        /// </param>

        /// <param name="scaleDownMode">This also effects the cluster autoscaler behavior. If not specified, it
        /// defaults to Delete.
        /// Possible values include: 'Delete', 'Deallocate'</param>

        /// <param name="agentPoolType">The type of Agent Pool.
        /// Possible values include: 'VirtualMachineScaleSets', 'AvailabilitySet'</param>

        /// <param name="mode">A cluster must have at least one &#39;System&#39; Agent Pool at all times. For
        /// additional information on agent pool restrictions and best practices, see:
        /// https://docs.microsoft.com/azure/aks/use-system-pools
        /// Possible values include: 'System', 'User'</param>

        /// <param name="orchestratorVersion">Both patch version (major.minor.patch) (e.g. 1.20.13) and (major.minor)
        /// (e.g. 1.20) are supported. When (major.minor) is specified, the latest
        /// supported GA patch version is chosen automatically. Updating the cluster
        /// with the same (major.minor) once it has been created (e.g. 1.14.x -) 1.14)
        /// will not trigger an upgrade, even if a newer patch version is available. As
        /// a best practice, you should upgrade all node pools in an AKS cluster to the
        /// same Kubernetes version. The node pool version must have the same major
        /// version as the control plane. The node pool minor version must be within
        /// two minor versions of the control plane version. The node pool version
        /// cannot be greater than the control plane version. For more information see
        /// [upgrading a node
        /// pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool).
        /// </param>

        /// <param name="currentOrchestratorVersion">If orchestratorVersion is a fully specified version (major.minor.patch),
        /// this field will be exactly equal to it. If orchestratorVersion is
        /// (major.minor), this field will contain the full (major.minor.patch) version
        /// being used.
        /// </param>

        /// <param name="nodeImageVersion">The version of node image
        /// </param>

        /// <param name="upgradeSettings">Settings for upgrading the agentpool
        /// </param>

        /// <param name="provisioningState">The current deployment or provisioning state.
        /// </param>

        /// <param name="availabilityZones">The list of Availability zones to use for nodes. This can only be specified
        /// if the AgentPoolType property is &#39;VirtualMachineScaleSets&#39;.
        /// </param>

        /// <param name="enableNodePublicIP">Some scenarios may require nodes in a node pool to receive their own
        /// dedicated public IP addresses. A common scenario is for gaming workloads,
        /// where a console needs to make a direct connection to a cloud virtual
        /// machine to minimize hops. For more information see [assigning a public IP
        /// per
        /// node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools).
        /// The default is false.
        /// </param>

        /// <param name="nodePublicIPPrefixId">This is of the form:
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}
        /// </param>

        /// <param name="scaleSetPriority">The Virtual Machine Scale Set priority. If not specified, the default is
        /// &#39;Regular&#39;.
        /// Possible values include: 'Spot', 'Regular'</param>

        /// <param name="scaleSetEvictionPolicy">This cannot be specified unless the scaleSetPriority is &#39;Spot&#39;. If not
        /// specified, the default is &#39;Delete&#39;.
        /// Possible values include: 'Delete', 'Deallocate'</param>

        /// <param name="spotMaxPrice">Possible values are any decimal value greater than zero or -1 which
        /// indicates the willingness to pay any on-demand price. For more details on
        /// spot pricing, see [spot VMs
        /// pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing)
        /// </param>

        /// <param name="tags">The tags to be persisted on the agent pool virtual machine scale set.
        /// </param>

        /// <param name="nodeLabels">The node labels to be persisted across all nodes in agent pool.
        /// </param>

        /// <param name="nodeTaints">The taints added to new nodes during node pool create and scale. For
        /// example, key=value:NoSchedule.
        /// </param>

        /// <param name="proximityPlacementGroupId">The ID for Proximity Placement Group.
        /// </param>

        /// <param name="linuxOSConfig">The OS configuration of Linux agent nodes.
        /// </param>

        /// <param name="enableEncryptionAtHost">This is only supported on certain VM sizes and in certain Azure regions.
        /// For more information, see:
        /// https://docs.microsoft.com/azure/aks/enable-host-encryption
        /// </param>

        /// <param name="enableUltraSsd">Whether to enable UltraSSD
        /// </param>

        /// <param name="enableFips">See [Add a FIPS-enabled node
        /// pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview)
        /// for more details.
        /// </param>

        /// <param name="gpuInstanceProfile">GPUInstanceProfile to be used to specify GPU MIG instance profile for
        /// supported GPU VM SKU.
        /// Possible values include: 'MIG1g', 'MIG2g', 'MIG3g', 'MIG4g', 'MIG7g'</param>

        /// <param name="hostGroupId">This is of the form:
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}.
        /// For more information see [Azure dedicated
        /// hosts](https://docs.microsoft.com/azure/virtual-machines/dedicated-hosts).
        /// </param>
        public AgentPool(string id = default(string), string name = default(string), string type = default(string), string workloadRuntime = default(string), string osType = default(string), PowerState powerState = default(PowerState), KubeletConfig kubeletConfig = default(KubeletConfig), CreationData creationData = default(CreationData), int? count = default(int?), string vmSize = default(string), int? osDiskSizeGb = default(int?), string osDiskType = default(string), string kubeletDiskType = default(string), string vnetSubnetId = default(string), string podSubnetId = default(string), int? maxPods = default(int?), string osSku = default(string), int? maxCount = default(int?), int? minCount = default(int?), bool? enableAutoScaling = default(bool?), string scaleDownMode = default(string), string agentPoolType = default(string), string mode = default(string), string orchestratorVersion = default(string), string currentOrchestratorVersion = default(string), string nodeImageVersion = default(string), AgentPoolUpgradeSettings upgradeSettings = default(AgentPoolUpgradeSettings), string provisioningState = default(string), System.Collections.Generic.IList<string> availabilityZones = default(System.Collections.Generic.IList<string>), bool? enableNodePublicIP = default(bool?), string nodePublicIPPrefixId = default(string), string scaleSetPriority = default(string), string scaleSetEvictionPolicy = default(string), double? spotMaxPrice = default(double?), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> nodeLabels = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IList<string> nodeTaints = default(System.Collections.Generic.IList<string>), string proximityPlacementGroupId = default(string), LinuxOSConfig linuxOSConfig = default(LinuxOSConfig), bool? enableEncryptionAtHost = default(bool?), bool? enableUltraSsd = default(bool?), bool? enableFips = default(bool?), string gpuInstanceProfile = default(string), string hostGroupId = default(string))

        : base(id, name, type)
        {
            this.WorkloadRuntime = workloadRuntime;
            this.OSType = osType;
            this.PowerState = powerState;
            this.KubeletConfig = kubeletConfig;
            this.CreationData = creationData;
            this.Count = count;
            this.VMSize = vmSize;
            this.OSDiskSizeGb = osDiskSizeGb;
            this.OSDiskType = osDiskType;
            this.KubeletDiskType = kubeletDiskType;
            this.VnetSubnetId = vnetSubnetId;
            this.PodSubnetId = podSubnetId;
            this.MaxPods = maxPods;
            this.OSSku = osSku;
            this.MaxCount = maxCount;
            this.MinCount = minCount;
            this.EnableAutoScaling = enableAutoScaling;
            this.ScaleDownMode = scaleDownMode;
            this.AgentPoolType = agentPoolType;
            this.Mode = mode;
            this.OrchestratorVersion = orchestratorVersion;
            this.CurrentOrchestratorVersion = currentOrchestratorVersion;
            this.NodeImageVersion = nodeImageVersion;
            this.UpgradeSettings = upgradeSettings;
            this.ProvisioningState = provisioningState;
            this.AvailabilityZones = availabilityZones;
            this.EnableNodePublicIP = enableNodePublicIP;
            this.NodePublicIPPrefixId = nodePublicIPPrefixId;
            this.ScaleSetPriority = scaleSetPriority;
            this.ScaleSetEvictionPolicy = scaleSetEvictionPolicy;
            this.SpotMaxPrice = spotMaxPrice;
            this.Tags = tags;
            this.NodeLabels = nodeLabels;
            this.NodeTaints = nodeTaints;
            this.ProximityPlacementGroupId = proximityPlacementGroupId;
            this.LinuxOSConfig = linuxOSConfig;
            this.EnableEncryptionAtHost = enableEncryptionAtHost;
            this.EnableUltraSsd = enableUltraSsd;
            this.EnableFips = enableFips;
            this.GpuInstanceProfile = gpuInstanceProfile;
            this.HostGroupId = hostGroupId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets determines the type of workload a node can run. Possible values include: &#39;OCIContainer&#39;, &#39;WasmWasi&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.workloadRuntime")]
        public string WorkloadRuntime {get; set; }

        /// <summary>
        /// Gets or sets the operating system type. The default is Linux. Possible values include: &#39;Linux&#39;, &#39;Windows&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.osType")]
        public string OSType {get; set; }

        /// <summary>
        /// Gets or sets when an Agent Pool is first created it is initially Running.
        /// The Agent Pool can be stopped by setting this field to Stopped. A stopped
        /// Agent Pool stops all of its VMs and does not accrue billing charges. An
        /// Agent Pool can only be stopped if it is Running and provisioning state is
        /// Succeeded
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.powerState")]
        public PowerState PowerState {get; set; }

        /// <summary>
        /// Gets or sets the Kubelet configuration on the agent pool nodes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.kubeletConfig")]
        public KubeletConfig KubeletConfig {get; set; }

        /// <summary>
        /// Gets or sets creationData to be used to specify the source Snapshot ID if
        /// the node pool will be created/upgraded using a snapshot.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.creationData")]
        public CreationData CreationData {get; set; }

        /// <summary>
        /// Gets or sets number of agents (VMs) to host docker containers. Allowed
        /// values must be in the range of 0 to 1000 (inclusive) for user pools and in
        /// the range of 1 to 1000 (inclusive) for system pools. The default value is
        /// 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.count")]
        public int? Count {get; set; }

        /// <summary>
        /// Gets or sets vM size availability varies by region. If a node contains
        /// insufficient compute resources (memory, cpu, etc) pods might fail to run
        /// correctly. For more details on restricted VM sizes, see:
        /// https://docs.microsoft.com/azure/aks/quotas-skus-regions
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.vmSize")]
        public string VMSize {get; set; }

        /// <summary>
        /// Gets or sets oS Disk Size in GB to be used to specify the disk size for
        /// every machine in the master/agent pool. If you specify 0, it will apply the
        /// default osDisk size according to the vmSize specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.osDiskSizeGB")]
        public int? OSDiskSizeGb {get; set; }

        /// <summary>
        /// Gets or sets the default is &#39;Ephemeral&#39; if the VM supports it and has a
        /// cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to
        /// &#39;Managed&#39;. May not be changed after creation. For more information see
        /// [Ephemeral
        /// OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os). Possible values include: &#39;Managed&#39;, &#39;Ephemeral&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.osDiskType")]
        public string OSDiskType {get; set; }

        /// <summary>
        /// Gets or sets determines the placement of emptyDir volumes, container
        /// runtime data root, and Kubelet ephemeral storage. Possible values include: &#39;OS&#39;, &#39;Temporary&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.kubeletDiskType")]
        public string KubeletDiskType {get; set; }

        /// <summary>
        /// Gets or sets if this is not specified, a VNET and subnet will be generated
        /// and used. If no podSubnetID is specified, this applies to nodes and pods,
        /// otherwise it applies to just nodes. This is of the form:
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.vnetSubnetID")]
        public string VnetSubnetId {get; set; }

        /// <summary>
        /// Gets or sets if omitted, pod IPs are statically assigned on the node subnet
        /// (see vnetSubnetID for more details). This is of the form:
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.podSubnetID")]
        public string PodSubnetId {get; set; }

        /// <summary>
        /// Gets or sets the maximum number of pods that can run on a node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maxPods")]
        public int? MaxPods {get; set; }

        /// <summary>
        /// Gets or sets specifies the OS SKU used by the agent pool. The default is
        /// Ubuntu if OSType is Linux. The default is Windows2019 when Kubernetes &lt;=
        /// 1.24 or Windows2022 when Kubernetes &gt;= 1.25 if OSType is Windows. Possible values include: &#39;Ubuntu&#39;, &#39;AzureLinux&#39;, &#39;CBLMariner&#39;, &#39;Windows2019&#39;, &#39;Windows2022&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.osSKU")]
        public string OSSku {get; set; }

        /// <summary>
        /// Gets or sets the maximum number of nodes for auto-scaling
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maxCount")]
        public int? MaxCount {get; set; }

        /// <summary>
        /// Gets or sets the minimum number of nodes for auto-scaling
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.minCount")]
        public int? MinCount {get; set; }

        /// <summary>
        /// Gets or sets whether to enable auto-scaler
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enableAutoScaling")]
        public bool? EnableAutoScaling {get; set; }

        /// <summary>
        /// Gets or sets this also effects the cluster autoscaler behavior. If not
        /// specified, it defaults to Delete. Possible values include: &#39;Delete&#39;, &#39;Deallocate&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.scaleDownMode")]
        public string ScaleDownMode {get; set; }

        /// <summary>
        /// Gets or sets the type of Agent Pool. Possible values include: &#39;VirtualMachineScaleSets&#39;, &#39;AvailabilitySet&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.type")]
        public string AgentPoolType {get; set; }

        /// <summary>
        /// Gets or sets a cluster must have at least one &#39;System&#39; Agent Pool at all
        /// times. For additional information on agent pool restrictions and best
        /// practices, see: https://docs.microsoft.com/azure/aks/use-system-pools Possible values include: &#39;System&#39;, &#39;User&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.mode")]
        public string Mode {get; set; }

        /// <summary>
        /// Gets or sets both patch version (major.minor.patch) (e.g. 1.20.13) and
        /// (major.minor) (e.g. 1.20) are supported. When (major.minor) is specified,
        /// the latest supported GA patch version is chosen automatically. Updating the
        /// cluster with the same (major.minor) once it has been created (e.g. 1.14.x
        /// -) 1.14) will not trigger an upgrade, even if a newer patch version is
        /// available. As a best practice, you should upgrade all node pools in an AKS
        /// cluster to the same Kubernetes version. The node pool version must have the
        /// same major version as the control plane. The node pool minor version must
        /// be within two minor versions of the control plane version. The node pool
        /// version cannot be greater than the control plane version. For more
        /// information see [upgrading a node
        /// pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.orchestratorVersion")]
        public string OrchestratorVersion {get; set; }

        /// <summary>
        /// Gets if orchestratorVersion is a fully specified version
        /// (major.minor.patch), this field will be exactly equal to it. If
        /// orchestratorVersion is (major.minor), this field will contain the full
        /// (major.minor.patch) version being used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.currentOrchestratorVersion")]
        public string CurrentOrchestratorVersion {get; private set; }

        /// <summary>
        /// Gets the version of node image
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.nodeImageVersion")]
        public string NodeImageVersion {get; private set; }

        /// <summary>
        /// Gets or sets settings for upgrading the agentpool
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.upgradeSettings")]
        public AgentPoolUpgradeSettings UpgradeSettings {get; set; }

        /// <summary>
        /// Gets the current deployment or provisioning state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the list of Availability zones to use for nodes. This can only
        /// be specified if the AgentPoolType property is &#39;VirtualMachineScaleSets&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.availabilityZones")]
        public System.Collections.Generic.IList<string> AvailabilityZones {get; set; }

        /// <summary>
        /// Gets or sets some scenarios may require nodes in a node pool to receive
        /// their own dedicated public IP addresses. A common scenario is for gaming
        /// workloads, where a console needs to make a direct connection to a cloud
        /// virtual machine to minimize hops. For more information see [assigning a
        /// public IP per
        /// node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools).
        /// The default is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enableNodePublicIP")]
        public bool? EnableNodePublicIP {get; set; }

        /// <summary>
        /// Gets or sets this is of the form:
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.nodePublicIPPrefixID")]
        public string NodePublicIPPrefixId {get; set; }

        /// <summary>
        /// Gets or sets the Virtual Machine Scale Set priority. If not specified, the
        /// default is &#39;Regular&#39;. Possible values include: &#39;Spot&#39;, &#39;Regular&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.scaleSetPriority")]
        public string ScaleSetPriority {get; set; }

        /// <summary>
        /// Gets or sets this cannot be specified unless the scaleSetPriority is
        /// &#39;Spot&#39;. If not specified, the default is &#39;Delete&#39;. Possible values include: &#39;Delete&#39;, &#39;Deallocate&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.scaleSetEvictionPolicy")]
        public string ScaleSetEvictionPolicy {get; set; }

        /// <summary>
        /// Gets or sets possible values are any decimal value greater than zero or -1
        /// which indicates the willingness to pay any on-demand price. For more
        /// details on spot pricing, see [spot VMs
        /// pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.spotMaxPrice")]
        public double? SpotMaxPrice {get; set; }

        /// <summary>
        /// Gets or sets the tags to be persisted on the agent pool virtual machine
        /// scale set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets or sets the node labels to be persisted across all nodes in agent
        /// pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.nodeLabels")]
        public System.Collections.Generic.IDictionary<string, string> NodeLabels {get; set; }

        /// <summary>
        /// Gets or sets the taints added to new nodes during node pool create and
        /// scale. For example, key=value:NoSchedule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.nodeTaints")]
        public System.Collections.Generic.IList<string> NodeTaints {get; set; }

        /// <summary>
        /// Gets or sets the ID for Proximity Placement Group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.proximityPlacementGroupID")]
        public string ProximityPlacementGroupId {get; set; }

        /// <summary>
        /// Gets or sets the OS configuration of Linux agent nodes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.linuxOSConfig")]
        public LinuxOSConfig LinuxOSConfig {get; set; }

        /// <summary>
        /// Gets or sets this is only supported on certain VM sizes and in certain
        /// Azure regions. For more information, see:
        /// https://docs.microsoft.com/azure/aks/enable-host-encryption
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enableEncryptionAtHost")]
        public bool? EnableEncryptionAtHost {get; set; }

        /// <summary>
        /// Gets or sets whether to enable UltraSSD
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enableUltraSSD")]
        public bool? EnableUltraSsd {get; set; }

        /// <summary>
        /// Gets or sets see [Add a FIPS-enabled node
        /// pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview)
        /// for more details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enableFIPS")]
        public bool? EnableFips {get; set; }

        /// <summary>
        /// Gets or sets gPUInstanceProfile to be used to specify GPU MIG instance
        /// profile for supported GPU VM SKU. Possible values include: &#39;MIG1g&#39;, &#39;MIG2g&#39;, &#39;MIG3g&#39;, &#39;MIG4g&#39;, &#39;MIG7g&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.gpuInstanceProfile")]
        public string GpuInstanceProfile {get; set; }

        /// <summary>
        /// Gets or sets this is of the form:
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}.
        /// For more information see [Azure dedicated
        /// hosts](https://docs.microsoft.com/azure/virtual-machines/dedicated-hosts).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hostGroupID")]
        public string HostGroupId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {



            if (this.KubeletConfig != null)
            {
                this.KubeletConfig.Validate();
            }


            if (this.OSDiskSizeGb != null)
            {
                if (this.OSDiskSizeGb > 2048)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "OSDiskSizeGb", 2048);
                }
                if (this.OSDiskSizeGb < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "OSDiskSizeGb", 0);
                }
            }
























        }
    }
}