// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using System.Linq;

    /// <summary>
    /// Profile of the managed outbound IP resources of the managed cluster.
    /// </summary>
    public partial class ManagedClusterManagedOutboundIPProfile
    {
        /// <summary>
        /// Initializes a new instance of the ManagedClusterManagedOutboundIPProfile class.
        /// </summary>
        public ManagedClusterManagedOutboundIPProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedClusterManagedOutboundIPProfile class.
        /// </summary>

        /// <param name="count">The desired number of outbound IPs created/managed by Azure. Allowed values
        /// must be in the range of 1 to 16 (inclusive). The default value is 1.
        /// </param>
        public ManagedClusterManagedOutboundIPProfile(int? count = default(int?))

        {
            this.Count = count;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the desired number of outbound IPs created/managed by Azure.
        /// Allowed values must be in the range of 1 to 16 (inclusive). The default
        /// value is 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count")]
        public int? Count {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Count != null)
            {
                if (this.Count > 16)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "Count", 16);
                }
                if (this.Count < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Count", 1);
                }
            }
        }
    }
}