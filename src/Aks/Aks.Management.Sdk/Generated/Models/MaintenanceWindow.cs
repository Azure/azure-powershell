// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using System.Linq;

    /// <summary>
    /// Maintenance window used to configure scheduled auto-upgrade for a Managed
    /// Cluster.
    /// </summary>
    public partial class MaintenanceWindow
    {
        /// <summary>
        /// Initializes a new instance of the MaintenanceWindow class.
        /// </summary>
        public MaintenanceWindow()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MaintenanceWindow class.
        /// </summary>

        /// <param name="schedule">Recurrence schedule for the maintenance window.
        /// </param>

        /// <param name="durationHours">Length of maintenance window range from 4 to 24 hours.
        /// </param>

        /// <param name="utcOffset">The UTC offset in format +/-HH:mm. For example, &#39;+05:30&#39; for IST and
        /// &#39;-07:00&#39; for PST. If not specified, the default is &#39;+00:00&#39;.
        /// </param>

        /// <param name="startDate">The date the maintenance window activates. If the current date is before
        /// this date, the maintenance window is inactive and will not be used for
        /// upgrades. If not specified, the maintenance window will be active right
        /// away.
        /// </param>

        /// <param name="startTime">The start time of the maintenance window. Accepted values are from &#39;00:00&#39;
        /// to &#39;23:59&#39;. &#39;utcOffset&#39; applies to this field. For example: &#39;02:00&#39; with
        /// &#39;utcOffset: +02:00&#39; means UTC time &#39;00:00&#39;.
        /// </param>

        /// <param name="notAllowedDates">Date ranges on which upgrade is not allowed. &#39;utcOffset&#39; applies to this
        /// field. For example, with &#39;utcOffset: +02:00&#39; and &#39;dateSpan&#39; being
        /// &#39;2022-12-23&#39; to &#39;2023-01-03&#39;, maintenance will be blocked from &#39;2022-12-22
        /// 22:00&#39; to &#39;2023-01-03 22:00&#39; in UTC time.
        /// </param>
        public MaintenanceWindow(Schedule schedule, int durationHours, string startTime, string utcOffset = default(string), System.DateTime? startDate = default(System.DateTime?), System.Collections.Generic.IList<DateSpan> notAllowedDates = default(System.Collections.Generic.IList<DateSpan>))

        {
            this.Schedule = schedule;
            this.DurationHours = durationHours;
            this.UtcOffset = utcOffset;
            this.StartDate = startDate;
            this.StartTime = startTime;
            this.NotAllowedDates = notAllowedDates;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets recurrence schedule for the maintenance window.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "schedule")]
        public Schedule Schedule {get; set; }

        /// <summary>
        /// Gets or sets length of maintenance window range from 4 to 24 hours.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "durationHours")]
        public int DurationHours {get; set; }

        /// <summary>
        /// Gets or sets the UTC offset in format +/-HH:mm. For example, &#39;+05:30&#39; for
        /// IST and &#39;-07:00&#39; for PST. If not specified, the default is &#39;+00:00&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "utcOffset")]
        public string UtcOffset {get; set; }

        /// <summary>
        /// Gets or sets the date the maintenance window activates. If the current date
        /// is before this date, the maintenance window is inactive and will not be
        /// used for upgrades. If not specified, the maintenance window will be active
        /// right away.
        /// </summary>
        [Newtonsoft.Json.JsonConverter(typeof(Microsoft.Rest.Serialization.DateJsonConverter))]
        [Newtonsoft.Json.JsonProperty(PropertyName = "startDate")]
        public System.DateTime? StartDate {get; set; }

        /// <summary>
        /// Gets or sets the start time of the maintenance window. Accepted values are
        /// from &#39;00:00&#39; to &#39;23:59&#39;. &#39;utcOffset&#39; applies to this field. For example:
        /// &#39;02:00&#39; with &#39;utcOffset: +02:00&#39; means UTC time &#39;00:00&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTime")]
        public string StartTime {get; set; }

        /// <summary>
        /// Gets or sets date ranges on which upgrade is not allowed. &#39;utcOffset&#39;
        /// applies to this field. For example, with &#39;utcOffset: +02:00&#39; and &#39;dateSpan&#39;
        /// being &#39;2022-12-23&#39; to &#39;2023-01-03&#39;, maintenance will be blocked from
        /// &#39;2022-12-22 22:00&#39; to &#39;2023-01-03 22:00&#39; in UTC time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "notAllowedDates")]
        public System.Collections.Generic.IList<DateSpan> NotAllowedDates {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Schedule == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Schedule");
            }
            if (this.StartTime == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "StartTime");
            }
            if (this.Schedule != null)
            {
                this.Schedule.Validate();
            }
            if (this.DurationHours > 24)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "DurationHours", 24);
            }
            if (this.DurationHours < 4)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "DurationHours", 4);
            }
            if (this.UtcOffset != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.UtcOffset, "^(-|\\+)[0-9]{2}:[0-9]{2}$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "UtcOffset", "^(-|\\+)[0-9]{2}:[0-9]{2}$");
                }
            }
            if (this.StartTime != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.StartTime, "^\\d{2}:\\d{2}$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "StartTime", "^\\d{2}:\\d{2}$");
                }
            }
            if (this.NotAllowedDates != null)
            {
                foreach (var element in this.NotAllowedDates)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}