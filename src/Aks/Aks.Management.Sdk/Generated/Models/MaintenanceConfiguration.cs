// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using System.Linq;

    /// <summary>
    /// Planned maintenance configuration, used to configure when updates can be
    /// deployed to a Managed Cluster. See [planned
    /// maintenance](https://docs.microsoft.com/azure/aks/planned-maintenance) for
    /// more information about planned maintenance.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class MaintenanceConfiguration : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the MaintenanceConfiguration class.
        /// </summary>
        public MaintenanceConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MaintenanceConfiguration class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">The name of the resource that is unique within a resource group. This name
        /// can be used to access the resource.
        /// </param>

        /// <param name="type">Resource type
        /// </param>

        /// <param name="systemData">The system metadata relating to this resource.
        /// </param>

        /// <param name="maintenanceWindow">Maintenance window for the maintenance configuration.
        /// </param>

        /// <param name="timeInWeek">Time slots during the week when planned maintenance is allowed to proceed.
        /// If two array entries specify the same day of the week, the applied
        /// configuration is the union of times in both entries.
        /// </param>

        /// <param name="notAllowedTime">Time slots on which upgrade is not allowed.
        /// </param>
        public MaintenanceConfiguration(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), MaintenanceWindow maintenanceWindow = default(MaintenanceWindow), System.Collections.Generic.IList<TimeInWeek> timeInWeek = default(System.Collections.Generic.IList<TimeInWeek>), System.Collections.Generic.IList<TimeSpan> notAllowedTime = default(System.Collections.Generic.IList<TimeSpan>))

        : base(id, name, type)
        {
            this.SystemData = systemData;
            this.MaintenanceWindow = maintenanceWindow;
            this.TimeInWeek = timeInWeek;
            this.NotAllowedTime = notAllowedTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the system metadata relating to this resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData {get; private set; }

        /// <summary>
        /// Gets or sets maintenance window for the maintenance configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maintenanceWindow")]
        public MaintenanceWindow MaintenanceWindow {get; set; }

        /// <summary>
        /// Gets or sets time slots during the week when planned maintenance is allowed
        /// to proceed. If two array entries specify the same day of the week, the
        /// applied configuration is the union of times in both entries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.timeInWeek")]
        public System.Collections.Generic.IList<TimeInWeek> TimeInWeek {get; set; }

        /// <summary>
        /// Gets or sets time slots on which upgrade is not allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.notAllowedTime")]
        public System.Collections.Generic.IList<TimeSpan> NotAllowedTime {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.MaintenanceWindow != null)
            {
                this.MaintenanceWindow.Validate();
            }


        }
    }
}