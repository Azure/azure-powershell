// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using System.Linq;

    /// <summary>
    /// Service mesh profile for a managed cluster.
    /// </summary>
    public partial class ServiceMeshProfile
    {
        /// <summary>
        /// Initializes a new instance of the ServiceMeshProfile class.
        /// </summary>
        public ServiceMeshProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceMeshProfile class.
        /// </summary>

        /// <param name="mode">Mode of the service mesh.
        /// Possible values include: &#39;Istio&#39;, &#39;Disabled&#39;</param>

        /// <param name="istio">Istio service mesh configuration.
        /// </param>
        public ServiceMeshProfile(string mode, IstioServiceMesh istio = default(IstioServiceMesh))

        {
            this.Mode = mode;
            this.Istio = istio;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets mode of the service mesh. Possible values include: &#39;Istio&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mode")]
        public string Mode {get; set; }

        /// <summary>
        /// Gets or sets istio service mesh configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "istio")]
        public IstioServiceMesh Istio {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Mode == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Mode");
            }

            if (this.Istio != null)
            {
                this.Istio.Validate();
            }
        }
    }
}