// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using System.Linq;

    /// <summary>
    /// Profile of the managed cluster load balancer.
    /// </summary>
    public partial class ManagedClusterLoadBalancerProfile
    {
        /// <summary>
        /// Initializes a new instance of the ManagedClusterLoadBalancerProfile class.
        /// </summary>
        public ManagedClusterLoadBalancerProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedClusterLoadBalancerProfile class.
        /// </summary>

        /// <param name="managedOutboundIPs">Desired managed outbound IPs for the cluster load balancer.
        /// </param>

        /// <param name="outboundIPPrefixes">Desired outbound IP Prefix resources for the cluster load balancer.
        /// </param>

        /// <param name="outboundIPs">Desired outbound IP resources for the cluster load balancer.
        /// </param>

        /// <param name="effectiveOutboundIPs">The effective outbound IP resources of the cluster load balancer.
        /// </param>

        /// <param name="allocatedOutboundPorts">The desired number of allocated SNAT ports per VM. Allowed values are in
        /// the range of 0 to 64000 (inclusive). The default value is 0 which results
        /// in Azure dynamically allocating ports.
        /// </param>

        /// <param name="idleTimeoutInMinutes">Desired outbound flow idle timeout in minutes. Allowed values are in the
        /// range of 4 to 120 (inclusive). The default value is 30 minutes.
        /// </param>

        /// <param name="enableMultipleStandardLoadBalancers">Enable multiple standard load balancers per AKS cluster or not.
        /// </param>
        public ManagedClusterLoadBalancerProfile(ManagedClusterLoadBalancerProfileManagedOutboundIPs managedOutboundIPs = default(ManagedClusterLoadBalancerProfileManagedOutboundIPs), ManagedClusterLoadBalancerProfileOutboundIPPrefixes outboundIPPrefixes = default(ManagedClusterLoadBalancerProfileOutboundIPPrefixes), ManagedClusterLoadBalancerProfileOutboundIPs outboundIPs = default(ManagedClusterLoadBalancerProfileOutboundIPs), System.Collections.Generic.IList<ResourceReference> effectiveOutboundIPs = default(System.Collections.Generic.IList<ResourceReference>), int? allocatedOutboundPorts = default(int?), int? idleTimeoutInMinutes = default(int?), bool? enableMultipleStandardLoadBalancers = default(bool?))

        {
            this.ManagedOutboundIPs = managedOutboundIPs;
            this.OutboundIPPrefixes = outboundIPPrefixes;
            this.OutboundIPs = outboundIPs;
            this.EffectiveOutboundIPs = effectiveOutboundIPs;
            this.AllocatedOutboundPorts = allocatedOutboundPorts;
            this.IdleTimeoutInMinutes = idleTimeoutInMinutes;
            this.EnableMultipleStandardLoadBalancers = enableMultipleStandardLoadBalancers;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets desired managed outbound IPs for the cluster load balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "managedOutboundIPs")]
        public ManagedClusterLoadBalancerProfileManagedOutboundIPs ManagedOutboundIPs {get; set; }

        /// <summary>
        /// Gets or sets desired outbound IP Prefix resources for the cluster load
        /// balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "outboundIPPrefixes")]
        public ManagedClusterLoadBalancerProfileOutboundIPPrefixes OutboundIPPrefixes {get; set; }

        /// <summary>
        /// Gets or sets desired outbound IP resources for the cluster load balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "outboundIPs")]
        public ManagedClusterLoadBalancerProfileOutboundIPs OutboundIPs {get; set; }

        /// <summary>
        /// Gets or sets the effective outbound IP resources of the cluster load
        /// balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "effectiveOutboundIPs")]
        public System.Collections.Generic.IList<ResourceReference> EffectiveOutboundIPs {get; set; }

        /// <summary>
        /// Gets or sets the desired number of allocated SNAT ports per VM. Allowed
        /// values are in the range of 0 to 64000 (inclusive). The default value is 0
        /// which results in Azure dynamically allocating ports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allocatedOutboundPorts")]
        public int? AllocatedOutboundPorts {get; set; }

        /// <summary>
        /// Gets or sets desired outbound flow idle timeout in minutes. Allowed values
        /// are in the range of 4 to 120 (inclusive). The default value is 30 minutes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "idleTimeoutInMinutes")]
        public int? IdleTimeoutInMinutes {get; set; }

        /// <summary>
        /// Gets or sets enable multiple standard load balancers per AKS cluster or
        /// not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableMultipleStandardLoadBalancers")]
        public bool? EnableMultipleStandardLoadBalancers {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ManagedOutboundIPs != null)
            {
                this.ManagedOutboundIPs.Validate();
            }



            if (this.AllocatedOutboundPorts != null)
            {
                if (this.AllocatedOutboundPorts > 64000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "AllocatedOutboundPorts", 64000);
                }
                if (this.AllocatedOutboundPorts < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "AllocatedOutboundPorts", 0);
                }
            }
            if (this.IdleTimeoutInMinutes != null)
            {
                if (this.IdleTimeoutInMinutes > 120)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "IdleTimeoutInMinutes", 120);
                }
                if (this.IdleTimeoutInMinutes < 4)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "IdleTimeoutInMinutes", 4);
                }
            }
        }
    }
}