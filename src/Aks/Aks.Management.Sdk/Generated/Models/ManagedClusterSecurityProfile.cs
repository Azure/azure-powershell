// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using System.Linq;

    /// <summary>
    /// Security profile for the container service cluster.
    /// </summary>
    public partial class ManagedClusterSecurityProfile
    {
        /// <summary>
        /// Initializes a new instance of the ManagedClusterSecurityProfile class.
        /// </summary>
        public ManagedClusterSecurityProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedClusterSecurityProfile class.
        /// </summary>

        /// <param name="defender">Microsoft Defender settings for the security profile.
        /// </param>

        /// <param name="azureKeyVaultKms">Azure Key Vault [key management
        /// service](https://kubernetes.io/docs/tasks/administer-cluster/kms-provider/)
        /// settings for the security profile.
        /// </param>

        /// <param name="workloadIdentity">Workload identity settings for the security profile. Workload identity
        /// enables Kubernetes applications to access Azure cloud resources securely
        /// with Azure AD. See https://aka.ms/aks/wi for more details.
        /// </param>

        /// <param name="imageCleaner">Image Cleaner settings for the security profile.
        /// </param>

        /// <param name="customCaTrustCertificates">A list of up to 10 base64 encoded CAs that will be added to the trust store
        /// on all nodes in the cluster. For more information see [Custom CA Trust
        /// Certificates](https://learn.microsoft.com/en-us/azure/aks/custom-certificate-authority).
        /// </param>
        public ManagedClusterSecurityProfile(ManagedClusterSecurityProfileDefender defender = default(ManagedClusterSecurityProfileDefender), AzureKeyVaultKms azureKeyVaultKms = default(AzureKeyVaultKms), ManagedClusterSecurityProfileWorkloadIdentity workloadIdentity = default(ManagedClusterSecurityProfileWorkloadIdentity), ManagedClusterSecurityProfileImageCleaner imageCleaner = default(ManagedClusterSecurityProfileImageCleaner), System.Collections.Generic.IList<byte[]> customCaTrustCertificates = default(System.Collections.Generic.IList<byte[]>))

        {
            this.Defender = defender;
            this.AzureKeyVaultKms = azureKeyVaultKms;
            this.WorkloadIdentity = workloadIdentity;
            this.ImageCleaner = imageCleaner;
            this.CustomCaTrustCertificates = customCaTrustCertificates;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets microsoft Defender settings for the security profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defender")]
        public ManagedClusterSecurityProfileDefender Defender {get; set; }

        /// <summary>
        /// Gets or sets azure Key Vault [key management
        /// service](https://kubernetes.io/docs/tasks/administer-cluster/kms-provider/)
        /// settings for the security profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azureKeyVaultKms")]
        public AzureKeyVaultKms AzureKeyVaultKms {get; set; }

        /// <summary>
        /// Gets or sets workload identity settings for the security profile. Workload
        /// identity enables Kubernetes applications to access Azure cloud resources
        /// securely with Azure AD. See https://aka.ms/aks/wi for more details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "workloadIdentity")]
        public ManagedClusterSecurityProfileWorkloadIdentity WorkloadIdentity {get; set; }

        /// <summary>
        /// Gets or sets image Cleaner settings for the security profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "imageCleaner")]
        public ManagedClusterSecurityProfileImageCleaner ImageCleaner {get; set; }

        /// <summary>
        /// Gets or sets a list of up to 10 base64 encoded CAs that will be added to
        /// the trust store on all nodes in the cluster. For more information see
        /// [Custom CA Trust
        /// Certificates](https://learn.microsoft.com/en-us/azure/aks/custom-certificate-authority).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customCATrustCertificates")]
        public System.Collections.Generic.IList<byte[]> CustomCaTrustCertificates {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {




            if (this.CustomCaTrustCertificates != null)
            {
                if (this.CustomCaTrustCertificates.Count > 10)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxItems, "CustomCaTrustCertificates", 10);
                }
            }
        }
    }
}