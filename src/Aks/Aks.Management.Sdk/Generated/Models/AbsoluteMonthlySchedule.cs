// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using System.Linq;

    /// <summary>
    /// For schedules like: &#39;recur every month on the 15th&#39; or &#39;recur every 3
    /// months on the 20th&#39;.
    /// </summary>
    public partial class AbsoluteMonthlySchedule
    {
        /// <summary>
        /// Initializes a new instance of the AbsoluteMonthlySchedule class.
        /// </summary>
        public AbsoluteMonthlySchedule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AbsoluteMonthlySchedule class.
        /// </summary>

        /// <param name="intervalMonths">Specifies the number of months between each set of occurrences.
        /// </param>

        /// <param name="dayOfMonth">The date of the month.
        /// </param>
        public AbsoluteMonthlySchedule(int intervalMonths, int dayOfMonth)

        {
            this.IntervalMonths = intervalMonths;
            this.DayOfMonth = dayOfMonth;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets specifies the number of months between each set of
        /// occurrences.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "intervalMonths")]
        public int IntervalMonths {get; set; }

        /// <summary>
        /// Gets or sets the date of the month.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dayOfMonth")]
        public int DayOfMonth {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.IntervalMonths > 6)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "IntervalMonths", 6);
            }
            if (this.IntervalMonths < 1)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "IntervalMonths", 1);
            }
            if (this.DayOfMonth > 31)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "DayOfMonth", 31);
            }
            if (this.DayOfMonth < 1)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "DayOfMonth", 1);
            }
        }
    }
}