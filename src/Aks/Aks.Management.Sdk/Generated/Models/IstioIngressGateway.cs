// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using System.Linq;

    /// <summary>
    /// Istio ingress gateway configuration. For now, we support up to one external
    /// ingress gateway named `aks-istio-ingressgateway-external` and one internal
    /// ingress gateway named `aks-istio-ingressgateway-internal`.
    /// </summary>
    public partial class IstioIngressGateway
    {
        /// <summary>
        /// Initializes a new instance of the IstioIngressGateway class.
        /// </summary>
        public IstioIngressGateway()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IstioIngressGateway class.
        /// </summary>

        /// <param name="mode">Mode of an ingress gateway.
        /// Possible values include: &#39;External&#39;, &#39;Internal&#39;</param>

        /// <param name="enabled">Whether to enable the ingress gateway.
        /// </param>
        public IstioIngressGateway(string mode, bool enabled)

        {
            this.Mode = mode;
            this.Enabled = enabled;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets mode of an ingress gateway. Possible values include: &#39;External&#39;, &#39;Internal&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mode")]
        public string Mode {get; set; }

        /// <summary>
        /// Gets or sets whether to enable the ingress gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enabled")]
        public bool Enabled {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Mode == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Mode");
            }

        }
    }
}