// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using System.Linq;

    /// <summary>
    /// One and only one of the schedule types should be specified. Choose either
    /// &#39;daily&#39;, &#39;weekly&#39;, &#39;absoluteMonthly&#39; or &#39;relativeMonthly&#39; for your
    /// maintenance schedule.
    /// </summary>
    public partial class Schedule
    {
        /// <summary>
        /// Initializes a new instance of the Schedule class.
        /// </summary>
        public Schedule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Schedule class.
        /// </summary>

        /// <param name="daily">For schedules like: &#39;recur every day&#39; or &#39;recur every 3 days&#39;.
        /// </param>

        /// <param name="weekly">For schedules like: &#39;recur every Monday&#39; or &#39;recur every 3 weeks on
        /// Wednesday&#39;.
        /// </param>

        /// <param name="absoluteMonthly">For schedules like: &#39;recur every month on the 15th&#39; or &#39;recur every 3
        /// months on the 20th&#39;.
        /// </param>

        /// <param name="relativeMonthly">For schedules like: &#39;recur every month on the first Monday&#39; or &#39;recur every
        /// 3 months on last Friday&#39;.
        /// </param>
        public Schedule(DailySchedule daily = default(DailySchedule), WeeklySchedule weekly = default(WeeklySchedule), AbsoluteMonthlySchedule absoluteMonthly = default(AbsoluteMonthlySchedule), RelativeMonthlySchedule relativeMonthly = default(RelativeMonthlySchedule))

        {
            this.Daily = daily;
            this.Weekly = weekly;
            this.AbsoluteMonthly = absoluteMonthly;
            this.RelativeMonthly = relativeMonthly;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets for schedules like: &#39;recur every day&#39; or &#39;recur every 3 days&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "daily")]
        public DailySchedule Daily {get; set; }

        /// <summary>
        /// Gets or sets for schedules like: &#39;recur every Monday&#39; or &#39;recur every 3
        /// weeks on Wednesday&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "weekly")]
        public WeeklySchedule Weekly {get; set; }

        /// <summary>
        /// Gets or sets for schedules like: &#39;recur every month on the 15th&#39; or &#39;recur
        /// every 3 months on the 20th&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "absoluteMonthly")]
        public AbsoluteMonthlySchedule AbsoluteMonthly {get; set; }

        /// <summary>
        /// Gets or sets for schedules like: &#39;recur every month on the first Monday&#39; or
        /// &#39;recur every 3 months on last Friday&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "relativeMonthly")]
        public RelativeMonthlySchedule RelativeMonthly {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Daily != null)
            {
                this.Daily.Validate();
            }
            if (this.Weekly != null)
            {
                this.Weekly.Validate();
            }
            if (this.AbsoluteMonthly != null)
            {
                this.AbsoluteMonthly.Validate();
            }
            if (this.RelativeMonthly != null)
            {
                this.RelativeMonthly.Validate();
            }
        }
    }
}