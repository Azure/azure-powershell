// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using System.Linq;

    /// <summary>
    /// For schedules like: &#39;recur every month on the first Monday&#39; or &#39;recur every
    /// 3 months on last Friday&#39;.
    /// </summary>
    public partial class RelativeMonthlySchedule
    {
        /// <summary>
        /// Initializes a new instance of the RelativeMonthlySchedule class.
        /// </summary>
        public RelativeMonthlySchedule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RelativeMonthlySchedule class.
        /// </summary>

        /// <param name="intervalMonths">Specifies the number of months between each set of occurrences.
        /// </param>

        /// <param name="weekIndex">The week index. Specifies on which week of the month the dayOfWeek applies.
        /// Possible values include: &#39;First&#39;, &#39;Second&#39;, &#39;Third&#39;, &#39;Fourth&#39;, &#39;Last&#39;</param>

        /// <param name="dayOfWeek">Specifies on which day of the week the maintenance occurs.
        /// Possible values include: &#39;Sunday&#39;, &#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;,
        /// &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;</param>
        public RelativeMonthlySchedule(int intervalMonths, string weekIndex, string dayOfWeek)

        {
            this.IntervalMonths = intervalMonths;
            this.WeekIndex = weekIndex;
            this.DayOfWeek = dayOfWeek;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets specifies the number of months between each set of
        /// occurrences.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "intervalMonths")]
        public int IntervalMonths {get; set; }

        /// <summary>
        /// Gets or sets the week index. Specifies on which week of the month the
        /// dayOfWeek applies. Possible values include: &#39;First&#39;, &#39;Second&#39;, &#39;Third&#39;, &#39;Fourth&#39;, &#39;Last&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "weekIndex")]
        public string WeekIndex {get; set; }

        /// <summary>
        /// Gets or sets specifies on which day of the week the maintenance occurs. Possible values include: &#39;Sunday&#39;, &#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dayOfWeek")]
        public string DayOfWeek {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.WeekIndex == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "WeekIndex");
            }
            if (this.DayOfWeek == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DayOfWeek");
            }
            if (this.IntervalMonths > 6)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "IntervalMonths", 6);
            }
            if (this.IntervalMonths < 1)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "IntervalMonths", 1);
            }


        }
    }
}