// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of the managed cluster.
    /// </summary>
    public partial class ManagedClusterProperties
    {
        /// <summary>
        /// Initializes a new instance of the ManagedClusterProperties class.
        /// </summary>
        public ManagedClusterProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedClusterProperties class.
        /// </summary>

        /// <param name="provisioningState">The current provisioning state.
        /// </param>

        /// <param name="powerState">The Power State of the cluster.
        /// </param>

        /// <param name="maxAgentPools">The max number of agent pools for the managed cluster.
        /// </param>

        /// <param name="kubernetesVersion">The version of Kubernetes specified by the user. Both patch version
        /// (major.minor.patch) (e.g. 1.20.13) and (major.minor) (e.g. 1.20) are
        /// supported. When (major.minor) is specified, the latest supported GA patch
        /// version is chosen automatically. Updating the cluster with the same
        /// (major.minor) once it has been created (e.g. 1.14.x -) 1.14) will not
        /// trigger an upgrade, even if a newer patch version is available. When you
        /// upgrade a supported AKS cluster, Kubernetes minor versions cannot be
        /// skipped. All upgrades must be performed sequentially by major version
        /// number. For example, upgrades between 1.14.x -) 1.15.x or 1.15.x -) 1.16.x
        /// are allowed, however 1.14.x -) 1.16.x is not allowed. See [upgrading an AKS
        /// cluster](https://docs.microsoft.com/azure/aks/upgrade-cluster) for more
        /// details.
        /// </param>

        /// <param name="currentKubernetesVersion">The version of Kubernetes the Managed Cluster is running. If
        /// kubernetesVersion was a fully specified version (major.minor.patch), this
        /// field will be exactly equal to it. If kubernetesVersion was (major.minor),
        /// this field will contain the full (major.minor.patch) version being used.
        /// </param>

        /// <param name="dnsPrefix">The DNS prefix of the Managed Cluster. This cannot be updated once the
        /// Managed Cluster has been created.
        /// </param>

        /// <param name="fqdnSubdomain">The FQDN subdomain of the private cluster with custom private dns zone.
        /// This cannot be updated once the Managed Cluster has been created.
        /// </param>

        /// <param name="fqdn">The FQDN of the master pool.
        /// </param>

        /// <param name="privateFqdn">The FQDN of private cluster.
        /// </param>

        /// <param name="azurePortalFqdn">The special FQDN used by the Azure Portal to access the Managed Cluster.
        /// This FQDN is for use only by the Azure Portal and should not be used by
        /// other clients. The Azure Portal requires certain Cross-Origin Resource
        /// Sharing (CORS) headers to be sent in some responses, which Kubernetes
        /// APIServer doesn&#39;t handle by default. This special FQDN supports CORS,
        /// allowing the Azure Portal to function properly.
        /// </param>

        /// <param name="agentPoolProfiles">The agent pool properties.
        /// </param>

        /// <param name="linuxProfile">The profile for Linux VMs in the Managed Cluster.
        /// </param>

        /// <param name="windowsProfile">The profile for Windows VMs in the Managed Cluster.
        /// </param>

        /// <param name="servicePrincipalProfile">Information about a service principal identity for the cluster to use for
        /// manipulating Azure APIs.
        /// </param>

        /// <param name="addonProfiles">The profile of managed cluster add-on.
        /// </param>

        /// <param name="podIdentityProfile">The pod identity profile of the Managed Cluster. See [use AAD pod
        /// identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity)
        /// for more details on AAD pod identity integration.
        /// </param>

        /// <param name="oidcIssuerProfile">The OIDC issuer profile of the Managed Cluster.
        /// </param>

        /// <param name="nodeResourceGroup">The name of the resource group containing agent pool nodes.
        /// </param>

        /// <param name="nodeResourceGroupProfile">Profile of the node resource group configuration.
        /// </param>

        /// <param name="enableRbac">Whether to enable Kubernetes Role-Based Access Control.
        /// </param>

        /// <param name="supportPlan">The support plan for the Managed Cluster. If unspecified, the default is
        /// &#39;KubernetesOfficial&#39;.
        /// Possible values include: &#39;KubernetesOfficial&#39;, &#39;AKSLongTermSupport&#39;</param>

        /// <param name="networkProfile">The network configuration profile.
        /// </param>

        /// <param name="aadProfile">The Azure Active Directory configuration.
        /// </param>

        /// <param name="autoUpgradeProfile">The auto upgrade configuration.
        /// </param>

        /// <param name="upgradeSettings">Settings for upgrading a cluster.
        /// </param>

        /// <param name="autoScalerProfile">Parameters to be applied to the cluster-autoscaler when enabled
        /// </param>

        /// <param name="apiServerAccessProfile">The access profile for managed cluster API server.
        /// </param>

        /// <param name="diskEncryptionSetId">The Resource ID of the disk encryption set to use for enabling encryption
        /// at rest. This is of the form:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{encryptionSetName}&#39;
        /// </param>

        /// <param name="identityProfile">The user identity associated with the managed cluster. This identity will
        /// be used by the kubelet. Only one user assigned identity is allowed. The
        /// only accepted key is &#34;kubeletidentity&#34;, with value of &#34;resourceId&#34;:
        /// &#34;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&#34;.
        /// </param>

        /// <param name="privateLinkResources">Private link resources associated with the cluster.
        /// </param>

        /// <param name="disableLocalAccounts">If local accounts should be disabled on the Managed Cluster. If set to
        /// true, getting static credentials will be disabled for this cluster. This
        /// must only be used on Managed Clusters that are AAD enabled. For more
        /// details see [disable local
        /// accounts](https://docs.microsoft.com/azure/aks/managed-aad#disable-local-accounts-preview).
        /// </param>

        /// <param name="httpProxyConfig">Configurations for provisioning the cluster with HTTP proxy servers.
        /// </param>

        /// <param name="securityProfile">Security profile for the managed cluster.
        /// </param>

        /// <param name="storageProfile">Storage profile for the managed cluster.
        /// </param>

        /// <param name="ingressProfile">Ingress profile for the managed cluster.
        /// </param>

        /// <param name="publicNetworkAccess">PublicNetworkAccess of the managedCluster. Allow or deny public network
        /// access for AKS
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="workloadAutoScalerProfile">Workload Auto-scaler profile for the managed cluster.
        /// </param>

        /// <param name="azureMonitorProfile">Azure Monitor addon profiles for monitoring the managed cluster.
        /// </param>

        /// <param name="serviceMeshProfile">Service mesh profile for a managed cluster.
        /// </param>

        /// <param name="resourceUid">The resourceUID uniquely identifies ManagedClusters that reuse ARM
        /// ResourceIds (i.e: create, delete, create sequence)
        /// </param>

        /// <param name="metricsProfile">Optional cluster metrics configuration.
        /// </param>

        /// <param name="nodeProvisioningProfile">Node provisioning settings that apply to the whole cluster.
        /// </param>

        /// <param name="bootstrapProfile">Profile of the cluster bootstrap configuration.
        /// </param>

        /// <param name="aiToolchainOperatorProfile">AI toolchain operator settings that apply to the whole cluster.
        /// </param>

        /// <param name="status">Contains read-only information about the Managed Cluster.
        /// </param>
        public ManagedClusterProperties(string provisioningState = default(string), PowerState powerState = default(PowerState), int? maxAgentPools = default(int?), string kubernetesVersion = default(string), string currentKubernetesVersion = default(string), string dnsPrefix = default(string), string fqdnSubdomain = default(string), string fqdn = default(string), string privateFqdn = default(string), string azurePortalFqdn = default(string), System.Collections.Generic.IList<ManagedClusterAgentPoolProfile> agentPoolProfiles = default(System.Collections.Generic.IList<ManagedClusterAgentPoolProfile>), ContainerServiceLinuxProfile linuxProfile = default(ContainerServiceLinuxProfile), ManagedClusterWindowsProfile windowsProfile = default(ManagedClusterWindowsProfile), ManagedClusterServicePrincipalProfile servicePrincipalProfile = default(ManagedClusterServicePrincipalProfile), System.Collections.Generic.IDictionary<string, ManagedClusterAddonProfile> addonProfiles = default(System.Collections.Generic.IDictionary<string, ManagedClusterAddonProfile>), ManagedClusterPodIdentityProfile podIdentityProfile = default(ManagedClusterPodIdentityProfile), ManagedClusterOidcIssuerProfile oidcIssuerProfile = default(ManagedClusterOidcIssuerProfile), string nodeResourceGroup = default(string), ManagedClusterNodeResourceGroupProfile nodeResourceGroupProfile = default(ManagedClusterNodeResourceGroupProfile), bool? enableRbac = default(bool?), string supportPlan = default(string), ContainerServiceNetworkProfile networkProfile = default(ContainerServiceNetworkProfile), ManagedClusterAADProfile aadProfile = default(ManagedClusterAADProfile), ManagedClusterAutoUpgradeProfile autoUpgradeProfile = default(ManagedClusterAutoUpgradeProfile), ClusterUpgradeSettings upgradeSettings = default(ClusterUpgradeSettings), ManagedClusterPropertiesAutoScalerProfile autoScalerProfile = default(ManagedClusterPropertiesAutoScalerProfile), ManagedClusterAPIServerAccessProfile apiServerAccessProfile = default(ManagedClusterAPIServerAccessProfile), string diskEncryptionSetId = default(string), System.Collections.Generic.IDictionary<string, UserAssignedIdentity> identityProfile = default(System.Collections.Generic.IDictionary<string, UserAssignedIdentity>), System.Collections.Generic.IList<PrivateLinkResource> privateLinkResources = default(System.Collections.Generic.IList<PrivateLinkResource>), bool? disableLocalAccounts = default(bool?), ManagedClusterHttpProxyConfig httpProxyConfig = default(ManagedClusterHttpProxyConfig), ManagedClusterSecurityProfile securityProfile = default(ManagedClusterSecurityProfile), ManagedClusterStorageProfile storageProfile = default(ManagedClusterStorageProfile), ManagedClusterIngressProfile ingressProfile = default(ManagedClusterIngressProfile), string publicNetworkAccess = default(string), ManagedClusterWorkloadAutoScalerProfile workloadAutoScalerProfile = default(ManagedClusterWorkloadAutoScalerProfile), ManagedClusterAzureMonitorProfile azureMonitorProfile = default(ManagedClusterAzureMonitorProfile), ServiceMeshProfile serviceMeshProfile = default(ServiceMeshProfile), string resourceUid = default(string), ManagedClusterMetricsProfile metricsProfile = default(ManagedClusterMetricsProfile), ManagedClusterNodeProvisioningProfile nodeProvisioningProfile = default(ManagedClusterNodeProvisioningProfile), ManagedClusterBootstrapProfile bootstrapProfile = default(ManagedClusterBootstrapProfile), ManagedClusterAIToolchainOperatorProfile aiToolchainOperatorProfile = default(ManagedClusterAIToolchainOperatorProfile), ManagedClusterStatus status = default(ManagedClusterStatus))

        {
            this.ProvisioningState = provisioningState;
            this.PowerState = powerState;
            this.MaxAgentPools = maxAgentPools;
            this.KubernetesVersion = kubernetesVersion;
            this.CurrentKubernetesVersion = currentKubernetesVersion;
            this.DnsPrefix = dnsPrefix;
            this.FqdnSubdomain = fqdnSubdomain;
            this.Fqdn = fqdn;
            this.PrivateFqdn = privateFqdn;
            this.AzurePortalFqdn = azurePortalFqdn;
            this.AgentPoolProfiles = agentPoolProfiles;
            this.LinuxProfile = linuxProfile;
            this.WindowsProfile = windowsProfile;
            this.ServicePrincipalProfile = servicePrincipalProfile;
            this.AddonProfiles = addonProfiles;
            this.PodIdentityProfile = podIdentityProfile;
            this.OidcIssuerProfile = oidcIssuerProfile;
            this.NodeResourceGroup = nodeResourceGroup;
            this.NodeResourceGroupProfile = nodeResourceGroupProfile;
            this.EnableRbac = enableRbac;
            this.SupportPlan = supportPlan;
            this.NetworkProfile = networkProfile;
            this.AadProfile = aadProfile;
            this.AutoUpgradeProfile = autoUpgradeProfile;
            this.UpgradeSettings = upgradeSettings;
            this.AutoScalerProfile = autoScalerProfile;
            this.ApiServerAccessProfile = apiServerAccessProfile;
            this.DiskEncryptionSetId = diskEncryptionSetId;
            this.IdentityProfile = identityProfile;
            this.PrivateLinkResources = privateLinkResources;
            this.DisableLocalAccounts = disableLocalAccounts;
            this.HttpProxyConfig = httpProxyConfig;
            this.SecurityProfile = securityProfile;
            this.StorageProfile = storageProfile;
            this.IngressProfile = ingressProfile;
            this.PublicNetworkAccess = publicNetworkAccess;
            this.WorkloadAutoScalerProfile = workloadAutoScalerProfile;
            this.AzureMonitorProfile = azureMonitorProfile;
            this.ServiceMeshProfile = serviceMeshProfile;
            this.ResourceUid = resourceUid;
            this.MetricsProfile = metricsProfile;
            this.NodeProvisioningProfile = nodeProvisioningProfile;
            this.BootstrapProfile = bootstrapProfile;
            this.AiToolchainOperatorProfile = aiToolchainOperatorProfile;
            this.Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the current provisioning state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets the Power State of the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "powerState")]
        public PowerState PowerState {get; private set; }

        /// <summary>
        /// Gets the max number of agent pools for the managed cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxAgentPools")]
        public int? MaxAgentPools {get; private set; }

        /// <summary>
        /// Gets or sets the version of Kubernetes specified by the user. Both patch
        /// version (major.minor.patch) (e.g. 1.20.13) and (major.minor) (e.g. 1.20)
        /// are supported. When (major.minor) is specified, the latest supported GA
        /// patch version is chosen automatically. Updating the cluster with the same
        /// (major.minor) once it has been created (e.g. 1.14.x -) 1.14) will not
        /// trigger an upgrade, even if a newer patch version is available. When you
        /// upgrade a supported AKS cluster, Kubernetes minor versions cannot be
        /// skipped. All upgrades must be performed sequentially by major version
        /// number. For example, upgrades between 1.14.x -) 1.15.x or 1.15.x -) 1.16.x
        /// are allowed, however 1.14.x -) 1.16.x is not allowed. See [upgrading an AKS
        /// cluster](https://docs.microsoft.com/azure/aks/upgrade-cluster) for more
        /// details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "kubernetesVersion")]
        public string KubernetesVersion {get; set; }

        /// <summary>
        /// Gets the version of Kubernetes the Managed Cluster is running. If
        /// kubernetesVersion was a fully specified version (major.minor.patch), this
        /// field will be exactly equal to it. If kubernetesVersion was (major.minor),
        /// this field will contain the full (major.minor.patch) version being used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "currentKubernetesVersion")]
        public string CurrentKubernetesVersion {get; private set; }

        /// <summary>
        /// Gets or sets the DNS prefix of the Managed Cluster. This cannot be updated
        /// once the Managed Cluster has been created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dnsPrefix")]
        public string DnsPrefix {get; set; }

        /// <summary>
        /// Gets or sets the FQDN subdomain of the private cluster with custom private
        /// dns zone. This cannot be updated once the Managed Cluster has been created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fqdnSubdomain")]
        public string FqdnSubdomain {get; set; }

        /// <summary>
        /// Gets the FQDN of the master pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fqdn")]
        public string Fqdn {get; private set; }

        /// <summary>
        /// Gets the FQDN of private cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateFQDN")]
        public string PrivateFqdn {get; private set; }

        /// <summary>
        /// Gets the special FQDN used by the Azure Portal to access the Managed
        /// Cluster. This FQDN is for use only by the Azure Portal and should not be
        /// used by other clients. The Azure Portal requires certain Cross-Origin
        /// Resource Sharing (CORS) headers to be sent in some responses, which
        /// Kubernetes APIServer doesn&#39;t handle by default. This special FQDN supports
        /// CORS, allowing the Azure Portal to function properly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azurePortalFQDN")]
        public string AzurePortalFqdn {get; private set; }

        /// <summary>
        /// Gets or sets the agent pool properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentPoolProfiles")]
        public System.Collections.Generic.IList<ManagedClusterAgentPoolProfile> AgentPoolProfiles {get; set; }

        /// <summary>
        /// Gets or sets the profile for Linux VMs in the Managed Cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "linuxProfile")]
        public ContainerServiceLinuxProfile LinuxProfile {get; set; }

        /// <summary>
        /// Gets or sets the profile for Windows VMs in the Managed Cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "windowsProfile")]
        public ManagedClusterWindowsProfile WindowsProfile {get; set; }

        /// <summary>
        /// Gets or sets information about a service principal identity for the cluster
        /// to use for manipulating Azure APIs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalProfile")]
        public ManagedClusterServicePrincipalProfile ServicePrincipalProfile {get; set; }

        /// <summary>
        /// Gets or sets the profile of managed cluster add-on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "addonProfiles")]
        public System.Collections.Generic.IDictionary<string, ManagedClusterAddonProfile> AddonProfiles {get; set; }

        /// <summary>
        /// Gets or sets the pod identity profile of the Managed Cluster. See [use AAD
        /// pod
        /// identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity)
        /// for more details on AAD pod identity integration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "podIdentityProfile")]
        public ManagedClusterPodIdentityProfile PodIdentityProfile {get; set; }

        /// <summary>
        /// Gets or sets the OIDC issuer profile of the Managed Cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "oidcIssuerProfile")]
        public ManagedClusterOidcIssuerProfile OidcIssuerProfile {get; set; }

        /// <summary>
        /// Gets or sets the name of the resource group containing agent pool nodes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nodeResourceGroup")]
        public string NodeResourceGroup {get; set; }

        /// <summary>
        /// Gets or sets profile of the node resource group configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nodeResourceGroupProfile")]
        public ManagedClusterNodeResourceGroupProfile NodeResourceGroupProfile {get; set; }

        /// <summary>
        /// Gets or sets whether to enable Kubernetes Role-Based Access Control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableRBAC")]
        public bool? EnableRbac {get; set; }

        /// <summary>
        /// Gets or sets the support plan for the Managed Cluster. If unspecified, the
        /// default is &#39;KubernetesOfficial&#39;. Possible values include: &#39;KubernetesOfficial&#39;, &#39;AKSLongTermSupport&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supportPlan")]
        public string SupportPlan {get; set; }

        /// <summary>
        /// Gets or sets the network configuration profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkProfile")]
        public ContainerServiceNetworkProfile NetworkProfile {get; set; }

        /// <summary>
        /// Gets or sets the Azure Active Directory configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "aadProfile")]
        public ManagedClusterAADProfile AadProfile {get; set; }

        /// <summary>
        /// Gets or sets the auto upgrade configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoUpgradeProfile")]
        public ManagedClusterAutoUpgradeProfile AutoUpgradeProfile {get; set; }

        /// <summary>
        /// Gets or sets settings for upgrading a cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upgradeSettings")]
        public ClusterUpgradeSettings UpgradeSettings {get; set; }

        /// <summary>
        /// Gets or sets parameters to be applied to the cluster-autoscaler when
        /// enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoScalerProfile")]
        public ManagedClusterPropertiesAutoScalerProfile AutoScalerProfile {get; set; }

        /// <summary>
        /// Gets or sets the access profile for managed cluster API server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "apiServerAccessProfile")]
        public ManagedClusterAPIServerAccessProfile ApiServerAccessProfile {get; set; }

        /// <summary>
        /// Gets or sets the Resource ID of the disk encryption set to use for enabling
        /// encryption at rest. This is of the form:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{encryptionSetName}&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskEncryptionSetID")]
        public string DiskEncryptionSetId {get; set; }

        /// <summary>
        /// Gets or sets the user identity associated with the managed cluster. This
        /// identity will be used by the kubelet. Only one user assigned identity is
        /// allowed. The only accepted key is &#34;kubeletidentity&#34;, with value of
        /// &#34;resourceId&#34;:
        /// &#34;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identityProfile")]
        public System.Collections.Generic.IDictionary<string, UserAssignedIdentity> IdentityProfile {get; set; }

        /// <summary>
        /// Gets or sets private link resources associated with the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateLinkResources")]
        public System.Collections.Generic.IList<PrivateLinkResource> PrivateLinkResources {get; set; }

        /// <summary>
        /// Gets or sets if local accounts should be disabled on the Managed Cluster.
        /// If set to true, getting static credentials will be disabled for this
        /// cluster. This must only be used on Managed Clusters that are AAD enabled.
        /// For more details see [disable local
        /// accounts](https://docs.microsoft.com/azure/aks/managed-aad#disable-local-accounts-preview).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disableLocalAccounts")]
        public bool? DisableLocalAccounts {get; set; }

        /// <summary>
        /// Gets or sets configurations for provisioning the cluster with HTTP proxy
        /// servers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "httpProxyConfig")]
        public ManagedClusterHttpProxyConfig HttpProxyConfig {get; set; }

        /// <summary>
        /// Gets or sets security profile for the managed cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "securityProfile")]
        public ManagedClusterSecurityProfile SecurityProfile {get; set; }

        /// <summary>
        /// Gets or sets storage profile for the managed cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageProfile")]
        public ManagedClusterStorageProfile StorageProfile {get; set; }

        /// <summary>
        /// Gets or sets ingress profile for the managed cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ingressProfile")]
        public ManagedClusterIngressProfile IngressProfile {get; set; }

        /// <summary>
        /// Gets or sets publicNetworkAccess of the managedCluster. Allow or deny
        /// public network access for AKS Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publicNetworkAccess")]
        public string PublicNetworkAccess {get; set; }

        /// <summary>
        /// Gets or sets workload Auto-scaler profile for the managed cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "workloadAutoScalerProfile")]
        public ManagedClusterWorkloadAutoScalerProfile WorkloadAutoScalerProfile {get; set; }

        /// <summary>
        /// Gets or sets azure Monitor addon profiles for monitoring the managed
        /// cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azureMonitorProfile")]
        public ManagedClusterAzureMonitorProfile AzureMonitorProfile {get; set; }

        /// <summary>
        /// Gets or sets service mesh profile for a managed cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceMeshProfile")]
        public ServiceMeshProfile ServiceMeshProfile {get; set; }

        /// <summary>
        /// Gets the resourceUID uniquely identifies ManagedClusters that reuse ARM
        /// ResourceIds (i.e: create, delete, create sequence)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceUID")]
        public string ResourceUid {get; private set; }

        /// <summary>
        /// Gets or sets optional cluster metrics configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metricsProfile")]
        public ManagedClusterMetricsProfile MetricsProfile {get; set; }

        /// <summary>
        /// Gets or sets node provisioning settings that apply to the whole cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nodeProvisioningProfile")]
        public ManagedClusterNodeProvisioningProfile NodeProvisioningProfile {get; set; }

        /// <summary>
        /// Gets or sets profile of the cluster bootstrap configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "bootstrapProfile")]
        public ManagedClusterBootstrapProfile BootstrapProfile {get; set; }

        /// <summary>
        /// Gets or sets aI toolchain operator settings that apply to the whole
        /// cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "aiToolchainOperatorProfile")]
        public ManagedClusterAIToolchainOperatorProfile AiToolchainOperatorProfile {get; set; }

        /// <summary>
        /// Gets or sets contains read-only information about the Managed Cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public ManagedClusterStatus Status {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {









            if (this.AgentPoolProfiles != null)
            {
                foreach (var element in this.AgentPoolProfiles)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.LinuxProfile != null)
            {
                this.LinuxProfile.Validate();
            }
            if (this.WindowsProfile != null)
            {
                this.WindowsProfile.Validate();
            }
            if (this.ServicePrincipalProfile != null)
            {
                this.ServicePrincipalProfile.Validate();
            }
            if (this.AddonProfiles != null)
            {
                foreach (var valueElement in this.AddonProfiles.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }





            if (this.NetworkProfile != null)
            {
                this.NetworkProfile.Validate();
            }









            if (this.SecurityProfile != null)
            {
                this.SecurityProfile.Validate();
            }

            if (this.IngressProfile != null)
            {
                this.IngressProfile.Validate();
            }

            if (this.WorkloadAutoScalerProfile != null)
            {
                this.WorkloadAutoScalerProfile.Validate();
            }
            if (this.AzureMonitorProfile != null)
            {
                this.AzureMonitorProfile.Validate();
            }
            if (this.ServiceMeshProfile != null)
            {
                this.ServiceMeshProfile.Validate();
            }






        }
    }
}