// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using System.Linq;

    /// <summary>
    /// Information about a service principal identity for the cluster to use for
    /// manipulating Azure APIs.
    /// </summary>
    public partial class ManagedClusterServicePrincipalProfile
    {
        /// <summary>
        /// Initializes a new instance of the ManagedClusterServicePrincipalProfile class.
        /// </summary>
        public ManagedClusterServicePrincipalProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedClusterServicePrincipalProfile class.
        /// </summary>

        /// <param name="clientId">The ID for the service principal.
        /// </param>

        /// <param name="secret">The secret password associated with the service principal in plain text.
        /// </param>
        public ManagedClusterServicePrincipalProfile(string clientId, string secret = default(string))

        {
            this.ClientId = clientId;
            this.Secret = secret;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the ID for the service principal.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientId")]
        public string ClientId {get; set; }

        /// <summary>
        /// Gets or sets the secret password associated with the service principal in
        /// plain text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "secret")]
        public string Secret {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ClientId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ClientId");
            }


        }
    }
}