// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.ContainerService
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for TrustedAccessRoleBindingsOperations
    /// </summary>
    public static partial class TrustedAccessRoleBindingsOperationsExtensions
    {
        /// <summary>
        /// List trusted access role bindings.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the managed cluster resource.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TrustedAccessRoleBinding> List(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName)
        {
                return ((ITrustedAccessRoleBindingsOperations)operations).ListAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List trusted access role bindings.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the managed cluster resource.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TrustedAccessRoleBinding>> ListAsync(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a trusted access role binding.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the managed cluster resource.
        /// </param>
        /// <param name='trustedAccessRoleBindingName'>
        /// The name of trusted access role binding.
        /// </param>
        public static TrustedAccessRoleBinding Get(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName, string trustedAccessRoleBindingName)
        {
                return ((ITrustedAccessRoleBindingsOperations)operations).GetAsync(resourceGroupName, resourceName, trustedAccessRoleBindingName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a trusted access role binding.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the managed cluster resource.
        /// </param>
        /// <param name='trustedAccessRoleBindingName'>
        /// The name of trusted access role binding.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TrustedAccessRoleBinding> GetAsync(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName, string trustedAccessRoleBindingName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, trustedAccessRoleBindingName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update a trusted access role binding
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the managed cluster resource.
        /// </param>
        /// <param name='trustedAccessRoleBindingName'>
        /// The name of trusted access role binding.
        /// </param>
        public static TrustedAccessRoleBinding CreateOrUpdate(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName, string trustedAccessRoleBindingName, TrustedAccessRoleBinding trustedAccessRoleBinding)
        {
                return ((ITrustedAccessRoleBindingsOperations)operations).CreateOrUpdateAsync(resourceGroupName, resourceName, trustedAccessRoleBindingName, trustedAccessRoleBinding).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a trusted access role binding
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the managed cluster resource.
        /// </param>
        /// <param name='trustedAccessRoleBindingName'>
        /// The name of trusted access role binding.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TrustedAccessRoleBinding> CreateOrUpdateAsync(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName, string trustedAccessRoleBindingName, TrustedAccessRoleBinding trustedAccessRoleBinding, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, trustedAccessRoleBindingName, trustedAccessRoleBinding, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a trusted access role binding.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the managed cluster resource.
        /// </param>
        /// <param name='trustedAccessRoleBindingName'>
        /// The name of trusted access role binding.
        /// </param>
        public static TrustedAccessRoleBindingsDeleteHeaders Delete(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName, string trustedAccessRoleBindingName)
        {
                return ((ITrustedAccessRoleBindingsOperations)operations).DeleteAsync(resourceGroupName, resourceName, trustedAccessRoleBindingName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a trusted access role binding.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the managed cluster resource.
        /// </param>
        /// <param name='trustedAccessRoleBindingName'>
        /// The name of trusted access role binding.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TrustedAccessRoleBindingsDeleteHeaders> DeleteAsync(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName, string trustedAccessRoleBindingName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, trustedAccessRoleBindingName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Create or update a trusted access role binding
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the managed cluster resource.
        /// </param>
        /// <param name='trustedAccessRoleBindingName'>
        /// The name of trusted access role binding.
        /// </param>
        public static TrustedAccessRoleBinding BeginCreateOrUpdate(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName, string trustedAccessRoleBindingName, TrustedAccessRoleBinding trustedAccessRoleBinding)
        {
                return ((ITrustedAccessRoleBindingsOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, resourceName, trustedAccessRoleBindingName, trustedAccessRoleBinding).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a trusted access role binding
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the managed cluster resource.
        /// </param>
        /// <param name='trustedAccessRoleBindingName'>
        /// The name of trusted access role binding.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TrustedAccessRoleBinding> BeginCreateOrUpdateAsync(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName, string trustedAccessRoleBindingName, TrustedAccessRoleBinding trustedAccessRoleBinding, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, trustedAccessRoleBindingName, trustedAccessRoleBinding, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a trusted access role binding.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the managed cluster resource.
        /// </param>
        /// <param name='trustedAccessRoleBindingName'>
        /// The name of trusted access role binding.
        /// </param>
        public static TrustedAccessRoleBindingsDeleteHeaders BeginDelete(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName, string trustedAccessRoleBindingName)
        {
                return ((ITrustedAccessRoleBindingsOperations)operations).BeginDeleteAsync(resourceGroupName, resourceName, trustedAccessRoleBindingName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a trusted access role binding.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the managed cluster resource.
        /// </param>
        /// <param name='trustedAccessRoleBindingName'>
        /// The name of trusted access role binding.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TrustedAccessRoleBindingsDeleteHeaders> BeginDeleteAsync(this ITrustedAccessRoleBindingsOperations operations, string resourceGroupName, string resourceName, string trustedAccessRoleBindingName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, resourceName, trustedAccessRoleBindingName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// List trusted access role bindings.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TrustedAccessRoleBinding> ListNext(this ITrustedAccessRoleBindingsOperations operations, string nextPageLink)
        {
                return ((ITrustedAccessRoleBindingsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List trusted access role bindings.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TrustedAccessRoleBinding>> ListNextAsync(this ITrustedAccessRoleBindingsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
