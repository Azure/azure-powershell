
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for UploadLimitWeeklyRecurrence.
.Description
Create an in-memory object for UploadLimitWeeklyRecurrence.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.StorageMover.Models.Api20240701.UploadLimitWeeklyRecurrence
.Link
https://learn.microsoft.com/powershell/module/Az.StorageMover/new-AzStorageMoverUploadLimitWeeklyRecurrenceObject
#>
function New-AzStorageMoverUploadLimitWeeklyRecurrenceObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.StorageMover.Models.Api20240701.UploadLimitWeeklyRecurrence')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(Mandatory, HelpMessage="The set of days of week for the schedule recurrence. A day must not be specified more than once in a recurrence.")]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.StorageMover.Support.DayOfWeek])]
        [Microsoft.Azure.PowerShell.Cmdlets.StorageMover.Support.DayOfWeek[]]
        $Day,
        [Parameter(Mandatory, HelpMessage="The WAN-link upload bandwidth (maximum data transfer rate) in megabits per second. Value of 0 indicates no throughput is allowed and any running migration job is effectively paused for the duration of this recurrence. Only data plane operations are governed by this limit. Control plane operations ensure seamless functionality. The agent may exceed this limit with control messages, if necessary.")]
        [int]
        $LimitInMbps,
        [Parameter(Mandatory, HelpMessage="The hour element of the time. Allowed values range from 0 (start of the selected day) to 24 (end of the selected day). Hour value 24 cannot be combined with any other minute value but 0.")]
        [int]
        $EndTimeHour,
        [Parameter(HelpMessage="The minute element of the time. Allowed values are 0 and 30. If not specified, its value defaults to 0.")]
        [ArgumentCompleter({0, 30})]
        [ValidateSet(0,30)]
        [int]
        $EndTimeMinute,
        [Parameter(Mandatory, HelpMessage="The hour element of the time. Allowed values range from 0 (start of the selected day) to 24 (end of the selected day). Hour value 24 cannot be combined with any other minute value but 0.")]
        [int]
        $StartTimeHour,
        [Parameter(HelpMessage="The minute element of the time. Allowed values are 0 and 30. If not specified, its value defaults to 0.")]
        [ArgumentCompleter({0, 30})]
        [ValidateSet(0,30)]
        [int]
        $StartTimeMinute
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.StorageMover.Models.Api20240701.UploadLimitWeeklyRecurrence]::New()

        if ($PSBoundParameters.ContainsKey('Day')) {
            $Object.Day = $Day
        }
        if ($PSBoundParameters.ContainsKey('LimitInMbps')) {
            $Object.LimitInMbps = $LimitInMbps
        }
        if ($PSBoundParameters.ContainsKey('EndTimeHour')) {
            $Object.EndTimeHour = $EndTimeHour
        }
        if ($PSBoundParameters.ContainsKey('EndTimeMinute')) {
            $Object.EndTimeMinute = $EndTimeMinute
        }
        if ($PSBoundParameters.ContainsKey('StartTimeHour')) {
            $Object.StartTimeHour = $StartTimeHour
        }
        if ($PSBoundParameters.ContainsKey('StartTimeMinute')) {
            $Object.StartTimeMinute = $StartTimeMinute
        }
        return $Object
    }
}
