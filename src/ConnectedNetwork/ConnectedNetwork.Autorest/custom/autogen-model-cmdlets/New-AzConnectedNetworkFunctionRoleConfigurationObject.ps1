
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for NetworkFunctionRoleConfiguration.
.Description
Create an in-memory object for NetworkFunctionRoleConfiguration.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ConnectedNetwork.Models.NetworkFunctionRoleConfiguration
.Link
https://learn.microsoft.com/powershell/module/Az.ConnectedNetwork/new-azconnectednetworkfunctionroleconfigurationobject
#>
function New-AzConnectedNetworkFunctionRoleConfigurationObject {
    [Microsoft.Azure.PowerShell.Cmdlets.ConnectedNetwork.ModelCmdletAttribute()]
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.ConnectedNetwork.Models.NetworkFunctionRoleConfiguration')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="Path for metadata configuration.")]
        [string]
        $CustomProfileMetadataConfigurationPath,
        [Parameter(HelpMessage="Specifies in decimal numbers, the exact version of image used to create the virtual machine.")]
        [string]
        $ImageReferenceExactVersion,
        [Parameter(HelpMessage="Specifies the offer of the image used to create the virtual machine.")]
        [string]
        $ImageReferenceOffer,
        [Parameter(HelpMessage="The image publisher.")]
        [string]
        $ImageReferencePublisher,
        [Parameter(HelpMessage="The image SKU.")]
        [string]
        $ImageReferenceSku,
        [Parameter(HelpMessage="Specifies the version of the image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.")]
        [string]
        $ImageReferenceVersion,
        [Parameter(HelpMessage="The network interface configurations.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedNetwork.Models.INetworkInterface[]]
        $NetworkInterface,
        [Parameter(HelpMessage="The VHD name.")]
        [string]
        $OSDiskName,
        [Parameter(HelpMessage="The OS type.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedNetwork.PSArgumentCompleterAttribute("Unknown", "Windows", "Linux")]
        [string]
        $OSDiskOstype,
        [Parameter(HelpMessage="Specifies the size of os disk in gigabytes. This is the fully expanded disk size needed of the VHD image on the ASE. This disk size should be greater than the size of the VHD provided in vhdUri.")]
        [int]
        $OSDiskSizeGb,
        [Parameter(HelpMessage="Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in `".`" <br><br> **Disallowed values:** `"administrator`", `"admin`", `"user`", `"user1`", `"test`", `"user2`", `"test1`", `"user3`", `"admin1`", `"1`", `"123`", `"a`", `"actuser`", `"adm`", `"admin2`", `"aspnet`", `"backup`", `"console`", `"david`", `"guest`", `"john`", `"owner`", `"root`", `"server`", `"sql`", `"support`", `"support_388945a0`", `"sys`", `"test2`", `"test3`", `"user4`", `"user5`". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).")]
        [string]
        $OSProfileAdminUsername,
        [Parameter(HelpMessage="Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the virtual machine. The maximum length of the binary array is 65535 bytes. <br><br> **Note: Do not pass any secrets or passwords in customData property** <br><br> This property cannot be updated after the VM is created. <br><br> customData is passed to the VM to be saved as a file. For more information see [Custom Data on Azure VMs](https://azure.microsoft.com/en-us/blog/custom-data-and-cloud-init-on-windows-azure/) <br><br> For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).")]
        [string]
        $OSProfileCustomData,
        [Parameter(HelpMessage="Indicates if custom data is required to deploy this role.")]
        [bool]
        $OSProfileCustomDataRequired,
        [Parameter(HelpMessage="The name of the network function role.")]
        [string]
        $RoleName,
        [Parameter(HelpMessage="Role type.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedNetwork.PSArgumentCompleterAttribute("Unknown", "VirtualMachine")]
        [string]
        $RoleType,
        [Parameter(HelpMessage="The list of SSH public keys used to authenticate with linux based VMs.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedNetwork.Models.ISshPublicKey[]]
        $SshPublicKey,
        [Parameter(HelpMessage="Specifies the parameters that are used to add a data disk to a virtual machine.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedNetwork.Models.IDataDisk[]]
        $StorageProfileDataDisk,
        [Parameter(HelpMessage="The user parameters for customers. The format of user data parameters has to be matched with the provided user data template.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedNetwork.Models.IAny]
        $UserDataParameter,
        [Parameter(HelpMessage="The user data template for customers. This is a json schema template describing the format and data type of user data parameters.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedNetwork.Models.IAny]
        $UserDataTemplate,
        [Parameter(HelpMessage="Specifies the virtual hard disk's uri.")]
        [string]
        $VhdUri,
        [Parameter(HelpMessage="The size of the virtual machine.")]
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedNetwork.PSArgumentCompleterAttribute("Unknown", "Standard_D1_v2", "Standard_D2_v2", "Standard_D3_v2", "Standard_D4_v2", "Standard_D5_v2", "Standard_D11_v2", "Standard_D12_v2", "Standard_D13_v2", "Standard_DS1_v2", "Standard_DS2_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_DS5_v2", "Standard_DS11_v2", "Standard_DS12_v2", "Standard_DS13_v2", "Standard_F1", "Standard_F2", "Standard_F4", "Standard_F8", "Standard_F16", "Standard_F1s", "Standard_F2s", "Standard_F4s", "Standard_F8s", "Standard_F16s")]
        [string]
        $VirtualMachineSize
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.ConnectedNetwork.Models.NetworkFunctionRoleConfiguration]::New()

        if ($PSBoundParameters.ContainsKey('CustomProfileMetadataConfigurationPath')) {
            $Object.CustomProfileMetadataConfigurationPath = $CustomProfileMetadataConfigurationPath
        }
        if ($PSBoundParameters.ContainsKey('ImageReferenceExactVersion')) {
            $Object.ImageReferenceExactVersion = $ImageReferenceExactVersion
        }
        if ($PSBoundParameters.ContainsKey('ImageReferenceOffer')) {
            $Object.ImageReferenceOffer = $ImageReferenceOffer
        }
        if ($PSBoundParameters.ContainsKey('ImageReferencePublisher')) {
            $Object.ImageReferencePublisher = $ImageReferencePublisher
        }
        if ($PSBoundParameters.ContainsKey('ImageReferenceSku')) {
            $Object.ImageReferenceSku = $ImageReferenceSku
        }
        if ($PSBoundParameters.ContainsKey('ImageReferenceVersion')) {
            $Object.ImageReferenceVersion = $ImageReferenceVersion
        }
        if ($PSBoundParameters.ContainsKey('NetworkInterface')) {
            $Object.NetworkInterface = $NetworkInterface
        }
        if ($PSBoundParameters.ContainsKey('OSDiskName')) {
            $Object.OSDiskName = $OSDiskName
        }
        if ($PSBoundParameters.ContainsKey('OSDiskOstype')) {
            $Object.OSDiskOstype = $OSDiskOstype
        }
        if ($PSBoundParameters.ContainsKey('OSDiskSizeGb')) {
            $Object.OSDiskSizeGb = $OSDiskSizeGb
        }
        if ($PSBoundParameters.ContainsKey('OSProfileAdminUsername')) {
            $Object.OSProfileAdminUsername = $OSProfileAdminUsername
        }
        if ($PSBoundParameters.ContainsKey('OSProfileCustomData')) {
            $Object.OSProfileCustomData = $OSProfileCustomData
        }
        if ($PSBoundParameters.ContainsKey('OSProfileCustomDataRequired')) {
            $Object.OSProfileCustomDataRequired = $OSProfileCustomDataRequired
        }
        if ($PSBoundParameters.ContainsKey('RoleName')) {
            $Object.RoleName = $RoleName
        }
        if ($PSBoundParameters.ContainsKey('RoleType')) {
            $Object.RoleType = $RoleType
        }
        if ($PSBoundParameters.ContainsKey('SshPublicKey')) {
            $Object.SshPublicKey = $SshPublicKey
        }
        if ($PSBoundParameters.ContainsKey('StorageProfileDataDisk')) {
            $Object.StorageProfileDataDisk = $StorageProfileDataDisk
        }
        if ($PSBoundParameters.ContainsKey('UserDataParameter')) {
            $Object.UserDataParameter = $UserDataParameter
        }
        if ($PSBoundParameters.ContainsKey('UserDataTemplate')) {
            $Object.UserDataTemplate = $UserDataTemplate
        }
        if ($PSBoundParameters.ContainsKey('VhdUri')) {
            $Object.VhdUri = $VhdUri
        }
        if ($PSBoundParameters.ContainsKey('VirtualMachineSize')) {
            $Object.VirtualMachineSize = $VirtualMachineSize
        }
        return $Object
    }
}

