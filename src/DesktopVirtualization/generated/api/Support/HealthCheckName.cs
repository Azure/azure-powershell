// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support
{

    /// <summary>Represents the name of the health check operation performed.</summary>
    public partial struct HealthCheckName :
        System.IEquatable<HealthCheckName>
    {
        /// <summary>
        /// Verifies that the AppAttachService is healthy (there were no issues during package staging). The AppAttachService is used
        /// to enable the staging/registration (and eventual deregistration/destaging) of MSIX apps that have been set up by the tenant
        /// admin. This checks whether the component had any failures during package staging. Failures in staging will prevent some
        /// MSIX apps from working properly for the end user. If this check fails, it is non fatal and the machine still can service
        /// connections, main issue may be certain apps will not work for end-users.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.HealthCheckName AppAttachHealthCheck = @"AppAttachHealthCheck";

        /// <summary>
        /// Verifies the SessionHost is joined to a domain. If this check fails is classified as fatal as no connection can succeed
        /// if the SessionHost is not joined to the domain.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.HealthCheckName DomainJoinedCheck = @"DomainJoinedCheck";

        /// <summary>
        /// Verifies the domain the SessionHost is joined to is still reachable. If this check fails is classified as fatal as no
        /// connection can succeed if the domain the SessionHost is joined is not reachable at the time of connection.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.HealthCheckName DomainReachable = @"DomainReachable";

        /// <summary>
        /// Verifies the SessionHost is not experiencing domain trust issues that will prevent authentication on SessionHost at connection
        /// time when session is created. If this check fails is classified as fatal as no connection can succeed if we cannot reach
        /// the domain for authentication on the SessionHost.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.HealthCheckName DomainTrustCheck = @"DomainTrustCheck";

        /// <summary>
        /// Verifies the FSLogix service is up and running to make sure users' profiles are loaded in the session. If this check fails
        /// is classified as fatal as even if the connection can succeed, user experience is bad as the user profile cannot be loaded
        /// and user will get a temporary profile in the session.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.HealthCheckName FsLogixHealthCheck = @"FSLogixHealthCheck";

        /// <summary>Verifies the metadata service is accessible and return compute properties.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.HealthCheckName MetaDataServiceCheck = @"MetaDataServiceCheck";

        /// <summary>
        /// Verifies that the required Geneva agent is running. If this check fails, it is non fatal and the machine still can service
        /// connections, main issue may be that monitoring agent is missing or running (possibly) older version.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.HealthCheckName MonitoringAgentCheck = @"MonitoringAgentCheck";

        /// <summary>
        /// Verifies the value of SecurityLayer registration key. If the value is 0 (SecurityLayer.RDP) this check fails with Error
        /// code = NativeMethodErrorCode.E_FAIL and is fatal. If the value is 1 (SecurityLayer.Negotiate) this check fails with Error
        /// code = NativeMethodErrorCode.ERROR_SUCCESS and is non fatal.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.HealthCheckName SupportedEncryptionCheck = @"SupportedEncryptionCheck";

        /// <summary>
        /// Verifies that the SxS stack is up and running so connections can succeed. If this check fails is classified as fatal as
        /// no connection can succeed if the SxS stack is not ready.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.HealthCheckName SxSStackListenerCheck = @"SxSStackListenerCheck";

        /// <summary>
        /// Verifies that the required WVD service and Geneva URLs are reachable from the SessionHost. These URLs are: RdTokenUri,
        /// RdBrokerURI, RdDiagnosticsUri and storage blob URLs for agent monitoring (geneva). If this check fails, it is non fatal
        /// and the machine still can service connections, main issue may be that monitoring agent is unable to store warm path data
        /// (logs, operations ...).
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.HealthCheckName UrlsAccessibleCheck = @"UrlsAccessibleCheck";

        /// <summary>
        /// Verifies whether the WebRTCRedirector component is healthy. The WebRTCRedirector component is used to optimize video and
        /// audio performance in Microsoft Teams. This checks whether the component is still running, and whether there is a higher
        /// version available. If this check fails, it is non fatal and the machine still can service connections, main issue may
        /// be the WebRTCRedirector component has to be restarted or updated.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.HealthCheckName WebRtcRedirectorCheck = @"WebRTCRedirectorCheck";

        /// <summary>the value for an instance of the <see cref="HealthCheckName" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to HealthCheckName</summary>
        /// <param name="value">the value to convert to an instance of <see cref="HealthCheckName" />.</param>
        internal static object CreateFrom(object value)
        {
            return new HealthCheckName(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type HealthCheckName</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.HealthCheckName e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type HealthCheckName (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is HealthCheckName && Equals((HealthCheckName)obj);
        }

        /// <summary>Returns hashCode for enum HealthCheckName</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Creates an instance of the <see cref="HealthCheckName" Enum class./></summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private HealthCheckName(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Returns string representation for HealthCheckName</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to HealthCheckName</summary>
        /// <param name="value">the value to convert to an instance of <see cref="HealthCheckName" />.</param>

        public static implicit operator HealthCheckName(string value)
        {
            return new HealthCheckName(value);
        }

        /// <summary>Implicit operator to convert HealthCheckName to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="HealthCheckName" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.HealthCheckName e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum HealthCheckName</summary>
        /// <param name="e1">the value to compare against <see cref="e2" /></param>
        /// <param name="e2">the value to compare against <see cref="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.HealthCheckName e1, Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.HealthCheckName e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum HealthCheckName</summary>
        /// <param name="e1">the value to compare against <see cref="e2" /></param>
        /// <param name="e2">the value to compare against <see cref="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.HealthCheckName e1, Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.HealthCheckName e2)
        {
            return e2.Equals(e1);
        }
    }
}