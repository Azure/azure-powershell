// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support
{

    /// <summary>Status for a SessionHost.</summary>
    public partial struct Status :
        System.IEquatable<Status>
    {
        /// <summary>
        /// Session Host has passed all the health checks and is available to handle connections.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.Status Available = @"Available";

        /// <summary>The Session Host is unavailable because it is currently disconnected.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.Status Disconnected = @"Disconnected";

        /// <summary>SessionHost's domain trust relationship lost</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.Status DomainTrustRelationshipLost = @"DomainTrustRelationshipLost";

        /// <summary>FSlogix is in an unhealthy state on the session host.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.Status FsLogixNotHealthy = @"FSLogixNotHealthy";

        /// <summary>
        /// New status to inform admins that the health on their endpoint needs to be fixed. The connections might not fail, as these
        /// issues are not fatal.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.Status NeedsAssistance = @"NeedsAssistance";

        /// <summary>The Session Host is not heart beating.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.Status NoHeartbeat = @"NoHeartbeat";

        /// <summary>SessionHost is not joined to domain.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.Status NotJoinedToDomain = @"NotJoinedToDomain";

        /// <summary>
        /// Session Host is shutdown - RD Agent reported session host to be stopped or deallocated.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.Status Shutdown = @"Shutdown";

        /// <summary>SxS stack installed on the SessionHost is not ready to receive connections.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.Status SxSStackListenerNotReady = @"SxSStackListenerNotReady";

        /// <summary>
        /// Session Host is either turned off or has failed critical health checks which is causing service not to be able to route
        /// connections to this session host. Note this replaces previous 'NoHeartBeat' status.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.Status Unavailable = @"Unavailable";

        /// <summary>
        /// Session Host is unavailable because the critical component upgrade (agent, side-by-side stack, etc.) failed.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.Status UpgradeFailed = @"UpgradeFailed";

        /// <summary>
        /// Session Host is unavailable because currently an upgrade of RDAgent/side-by-side stack is in progress. Note: this state
        /// will be removed once the upgrade completes and the host is able to accept connections.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.Status Upgrading = @"Upgrading";

        /// <summary>the value for an instance of the <see cref="Status" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to Status</summary>
        /// <param name="value">the value to convert to an instance of <see cref="Status" />.</param>
        internal static object CreateFrom(object value)
        {
            return new Status(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type Status</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.Status e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type Status (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is Status && Equals((Status)obj);
        }

        /// <summary>Returns hashCode for enum Status</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Creates an instance of the <see cref="Status" Enum class./></summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private Status(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Returns string representation for Status</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to Status</summary>
        /// <param name="value">the value to convert to an instance of <see cref="Status" />.</param>

        public static implicit operator Status(string value)
        {
            return new Status(value);
        }

        /// <summary>Implicit operator to convert Status to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="Status" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.Status e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum Status</summary>
        /// <param name="e1">the value to compare against <see cref="e2" /></param>
        /// <param name="e2">the value to compare against <see cref="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.Status e1, Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.Status e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum Status</summary>
        /// <param name="e1">the value to compare against <see cref="e2" /></param>
        /// <param name="e2">the value to compare against <see cref="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.Status e1, Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.Status e2)
        {
            return e2.Equals(e1);
        }
    }
}