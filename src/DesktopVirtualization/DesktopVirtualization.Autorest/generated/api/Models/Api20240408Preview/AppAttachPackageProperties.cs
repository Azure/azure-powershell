// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Extensions;

    /// <summary>Schema for App Attach Package properties.</summary>
    public partial class AppAttachPackageProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageProperties,
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackagePropertiesInternal
    {

        /// <summary>Backing field for <see cref="CustomData" /> property.</summary>
        private string _customData;

        /// <summary>Field that can be populated with custom data and filtered on in list GET calls</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Owned)]
        public string CustomData { get => this._customData; set => this._customData = value; }

        /// <summary>Backing field for <see cref="FailHealthCheckOnStagingFailure" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.FailHealthCheckOnStagingFailure? _failHealthCheckOnStagingFailure;

        /// <summary>
        /// Parameter indicating how the health check should behave if this package fails staging
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.FailHealthCheckOnStagingFailure? FailHealthCheckOnStagingFailure { get => this._failHealthCheckOnStagingFailure; set => this._failHealthCheckOnStagingFailure = value; }

        /// <summary>Backing field for <see cref="HostPoolReference" /> property.</summary>
        private string[] _hostPoolReference;

        /// <summary>List of Hostpool resource Ids.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Owned)]
        public string[] HostPoolReference { get => this._hostPoolReference; set => this._hostPoolReference = value; }

        /// <summary>Backing field for <see cref="Image" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoProperties _image;

        /// <summary>Detailed properties for App Attach Package</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoProperties Image { get => (this._image = this._image ?? new Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.AppAttachPackageInfoProperties()); set => this._image = value; }

        /// <summary>Date certificate expires, found in the appxmanifest.xml.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Inlined)]
        public global::System.DateTime? ImageCertificateExpiry { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).CertificateExpiry; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).CertificateExpiry = value ?? default(global::System.DateTime); }

        /// <summary>Certificate name found in the appxmanifest.xml.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Inlined)]
        public string ImageCertificateName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).CertificateName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).CertificateName = value ?? null; }

        /// <summary>User friendly Name to be displayed in the portal.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Inlined)]
        public string ImageDisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).DisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).DisplayName = value ?? null; }

        /// <summary>Make this version of the package the active one across the hostpool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Inlined)]
        public bool? ImageIsActive { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).IsActive; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).IsActive = value ?? default(bool); }

        /// <summary>Is package timestamped so it can ignore the certificate expiry date</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.PackageTimestamped? ImageIsPackageTimestamped { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).IsPackageTimestamped; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).IsPackageTimestamped = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.PackageTimestamped)""); }

        /// <summary>Specifies how to register Package in feed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Inlined)]
        public bool? ImageIsRegularRegistration { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).IsRegularRegistration; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).IsRegularRegistration = value ?? default(bool); }

        /// <summary>
        /// Date the package source was last updated, for Msix packages this is found in the appxmanifest.xml.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Inlined)]
        public global::System.DateTime? ImageLastUpdated { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).LastUpdated; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).LastUpdated = value ?? default(global::System.DateTime); }

        /// <summary>Alias of App Attach Package. Assigned at import time</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Inlined)]
        public string ImagePackageAlias { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).PackageAlias; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).PackageAlias = value ?? null; }

        /// <summary>List of package applications.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IMsixPackageApplications[] ImagePackageApplication { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).PackageApplication; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).PackageApplication = value ?? null /* arrayOf */; }

        /// <summary>List of package dependencies.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IMsixPackageDependencies[] ImagePackageDependency { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).PackageDependency; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).PackageDependency = value ?? null /* arrayOf */; }

        /// <summary>
        /// Identifier not including the package version, for Msix packages it is the family name from the appxmanifest.xml.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Inlined)]
        public string ImagePackageFamilyName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).PackageFamilyName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).PackageFamilyName = value ?? null; }

        /// <summary>
        /// Identifier including the package version, for Msix packages it is the full name from the appxmanifest.xml.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Inlined)]
        public string ImagePackageFullName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).PackageFullName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).PackageFullName = value ?? null; }

        /// <summary>Package Name from appxmanifest.xml.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Inlined)]
        public string ImagePackageName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).PackageName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).PackageName = value ?? null; }

        /// <summary>Relative Path to the package inside the image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Inlined)]
        public string ImagePackageRelativePath { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).PackageRelativePath; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).PackageRelativePath = value ?? null; }

        /// <summary>VHD/CIM/APP-V image path on Network Share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Inlined)]
        public string ImagePath { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).ImagePath; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).ImagePath = value ?? null; }

        /// <summary>Package Version found in the appxmanifest.xml.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Inlined)]
        public string ImageVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).Version; set => ((Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoPropertiesInternal)Image).Version = value ?? null; }

        /// <summary>Backing field for <see cref="KeyVaultUrl" /> property.</summary>
        private string _keyVaultUrl;

        /// <summary>URL of keyvault location to store certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Owned)]
        public string KeyVaultUrl { get => this._keyVaultUrl; set => this._keyVaultUrl = value; }

        /// <summary>Internal Acessors for Image</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoProperties Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackagePropertiesInternal.Image { get => (this._image = this._image ?? new Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.AppAttachPackageInfoProperties()); set { {_image = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackagePropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Backing field for <see cref="PackageLookbackUrl" /> property.</summary>
        private string _packageLookbackUrl;

        /// <summary>
        /// Lookback url to third party control plane, is null for native app attach packages
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Owned)]
        public string PackageLookbackUrl { get => this._packageLookbackUrl; set => this._packageLookbackUrl = value; }

        /// <summary>Backing field for <see cref="PackageOwnerName" /> property.</summary>
        private string _packageOwnerName;

        /// <summary>Specific name of package owner, is "AppAttach" for native app attach packages</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Owned)]
        public string PackageOwnerName { get => this._packageOwnerName; set => this._packageOwnerName = value; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.ProvisioningState? _provisioningState;

        /// <summary>The provisioning state of the App Attach Package.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Origin(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.ProvisioningState? ProvisioningState { get => this._provisioningState; }

        /// <summary>Creates an new <see cref="AppAttachPackageProperties" /> instance.</summary>
        public AppAttachPackageProperties()
        {

        }
    }
    /// Schema for App Attach Package properties.
    public partial interface IAppAttachPackageProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.IJsonSerializable
    {
        /// <summary>Field that can be populated with custom data and filtered on in list GET calls</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Field that can be populated with custom data and filtered on in list GET calls",
        SerializedName = @"customData",
        PossibleTypes = new [] { typeof(string) })]
        string CustomData { get; set; }
        /// <summary>
        /// Parameter indicating how the health check should behave if this package fails staging
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Parameter indicating how the health check should behave if this package fails staging",
        SerializedName = @"failHealthCheckOnStagingFailure",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.FailHealthCheckOnStagingFailure) })]
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.FailHealthCheckOnStagingFailure? FailHealthCheckOnStagingFailure { get; set; }
        /// <summary>List of Hostpool resource Ids.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of Hostpool resource Ids.",
        SerializedName = @"hostPoolReferences",
        PossibleTypes = new [] { typeof(string) })]
        string[] HostPoolReference { get; set; }
        /// <summary>Date certificate expires, found in the appxmanifest.xml.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Date certificate expires, found in the appxmanifest.xml. ",
        SerializedName = @"certificateExpiry",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ImageCertificateExpiry { get; set; }
        /// <summary>Certificate name found in the appxmanifest.xml.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Certificate name found in the appxmanifest.xml. ",
        SerializedName = @"certificateName",
        PossibleTypes = new [] { typeof(string) })]
        string ImageCertificateName { get; set; }
        /// <summary>User friendly Name to be displayed in the portal.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User friendly Name to be displayed in the portal. ",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string ImageDisplayName { get; set; }
        /// <summary>Make this version of the package the active one across the hostpool.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Make this version of the package the active one across the hostpool. ",
        SerializedName = @"isActive",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ImageIsActive { get; set; }
        /// <summary>Is package timestamped so it can ignore the certificate expiry date</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Is package timestamped so it can ignore the certificate expiry date",
        SerializedName = @"isPackageTimestamped",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.PackageTimestamped) })]
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.PackageTimestamped? ImageIsPackageTimestamped { get; set; }
        /// <summary>Specifies how to register Package in feed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies how to register Package in feed.",
        SerializedName = @"isRegularRegistration",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ImageIsRegularRegistration { get; set; }
        /// <summary>
        /// Date the package source was last updated, for Msix packages this is found in the appxmanifest.xml.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Date the package source was last updated, for Msix packages this is found in the appxmanifest.xml. ",
        SerializedName = @"lastUpdated",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ImageLastUpdated { get; set; }
        /// <summary>Alias of App Attach Package. Assigned at import time</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Alias of App Attach Package. Assigned at import time",
        SerializedName = @"packageAlias",
        PossibleTypes = new [] { typeof(string) })]
        string ImagePackageAlias { get; set; }
        /// <summary>List of package applications.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of package applications. ",
        SerializedName = @"packageApplications",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IMsixPackageApplications) })]
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IMsixPackageApplications[] ImagePackageApplication { get; set; }
        /// <summary>List of package dependencies.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of package dependencies. ",
        SerializedName = @"packageDependencies",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IMsixPackageDependencies) })]
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IMsixPackageDependencies[] ImagePackageDependency { get; set; }
        /// <summary>
        /// Identifier not including the package version, for Msix packages it is the family name from the appxmanifest.xml.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Identifier not including the package version, for Msix packages it is the family name from the appxmanifest.xml. ",
        SerializedName = @"packageFamilyName",
        PossibleTypes = new [] { typeof(string) })]
        string ImagePackageFamilyName { get; set; }
        /// <summary>
        /// Identifier including the package version, for Msix packages it is the full name from the appxmanifest.xml.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Identifier including the package version, for Msix packages it is the full name from the appxmanifest.xml. ",
        SerializedName = @"packageFullName",
        PossibleTypes = new [] { typeof(string) })]
        string ImagePackageFullName { get; set; }
        /// <summary>Package Name from appxmanifest.xml.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Package Name from appxmanifest.xml. ",
        SerializedName = @"packageName",
        PossibleTypes = new [] { typeof(string) })]
        string ImagePackageName { get; set; }
        /// <summary>Relative Path to the package inside the image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Relative Path to the package inside the image. ",
        SerializedName = @"packageRelativePath",
        PossibleTypes = new [] { typeof(string) })]
        string ImagePackageRelativePath { get; set; }
        /// <summary>VHD/CIM/APP-V image path on Network Share.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"VHD/CIM/APP-V image path on Network Share.",
        SerializedName = @"imagePath",
        PossibleTypes = new [] { typeof(string) })]
        string ImagePath { get; set; }
        /// <summary>Package Version found in the appxmanifest.xml.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Package Version found in the appxmanifest.xml. ",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string ImageVersion { get; set; }
        /// <summary>URL of keyvault location to store certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"URL of keyvault location to store certificate",
        SerializedName = @"keyVaultURL",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultUrl { get; set; }
        /// <summary>
        /// Lookback url to third party control plane, is null for native app attach packages
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Lookback url to third party control plane, is null for native app attach packages",
        SerializedName = @"packageLookbackUrl",
        PossibleTypes = new [] { typeof(string) })]
        string PackageLookbackUrl { get; set; }
        /// <summary>Specific name of package owner, is "AppAttach" for native app attach packages</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specific name of package owner, is ""AppAttach"" for native app attach packages",
        SerializedName = @"packageOwnerName",
        PossibleTypes = new [] { typeof(string) })]
        string PackageOwnerName { get; set; }
        /// <summary>The provisioning state of the App Attach Package.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The provisioning state of the App Attach Package.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.ProvisioningState? ProvisioningState { get;  }

    }
    /// Schema for App Attach Package properties.
    internal partial interface IAppAttachPackagePropertiesInternal

    {
        /// <summary>Field that can be populated with custom data and filtered on in list GET calls</summary>
        string CustomData { get; set; }
        /// <summary>
        /// Parameter indicating how the health check should behave if this package fails staging
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.FailHealthCheckOnStagingFailure? FailHealthCheckOnStagingFailure { get; set; }
        /// <summary>List of Hostpool resource Ids.</summary>
        string[] HostPoolReference { get; set; }
        /// <summary>Detailed properties for App Attach Package</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IAppAttachPackageInfoProperties Image { get; set; }
        /// <summary>Date certificate expires, found in the appxmanifest.xml.</summary>
        global::System.DateTime? ImageCertificateExpiry { get; set; }
        /// <summary>Certificate name found in the appxmanifest.xml.</summary>
        string ImageCertificateName { get; set; }
        /// <summary>User friendly Name to be displayed in the portal.</summary>
        string ImageDisplayName { get; set; }
        /// <summary>Make this version of the package the active one across the hostpool.</summary>
        bool? ImageIsActive { get; set; }
        /// <summary>Is package timestamped so it can ignore the certificate expiry date</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.PackageTimestamped? ImageIsPackageTimestamped { get; set; }
        /// <summary>Specifies how to register Package in feed.</summary>
        bool? ImageIsRegularRegistration { get; set; }
        /// <summary>
        /// Date the package source was last updated, for Msix packages this is found in the appxmanifest.xml.
        /// </summary>
        global::System.DateTime? ImageLastUpdated { get; set; }
        /// <summary>Alias of App Attach Package. Assigned at import time</summary>
        string ImagePackageAlias { get; set; }
        /// <summary>List of package applications.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IMsixPackageApplications[] ImagePackageApplication { get; set; }
        /// <summary>List of package dependencies.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Models.Api20240408Preview.IMsixPackageDependencies[] ImagePackageDependency { get; set; }
        /// <summary>
        /// Identifier not including the package version, for Msix packages it is the family name from the appxmanifest.xml.
        /// </summary>
        string ImagePackageFamilyName { get; set; }
        /// <summary>
        /// Identifier including the package version, for Msix packages it is the full name from the appxmanifest.xml.
        /// </summary>
        string ImagePackageFullName { get; set; }
        /// <summary>Package Name from appxmanifest.xml.</summary>
        string ImagePackageName { get; set; }
        /// <summary>Relative Path to the package inside the image.</summary>
        string ImagePackageRelativePath { get; set; }
        /// <summary>VHD/CIM/APP-V image path on Network Share.</summary>
        string ImagePath { get; set; }
        /// <summary>Package Version found in the appxmanifest.xml.</summary>
        string ImageVersion { get; set; }
        /// <summary>URL of keyvault location to store certificate</summary>
        string KeyVaultUrl { get; set; }
        /// <summary>
        /// Lookback url to third party control plane, is null for native app attach packages
        /// </summary>
        string PackageLookbackUrl { get; set; }
        /// <summary>Specific name of package owner, is "AppAttach" for native app attach packages</summary>
        string PackageOwnerName { get; set; }
        /// <summary>The provisioning state of the App Attach Package.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Support.ProvisioningState? ProvisioningState { get; set; }

    }
}