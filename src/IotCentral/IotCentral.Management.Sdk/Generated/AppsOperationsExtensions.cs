// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.IotCentral
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for AppsOperations
    /// </summary>
    public static partial class AppsOperationsExtensions
    {
        /// <summary>
        /// Get the metadata of an IoT Central application.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT Central application.
        /// </param>
        /// <param name='resourceName'>
        /// The ARM resource name of the IoT Central application.
        /// </param>
        public static App Get(this IAppsOperations operations, string resourceGroupName, string resourceName)
        {
                return ((IAppsOperations)operations).GetAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the metadata of an IoT Central application.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT Central application.
        /// </param>
        /// <param name='resourceName'>
        /// The ARM resource name of the IoT Central application.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<App> GetAsync(this IAppsOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update the metadata of an IoT Central application. The usual
        /// pattern to modify a property is to retrieve the IoT Central application
        /// metadata and security metadata, and then combine them with the modified
        /// values in a new body to update the IoT Central application.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT Central application.
        /// </param>
        /// <param name='resourceName'>
        /// The ARM resource name of the IoT Central application.
        /// </param>
        public static App CreateOrUpdate(this IAppsOperations operations, string resourceGroupName, string resourceName, App app)
        {
                return ((IAppsOperations)operations).CreateOrUpdateAsync(resourceGroupName, resourceName, app).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update the metadata of an IoT Central application. The usual
        /// pattern to modify a property is to retrieve the IoT Central application
        /// metadata and security metadata, and then combine them with the modified
        /// values in a new body to update the IoT Central application.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT Central application.
        /// </param>
        /// <param name='resourceName'>
        /// The ARM resource name of the IoT Central application.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<App> CreateOrUpdateAsync(this IAppsOperations operations, string resourceGroupName, string resourceName, App app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, app, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update the metadata of an IoT Central application.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT Central application.
        /// </param>
        /// <param name='resourceName'>
        /// The ARM resource name of the IoT Central application.
        /// </param>
        public static App Update(this IAppsOperations operations, string resourceGroupName, string resourceName, AppPatch appPatch)
        {
                return ((IAppsOperations)operations).UpdateAsync(resourceGroupName, resourceName, appPatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update the metadata of an IoT Central application.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT Central application.
        /// </param>
        /// <param name='resourceName'>
        /// The ARM resource name of the IoT Central application.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<App> UpdateAsync(this IAppsOperations operations, string resourceGroupName, string resourceName, AppPatch appPatch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, resourceName, appPatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete an IoT Central application.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT Central application.
        /// </param>
        /// <param name='resourceName'>
        /// The ARM resource name of the IoT Central application.
        /// </param>
        public static void Delete(this IAppsOperations operations, string resourceGroupName, string resourceName)
        {
                ((IAppsOperations)operations).DeleteAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete an IoT Central application.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT Central application.
        /// </param>
        /// <param name='resourceName'>
        /// The ARM resource name of the IoT Central application.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IAppsOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Get all IoT Central Applications in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<App> ListBySubscription(this IAppsOperations operations)
        {
                return ((IAppsOperations)operations).ListBySubscriptionAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all IoT Central Applications in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<App>> ListBySubscriptionAsync(this IAppsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all the IoT Central Applications in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT Central application.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<App> ListByResourceGroup(this IAppsOperations operations, string resourceGroupName)
        {
                return ((IAppsOperations)operations).ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all the IoT Central Applications in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT Central application.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<App>> ListByResourceGroupAsync(this IAppsOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Check if an IoT Central application name is available.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static AppAvailabilityInfo CheckNameAvailability(this IAppsOperations operations, OperationInputs operationInputs)
        {
                return ((IAppsOperations)operations).CheckNameAvailabilityAsync(operationInputs).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Check if an IoT Central application name is available.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AppAvailabilityInfo> CheckNameAvailabilityAsync(this IAppsOperations operations, OperationInputs operationInputs, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(operationInputs, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Check if an IoT Central application subdomain is available.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static AppAvailabilityInfo CheckSubdomainAvailability(this IAppsOperations operations, OperationInputs operationInputs)
        {
                return ((IAppsOperations)operations).CheckSubdomainAvailabilityAsync(operationInputs).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Check if an IoT Central application subdomain is available.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AppAvailabilityInfo> CheckSubdomainAvailabilityAsync(this IAppsOperations operations, OperationInputs operationInputs, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckSubdomainAvailabilityWithHttpMessagesAsync(operationInputs, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all available application templates.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AppTemplate> ListTemplates(this IAppsOperations operations)
        {
                return ((IAppsOperations)operations).ListTemplatesAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all available application templates.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AppTemplate>> ListTemplatesAsync(this IAppsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListTemplatesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update the metadata of an IoT Central application. The usual
        /// pattern to modify a property is to retrieve the IoT Central application
        /// metadata and security metadata, and then combine them with the modified
        /// values in a new body to update the IoT Central application.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT Central application.
        /// </param>
        /// <param name='resourceName'>
        /// The ARM resource name of the IoT Central application.
        /// </param>
        public static App BeginCreateOrUpdate(this IAppsOperations operations, string resourceGroupName, string resourceName, App app)
        {
                return ((IAppsOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, resourceName, app).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update the metadata of an IoT Central application. The usual
        /// pattern to modify a property is to retrieve the IoT Central application
        /// metadata and security metadata, and then combine them with the modified
        /// values in a new body to update the IoT Central application.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT Central application.
        /// </param>
        /// <param name='resourceName'>
        /// The ARM resource name of the IoT Central application.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<App> BeginCreateOrUpdateAsync(this IAppsOperations operations, string resourceGroupName, string resourceName, App app, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, app, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update the metadata of an IoT Central application.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT Central application.
        /// </param>
        /// <param name='resourceName'>
        /// The ARM resource name of the IoT Central application.
        /// </param>
        public static App BeginUpdate(this IAppsOperations operations, string resourceGroupName, string resourceName, AppPatch appPatch)
        {
                return ((IAppsOperations)operations).BeginUpdateAsync(resourceGroupName, resourceName, appPatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update the metadata of an IoT Central application.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT Central application.
        /// </param>
        /// <param name='resourceName'>
        /// The ARM resource name of the IoT Central application.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<App> BeginUpdateAsync(this IAppsOperations operations, string resourceGroupName, string resourceName, AppPatch appPatch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, appPatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete an IoT Central application.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT Central application.
        /// </param>
        /// <param name='resourceName'>
        /// The ARM resource name of the IoT Central application.
        /// </param>
        public static void BeginDelete(this IAppsOperations operations, string resourceGroupName, string resourceName)
        {
                ((IAppsOperations)operations).BeginDeleteAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete an IoT Central application.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT Central application.
        /// </param>
        /// <param name='resourceName'>
        /// The ARM resource name of the IoT Central application.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IAppsOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Get all IoT Central Applications in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<App> ListBySubscriptionNext(this IAppsOperations operations, string nextPageLink)
        {
                return ((IAppsOperations)operations).ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all IoT Central Applications in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<App>> ListBySubscriptionNextAsync(this IAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all the IoT Central Applications in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<App> ListByResourceGroupNext(this IAppsOperations operations, string nextPageLink)
        {
                return ((IAppsOperations)operations).ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all the IoT Central Applications in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<App>> ListByResourceGroupNextAsync(this IAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all available application templates.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AppTemplate> ListTemplatesNext(this IAppsOperations operations, string nextPageLink)
        {
                return ((IAppsOperations)operations).ListTemplatesNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all available application templates.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AppTemplate>> ListTemplatesNextAsync(this IAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListTemplatesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
