# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Disable an Azure Advisor recommendation.
.Description
Disable an Azure Advisor recommendation.
.Link
https://learn.microsoft.com/powershell/module/az.advisor/Disable-AzAdvisorRecommendation
#>
function Disable-AzAdvisorRecommendation{
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IResourceRecommendationBase])]
[CmdletBinding(DefaultParameterSetName='IdParameterSet', SupportsShouldProcess, PositionalBinding=$false)]
param(
    [Parameter(ParameterSetName='IdParameterSet', Mandatory, HelpMessage='Id of the recommendation to be suppressed.')]
    [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Category('Path')]
    [System.String]
    ${ResourceId},

    [Parameter(ParameterSetName='NameParameterSet', Mandatory, HelpMessage='ResourceName of the recommendation.')]
    [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Category('Path')]
    [System.String]
    ${RecommendationName},

    [Parameter(ParameterSetName='InputObjectParameterSet', Mandatory, ValueFromPipeline, HelpMessage='The powershell object type PsAzureAdvisorResourceRecommendationBase returned by Get-AzAdvisorRecommendation call.')]
    [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.IAdvisorIdentity]
    ${InputObject},

    [Parameter(ParameterSetName='InputObjectParameterSet',  HelpMessage="Days to disable.")]
    [Parameter(ParameterSetName='IdParameterSet',  HelpMessage="Days to disable.")]
    [Parameter(ParameterSetName='NameParameterSet',  HelpMessage="Days to disable.")]
    ${Day},


    [Parameter(ParameterSetName='InputObjectParameterSet')]
    [Parameter(ParameterSetName='IdParameterSet')]
    [Parameter(ParameterSetName='NameParameterSet')]
    [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String[]]
    # The Azure subscription ID.
    ${SubscriptionId},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)
process{
    $DefaultSuppressionName = "HardcodedSuppressionName"
    if ($PSBoundParameters.ContainsKey("RecommendationName"))
    {
        $null = $PSBoundParameters.Remove("RecommendationName")
    }
    if ($PSBoundParameters.ContainsKey("ResourceId"))
    {
        $null = $PSBoundParameters.Remove("ResourceId")
    }

    if ($PSBoundParameters.ContainsKey("InputObject"))
    {
        $null = $PSBoundParameters.Remove("InputObject")
    }
    if ($PSBoundParameters.ContainsKey("Day"))
    {
        $null = $PSBoundParameters.Remove("Day")
    }

    if ($PSBoundParameters.ContainsKey("SubscriptionId"))
    {
        $null = $PSBoundParameters.Remove("SubscriptionId")
    }

    switch ($PSCmdlet.ParameterSetName) {
        'NameParameterSet' {
            $ResourceUri = "subscriptions/" + $SubscriptionId
            $Recommendation= Az.Advisor.internal\Get-AzAdvisorRecommendation -ResourceUri $ResourceUri -Id $RecommendationName @PSBoundParameters
            $ResourceId = $Recommendation.Id
            break
        }
        'InputObjectParameterSet' {
            $ResourceId = $InputObject.Id
            break
        }
    }
    if ($ResourceId.Contains("providers/Microsoft.Advisor")){
        $EndIndex = $ResourceId.IndexOf("providers/Microsoft.Advisor") - 2
        $ResourceUri= $ResourceId.Substring(1, $EndIndex)
    }
    $ResourceIdSplit = $ResourceId.Split('/')
    if ($ResourceIdSplit[$ResourceIdSplit.Length - 2].Equals("recommendations"))
    {
        $RecommendationId = $ResourceIdSplit[$ResourceIdSplit.Length - 1]
    }
    if (!$Day) {$Ttl = ""} 
    else
    {$Ttl = (New-Timespan -Days $Day).ToString("dd\:hh\:mm\:ss")}

    Az.Advisor.internal\New-AzAdvisorSuppression -Name $DefaultSuppressionName -RecommendationId $RecommendationId -ResourceUri $ResourceUri -Ttl $Ttl @PSBoundParameters

}
}