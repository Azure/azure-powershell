// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Advisor.Runtime.Extensions;

    /// <summary>The metadata entity contract.</summary>
    public partial class MetadataEntity :
        Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IMetadataEntity,
        Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IMetadataEntityInternal
    {

        /// <summary>The list of scenarios applicable to this metadata entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Origin(Microsoft.Azure.PowerShell.Cmdlets.Advisor.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Advisor.Support.Scenario[] ApplicableScenario { get => ((Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IMetadataEntityPropertiesInternal)Property).ApplicableScenario; set => ((Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IMetadataEntityPropertiesInternal)Property).ApplicableScenario = value ?? null /* arrayOf */; }

        /// <summary>The list of keys on which this entity depends on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Origin(Microsoft.Azure.PowerShell.Cmdlets.Advisor.PropertyOrigin.Inlined)]
        public string[] DependsOn { get => ((Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IMetadataEntityPropertiesInternal)Property).DependsOn; set => ((Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IMetadataEntityPropertiesInternal)Property).DependsOn = value ?? null /* arrayOf */; }

        /// <summary>The display name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Origin(Microsoft.Azure.PowerShell.Cmdlets.Advisor.PropertyOrigin.Inlined)]
        public string DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IMetadataEntityPropertiesInternal)Property).DisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IMetadataEntityPropertiesInternal)Property).DisplayName = value ?? null; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>The resource Id of the metadata entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Origin(Microsoft.Azure.PowerShell.Cmdlets.Advisor.PropertyOrigin.Owned)]
        public string Id { get => this._id; set => this._id = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IMetadataEntityProperties Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IMetadataEntityInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.MetadataEntityProperties()); set { {_property = value;} } }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>The name of the metadata entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Origin(Microsoft.Azure.PowerShell.Cmdlets.Advisor.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IMetadataEntityProperties _property;

        /// <summary>The metadata entity properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Origin(Microsoft.Azure.PowerShell.Cmdlets.Advisor.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IMetadataEntityProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.MetadataEntityProperties()); set => this._property = value; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Origin(Microsoft.Azure.PowerShell.Cmdlets.Advisor.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>The list of supported values.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Origin(Microsoft.Azure.PowerShell.Cmdlets.Advisor.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IMetadataSupportedValueDetail[] SupportedValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IMetadataEntityPropertiesInternal)Property).SupportedValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IMetadataEntityPropertiesInternal)Property).SupportedValue = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>The type of the metadata entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Origin(Microsoft.Azure.PowerShell.Cmdlets.Advisor.PropertyOrigin.Owned)]
        public string Type { get => this._type; set => this._type = value; }

        /// <summary>Creates an new <see cref="MetadataEntity" /> instance.</summary>
        public MetadataEntity()
        {

        }
    }
    /// The metadata entity contract.
    public partial interface IMetadataEntity :
        Microsoft.Azure.PowerShell.Cmdlets.Advisor.Runtime.IJsonSerializable
    {
        /// <summary>The list of scenarios applicable to this metadata entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of scenarios applicable to this metadata entity.",
        SerializedName = @"applicableScenarios",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Advisor.Support.Scenario) })]
        Microsoft.Azure.PowerShell.Cmdlets.Advisor.Support.Scenario[] ApplicableScenario { get; set; }
        /// <summary>The list of keys on which this entity depends on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of keys on which this entity depends on.",
        SerializedName = @"dependsOn",
        PossibleTypes = new [] { typeof(string) })]
        string[] DependsOn { get; set; }
        /// <summary>The display name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The display name.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>The resource Id of the metadata entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The resource Id of the metadata entity.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get; set; }
        /// <summary>The name of the metadata entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the metadata entity.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>The list of supported values.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of supported values.",
        SerializedName = @"supportedValues",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IMetadataSupportedValueDetail) })]
        Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IMetadataSupportedValueDetail[] SupportedValue { get; set; }
        /// <summary>The type of the metadata entity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Advisor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of the metadata entity.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string Type { get; set; }

    }
    /// The metadata entity contract.
    internal partial interface IMetadataEntityInternal

    {
        /// <summary>The list of scenarios applicable to this metadata entity.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Advisor.Support.Scenario[] ApplicableScenario { get; set; }
        /// <summary>The list of keys on which this entity depends on.</summary>
        string[] DependsOn { get; set; }
        /// <summary>The display name.</summary>
        string DisplayName { get; set; }
        /// <summary>The resource Id of the metadata entity.</summary>
        string Id { get; set; }
        /// <summary>The name of the metadata entity.</summary>
        string Name { get; set; }
        /// <summary>The metadata entity properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IMetadataEntityProperties Property { get; set; }
        /// <summary>The list of supported values.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Advisor.Models.Api202001.IMetadataSupportedValueDetail[] SupportedValue { get; set; }
        /// <summary>The type of the metadata entity.</summary>
        string Type { get; set; }

    }
}