
# ----------------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.718)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
create a certificate profile.
.Description
create a certificate profile.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Sample.API.Models.ICertificateProfile
.Inputs
Sample.API.Models.ICodeSigningIdentity
.Outputs
Sample.API.Models.ICertificateProfile
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <ICodeSigningIdentity>: Identity Parameter
  [AccountName <String>]: Trusted Signing account name.
  [ProfileName <String>]: Certificate profile name.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SubscriptionId <String>]: The ID of the target subscription. The value must be an UUID.

RESOURCE <ICertificateProfile>: Certificate profile resource.
  [IdentityValidationId <String>]: Identity validation id used for the certificate subject name.
  [IncludeCity <Boolean?>]: Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile types
  [IncludeCountry <Boolean?>]: Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile types
  [IncludePostalCode <Boolean?>]: Whether to include PC in the certificate subject name.
  [IncludeState <Boolean?>]: Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile types
  [IncludeStreetAddress <Boolean?>]: Whether to include STREET in the certificate subject name.
  [ProfileType <String>]: Profile type of the certificate.
  [RetryAfter <Int32?>]: 
.Link
https://learn.microsoft.com/powershell/module/codesigning/new-certificateprofile
#>
function New-CertificateProfile {
[OutputType([Sample.API.Models.ICertificateProfile])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Create', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Sample.API.Category('Path')]
    [System.String]
    # Trusted Signing account name.
    ${AccountName},

    [Parameter(ParameterSetName='Create', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Sample.API.Category('Path')]
    [System.String]
    # Certificate profile name.
    ${ProfileName},

    [Parameter(ParameterSetName='Create', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Sample.API.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Create', Mandatory)]
    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Sample.API.Category('Path')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Sample.API.Category('Path')]
    [Sample.API.Models.ICodeSigningIdentity]
    # Identity Parameter
    ${InputObject},

    [Parameter(ParameterSetName='Create', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='CreateViaIdentity', Mandatory, ValueFromPipeline)]
    [Sample.API.Category('Body')]
    [Sample.API.Models.ICertificateProfile]
    # Certificate profile resource.
    ${Resource},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Sample.API.Category('Body')]
    [System.String]
    # Identity validation id used for the certificate subject name.
    ${IdentityValidationId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Sample.API.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Whether to include L in the certificate subject name.
    # Applicable only for private trust, private trust ci profile types
    ${IncludeCity},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Sample.API.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Whether to include C in the certificate subject name.
    # Applicable only for private trust, private trust ci profile types
    ${IncludeCountry},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Sample.API.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Whether to include PC in the certificate subject name.
    ${IncludePostalCode},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Sample.API.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Whether to include S in the certificate subject name.
    # Applicable only for private trust, private trust ci profile types
    ${IncludeState},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Sample.API.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Whether to include STREET in the certificate subject name.
    ${IncludeStreetAddress},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateViaIdentityExpanded')]
    [Sample.API.PSArgumentCompleterAttribute("PublicTrust", "PrivateTrust", "PrivateTrustCIPolicy", "VBSEnclave", "PublicTrustTest")]
    [Sample.API.Category('Body')]
    [System.String]
    # Profile type of the certificate.
    ${ProfileType},

    [Parameter()]
    [Sample.API.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Sample.API.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Sample.API.Category('Runtime')]
    [Sample.API.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Sample.API.Category('Runtime')]
    [Sample.API.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Sample.API.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Sample.API.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Sample.API.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Sample.API.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        $mapping = @{
            Create = 'CodeSigning.private\New-CertificateProfile_Create';
            CreateExpanded = 'CodeSigning.private\New-CertificateProfile_CreateExpanded';
            CreateViaIdentity = 'CodeSigning.private\New-CertificateProfile_CreateViaIdentity';
            CreateViaIdentityExpanded = 'CodeSigning.private\New-CertificateProfile_CreateViaIdentityExpanded';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Sample.API.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        [Sample.API.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {

        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {

        throw
    }

}
end {
    try {
        $steppablePipeline.End()

    } catch {

        throw
    }
} 
}
