// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.718)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Sample.API.Models
{
    using static Sample.API.Runtime.Extensions;

    /// <summary>Certificate profile resource.</summary>
    public partial class CertificateProfile :
        Sample.API.Models.ICertificateProfile,
        Sample.API.Models.ICertificateProfileInternal,
        Sample.API.Runtime.IValidates,
        Sample.API.Runtime.IHeaderSerializable
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Sample.API.Models.IProxyResource" />
        /// </summary>
        private Sample.API.Models.IProxyResource __proxyResource = new Sample.API.Models.ProxyResource();

        /// <summary>List of renewed certificates.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Sample.API.Models.ICertificate> Certificates { get => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).Certificates; }

        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inherited)]
        public string Id { get => ((Sample.API.Models.IResourceInternal)__proxyResource).Id; }

        /// <summary>Identity validation id used for the certificate subject name.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public string IdentityValidationId { get => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).IdentityValidationId; set => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).IdentityValidationId = value ?? null; }

        /// <summary>
        /// Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile types
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public bool? IncludeCity { get => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).IncludeCity; set => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).IncludeCity = value ?? default(bool); }

        /// <summary>
        /// Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile types
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public bool? IncludeCountry { get => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).IncludeCountry; set => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).IncludeCountry = value ?? default(bool); }

        /// <summary>Whether to include PC in the certificate subject name.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public bool? IncludePostalCode { get => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).IncludePostalCode; set => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).IncludePostalCode = value ?? default(bool); }

        /// <summary>
        /// Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile types
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public bool? IncludeState { get => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).IncludeState; set => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).IncludeState = value ?? default(bool); }

        /// <summary>Whether to include STREET in the certificate subject name.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public bool? IncludeStreetAddress { get => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).IncludeStreetAddress; set => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).IncludeStreetAddress = value ?? default(bool); }

        /// <summary>The name of the resource</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inherited)]
        public string Name { get => ((Sample.API.Models.IResourceInternal)__proxyResource).Name; }

        /// <summary>Profile type of the certificate.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public string ProfileType { get => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).ProfileType; set => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).ProfileType = value ?? null; }

        /// <summary>Backing field for <see cref="Properties" /> property.</summary>
        private Sample.API.Models.ICertificateProfileProperties _properties;

        /// <summary>The resource-specific properties for this resource.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        internal Sample.API.Models.ICertificateProfileProperties Properties { get => (this._properties = this._properties ?? new Sample.API.Models.CertificateProfileProperties()); set => this._properties = value; }

        /// <summary>Status of the current operation on certificate profile.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public string ProvisioningState { get => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).ProvisioningState; }

        /// <summary>Backing field for <see cref="RetryAfter" /> property.</summary>
        private int? _retryAfter;

        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int? RetryAfter { get => this._retryAfter; set => this._retryAfter = value; }

        /// <summary>Internal Acessors for Certificates</summary>
        System.Collections.Generic.List<Sample.API.Models.ICertificate> Sample.API.Models.ICertificateProfileInternal.Certificates { get => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).Certificates; set => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).Certificates = value; }

        /// <summary>Internal Acessors for Properties</summary>
        Sample.API.Models.ICertificateProfileProperties Sample.API.Models.ICertificateProfileInternal.Properties { get => (this._properties = this._properties ?? new Sample.API.Models.CertificateProfileProperties()); set { {_properties = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Sample.API.Models.ICertificateProfileInternal.ProvisioningState { get => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).ProvisioningState; set => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).ProvisioningState = value; }

        /// <summary>Internal Acessors for Status</summary>
        string Sample.API.Models.ICertificateProfileInternal.Status { get => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).Status; set => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).Status = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Sample.API.Models.IResourceInternal.Id { get => ((Sample.API.Models.IResourceInternal)__proxyResource).Id; set => ((Sample.API.Models.IResourceInternal)__proxyResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Sample.API.Models.IResourceInternal.Name { get => ((Sample.API.Models.IResourceInternal)__proxyResource).Name; set => ((Sample.API.Models.IResourceInternal)__proxyResource).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Sample.API.Models.ISystemData Sample.API.Models.IResourceInternal.SystemData { get => ((Sample.API.Models.IResourceInternal)__proxyResource).SystemData; set => ((Sample.API.Models.IResourceInternal)__proxyResource).SystemData = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Sample.API.Models.IResourceInternal.Type { get => ((Sample.API.Models.IResourceInternal)__proxyResource).Type; set => ((Sample.API.Models.IResourceInternal)__proxyResource).Type = value; }

        /// <summary>Status of the certificate profile.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public string Status { get => ((Sample.API.Models.ICertificateProfilePropertiesInternal)Properties).Status; }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inherited)]
        internal Sample.API.Models.ISystemData SystemData { get => ((Sample.API.Models.IResourceInternal)__proxyResource).SystemData; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Sample.API.Models.IResourceInternal)__proxyResource).SystemDataCreatedAt; set => ((Sample.API.Models.IResourceInternal)__proxyResource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((Sample.API.Models.IResourceInternal)__proxyResource).SystemDataCreatedBy; set => ((Sample.API.Models.IResourceInternal)__proxyResource).SystemDataCreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inherited)]
        public string SystemDataCreatedByType { get => ((Sample.API.Models.IResourceInternal)__proxyResource).SystemDataCreatedByType; set => ((Sample.API.Models.IResourceInternal)__proxyResource).SystemDataCreatedByType = value ?? null; }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Sample.API.Models.IResourceInternal)__proxyResource).SystemDataLastModifiedAt; set => ((Sample.API.Models.IResourceInternal)__proxyResource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((Sample.API.Models.IResourceInternal)__proxyResource).SystemDataLastModifiedBy; set => ((Sample.API.Models.IResourceInternal)__proxyResource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedByType { get => ((Sample.API.Models.IResourceInternal)__proxyResource).SystemDataLastModifiedByType; set => ((Sample.API.Models.IResourceInternal)__proxyResource).SystemDataLastModifiedByType = value ?? null; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inherited)]
        public string Type { get => ((Sample.API.Models.IResourceInternal)__proxyResource).Type; }

        /// <summary>Creates an new <see cref="CertificateProfile" /> instance.</summary>
        public CertificateProfile()
        {

        }

        /// <param name="headers"></param>
        void Sample.API.Runtime.IHeaderSerializable.ReadHeaders(global::System.Net.Http.Headers.HttpResponseHeaders headers)
        {
            if (headers.TryGetValues("Retry-After", out var __retryAfterHeader0))
            {
                ((Sample.API.Models.ICertificateProfileInternal)this).RetryAfter = System.Linq.Enumerable.FirstOrDefault(__retryAfterHeader0) is string __headerRetryAfterHeader0 ? int.TryParse( __headerRetryAfterHeader0, out int __headerRetryAfterHeader0Value ) ? __headerRetryAfterHeader0Value : default(int?) : default(int?);
            }
        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Sample.API.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Sample.API.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__proxyResource), __proxyResource);
            await eventListener.AssertObjectIsValid(nameof(__proxyResource), __proxyResource);
        }
    }
    /// Certificate profile resource.
    public partial interface ICertificateProfile :
        Sample.API.Runtime.IJsonSerializable,
        Sample.API.Models.IProxyResource
    {
        /// <summary>List of renewed certificates.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"List of renewed certificates.",
        SerializedName = @"certificates",
        PossibleTypes = new [] { typeof(Sample.API.Models.ICertificate) })]
        System.Collections.Generic.List<Sample.API.Models.ICertificate> Certificates { get;  }
        /// <summary>Identity validation id used for the certificate subject name.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Identity validation id used for the certificate subject name.",
        SerializedName = @"identityValidationId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityValidationId { get; set; }
        /// <summary>
        /// Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile types
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile types",
        SerializedName = @"includeCity",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IncludeCity { get; set; }
        /// <summary>
        /// Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile types
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile types",
        SerializedName = @"includeCountry",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IncludeCountry { get; set; }
        /// <summary>Whether to include PC in the certificate subject name.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether to include PC in the certificate subject name.",
        SerializedName = @"includePostalCode",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IncludePostalCode { get; set; }
        /// <summary>
        /// Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile types
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile types",
        SerializedName = @"includeState",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IncludeState { get; set; }
        /// <summary>Whether to include STREET in the certificate subject name.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether to include STREET in the certificate subject name.",
        SerializedName = @"includeStreetAddress",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IncludeStreetAddress { get; set; }
        /// <summary>Profile type of the certificate.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Profile type of the certificate.",
        SerializedName = @"profileType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Sample.API.PSArgumentCompleterAttribute("PublicTrust", "PrivateTrust", "PrivateTrustCIPolicy", "VBSEnclave", "PublicTrustTest")]
        string ProfileType { get; set; }
        /// <summary>Status of the current operation on certificate profile.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Status of the current operation on certificate profile.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Sample.API.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Updating", "Deleting", "Accepted")]
        string ProvisioningState { get;  }

        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"Retry-After",
        PossibleTypes = new [] { typeof(int) })]
        int? RetryAfter { get; set; }
        /// <summary>Status of the certificate profile.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Status of the certificate profile.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::Sample.API.PSArgumentCompleterAttribute("Active", "Disabled", "Suspended")]
        string Status { get;  }

    }
    /// Certificate profile resource.
    internal partial interface ICertificateProfileInternal :
        Sample.API.Models.IProxyResourceInternal
    {
        /// <summary>List of renewed certificates.</summary>
        System.Collections.Generic.List<Sample.API.Models.ICertificate> Certificates { get; set; }
        /// <summary>Identity validation id used for the certificate subject name.</summary>
        string IdentityValidationId { get; set; }
        /// <summary>
        /// Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile types
        /// </summary>
        bool? IncludeCity { get; set; }
        /// <summary>
        /// Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile types
        /// </summary>
        bool? IncludeCountry { get; set; }
        /// <summary>Whether to include PC in the certificate subject name.</summary>
        bool? IncludePostalCode { get; set; }
        /// <summary>
        /// Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile types
        /// </summary>
        bool? IncludeState { get; set; }
        /// <summary>Whether to include STREET in the certificate subject name.</summary>
        bool? IncludeStreetAddress { get; set; }
        /// <summary>Profile type of the certificate.</summary>
        [global::Sample.API.PSArgumentCompleterAttribute("PublicTrust", "PrivateTrust", "PrivateTrustCIPolicy", "VBSEnclave", "PublicTrustTest")]
        string ProfileType { get; set; }
        /// <summary>The resource-specific properties for this resource.</summary>
        Sample.API.Models.ICertificateProfileProperties Properties { get; set; }
        /// <summary>Status of the current operation on certificate profile.</summary>
        [global::Sample.API.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Updating", "Deleting", "Accepted")]
        string ProvisioningState { get; set; }

        int? RetryAfter { get; set; }
        /// <summary>Status of the certificate profile.</summary>
        [global::Sample.API.PSArgumentCompleterAttribute("Active", "Disabled", "Suspended")]
        string Status { get; set; }

    }
}