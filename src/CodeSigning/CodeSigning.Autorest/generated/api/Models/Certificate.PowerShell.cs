// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.718)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Sample.API.Models
{
    using Sample.API.Runtime.PowerShell;

    /// <summary>Properties of the certificate.</summary>
    [System.ComponentModel.TypeConverter(typeof(CertificateTypeConverter))]
    public partial class Certificate
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Sample.API.Models.Certificate"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal Certificate(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Revocation"))
            {
                ((Sample.API.Models.ICertificateInternal)this).Revocation = (Sample.API.Models.IRevocation) content.GetValueForProperty("Revocation",((Sample.API.Models.ICertificateInternal)this).Revocation, Sample.API.Models.RevocationTypeConverter.ConvertFrom);
            }
            if (content.Contains("SerialNumber"))
            {
                ((Sample.API.Models.ICertificateInternal)this).SerialNumber = (string) content.GetValueForProperty("SerialNumber",((Sample.API.Models.ICertificateInternal)this).SerialNumber, global::System.Convert.ToString);
            }
            if (content.Contains("EnhancedKeyUsage"))
            {
                ((Sample.API.Models.ICertificateInternal)this).EnhancedKeyUsage = (string) content.GetValueForProperty("EnhancedKeyUsage",((Sample.API.Models.ICertificateInternal)this).EnhancedKeyUsage, global::System.Convert.ToString);
            }
            if (content.Contains("SubjectName"))
            {
                ((Sample.API.Models.ICertificateInternal)this).SubjectName = (string) content.GetValueForProperty("SubjectName",((Sample.API.Models.ICertificateInternal)this).SubjectName, global::System.Convert.ToString);
            }
            if (content.Contains("Thumbprint"))
            {
                ((Sample.API.Models.ICertificateInternal)this).Thumbprint = (string) content.GetValueForProperty("Thumbprint",((Sample.API.Models.ICertificateInternal)this).Thumbprint, global::System.Convert.ToString);
            }
            if (content.Contains("CreatedDate"))
            {
                ((Sample.API.Models.ICertificateInternal)this).CreatedDate = (string) content.GetValueForProperty("CreatedDate",((Sample.API.Models.ICertificateInternal)this).CreatedDate, global::System.Convert.ToString);
            }
            if (content.Contains("ExpiryDate"))
            {
                ((Sample.API.Models.ICertificateInternal)this).ExpiryDate = (string) content.GetValueForProperty("ExpiryDate",((Sample.API.Models.ICertificateInternal)this).ExpiryDate, global::System.Convert.ToString);
            }
            if (content.Contains("Status"))
            {
                ((Sample.API.Models.ICertificateInternal)this).Status = (string) content.GetValueForProperty("Status",((Sample.API.Models.ICertificateInternal)this).Status, global::System.Convert.ToString);
            }
            if (content.Contains("RevocationRequestedAt"))
            {
                ((Sample.API.Models.ICertificateInternal)this).RevocationRequestedAt = (global::System.DateTime?) content.GetValueForProperty("RevocationRequestedAt",((Sample.API.Models.ICertificateInternal)this).RevocationRequestedAt, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("RevocationEffectiveAt"))
            {
                ((Sample.API.Models.ICertificateInternal)this).RevocationEffectiveAt = (global::System.DateTime?) content.GetValueForProperty("RevocationEffectiveAt",((Sample.API.Models.ICertificateInternal)this).RevocationEffectiveAt, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("RevocationReason"))
            {
                ((Sample.API.Models.ICertificateInternal)this).RevocationReason = (string) content.GetValueForProperty("RevocationReason",((Sample.API.Models.ICertificateInternal)this).RevocationReason, global::System.Convert.ToString);
            }
            if (content.Contains("RevocationRemarks"))
            {
                ((Sample.API.Models.ICertificateInternal)this).RevocationRemarks = (string) content.GetValueForProperty("RevocationRemarks",((Sample.API.Models.ICertificateInternal)this).RevocationRemarks, global::System.Convert.ToString);
            }
            if (content.Contains("RevocationStatus"))
            {
                ((Sample.API.Models.ICertificateInternal)this).RevocationStatus = (string) content.GetValueForProperty("RevocationStatus",((Sample.API.Models.ICertificateInternal)this).RevocationStatus, global::System.Convert.ToString);
            }
            if (content.Contains("RevocationFailureReason"))
            {
                ((Sample.API.Models.ICertificateInternal)this).RevocationFailureReason = (string) content.GetValueForProperty("RevocationFailureReason",((Sample.API.Models.ICertificateInternal)this).RevocationFailureReason, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Sample.API.Models.Certificate"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal Certificate(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Revocation"))
            {
                ((Sample.API.Models.ICertificateInternal)this).Revocation = (Sample.API.Models.IRevocation) content.GetValueForProperty("Revocation",((Sample.API.Models.ICertificateInternal)this).Revocation, Sample.API.Models.RevocationTypeConverter.ConvertFrom);
            }
            if (content.Contains("SerialNumber"))
            {
                ((Sample.API.Models.ICertificateInternal)this).SerialNumber = (string) content.GetValueForProperty("SerialNumber",((Sample.API.Models.ICertificateInternal)this).SerialNumber, global::System.Convert.ToString);
            }
            if (content.Contains("EnhancedKeyUsage"))
            {
                ((Sample.API.Models.ICertificateInternal)this).EnhancedKeyUsage = (string) content.GetValueForProperty("EnhancedKeyUsage",((Sample.API.Models.ICertificateInternal)this).EnhancedKeyUsage, global::System.Convert.ToString);
            }
            if (content.Contains("SubjectName"))
            {
                ((Sample.API.Models.ICertificateInternal)this).SubjectName = (string) content.GetValueForProperty("SubjectName",((Sample.API.Models.ICertificateInternal)this).SubjectName, global::System.Convert.ToString);
            }
            if (content.Contains("Thumbprint"))
            {
                ((Sample.API.Models.ICertificateInternal)this).Thumbprint = (string) content.GetValueForProperty("Thumbprint",((Sample.API.Models.ICertificateInternal)this).Thumbprint, global::System.Convert.ToString);
            }
            if (content.Contains("CreatedDate"))
            {
                ((Sample.API.Models.ICertificateInternal)this).CreatedDate = (string) content.GetValueForProperty("CreatedDate",((Sample.API.Models.ICertificateInternal)this).CreatedDate, global::System.Convert.ToString);
            }
            if (content.Contains("ExpiryDate"))
            {
                ((Sample.API.Models.ICertificateInternal)this).ExpiryDate = (string) content.GetValueForProperty("ExpiryDate",((Sample.API.Models.ICertificateInternal)this).ExpiryDate, global::System.Convert.ToString);
            }
            if (content.Contains("Status"))
            {
                ((Sample.API.Models.ICertificateInternal)this).Status = (string) content.GetValueForProperty("Status",((Sample.API.Models.ICertificateInternal)this).Status, global::System.Convert.ToString);
            }
            if (content.Contains("RevocationRequestedAt"))
            {
                ((Sample.API.Models.ICertificateInternal)this).RevocationRequestedAt = (global::System.DateTime?) content.GetValueForProperty("RevocationRequestedAt",((Sample.API.Models.ICertificateInternal)this).RevocationRequestedAt, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("RevocationEffectiveAt"))
            {
                ((Sample.API.Models.ICertificateInternal)this).RevocationEffectiveAt = (global::System.DateTime?) content.GetValueForProperty("RevocationEffectiveAt",((Sample.API.Models.ICertificateInternal)this).RevocationEffectiveAt, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("RevocationReason"))
            {
                ((Sample.API.Models.ICertificateInternal)this).RevocationReason = (string) content.GetValueForProperty("RevocationReason",((Sample.API.Models.ICertificateInternal)this).RevocationReason, global::System.Convert.ToString);
            }
            if (content.Contains("RevocationRemarks"))
            {
                ((Sample.API.Models.ICertificateInternal)this).RevocationRemarks = (string) content.GetValueForProperty("RevocationRemarks",((Sample.API.Models.ICertificateInternal)this).RevocationRemarks, global::System.Convert.ToString);
            }
            if (content.Contains("RevocationStatus"))
            {
                ((Sample.API.Models.ICertificateInternal)this).RevocationStatus = (string) content.GetValueForProperty("RevocationStatus",((Sample.API.Models.ICertificateInternal)this).RevocationStatus, global::System.Convert.ToString);
            }
            if (content.Contains("RevocationFailureReason"))
            {
                ((Sample.API.Models.ICertificateInternal)this).RevocationFailureReason = (string) content.GetValueForProperty("RevocationFailureReason",((Sample.API.Models.ICertificateInternal)this).RevocationFailureReason, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Sample.API.Models.Certificate"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>an instance of <see cref="Sample.API.Models.ICertificate" />.</returns>
        public static Sample.API.Models.ICertificate DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new Certificate(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Sample.API.Models.Certificate"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>an instance of <see cref="Sample.API.Models.ICertificate" />.</returns>
        public static Sample.API.Models.ICertificate DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new Certificate(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="Certificate" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="Certificate" /> model class.</returns>
        public static Sample.API.Models.ICertificate FromJsonString(string jsonText) => FromJson(Sample.API.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Sample.API.Runtime.SerializationMode.IncludeAll)?.ToString();
    }
    /// Properties of the certificate.
    [System.ComponentModel.TypeConverter(typeof(CertificateTypeConverter))]
    public partial interface ICertificate

    {

    }
}