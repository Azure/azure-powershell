// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.718)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Sample.API.Models
{
    using static Sample.API.Runtime.Extensions;

    /// <summary>Properties of the certificate.</summary>
    public partial class Certificate :
        Sample.API.Models.ICertificate,
        Sample.API.Models.ICertificateInternal
    {

        /// <summary>Backing field for <see cref="CreatedDate" /> property.</summary>
        private string _createdDate;

        /// <summary>Certificate created date.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public string CreatedDate { get => this._createdDate; set => this._createdDate = value; }

        /// <summary>Backing field for <see cref="EnhancedKeyUsage" /> property.</summary>
        private string _enhancedKeyUsage;

        /// <summary>Enhanced key usage of the certificate.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public string EnhancedKeyUsage { get => this._enhancedKeyUsage; set => this._enhancedKeyUsage = value; }

        /// <summary>Backing field for <see cref="ExpiryDate" /> property.</summary>
        private string _expiryDate;

        /// <summary>Certificate expiry date.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public string ExpiryDate { get => this._expiryDate; set => this._expiryDate = value; }

        /// <summary>Backing field for <see cref="Revocation" /> property.</summary>
        private Sample.API.Models.IRevocation _revocation;

        /// <summary>Revocations history of a certificate.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        internal Sample.API.Models.IRevocation Revocation { get => (this._revocation = this._revocation ?? new Sample.API.Models.Revocation()); set => this._revocation = value; }

        /// <summary>The timestamp when the revocation is effective.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public global::System.DateTime? RevocationEffectiveAt { get => ((Sample.API.Models.IRevocationInternal)Revocation).EffectiveAt; set => ((Sample.API.Models.IRevocationInternal)Revocation).EffectiveAt = value ?? default(global::System.DateTime); }

        /// <summary>Reason for the revocation failure.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public string RevocationFailureReason { get => ((Sample.API.Models.IRevocationInternal)Revocation).FailureReason; set => ((Sample.API.Models.IRevocationInternal)Revocation).FailureReason = value ?? null; }

        /// <summary>Reason for revocation.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public string RevocationReason { get => ((Sample.API.Models.IRevocationInternal)Revocation).Reason; set => ((Sample.API.Models.IRevocationInternal)Revocation).Reason = value ?? null; }

        /// <summary>Remarks for the revocation.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public string RevocationRemarks { get => ((Sample.API.Models.IRevocationInternal)Revocation).Remarks; set => ((Sample.API.Models.IRevocationInternal)Revocation).Remarks = value ?? null; }

        /// <summary>The timestamp when the revocation is requested.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public global::System.DateTime? RevocationRequestedAt { get => ((Sample.API.Models.IRevocationInternal)Revocation).RequestedAt; set => ((Sample.API.Models.IRevocationInternal)Revocation).RequestedAt = value ?? default(global::System.DateTime); }

        /// <summary>Status of the revocation.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public string RevocationStatus { get => ((Sample.API.Models.IRevocationInternal)Revocation).Status; }

        /// <summary>Internal Acessors for Revocation</summary>
        Sample.API.Models.IRevocation Sample.API.Models.ICertificateInternal.Revocation { get => (this._revocation = this._revocation ?? new Sample.API.Models.Revocation()); set { {_revocation = value;} } }

        /// <summary>Internal Acessors for RevocationStatus</summary>
        string Sample.API.Models.ICertificateInternal.RevocationStatus { get => ((Sample.API.Models.IRevocationInternal)Revocation).Status; set => ((Sample.API.Models.IRevocationInternal)Revocation).Status = value; }

        /// <summary>Backing field for <see cref="SerialNumber" /> property.</summary>
        private string _serialNumber;

        /// <summary>Serial number of the certificate.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public string SerialNumber { get => this._serialNumber; set => this._serialNumber = value; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private string _status;

        /// <summary>Status of the certificate.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public string Status { get => this._status; set => this._status = value; }

        /// <summary>Backing field for <see cref="SubjectName" /> property.</summary>
        private string _subjectName;

        /// <summary>Subject name of the certificate.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public string SubjectName { get => this._subjectName; set => this._subjectName = value; }

        /// <summary>Backing field for <see cref="Thumbprint" /> property.</summary>
        private string _thumbprint;

        /// <summary>Thumbprint of the certificate.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public string Thumbprint { get => this._thumbprint; set => this._thumbprint = value; }

        /// <summary>Creates an new <see cref="Certificate" /> instance.</summary>
        public Certificate()
        {

        }
    }
    /// Properties of the certificate.
    public partial interface ICertificate :
        Sample.API.Runtime.IJsonSerializable
    {
        /// <summary>Certificate created date.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Certificate created date.",
        SerializedName = @"createdDate",
        PossibleTypes = new [] { typeof(string) })]
        string CreatedDate { get; set; }
        /// <summary>Enhanced key usage of the certificate.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Enhanced key usage of the certificate.",
        SerializedName = @"enhancedKeyUsage",
        PossibleTypes = new [] { typeof(string) })]
        string EnhancedKeyUsage { get; set; }
        /// <summary>Certificate expiry date.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Certificate expiry date.",
        SerializedName = @"expiryDate",
        PossibleTypes = new [] { typeof(string) })]
        string ExpiryDate { get; set; }
        /// <summary>The timestamp when the revocation is effective.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The timestamp when the revocation is effective.",
        SerializedName = @"effectiveAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? RevocationEffectiveAt { get; set; }
        /// <summary>Reason for the revocation failure.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Reason for the revocation failure.",
        SerializedName = @"failureReason",
        PossibleTypes = new [] { typeof(string) })]
        string RevocationFailureReason { get; set; }
        /// <summary>Reason for revocation.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Reason for revocation.",
        SerializedName = @"reason",
        PossibleTypes = new [] { typeof(string) })]
        string RevocationReason { get; set; }
        /// <summary>Remarks for the revocation.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Remarks for the revocation.",
        SerializedName = @"remarks",
        PossibleTypes = new [] { typeof(string) })]
        string RevocationRemarks { get; set; }
        /// <summary>The timestamp when the revocation is requested.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The timestamp when the revocation is requested.",
        SerializedName = @"requestedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? RevocationRequestedAt { get; set; }
        /// <summary>Status of the revocation.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Status of the revocation.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::Sample.API.PSArgumentCompleterAttribute("Succeeded", "InProgress", "Failed")]
        string RevocationStatus { get;  }
        /// <summary>Serial number of the certificate.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Serial number of the certificate.",
        SerializedName = @"serialNumber",
        PossibleTypes = new [] { typeof(string) })]
        string SerialNumber { get; set; }
        /// <summary>Status of the certificate.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Status of the certificate.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::Sample.API.PSArgumentCompleterAttribute("Active", "Expired", "Revoked")]
        string Status { get; set; }
        /// <summary>Subject name of the certificate.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Subject name of the certificate.",
        SerializedName = @"subjectName",
        PossibleTypes = new [] { typeof(string) })]
        string SubjectName { get; set; }
        /// <summary>Thumbprint of the certificate.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Thumbprint of the certificate.",
        SerializedName = @"thumbprint",
        PossibleTypes = new [] { typeof(string) })]
        string Thumbprint { get; set; }

    }
    /// Properties of the certificate.
    internal partial interface ICertificateInternal

    {
        /// <summary>Certificate created date.</summary>
        string CreatedDate { get; set; }
        /// <summary>Enhanced key usage of the certificate.</summary>
        string EnhancedKeyUsage { get; set; }
        /// <summary>Certificate expiry date.</summary>
        string ExpiryDate { get; set; }
        /// <summary>Revocations history of a certificate.</summary>
        Sample.API.Models.IRevocation Revocation { get; set; }
        /// <summary>The timestamp when the revocation is effective.</summary>
        global::System.DateTime? RevocationEffectiveAt { get; set; }
        /// <summary>Reason for the revocation failure.</summary>
        string RevocationFailureReason { get; set; }
        /// <summary>Reason for revocation.</summary>
        string RevocationReason { get; set; }
        /// <summary>Remarks for the revocation.</summary>
        string RevocationRemarks { get; set; }
        /// <summary>The timestamp when the revocation is requested.</summary>
        global::System.DateTime? RevocationRequestedAt { get; set; }
        /// <summary>Status of the revocation.</summary>
        [global::Sample.API.PSArgumentCompleterAttribute("Succeeded", "InProgress", "Failed")]
        string RevocationStatus { get; set; }
        /// <summary>Serial number of the certificate.</summary>
        string SerialNumber { get; set; }
        /// <summary>Status of the certificate.</summary>
        [global::Sample.API.PSArgumentCompleterAttribute("Active", "Expired", "Revoked")]
        string Status { get; set; }
        /// <summary>Subject name of the certificate.</summary>
        string SubjectName { get; set; }
        /// <summary>Thumbprint of the certificate.</summary>
        string Thumbprint { get; set; }

    }
}