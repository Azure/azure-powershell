// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.718)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Sample.API.Models
{
    using static Sample.API.Runtime.Extensions;

    /// <summary>Properties of the certificate profile.</summary>
    public partial class CertificateProfileProperties
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Sample.API.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Sample.API.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Sample.API.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Sample.API.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Sample.API.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Sample.API.Runtime.Json.JsonObject into a new instance of <see cref="CertificateProfileProperties" />.
        /// </summary>
        /// <param name="json">A Sample.API.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal CertificateProfileProperties(Sample.API.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_profileType = If( json?.PropertyT<Sample.API.Runtime.Json.JsonString>("profileType"), out var __jsonProfileType) ? (string)__jsonProfileType : (string)_profileType;}
            {_includeStreetAddress = If( json?.PropertyT<Sample.API.Runtime.Json.JsonBoolean>("includeStreetAddress"), out var __jsonIncludeStreetAddress) ? (bool?)__jsonIncludeStreetAddress : _includeStreetAddress;}
            {_includeCity = If( json?.PropertyT<Sample.API.Runtime.Json.JsonBoolean>("includeCity"), out var __jsonIncludeCity) ? (bool?)__jsonIncludeCity : _includeCity;}
            {_includeState = If( json?.PropertyT<Sample.API.Runtime.Json.JsonBoolean>("includeState"), out var __jsonIncludeState) ? (bool?)__jsonIncludeState : _includeState;}
            {_includeCountry = If( json?.PropertyT<Sample.API.Runtime.Json.JsonBoolean>("includeCountry"), out var __jsonIncludeCountry) ? (bool?)__jsonIncludeCountry : _includeCountry;}
            {_includePostalCode = If( json?.PropertyT<Sample.API.Runtime.Json.JsonBoolean>("includePostalCode"), out var __jsonIncludePostalCode) ? (bool?)__jsonIncludePostalCode : _includePostalCode;}
            {_identityValidationId = If( json?.PropertyT<Sample.API.Runtime.Json.JsonString>("identityValidationId"), out var __jsonIdentityValidationId) ? (string)__jsonIdentityValidationId : (string)_identityValidationId;}
            {_provisioningState = If( json?.PropertyT<Sample.API.Runtime.Json.JsonString>("provisioningState"), out var __jsonProvisioningState) ? (string)__jsonProvisioningState : (string)_provisioningState;}
            {_status = If( json?.PropertyT<Sample.API.Runtime.Json.JsonString>("status"), out var __jsonStatus) ? (string)__jsonStatus : (string)_status;}
            {_certificates = If( json?.PropertyT<Sample.API.Runtime.Json.JsonArray>("certificates"), out var __jsonCertificates) ? If( __jsonCertificates as Sample.API.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<System.Collections.Generic.List<Sample.API.Models.ICertificate>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__v, (__u)=>(Sample.API.Models.ICertificate) (Sample.API.Models.Certificate.FromJson(__u) )) ))() : null : _certificates;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Sample.API.Runtime.Json.JsonNode"/> into an instance of Sample.API.Models.ICertificateProfileProperties.
        /// </summary>
        /// <param name="node">a <see cref="Sample.API.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>an instance of Sample.API.Models.ICertificateProfileProperties.</returns>
        public static Sample.API.Models.ICertificateProfileProperties FromJson(Sample.API.Runtime.Json.JsonNode node)
        {
            return node is Sample.API.Runtime.Json.JsonObject json ? new CertificateProfileProperties(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="CertificateProfileProperties" /> into a <see cref="Sample.API.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Sample.API.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Sample.API.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="CertificateProfileProperties" /> as a <see cref="Sample.API.Runtime.Json.JsonNode" />.
        /// </returns>
        public Sample.API.Runtime.Json.JsonNode ToJson(Sample.API.Runtime.Json.JsonObject container, Sample.API.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Sample.API.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != (((object)this._profileType)?.ToString()) ? (Sample.API.Runtime.Json.JsonNode) new Sample.API.Runtime.Json.JsonString(this._profileType.ToString()) : null, "profileType" ,container.Add );
            AddIf( null != this._includeStreetAddress ? (Sample.API.Runtime.Json.JsonNode)new Sample.API.Runtime.Json.JsonBoolean((bool)this._includeStreetAddress) : null, "includeStreetAddress" ,container.Add );
            AddIf( null != this._includeCity ? (Sample.API.Runtime.Json.JsonNode)new Sample.API.Runtime.Json.JsonBoolean((bool)this._includeCity) : null, "includeCity" ,container.Add );
            AddIf( null != this._includeState ? (Sample.API.Runtime.Json.JsonNode)new Sample.API.Runtime.Json.JsonBoolean((bool)this._includeState) : null, "includeState" ,container.Add );
            AddIf( null != this._includeCountry ? (Sample.API.Runtime.Json.JsonNode)new Sample.API.Runtime.Json.JsonBoolean((bool)this._includeCountry) : null, "includeCountry" ,container.Add );
            AddIf( null != this._includePostalCode ? (Sample.API.Runtime.Json.JsonNode)new Sample.API.Runtime.Json.JsonBoolean((bool)this._includePostalCode) : null, "includePostalCode" ,container.Add );
            AddIf( null != (((object)this._identityValidationId)?.ToString()) ? (Sample.API.Runtime.Json.JsonNode) new Sample.API.Runtime.Json.JsonString(this._identityValidationId.ToString()) : null, "identityValidationId" ,container.Add );
            if (serializationMode.HasFlag(Sample.API.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._provisioningState)?.ToString()) ? (Sample.API.Runtime.Json.JsonNode) new Sample.API.Runtime.Json.JsonString(this._provisioningState.ToString()) : null, "provisioningState" ,container.Add );
            }
            if (serializationMode.HasFlag(Sample.API.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._status)?.ToString()) ? (Sample.API.Runtime.Json.JsonNode) new Sample.API.Runtime.Json.JsonString(this._status.ToString()) : null, "status" ,container.Add );
            }
            if (serializationMode.HasFlag(Sample.API.Runtime.SerializationMode.IncludeRead))
            {
                if (null != this._certificates)
                {
                    var __w = new Sample.API.Runtime.Json.XNodeArray();
                    foreach( var __x in this._certificates )
                    {
                        AddIf(__x?.ToJson(null, serializationMode) ,__w.Add);
                    }
                    container.Add("certificates",__w);
                }
            }
            AfterToJson(ref container);
            return container;
        }
    }
}