// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.CodeSigning.Models
{
    internal partial class Stream
    {
        internal static Stream DeserializeStream(JsonElement element)
        {
            Optional<bool> canRead = default;
            Optional<bool> canWrite = default;
            Optional<bool> canSeek = default;
            Optional<bool> canTimeout = default;
            Optional<long> length = default;
            Optional<long> position = default;
            Optional<int> readTimeout = default;
            Optional<int> writeTimeout = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("canRead"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    canRead = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("canWrite"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    canWrite = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("canSeek"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    canSeek = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("canTimeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    canTimeout = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("length"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    length = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("position"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    position = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("readTimeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    readTimeout = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("writeTimeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    writeTimeout = property.Value.GetInt32();
                    continue;
                }
            }
            return new Stream(Optional.ToNullable(canRead), Optional.ToNullable(canWrite), Optional.ToNullable(canSeek), Optional.ToNullable(canTimeout), Optional.ToNullable(length), Optional.ToNullable(position), Optional.ToNullable(readTimeout), Optional.ToNullable(writeTimeout));
        }
    }
}
