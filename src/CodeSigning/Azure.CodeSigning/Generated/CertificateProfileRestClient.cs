// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.CodeSigning.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.CodeSigning
{
    internal partial class CertificateProfileRestClient
    {
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of CertificateProfileRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public CertificateProfileRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2022-06-15-preview")
        {
            endpoint ??= new Uri("https://localhost:5001");
            if (apiVersion == null)
            {
                throw new ArgumentNullException(nameof(apiVersion));
            }

            this.endpoint = endpoint;
            this.apiVersion = apiVersion;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateSignRequest(string codeSigningAccountName, string certificateProfileName, SignRequest body)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/codesigningaccounts/", false);
            uri.AppendPath(codeSigningAccountName, true);
            uri.AppendPath("/certificateprofiles/", false);
            uri.AppendPath(certificateProfileName, true);
            uri.AppendPath("/sign", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Initiates a sign operation. </summary>
        /// <param name="codeSigningAccountName"> Azure Code Signing account name. </param>
        /// <param name="certificateProfileName"> Certificate profile name. </param>
        /// <param name="body"> Sign request details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="codeSigningAccountName"/>, <paramref name="certificateProfileName"/>, or <paramref name="body"/> is null. </exception>
        public async Task<Response> SignAsync(string codeSigningAccountName, string certificateProfileName, SignRequest body, CancellationToken cancellationToken = default)
        {
            if (codeSigningAccountName == null)
            {
                throw new ArgumentNullException(nameof(codeSigningAccountName));
            }
            if (certificateProfileName == null)
            {
                throw new ArgumentNullException(nameof(certificateProfileName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateSignRequest(codeSigningAccountName, certificateProfileName, body);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Initiates a sign operation. </summary>
        /// <param name="codeSigningAccountName"> Azure Code Signing account name. </param>
        /// <param name="certificateProfileName"> Certificate profile name. </param>
        /// <param name="body"> Sign request details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="codeSigningAccountName"/>, <paramref name="certificateProfileName"/>, or <paramref name="body"/> is null. </exception>
        public Response Sign(string codeSigningAccountName, string certificateProfileName, SignRequest body, CancellationToken cancellationToken = default)
        {
            if (codeSigningAccountName == null)
            {
                throw new ArgumentNullException(nameof(codeSigningAccountName));
            }
            if (certificateProfileName == null)
            {
                throw new ArgumentNullException(nameof(certificateProfileName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateSignRequest(codeSigningAccountName, certificateProfileName, body);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSignOperationRequest(string codeSigningAccountName, string certificateProfileName, Guid operationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/codesigningaccounts/", false);
            uri.AppendPath(codeSigningAccountName, true);
            uri.AppendPath("/certificateprofiles/", false);
            uri.AppendPath(certificateProfileName, true);
            uri.AppendPath("/sign/", false);
            uri.AppendPath(operationId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets the status of a sign operation. </summary>
        /// <param name="codeSigningAccountName"> Azure Code Signing account name. </param>
        /// <param name="certificateProfileName"> Certificate profile name. </param>
        /// <param name="operationId"> ID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="codeSigningAccountName"/> or <paramref name="certificateProfileName"/> is null. </exception>
        public async Task<Response<SignStatus>> GetSignOperationAsync(string codeSigningAccountName, string certificateProfileName, Guid operationId, CancellationToken cancellationToken = default)
        {
            if (codeSigningAccountName == null)
            {
                throw new ArgumentNullException(nameof(codeSigningAccountName));
            }
            if (certificateProfileName == null)
            {
                throw new ArgumentNullException(nameof(certificateProfileName));
            }

            using var message = CreateGetSignOperationRequest(codeSigningAccountName, certificateProfileName, operationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SignStatus value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SignStatus.DeserializeSignStatus(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the status of a sign operation. </summary>
        /// <param name="codeSigningAccountName"> Azure Code Signing account name. </param>
        /// <param name="certificateProfileName"> Certificate profile name. </param>
        /// <param name="operationId"> ID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="codeSigningAccountName"/> or <paramref name="certificateProfileName"/> is null. </exception>
        public Response<SignStatus> GetSignOperation(string codeSigningAccountName, string certificateProfileName, Guid operationId, CancellationToken cancellationToken = default)
        {
            if (codeSigningAccountName == null)
            {
                throw new ArgumentNullException(nameof(codeSigningAccountName));
            }
            if (certificateProfileName == null)
            {
                throw new ArgumentNullException(nameof(certificateProfileName));
            }

            using var message = CreateGetSignOperationRequest(codeSigningAccountName, certificateProfileName, operationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SignStatus value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SignStatus.DeserializeSignStatus(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSignEkuRequest(string codeSigningAccountName, string certificateProfileName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/codesigningaccounts/", false);
            uri.AppendPath(codeSigningAccountName, true);
            uri.AppendPath("/certificateprofiles/", false);
            uri.AppendPath(certificateProfileName, true);
            uri.AppendPath("/sign/eku", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets the ekus defined for that account and profile. </summary>
        /// <param name="codeSigningAccountName"> The String to use. </param>
        /// <param name="certificateProfileName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="codeSigningAccountName"/> or <paramref name="certificateProfileName"/> is null. </exception>
        public async Task<Response<IReadOnlyList<string>>> GetSignEkuAsync(string codeSigningAccountName, string certificateProfileName, CancellationToken cancellationToken = default)
        {
            if (codeSigningAccountName == null)
            {
                throw new ArgumentNullException(nameof(codeSigningAccountName));
            }
            if (certificateProfileName == null)
            {
                throw new ArgumentNullException(nameof(certificateProfileName));
            }

            using var message = CreateGetSignEkuRequest(codeSigningAccountName, certificateProfileName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<string> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<string> array = new List<string>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(item.GetString());
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the ekus defined for that account and profile. </summary>
        /// <param name="codeSigningAccountName"> The String to use. </param>
        /// <param name="certificateProfileName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="codeSigningAccountName"/> or <paramref name="certificateProfileName"/> is null. </exception>
        public Response<IReadOnlyList<string>> GetSignEku(string codeSigningAccountName, string certificateProfileName, CancellationToken cancellationToken = default)
        {
            if (codeSigningAccountName == null)
            {
                throw new ArgumentNullException(nameof(codeSigningAccountName));
            }
            if (certificateProfileName == null)
            {
                throw new ArgumentNullException(nameof(certificateProfileName));
            }

            using var message = CreateGetSignEkuRequest(codeSigningAccountName, certificateProfileName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<string> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<string> array = new List<string>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(item.GetString());
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSignCertificateRootRequest(string codeSigningAccountName, string certificateProfileName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/codesigningaccounts/", false);
            uri.AppendPath(codeSigningAccountName, true);
            uri.AppendPath("/certificateprofiles/", false);
            uri.AppendPath(certificateProfileName, true);
            uri.AppendPath("/sign/rootcert", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/x-x509-ca-cert, application/json");
            return message;
        }

        /// <summary> Gets the root certificate for that account and profile. </summary>
        /// <param name="codeSigningAccountName"> The String to use. </param>
        /// <param name="certificateProfileName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="codeSigningAccountName"/> or <paramref name="certificateProfileName"/> is null. </exception>
        public async Task<Response<System.IO.Stream>> GetSignCertificateRootAsync(string codeSigningAccountName, string certificateProfileName, CancellationToken cancellationToken = default)
        {
            if (codeSigningAccountName == null)
            {
                throw new ArgumentNullException(nameof(codeSigningAccountName));
            }
            if (certificateProfileName == null)
            {
                throw new ArgumentNullException(nameof(certificateProfileName));
            }

            using var message = CreateGetSignCertificateRootRequest(codeSigningAccountName, certificateProfileName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the root certificate for that account and profile. </summary>
        /// <param name="codeSigningAccountName"> The String to use. </param>
        /// <param name="certificateProfileName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="codeSigningAccountName"/> or <paramref name="certificateProfileName"/> is null. </exception>
        public Response<System.IO.Stream> GetSignCertificateRoot(string codeSigningAccountName, string certificateProfileName, CancellationToken cancellationToken = default)
        {
            if (codeSigningAccountName == null)
            {
                throw new ArgumentNullException(nameof(codeSigningAccountName));
            }
            if (certificateProfileName == null)
            {
                throw new ArgumentNullException(nameof(certificateProfileName));
            }

            using var message = CreateGetSignCertificateRootRequest(codeSigningAccountName, certificateProfileName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
