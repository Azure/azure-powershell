// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.CodeSigning.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.CodeSigning
{
    /// <summary> The CertificateProfile service client. </summary>
    public partial class CertificateProfileClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal CertificateProfileRestClient RestClient { get; }

        /// <summary> Initializes a new instance of CertificateProfileClient for mocking. </summary>
        protected CertificateProfileClient()
        {
        }

        /// <summary> Initializes a new instance of CertificateProfileClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public CertificateProfileClient(TokenCredential credential, Uri endpoint = null, CertificateProfileClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("https://localhost:5001");

            options ??= new CertificateProfileClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "api://cf2ab426-f71a-4b61-bb8a-9e505b85bc2e/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new CertificateProfileRestClient(_clientDiagnostics, _pipeline, endpoint, options.Version);
        }

        /// <summary> Initializes a new instance of CertificateProfileClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal CertificateProfileClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2022-06-15-preview")
        {
            RestClient = new CertificateProfileRestClient(clientDiagnostics, pipeline, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets the status of a sign operation. </summary>
        /// <param name="codeSigningAccountName"> Azure Code Signing account name. </param>
        /// <param name="certificateProfileName"> Certificate profile name. </param>
        /// <param name="operationId"> ID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SignStatus>> GetSignOperationAsync(string codeSigningAccountName, string certificateProfileName, Guid operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CertificateProfileClient.GetSignOperation");
            scope.Start();
            try
            {
                return await RestClient.GetSignOperationAsync(codeSigningAccountName, certificateProfileName, operationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of a sign operation. </summary>
        /// <param name="codeSigningAccountName"> Azure Code Signing account name. </param>
        /// <param name="certificateProfileName"> Certificate profile name. </param>
        /// <param name="operationId"> ID of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SignStatus> GetSignOperation(string codeSigningAccountName, string certificateProfileName, Guid operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CertificateProfileClient.GetSignOperation");
            scope.Start();
            try
            {
                return RestClient.GetSignOperation(codeSigningAccountName, certificateProfileName, operationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the ekus defined for that account and profile. </summary>
        /// <param name="codeSigningAccountName"> The String to use. </param>
        /// <param name="certificateProfileName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<string>>> GetSignEkuAsync(string codeSigningAccountName, string certificateProfileName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CertificateProfileClient.GetSignEku");
            scope.Start();
            try
            {
                return await RestClient.GetSignEkuAsync(codeSigningAccountName, certificateProfileName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the ekus defined for that account and profile. </summary>
        /// <param name="codeSigningAccountName"> The String to use. </param>
        /// <param name="certificateProfileName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<string>> GetSignEku(string codeSigningAccountName, string certificateProfileName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CertificateProfileClient.GetSignEku");
            scope.Start();
            try
            {
                return RestClient.GetSignEku(codeSigningAccountName, certificateProfileName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the root certificate for that account and profile. </summary>
        /// <param name="codeSigningAccountName"> The String to use. </param>
        /// <param name="certificateProfileName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<System.IO.Stream>> GetSignCertificateRootAsync(string codeSigningAccountName, string certificateProfileName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CertificateProfileClient.GetSignCertificateRoot");
            scope.Start();
            try
            {
                return await RestClient.GetSignCertificateRootAsync(codeSigningAccountName, certificateProfileName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the root certificate for that account and profile. </summary>
        /// <param name="codeSigningAccountName"> The String to use. </param>
        /// <param name="certificateProfileName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<System.IO.Stream> GetSignCertificateRoot(string codeSigningAccountName, string certificateProfileName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CertificateProfileClient.GetSignCertificateRoot");
            scope.Start();
            try
            {
                return RestClient.GetSignCertificateRoot(codeSigningAccountName, certificateProfileName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initiates a sign operation. </summary>
        /// <param name="codeSigningAccountName"> Azure Code Signing account name. </param>
        /// <param name="certificateProfileName"> Certificate profile name. </param>
        /// <param name="body"> Sign request details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="codeSigningAccountName"/>, <paramref name="certificateProfileName"/>, or <paramref name="body"/> is null. </exception>
        public virtual async Task<CertificateProfileSignOperation> StartSignAsync(string codeSigningAccountName, string certificateProfileName, SignRequest body, CancellationToken cancellationToken = default)
        {
            if (codeSigningAccountName == null)
            {
                throw new ArgumentNullException(nameof(codeSigningAccountName));
            }
            if (certificateProfileName == null)
            {
                throw new ArgumentNullException(nameof(certificateProfileName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var scope = _clientDiagnostics.CreateScope("CertificateProfileClient.StartSign");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.SignAsync(codeSigningAccountName, certificateProfileName, body, cancellationToken).ConfigureAwait(false);
                return new CertificateProfileSignOperation(_clientDiagnostics, _pipeline, RestClient.CreateSignRequest(codeSigningAccountName, certificateProfileName, body).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initiates a sign operation. </summary>
        /// <param name="codeSigningAccountName"> Azure Code Signing account name. </param>
        /// <param name="certificateProfileName"> Certificate profile name. </param>
        /// <param name="body"> Sign request details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="codeSigningAccountName"/>, <paramref name="certificateProfileName"/>, or <paramref name="body"/> is null. </exception>
        public virtual CertificateProfileSignOperation StartSign(string codeSigningAccountName, string certificateProfileName, SignRequest body, CancellationToken cancellationToken = default)
        {
            if (codeSigningAccountName == null)
            {
                throw new ArgumentNullException(nameof(codeSigningAccountName));
            }
            if (certificateProfileName == null)
            {
                throw new ArgumentNullException(nameof(certificateProfileName));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var scope = _clientDiagnostics.CreateScope("CertificateProfileClient.StartSign");
            scope.Start();
            try
            {
                var originalResponse = RestClient.Sign(codeSigningAccountName, certificateProfileName, body, cancellationToken);
                return new CertificateProfileSignOperation(_clientDiagnostics, _pipeline, RestClient.CreateSignRequest(codeSigningAccountName, certificateProfileName, body).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
