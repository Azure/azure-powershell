// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Marketplace
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for PrivateStoreOperations
    /// </summary>
    public static partial class PrivateStoreOperationsExtensions
    {
        /// <summary>
        /// Gets the list of available private stores
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='useCache'>
        /// Determines if to use cache or DB for serving this request
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PrivateStore> List(this IPrivateStoreOperations operations, string useCache = default(string))
        {
                return ((IPrivateStoreOperations)operations).ListAsync(useCache).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of available private stores
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='useCache'>
        /// Determines if to use cache or DB for serving this request
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PrivateStore>> ListAsync(this IPrivateStoreOperations operations, string useCache = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(useCache, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get information about the private store
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='privateStoreId'>
        /// The store ID - must use the tenant ID
        /// </param>
        public static PrivateStore Get(this IPrivateStoreOperations operations, string privateStoreId)
        {
                return ((IPrivateStoreOperations)operations).GetAsync(privateStoreId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get information about the private store
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='privateStoreId'>
        /// The store ID - must use the tenant ID
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateStore> GetAsync(this IPrivateStoreOperations operations, string privateStoreId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(privateStoreId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the private store. All that is not saved will be lost.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='privateStoreId'>
        /// The store ID - must use the tenant ID
        /// </param>
        public static void Delete(this IPrivateStoreOperations operations, string privateStoreId)
        {
                ((IPrivateStoreOperations)operations).DeleteAsync(privateStoreId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the private store. All that is not saved will be lost.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='privateStoreId'>
        /// The store ID - must use the tenant ID
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IPrivateStoreOperations operations, string privateStoreId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(privateStoreId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Changes private store properties
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='privateStoreId'>
        /// The store ID - must use the tenant ID
        /// </param>
        public static void CreateOrUpdate(this IPrivateStoreOperations operations, string privateStoreId, PrivateStore payload = default(PrivateStore))
        {
                ((IPrivateStoreOperations)operations).CreateOrUpdateAsync(privateStoreId, payload).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Changes private store properties
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='privateStoreId'>
        /// The store ID - must use the tenant ID
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task CreateOrUpdateAsync(this IPrivateStoreOperations operations, string privateStoreId, PrivateStore payload = default(PrivateStore), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.CreateOrUpdateWithHttpMessagesAsync(privateStoreId, payload, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets the list of available private stores
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PrivateStore> ListNext(this IPrivateStoreOperations operations, string nextPageLink)
        {
                return ((IPrivateStoreOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of available private stores
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PrivateStore>> ListNextAsync(this IPrivateStoreOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
