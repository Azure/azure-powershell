// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Marketplace
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for PrivateStorePrivateOfferOperations
    /// </summary>
    public static partial class PrivateStorePrivateOfferOperationsExtensions
    {
        /// <summary>
        /// Gets information about a specific private offer.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='subscriptionId'>
        /// Subscription id of the private offers
        /// </param>
        /// <param name='privateStoreId'>
        /// The store ID - must use the tenant ID
        /// </param>
        /// <param name='offerId'>
        /// The offer ID to update or delete
        /// </param>
        public static Offer Get(this IPrivateStorePrivateOfferOperations operations, string subscriptionId, string privateStoreId, string offerId)
        {
                return ((IPrivateStorePrivateOfferOperations)operations).GetAsync(subscriptionId, privateStoreId, offerId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets information about a specific private offer.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='subscriptionId'>
        /// Subscription id of the private offers
        /// </param>
        /// <param name='privateStoreId'>
        /// The store ID - must use the tenant ID
        /// </param>
        /// <param name='offerId'>
        /// The offer ID to update or delete
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Offer> GetAsync(this IPrivateStorePrivateOfferOperations operations, string subscriptionId, string privateStoreId, string offerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(subscriptionId, privateStoreId, offerId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update or add a private offer to the default collection of the private
        /// store.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='subscriptionId'>
        /// Subscription id of the private offers
        /// </param>
        /// <param name='privateStoreId'>
        /// The store ID - must use the tenant ID
        /// </param>
        /// <param name='offerId'>
        /// The offer ID to update or delete
        /// </param>
        public static Offer CreateOrUpdate(this IPrivateStorePrivateOfferOperations operations, string subscriptionId, string privateStoreId, string offerId, string eTag = default(string), System.Collections.Generic.IList<string> specificPlanIdsLimitation = default(System.Collections.Generic.IList<string>))
        {
                return ((IPrivateStorePrivateOfferOperations)operations).CreateOrUpdateAsync(subscriptionId, privateStoreId, offerId, eTag, specificPlanIdsLimitation).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update or add a private offer to the default collection of the private
        /// store.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='subscriptionId'>
        /// Subscription id of the private offers
        /// </param>
        /// <param name='privateStoreId'>
        /// The store ID - must use the tenant ID
        /// </param>
        /// <param name='offerId'>
        /// The offer ID to update or delete
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Offer> CreateOrUpdateAsync(this IPrivateStorePrivateOfferOperations operations, string subscriptionId, string privateStoreId, string offerId, string eTag = default(string), System.Collections.Generic.IList<string> specificPlanIdsLimitation = default(System.Collections.Generic.IList<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(subscriptionId, privateStoreId, offerId, eTag, specificPlanIdsLimitation, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
