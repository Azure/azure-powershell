// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Extensions;

    /// <summary>A private cloud resource</summary>
    public partial class PrivateCloud :
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloud,
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal,
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ITrackedResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.TrackedResource();

        /// <summary>The secondary availability zone for the private cloud</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public int? AvailabilitySecondaryZone { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).AvailabilitySecondaryZone; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).AvailabilitySecondaryZone = value ?? default(int); }

        /// <summary>The availability strategy for the private cloud</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.AvailabilityStrategy? AvailabilityStrategy { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).AvailabilityStrategy; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).AvailabilityStrategy = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.AvailabilityStrategy)""); }

        /// <summary>The primary availability zone for the private cloud</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public int? AvailabilityZone { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).AvailabilityZone; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).AvailabilityZone = value ?? default(int); }

        /// <summary>Identifier of the ExpressRoute Circuit (Microsoft Colo only)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string CircuitExpressRouteId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).CircuitExpressRouteId; }

        /// <summary>ExpressRoute Circuit private peering identifier</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string CircuitExpressRoutePrivatePeeringId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).CircuitExpressRoutePrivatePeeringId; }

        /// <summary>CIDR of primary subnet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string CircuitPrimarySubnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).CircuitPrimarySubnet; }

        /// <summary>CIDR of secondary subnet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string CircuitSecondarySubnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).CircuitSecondarySubnet; }

        /// <summary>Status of customer managed encryption key</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.EncryptionState? EncryptionStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).EncryptionStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).EncryptionStatus = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.EncryptionState)""); }

        /// <summary>Endpoint for the HCX Cloud Manager</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string EndpointHcxCloudManager { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).EndpointHcxCloudManager; }

        /// <summary>Endpoint for the NSX-T Data Center manager</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string EndpointNsxtManager { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).EndpointNsxtManager; }

        /// <summary>Endpoint for Virtual Center Server Appliance</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string EndpointVcsa { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).EndpointVcsa; }

        /// <summary>Array of cloud link IDs from other clouds that connect to this one</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string[] ExternalCloudLink { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).ExternalCloudLink; }

        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal)__trackedResource).Id; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudIdentity _identity;

        /// <summary>The identity of the private cloud, if configured.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.PrivateCloudIdentity()); set => this._identity = value; }

        /// <summary>
        /// The principal ID of private cloud identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudIdentityInternal)Identity).PrincipalId; }

        /// <summary>vCenter Single Sign On Identity Sources</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IIdentitySource[] IdentitySource { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).IdentitySource; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).IdentitySource = value ?? null /* arrayOf */; }

        /// <summary>
        /// The tenant ID associated with the private cloud. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudIdentityInternal)Identity).TenantId; }

        /// <summary>
        /// The type of identity used for the private cloud. The type 'SystemAssigned' refers to an implicitly created identity. The
        /// type 'None' will remove any identities from the Private Cloud.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.ResourceIdentityType? IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudIdentityInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudIdentityInternal)Identity).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.ResourceIdentityType)""); }

        /// <summary>Connectivity to internet is enabled or disabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.InternetEnum? Internet { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).Internet; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).Internet = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.InternetEnum)""); }

        /// <summary>The name of the key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyKeyName { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).KeyVaultPropertyKeyName; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).KeyVaultPropertyKeyName = value ?? null; }

        /// <summary>The state of key provided</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.EncryptionKeyStatus? KeyVaultPropertyKeyState { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).KeyVaultPropertyKeyState; }

        /// <summary>The URL of the vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyKeyVaultUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).KeyVaultPropertyKeyVaultUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).KeyVaultPropertyKeyVaultUrl = value ?? null; }

        /// <summary>The version of the key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string KeyVaultPropertyKeyVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).KeyVaultPropertyKeyVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).KeyVaultPropertyKeyVersion = value ?? null; }

        /// <summary>Property of the key if user provided or auto detected</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.EncryptionVersionType? KeyVaultPropertyVersionType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).KeyVaultPropertyVersionType; }

        /// <summary>Resource location</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ITrackedResourceInternal)__trackedResource).Location = value ?? null; }

        /// <summary>The hosts</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string[] ManagementClusterHost { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).ManagementClusterHost; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).ManagementClusterHost = value ?? null /* arrayOf */; }

        /// <summary>The identity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public int? ManagementClusterId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).ManagementClusterId; }

        /// <summary>The state of the cluster provisioning</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.ClusterProvisioningState? ManagementClusterProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).ManagementClusterProvisioningState; }

        /// <summary>The cluster size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public int? ManagementClusterSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).ManagementClusterSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).ManagementClusterSize = value ?? default(int); }

        /// <summary>Network used to access vCenter Server and NSX-T Manager</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string ManagementNetwork { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).ManagementNetwork; }

        /// <summary>Internal Acessors for Availability</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IAvailabilityProperties Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.Availability { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).Availability; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).Availability = value; }

        /// <summary>Internal Acessors for Circuit</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ICircuit Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.Circuit { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).Circuit; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).Circuit = value; }

        /// <summary>Internal Acessors for CircuitExpressRouteId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.CircuitExpressRouteId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).CircuitExpressRouteId; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).CircuitExpressRouteId = value; }

        /// <summary>Internal Acessors for CircuitExpressRoutePrivatePeeringId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.CircuitExpressRoutePrivatePeeringId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).CircuitExpressRoutePrivatePeeringId; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).CircuitExpressRoutePrivatePeeringId = value; }

        /// <summary>Internal Acessors for CircuitPrimarySubnet</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.CircuitPrimarySubnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).CircuitPrimarySubnet; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).CircuitPrimarySubnet = value; }

        /// <summary>Internal Acessors for CircuitSecondarySubnet</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.CircuitSecondarySubnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).CircuitSecondarySubnet; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).CircuitSecondarySubnet = value; }

        /// <summary>Internal Acessors for Encryption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IEncryption Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.Encryption { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).Encryption; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).Encryption = value; }

        /// <summary>Internal Acessors for EncryptionKeyVaultProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IEncryptionKeyVaultProperties Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.EncryptionKeyVaultProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).EncryptionKeyVaultProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).EncryptionKeyVaultProperty = value; }

        /// <summary>Internal Acessors for Endpoint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IEndpoints Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.Endpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).Endpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).Endpoint = value; }

        /// <summary>Internal Acessors for EndpointHcxCloudManager</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.EndpointHcxCloudManager { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).EndpointHcxCloudManager; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).EndpointHcxCloudManager = value; }

        /// <summary>Internal Acessors for EndpointNsxtManager</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.EndpointNsxtManager { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).EndpointNsxtManager; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).EndpointNsxtManager = value; }

        /// <summary>Internal Acessors for EndpointVcsa</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.EndpointVcsa { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).EndpointVcsa; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).EndpointVcsa = value; }

        /// <summary>Internal Acessors for ExternalCloudLink</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.ExternalCloudLink { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).ExternalCloudLink; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).ExternalCloudLink = value; }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudIdentity Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.PrivateCloudIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudIdentityInternal)Identity).PrincipalId; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudIdentityInternal)Identity).PrincipalId = value; }

        /// <summary>Internal Acessors for IdentityTenantId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudIdentityInternal)Identity).TenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudIdentityInternal)Identity).TenantId = value; }

        /// <summary>Internal Acessors for KeyVaultPropertyKeyState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.EncryptionKeyStatus? Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.KeyVaultPropertyKeyState { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).KeyVaultPropertyKeyState; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).KeyVaultPropertyKeyState = value; }

        /// <summary>Internal Acessors for KeyVaultPropertyVersionType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.EncryptionVersionType? Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.KeyVaultPropertyVersionType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).KeyVaultPropertyVersionType; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).KeyVaultPropertyVersionType = value; }

        /// <summary>Internal Acessors for ManagementCluster</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ICommonClusterProperties Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.ManagementCluster { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).ManagementCluster; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).ManagementCluster = value; }

        /// <summary>Internal Acessors for ManagementClusterId</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.ManagementClusterId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).ManagementClusterId; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).ManagementClusterId = value; }

        /// <summary>Internal Acessors for ManagementClusterProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.ClusterProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.ManagementClusterProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).ManagementClusterProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudUpdatePropertiesInternal)Property).ManagementClusterProvisioningState = value; }

        /// <summary>Internal Acessors for ManagementNetwork</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.ManagementNetwork { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).ManagementNetwork; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).ManagementNetwork = value; }

        /// <summary>Internal Acessors for NsxtCertificateThumbprint</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.NsxtCertificateThumbprint { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).NsxtCertificateThumbprint; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).NsxtCertificateThumbprint = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudProperties Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.PrivateCloudProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningNetwork</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.ProvisioningNetwork { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).ProvisioningNetwork; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).ProvisioningNetwork = value; }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.PrivateCloudProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for SecondaryCircuit</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ICircuit Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.SecondaryCircuit { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).SecondaryCircuit; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).SecondaryCircuit = value; }

        /// <summary>Internal Acessors for SecondaryCircuitExpressRouteId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.SecondaryCircuitExpressRouteId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).SecondaryCircuitExpressRouteId; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).SecondaryCircuitExpressRouteId = value; }

        /// <summary>Internal Acessors for SecondaryCircuitExpressRoutePrivatePeeringId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.SecondaryCircuitExpressRoutePrivatePeeringId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).SecondaryCircuitExpressRoutePrivatePeeringId; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).SecondaryCircuitExpressRoutePrivatePeeringId = value; }

        /// <summary>Internal Acessors for SecondaryCircuitPrimarySubnet</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.SecondaryCircuitPrimarySubnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).SecondaryCircuitPrimarySubnet; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).SecondaryCircuitPrimarySubnet = value; }

        /// <summary>Internal Acessors for SecondaryCircuitSecondarySubnet</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.SecondaryCircuitSecondarySubnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).SecondaryCircuitSecondarySubnet; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).SecondaryCircuitSecondarySubnet = value; }

        /// <summary>Internal Acessors for Sku</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ISku Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.Sku { get => (this._sku = this._sku ?? new Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.Sku()); set { {_sku = value;} } }

        /// <summary>Internal Acessors for VcenterCertificateThumbprint</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.VcenterCertificateThumbprint { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).VcenterCertificateThumbprint; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).VcenterCertificateThumbprint = value; }

        /// <summary>Internal Acessors for VmotionNetwork</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudInternal.VmotionNetwork { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).VmotionNetwork; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).VmotionNetwork = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal)__trackedResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal)__trackedResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal)__trackedResource).Type = value; }

        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal)__trackedResource).Name; }

        /// <summary>
        /// The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format
        /// is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string NetworkBlock { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).NetworkBlock; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).NetworkBlock = value ?? null; }

        /// <summary>Thumbprint of the NSX-T Manager SSL certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string NsxtCertificateThumbprint { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).NsxtCertificateThumbprint; }

        /// <summary>Optionally, set the NSX-T Manager password when the private cloud is created</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string NsxtPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).NsxtPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).NsxtPassword = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudProperties _property;

        /// <summary>The properties of a private cloud resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.PrivateCloudProperties()); set => this._property = value; }

        /// <summary>Used for virtual machine cold migration, cloning, and snapshot migration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string ProvisioningNetwork { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).ProvisioningNetwork; }

        /// <summary>The provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.PrivateCloudProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).ProvisioningState; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>Identifier of the ExpressRoute Circuit (Microsoft Colo only)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string SecondaryCircuitExpressRouteId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).SecondaryCircuitExpressRouteId; }

        /// <summary>ExpressRoute Circuit private peering identifier</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string SecondaryCircuitExpressRoutePrivatePeeringId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).SecondaryCircuitExpressRoutePrivatePeeringId; }

        /// <summary>CIDR of primary subnet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string SecondaryCircuitPrimarySubnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).SecondaryCircuitPrimarySubnet; }

        /// <summary>CIDR of secondary subnet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string SecondaryCircuitSecondarySubnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).SecondaryCircuitSecondarySubnet; }

        /// <summary>Backing field for <see cref="Sku" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ISku _sku;

        /// <summary>The private cloud SKU</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ISku Sku { get => (this._sku = this._sku ?? new Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.Sku()); set => this._sku = value; }

        /// <summary>The name of the SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string SkuName { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ISkuInternal)Sku).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ISkuInternal)Sku).Name = value ; }

        /// <summary>Resource tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal)__trackedResource).Type; }

        /// <summary>Thumbprint of the vCenter Server SSL certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string VcenterCertificateThumbprint { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).VcenterCertificateThumbprint; }

        /// <summary>Optionally, set the vCenter admin password when the private cloud is created</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string VcenterPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).VcenterPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).VcenterPassword = value ?? null; }

        /// <summary>Used for live migration of virtual machines</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string VmotionNetwork { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudPropertiesInternal)Property).VmotionNetwork; }

        /// <summary>Creates an new <see cref="PrivateCloud" /> instance.</summary>
        public PrivateCloud()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// A private cloud resource
    public partial interface IPrivateCloud :
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ITrackedResource
    {
        /// <summary>The secondary availability zone for the private cloud</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The secondary availability zone for the private cloud",
        SerializedName = @"secondaryZone",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailabilitySecondaryZone { get; set; }
        /// <summary>The availability strategy for the private cloud</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The availability strategy for the private cloud",
        SerializedName = @"strategy",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.AvailabilityStrategy) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.AvailabilityStrategy? AvailabilityStrategy { get; set; }
        /// <summary>The primary availability zone for the private cloud</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The primary availability zone for the private cloud",
        SerializedName = @"zone",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailabilityZone { get; set; }
        /// <summary>Identifier of the ExpressRoute Circuit (Microsoft Colo only)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Identifier of the ExpressRoute Circuit (Microsoft Colo only)",
        SerializedName = @"expressRouteID",
        PossibleTypes = new [] { typeof(string) })]
        string CircuitExpressRouteId { get;  }
        /// <summary>ExpressRoute Circuit private peering identifier</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"ExpressRoute Circuit private peering identifier",
        SerializedName = @"expressRoutePrivatePeeringID",
        PossibleTypes = new [] { typeof(string) })]
        string CircuitExpressRoutePrivatePeeringId { get;  }
        /// <summary>CIDR of primary subnet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"CIDR of primary subnet",
        SerializedName = @"primarySubnet",
        PossibleTypes = new [] { typeof(string) })]
        string CircuitPrimarySubnet { get;  }
        /// <summary>CIDR of secondary subnet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"CIDR of secondary subnet",
        SerializedName = @"secondarySubnet",
        PossibleTypes = new [] { typeof(string) })]
        string CircuitSecondarySubnet { get;  }
        /// <summary>Status of customer managed encryption key</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Status of customer managed encryption key",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.EncryptionState) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.EncryptionState? EncryptionStatus { get; set; }
        /// <summary>Endpoint for the HCX Cloud Manager</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Endpoint for the HCX Cloud Manager",
        SerializedName = @"hcxCloudManager",
        PossibleTypes = new [] { typeof(string) })]
        string EndpointHcxCloudManager { get;  }
        /// <summary>Endpoint for the NSX-T Data Center manager</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Endpoint for the NSX-T Data Center manager",
        SerializedName = @"nsxtManager",
        PossibleTypes = new [] { typeof(string) })]
        string EndpointNsxtManager { get;  }
        /// <summary>Endpoint for Virtual Center Server Appliance</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Endpoint for Virtual Center Server Appliance",
        SerializedName = @"vcsa",
        PossibleTypes = new [] { typeof(string) })]
        string EndpointVcsa { get;  }
        /// <summary>Array of cloud link IDs from other clouds that connect to this one</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Array of cloud link IDs from other clouds that connect to this one",
        SerializedName = @"externalCloudLinks",
        PossibleTypes = new [] { typeof(string) })]
        string[] ExternalCloudLink { get;  }
        /// <summary>
        /// The principal ID of private cloud identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The principal ID of private cloud identity. This property will only be provided for a system assigned identity.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>vCenter Single Sign On Identity Sources</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"vCenter Single Sign On Identity Sources",
        SerializedName = @"identitySources",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IIdentitySource) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IIdentitySource[] IdentitySource { get; set; }
        /// <summary>
        /// The tenant ID associated with the private cloud. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The tenant ID associated with the private cloud. This property will only be provided for a system assigned identity.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityTenantId { get;  }
        /// <summary>
        /// The type of identity used for the private cloud. The type 'SystemAssigned' refers to an implicitly created identity. The
        /// type 'None' will remove any identities from the Private Cloud.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity used for the private cloud. The type 'SystemAssigned' refers to an implicitly created identity. The type 'None' will remove any identities from the Private Cloud.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.ResourceIdentityType) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.ResourceIdentityType? IdentityType { get; set; }
        /// <summary>Connectivity to internet is enabled or disabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Connectivity to internet is enabled or disabled",
        SerializedName = @"internet",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.InternetEnum) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.InternetEnum? Internet { get; set; }
        /// <summary>The name of the key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the key.",
        SerializedName = @"keyName",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyKeyName { get; set; }
        /// <summary>The state of key provided</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The state of key provided",
        SerializedName = @"keyState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.EncryptionKeyStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.EncryptionKeyStatus? KeyVaultPropertyKeyState { get;  }
        /// <summary>The URL of the vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URL of the vault.",
        SerializedName = @"keyVaultUrl",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyKeyVaultUrl { get; set; }
        /// <summary>The version of the key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The version of the key.",
        SerializedName = @"keyVersion",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultPropertyKeyVersion { get; set; }
        /// <summary>Property of the key if user provided or auto detected</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Property of the key if user provided or auto detected",
        SerializedName = @"versionType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.EncryptionVersionType) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.EncryptionVersionType? KeyVaultPropertyVersionType { get;  }
        /// <summary>The hosts</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The hosts",
        SerializedName = @"hosts",
        PossibleTypes = new [] { typeof(string) })]
        string[] ManagementClusterHost { get; set; }
        /// <summary>The identity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The identity",
        SerializedName = @"clusterId",
        PossibleTypes = new [] { typeof(int) })]
        int? ManagementClusterId { get;  }
        /// <summary>The state of the cluster provisioning</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The state of the cluster provisioning",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.ClusterProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.ClusterProvisioningState? ManagementClusterProvisioningState { get;  }
        /// <summary>The cluster size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The cluster size",
        SerializedName = @"clusterSize",
        PossibleTypes = new [] { typeof(int) })]
        int? ManagementClusterSize { get; set; }
        /// <summary>Network used to access vCenter Server and NSX-T Manager</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Network used to access vCenter Server and NSX-T Manager",
        SerializedName = @"managementNetwork",
        PossibleTypes = new [] { typeof(string) })]
        string ManagementNetwork { get;  }
        /// <summary>
        /// The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format
        /// is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22",
        SerializedName = @"networkBlock",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkBlock { get; set; }
        /// <summary>Thumbprint of the NSX-T Manager SSL certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Thumbprint of the NSX-T Manager SSL certificate",
        SerializedName = @"nsxtCertificateThumbprint",
        PossibleTypes = new [] { typeof(string) })]
        string NsxtCertificateThumbprint { get;  }
        /// <summary>Optionally, set the NSX-T Manager password when the private cloud is created</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optionally, set the NSX-T Manager password when the private cloud is created",
        SerializedName = @"nsxtPassword",
        PossibleTypes = new [] { typeof(string) })]
        string NsxtPassword { get; set; }
        /// <summary>Used for virtual machine cold migration, cloning, and snapshot migration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Used for virtual machine cold migration, cloning, and snapshot migration",
        SerializedName = @"provisioningNetwork",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningNetwork { get;  }
        /// <summary>The provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The provisioning state",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.PrivateCloudProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.PrivateCloudProvisioningState? ProvisioningState { get;  }
        /// <summary>Identifier of the ExpressRoute Circuit (Microsoft Colo only)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Identifier of the ExpressRoute Circuit (Microsoft Colo only)",
        SerializedName = @"expressRouteID",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryCircuitExpressRouteId { get;  }
        /// <summary>ExpressRoute Circuit private peering identifier</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"ExpressRoute Circuit private peering identifier",
        SerializedName = @"expressRoutePrivatePeeringID",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryCircuitExpressRoutePrivatePeeringId { get;  }
        /// <summary>CIDR of primary subnet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"CIDR of primary subnet",
        SerializedName = @"primarySubnet",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryCircuitPrimarySubnet { get;  }
        /// <summary>CIDR of secondary subnet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"CIDR of secondary subnet",
        SerializedName = @"secondarySubnet",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryCircuitSecondarySubnet { get;  }
        /// <summary>The name of the SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the SKU.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string SkuName { get; set; }
        /// <summary>Thumbprint of the vCenter Server SSL certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Thumbprint of the vCenter Server SSL certificate",
        SerializedName = @"vcenterCertificateThumbprint",
        PossibleTypes = new [] { typeof(string) })]
        string VcenterCertificateThumbprint { get;  }
        /// <summary>Optionally, set the vCenter admin password when the private cloud is created</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optionally, set the vCenter admin password when the private cloud is created",
        SerializedName = @"vcenterPassword",
        PossibleTypes = new [] { typeof(string) })]
        string VcenterPassword { get; set; }
        /// <summary>Used for live migration of virtual machines</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Used for live migration of virtual machines",
        SerializedName = @"vmotionNetwork",
        PossibleTypes = new [] { typeof(string) })]
        string VmotionNetwork { get;  }

    }
    /// A private cloud resource
    internal partial interface IPrivateCloudInternal :
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ITrackedResourceInternal
    {
        /// <summary>Properties describing how the cloud is distributed across availability zones</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IAvailabilityProperties Availability { get; set; }
        /// <summary>The secondary availability zone for the private cloud</summary>
        int? AvailabilitySecondaryZone { get; set; }
        /// <summary>The availability strategy for the private cloud</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.AvailabilityStrategy? AvailabilityStrategy { get; set; }
        /// <summary>The primary availability zone for the private cloud</summary>
        int? AvailabilityZone { get; set; }
        /// <summary>An ExpressRoute Circuit</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ICircuit Circuit { get; set; }
        /// <summary>Identifier of the ExpressRoute Circuit (Microsoft Colo only)</summary>
        string CircuitExpressRouteId { get; set; }
        /// <summary>ExpressRoute Circuit private peering identifier</summary>
        string CircuitExpressRoutePrivatePeeringId { get; set; }
        /// <summary>CIDR of primary subnet</summary>
        string CircuitPrimarySubnet { get; set; }
        /// <summary>CIDR of secondary subnet</summary>
        string CircuitSecondarySubnet { get; set; }
        /// <summary>Customer managed key encryption, can be enabled or disabled</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IEncryption Encryption { get; set; }
        /// <summary>The key vault where the encryption key is stored</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IEncryptionKeyVaultProperties EncryptionKeyVaultProperty { get; set; }
        /// <summary>Status of customer managed encryption key</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.EncryptionState? EncryptionStatus { get; set; }
        /// <summary>The endpoints</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IEndpoints Endpoint { get; set; }
        /// <summary>Endpoint for the HCX Cloud Manager</summary>
        string EndpointHcxCloudManager { get; set; }
        /// <summary>Endpoint for the NSX-T Data Center manager</summary>
        string EndpointNsxtManager { get; set; }
        /// <summary>Endpoint for Virtual Center Server Appliance</summary>
        string EndpointVcsa { get; set; }
        /// <summary>Array of cloud link IDs from other clouds that connect to this one</summary>
        string[] ExternalCloudLink { get; set; }
        /// <summary>The identity of the private cloud, if configured.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudIdentity Identity { get; set; }
        /// <summary>
        /// The principal ID of private cloud identity. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>vCenter Single Sign On Identity Sources</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IIdentitySource[] IdentitySource { get; set; }
        /// <summary>
        /// The tenant ID associated with the private cloud. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityTenantId { get; set; }
        /// <summary>
        /// The type of identity used for the private cloud. The type 'SystemAssigned' refers to an implicitly created identity. The
        /// type 'None' will remove any identities from the Private Cloud.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.ResourceIdentityType? IdentityType { get; set; }
        /// <summary>Connectivity to internet is enabled or disabled</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.InternetEnum? Internet { get; set; }
        /// <summary>The name of the key.</summary>
        string KeyVaultPropertyKeyName { get; set; }
        /// <summary>The state of key provided</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.EncryptionKeyStatus? KeyVaultPropertyKeyState { get; set; }
        /// <summary>The URL of the vault.</summary>
        string KeyVaultPropertyKeyVaultUrl { get; set; }
        /// <summary>The version of the key.</summary>
        string KeyVaultPropertyKeyVersion { get; set; }
        /// <summary>Property of the key if user provided or auto detected</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.EncryptionVersionType? KeyVaultPropertyVersionType { get; set; }
        /// <summary>The default cluster used for management</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ICommonClusterProperties ManagementCluster { get; set; }
        /// <summary>The hosts</summary>
        string[] ManagementClusterHost { get; set; }
        /// <summary>The identity</summary>
        int? ManagementClusterId { get; set; }
        /// <summary>The state of the cluster provisioning</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.ClusterProvisioningState? ManagementClusterProvisioningState { get; set; }
        /// <summary>The cluster size</summary>
        int? ManagementClusterSize { get; set; }
        /// <summary>Network used to access vCenter Server and NSX-T Manager</summary>
        string ManagementNetwork { get; set; }
        /// <summary>
        /// The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format
        /// is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22
        /// </summary>
        string NetworkBlock { get; set; }
        /// <summary>Thumbprint of the NSX-T Manager SSL certificate</summary>
        string NsxtCertificateThumbprint { get; set; }
        /// <summary>Optionally, set the NSX-T Manager password when the private cloud is created</summary>
        string NsxtPassword { get; set; }
        /// <summary>The properties of a private cloud resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IPrivateCloudProperties Property { get; set; }
        /// <summary>Used for virtual machine cold migration, cloning, and snapshot migration</summary>
        string ProvisioningNetwork { get; set; }
        /// <summary>The provisioning state</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.PrivateCloudProvisioningState? ProvisioningState { get; set; }
        /// <summary>
        /// A secondary expressRoute circuit from a separate AZ. Only present in a stretched private cloud
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ICircuit SecondaryCircuit { get; set; }
        /// <summary>Identifier of the ExpressRoute Circuit (Microsoft Colo only)</summary>
        string SecondaryCircuitExpressRouteId { get; set; }
        /// <summary>ExpressRoute Circuit private peering identifier</summary>
        string SecondaryCircuitExpressRoutePrivatePeeringId { get; set; }
        /// <summary>CIDR of primary subnet</summary>
        string SecondaryCircuitPrimarySubnet { get; set; }
        /// <summary>CIDR of secondary subnet</summary>
        string SecondaryCircuitSecondarySubnet { get; set; }
        /// <summary>The private cloud SKU</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.ISku Sku { get; set; }
        /// <summary>The name of the SKU.</summary>
        string SkuName { get; set; }
        /// <summary>Thumbprint of the vCenter Server SSL certificate</summary>
        string VcenterCertificateThumbprint { get; set; }
        /// <summary>Optionally, set the vCenter admin password when the private cloud is created</summary>
        string VcenterPassword { get; set; }
        /// <summary>Used for live migration of virtual machines</summary>
        string VmotionNetwork { get; set; }

    }
}