// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Extensions;

    /// <summary>Virtual Machine</summary>
    public partial class VirtualMachine :
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachine,
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachineInternal,
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResource __resource = new Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.Resource();

        /// <summary>Display name of the VM.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachinePropertiesInternal)Property).DisplayName; }

        /// <summary>
        /// Path to virtual machine's folder starting from datacenter virtual machine folder
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string FolderPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachinePropertiesInternal)Property).FolderPath; }

        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal)__resource).Id; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal)__resource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal)__resource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal)__resource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal)__resource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal)__resource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal)__resource).Type = value; }

        /// <summary>Internal Acessors for DisplayName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachineInternal.DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachinePropertiesInternal)Property).DisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachinePropertiesInternal)Property).DisplayName = value; }

        /// <summary>Internal Acessors for FolderPath</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachineInternal.FolderPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachinePropertiesInternal)Property).FolderPath; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachinePropertiesInternal)Property).FolderPath = value; }

        /// <summary>Internal Acessors for MoRefId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachineInternal.MoRefId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachinePropertiesInternal)Property).MoRefId; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachinePropertiesInternal)Property).MoRefId = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachineProperties Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachineInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.VirtualMachineProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for RestrictMovement</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.VirtualMachineRestrictMovementState? Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachineInternal.RestrictMovement { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachinePropertiesInternal)Property).RestrictMovement; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachinePropertiesInternal)Property).RestrictMovement = value; }

        /// <summary>Virtual machine managed object reference id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string MoRefId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachinePropertiesInternal)Property).MoRefId; }

        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal)__resource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachineProperties _property;

        /// <summary>Virtual machine properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachineProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.VirtualMachineProperties()); set => this._property = value; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>Whether VM DRS-driven movement is restricted (enabled) or not (disabled)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.VirtualMachineRestrictMovementState? RestrictMovement { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachinePropertiesInternal)Property).RestrictMovement; }

        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal)__resource).Type; }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__resource), __resource);
            await eventListener.AssertObjectIsValid(nameof(__resource), __resource);
        }

        /// <summary>Creates an new <see cref="VirtualMachine" /> instance.</summary>
        public VirtualMachine()
        {

        }
    }
    /// Virtual Machine
    public partial interface IVirtualMachine :
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResource
    {
        /// <summary>Display name of the VM.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Display name of the VM.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get;  }
        /// <summary>
        /// Path to virtual machine's folder starting from datacenter virtual machine folder
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Path to virtual machine's folder starting from datacenter virtual machine folder",
        SerializedName = @"folderPath",
        PossibleTypes = new [] { typeof(string) })]
        string FolderPath { get;  }
        /// <summary>Virtual machine managed object reference id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Virtual machine managed object reference id",
        SerializedName = @"moRefId",
        PossibleTypes = new [] { typeof(string) })]
        string MoRefId { get;  }
        /// <summary>Whether VM DRS-driven movement is restricted (enabled) or not (disabled)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Whether VM DRS-driven movement is restricted (enabled) or not (disabled)",
        SerializedName = @"restrictMovement",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.VirtualMachineRestrictMovementState) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.VirtualMachineRestrictMovementState? RestrictMovement { get;  }

    }
    /// Virtual Machine
    internal partial interface IVirtualMachineInternal :
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IResourceInternal
    {
        /// <summary>Display name of the VM.</summary>
        string DisplayName { get; set; }
        /// <summary>
        /// Path to virtual machine's folder starting from datacenter virtual machine folder
        /// </summary>
        string FolderPath { get; set; }
        /// <summary>Virtual machine managed object reference id</summary>
        string MoRefId { get; set; }
        /// <summary>Virtual machine properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.Api20211201.IVirtualMachineProperties Property { get; set; }
        /// <summary>Whether VM DRS-driven movement is restricted (enabled) or not (disabled)</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Support.VirtualMachineRestrictMovementState? RestrictMovement { get; set; }

    }
}