// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VMware.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Extensions;

    /// <summary>NSX Segment update</summary>
    public partial class WorkloadNetworkSegmentUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentUpdate,
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentUpdateInternal
    {

        /// <summary>Gateway which to connect segment to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string ConnectedGateway { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).ConnectedGateway; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).ConnectedGateway = value ?? null; }

        /// <summary>Display name of the segment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).DisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).DisplayName = value ?? null; }

        /// <summary>Internal Acessors for PortVif</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPortVif> Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentUpdateInternal.PortVif { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).PortVif; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).PortVif = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentProperties Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentUpdateInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.WorkloadNetworkSegmentProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentUpdateInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for Status</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentUpdateInternal.Status { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).Status; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).Status = value; }

        /// <summary>Internal Acessors for Subnet</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentSubnet Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentUpdateInternal.Subnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).Subnet; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).Subnet = value; }

        /// <summary>Port Vif which segment is associated with.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPortVif> PortVif { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).PortVif; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentProperties _property;

        /// <summary>The updatable properties of a Segment update</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.WorkloadNetworkSegmentProperties()); set => this._property = value; }

        /// <summary>The provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).ProvisioningState; }

        /// <summary>NSX revision number.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public long? Revision { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).Revision; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).Revision = value ?? default(long); }

        /// <summary>Segment status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string Status { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).Status; }

        /// <summary>DHCP Range assigned for subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> SubnetDhcpRange { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).SubnetDhcpRange; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).SubnetDhcpRange = value ?? null /* arrayOf */; }

        /// <summary>Gateway address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string SubnetGatewayAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).SubnetGatewayAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal)Property).SubnetGatewayAddress = value ?? null; }

        /// <summary>Creates an new <see cref="WorkloadNetworkSegmentUpdate" /> instance.</summary>
        public WorkloadNetworkSegmentUpdate()
        {

        }
    }
    /// NSX Segment update
    public partial interface IWorkloadNetworkSegmentUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.IJsonSerializable
    {
        /// <summary>Gateway which to connect segment to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gateway which to connect segment to.",
        SerializedName = @"connectedGateway",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectedGateway { get; set; }
        /// <summary>Display name of the segment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Display name of the segment.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>Port Vif which segment is associated with.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Port Vif which segment is associated with.",
        SerializedName = @"portVif",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPortVif) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPortVif> PortVif { get;  }
        /// <summary>The provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The provisioning state",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.VMware.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Building", "Deleting", "Updating")]
        string ProvisioningState { get;  }
        /// <summary>NSX revision number.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"NSX revision number.",
        SerializedName = @"revision",
        PossibleTypes = new [] { typeof(long) })]
        long? Revision { get; set; }
        /// <summary>Segment status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Segment status.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.VMware.PSArgumentCompleterAttribute("SUCCESS", "FAILURE")]
        string Status { get;  }
        /// <summary>DHCP Range assigned for subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"DHCP Range assigned for subnet.",
        SerializedName = @"dhcpRanges",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> SubnetDhcpRange { get; set; }
        /// <summary>Gateway address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gateway address.",
        SerializedName = @"gatewayAddress",
        PossibleTypes = new [] { typeof(string) })]
        string SubnetGatewayAddress { get; set; }

    }
    /// NSX Segment update
    internal partial interface IWorkloadNetworkSegmentUpdateInternal

    {
        /// <summary>Gateway which to connect segment to.</summary>
        string ConnectedGateway { get; set; }
        /// <summary>Display name of the segment.</summary>
        string DisplayName { get; set; }
        /// <summary>Port Vif which segment is associated with.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPortVif> PortVif { get; set; }
        /// <summary>The updatable properties of a Segment update</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentProperties Property { get; set; }
        /// <summary>The provisioning state</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.VMware.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Building", "Deleting", "Updating")]
        string ProvisioningState { get; set; }
        /// <summary>NSX revision number.</summary>
        long? Revision { get; set; }
        /// <summary>Segment status.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.VMware.PSArgumentCompleterAttribute("SUCCESS", "FAILURE")]
        string Status { get; set; }
        /// <summary>Subnet which to connect segment to.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentSubnet Subnet { get; set; }
        /// <summary>DHCP Range assigned for subnet.</summary>
        System.Collections.Generic.List<string> SubnetDhcpRange { get; set; }
        /// <summary>Gateway address.</summary>
        string SubnetGatewayAddress { get; set; }

    }
}