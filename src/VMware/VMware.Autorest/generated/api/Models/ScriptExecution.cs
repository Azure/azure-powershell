// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VMware.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Extensions;

    /// <summary>An instance of a script executed by a user - custom or AVS</summary>
    public partial class ScriptExecution :
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecution,
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionInternal,
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IProxyResource" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IProxyResource __proxyResource = new Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.ProxyResource();

        /// <summary>Standard error output stream from the powershell execution</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> Error { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).Error; }

        /// <summary>
        /// Error message if the script was able to run, but if the script itself had
        /// errors or powershell threw an exception
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string FailureReason { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).FailureReason; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).FailureReason = value ?? null; }

        /// <summary>Time the script execution was finished</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public global::System.DateTime? FinishedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).FinishedAt; }

        /// <summary>
        /// Parameters that will be hidden/not visible to ARM, such as passwords and
        /// credentials
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionParameter> HiddenParameter { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).HiddenParameter; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).HiddenParameter = value ?? null /* arrayOf */; }

        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).Id; }

        /// <summary>Standard information out stream from the powershell execution</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> Information { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).Information; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.ISystemData Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).SystemData = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).Type = value; }

        /// <summary>Internal Acessors for Error</summary>
        System.Collections.Generic.List<string> Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionInternal.Error { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).Error; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).Error = value; }

        /// <summary>Internal Acessors for FinishedAt</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionInternal.FinishedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).FinishedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).FinishedAt = value; }

        /// <summary>Internal Acessors for Information</summary>
        System.Collections.Generic.List<string> Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionInternal.Information { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).Information; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).Information = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionProperties Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.ScriptExecutionProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for StartedAt</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionInternal.StartedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).StartedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).StartedAt = value; }

        /// <summary>Internal Acessors for SubmittedAt</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionInternal.SubmittedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).SubmittedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).SubmittedAt = value; }

        /// <summary>Internal Acessors for Warning</summary>
        System.Collections.Generic.List<string> Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionInternal.Warning { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).Warning; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).Warning = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).Name; }

        /// <summary>User-defined dictionary.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesNamedOutputs NamedOutput { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).NamedOutput; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).NamedOutput = value ?? null /* model class */; }

        /// <summary>Standard output stream from the powershell execution</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> Output { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).Output; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).Output = value ?? null /* arrayOf */; }

        /// <summary>Parameters the script will accept</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionParameter> Parameter { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).Parameter; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).Parameter = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionProperties _property;

        /// <summary>The resource-specific properties for this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.ScriptExecutionProperties()); set => this._property = value; }

        /// <summary>The state of the script execution resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).ProvisioningState; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>Time to live for the resource. If not provided, will be available for 60 days</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string Retention { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).Retention; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).Retention = value ?? null; }

        /// <summary>A reference to the script cmdlet resource if user is running a AVS script</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string ScriptCmdletId { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).ScriptCmdletId; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).ScriptCmdletId = value ?? null; }

        /// <summary>Time the script execution was started</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public global::System.DateTime? StartedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).StartedAt; }

        /// <summary>Time the script execution was submitted</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public global::System.DateTime? SubmittedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).SubmittedAt; }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inherited)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).SystemData; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).SystemDataCreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inherited)]
        public string SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).SystemDataCreatedByType = value ?? null; }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).SystemDataLastModifiedByType = value ?? null; }

        /// <summary>Time limit for execution</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string Timeout { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).Timeout; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).Timeout = value ?? null; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IResourceInternal)__proxyResource).Type; }

        /// <summary>Standard warning out stream from the powershell execution</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> Warning { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesInternal)Property).Warning; }

        /// <summary>Creates an new <see cref="ScriptExecution" /> instance.</summary>
        public ScriptExecution()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__proxyResource), __proxyResource);
            await eventListener.AssertObjectIsValid(nameof(__proxyResource), __proxyResource);
        }
    }
    /// An instance of a script executed by a user - custom or AVS
    public partial interface IScriptExecution :
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IProxyResource
    {
        /// <summary>Standard error output stream from the powershell execution</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Standard error output stream from the powershell execution",
        SerializedName = @"errors",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> Error { get;  }
        /// <summary>
        /// Error message if the script was able to run, but if the script itself had
        /// errors or powershell threw an exception
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Error message if the script was able to run, but if the script itself had
        errors or powershell threw an exception",
        SerializedName = @"failureReason",
        PossibleTypes = new [] { typeof(string) })]
        string FailureReason { get; set; }
        /// <summary>Time the script execution was finished</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Time the script execution was finished",
        SerializedName = @"finishedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? FinishedAt { get;  }
        /// <summary>
        /// Parameters that will be hidden/not visible to ARM, such as passwords and
        /// credentials
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Parameters that will be hidden/not visible to ARM, such as passwords and
        credentials",
        SerializedName = @"hiddenParameters",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionParameter) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionParameter> HiddenParameter { get; set; }
        /// <summary>Standard information out stream from the powershell execution</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Standard information out stream from the powershell execution",
        SerializedName = @"information",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> Information { get;  }
        /// <summary>User-defined dictionary.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"User-defined dictionary.",
        SerializedName = @"namedOutputs",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesNamedOutputs) })]
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesNamedOutputs NamedOutput { get; set; }
        /// <summary>Standard output stream from the powershell execution</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Standard output stream from the powershell execution",
        SerializedName = @"output",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> Output { get; set; }
        /// <summary>Parameters the script will accept</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Parameters the script will accept",
        SerializedName = @"parameters",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionParameter) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionParameter> Parameter { get; set; }
        /// <summary>The state of the script execution resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The state of the script execution resource",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.VMware.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Pending", "Running", "Cancelling", "Cancelled", "Deleting")]
        string ProvisioningState { get;  }
        /// <summary>Time to live for the resource. If not provided, will be available for 60 days</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Time to live for the resource. If not provided, will be available for 60 days",
        SerializedName = @"retention",
        PossibleTypes = new [] { typeof(string) })]
        string Retention { get; set; }
        /// <summary>A reference to the script cmdlet resource if user is running a AVS script</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"A reference to the script cmdlet resource if user is running a AVS script",
        SerializedName = @"scriptCmdletId",
        PossibleTypes = new [] { typeof(string) })]
        string ScriptCmdletId { get; set; }
        /// <summary>Time the script execution was started</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Time the script execution was started",
        SerializedName = @"startedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? StartedAt { get;  }
        /// <summary>Time the script execution was submitted</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Time the script execution was submitted",
        SerializedName = @"submittedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SubmittedAt { get;  }
        /// <summary>Time limit for execution</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Time limit for execution",
        SerializedName = @"timeout",
        PossibleTypes = new [] { typeof(string) })]
        string Timeout { get; set; }
        /// <summary>Standard warning out stream from the powershell execution</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Standard warning out stream from the powershell execution",
        SerializedName = @"warnings",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> Warning { get;  }

    }
    /// An instance of a script executed by a user - custom or AVS
    internal partial interface IScriptExecutionInternal :
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IProxyResourceInternal
    {
        /// <summary>Standard error output stream from the powershell execution</summary>
        System.Collections.Generic.List<string> Error { get; set; }
        /// <summary>
        /// Error message if the script was able to run, but if the script itself had
        /// errors or powershell threw an exception
        /// </summary>
        string FailureReason { get; set; }
        /// <summary>Time the script execution was finished</summary>
        global::System.DateTime? FinishedAt { get; set; }
        /// <summary>
        /// Parameters that will be hidden/not visible to ARM, such as passwords and
        /// credentials
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionParameter> HiddenParameter { get; set; }
        /// <summary>Standard information out stream from the powershell execution</summary>
        System.Collections.Generic.List<string> Information { get; set; }
        /// <summary>User-defined dictionary.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionPropertiesNamedOutputs NamedOutput { get; set; }
        /// <summary>Standard output stream from the powershell execution</summary>
        System.Collections.Generic.List<string> Output { get; set; }
        /// <summary>Parameters the script will accept</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionParameter> Parameter { get; set; }
        /// <summary>The resource-specific properties for this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IScriptExecutionProperties Property { get; set; }
        /// <summary>The state of the script execution resource</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.VMware.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Pending", "Running", "Cancelling", "Cancelled", "Deleting")]
        string ProvisioningState { get; set; }
        /// <summary>Time to live for the resource. If not provided, will be available for 60 days</summary>
        string Retention { get; set; }
        /// <summary>A reference to the script cmdlet resource if user is running a AVS script</summary>
        string ScriptCmdletId { get; set; }
        /// <summary>Time the script execution was started</summary>
        global::System.DateTime? StartedAt { get; set; }
        /// <summary>Time the script execution was submitted</summary>
        global::System.DateTime? SubmittedAt { get; set; }
        /// <summary>Time limit for execution</summary>
        string Timeout { get; set; }
        /// <summary>Standard warning out stream from the powershell execution</summary>
        System.Collections.Generic.List<string> Warning { get; set; }

    }
}