// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

namespace Microsoft.WindowsAzure.Commands.ServiceManagement.IaaS.Extensions.MicrosoftAntimalware
{
    using System.Collections.Generic;
    using System.Linq;
    using System.Management.Automation;

    [Cmdlet(
        VerbsCommon.Get,
        VirtualMachineMicrosoftAntimalwareExtensionNoun,
        DefaultParameterSetName = GetMicrosoftAntimalwareExtensionParamSetName),
    OutputType(
        typeof(IEnumerable<VirtualMachineMicrosoftAntimalwareExtensionContext>))]
    public class GetAzureVMMicrosoftAntimalwareExtension : VirtualMachineMicrosoftAntimalwareExtensionCmdletBase
    {
        protected const string GetMicrosoftAntimalwareExtensionParamSetName = "GetMicrosoftAntimalwareExtension";

        internal void ExecuteCommand()
        {
            // extract plain text version of diagnostics configuration if it exists
            Publisher = DiagnosticsExtensionNamespace;
            ExtensionName = DiagnosticsExtensionName;
            ReferenceName = DiagnosticsExtensionReferenceName;
            string tmpDiagnosticsConfig = null;
            var ext = GetDiagnosticsExtensionContext();
            if (ext != null)
            {
                tmpDiagnosticsConfig = ext.AntimalwareMonitoringConfiguration;
            }
            
            // extract antimalware extension and add plain xml configs prior to write
            Publisher = MicrosoftAntimalwareExtensionNamespace;
            ExtensionName = MicrosoftAntimalwareExtensionName;
            ReferenceName = MicrosoftAntimalwareExtensionReferenceName;
            var extensionRefs =
                string.IsNullOrEmpty(ReferenceName) && string.IsNullOrEmpty(ExtensionName) ?
                ResourceExtensionReferences : GetPredicateExtensionList();

            WriteObject(
                extensionRefs == null ? null : extensionRefs.Select(
                r => new VirtualMachineMicrosoftAntimalwareExtensionContext
                {
                    ExtensionName = r.Name,
                    Publisher = r.Publisher,
                    ReferenceName = r.ReferenceName,
                    Version = r.Version,
                    PublicConfiguration = IsLegacyExtension(r.Name, r.Publisher, r.Version) ? GetConfiguration(r) : GetConfiguration(r, PublicTypeStr),
                    State = r.State,
                    AntimalwareMonitoringConfiguration = tmpDiagnosticsConfig,
                }).Where(
                    r => r.ExtensionName == VirtualMachineMicrosoftAntimalwareExtensionCmdletBase.MicrosoftAntimalwareExtensionName
                ).FirstOrDefault());
        }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            ExecuteCommand();
        }
    }
}
