// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.ManagedCache;
using Microsoft.Azure.Management.ManagedCache.Models;

namespace Microsoft.Azure.Management.ManagedCache.Models
{
    public partial class CacheServiceCreateParameters
    {
        private string _eTag;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string ETag
        {
            get { return this._eTag; }
            set { this._eTag = value; }
        }
        
        private IntrinsicSettings _intrinsicSettingsSection;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IntrinsicSettings IntrinsicSettingsSection
        {
            get { return this._intrinsicSettingsSection; }
            set { this._intrinsicSettingsSection = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _resourceProviderNamespace;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string ResourceProviderNamespace
        {
            get { return this._resourceProviderNamespace; }
            set { this._resourceProviderNamespace = value; }
        }
        
        private string _schemaVersion;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string SchemaVersion
        {
            get { return this._schemaVersion; }
            set { this._schemaVersion = value; }
        }
        
        private IntrinsicSettings _settings;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IntrinsicSettings Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        private string _type;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the CacheServiceCreateParameters
        /// class.
        /// </summary>
        public CacheServiceCreateParameters()
        {
        }
    }
    
    public enum CacheServiceSkuType
    {
        Basic = 0,
        
        Standard = 1,
        
        Premium = 2,
    }
    
    /// <summary>
    /// A standard service response including an HTTP status code and request
    /// ID.
    /// </summary>
    public partial class CachingKeysResponse : AzureOperationResponse
    {
        private string _primary;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string Primary
        {
            get { return this._primary; }
            set { this._primary = value; }
        }
        
        private string _secondary;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string Secondary
        {
            get { return this._secondary; }
            set { this._secondary = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the CachingKeysResponse class.
        /// </summary>
        public CachingKeysResponse()
        {
        }
    }
    
    /// <summary>
    /// A standard service response including an HTTP status code and request
    /// ID.
    /// </summary>
    public partial class CheckCacheNameAvailabilityResponse : AzureOperationResponse
    {
        private bool _available;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public bool Available
        {
            get { return this._available; }
            set { this._available = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// CheckCacheNameAvailabilityResponse class.
        /// </summary>
        public CheckCacheNameAvailabilityResponse()
        {
        }
    }
    
    public partial class CloudServiceCreateParameters
    {
        private string _description;
        
        /// <summary>
        /// Required. Description for the cloud service.
        /// </summary>
        public string Description
        {
            get { return this._description; }
            set { this._description = value; }
        }
        
        private string _email;
        
        /// <summary>
        /// Optional. Optional e-mail address to associate with the service.
        /// </summary>
        public string Email
        {
            get { return this._email; }
            set { this._email = value; }
        }
        
        private string _geoRegion;
        
        /// <summary>
        /// Required. The region for the cloud service. This field cannot be
        /// updated after the cloud service is created.
        /// </summary>
        public string GeoRegion
        {
            get { return this._geoRegion; }
            set { this._geoRegion = value; }
        }
        
        private string _label;
        
        /// <summary>
        /// Required. Label for the cloud service.
        /// </summary>
        public string Label
        {
            get { return this._label; }
            set { this._label = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the CloudServiceCreateParameters
        /// class.
        /// </summary>
        public CloudServiceCreateParameters()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the CloudServiceCreateParameters
        /// class with required arguments.
        /// </summary>
        public CloudServiceCreateParameters(string label, string description, string geoRegion)
            : this()
        {
            if (label == null)
            {
                throw new ArgumentNullException("label");
            }
            if (description == null)
            {
                throw new ArgumentNullException("description");
            }
            if (geoRegion == null)
            {
                throw new ArgumentNullException("geoRegion");
            }
            this.Label = label;
            this.Description = description;
            this.GeoRegion = geoRegion;
        }
    }
    
    /// <summary>
    /// Information about a retrieved Cloud Service.
    /// </summary>
    public partial class CloudServiceGetResponse : AzureOperationResponse
    {
        private string _geoLocation;
        
        /// <summary>
        /// Optional. The location associated with the cloud service.
        /// </summary>
        public string GeoLocation
        {
            get { return this._geoLocation; }
            set { this._geoLocation = value; }
        }
        
        private IList<CloudServiceResource> _resources;
        
        /// <summary>
        /// Optional. A collection of resources.
        /// </summary>
        public IList<CloudServiceResource> Resources
        {
            get { return this._resources; }
            set { this._resources = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the CloudServiceGetResponse class.
        /// </summary>
        public CloudServiceGetResponse()
        {
            this.Resources = new LazyList<CloudServiceResource>();
        }
    }
    
    /// <summary>
    /// The response structure for the Cloud Service List operation.
    /// </summary>
    public partial class CloudServiceListResponse : AzureOperationResponse, IEnumerable<CloudServiceListResponse.CloudService>
    {
        private IList<CloudServiceListResponse.CloudService> _cloudServices;
        
        /// <summary>
        /// Optional. The list of cloud service locations for this subscription.
        /// </summary>
        public IList<CloudServiceListResponse.CloudService> CloudServices
        {
            get { return this._cloudServices; }
            set { this._cloudServices = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the CloudServiceListResponse class.
        /// </summary>
        public CloudServiceListResponse()
        {
            this.CloudServices = new LazyList<CloudServiceListResponse.CloudService>();
        }
        
        /// <summary>
        /// Gets the sequence of CloudServices.
        /// </summary>
        public IEnumerator<CloudServiceListResponse.CloudService> GetEnumerator()
        {
            return this.CloudServices.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of CloudServices.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        /// <summary>
        /// Defines a cloud service-supporting region in which a item is
        /// located.
        /// </summary>
        public partial class CloudService
        {
            private string _description;
            
            /// <summary>
            /// Optional. The description of the cloud service region.
            /// </summary>
            public string Description
            {
                get { return this._description; }
                set { this._description = value; }
            }
            
            private string _geoRegion;
            
            /// <summary>
            /// Optional. The geographical region in which this cloud service
            /// can run.
            /// </summary>
            public string GeoRegion
            {
                get { return this._geoRegion; }
                set { this._geoRegion = value; }
            }
            
            private string _label;
            
            /// <summary>
            /// Optional. The label of the cloud service region.
            /// </summary>
            public string Label
            {
                get { return this._label; }
                set { this._label = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// Optional. The name of the cloud service region.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private IList<CloudServiceResource> _resources;
            
            /// <summary>
            /// Optional. A list of existing resources installed into a cloud
            /// service region.
            /// </summary>
            public IList<CloudServiceResource> Resources
            {
                get { return this._resources; }
                set { this._resources = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the CloudService class.
            /// </summary>
            public CloudService()
            {
                this.Resources = new LazyList<CloudServiceResource>();
            }
        }
    }
    
    /// <summary>
    /// The status of the asynchronous request.
    /// </summary>
    public enum CloudServiceOperationStatus
    {
        /// <summary>
        /// The asynchronous request is in progress.
        /// </summary>
        InProgress = 0,
        
        /// <summary>
        /// The asynchronous request succeeded.
        /// </summary>
        Succeeded = 1,
        
        /// <summary>
        /// The asynchronous request failed.
        /// </summary>
        Failed = 2,
    }
    
    /// <summary>
    /// The response body contains the status of the specified asynchronous
    /// operation, indicating whether it has succeeded, is inprogress, or has
    /// failed. Note that this status is distinct from the HTTP status code
    /// returned for the Get Operation Status operation itself.  If the
    /// asynchronous operation succeeded, the response body includes the HTTP
    /// status code for the successful request.  If the asynchronous operation
    /// failed, the response body includes the HTTP status code for the failed
    /// request, and also includes error information regarding the failure.
    /// </summary>
    public partial class CloudServiceOperationStatusResponse : AzureOperationResponse
    {
        private CloudServiceOperationStatusResponse.ErrorDetails _error;
        
        /// <summary>
        /// Optional. If the asynchronous operation failed, the response body
        /// includes the HTTP status code for the failed request, and also
        /// includes error information regarding the failure.
        /// </summary>
        public CloudServiceOperationStatusResponse.ErrorDetails Error
        {
            get { return this._error; }
            set { this._error = value; }
        }
        
        private HttpStatusCode _httpStatusCode;
        
        /// <summary>
        /// Optional. The HTTP status code for the asynchronous request.
        /// </summary>
        public HttpStatusCode HttpStatusCode
        {
            get { return this._httpStatusCode; }
            set { this._httpStatusCode = value; }
        }
        
        private string _id;
        
        /// <summary>
        /// Optional. The request ID of the asynchronous request. This value is
        /// returned in the x-ms-request-id response header of the
        /// asynchronous request.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private CloudServiceOperationStatus _status;
        
        /// <summary>
        /// Optional. The status of the asynchronous request.
        /// </summary>
        public CloudServiceOperationStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// CloudServiceOperationStatusResponse class.
        /// </summary>
        public CloudServiceOperationStatusResponse()
        {
        }
        
        /// <summary>
        /// If the asynchronous operation failed, the response body includes
        /// the HTTP status code for the failed request, and also includes
        /// error information regarding the failure.
        /// </summary>
        public partial class ErrorDetails
        {
            private string _code;
            
            /// <summary>
            /// Optional. The management service error code returned if the
            /// asynchronous request failed.
            /// </summary>
            public string Code
            {
                get { return this._code; }
                set { this._code = value; }
            }
            
            private string _message;
            
            /// <summary>
            /// Optional. The management service error message returned if the
            /// asynchronous request failed.
            /// </summary>
            public string Message
            {
                get { return this._message; }
                set { this._message = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the ErrorDetails class.
            /// </summary>
            public ErrorDetails()
            {
            }
        }
    }
    
    public partial class CloudServiceResource
    {
        private string _eTag;
        
        /// <summary>
        /// Optional. The ETag for this resource.
        /// </summary>
        public string ETag
        {
            get { return this._eTag; }
            set { this._eTag = value; }
        }
        
        private IntrinsicSettings _intrinsicSettingsSection;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IntrinsicSettings IntrinsicSettingsSection
        {
            get { return this._intrinsicSettingsSection; }
            set { this._intrinsicSettingsSection = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. The user-input name of this item.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _namespace;
        
        /// <summary>
        /// Optional. The namespace in which this item resides.
        /// </summary>
        public string Namespace
        {
            get { return this._namespace; }
            set { this._namespace = value; }
        }
        
        private IDictionary<string, string> _outputItems;
        
        /// <summary>
        /// Optional. Output items associated with an individual resource.
        /// </summary>
        public IDictionary<string, string> OutputItems
        {
            get { return this._outputItems; }
            set { this._outputItems = value; }
        }
        
        private string _plan;
        
        /// <summary>
        /// Optional. The plan for this item as selected by the user.
        /// </summary>
        public string Plan
        {
            get { return this._plan; }
            set { this._plan = value; }
        }
        
        private string _schemaVersion;
        
        /// <summary>
        /// Optional. The schema version for this resource.
        /// </summary>
        public string SchemaVersion
        {
            get { return this._schemaVersion; }
            set { this._schemaVersion = value; }
        }
        
        private string _state;
        
        /// <summary>
        /// Optional. The state of this resource.
        /// </summary>
        public string State
        {
            get { return this._state; }
            set { this._state = value; }
        }
        
        private string _subState;
        
        /// <summary>
        /// Optional. The state of this resource.
        /// </summary>
        public string SubState
        {
            get { return this._subState; }
            set { this._subState = value; }
        }
        
        private string _type;
        
        /// <summary>
        /// Optional. The type of store item.
        /// </summary>
        public string Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        private IList<CloudServiceResource.UsageLimit> _usageLimits;
        
        /// <summary>
        /// Optional. Usage meters associated with an individual resource.
        /// </summary>
        public IList<CloudServiceResource.UsageLimit> UsageLimits
        {
            get { return this._usageLimits; }
            set { this._usageLimits = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the CloudServiceResource class.
        /// </summary>
        public CloudServiceResource()
        {
            this.OutputItems = new LazyDictionary<string, string>();
            this.UsageLimits = new LazyList<CloudServiceResource.UsageLimit>();
        }
        
        /// <summary>
        /// The operation status of an individual resource item.
        /// </summary>
        public partial class OperationStatus
        {
            private string _result;
            
            /// <summary>
            /// Optional. The result of this operation status.
            /// </summary>
            public string Result
            {
                get { return this._result; }
                set { this._result = value; }
            }
            
            private string _type;
            
            /// <summary>
            /// Optional. The type of this operation status.
            /// </summary>
            public string Type
            {
                get { return this._type; }
                set { this._type = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the OperationStatus class.
            /// </summary>
            public OperationStatus()
            {
            }
        }
        
        /// <summary>
        /// Describes the current utilization and metering of a resource item.
        /// </summary>
        public partial class UsageLimit
        {
            private string _amountIncluded;
            
            /// <summary>
            /// Optional. Defines the limit of this usage included in this
            /// resource's plan.
            /// </summary>
            public string AmountIncluded
            {
                get { return this._amountIncluded; }
                set { this._amountIncluded = value; }
            }
            
            private string _amountUsed;
            
            /// <summary>
            /// Optional. The amount of this resource that has already been
            /// used.
            /// </summary>
            public string AmountUsed
            {
                get { return this._amountUsed; }
                set { this._amountUsed = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// Optional. The name of this usage limit.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _unit;
            
            /// <summary>
            /// Optional. The unit in which this usage limit is measured.
            /// </summary>
            public string Unit
            {
                get { return this._unit; }
                set { this._unit = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the UsageLimit class.
            /// </summary>
            public UsageLimit()
            {
            }
        }
    }
    
    public partial class IntrinsicSettings
    {
        private IntrinsicSettings.CacheServiceInput _cacheServiceInputSection;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IntrinsicSettings.CacheServiceInput CacheServiceInputSection
        {
            get { return this._cacheServiceInputSection; }
            set { this._cacheServiceInputSection = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the IntrinsicSettings class.
        /// </summary>
        public IntrinsicSettings()
        {
        }
        
        public partial class CacheServiceInput
        {
            private string _location;
            
            /// <summary>
            /// Optional.
            /// </summary>
            public string Location
            {
                get { return this._location; }
                set { this._location = value; }
            }
            
            private IList<IntrinsicSettings.CacheServiceInput.NamedCache> _namedCaches;
            
            /// <summary>
            /// Optional.
            /// </summary>
            public IList<IntrinsicSettings.CacheServiceInput.NamedCache> NamedCaches
            {
                get { return this._namedCaches; }
                set { this._namedCaches = value; }
            }
            
            private int _objectSizeInBytes;
            
            /// <summary>
            /// Optional.
            /// </summary>
            public int ObjectSizeInBytes
            {
                get { return this._objectSizeInBytes; }
                set { this._objectSizeInBytes = value; }
            }
            
            private string _serviceVersion;
            
            /// <summary>
            /// Optional.
            /// </summary>
            public string ServiceVersion
            {
                get { return this._serviceVersion; }
                set { this._serviceVersion = value; }
            }
            
            private int _skuCount;
            
            /// <summary>
            /// Optional.
            /// </summary>
            public int SkuCount
            {
                get { return this._skuCount; }
                set { this._skuCount = value; }
            }
            
            private CacheServiceSkuType _skuType;
            
            /// <summary>
            /// Optional.
            /// </summary>
            public CacheServiceSkuType SkuType
            {
                get { return this._skuType; }
                set { this._skuType = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the CacheServiceInput class.
            /// </summary>
            public CacheServiceInput()
            {
                this.NamedCaches = new LazyList<IntrinsicSettings.CacheServiceInput.NamedCache>();
            }
            
            public partial class NamedCache
            {
                private string _cacheName;
                
                /// <summary>
                /// Optional.
                /// </summary>
                public string CacheName
                {
                    get { return this._cacheName; }
                    set { this._cacheName = value; }
                }
                
                private string _evictionPolicy;
                
                /// <summary>
                /// Optional.
                /// </summary>
                public string EvictionPolicy
                {
                    get { return this._evictionPolicy; }
                    set { this._evictionPolicy = value; }
                }
                
                private IntrinsicSettings.CacheServiceInput.NamedCache.ExpirationSettings _expirationSettingsSection;
                
                /// <summary>
                /// Optional.
                /// </summary>
                public IntrinsicSettings.CacheServiceInput.NamedCache.ExpirationSettings ExpirationSettingsSection
                {
                    get { return this._expirationSettingsSection; }
                    set { this._expirationSettingsSection = value; }
                }
                
                private bool _highAvailabilityEnabled;
                
                /// <summary>
                /// Optional.
                /// </summary>
                public bool HighAvailabilityEnabled
                {
                    get { return this._highAvailabilityEnabled; }
                    set { this._highAvailabilityEnabled = value; }
                }
                
                private bool _notificationsEnabled;
                
                /// <summary>
                /// Optional.
                /// </summary>
                public bool NotificationsEnabled
                {
                    get { return this._notificationsEnabled; }
                    set { this._notificationsEnabled = value; }
                }
                
                /// <summary>
                /// Initializes a new instance of the NamedCache class.
                /// </summary>
                public NamedCache()
                {
                }
                
                public partial class ExpirationSettings
                {
                    private int _timeToLiveInMinutes;
                    
                    /// <summary>
                    /// Optional.
                    /// </summary>
                    public int TimeToLiveInMinutes
                    {
                        get { return this._timeToLiveInMinutes; }
                        set { this._timeToLiveInMinutes = value; }
                    }
                    
                    private string _type;
                    
                    /// <summary>
                    /// Optional.
                    /// </summary>
                    public string Type
                    {
                        get { return this._type; }
                        set { this._type = value; }
                    }
                    
                    /// <summary>
                    /// Initializes a new instance of the ExpirationSettings
                    /// class.
                    /// </summary>
                    public ExpirationSettings()
                    {
                    }
                }
            }
        }
    }
    
    public partial class RegenerateKeysParameters
    {
        private string _keyType;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string KeyType
        {
            get { return this._keyType; }
            set { this._keyType = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RegenerateKeysParameters class.
        /// </summary>
        public RegenerateKeysParameters()
        {
        }
    }
    
    /// <summary>
    /// A standard service response including an HTTP status code and request
    /// ID.
    /// </summary>
    public partial class RegionsResponse : AzureOperationResponse, IEnumerable<RegionsResponse.Region>
    {
        private IList<RegionsResponse.Region> _regions;
        
        /// <summary>
        /// Optional. The list of region with caching service
        /// </summary>
        public IList<RegionsResponse.Region> Regions
        {
            get { return this._regions; }
            set { this._regions = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RegionsResponse class.
        /// </summary>
        public RegionsResponse()
        {
            this.Regions = new LazyList<RegionsResponse.Region>();
        }
        
        /// <summary>
        /// Gets the sequence of Regions.
        /// </summary>
        public IEnumerator<RegionsResponse.Region> GetEnumerator()
        {
            return this.Regions.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Regions.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        /// <summary>
        /// Defines a caching service region
        /// </summary>
        public partial class Region
        {
            private string _location;
            
            /// <summary>
            /// Optional. The location of the caching service.
            /// </summary>
            public string Location
            {
                get { return this._location; }
                set { this._location = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the Region class.
            /// </summary>
            public Region()
            {
            }
        }
    }
}

namespace Microsoft.Azure.Management.ManagedCache
{
    public static partial class ManagedCacheClientExtensions
    {
        /// <summary>
        /// The Get Operation Status operation returns the status of
        /// thespecified operation. After calling an asynchronous operation,
        /// you can call Get Operation Status to determine whether the
        /// operation has succeeded, failed, or is still in progress.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460783.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.IManagedCacheClient.
        /// </param>
        /// <param name='requestId'>
        /// Required. The request ID for the request you wish to track. The
        /// request ID is returned in the x-ms-request-id response header for
        /// every request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static CloudServiceOperationStatusResponse GetOperationStatus(this IManagedCacheClient operations, string requestId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IManagedCacheClient)s).GetOperationStatusAsync(requestId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of
        /// thespecified operation. After calling an asynchronous operation,
        /// you can call Get Operation Status to determine whether the
        /// operation has succeeded, failed, or is still in progress.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460783.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.IManagedCacheClient.
        /// </param>
        /// <param name='requestId'>
        /// Required. The request ID for the request you wish to track. The
        /// request ID is returned in the x-ms-request-id response header for
        /// every request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<CloudServiceOperationStatusResponse> GetOperationStatusAsync(this IManagedCacheClient operations, string requestId)
        {
            return operations.GetOperationStatusAsync(requestId, CancellationToken.None);
        }
    }
    
    public partial interface IManagedCacheClient : IDisposable
    {
        /// <summary>
        /// The URI used as the base for all Service Management requests.
        /// </summary>
        Uri BaseUri
        {
            get; set; 
        }
        
        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; set; 
        }
        
        /// <summary>
        /// The Managed Cache API includes operations for managing cache
        /// services
        /// </summary>
        ICacheServiceOperations CacheServices
        {
            get; 
        }
        
        ICloudServiceOperations CloudServices
        {
            get; 
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of
        /// thespecified operation. After calling an asynchronous operation,
        /// you can call Get Operation Status to determine whether the
        /// operation has succeeded, failed, or is still in progress.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460783.aspx
        /// for more information)
        /// </summary>
        /// <param name='requestId'>
        /// The request ID for the request you wish to track. The request ID is
        /// returned in the x-ms-request-id response header for every request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        Task<CloudServiceOperationStatusResponse> GetOperationStatusAsync(string requestId, CancellationToken cancellationToken);
    }
    
    public partial class ManagedCacheClient : ServiceClient<ManagedCacheClient>, IManagedCacheClient
    {
        private Uri _baseUri;
        
        /// <summary>
        /// The URI used as the base for all Service Management requests.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
            set { this._baseUri = value; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
            set { this._credentials = value; }
        }
        
        private ICacheServiceOperations _cacheServices;
        
        /// <summary>
        /// The Managed Cache API includes operations for managing cache
        /// services
        /// </summary>
        public virtual ICacheServiceOperations CacheServices
        {
            get { return this._cacheServices; }
        }
        
        private ICloudServiceOperations _cloudServices;
        
        public virtual ICloudServiceOperations CloudServices
        {
            get { return this._cloudServices; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ManagedCacheClient class.
        /// </summary>
        public ManagedCacheClient()
            : base()
        {
            this._cacheServices = new CacheServiceOperations(this);
            this._cloudServices = new CloudServiceOperations(this);
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the ManagedCacheClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. When you create a Windows Azure subscription, it is
        /// uniquely identified by a subscription ID. The subscription ID
        /// forms part of the URI for every call that you make to the Service
        /// Management API.  The Windows Azure Service ManagementAPI use
        /// mutual authentication of management certificates over SSL to
        /// ensure that a request made to the service is secure.  No anonymous
        /// requests are allowed.
        /// </param>
        /// <param name='baseUri'>
        /// Optional. The URI used as the base for all Service Management
        /// requests.
        /// </param>
        public ManagedCacheClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the ManagedCacheClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. When you create a Windows Azure subscription, it is
        /// uniquely identified by a subscription ID. The subscription ID
        /// forms part of the URI for every call that you make to the Service
        /// Management API.  The Windows Azure Service ManagementAPI use
        /// mutual authentication of management certificates over SSL to
        /// ensure that a request made to the service is secure.  No anonymous
        /// requests are allowed.
        /// </param>
        public ManagedCacheClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.core.windows.net");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the ManagedCacheClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public ManagedCacheClient(HttpClient httpClient)
            : base(httpClient)
        {
            this._cacheServices = new CacheServiceOperations(this);
            this._cloudServices = new CloudServiceOperations(this);
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the ManagedCacheClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. When you create a Windows Azure subscription, it is
        /// uniquely identified by a subscription ID. The subscription ID
        /// forms part of the URI for every call that you make to the Service
        /// Management API.  The Windows Azure Service ManagementAPI use
        /// mutual authentication of management certificates over SSL to
        /// ensure that a request made to the service is secure.  No anonymous
        /// requests are allowed.
        /// </param>
        /// <param name='baseUri'>
        /// Optional. The URI used as the base for all Service Management
        /// requests.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public ManagedCacheClient(SubscriptionCloudCredentials credentials, Uri baseUri, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the ManagedCacheClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. When you create a Windows Azure subscription, it is
        /// uniquely identified by a subscription ID. The subscription ID
        /// forms part of the URI for every call that you make to the Service
        /// Management API.  The Windows Azure Service ManagementAPI use
        /// mutual authentication of management certificates over SSL to
        /// ensure that a request made to the service is secure.  No anonymous
        /// requests are allowed.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public ManagedCacheClient(SubscriptionCloudCredentials credentials, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.core.windows.net");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Clones properties from current instance to another
        /// ManagedCacheClient instance
        /// </summary>
        /// <param name='client'>
        /// Instance of ManagedCacheClient to clone to
        /// </param>
        protected override void Clone(ServiceClient<ManagedCacheClient> client)
        {
            base.Clone(client);
            
            if (client is ManagedCacheClient)
            {
                ManagedCacheClient clonedClient = ((ManagedCacheClient)client);
                
                clonedClient._credentials = this._credentials;
                clonedClient._baseUri = this._baseUri;
                
                clonedClient.Credentials.InitializeServiceClient(clonedClient);
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of
        /// thespecified operation. After calling an asynchronous operation,
        /// you can call Get Operation Status to determine whether the
        /// operation has succeeded, failed, or is still in progress.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460783.aspx
        /// for more information)
        /// </summary>
        /// <param name='requestId'>
        /// Required. The request ID for the request you wish to track. The
        /// request ID is returned in the x-ms-request-id response header for
        /// every request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<CloudServiceOperationStatusResponse> GetOperationStatusAsync(string requestId, CancellationToken cancellationToken)
        {
            // Validate
            if (requestId == null)
            {
                throw new ArgumentNullException("requestId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("requestId", requestId);
                TracingAdapter.Enter(invocationId, this, "GetOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = (this.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Credentials.SubscriptionId)) + "/operations/" + Uri.EscapeDataString(requestId);
            string baseUrl = this.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CloudServiceOperationStatusResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CloudServiceOperationStatusResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement operationElement = responseDoc.Element(XName.Get("Operation", "http://schemas.microsoft.com/windowsazure"));
                        if (operationElement != null)
                        {
                            XElement idElement = operationElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                string idInstance = idElement.Value;
                                result.Id = idInstance;
                            }
                            
                            XElement statusElement = operationElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                            if (statusElement != null)
                            {
                                CloudServiceOperationStatus statusInstance = ((CloudServiceOperationStatus)Enum.Parse(typeof(CloudServiceOperationStatus), statusElement.Value, true));
                                result.Status = statusInstance;
                            }
                            
                            XElement httpStatusCodeElement = operationElement.Element(XName.Get("HttpStatusCode", "http://schemas.microsoft.com/windowsazure"));
                            if (httpStatusCodeElement != null)
                            {
                                HttpStatusCode httpStatusCodeInstance = ((HttpStatusCode)Enum.Parse(typeof(HttpStatusCode), httpStatusCodeElement.Value, true));
                                result.HttpStatusCode = httpStatusCodeInstance;
                            }
                            
                            XElement errorElement = operationElement.Element(XName.Get("Error", "http://schemas.microsoft.com/windowsazure"));
                            if (errorElement != null)
                            {
                                CloudServiceOperationStatusResponse.ErrorDetails errorInstance = new CloudServiceOperationStatusResponse.ErrorDetails();
                                result.Error = errorInstance;
                                
                                XElement codeElement = errorElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                if (codeElement != null)
                                {
                                    string codeInstance = codeElement.Value;
                                    errorInstance.Code = codeInstance;
                                }
                                
                                XElement messageElement = errorElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                if (messageElement != null)
                                {
                                    string messageInstance = messageElement.Value;
                                    errorInstance.Message = messageInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class CacheServiceOperationsExtensions
    {
        /// <summary>
        /// Creates a new Cache Service in specified subscription and cloud
        /// service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICacheServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. A name of the cache service. The name can be up to 20
        /// characters  in length with minimum 6 characters and must be all
        /// lower cases.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameter supplied to create a cache service
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginCreatingCacheService(this ICacheServiceOperations operations, string cloudServiceName, string cacheServiceName, CacheServiceCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICacheServiceOperations)s).BeginCreatingCacheServiceAsync(cloudServiceName, cacheServiceName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates a new Cache Service in specified subscription and cloud
        /// service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICacheServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. A name of the cache service. The name can be up to 20
        /// characters  in length with minimum 6 characters and must be all
        /// lower cases.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameter supplied to create a cache service
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginCreatingCacheServiceAsync(this ICacheServiceOperations operations, string cloudServiceName, string cacheServiceName, CacheServiceCreateParameters parameters)
        {
            return operations.BeginCreatingCacheServiceAsync(cloudServiceName, cacheServiceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The begin of deleting Cache Service.This operation is an
        /// asynchronous operation. To determine whether service has finished
        /// processing the request, call Get Operation.  (see
        /// http://msdn.microsoft.com/en-us/library/hh758254.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICacheServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. A name of the cache service.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginDeleting(this ICacheServiceOperations operations, string cloudServiceName, string cacheServiceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICacheServiceOperations)s).BeginDeletingAsync(cloudServiceName, cacheServiceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The begin of deleting Cache Service.This operation is an
        /// asynchronous operation. To determine whether service has finished
        /// processing the request, call Get Operation.  (see
        /// http://msdn.microsoft.com/en-us/library/hh758254.aspx for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICacheServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. A name of the cache service.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginDeletingAsync(this ICacheServiceOperations operations, string cloudServiceName, string cacheServiceName)
        {
            return operations.BeginDeletingAsync(cloudServiceName, cacheServiceName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get access keys of Cache Service
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICacheServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The cloud service name.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. The cache service name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static CheckCacheNameAvailabilityResponse CheckNameAvailability(this ICacheServiceOperations operations, string cloudServiceName, string cacheServiceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICacheServiceOperations)s).CheckNameAvailabilityAsync(cloudServiceName, cacheServiceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get access keys of Cache Service
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICacheServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The cloud service name.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. The cache service name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<CheckCacheNameAvailabilityResponse> CheckNameAvailabilityAsync(this ICacheServiceOperations operations, string cloudServiceName, string cacheServiceName)
        {
            return operations.CheckNameAvailabilityAsync(cloudServiceName, cacheServiceName, CancellationToken.None);
        }
        
        /// <summary>
        /// Creates a new Cache Service in specified subscription and cloud
        /// service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICacheServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. The name of the cache service. The name can be up to 20
        /// characters  in length with minimum 6 characters and must be all
        /// lower cases.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameter supplied to create a cache service
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static CloudServiceOperationStatusResponse CreateCacheService(this ICacheServiceOperations operations, string cloudServiceName, string cacheServiceName, CacheServiceCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICacheServiceOperations)s).CreateCacheServiceAsync(cloudServiceName, cacheServiceName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates a new Cache Service in specified subscription and cloud
        /// service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICacheServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. The name of the cache service. The name can be up to 20
        /// characters  in length with minimum 6 characters and must be all
        /// lower cases.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameter supplied to create a cache service
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<CloudServiceOperationStatusResponse> CreateCacheServiceAsync(this ICacheServiceOperations operations, string cloudServiceName, string cacheServiceName, CacheServiceCreateParameters parameters)
        {
            return operations.CreateCacheServiceAsync(cloudServiceName, cacheServiceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Delete Cache Service in specified subscription and cloud service.
        /// (see http://msdn.microsoft.com/en-us/library/hh758254.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICacheServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. A name of the cache service.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static CloudServiceOperationStatusResponse Delete(this ICacheServiceOperations operations, string cloudServiceName, string cacheServiceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICacheServiceOperations)s).DeleteAsync(cloudServiceName, cacheServiceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Delete Cache Service in specified subscription and cloud service.
        /// (see http://msdn.microsoft.com/en-us/library/hh758254.aspx for
        /// more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICacheServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. A name of the cache service.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<CloudServiceOperationStatusResponse> DeleteAsync(this ICacheServiceOperations operations, string cloudServiceName, string cacheServiceName)
        {
            return operations.DeleteAsync(cloudServiceName, cacheServiceName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get access keys of Cache Service
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICacheServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The cloud service name.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. The cache service name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static CachingKeysResponse GetKeys(this ICacheServiceOperations operations, string cloudServiceName, string cacheServiceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICacheServiceOperations)s).GetKeysAsync(cloudServiceName, cacheServiceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get access keys of Cache Service
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICacheServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The cloud service name.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. The cache service name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<CachingKeysResponse> GetKeysAsync(this ICacheServiceOperations operations, string cloudServiceName, string cacheServiceName)
        {
            return operations.GetKeysAsync(cloudServiceName, cacheServiceName, CancellationToken.None);
        }
        
        /// <summary>
        /// List supported regions of Cache Service
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICacheServiceOperations.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static RegionsResponse ListRegions(this ICacheServiceOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICacheServiceOperations)s).ListRegionsAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// List supported regions of Cache Service
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICacheServiceOperations.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<RegionsResponse> ListRegionsAsync(this ICacheServiceOperations operations)
        {
            return operations.ListRegionsAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Regenerate access keys for a Cache Service
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICacheServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The cloud service name.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. The cache service name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Key type
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static CachingKeysResponse RegenerateKeys(this ICacheServiceOperations operations, string cloudServiceName, string cacheServiceName, RegenerateKeysParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICacheServiceOperations)s).RegenerateKeysAsync(cloudServiceName, cacheServiceName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Regenerate access keys for a Cache Service
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICacheServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The cloud service name.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. The cache service name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Key type
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<CachingKeysResponse> RegenerateKeysAsync(this ICacheServiceOperations operations, string cloudServiceName, string cacheServiceName, RegenerateKeysParameters parameters)
        {
            return operations.RegenerateKeysAsync(cloudServiceName, cacheServiceName, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// The Managed Cache API includes operations for managing cache services
    /// </summary>
    public partial interface ICacheServiceOperations
    {
        /// <summary>
        /// Creates a new Cache Service in specified subscription and cloud
        /// service.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='cacheServiceName'>
        /// A name of the cache service. The name can be up to 20 characters
        /// in length with minimum 6 characters and must be all lower cases.
        /// </param>
        /// <param name='parameters'>
        /// Parameter supplied to create a cache service
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> BeginCreatingCacheServiceAsync(string cloudServiceName, string cacheServiceName, CacheServiceCreateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The begin of deleting Cache Service.This operation is an
        /// asynchronous operation. To determine whether service has finished
        /// processing the request, call Get Operation.  (see
        /// http://msdn.microsoft.com/en-us/library/hh758254.aspx for more
        /// information)
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='cacheServiceName'>
        /// A name of the cache service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> BeginDeletingAsync(string cloudServiceName, string cacheServiceName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Get access keys of Cache Service
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The cloud service name.
        /// </param>
        /// <param name='cacheServiceName'>
        /// The cache service name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<CheckCacheNameAvailabilityResponse> CheckNameAvailabilityAsync(string cloudServiceName, string cacheServiceName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Creates a new Cache Service in specified subscription and cloud
        /// service.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='cacheServiceName'>
        /// The name of the cache service. The name can be up to 20 characters
        /// in length with minimum 6 characters and must be all lower cases.
        /// </param>
        /// <param name='parameters'>
        /// Parameter supplied to create a cache service
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        Task<CloudServiceOperationStatusResponse> CreateCacheServiceAsync(string cloudServiceName, string cacheServiceName, CacheServiceCreateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Delete Cache Service in specified subscription and cloud service.
        /// (see http://msdn.microsoft.com/en-us/library/hh758254.aspx for
        /// more information)
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='cacheServiceName'>
        /// A name of the cache service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        Task<CloudServiceOperationStatusResponse> DeleteAsync(string cloudServiceName, string cacheServiceName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Get access keys of Cache Service
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The cloud service name.
        /// </param>
        /// <param name='cacheServiceName'>
        /// The cache service name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<CachingKeysResponse> GetKeysAsync(string cloudServiceName, string cacheServiceName, CancellationToken cancellationToken);
        
        /// <summary>
        /// List supported regions of Cache Service
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<RegionsResponse> ListRegionsAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// Regenerate access keys for a Cache Service
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The cloud service name.
        /// </param>
        /// <param name='cacheServiceName'>
        /// The cache service name.
        /// </param>
        /// <param name='parameters'>
        /// Key type
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<CachingKeysResponse> RegenerateKeysAsync(string cloudServiceName, string cacheServiceName, RegenerateKeysParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// The Managed Cache API includes operations for managing cache services
    /// </summary>
    internal partial class CacheServiceOperations : IServiceOperations<ManagedCacheClient>, ICacheServiceOperations
    {
        /// <summary>
        /// Initializes a new instance of the CacheServiceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal CacheServiceOperations(ManagedCacheClient client)
        {
            this._client = client;
        }
        
        private ManagedCacheClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.ManagedCache.ManagedCacheClient.
        /// </summary>
        public ManagedCacheClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates a new Cache Service in specified subscription and cloud
        /// service.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. A name of the cache service. The name can be up to 20
        /// characters  in length with minimum 6 characters and must be all
        /// lower cases.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameter supplied to create a cache service
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginCreatingCacheServiceAsync(string cloudServiceName, string cacheServiceName, CacheServiceCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (cloudServiceName == null)
            {
                throw new ArgumentNullException("cloudServiceName");
            }
            if (cacheServiceName == null)
            {
                throw new ArgumentNullException("cacheServiceName");
            }
            if (cacheServiceName.Length < 6)
            {
                throw new ArgumentOutOfRangeException("cacheServiceName");
            }
            if (cacheServiceName.Length > 20)
            {
                throw new ArgumentOutOfRangeException("cacheServiceName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cloudServiceName", cloudServiceName);
                tracingParameters.Add("cacheServiceName", cacheServiceName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingCacheServiceAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/cloudservices/" + Uri.EscapeDataString(cloudServiceName) + "/resources/cacheservice/Caching/" + Uri.EscapeDataString(cacheServiceName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.TryAddWithoutValidation("If-Match", parameters.ETag);
                httpRequest.Headers.Add("x-ms-version", "2012-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement resourceElement = new XElement(XName.Get("Resource", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(resourceElement);
                
                if (parameters.ResourceProviderNamespace != null)
                {
                    XElement resourceProviderNamespaceElement = new XElement(XName.Get("ResourceProviderNamespace", "http://schemas.microsoft.com/windowsazure"));
                    resourceProviderNamespaceElement.Value = parameters.ResourceProviderNamespace;
                    resourceElement.Add(resourceProviderNamespaceElement);
                }
                
                if (parameters.Type != null)
                {
                    XElement typeElement = new XElement(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                    typeElement.Value = parameters.Type;
                    resourceElement.Add(typeElement);
                }
                
                if (parameters.Name != null)
                {
                    XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                    nameElement.Value = parameters.Name;
                    resourceElement.Add(nameElement);
                }
                
                if (parameters.SchemaVersion != null)
                {
                    XElement schemaVersionElement = new XElement(XName.Get("SchemaVersion", "http://schemas.microsoft.com/windowsazure"));
                    schemaVersionElement.Value = parameters.SchemaVersion;
                    resourceElement.Add(schemaVersionElement);
                }
                
                if (parameters.Settings != null)
                {
                    XElement intrinsicSettingsElement = new XElement(XName.Get("IntrinsicSettings", "http://schemas.microsoft.com/windowsazure"));
                    resourceElement.Add(intrinsicSettingsElement);
                    
                    if (parameters.Settings.CacheServiceInputSection != null)
                    {
                        XElement cacheServiceInputElement = new XElement(XName.Get("CacheServiceInput", ""));
                        intrinsicSettingsElement.Add(cacheServiceInputElement);
                        
                        XElement skuTypeElement = new XElement(XName.Get("SkuType", ""));
                        skuTypeElement.Value = parameters.Settings.CacheServiceInputSection.SkuType.ToString();
                        cacheServiceInputElement.Add(skuTypeElement);
                        
                        if (parameters.Settings.CacheServiceInputSection.Location != null)
                        {
                            XElement locationElement = new XElement(XName.Get("Location", ""));
                            locationElement.Value = parameters.Settings.CacheServiceInputSection.Location;
                            cacheServiceInputElement.Add(locationElement);
                        }
                        
                        XElement skuCountElement = new XElement(XName.Get("SkuCount", ""));
                        skuCountElement.Value = parameters.Settings.CacheServiceInputSection.SkuCount.ToString();
                        cacheServiceInputElement.Add(skuCountElement);
                        
                        if (parameters.Settings.CacheServiceInputSection.ServiceVersion != null)
                        {
                            XElement serviceVersionElement = new XElement(XName.Get("ServiceVersion", ""));
                            serviceVersionElement.Value = parameters.Settings.CacheServiceInputSection.ServiceVersion;
                            cacheServiceInputElement.Add(serviceVersionElement);
                        }
                        
                        XElement objectSizeInBytesElement = new XElement(XName.Get("ObjectSizeInBytes", ""));
                        objectSizeInBytesElement.Value = parameters.Settings.CacheServiceInputSection.ObjectSizeInBytes.ToString();
                        cacheServiceInputElement.Add(objectSizeInBytesElement);
                        
                        if (parameters.Settings.CacheServiceInputSection.NamedCaches != null)
                        {
                            if (parameters.Settings.CacheServiceInputSection.NamedCaches is ILazyCollection == false || ((ILazyCollection)parameters.Settings.CacheServiceInputSection.NamedCaches).IsInitialized)
                            {
                                XElement namedCachesSequenceElement = new XElement(XName.Get("NamedCaches", ""));
                                foreach (IntrinsicSettings.CacheServiceInput.NamedCache namedCachesItem in parameters.Settings.CacheServiceInputSection.NamedCaches)
                                {
                                    XElement namedCacheElement = new XElement(XName.Get("NamedCache", ""));
                                    namedCachesSequenceElement.Add(namedCacheElement);
                                    
                                    if (namedCachesItem.CacheName != null)
                                    {
                                        XElement cacheNameElement = new XElement(XName.Get("CacheName", ""));
                                        cacheNameElement.Value = namedCachesItem.CacheName;
                                        namedCacheElement.Add(cacheNameElement);
                                    }
                                    
                                    XElement notificationsEnabledElement = new XElement(XName.Get("NotificationsEnabled", ""));
                                    notificationsEnabledElement.Value = namedCachesItem.NotificationsEnabled.ToString().ToLower();
                                    namedCacheElement.Add(notificationsEnabledElement);
                                    
                                    XElement highAvailabilityEnabledElement = new XElement(XName.Get("HighAvailabilityEnabled", ""));
                                    highAvailabilityEnabledElement.Value = namedCachesItem.HighAvailabilityEnabled.ToString().ToLower();
                                    namedCacheElement.Add(highAvailabilityEnabledElement);
                                    
                                    if (namedCachesItem.EvictionPolicy != null)
                                    {
                                        XElement evictionPolicyElement = new XElement(XName.Get("EvictionPolicy", ""));
                                        evictionPolicyElement.Value = namedCachesItem.EvictionPolicy;
                                        namedCacheElement.Add(evictionPolicyElement);
                                    }
                                    
                                    if (namedCachesItem.ExpirationSettingsSection != null)
                                    {
                                        XElement expirationSettingsElement = new XElement(XName.Get("ExpirationSettings", ""));
                                        namedCacheElement.Add(expirationSettingsElement);
                                        
                                        XElement timeToLiveInMinutesElement = new XElement(XName.Get("TimeToLiveInMinutes", ""));
                                        timeToLiveInMinutesElement.Value = namedCachesItem.ExpirationSettingsSection.TimeToLiveInMinutes.ToString();
                                        expirationSettingsElement.Add(timeToLiveInMinutesElement);
                                        
                                        if (namedCachesItem.ExpirationSettingsSection.Type != null)
                                        {
                                            XElement typeElement2 = new XElement(XName.Get("Type", ""));
                                            typeElement2.Value = namedCachesItem.ExpirationSettingsSection.Type;
                                            expirationSettingsElement.Add(typeElement2);
                                        }
                                    }
                                }
                                cacheServiceInputElement.Add(namedCachesSequenceElement);
                            }
                        }
                    }
                }
                
                if (parameters.IntrinsicSettingsSection != null)
                {
                    XElement intrinsicSettingsElement2 = new XElement(XName.Get("IntrinsicSettings", "http://schemas.microsoft.com/windowsazure"));
                    resourceElement.Add(intrinsicSettingsElement2);
                    
                    if (parameters.IntrinsicSettingsSection.CacheServiceInputSection != null)
                    {
                        XElement cacheServiceInputElement2 = new XElement(XName.Get("CacheServiceInput", ""));
                        intrinsicSettingsElement2.Add(cacheServiceInputElement2);
                        
                        XElement skuTypeElement2 = new XElement(XName.Get("SkuType", ""));
                        skuTypeElement2.Value = parameters.IntrinsicSettingsSection.CacheServiceInputSection.SkuType.ToString();
                        cacheServiceInputElement2.Add(skuTypeElement2);
                        
                        if (parameters.IntrinsicSettingsSection.CacheServiceInputSection.Location != null)
                        {
                            XElement locationElement2 = new XElement(XName.Get("Location", ""));
                            locationElement2.Value = parameters.IntrinsicSettingsSection.CacheServiceInputSection.Location;
                            cacheServiceInputElement2.Add(locationElement2);
                        }
                        
                        XElement skuCountElement2 = new XElement(XName.Get("SkuCount", ""));
                        skuCountElement2.Value = parameters.IntrinsicSettingsSection.CacheServiceInputSection.SkuCount.ToString();
                        cacheServiceInputElement2.Add(skuCountElement2);
                        
                        if (parameters.IntrinsicSettingsSection.CacheServiceInputSection.ServiceVersion != null)
                        {
                            XElement serviceVersionElement2 = new XElement(XName.Get("ServiceVersion", ""));
                            serviceVersionElement2.Value = parameters.IntrinsicSettingsSection.CacheServiceInputSection.ServiceVersion;
                            cacheServiceInputElement2.Add(serviceVersionElement2);
                        }
                        
                        XElement objectSizeInBytesElement2 = new XElement(XName.Get("ObjectSizeInBytes", ""));
                        objectSizeInBytesElement2.Value = parameters.IntrinsicSettingsSection.CacheServiceInputSection.ObjectSizeInBytes.ToString();
                        cacheServiceInputElement2.Add(objectSizeInBytesElement2);
                        
                        if (parameters.IntrinsicSettingsSection.CacheServiceInputSection.NamedCaches != null)
                        {
                            if (parameters.IntrinsicSettingsSection.CacheServiceInputSection.NamedCaches is ILazyCollection == false || ((ILazyCollection)parameters.IntrinsicSettingsSection.CacheServiceInputSection.NamedCaches).IsInitialized)
                            {
                                XElement namedCachesSequenceElement2 = new XElement(XName.Get("NamedCaches", ""));
                                foreach (IntrinsicSettings.CacheServiceInput.NamedCache namedCachesItem2 in parameters.IntrinsicSettingsSection.CacheServiceInputSection.NamedCaches)
                                {
                                    XElement namedCacheElement2 = new XElement(XName.Get("NamedCache", ""));
                                    namedCachesSequenceElement2.Add(namedCacheElement2);
                                    
                                    if (namedCachesItem2.CacheName != null)
                                    {
                                        XElement cacheNameElement2 = new XElement(XName.Get("CacheName", ""));
                                        cacheNameElement2.Value = namedCachesItem2.CacheName;
                                        namedCacheElement2.Add(cacheNameElement2);
                                    }
                                    
                                    XElement notificationsEnabledElement2 = new XElement(XName.Get("NotificationsEnabled", ""));
                                    notificationsEnabledElement2.Value = namedCachesItem2.NotificationsEnabled.ToString().ToLower();
                                    namedCacheElement2.Add(notificationsEnabledElement2);
                                    
                                    XElement highAvailabilityEnabledElement2 = new XElement(XName.Get("HighAvailabilityEnabled", ""));
                                    highAvailabilityEnabledElement2.Value = namedCachesItem2.HighAvailabilityEnabled.ToString().ToLower();
                                    namedCacheElement2.Add(highAvailabilityEnabledElement2);
                                    
                                    if (namedCachesItem2.EvictionPolicy != null)
                                    {
                                        XElement evictionPolicyElement2 = new XElement(XName.Get("EvictionPolicy", ""));
                                        evictionPolicyElement2.Value = namedCachesItem2.EvictionPolicy;
                                        namedCacheElement2.Add(evictionPolicyElement2);
                                    }
                                    
                                    if (namedCachesItem2.ExpirationSettingsSection != null)
                                    {
                                        XElement expirationSettingsElement2 = new XElement(XName.Get("ExpirationSettings", ""));
                                        namedCacheElement2.Add(expirationSettingsElement2);
                                        
                                        XElement timeToLiveInMinutesElement2 = new XElement(XName.Get("TimeToLiveInMinutes", ""));
                                        timeToLiveInMinutesElement2.Value = namedCachesItem2.ExpirationSettingsSection.TimeToLiveInMinutes.ToString();
                                        expirationSettingsElement2.Add(timeToLiveInMinutesElement2);
                                        
                                        if (namedCachesItem2.ExpirationSettingsSection.Type != null)
                                        {
                                            XElement typeElement3 = new XElement(XName.Get("Type", ""));
                                            typeElement3.Value = namedCachesItem2.ExpirationSettingsSection.Type;
                                            expirationSettingsElement2.Add(typeElement3);
                                        }
                                    }
                                }
                                cacheServiceInputElement2.Add(namedCachesSequenceElement2);
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString();
                requestContent = System.Text.RegularExpressions.Regex.Replace(requestContent, "<IntrinsicSettings>\\s*<CacheServiceInput", "<IntrinsicSettings><CacheServiceInput");
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The begin of deleting Cache Service.This operation is an
        /// asynchronous operation. To determine whether service has finished
        /// processing the request, call Get Operation.  (see
        /// http://msdn.microsoft.com/en-us/library/hh758254.aspx for more
        /// information)
        /// </summary>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. A name of the cache service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginDeletingAsync(string cloudServiceName, string cacheServiceName, CancellationToken cancellationToken)
        {
            // Validate
            if (cloudServiceName == null)
            {
                throw new ArgumentNullException("cloudServiceName");
            }
            if (cacheServiceName == null)
            {
                throw new ArgumentNullException("cacheServiceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cloudServiceName", cloudServiceName);
                tracingParameters.Add("cacheServiceName", cacheServiceName);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/cloudservices/" + Uri.EscapeDataString(cloudServiceName) + "/resources/cacheservice/Caching/" + Uri.EscapeDataString(cacheServiceName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get access keys of Cache Service
        /// </summary>
        /// <param name='cloudServiceName'>
        /// Required. The cloud service name.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. The cache service name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<CheckCacheNameAvailabilityResponse> CheckNameAvailabilityAsync(string cloudServiceName, string cacheServiceName, CancellationToken cancellationToken)
        {
            // Validate
            if (cloudServiceName == null)
            {
                throw new ArgumentNullException("cloudServiceName");
            }
            if (cacheServiceName == null)
            {
                throw new ArgumentNullException("cacheServiceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cloudServiceName", cloudServiceName);
                tracingParameters.Add("cacheServiceName", cacheServiceName);
                TracingAdapter.Enter(invocationId, this, "CheckNameAvailabilityAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/cloudservices/" + Uri.EscapeDataString(cloudServiceName) + "/resources/cacheservice/~/Caching/dummy/Namespaces/" + Uri.EscapeDataString(cacheServiceName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CheckCacheNameAvailabilityResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CheckCacheNameAvailabilityResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement booleanElement = responseDoc.Element(XName.Get("boolean", "http://schemas.microsoft.com/2003/10/Serialization/"));
                        if (booleanElement != null)
                        {
                            bool booleanInstance = bool.Parse(booleanElement.Value);
                            result.Available = booleanInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates a new Cache Service in specified subscription and cloud
        /// service.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. The name of the cache service. The name can be up to 20
        /// characters  in length with minimum 6 characters and must be all
        /// lower cases.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameter supplied to create a cache service
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<CloudServiceOperationStatusResponse> CreateCacheServiceAsync(string cloudServiceName, string cacheServiceName, CacheServiceCreateParameters parameters, CancellationToken cancellationToken)
        {
            ManagedCacheClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cloudServiceName", cloudServiceName);
                tracingParameters.Add("cacheServiceName", cacheServiceName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateCacheServiceAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.CacheServices.BeginCreatingCacheServiceAsync(cloudServiceName, cacheServiceName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            CloudServiceOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            while ((result.Status != CloudServiceOperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != CloudServiceOperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// Delete Cache Service in specified subscription and cloud service.
        /// (see http://msdn.microsoft.com/en-us/library/hh758254.aspx for
        /// more information)
        /// </summary>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. A name of the cache service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<CloudServiceOperationStatusResponse> DeleteAsync(string cloudServiceName, string cacheServiceName, CancellationToken cancellationToken)
        {
            ManagedCacheClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cloudServiceName", cloudServiceName);
                tracingParameters.Add("cacheServiceName", cacheServiceName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.CacheServices.BeginDeletingAsync(cloudServiceName, cacheServiceName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            CloudServiceOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            while ((result.Status != CloudServiceOperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != CloudServiceOperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// Get access keys of Cache Service
        /// </summary>
        /// <param name='cloudServiceName'>
        /// Required. The cloud service name.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. The cache service name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<CachingKeysResponse> GetKeysAsync(string cloudServiceName, string cacheServiceName, CancellationToken cancellationToken)
        {
            // Validate
            if (cloudServiceName == null)
            {
                throw new ArgumentNullException("cloudServiceName");
            }
            if (cloudServiceName.Length > 100)
            {
                throw new ArgumentOutOfRangeException("cloudServiceName");
            }
            if (cacheServiceName == null)
            {
                throw new ArgumentNullException("cacheServiceName");
            }
            if (cacheServiceName.Length > 100)
            {
                throw new ArgumentOutOfRangeException("cacheServiceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cloudServiceName", cloudServiceName);
                tracingParameters.Add("cacheServiceName", cacheServiceName);
                TracingAdapter.Enter(invocationId, this, "GetKeysAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/cloudservices/" + Uri.EscapeDataString(cloudServiceName) + "/resources/cacheservice/~/Caching/" + Uri.EscapeDataString(cacheServiceName) + "/Keys";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CachingKeysResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CachingKeysResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement cachingKeysElement = responseDoc.Element(XName.Get("CachingKeys", "http://schemas.microsoft.com/windowsazure"));
                        if (cachingKeysElement != null)
                        {
                            XElement primaryElement = cachingKeysElement.Element(XName.Get("Primary", "http://schemas.microsoft.com/windowsazure"));
                            if (primaryElement != null)
                            {
                                string primaryInstance = primaryElement.Value;
                                result.Primary = primaryInstance;
                            }
                            
                            XElement secondaryElement = cachingKeysElement.Element(XName.Get("Secondary", "http://schemas.microsoft.com/windowsazure"));
                            if (secondaryElement != null)
                            {
                                string secondaryInstance = secondaryElement.Value;
                                result.Secondary = secondaryInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List supported regions of Cache Service
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<RegionsResponse> ListRegionsAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListRegionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/cloudservices/mycloudservice/resources/cacheservice/~/Caching/mycacheservice/Options/Regions";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RegionsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RegionsResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement regionsSequenceElement = responseDoc.Element(XName.Get("Regions", "http://schemas.microsoft.com/windowsazure"));
                        if (regionsSequenceElement != null)
                        {
                            foreach (XElement regionsElement in regionsSequenceElement.Elements(XName.Get("Region", "http://schemas.microsoft.com/windowsazure")))
                            {
                                RegionsResponse.Region regionInstance = new RegionsResponse.Region();
                                result.Regions.Add(regionInstance);
                                
                                regionInstance.Location = regionsElement.Value;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Regenerate access keys for a Cache Service
        /// </summary>
        /// <param name='cloudServiceName'>
        /// Required. The cloud service name.
        /// </param>
        /// <param name='cacheServiceName'>
        /// Required. The cache service name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Key type
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<CachingKeysResponse> RegenerateKeysAsync(string cloudServiceName, string cacheServiceName, RegenerateKeysParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (cloudServiceName == null)
            {
                throw new ArgumentNullException("cloudServiceName");
            }
            if (cloudServiceName.Length > 100)
            {
                throw new ArgumentOutOfRangeException("cloudServiceName");
            }
            if (cacheServiceName == null)
            {
                throw new ArgumentNullException("cacheServiceName");
            }
            if (cacheServiceName.Length > 100)
            {
                throw new ArgumentOutOfRangeException("cacheServiceName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cloudServiceName", cloudServiceName);
                tracingParameters.Add("cacheServiceName", cacheServiceName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "RegenerateKeysAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/cloudservices/" + Uri.EscapeDataString(cloudServiceName) + "/resources/cacheservice/~/Caching/" + Uri.EscapeDataString(cacheServiceName) + "/Keys/?comp=regenerate";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement regenerateKeysElement = new XElement(XName.Get("RegenerateKeys", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(regenerateKeysElement);
                
                if (parameters.KeyType != null)
                {
                    XElement keyTypeElement = new XElement(XName.Get("KeyType", "http://schemas.microsoft.com/windowsazure"));
                    keyTypeElement.Value = parameters.KeyType;
                    regenerateKeysElement.Add(keyTypeElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CachingKeysResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CachingKeysResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement cachingKeysElement = responseDoc.Element(XName.Get("CachingKeys", "http://schemas.microsoft.com/windowsazure"));
                        if (cachingKeysElement != null)
                        {
                            XElement primaryElement = cachingKeysElement.Element(XName.Get("Primary", "http://schemas.microsoft.com/windowsazure"));
                            if (primaryElement != null)
                            {
                                string primaryInstance = primaryElement.Value;
                                result.Primary = primaryInstance;
                            }
                            
                            XElement secondaryElement = cachingKeysElement.Element(XName.Get("Secondary", "http://schemas.microsoft.com/windowsazure"));
                            if (secondaryElement != null)
                            {
                                string secondaryInstance = secondaryElement.Value;
                                result.Secondary = secondaryInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class CloudServiceOperationsExtensions
    {
        /// <summary>
        /// Create a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICloudServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The cloud service name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create cloud service operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginCreating(this ICloudServiceOperations operations, string cloudServiceName, CloudServiceCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICloudServiceOperations)s).BeginCreatingAsync(cloudServiceName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICloudServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The cloud service name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create cloud service operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginCreatingAsync(this ICloudServiceOperations operations, string cloudServiceName, CloudServiceCreateParameters parameters)
        {
            return operations.BeginCreatingAsync(cloudServiceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Create a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICloudServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The cloud service name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create cloud service operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static CloudServiceOperationStatusResponse Create(this ICloudServiceOperations operations, string cloudServiceName, CloudServiceCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICloudServiceOperations)s).CreateAsync(cloudServiceName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICloudServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The cloud service name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create cloud service operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<CloudServiceOperationStatusResponse> CreateAsync(this ICloudServiceOperations operations, string cloudServiceName, CloudServiceCreateParameters parameters)
        {
            return operations.CreateAsync(cloudServiceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICloudServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The cloud service name.
        /// </param>
        /// <returns>
        /// Information about a retrieved Cloud Service.
        /// </returns>
        public static CloudServiceGetResponse Get(this ICloudServiceOperations operations, string cloudServiceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICloudServiceOperations)s).GetAsync(cloudServiceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICloudServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The cloud service name.
        /// </param>
        /// <returns>
        /// Information about a retrieved Cloud Service.
        /// </returns>
        public static Task<CloudServiceGetResponse> GetAsync(this ICloudServiceOperations operations, string cloudServiceName)
        {
            return operations.GetAsync(cloudServiceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The List Cloud Services operation enumerates services that are
        /// provisioned for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICloudServiceOperations.
        /// </param>
        /// <returns>
        /// The response structure for the Cloud Service List operation.
        /// </returns>
        public static CloudServiceListResponse List(this ICloudServiceOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICloudServiceOperations)s).ListAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The List Cloud Services operation enumerates services that are
        /// provisioned for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.ManagedCache.ICloudServiceOperations.
        /// </param>
        /// <returns>
        /// The response structure for the Cloud Service List operation.
        /// </returns>
        public static Task<CloudServiceListResponse> ListAsync(this ICloudServiceOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
    }
    
    public partial interface ICloudServiceOperations
    {
        /// <summary>
        /// Create a cloud service.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The cloud service name.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create cloud service operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> BeginCreatingAsync(string cloudServiceName, CloudServiceCreateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Create a cloud service.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The cloud service name.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create cloud service operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        Task<CloudServiceOperationStatusResponse> CreateAsync(string cloudServiceName, CloudServiceCreateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Retrieve a cloud service.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The cloud service name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Information about a retrieved Cloud Service.
        /// </returns>
        Task<CloudServiceGetResponse> GetAsync(string cloudServiceName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The List Cloud Services operation enumerates services that are
        /// provisioned for a subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response structure for the Cloud Service List operation.
        /// </returns>
        Task<CloudServiceListResponse> ListAsync(CancellationToken cancellationToken);
    }
    
    internal partial class CloudServiceOperations : IServiceOperations<ManagedCacheClient>, ICloudServiceOperations
    {
        /// <summary>
        /// Initializes a new instance of the CloudServiceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal CloudServiceOperations(ManagedCacheClient client)
        {
            this._client = client;
        }
        
        private ManagedCacheClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.ManagedCache.ManagedCacheClient.
        /// </summary>
        public ManagedCacheClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create a cloud service.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// Required. The cloud service name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create cloud service operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginCreatingAsync(string cloudServiceName, CloudServiceCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (cloudServiceName == null)
            {
                throw new ArgumentNullException("cloudServiceName");
            }
            if (cloudServiceName.Length > 100)
            {
                throw new ArgumentOutOfRangeException("cloudServiceName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Description == null)
            {
                throw new ArgumentNullException("parameters.Description");
            }
            if (parameters.Description.Length > 1024)
            {
                throw new ArgumentOutOfRangeException("parameters.Description");
            }
            if (parameters.GeoRegion == null)
            {
                throw new ArgumentNullException("parameters.GeoRegion");
            }
            if (parameters.Label == null)
            {
                throw new ArgumentNullException("parameters.Label");
            }
            if (parameters.Label.Length > 100)
            {
                throw new ArgumentOutOfRangeException("parameters.Label");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cloudServiceName", cloudServiceName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/CloudServices/" + Uri.EscapeDataString(cloudServiceName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement cloudServiceElement = new XElement(XName.Get("CloudService", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(cloudServiceElement);
                
                XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                labelElement.Value = parameters.Label;
                cloudServiceElement.Add(labelElement);
                
                XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                descriptionElement.Value = parameters.Description;
                cloudServiceElement.Add(descriptionElement);
                
                XElement geoRegionElement = new XElement(XName.Get("GeoRegion", "http://schemas.microsoft.com/windowsazure"));
                geoRegionElement.Value = parameters.GeoRegion;
                cloudServiceElement.Add(geoRegionElement);
                
                if (parameters.Email != null)
                {
                    XElement emailElement = new XElement(XName.Get("Email", "http://schemas.microsoft.com/windowsazure"));
                    emailElement.Value = parameters.Email;
                    cloudServiceElement.Add(emailElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create a cloud service.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// Required. The cloud service name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create cloud service operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<CloudServiceOperationStatusResponse> CreateAsync(string cloudServiceName, CloudServiceCreateParameters parameters, CancellationToken cancellationToken)
        {
            ManagedCacheClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cloudServiceName", cloudServiceName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.CloudServices.BeginCreatingAsync(cloudServiceName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            CloudServiceOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 10;
            while ((result.Status != CloudServiceOperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != CloudServiceOperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// Retrieve a cloud service.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// Required. The cloud service name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Information about a retrieved Cloud Service.
        /// </returns>
        public async Task<CloudServiceGetResponse> GetAsync(string cloudServiceName, CancellationToken cancellationToken)
        {
            // Validate
            if (cloudServiceName == null)
            {
                throw new ArgumentNullException("cloudServiceName");
            }
            if (cloudServiceName.Length > 100)
            {
                throw new ArgumentOutOfRangeException("cloudServiceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cloudServiceName", cloudServiceName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/CloudServices/" + Uri.EscapeDataString(cloudServiceName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CloudServiceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CloudServiceGetResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement cloudServiceElement = responseDoc.Element(XName.Get("CloudService", "http://schemas.microsoft.com/windowsazure"));
                        if (cloudServiceElement != null)
                        {
                            XElement geoLocationElement = cloudServiceElement.Element(XName.Get("GeoLocation", "http://schemas.microsoft.com/windowsazure"));
                            if (geoLocationElement != null)
                            {
                                string geoLocationInstance = geoLocationElement.Value;
                                result.GeoLocation = geoLocationInstance;
                            }
                            
                            XElement resourcesSequenceElement = cloudServiceElement.Element(XName.Get("Resources", "http://schemas.microsoft.com/windowsazure"));
                            if (resourcesSequenceElement != null)
                            {
                                foreach (XElement resourcesElement in resourcesSequenceElement.Elements(XName.Get("Resource", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    CloudServiceResource resourceInstance = new CloudServiceResource();
                                    result.Resources.Add(resourceInstance);
                                    
                                    XElement resourceProviderNamespaceElement = resourcesElement.Element(XName.Get("ResourceProviderNamespace", "http://schemas.microsoft.com/windowsazure"));
                                    if (resourceProviderNamespaceElement != null)
                                    {
                                        string resourceProviderNamespaceInstance = resourceProviderNamespaceElement.Value;
                                        resourceInstance.Namespace = resourceProviderNamespaceInstance;
                                    }
                                    
                                    XElement typeElement = resourcesElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                    if (typeElement != null)
                                    {
                                        string typeInstance = typeElement.Value;
                                        resourceInstance.Type = typeInstance;
                                    }
                                    
                                    XElement nameElement = resourcesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement != null)
                                    {
                                        string nameInstance = nameElement.Value;
                                        resourceInstance.Name = nameInstance;
                                    }
                                    
                                    XElement planElement = resourcesElement.Element(XName.Get("Plan", "http://schemas.microsoft.com/windowsazure"));
                                    if (planElement != null)
                                    {
                                        string planInstance = planElement.Value;
                                        resourceInstance.Plan = planInstance;
                                    }
                                    
                                    XElement schemaVersionElement = resourcesElement.Element(XName.Get("SchemaVersion", "http://schemas.microsoft.com/windowsazure"));
                                    if (schemaVersionElement != null)
                                    {
                                        string schemaVersionInstance = schemaVersionElement.Value;
                                        resourceInstance.SchemaVersion = schemaVersionInstance;
                                    }
                                    
                                    XElement eTagElement = resourcesElement.Element(XName.Get("ETag", "http://schemas.microsoft.com/windowsazure"));
                                    if (eTagElement != null)
                                    {
                                        string eTagInstance = eTagElement.Value;
                                        resourceInstance.ETag = eTagInstance;
                                    }
                                    
                                    XElement stateElement = resourcesElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                    if (stateElement != null)
                                    {
                                        string stateInstance = stateElement.Value;
                                        resourceInstance.State = stateInstance;
                                    }
                                    
                                    XElement subStateElement = resourcesElement.Element(XName.Get("SubState", "http://schemas.microsoft.com/windowsazure"));
                                    if (subStateElement != null)
                                    {
                                        string subStateInstance = subStateElement.Value;
                                        resourceInstance.SubState = subStateInstance;
                                    }
                                    
                                    XElement usageMetersSequenceElement = resourcesElement.Element(XName.Get("UsageMeters", "http://schemas.microsoft.com/windowsazure"));
                                    if (usageMetersSequenceElement != null)
                                    {
                                        foreach (XElement usageMetersElement in usageMetersSequenceElement.Elements(XName.Get("UsageMeter", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            CloudServiceResource.UsageLimit usageMeterInstance = new CloudServiceResource.UsageLimit();
                                            resourceInstance.UsageLimits.Add(usageMeterInstance);
                                            
                                            XElement nameElement2 = usageMetersElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement2 != null)
                                            {
                                                string nameInstance2 = nameElement2.Value;
                                                usageMeterInstance.Name = nameInstance2;
                                            }
                                            
                                            XElement unitElement = usageMetersElement.Element(XName.Get("Unit", "http://schemas.microsoft.com/windowsazure"));
                                            if (unitElement != null)
                                            {
                                                string unitInstance = unitElement.Value;
                                                usageMeterInstance.Unit = unitInstance;
                                            }
                                            
                                            XElement includedElement = usageMetersElement.Element(XName.Get("Included", "http://schemas.microsoft.com/windowsazure"));
                                            if (includedElement != null)
                                            {
                                                string includedInstance = includedElement.Value;
                                                usageMeterInstance.AmountIncluded = includedInstance;
                                            }
                                            
                                            XElement usedElement = usageMetersElement.Element(XName.Get("Used", "http://schemas.microsoft.com/windowsazure"));
                                            if (usedElement != null)
                                            {
                                                string usedInstance = usedElement.Value;
                                                usageMeterInstance.AmountUsed = usedInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement outputItemsSequenceElement = resourcesElement.Element(XName.Get("OutputItems", "http://schemas.microsoft.com/windowsazure"));
                                    if (outputItemsSequenceElement != null)
                                    {
                                        foreach (XElement outputItemsElement in outputItemsSequenceElement.Elements(XName.Get("OutputItem", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            string outputItemsKey = outputItemsElement.Element(XName.Get("Key", "http://schemas.microsoft.com/windowsazure")).Value;
                                            string outputItemsValue = outputItemsElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                            resourceInstance.OutputItems.Add(outputItemsKey, outputItemsValue);
                                        }
                                    }
                                    
                                    XElement intrinsicSettingsElement = resourcesElement.Element(XName.Get("IntrinsicSettings", "http://schemas.microsoft.com/windowsazure"));
                                    if (intrinsicSettingsElement != null)
                                    {
                                        IntrinsicSettings intrinsicSettingsInstance = new IntrinsicSettings();
                                        resourceInstance.IntrinsicSettingsSection = intrinsicSettingsInstance;
                                        
                                        XElement cacheServiceInputElement = intrinsicSettingsElement.Element(XName.Get("CacheServiceInput", ""));
                                        if (cacheServiceInputElement != null)
                                        {
                                            IntrinsicSettings.CacheServiceInput cacheServiceInputInstance = new IntrinsicSettings.CacheServiceInput();
                                            intrinsicSettingsInstance.CacheServiceInputSection = cacheServiceInputInstance;
                                            
                                            XElement skuTypeElement = cacheServiceInputElement.Element(XName.Get("SkuType", ""));
                                            if (skuTypeElement != null)
                                            {
                                                CacheServiceSkuType skuTypeInstance = ((CacheServiceSkuType)Enum.Parse(typeof(CacheServiceSkuType), skuTypeElement.Value, true));
                                                cacheServiceInputInstance.SkuType = skuTypeInstance;
                                            }
                                            
                                            XElement locationElement = cacheServiceInputElement.Element(XName.Get("Location", ""));
                                            if (locationElement != null)
                                            {
                                                string locationInstance = locationElement.Value;
                                                cacheServiceInputInstance.Location = locationInstance;
                                            }
                                            
                                            XElement skuCountElement = cacheServiceInputElement.Element(XName.Get("SkuCount", ""));
                                            if (skuCountElement != null)
                                            {
                                                int skuCountInstance = int.Parse(skuCountElement.Value, CultureInfo.InvariantCulture);
                                                cacheServiceInputInstance.SkuCount = skuCountInstance;
                                            }
                                            
                                            XElement serviceVersionElement = cacheServiceInputElement.Element(XName.Get("ServiceVersion", ""));
                                            if (serviceVersionElement != null)
                                            {
                                                string serviceVersionInstance = serviceVersionElement.Value;
                                                cacheServiceInputInstance.ServiceVersion = serviceVersionInstance;
                                            }
                                            
                                            XElement objectSizeInBytesElement = cacheServiceInputElement.Element(XName.Get("ObjectSizeInBytes", ""));
                                            if (objectSizeInBytesElement != null)
                                            {
                                                int objectSizeInBytesInstance = int.Parse(objectSizeInBytesElement.Value, CultureInfo.InvariantCulture);
                                                cacheServiceInputInstance.ObjectSizeInBytes = objectSizeInBytesInstance;
                                            }
                                            
                                            XElement namedCachesSequenceElement = cacheServiceInputElement.Element(XName.Get("NamedCaches", ""));
                                            if (namedCachesSequenceElement != null)
                                            {
                                                foreach (XElement namedCachesElement in namedCachesSequenceElement.Elements(XName.Get("NamedCache", "")))
                                                {
                                                    IntrinsicSettings.CacheServiceInput.NamedCache namedCacheInstance = new IntrinsicSettings.CacheServiceInput.NamedCache();
                                                    cacheServiceInputInstance.NamedCaches.Add(namedCacheInstance);
                                                    
                                                    XElement cacheNameElement = namedCachesElement.Element(XName.Get("CacheName", ""));
                                                    if (cacheNameElement != null)
                                                    {
                                                        string cacheNameInstance = cacheNameElement.Value;
                                                        namedCacheInstance.CacheName = cacheNameInstance;
                                                    }
                                                    
                                                    XElement notificationsEnabledElement = namedCachesElement.Element(XName.Get("NotificationsEnabled", ""));
                                                    if (notificationsEnabledElement != null)
                                                    {
                                                        bool notificationsEnabledInstance = bool.Parse(notificationsEnabledElement.Value);
                                                        namedCacheInstance.NotificationsEnabled = notificationsEnabledInstance;
                                                    }
                                                    
                                                    XElement highAvailabilityEnabledElement = namedCachesElement.Element(XName.Get("HighAvailabilityEnabled", ""));
                                                    if (highAvailabilityEnabledElement != null)
                                                    {
                                                        bool highAvailabilityEnabledInstance = bool.Parse(highAvailabilityEnabledElement.Value);
                                                        namedCacheInstance.HighAvailabilityEnabled = highAvailabilityEnabledInstance;
                                                    }
                                                    
                                                    XElement evictionPolicyElement = namedCachesElement.Element(XName.Get("EvictionPolicy", ""));
                                                    if (evictionPolicyElement != null)
                                                    {
                                                        string evictionPolicyInstance = evictionPolicyElement.Value;
                                                        namedCacheInstance.EvictionPolicy = evictionPolicyInstance;
                                                    }
                                                    
                                                    XElement expirationSettingsElement = namedCachesElement.Element(XName.Get("ExpirationSettings", ""));
                                                    if (expirationSettingsElement != null)
                                                    {
                                                        IntrinsicSettings.CacheServiceInput.NamedCache.ExpirationSettings expirationSettingsInstance = new IntrinsicSettings.CacheServiceInput.NamedCache.ExpirationSettings();
                                                        namedCacheInstance.ExpirationSettingsSection = expirationSettingsInstance;
                                                        
                                                        XElement timeToLiveInMinutesElement = expirationSettingsElement.Element(XName.Get("TimeToLiveInMinutes", ""));
                                                        if (timeToLiveInMinutesElement != null)
                                                        {
                                                            int timeToLiveInMinutesInstance = int.Parse(timeToLiveInMinutesElement.Value, CultureInfo.InvariantCulture);
                                                            expirationSettingsInstance.TimeToLiveInMinutes = timeToLiveInMinutesInstance;
                                                        }
                                                        
                                                        XElement typeElement2 = expirationSettingsElement.Element(XName.Get("Type", ""));
                                                        if (typeElement2 != null)
                                                        {
                                                            string typeInstance2 = typeElement2.Value;
                                                            expirationSettingsInstance.Type = typeInstance2;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Cloud Services operation enumerates services that are
        /// provisioned for a subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response structure for the Cloud Service List operation.
        /// </returns>
        public async Task<CloudServiceListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = (this.Client.Credentials.SubscriptionId == null ? "" : Uri.EscapeDataString(this.Client.Credentials.SubscriptionId)) + "/CloudServices";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CloudServiceListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CloudServiceListResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement cloudServicesSequenceElement = responseDoc.Element(XName.Get("CloudServices", "http://schemas.microsoft.com/windowsazure"));
                        if (cloudServicesSequenceElement != null)
                        {
                            foreach (XElement cloudServicesElement in cloudServicesSequenceElement.Elements(XName.Get("CloudService", "http://schemas.microsoft.com/windowsazure")))
                            {
                                CloudServiceListResponse.CloudService cloudServiceInstance = new CloudServiceListResponse.CloudService();
                                result.CloudServices.Add(cloudServiceInstance);
                                
                                XElement nameElement = cloudServicesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement != null)
                                {
                                    string nameInstance = nameElement.Value;
                                    cloudServiceInstance.Name = nameInstance;
                                }
                                
                                XElement labelElement = cloudServicesElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                                if (labelElement != null)
                                {
                                    string labelInstance = labelElement.Value;
                                    cloudServiceInstance.Label = labelInstance;
                                }
                                
                                XElement descriptionElement = cloudServicesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                if (descriptionElement != null)
                                {
                                    string descriptionInstance = descriptionElement.Value;
                                    cloudServiceInstance.Description = descriptionInstance;
                                }
                                
                                XElement geoRegionElement = cloudServicesElement.Element(XName.Get("GeoRegion", "http://schemas.microsoft.com/windowsazure"));
                                if (geoRegionElement != null)
                                {
                                    string geoRegionInstance = geoRegionElement.Value;
                                    cloudServiceInstance.GeoRegion = geoRegionInstance;
                                }
                                
                                XElement resourcesSequenceElement = cloudServicesElement.Element(XName.Get("Resources", "http://schemas.microsoft.com/windowsazure"));
                                if (resourcesSequenceElement != null)
                                {
                                    foreach (XElement resourcesElement in resourcesSequenceElement.Elements(XName.Get("Resource", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        CloudServiceResource resourceInstance = new CloudServiceResource();
                                        cloudServiceInstance.Resources.Add(resourceInstance);
                                        
                                        XElement resourceProviderNamespaceElement = resourcesElement.Element(XName.Get("ResourceProviderNamespace", "http://schemas.microsoft.com/windowsazure"));
                                        if (resourceProviderNamespaceElement != null)
                                        {
                                            string resourceProviderNamespaceInstance = resourceProviderNamespaceElement.Value;
                                            resourceInstance.Namespace = resourceProviderNamespaceInstance;
                                        }
                                        
                                        XElement typeElement = resourcesElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                        if (typeElement != null)
                                        {
                                            string typeInstance = typeElement.Value;
                                            resourceInstance.Type = typeInstance;
                                        }
                                        
                                        XElement nameElement2 = resourcesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                        if (nameElement2 != null)
                                        {
                                            string nameInstance2 = nameElement2.Value;
                                            resourceInstance.Name = nameInstance2;
                                        }
                                        
                                        XElement planElement = resourcesElement.Element(XName.Get("Plan", "http://schemas.microsoft.com/windowsazure"));
                                        if (planElement != null)
                                        {
                                            string planInstance = planElement.Value;
                                            resourceInstance.Plan = planInstance;
                                        }
                                        
                                        XElement schemaVersionElement = resourcesElement.Element(XName.Get("SchemaVersion", "http://schemas.microsoft.com/windowsazure"));
                                        if (schemaVersionElement != null)
                                        {
                                            string schemaVersionInstance = schemaVersionElement.Value;
                                            resourceInstance.SchemaVersion = schemaVersionInstance;
                                        }
                                        
                                        XElement eTagElement = resourcesElement.Element(XName.Get("ETag", "http://schemas.microsoft.com/windowsazure"));
                                        if (eTagElement != null)
                                        {
                                            string eTagInstance = eTagElement.Value;
                                            resourceInstance.ETag = eTagInstance;
                                        }
                                        
                                        XElement stateElement = resourcesElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                        if (stateElement != null)
                                        {
                                            string stateInstance = stateElement.Value;
                                            resourceInstance.State = stateInstance;
                                        }
                                        
                                        XElement subStateElement = resourcesElement.Element(XName.Get("SubState", "http://schemas.microsoft.com/windowsazure"));
                                        if (subStateElement != null)
                                        {
                                            string subStateInstance = subStateElement.Value;
                                            resourceInstance.SubState = subStateInstance;
                                        }
                                        
                                        XElement usageMetersSequenceElement = resourcesElement.Element(XName.Get("UsageMeters", "http://schemas.microsoft.com/windowsazure"));
                                        if (usageMetersSequenceElement != null)
                                        {
                                            foreach (XElement usageMetersElement in usageMetersSequenceElement.Elements(XName.Get("UsageMeter", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                CloudServiceResource.UsageLimit usageMeterInstance = new CloudServiceResource.UsageLimit();
                                                resourceInstance.UsageLimits.Add(usageMeterInstance);
                                                
                                                XElement nameElement3 = usageMetersElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                if (nameElement3 != null)
                                                {
                                                    string nameInstance3 = nameElement3.Value;
                                                    usageMeterInstance.Name = nameInstance3;
                                                }
                                                
                                                XElement unitElement = usageMetersElement.Element(XName.Get("Unit", "http://schemas.microsoft.com/windowsazure"));
                                                if (unitElement != null)
                                                {
                                                    string unitInstance = unitElement.Value;
                                                    usageMeterInstance.Unit = unitInstance;
                                                }
                                                
                                                XElement includedElement = usageMetersElement.Element(XName.Get("Included", "http://schemas.microsoft.com/windowsazure"));
                                                if (includedElement != null)
                                                {
                                                    string includedInstance = includedElement.Value;
                                                    usageMeterInstance.AmountIncluded = includedInstance;
                                                }
                                                
                                                XElement usedElement = usageMetersElement.Element(XName.Get("Used", "http://schemas.microsoft.com/windowsazure"));
                                                if (usedElement != null)
                                                {
                                                    string usedInstance = usedElement.Value;
                                                    usageMeterInstance.AmountUsed = usedInstance;
                                                }
                                            }
                                        }
                                        
                                        XElement outputItemsSequenceElement = resourcesElement.Element(XName.Get("OutputItems", "http://schemas.microsoft.com/windowsazure"));
                                        if (outputItemsSequenceElement != null)
                                        {
                                            foreach (XElement outputItemsElement in outputItemsSequenceElement.Elements(XName.Get("OutputItem", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                string outputItemsKey = outputItemsElement.Element(XName.Get("Key", "http://schemas.microsoft.com/windowsazure")).Value;
                                                string outputItemsValue = outputItemsElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                                resourceInstance.OutputItems.Add(outputItemsKey, outputItemsValue);
                                            }
                                        }
                                        
                                        XElement intrinsicSettingsElement = resourcesElement.Element(XName.Get("IntrinsicSettings", "http://schemas.microsoft.com/windowsazure"));
                                        if (intrinsicSettingsElement != null)
                                        {
                                            IntrinsicSettings intrinsicSettingsInstance = new IntrinsicSettings();
                                            resourceInstance.IntrinsicSettingsSection = intrinsicSettingsInstance;
                                            
                                            XElement cacheServiceInputElement = intrinsicSettingsElement.Element(XName.Get("CacheServiceInput", ""));
                                            if (cacheServiceInputElement != null)
                                            {
                                                IntrinsicSettings.CacheServiceInput cacheServiceInputInstance = new IntrinsicSettings.CacheServiceInput();
                                                intrinsicSettingsInstance.CacheServiceInputSection = cacheServiceInputInstance;
                                                
                                                XElement skuTypeElement = cacheServiceInputElement.Element(XName.Get("SkuType", ""));
                                                if (skuTypeElement != null)
                                                {
                                                    CacheServiceSkuType skuTypeInstance = ((CacheServiceSkuType)Enum.Parse(typeof(CacheServiceSkuType), skuTypeElement.Value, true));
                                                    cacheServiceInputInstance.SkuType = skuTypeInstance;
                                                }
                                                
                                                XElement locationElement = cacheServiceInputElement.Element(XName.Get("Location", ""));
                                                if (locationElement != null)
                                                {
                                                    string locationInstance = locationElement.Value;
                                                    cacheServiceInputInstance.Location = locationInstance;
                                                }
                                                
                                                XElement skuCountElement = cacheServiceInputElement.Element(XName.Get("SkuCount", ""));
                                                if (skuCountElement != null)
                                                {
                                                    int skuCountInstance = int.Parse(skuCountElement.Value, CultureInfo.InvariantCulture);
                                                    cacheServiceInputInstance.SkuCount = skuCountInstance;
                                                }
                                                
                                                XElement serviceVersionElement = cacheServiceInputElement.Element(XName.Get("ServiceVersion", ""));
                                                if (serviceVersionElement != null)
                                                {
                                                    string serviceVersionInstance = serviceVersionElement.Value;
                                                    cacheServiceInputInstance.ServiceVersion = serviceVersionInstance;
                                                }
                                                
                                                XElement objectSizeInBytesElement = cacheServiceInputElement.Element(XName.Get("ObjectSizeInBytes", ""));
                                                if (objectSizeInBytesElement != null)
                                                {
                                                    int objectSizeInBytesInstance = int.Parse(objectSizeInBytesElement.Value, CultureInfo.InvariantCulture);
                                                    cacheServiceInputInstance.ObjectSizeInBytes = objectSizeInBytesInstance;
                                                }
                                                
                                                XElement namedCachesSequenceElement = cacheServiceInputElement.Element(XName.Get("NamedCaches", ""));
                                                if (namedCachesSequenceElement != null)
                                                {
                                                    foreach (XElement namedCachesElement in namedCachesSequenceElement.Elements(XName.Get("NamedCache", "")))
                                                    {
                                                        IntrinsicSettings.CacheServiceInput.NamedCache namedCacheInstance = new IntrinsicSettings.CacheServiceInput.NamedCache();
                                                        cacheServiceInputInstance.NamedCaches.Add(namedCacheInstance);
                                                        
                                                        XElement cacheNameElement = namedCachesElement.Element(XName.Get("CacheName", ""));
                                                        if (cacheNameElement != null)
                                                        {
                                                            string cacheNameInstance = cacheNameElement.Value;
                                                            namedCacheInstance.CacheName = cacheNameInstance;
                                                        }
                                                        
                                                        XElement notificationsEnabledElement = namedCachesElement.Element(XName.Get("NotificationsEnabled", ""));
                                                        if (notificationsEnabledElement != null)
                                                        {
                                                            bool notificationsEnabledInstance = bool.Parse(notificationsEnabledElement.Value);
                                                            namedCacheInstance.NotificationsEnabled = notificationsEnabledInstance;
                                                        }
                                                        
                                                        XElement highAvailabilityEnabledElement = namedCachesElement.Element(XName.Get("HighAvailabilityEnabled", ""));
                                                        if (highAvailabilityEnabledElement != null)
                                                        {
                                                            bool highAvailabilityEnabledInstance = bool.Parse(highAvailabilityEnabledElement.Value);
                                                            namedCacheInstance.HighAvailabilityEnabled = highAvailabilityEnabledInstance;
                                                        }
                                                        
                                                        XElement evictionPolicyElement = namedCachesElement.Element(XName.Get("EvictionPolicy", ""));
                                                        if (evictionPolicyElement != null)
                                                        {
                                                            string evictionPolicyInstance = evictionPolicyElement.Value;
                                                            namedCacheInstance.EvictionPolicy = evictionPolicyInstance;
                                                        }
                                                        
                                                        XElement expirationSettingsElement = namedCachesElement.Element(XName.Get("ExpirationSettings", ""));
                                                        if (expirationSettingsElement != null)
                                                        {
                                                            IntrinsicSettings.CacheServiceInput.NamedCache.ExpirationSettings expirationSettingsInstance = new IntrinsicSettings.CacheServiceInput.NamedCache.ExpirationSettings();
                                                            namedCacheInstance.ExpirationSettingsSection = expirationSettingsInstance;
                                                            
                                                            XElement timeToLiveInMinutesElement = expirationSettingsElement.Element(XName.Get("TimeToLiveInMinutes", ""));
                                                            if (timeToLiveInMinutesElement != null)
                                                            {
                                                                int timeToLiveInMinutesInstance = int.Parse(timeToLiveInMinutesElement.Value, CultureInfo.InvariantCulture);
                                                                expirationSettingsInstance.TimeToLiveInMinutes = timeToLiveInMinutesInstance;
                                                            }
                                                            
                                                            XElement typeElement2 = expirationSettingsElement.Element(XName.Get("Type", ""));
                                                            if (typeElement2 != null)
                                                            {
                                                                string typeInstance2 = typeElement2.Value;
                                                                expirationSettingsInstance.Type = typeInstance2;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
