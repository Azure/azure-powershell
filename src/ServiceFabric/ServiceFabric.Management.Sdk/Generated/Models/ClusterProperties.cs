// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the cluster resource properties.
    /// </summary>
    public partial class ClusterProperties
    {
        /// <summary>
        /// Initializes a new instance of the ClusterProperties class.
        /// </summary>
        public ClusterProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterProperties class.
        /// </summary>

        /// <param name="addOnFeatures">The list of add-on features to enable in the cluster.
        /// </param>

        /// <param name="availableClusterVersions">The Service Fabric runtime versions available for this cluster.
        /// </param>

        /// <param name="azureActiveDirectory">The AAD authentication settings of the cluster.
        /// </param>

        /// <param name="certificate">The certificate to use for securing the cluster. The certificate provided
        /// will be used for node to node security within the cluster, SSL certificate
        /// for cluster management endpoint and default admin client.
        /// </param>

        /// <param name="certificateCommonNames">Describes a list of server certificates referenced by common name that are
        /// used to secure the cluster.
        /// </param>

        /// <param name="clientCertificateCommonNames">The list of client certificates referenced by common name that are allowed
        /// to manage the cluster.
        /// </param>

        /// <param name="clientCertificateThumbprints">The list of client certificates referenced by thumbprint that are allowed
        /// to manage the cluster.
        /// </param>

        /// <param name="clusterCodeVersion">The Service Fabric runtime version of the cluster. This property can only
        /// by set the user when **upgradeMode** is set to &#39;Manual&#39;. To get list of
        /// available Service Fabric versions for new clusters use [ClusterVersion
        /// API](https://learn.microsoft.com/rest/api/servicefabric/cluster-versions/list).
        /// To get the list of available version for existing clusters use
        /// **availableClusterVersions**.
        /// </param>

        /// <param name="clusterEndpoint">The Azure Resource Provider endpoint. A system service in the cluster
        /// connects to this  endpoint.
        /// </param>

        /// <param name="clusterId">A service generated unique identifier for the cluster resource.
        /// </param>

        /// <param name="clusterState">The current state of the cluster.
        /// - WaitingForNodes - Indicates that the cluster resource is created and the
        /// resource provider is waiting for Service Fabric VM extension to boot up and
        /// report to it.
        /// - Deploying - Indicates that the Service Fabric runtime is being installed
        /// on the VMs. Cluster resource will be in this state until the cluster boots
        /// up and system services are up.
        /// - BaselineUpgrade - Indicates that the cluster is upgrading to establishes
        /// the cluster version. This upgrade is automatically initiated when the
        /// cluster boots up for the first time.
        /// - UpdatingUserConfiguration - Indicates that the cluster is being upgraded
        /// with the user provided configuration.
        /// - UpdatingUserCertificate - Indicates that the cluster is being upgraded
        /// with the user provided certificate.
        /// - UpdatingInfrastructure - Indicates that the cluster is being upgraded
        /// with the latest Service Fabric runtime version. This happens only when the
        /// **upgradeMode** is set to &#39;Automatic&#39;.
        /// - EnforcingClusterVersion - Indicates that cluster is on a different
        /// version than expected and the cluster is being upgraded to the expected
        /// version.
        /// - UpgradeServiceUnreachable - Indicates that the system service in the
        /// cluster is no longer polling the Resource Provider. Clusters in this state
        /// cannot be managed by the Resource Provider.
        /// - AutoScale - Indicates that the ReliabilityLevel of the cluster is being
        /// adjusted.
        /// - Ready - Indicates that the cluster is in a stable state.
        /// Possible values include: 'WaitingForNodes', 'Deploying', 'BaselineUpgrade',
        /// 'UpdatingUserConfiguration', 'UpdatingUserCertificate',
        /// 'UpdatingInfrastructure', 'EnforcingClusterVersion',
        /// 'UpgradeServiceUnreachable', 'AutoScale', 'Ready'</param>

        /// <param name="diagnosticsStorageAccountConfig">The storage account information for storing Service Fabric diagnostic logs.
        /// </param>

        /// <param name="eventStoreServiceEnabled">Indicates if the event store service is enabled.
        /// </param>

        /// <param name="fabricSettings">The list of custom fabric settings to configure the cluster.
        /// </param>

        /// <param name="managementEndpoint">The http management endpoint of the cluster.
        /// </param>

        /// <param name="nodeTypes">The list of node types in the cluster.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the cluster resource.
        /// Possible values include: 'Updating', 'Succeeded', 'Failed', 'Canceled'</param>

        /// <param name="reliabilityLevel">The reliability level sets the replica set size of system services. Learn
        /// about
        /// [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
        /// - None - Run the System services with a target replica set count of 1. This
        /// should only be used for test clusters.
        /// - Bronze - Run the System services with a target replica set count of 3.
        /// This should only be used for test clusters.
        /// - Silver - Run the System services with a target replica set count of 5.
        /// - Gold - Run the System services with a target replica set count of 7.
        /// - Platinum - Run the System services with a target replica set count of 9.
        /// Possible values include: 'None', 'Bronze', 'Silver', 'Gold', 'Platinum'</param>

        /// <param name="reverseProxyCertificate">The server certificate used by reverse proxy.
        /// </param>

        /// <param name="reverseProxyCertificateCommonNames">Describes a list of server certificates referenced by common name that are
        /// used to secure the cluster.
        /// </param>

        /// <param name="upgradeDescription">The policy to use when upgrading the cluster.
        /// </param>

        /// <param name="upgradeMode">The upgrade mode of the cluster when new Service Fabric runtime version is
        /// available.
        /// Possible values include: 'Automatic', 'Manual'</param>

        /// <param name="applicationTypeVersionsCleanupPolicy">The policy used to clean up unused versions.
        /// </param>

        /// <param name="vmImage">The VM image VMSS has been configured with. Generic names such as Windows
        /// or Linux can be used.
        /// </param>

        /// <param name="sfZonalUpgradeMode">This property controls the logical grouping of VMs in upgrade domains
        /// (UDs). This property can&#39;t be modified if a node type with multiple
        /// Availability Zones is already present in the cluster.
        /// Possible values include: 'Parallel', 'Hierarchical'</param>

        /// <param name="vmssZonalUpgradeMode">This property defines the upgrade mode for the virtual machine scale set,
        /// it is mandatory if a node type with multiple Availability Zones is added.
        /// Possible values include: 'Parallel', 'Hierarchical'</param>

        /// <param name="infrastructureServiceManager">Indicates if infrastructure service manager is enabled.
        /// </param>

        /// <param name="upgradeWave">Indicates when new cluster runtime version upgrades will be applied after
        /// they are released. By default is Wave0. Only applies when **upgradeMode**
        /// is set to &#39;Automatic&#39;.
        /// Possible values include: 'Wave0', 'Wave1', 'Wave2'</param>

        /// <param name="upgradePauseStartTimestampUtc">Indicates the start date and time to pause automatic runtime version
        /// upgrades on the cluster for an specific period of time on the cluster
        /// (UTC).
        /// </param>

        /// <param name="upgradePauseEndTimestampUtc">Indicates the end date and time to pause automatic runtime version upgrades
        /// on the cluster for an specific period of time on the cluster (UTC).
        /// </param>

        /// <param name="waveUpgradePaused">Boolean to pause automatic runtime version upgrades to the cluster.
        /// </param>

        /// <param name="notifications">Indicates a list of notification channels for cluster events.
        /// </param>
        public ClusterProperties(string managementEndpoint, System.Collections.Generic.IList<NodeTypeDescription> nodeTypes, System.Collections.Generic.IList<string> addOnFeatures = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<ClusterVersionDetails> availableClusterVersions = default(System.Collections.Generic.IList<ClusterVersionDetails>), AzureActiveDirectory azureActiveDirectory = default(AzureActiveDirectory), CertificateDescription certificate = default(CertificateDescription), ServerCertificateCommonNames certificateCommonNames = default(ServerCertificateCommonNames), System.Collections.Generic.IList<ClientCertificateCommonName> clientCertificateCommonNames = default(System.Collections.Generic.IList<ClientCertificateCommonName>), System.Collections.Generic.IList<ClientCertificateThumbprint> clientCertificateThumbprints = default(System.Collections.Generic.IList<ClientCertificateThumbprint>), string clusterCodeVersion = default(string), string clusterEndpoint = default(string), string clusterId = default(string), string clusterState = default(string), DiagnosticsStorageAccountConfig diagnosticsStorageAccountConfig = default(DiagnosticsStorageAccountConfig), bool? eventStoreServiceEnabled = default(bool?), System.Collections.Generic.IList<SettingsSectionDescription> fabricSettings = default(System.Collections.Generic.IList<SettingsSectionDescription>), string provisioningState = default(string), string reliabilityLevel = default(string), CertificateDescription reverseProxyCertificate = default(CertificateDescription), ServerCertificateCommonNames reverseProxyCertificateCommonNames = default(ServerCertificateCommonNames), ClusterUpgradePolicy upgradeDescription = default(ClusterUpgradePolicy), string upgradeMode = default(string), ApplicationTypeVersionsCleanupPolicy applicationTypeVersionsCleanupPolicy = default(ApplicationTypeVersionsCleanupPolicy), string vmImage = default(string), string sfZonalUpgradeMode = default(string), string vmssZonalUpgradeMode = default(string), bool? infrastructureServiceManager = default(bool?), string upgradeWave = default(string), System.DateTime? upgradePauseStartTimestampUtc = default(System.DateTime?), System.DateTime? upgradePauseEndTimestampUtc = default(System.DateTime?), bool? waveUpgradePaused = default(bool?), System.Collections.Generic.IList<Notification> notifications = default(System.Collections.Generic.IList<Notification>))

        {
            this.AddOnFeatures = addOnFeatures;
            this.AvailableClusterVersions = availableClusterVersions;
            this.AzureActiveDirectory = azureActiveDirectory;
            this.Certificate = certificate;
            this.CertificateCommonNames = certificateCommonNames;
            this.ClientCertificateCommonNames = clientCertificateCommonNames;
            this.ClientCertificateThumbprints = clientCertificateThumbprints;
            this.ClusterCodeVersion = clusterCodeVersion;
            this.ClusterEndpoint = clusterEndpoint;
            this.ClusterId = clusterId;
            this.ClusterState = clusterState;
            this.DiagnosticsStorageAccountConfig = diagnosticsStorageAccountConfig;
            this.EventStoreServiceEnabled = eventStoreServiceEnabled;
            this.FabricSettings = fabricSettings;
            this.ManagementEndpoint = managementEndpoint;
            this.NodeTypes = nodeTypes;
            this.ProvisioningState = provisioningState;
            this.ReliabilityLevel = reliabilityLevel;
            this.ReverseProxyCertificate = reverseProxyCertificate;
            this.ReverseProxyCertificateCommonNames = reverseProxyCertificateCommonNames;
            this.UpgradeDescription = upgradeDescription;
            this.UpgradeMode = upgradeMode;
            this.ApplicationTypeVersionsCleanupPolicy = applicationTypeVersionsCleanupPolicy;
            this.VMImage = vmImage;
            this.SfZonalUpgradeMode = sfZonalUpgradeMode;
            this.VmssZonalUpgradeMode = vmssZonalUpgradeMode;
            this.InfrastructureServiceManager = infrastructureServiceManager;
            this.UpgradeWave = upgradeWave;
            this.UpgradePauseStartTimestampUtc = upgradePauseStartTimestampUtc;
            this.UpgradePauseEndTimestampUtc = upgradePauseEndTimestampUtc;
            this.WaveUpgradePaused = waveUpgradePaused;
            this.Notifications = notifications;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the list of add-on features to enable in the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "addOnFeatures")]
        public System.Collections.Generic.IList<string> AddOnFeatures {get; set; }

        /// <summary>
        /// Gets the Service Fabric runtime versions available for this cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "availableClusterVersions")]
        public System.Collections.Generic.IList<ClusterVersionDetails> AvailableClusterVersions {get; private set; }

        /// <summary>
        /// Gets or sets the AAD authentication settings of the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azureActiveDirectory")]
        public AzureActiveDirectory AzureActiveDirectory {get; set; }

        /// <summary>
        /// Gets or sets the certificate to use for securing the cluster. The
        /// certificate provided will be used for node to node security within the
        /// cluster, SSL certificate for cluster management endpoint and default admin
        /// client.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "certificate")]
        public CertificateDescription Certificate {get; set; }

        /// <summary>
        /// Gets or sets describes a list of server certificates referenced by common
        /// name that are used to secure the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "certificateCommonNames")]
        public ServerCertificateCommonNames CertificateCommonNames {get; set; }

        /// <summary>
        /// Gets or sets the list of client certificates referenced by common name that
        /// are allowed to manage the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientCertificateCommonNames")]
        public System.Collections.Generic.IList<ClientCertificateCommonName> ClientCertificateCommonNames {get; set; }

        /// <summary>
        /// Gets or sets the list of client certificates referenced by thumbprint that
        /// are allowed to manage the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientCertificateThumbprints")]
        public System.Collections.Generic.IList<ClientCertificateThumbprint> ClientCertificateThumbprints {get; set; }

        /// <summary>
        /// Gets or sets the Service Fabric runtime version of the cluster. This
        /// property can only by set the user when **upgradeMode** is set to &#39;Manual&#39;.
        /// To get list of available Service Fabric versions for new clusters use
        /// [ClusterVersion
        /// API](https://learn.microsoft.com/rest/api/servicefabric/cluster-versions/list).
        /// To get the list of available version for existing clusters use
        /// **availableClusterVersions**.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clusterCodeVersion")]
        public string ClusterCodeVersion {get; set; }

        /// <summary>
        /// Gets the Azure Resource Provider endpoint. A system service in the cluster
        /// connects to this  endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clusterEndpoint")]
        public string ClusterEndpoint {get; private set; }

        /// <summary>
        /// Gets a service generated unique identifier for the cluster resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clusterId")]
        public string ClusterId {get; private set; }

        /// <summary>
        /// Gets the current state of the cluster.
        /// - WaitingForNodes - Indicates that the cluster resource is created and the
        /// resource provider is waiting for Service Fabric VM extension to boot up and
        /// report to it.
        /// - Deploying - Indicates that the Service Fabric runtime is being installed
        /// on the VMs. Cluster resource will be in this state until the cluster boots
        /// up and system services are up.
        /// - BaselineUpgrade - Indicates that the cluster is upgrading to establishes
        /// the cluster version. This upgrade is automatically initiated when the
        /// cluster boots up for the first time.
        /// - UpdatingUserConfiguration - Indicates that the cluster is being upgraded
        /// with the user provided configuration.
        /// - UpdatingUserCertificate - Indicates that the cluster is being upgraded
        /// with the user provided certificate.
        /// - UpdatingInfrastructure - Indicates that the cluster is being upgraded
        /// with the latest Service Fabric runtime version. This happens only when the
        /// **upgradeMode** is set to &#39;Automatic&#39;.
        /// - EnforcingClusterVersion - Indicates that cluster is on a different
        /// version than expected and the cluster is being upgraded to the expected
        /// version.
        /// - UpgradeServiceUnreachable - Indicates that the system service in the
        /// cluster is no longer polling the Resource Provider. Clusters in this state
        /// cannot be managed by the Resource Provider.
        /// - AutoScale - Indicates that the ReliabilityLevel of the cluster is being
        /// adjusted.
        /// - Ready - Indicates that the cluster is in a stable state. Possible values include: &#39;WaitingForNodes&#39;, &#39;Deploying&#39;, &#39;BaselineUpgrade&#39;, &#39;UpdatingUserConfiguration&#39;, &#39;UpdatingUserCertificate&#39;, &#39;UpdatingInfrastructure&#39;, &#39;EnforcingClusterVersion&#39;, &#39;UpgradeServiceUnreachable&#39;, &#39;AutoScale&#39;, &#39;Ready&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clusterState")]
        public string ClusterState {get; private set; }

        /// <summary>
        /// Gets or sets the storage account information for storing Service Fabric
        /// diagnostic logs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diagnosticsStorageAccountConfig")]
        public DiagnosticsStorageAccountConfig DiagnosticsStorageAccountConfig {get; set; }

        /// <summary>
        /// Gets or sets indicates if the event store service is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "eventStoreServiceEnabled")]
        public bool? EventStoreServiceEnabled {get; set; }

        /// <summary>
        /// Gets or sets the list of custom fabric settings to configure the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fabricSettings")]
        public System.Collections.Generic.IList<SettingsSectionDescription> FabricSettings {get; set; }

        /// <summary>
        /// Gets or sets the http management endpoint of the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "managementEndpoint")]
        public string ManagementEndpoint {get; set; }

        /// <summary>
        /// Gets or sets the list of node types in the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nodeTypes")]
        public System.Collections.Generic.IList<NodeTypeDescription> NodeTypes {get; set; }

        /// <summary>
        /// Gets the provisioning state of the cluster resource. Possible values include: &#39;Updating&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the reliability level sets the replica set size of system
        /// services. Learn about
        /// [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
        /// - None - Run the System services with a target replica set count of 1. This
        /// should only be used for test clusters.
        /// - Bronze - Run the System services with a target replica set count of 3.
        /// This should only be used for test clusters.
        /// - Silver - Run the System services with a target replica set count of 5.
        /// - Gold - Run the System services with a target replica set count of 7.
        /// - Platinum - Run the System services with a target replica set count of 9. Possible values include: &#39;None&#39;, &#39;Bronze&#39;, &#39;Silver&#39;, &#39;Gold&#39;, &#39;Platinum&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reliabilityLevel")]
        public string ReliabilityLevel {get; set; }

        /// <summary>
        /// Gets or sets the server certificate used by reverse proxy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reverseProxyCertificate")]
        public CertificateDescription ReverseProxyCertificate {get; set; }

        /// <summary>
        /// Gets or sets describes a list of server certificates referenced by common
        /// name that are used to secure the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reverseProxyCertificateCommonNames")]
        public ServerCertificateCommonNames ReverseProxyCertificateCommonNames {get; set; }

        /// <summary>
        /// Gets or sets the policy to use when upgrading the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upgradeDescription")]
        public ClusterUpgradePolicy UpgradeDescription {get; set; }

        /// <summary>
        /// Gets or sets the upgrade mode of the cluster when new Service Fabric
        /// runtime version is available. Possible values include: &#39;Automatic&#39;, &#39;Manual&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upgradeMode")]
        public string UpgradeMode {get; set; }

        /// <summary>
        /// Gets or sets the policy used to clean up unused versions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "applicationTypeVersionsCleanupPolicy")]
        public ApplicationTypeVersionsCleanupPolicy ApplicationTypeVersionsCleanupPolicy {get; set; }

        /// <summary>
        /// Gets or sets the VM image VMSS has been configured with. Generic names such
        /// as Windows or Linux can be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmImage")]
        public string VMImage {get; set; }

        /// <summary>
        /// Gets or sets this property controls the logical grouping of VMs in upgrade
        /// domains (UDs). This property can&#39;t be modified if a node type with multiple
        /// Availability Zones is already present in the cluster. Possible values include: &#39;Parallel&#39;, &#39;Hierarchical&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sfZonalUpgradeMode")]
        public string SfZonalUpgradeMode {get; set; }

        /// <summary>
        /// Gets or sets this property defines the upgrade mode for the virtual machine
        /// scale set, it is mandatory if a node type with multiple Availability Zones
        /// is added. Possible values include: &#39;Parallel&#39;, &#39;Hierarchical&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmssZonalUpgradeMode")]
        public string VmssZonalUpgradeMode {get; set; }

        /// <summary>
        /// Gets or sets indicates if infrastructure service manager is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "infrastructureServiceManager")]
        public bool? InfrastructureServiceManager {get; set; }

        /// <summary>
        /// Gets or sets indicates when new cluster runtime version upgrades will be
        /// applied after they are released. By default is Wave0. Only applies when
        /// **upgradeMode** is set to &#39;Automatic&#39;. Possible values include: &#39;Wave0&#39;, &#39;Wave1&#39;, &#39;Wave2&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upgradeWave")]
        public string UpgradeWave {get; set; }

        /// <summary>
        /// Gets or sets indicates the start date and time to pause automatic runtime
        /// version upgrades on the cluster for an specific period of time on the
        /// cluster (UTC).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upgradePauseStartTimestampUtc")]
        public System.DateTime? UpgradePauseStartTimestampUtc {get; set; }

        /// <summary>
        /// Gets or sets indicates the end date and time to pause automatic runtime
        /// version upgrades on the cluster for an specific period of time on the
        /// cluster (UTC).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upgradePauseEndTimestampUtc")]
        public System.DateTime? UpgradePauseEndTimestampUtc {get; set; }

        /// <summary>
        /// Gets or sets boolean to pause automatic runtime version upgrades to the
        /// cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "waveUpgradePaused")]
        public bool? WaveUpgradePaused {get; set; }

        /// <summary>
        /// Gets or sets indicates a list of notification channels for cluster events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "notifications")]
        public System.Collections.Generic.IList<Notification> Notifications {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ManagementEndpoint == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ManagementEndpoint");
            }
            if (this.NodeTypes == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "NodeTypes");
            }



            if (this.Certificate != null)
            {
                this.Certificate.Validate();
            }

            if (this.ClientCertificateCommonNames != null)
            {
                foreach (var element in this.ClientCertificateCommonNames)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.ClientCertificateThumbprints != null)
            {
                foreach (var element in this.ClientCertificateThumbprints)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }




            if (this.DiagnosticsStorageAccountConfig != null)
            {
                this.DiagnosticsStorageAccountConfig.Validate();
            }
            if (this.FabricSettings != null)
            {
                foreach (var element in this.FabricSettings)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

            if (this.NodeTypes != null)
            {
                foreach (var element in this.NodeTypes)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }


            if (this.ReverseProxyCertificate != null)
            {
                this.ReverseProxyCertificate.Validate();
            }

            if (this.UpgradeDescription != null)
            {
                this.UpgradeDescription.Validate();
            }

            if (this.ApplicationTypeVersionsCleanupPolicy != null)
            {
                this.ApplicationTypeVersionsCleanupPolicy.Validate();
            }




            if (this.Notifications != null)
            {
                foreach (var element in this.Notifications)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}