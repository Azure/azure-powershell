// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using System.Linq;

    /// <summary>
    /// Cluster update request
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ClusterUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the ClusterUpdateParameters class.
        /// </summary>
        public ClusterUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterUpdateParameters class.
        /// </summary>

        /// <param name="tags">Cluster update parameters
        /// </param>

        /// <param name="reliabilityLevel">The reliability level sets the replica set size of system services. Learn
        /// about
        /// [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
        /// - None - Run the System services with a target replica set count of 1. This
        /// should only be used for test clusters.
        /// - Bronze - Run the System services with a target replica set count of 3.
        /// This should only be used for test clusters.
        /// - Silver - Run the System services with a target replica set count of 5.
        /// - Gold - Run the System services with a target replica set count of 7.
        /// - Platinum - Run the System services with a target replica set count of 9.
        /// Possible values include: 'None', 'Bronze', 'Silver', 'Gold', 'Platinum'</param>

        /// <param name="upgradeMode">The upgrade mode of the cluster when new Service Fabric runtime version is
        /// available.
        /// Possible values include: 'Automatic', 'Manual'</param>

        /// <param name="addOnFeatures">The list of add-on features to enable in the cluster.
        /// </param>

        /// <param name="certificate">The certificate to use for securing the cluster. The certificate provided
        /// will be used for  node to node security within the cluster, SSL certificate
        /// for cluster management endpoint and default  admin client.
        /// </param>

        /// <param name="certificateCommonNames">Describes a list of server certificates referenced by common name that are
        /// used to secure the cluster.
        /// </param>

        /// <param name="clientCertificateCommonNames">The list of client certificates referenced by common name that are allowed
        /// to manage the cluster. This will overwrite the existing list.
        /// </param>

        /// <param name="clientCertificateThumbprints">The list of client certificates referenced by thumbprint that are allowed
        /// to manage the cluster. This will overwrite the existing list.
        /// </param>

        /// <param name="clusterCodeVersion">The Service Fabric runtime version of the cluster. This property can only
        /// by set the user when **upgradeMode** is set to &#39;Manual&#39;. To get list of
        /// available Service Fabric versions for new clusters use [ClusterVersion
        /// API](https://learn.microsoft.com/rest/api/servicefabric/cluster-versions/list).
        /// To get the list of available version for existing clusters use
        /// **availableClusterVersions**.
        /// </param>

        /// <param name="eventStoreServiceEnabled">Indicates if the event store service is enabled.
        /// </param>

        /// <param name="fabricSettings">The list of custom fabric settings to configure the cluster. This will
        /// overwrite the existing list.
        /// </param>

        /// <param name="nodeTypes">The list of node types in the cluster. This will overwrite the existing
        /// list.
        /// </param>

        /// <param name="reverseProxyCertificate">The server certificate used by reverse proxy.
        /// </param>

        /// <param name="upgradeDescription">The policy to use when upgrading the cluster.
        /// </param>

        /// <param name="applicationTypeVersionsCleanupPolicy">The policy used to clean up unused versions.
        /// </param>

        /// <param name="sfZonalUpgradeMode">This property controls the logical grouping of VMs in upgrade domains
        /// (UDs). This property can&#39;t be modified if a node type with multiple
        /// Availability Zones is already present in the cluster.
        /// Possible values include: 'Parallel', 'Hierarchical'</param>

        /// <param name="vmssZonalUpgradeMode">This property defines the upgrade mode for the virtual machine scale set,
        /// it is mandatory if a node type with multiple Availability Zones is added.
        /// Possible values include: 'Parallel', 'Hierarchical'</param>

        /// <param name="infrastructureServiceManager">Indicates if infrastructure service manager is enabled.
        /// </param>

        /// <param name="upgradeWave">Indicates when new cluster runtime version upgrades will be applied after
        /// they are released. By default is Wave0. Only applies when **upgradeMode**
        /// is set to &#39;Automatic&#39;.
        /// Possible values include: 'Wave0', 'Wave1', 'Wave2'</param>

        /// <param name="upgradePauseStartTimestampUtc">The start timestamp to pause runtime version upgrades on the cluster (UTC).
        /// </param>

        /// <param name="upgradePauseEndTimestampUtc">The end timestamp of pause runtime version upgrades on the cluster (UTC).
        /// </param>

        /// <param name="waveUpgradePaused">Boolean to pause automatic runtime version upgrades to the cluster.
        /// </param>

        /// <param name="notifications">Indicates a list of notification channels for cluster events.
        /// </param>
        public ClusterUpdateParameters(System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string reliabilityLevel = default(string), string upgradeMode = default(string), System.Collections.Generic.IList<string> addOnFeatures = default(System.Collections.Generic.IList<string>), CertificateDescription certificate = default(CertificateDescription), ServerCertificateCommonNames certificateCommonNames = default(ServerCertificateCommonNames), System.Collections.Generic.IList<ClientCertificateCommonName> clientCertificateCommonNames = default(System.Collections.Generic.IList<ClientCertificateCommonName>), System.Collections.Generic.IList<ClientCertificateThumbprint> clientCertificateThumbprints = default(System.Collections.Generic.IList<ClientCertificateThumbprint>), string clusterCodeVersion = default(string), bool? eventStoreServiceEnabled = default(bool?), System.Collections.Generic.IList<SettingsSectionDescription> fabricSettings = default(System.Collections.Generic.IList<SettingsSectionDescription>), System.Collections.Generic.IList<NodeTypeDescription> nodeTypes = default(System.Collections.Generic.IList<NodeTypeDescription>), CertificateDescription reverseProxyCertificate = default(CertificateDescription), ClusterUpgradePolicy upgradeDescription = default(ClusterUpgradePolicy), ApplicationTypeVersionsCleanupPolicy applicationTypeVersionsCleanupPolicy = default(ApplicationTypeVersionsCleanupPolicy), string sfZonalUpgradeMode = default(string), string vmssZonalUpgradeMode = default(string), bool? infrastructureServiceManager = default(bool?), string upgradeWave = default(string), System.DateTime? upgradePauseStartTimestampUtc = default(System.DateTime?), System.DateTime? upgradePauseEndTimestampUtc = default(System.DateTime?), bool? waveUpgradePaused = default(bool?), System.Collections.Generic.IList<Notification> notifications = default(System.Collections.Generic.IList<Notification>))

        {
            this.Tags = tags;
            this.ReliabilityLevel = reliabilityLevel;
            this.UpgradeMode = upgradeMode;
            this.AddOnFeatures = addOnFeatures;
            this.Certificate = certificate;
            this.CertificateCommonNames = certificateCommonNames;
            this.ClientCertificateCommonNames = clientCertificateCommonNames;
            this.ClientCertificateThumbprints = clientCertificateThumbprints;
            this.ClusterCodeVersion = clusterCodeVersion;
            this.EventStoreServiceEnabled = eventStoreServiceEnabled;
            this.FabricSettings = fabricSettings;
            this.NodeTypes = nodeTypes;
            this.ReverseProxyCertificate = reverseProxyCertificate;
            this.UpgradeDescription = upgradeDescription;
            this.ApplicationTypeVersionsCleanupPolicy = applicationTypeVersionsCleanupPolicy;
            this.SfZonalUpgradeMode = sfZonalUpgradeMode;
            this.VmssZonalUpgradeMode = vmssZonalUpgradeMode;
            this.InfrastructureServiceManager = infrastructureServiceManager;
            this.UpgradeWave = upgradeWave;
            this.UpgradePauseStartTimestampUtc = upgradePauseStartTimestampUtc;
            this.UpgradePauseEndTimestampUtc = upgradePauseEndTimestampUtc;
            this.WaveUpgradePaused = waveUpgradePaused;
            this.Notifications = notifications;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets cluster update parameters
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets or sets the reliability level sets the replica set size of system
        /// services. Learn about
        /// [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
        /// - None - Run the System services with a target replica set count of 1. This
        /// should only be used for test clusters.
        /// - Bronze - Run the System services with a target replica set count of 3.
        /// This should only be used for test clusters.
        /// - Silver - Run the System services with a target replica set count of 5.
        /// - Gold - Run the System services with a target replica set count of 7.
        /// - Platinum - Run the System services with a target replica set count of 9. Possible values include: &#39;None&#39;, &#39;Bronze&#39;, &#39;Silver&#39;, &#39;Gold&#39;, &#39;Platinum&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.reliabilityLevel")]
        public string ReliabilityLevel {get; set; }

        /// <summary>
        /// Gets or sets the upgrade mode of the cluster when new Service Fabric
        /// runtime version is available. Possible values include: &#39;Automatic&#39;, &#39;Manual&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.upgradeMode")]
        public string UpgradeMode {get; set; }

        /// <summary>
        /// Gets or sets the list of add-on features to enable in the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.addOnFeatures")]
        public System.Collections.Generic.IList<string> AddOnFeatures {get; set; }

        /// <summary>
        /// Gets or sets the certificate to use for securing the cluster. The
        /// certificate provided will be used for  node to node security within the
        /// cluster, SSL certificate for cluster management endpoint and default  admin
        /// client.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.certificate")]
        public CertificateDescription Certificate {get; set; }

        /// <summary>
        /// Gets or sets describes a list of server certificates referenced by common
        /// name that are used to secure the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.certificateCommonNames")]
        public ServerCertificateCommonNames CertificateCommonNames {get; set; }

        /// <summary>
        /// Gets or sets the list of client certificates referenced by common name that
        /// are allowed to manage the cluster. This will overwrite the existing list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.clientCertificateCommonNames")]
        public System.Collections.Generic.IList<ClientCertificateCommonName> ClientCertificateCommonNames {get; set; }

        /// <summary>
        /// Gets or sets the list of client certificates referenced by thumbprint that
        /// are allowed to manage the cluster. This will overwrite the existing list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.clientCertificateThumbprints")]
        public System.Collections.Generic.IList<ClientCertificateThumbprint> ClientCertificateThumbprints {get; set; }

        /// <summary>
        /// Gets or sets the Service Fabric runtime version of the cluster. This
        /// property can only by set the user when **upgradeMode** is set to &#39;Manual&#39;.
        /// To get list of available Service Fabric versions for new clusters use
        /// [ClusterVersion
        /// API](https://learn.microsoft.com/rest/api/servicefabric/cluster-versions/list).
        /// To get the list of available version for existing clusters use
        /// **availableClusterVersions**.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.clusterCodeVersion")]
        public string ClusterCodeVersion {get; set; }

        /// <summary>
        /// Gets or sets indicates if the event store service is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.eventStoreServiceEnabled")]
        public bool? EventStoreServiceEnabled {get; set; }

        /// <summary>
        /// Gets or sets the list of custom fabric settings to configure the cluster.
        /// This will overwrite the existing list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.fabricSettings")]
        public System.Collections.Generic.IList<SettingsSectionDescription> FabricSettings {get; set; }

        /// <summary>
        /// Gets or sets the list of node types in the cluster. This will overwrite the
        /// existing list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.nodeTypes")]
        public System.Collections.Generic.IList<NodeTypeDescription> NodeTypes {get; set; }

        /// <summary>
        /// Gets or sets the server certificate used by reverse proxy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.reverseProxyCertificate")]
        public CertificateDescription ReverseProxyCertificate {get; set; }

        /// <summary>
        /// Gets or sets the policy to use when upgrading the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.upgradeDescription")]
        public ClusterUpgradePolicy UpgradeDescription {get; set; }

        /// <summary>
        /// Gets or sets the policy used to clean up unused versions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.applicationTypeVersionsCleanupPolicy")]
        public ApplicationTypeVersionsCleanupPolicy ApplicationTypeVersionsCleanupPolicy {get; set; }

        /// <summary>
        /// Gets or sets this property controls the logical grouping of VMs in upgrade
        /// domains (UDs). This property can&#39;t be modified if a node type with multiple
        /// Availability Zones is already present in the cluster. Possible values include: &#39;Parallel&#39;, &#39;Hierarchical&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sfZonalUpgradeMode")]
        public string SfZonalUpgradeMode {get; set; }

        /// <summary>
        /// Gets or sets this property defines the upgrade mode for the virtual machine
        /// scale set, it is mandatory if a node type with multiple Availability Zones
        /// is added. Possible values include: &#39;Parallel&#39;, &#39;Hierarchical&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.vmssZonalUpgradeMode")]
        public string VmssZonalUpgradeMode {get; set; }

        /// <summary>
        /// Gets or sets indicates if infrastructure service manager is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.infrastructureServiceManager")]
        public bool? InfrastructureServiceManager {get; set; }

        /// <summary>
        /// Gets or sets indicates when new cluster runtime version upgrades will be
        /// applied after they are released. By default is Wave0. Only applies when
        /// **upgradeMode** is set to &#39;Automatic&#39;. Possible values include: &#39;Wave0&#39;, &#39;Wave1&#39;, &#39;Wave2&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.upgradeWave")]
        public string UpgradeWave {get; set; }

        /// <summary>
        /// Gets or sets the start timestamp to pause runtime version upgrades on the
        /// cluster (UTC).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.upgradePauseStartTimestampUtc")]
        public System.DateTime? UpgradePauseStartTimestampUtc {get; set; }

        /// <summary>
        /// Gets or sets the end timestamp of pause runtime version upgrades on the
        /// cluster (UTC).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.upgradePauseEndTimestampUtc")]
        public System.DateTime? UpgradePauseEndTimestampUtc {get; set; }

        /// <summary>
        /// Gets or sets boolean to pause automatic runtime version upgrades to the
        /// cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.waveUpgradePaused")]
        public bool? WaveUpgradePaused {get; set; }

        /// <summary>
        /// Gets or sets indicates a list of notification channels for cluster events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.notifications")]
        public System.Collections.Generic.IList<Notification> Notifications {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {




            if (this.Certificate != null)
            {
                this.Certificate.Validate();
            }

            if (this.ClientCertificateCommonNames != null)
            {
                foreach (var element in this.ClientCertificateCommonNames)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.ClientCertificateThumbprints != null)
            {
                foreach (var element in this.ClientCertificateThumbprints)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

            if (this.FabricSettings != null)
            {
                foreach (var element in this.FabricSettings)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.NodeTypes != null)
            {
                foreach (var element in this.NodeTypes)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.ReverseProxyCertificate != null)
            {
                this.ReverseProxyCertificate.Validate();
            }
            if (this.UpgradeDescription != null)
            {
                this.UpgradeDescription.Validate();
            }
            if (this.ApplicationTypeVersionsCleanupPolicy != null)
            {
                this.ApplicationTypeVersionsCleanupPolicy.Validate();
            }



            if (this.Notifications != null)
            {
                foreach (var element in this.Notifications)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}