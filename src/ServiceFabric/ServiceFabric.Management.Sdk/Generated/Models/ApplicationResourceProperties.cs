// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using System.Linq;

    /// <summary>
    /// The application resource properties.
    /// </summary>
    public partial class ApplicationResourceProperties : ApplicationResourceUpdateProperties
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationResourceProperties class.
        /// </summary>
        public ApplicationResourceProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationResourceProperties class.
        /// </summary>

        /// <param name="typeVersion">The version of the application type as defined in the application manifest.
        /// </param>

        /// <param name="parameters">List of application parameters with overridden values from their default
        /// values specified in the application manifest.
        /// </param>

        /// <param name="upgradePolicy">Describes the policy for a monitored application upgrade.
        /// </param>

        /// <param name="minimumNodes">The minimum number of nodes where Service Fabric will reserve capacity for
        /// this application. Note that this does not mean that the services of this
        /// application will be placed on all of those nodes. If this property is set
        /// to zero, no capacity will be reserved. The value of this property cannot be
        /// more than the value of the MaximumNodes property.
        /// </param>

        /// <param name="maximumNodes">The maximum number of nodes where Service Fabric will reserve capacity for
        /// this application. Note that this does not mean that the services of this
        /// application will be placed on all of those nodes. By default, the value of
        /// this property is zero and it means that the services can be placed on any
        /// node.
        /// </param>

        /// <param name="removeApplicationCapacity">Remove the current application capacity settings.
        /// </param>

        /// <param name="metrics">List of application capacity metric description.
        /// </param>

        /// <param name="managedIdentities">List of user assigned identities for the application, each mapped to a
        /// friendly name.
        /// </param>

        /// <param name="provisioningState">The current deployment or provisioning state, which only appears in the
        /// response
        /// </param>

        /// <param name="typeName">The application type name as defined in the application manifest.
        /// </param>
        public ApplicationResourceProperties(string typeVersion = default(string), System.Collections.Generic.IDictionary<string, string> parameters = default(System.Collections.Generic.IDictionary<string, string>), ApplicationUpgradePolicy upgradePolicy = default(ApplicationUpgradePolicy), long? minimumNodes = default(long?), long? maximumNodes = default(long?), bool? removeApplicationCapacity = default(bool?), System.Collections.Generic.IList<ApplicationMetricDescription> metrics = default(System.Collections.Generic.IList<ApplicationMetricDescription>), System.Collections.Generic.IList<ApplicationUserAssignedIdentity> managedIdentities = default(System.Collections.Generic.IList<ApplicationUserAssignedIdentity>), string provisioningState = default(string), string typeName = default(string))

        : base(typeVersion, parameters, upgradePolicy, minimumNodes, maximumNodes, removeApplicationCapacity, metrics, managedIdentities)
        {
            this.ProvisioningState = provisioningState;
            this.TypeName = typeName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the current deployment or provisioning state, which only appears in
        /// the response
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the application type name as defined in the application
        /// manifest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "typeName")]
        public string TypeName {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();


        }
    }
}