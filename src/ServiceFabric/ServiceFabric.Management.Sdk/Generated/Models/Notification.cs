// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the notification channel for cluster events.
    /// </summary>
    public partial class Notification
    {
        /// <summary>
        /// Initializes a new instance of the Notification class.
        /// </summary>
        public Notification()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Notification class.
        /// </summary>

        /// <param name="isEnabled">Indicates if the notification is enabled.
        /// </param>

        /// <param name="notificationLevel">The level of notification.
        /// Possible values include: 'Critical', 'All'</param>

        /// <param name="notificationTargets">List of targets that subscribe to the notification.
        /// </param>
        public Notification(bool isEnabled, string notificationLevel, System.Collections.Generic.IList<NotificationTarget> notificationTargets)

        {
            this.IsEnabled = isEnabled;
            this.NotificationLevel = notificationLevel;
            this.NotificationTargets = notificationTargets;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for Notification class.
        /// </summary>
        static Notification()
        {
            NotificationCategory = "WaveProgress";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets indicates if the notification is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isEnabled")]
        public bool IsEnabled {get; set; }

        /// <summary>
        /// Gets or sets the level of notification. Possible values include: &#39;Critical&#39;, &#39;All&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "notificationLevel")]
        public string NotificationLevel {get; set; }

        /// <summary>
        /// Gets or sets list of targets that subscribe to the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "notificationTargets")]
        public System.Collections.Generic.IList<NotificationTarget> NotificationTargets {get; set; }
        /// <summary>
        /// Gets or sets the category of notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "notificationCategory")]
        public static string NotificationCategory {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.NotificationLevel == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "NotificationLevel");
            }
            if (this.NotificationTargets == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "NotificationTargets");
            }


            if (this.NotificationTargets != null)
            {
                foreach (var element in this.NotificationTargets)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}