// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using System.Linq;

    /// <summary>
    /// Represents the health policy used to evaluate the health of services
    /// belonging to a service type.
    /// </summary>
    public partial class ServiceTypeHealthPolicy
    {
        /// <summary>
        /// Initializes a new instance of the ServiceTypeHealthPolicy class.
        /// </summary>
        public ServiceTypeHealthPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceTypeHealthPolicy class.
        /// </summary>

        /// <param name="maxPercentUnhealthyServices">The maximum percentage of services allowed to be unhealthy before your
        /// application is considered in error.
        /// </param>
        public ServiceTypeHealthPolicy(int? maxPercentUnhealthyServices = default(int?))

        {
            this.MaxPercentUnhealthyServices = maxPercentUnhealthyServices;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the maximum percentage of services allowed to be unhealthy
        /// before your application is considered in error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxPercentUnhealthyServices")]
        public int? MaxPercentUnhealthyServices {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.MaxPercentUnhealthyServices != null)
            {
                if (this.MaxPercentUnhealthyServices > 100)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "MaxPercentUnhealthyServices", 100);
                }
                if (this.MaxPercentUnhealthyServices < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MaxPercentUnhealthyServices", 0);
                }
            }
        }
    }
}