// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using System.Linq;

    /// <summary>
    /// Defines a health policy used to evaluate the health of an application or
    /// one of its children entities.
    /// </summary>
    public partial class ArmApplicationHealthPolicy
    {
        /// <summary>
        /// Initializes a new instance of the ArmApplicationHealthPolicy class.
        /// </summary>
        public ArmApplicationHealthPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ArmApplicationHealthPolicy class.
        /// </summary>

        /// <param name="considerWarningAsError">Indicates whether warnings are treated with the same severity as errors.
        /// </param>

        /// <param name="maxPercentUnhealthyDeployedApplications">The maximum allowed percentage of unhealthy deployed applications. Allowed
        /// values are Byte values from zero to 100.
        /// The percentage represents the maximum tolerated percentage of deployed
        /// applications that can be unhealthy before the application is considered in
        /// error.
        /// This is calculated by dividing the number of unhealthy deployed
        /// applications over the number of nodes where the application is currently
        /// deployed on in the cluster.
        /// The computation rounds up to tolerate one failure on small numbers of
        /// nodes. Default percentage is zero.
        /// </param>

        /// <param name="defaultServiceTypeHealthPolicy">The health policy used by default to evaluate the health of a service type.
        /// </param>

        /// <param name="serviceTypeHealthPolicyMap">The map with service type health policy per service type name. The map is
        /// empty by default.
        /// </param>
        public ArmApplicationHealthPolicy(bool? considerWarningAsError = default(bool?), int? maxPercentUnhealthyDeployedApplications = default(int?), ArmServiceTypeHealthPolicy defaultServiceTypeHealthPolicy = default(ArmServiceTypeHealthPolicy), System.Collections.Generic.IDictionary<string, ArmServiceTypeHealthPolicy> serviceTypeHealthPolicyMap = default(System.Collections.Generic.IDictionary<string, ArmServiceTypeHealthPolicy>))

        {
            this.ConsiderWarningAsError = considerWarningAsError;
            this.MaxPercentUnhealthyDeployedApplications = maxPercentUnhealthyDeployedApplications;
            this.DefaultServiceTypeHealthPolicy = defaultServiceTypeHealthPolicy;
            this.ServiceTypeHealthPolicyMap = serviceTypeHealthPolicyMap;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets indicates whether warnings are treated with the same severity
        /// as errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "considerWarningAsError")]
        public bool? ConsiderWarningAsError {get; set; }

        /// <summary>
        /// Gets or sets the maximum allowed percentage of unhealthy deployed
        /// applications. Allowed values are Byte values from zero to 100.
        /// The percentage represents the maximum tolerated percentage of deployed
        /// applications that can be unhealthy before the application is considered in
        /// error.
        /// This is calculated by dividing the number of unhealthy deployed
        /// applications over the number of nodes where the application is currently
        /// deployed on in the cluster.
        /// The computation rounds up to tolerate one failure on small numbers of
        /// nodes. Default percentage is zero.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxPercentUnhealthyDeployedApplications")]
        public int? MaxPercentUnhealthyDeployedApplications {get; set; }

        /// <summary>
        /// Gets or sets the health policy used by default to evaluate the health of a
        /// service type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultServiceTypeHealthPolicy")]
        public ArmServiceTypeHealthPolicy DefaultServiceTypeHealthPolicy {get; set; }

        /// <summary>
        /// Gets or sets the map with service type health policy per service type name.
        /// The map is empty by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceTypeHealthPolicyMap")]
        public System.Collections.Generic.IDictionary<string, ArmServiceTypeHealthPolicy> ServiceTypeHealthPolicyMap {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DefaultServiceTypeHealthPolicy != null)
            {
                this.DefaultServiceTypeHealthPolicy.Validate();
            }
            if (this.ServiceTypeHealthPolicyMap != null)
            {
                foreach (var valueElement in this.ServiceTypeHealthPolicyMap.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
        }
    }
}