// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using System.Linq;

    /// <summary>
    /// Describes a partitioning scheme where an integer range is allocated evenly
    /// across a number of partitions.
    /// </summary>
    [Newtonsoft.Json.JsonObject("UniformInt64Range")]
    public partial class UniformInt64RangePartitionSchemeDescription : PartitionSchemeDescription
    {
        /// <summary>
        /// Initializes a new instance of the UniformInt64RangePartitionSchemeDescription class.
        /// </summary>
        public UniformInt64RangePartitionSchemeDescription()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UniformInt64RangePartitionSchemeDescription class.
        /// </summary>

        /// <param name="count">The number of partitions.
        /// </param>

        /// <param name="lowKey">String indicating the lower bound of the partition key range that
        /// should be split between the partition ‘count’
        /// </param>

        /// <param name="highKey">String indicating the upper bound of the partition key range that
        /// should be split between the partition ‘count’
        /// </param>
        public UniformInt64RangePartitionSchemeDescription(int count, string lowKey, string highKey)

        {
            this.Count = count;
            this.LowKey = lowKey;
            this.HighKey = highKey;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the number of partitions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count")]
        public int Count {get; set; }

        /// <summary>
        /// Gets or sets string indicating the lower bound of the partition key range
        /// that
        /// should be split between the partition ‘count’
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lowKey")]
        public string LowKey {get; set; }

        /// <summary>
        /// Gets or sets string indicating the upper bound of the partition key range
        /// that
        /// should be split between the partition ‘count’
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "highKey")]
        public string HighKey {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.LowKey == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "LowKey");
            }
            if (this.HighKey == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "HighKey");
            }


        }
    }
}