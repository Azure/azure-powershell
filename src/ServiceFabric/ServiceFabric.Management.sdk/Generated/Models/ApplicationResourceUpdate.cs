// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using System.Linq;

    /// <summary>
    /// The application resource for patch operations.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ApplicationResourceUpdate : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationResourceUpdate class.
        /// </summary>
        public ApplicationResourceUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationResourceUpdate class.
        /// </summary>

        /// <param name="id">Azure resource identifier.
        /// </param>

        /// <param name="name">Azure resource name.
        /// </param>

        /// <param name="type">Azure resource type.
        /// </param>

        /// <param name="location">It will be deprecated in New API, resource location depends on the parent
        /// resource.
        /// </param>

        /// <param name="tags">Azure resource tags.
        /// </param>

        /// <param name="etag">Azure resource etag.
        /// </param>

        /// <param name="systemData">Metadata pertaining to creation and last modification of the resource.
        /// </param>

        /// <param name="typeVersion">The version of the application type as defined in the application manifest.
        /// </param>

        /// <param name="parameters">List of application parameters with overridden values from their default
        /// values specified in the application manifest.
        /// </param>

        /// <param name="upgradePolicy">Describes the policy for a monitored application upgrade.
        /// </param>

        /// <param name="minimumNodes">The minimum number of nodes where Service Fabric will reserve capacity for
        /// this application. Note that this does not mean that the services of this
        /// application will be placed on all of those nodes. If this property is set
        /// to zero, no capacity will be reserved. The value of this property cannot be
        /// more than the value of the MaximumNodes property.
        /// </param>

        /// <param name="maximumNodes">The maximum number of nodes where Service Fabric will reserve capacity for
        /// this application. Note that this does not mean that the services of this
        /// application will be placed on all of those nodes. By default, the value of
        /// this property is zero and it means that the services can be placed on any
        /// node.
        /// </param>

        /// <param name="removeApplicationCapacity">Remove the current application capacity settings.
        /// </param>

        /// <param name="metrics">List of application capacity metric description.
        /// </param>

        /// <param name="managedIdentities">List of user assigned identities for the application, each mapped to a
        /// friendly name.
        /// </param>
        public ApplicationResourceUpdate(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string etag = default(string), SystemData systemData = default(SystemData), string typeVersion = default(string), System.Collections.Generic.IDictionary<string, string> parameters = default(System.Collections.Generic.IDictionary<string, string>), ApplicationUpgradePolicy upgradePolicy = default(ApplicationUpgradePolicy), long? minimumNodes = default(long?), long? maximumNodes = default(long?), bool? removeApplicationCapacity = default(bool?), System.Collections.Generic.IList<ApplicationMetricDescription> metrics = default(System.Collections.Generic.IList<ApplicationMetricDescription>), System.Collections.Generic.IList<ApplicationUserAssignedIdentity> managedIdentities = default(System.Collections.Generic.IList<ApplicationUserAssignedIdentity>))

        : base(id, name, type, location, tags, etag, systemData)
        {
            this.TypeVersion = typeVersion;
            this.Parameters = parameters;
            this.UpgradePolicy = upgradePolicy;
            this.MinimumNodes = minimumNodes;
            this.MaximumNodes = maximumNodes;
            this.RemoveApplicationCapacity = removeApplicationCapacity;
            this.Metrics = metrics;
            this.ManagedIdentities = managedIdentities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the version of the application type as defined in the
        /// application manifest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.typeVersion")]
        public string TypeVersion {get; set; }

        /// <summary>
        /// Gets or sets list of application parameters with overridden values from
        /// their default values specified in the application manifest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.parameters")]
        public System.Collections.Generic.IDictionary<string, string> Parameters {get; set; }

        /// <summary>
        /// Gets or sets describes the policy for a monitored application upgrade.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.upgradePolicy")]
        public ApplicationUpgradePolicy UpgradePolicy {get; set; }

        /// <summary>
        /// Gets or sets the minimum number of nodes where Service Fabric will reserve
        /// capacity for this application. Note that this does not mean that the
        /// services of this application will be placed on all of those nodes. If this
        /// property is set to zero, no capacity will be reserved. The value of this
        /// property cannot be more than the value of the MaximumNodes property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.minimumNodes")]
        public long? MinimumNodes {get; set; }

        /// <summary>
        /// Gets or sets the maximum number of nodes where Service Fabric will reserve
        /// capacity for this application. Note that this does not mean that the
        /// services of this application will be placed on all of those nodes. By
        /// default, the value of this property is zero and it means that the services
        /// can be placed on any node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maximumNodes")]
        public long? MaximumNodes {get; set; }

        /// <summary>
        /// Gets or sets remove the current application capacity settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.removeApplicationCapacity")]
        public bool? RemoveApplicationCapacity {get; set; }

        /// <summary>
        /// Gets or sets list of application capacity metric description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.metrics")]
        public System.Collections.Generic.IList<ApplicationMetricDescription> Metrics {get; set; }

        /// <summary>
        /// Gets or sets list of user assigned identities for the application, each
        /// mapped to a friendly name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.managedIdentities")]
        public System.Collections.Generic.IList<ApplicationUserAssignedIdentity> ManagedIdentities {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.UpgradePolicy != null)
            {
                this.UpgradePolicy.Validate();
            }
            if (this.MinimumNodes != null)
            {
                if (this.MinimumNodes < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MinimumNodes", 0);
                }
            }
            if (this.MaximumNodes != null)
            {
                if (this.MaximumNodes < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MaximumNodes", 0);
                }
            }

            if (this.ManagedIdentities != null)
            {
                foreach (var element in this.ManagedIdentities)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}