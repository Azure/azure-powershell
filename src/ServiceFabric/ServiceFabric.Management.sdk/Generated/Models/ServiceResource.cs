// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using System.Linq;

    /// <summary>
    /// The service resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ServiceResource : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ServiceResource class.
        /// </summary>
        public ServiceResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceResource class.
        /// </summary>

        /// <param name="id">Azure resource identifier.
        /// </param>

        /// <param name="name">Azure resource name.
        /// </param>

        /// <param name="type">Azure resource type.
        /// </param>

        /// <param name="location">It will be deprecated in New API, resource location depends on the parent
        /// resource.
        /// </param>

        /// <param name="tags">Azure resource tags.
        /// </param>

        /// <param name="etag">Azure resource etag.
        /// </param>

        /// <param name="systemData">Metadata pertaining to creation and last modification of the resource.
        /// </param>

        /// <param name="placementConstraints">The placement constraints as a string. Placement constraints are boolean
        /// expressions on node properties and allow for restricting a service to
        /// particular nodes based on the service requirements. For example, to place a
        /// service on nodes where NodeType is blue specify the following: &#34;NodeColor
        /// == blue)&#34;.
        /// </param>

        /// <param name="correlationScheme">A list that describes the correlation of the service with other services.
        /// </param>

        /// <param name="serviceLoadMetrics">The service load metrics is given as an array of
        /// ServiceLoadMetricDescription objects.
        /// </param>

        /// <param name="servicePlacementPolicies">A list that describes the correlation of the service with other services.
        /// </param>

        /// <param name="defaultMoveCost">Specifies the move cost for the service.
        /// Possible values include: 'Zero', 'Low', 'Medium', 'High'</param>

        /// <param name="provisioningState">The current deployment or provisioning state, which only appears in the
        /// response
        /// </param>

        /// <param name="serviceTypeName">The name of the service type
        /// </param>

        /// <param name="partitionDescription">Describes how the service is partitioned.
        /// </param>

        /// <param name="servicePackageActivationMode">The activation Mode of the service package
        /// Possible values include: 'SharedProcess', 'ExclusiveProcess'</param>

        /// <param name="serviceDnsName">Dns name used for the service. If this is specified, then the service can
        /// be accessed via its DNS name instead of service name.
        /// </param>
        public ServiceResource(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string etag = default(string), SystemData systemData = default(SystemData), string placementConstraints = default(string), System.Collections.Generic.IList<ServiceCorrelationDescription> correlationScheme = default(System.Collections.Generic.IList<ServiceCorrelationDescription>), System.Collections.Generic.IList<ServiceLoadMetricDescription> serviceLoadMetrics = default(System.Collections.Generic.IList<ServiceLoadMetricDescription>), System.Collections.Generic.IList<ServicePlacementPolicyDescription> servicePlacementPolicies = default(System.Collections.Generic.IList<ServicePlacementPolicyDescription>), string defaultMoveCost = default(string), string provisioningState = default(string), string serviceTypeName = default(string), PartitionSchemeDescription partitionDescription = default(PartitionSchemeDescription), string servicePackageActivationMode = default(string), string serviceDnsName = default(string))

        : base(id, name, type, location, tags, etag, systemData)
        {
            this.PlacementConstraints = placementConstraints;
            this.CorrelationScheme = correlationScheme;
            this.ServiceLoadMetrics = serviceLoadMetrics;
            this.ServicePlacementPolicies = servicePlacementPolicies;
            this.DefaultMoveCost = defaultMoveCost;
            this.ProvisioningState = provisioningState;
            this.ServiceTypeName = serviceTypeName;
            this.PartitionDescription = partitionDescription;
            this.ServicePackageActivationMode = servicePackageActivationMode;
            this.ServiceDnsName = serviceDnsName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the placement constraints as a string. Placement constraints
        /// are boolean expressions on node properties and allow for restricting a
        /// service to particular nodes based on the service requirements. For example,
        /// to place a service on nodes where NodeType is blue specify the following:
        /// &#34;NodeColor == blue)&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.placementConstraints")]
        public string PlacementConstraints {get; set; }

        /// <summary>
        /// Gets or sets a list that describes the correlation of the service with
        /// other services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.correlationScheme")]
        public System.Collections.Generic.IList<ServiceCorrelationDescription> CorrelationScheme {get; set; }

        /// <summary>
        /// Gets or sets the service load metrics is given as an array of
        /// ServiceLoadMetricDescription objects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serviceLoadMetrics")]
        public System.Collections.Generic.IList<ServiceLoadMetricDescription> ServiceLoadMetrics {get; set; }

        /// <summary>
        /// Gets or sets a list that describes the correlation of the service with
        /// other services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.servicePlacementPolicies")]
        public System.Collections.Generic.IList<ServicePlacementPolicyDescription> ServicePlacementPolicies {get; set; }

        /// <summary>
        /// Gets or sets specifies the move cost for the service. Possible values include: &#39;Zero&#39;, &#39;Low&#39;, &#39;Medium&#39;, &#39;High&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.defaultMoveCost")]
        public string DefaultMoveCost {get; set; }

        /// <summary>
        /// Gets the current deployment or provisioning state, which only appears in
        /// the response
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the name of the service type
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serviceTypeName")]
        public string ServiceTypeName {get; set; }

        /// <summary>
        /// Gets or sets describes how the service is partitioned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.partitionDescription")]
        public PartitionSchemeDescription PartitionDescription {get; set; }

        /// <summary>
        /// Gets or sets the activation Mode of the service package Possible values include: &#39;SharedProcess&#39;, &#39;ExclusiveProcess&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.servicePackageActivationMode")]
        public string ServicePackageActivationMode {get; set; }

        /// <summary>
        /// Gets or sets dns name used for the service. If this is specified, then the
        /// service can be accessed via its DNS name instead of service name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serviceDnsName")]
        public string ServiceDnsName {get; set; }
    }
}