// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using System.Linq;

    /// <summary>
    /// The properties of a stateful service resource for patch operations.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Stateful")]
    public partial class StatefulServiceUpdateProperties : ServiceResourceUpdateProperties
    {
        /// <summary>
        /// Initializes a new instance of the StatefulServiceUpdateProperties class.
        /// </summary>
        public StatefulServiceUpdateProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StatefulServiceUpdateProperties class.
        /// </summary>

        /// <param name="placementConstraints">The placement constraints as a string. Placement constraints are boolean
        /// expressions on node properties and allow for restricting a service to
        /// particular nodes based on the service requirements. For example, to place a
        /// service on nodes where NodeType is blue specify the following: &#34;NodeColor
        /// == blue)&#34;.
        /// </param>

        /// <param name="correlationScheme">A list that describes the correlation of the service with other services.
        /// </param>

        /// <param name="serviceLoadMetrics">The service load metrics is given as an array of
        /// ServiceLoadMetricDescription objects.
        /// </param>

        /// <param name="servicePlacementPolicies">A list that describes the correlation of the service with other services.
        /// </param>

        /// <param name="defaultMoveCost">Specifies the move cost for the service.
        /// Possible values include: 'Zero', 'Low', 'Medium', 'High'</param>

        /// <param name="targetReplicaSetSize">The target replica set size as a number.
        /// </param>

        /// <param name="minReplicaSetSize">The minimum replica set size as a number.
        /// </param>

        /// <param name="replicaRestartWaitDuration">The duration between when a replica goes down and when a new replica is
        /// created, represented in ISO 8601 format (hh:mm:ss.s).
        /// </param>

        /// <param name="quorumLossWaitDuration">The maximum duration for which a partition is allowed to be in a state of
        /// quorum loss, represented in ISO 8601 format (hh:mm:ss.s).
        /// </param>

        /// <param name="standByReplicaKeepDuration">The definition on how long StandBy replicas should be maintained before
        /// being removed, represented in ISO 8601 format (hh:mm:ss.s).
        /// </param>
        public StatefulServiceUpdateProperties(string placementConstraints = default(string), System.Collections.Generic.IList<ServiceCorrelationDescription> correlationScheme = default(System.Collections.Generic.IList<ServiceCorrelationDescription>), System.Collections.Generic.IList<ServiceLoadMetricDescription> serviceLoadMetrics = default(System.Collections.Generic.IList<ServiceLoadMetricDescription>), System.Collections.Generic.IList<ServicePlacementPolicyDescription> servicePlacementPolicies = default(System.Collections.Generic.IList<ServicePlacementPolicyDescription>), string defaultMoveCost = default(string), int? targetReplicaSetSize = default(int?), int? minReplicaSetSize = default(int?), System.DateTime? replicaRestartWaitDuration = default(System.DateTime?), System.DateTime? quorumLossWaitDuration = default(System.DateTime?), System.DateTime? standByReplicaKeepDuration = default(System.DateTime?))

        : base(placementConstraints, correlationScheme, serviceLoadMetrics, servicePlacementPolicies, defaultMoveCost)
        {
            this.TargetReplicaSetSize = targetReplicaSetSize;
            this.MinReplicaSetSize = minReplicaSetSize;
            this.ReplicaRestartWaitDuration = replicaRestartWaitDuration;
            this.QuorumLossWaitDuration = quorumLossWaitDuration;
            this.StandByReplicaKeepDuration = standByReplicaKeepDuration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the target replica set size as a number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetReplicaSetSize")]
        public int? TargetReplicaSetSize {get; set; }

        /// <summary>
        /// Gets or sets the minimum replica set size as a number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minReplicaSetSize")]
        public int? MinReplicaSetSize {get; set; }

        /// <summary>
        /// Gets or sets the duration between when a replica goes down and when a new
        /// replica is created, represented in ISO 8601 format (hh:mm:ss.s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "replicaRestartWaitDuration")]
        public System.DateTime? ReplicaRestartWaitDuration {get; set; }

        /// <summary>
        /// Gets or sets the maximum duration for which a partition is allowed to be in
        /// a state of quorum loss, represented in ISO 8601 format (hh:mm:ss.s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "quorumLossWaitDuration")]
        public System.DateTime? QuorumLossWaitDuration {get; set; }

        /// <summary>
        /// Gets or sets the definition on how long StandBy replicas should be
        /// maintained before being removed, represented in ISO 8601 format
        /// (hh:mm:ss.s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "standByReplicaKeepDuration")]
        public System.DateTime? StandByReplicaKeepDuration {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.TargetReplicaSetSize != null)
            {
                if (this.TargetReplicaSetSize < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "TargetReplicaSetSize", 1);
                }
            }
            if (this.MinReplicaSetSize != null)
            {
                if (this.MinReplicaSetSize < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MinReplicaSetSize", 1);
                }
            }
        }
    }
}