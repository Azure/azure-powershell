// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.ServiceFabric
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ClusterVersionsOperations
    /// </summary>
    public static partial class ClusterVersionsOperationsExtensions
    {
        /// <summary>
        /// Gets information about an available Service Fabric cluster code version.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The location for the cluster code versions. This is different from cluster location.
        /// </param>
        /// <param name='clusterVersion'>
        /// The cluster code version.
        /// </param>
        public static ClusterCodeVersionsListResult Get(this IClusterVersionsOperations operations, string location, string clusterVersion)
        {
                return ((IClusterVersionsOperations)operations).GetAsync(location, clusterVersion).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets information about an available Service Fabric cluster code version.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The location for the cluster code versions. This is different from cluster location.
        /// </param>
        /// <param name='clusterVersion'>
        /// The cluster code version.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ClusterCodeVersionsListResult> GetAsync(this IClusterVersionsOperations operations, string location, string clusterVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(location, clusterVersion, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets information about an available Service Fabric cluster code version by environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The location for the cluster code versions. This is different from cluster location.
        /// </param>
        /// <param name='environment'>
        /// The operating system of the cluster. The default means all.
        /// </param>
        /// <param name='clusterVersion'>
        /// The cluster code version.
        /// </param>
        public static ClusterCodeVersionsListResult GetByEnvironment(this IClusterVersionsOperations operations, string location, string environment, string clusterVersion)
        {
                return ((IClusterVersionsOperations)operations).GetByEnvironmentAsync(location, environment, clusterVersion).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets information about an available Service Fabric cluster code version by environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The location for the cluster code versions. This is different from cluster location.
        /// </param>
        /// <param name='environment'>
        /// The operating system of the cluster. The default means all.
        /// </param>
        /// <param name='clusterVersion'>
        /// The cluster code version.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ClusterCodeVersionsListResult> GetByEnvironmentAsync(this IClusterVersionsOperations operations, string location, string environment, string clusterVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetByEnvironmentWithHttpMessagesAsync(location, environment, clusterVersion, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all available code versions for Service Fabric cluster resources by location.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The location for the cluster code versions. This is different from cluster location.
        /// </param>
        public static ClusterCodeVersionsListResult List(this IClusterVersionsOperations operations, string location)
        {
                return ((IClusterVersionsOperations)operations).ListAsync(location).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all available code versions for Service Fabric cluster resources by location.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The location for the cluster code versions. This is different from cluster location.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ClusterCodeVersionsListResult> ListAsync(this IClusterVersionsOperations operations, string location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(location, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all available code versions for Service Fabric cluster resources by environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The location for the cluster code versions. This is different from cluster location.
        /// </param>
        /// <param name='environment'>
        /// The operating system of the cluster. The default means all.
        /// </param>
        public static ClusterCodeVersionsListResult ListByEnvironment(this IClusterVersionsOperations operations, string location, string environment)
        {
                return ((IClusterVersionsOperations)operations).ListByEnvironmentAsync(location, environment).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all available code versions for Service Fabric cluster resources by environment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The location for the cluster code versions. This is different from cluster location.
        /// </param>
        /// <param name='environment'>
        /// The operating system of the cluster. The default means all.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ClusterCodeVersionsListResult> ListByEnvironmentAsync(this IClusterVersionsOperations operations, string location, string environment, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByEnvironmentWithHttpMessagesAsync(location, environment, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
