// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using System.Linq;

    /// <summary>
    /// Describes a load balancing rule.
    /// </summary>
    public partial class LoadBalancingRule
    {
        /// <summary>
        /// Initializes a new instance of the LoadBalancingRule class.
        /// </summary>
        public LoadBalancingRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LoadBalancingRule class.
        /// </summary>

        /// <param name="frontendPort">The port for the external endpoint. Port numbers for each rule must be
        /// unique within the Load Balancer. Acceptable values are between 1 and 65534.
        /// </param>

        /// <param name="backendPort">The port used for internal connections on the endpoint. Acceptable values
        /// are between 1 and 65535.
        /// </param>

        /// <param name="protocol">The reference to the transport protocol used by the load balancing rule.
        /// Possible values include: 'tcp', 'udp'</param>

        /// <param name="probePort">The prob port used by the load balancing rule. Acceptable values are
        /// between 1 and 65535.
        /// </param>

        /// <param name="probeProtocol">the reference to the load balancer probe used by the load balancing rule.
        /// Possible values include: 'tcp', 'http', 'https'</param>

        /// <param name="probeRequestPath">The probe request path. Only supported for HTTP/HTTPS probes.
        /// </param>

        /// <param name="loadDistribution">The load distribution policy for this rule.
        /// </param>
        public LoadBalancingRule(int frontendPort, int backendPort, string protocol, string probeProtocol, int? probePort = default(int?), string probeRequestPath = default(string), string loadDistribution = default(string))

        {
            this.FrontendPort = frontendPort;
            this.BackendPort = backendPort;
            this.Protocol = protocol;
            this.ProbePort = probePort;
            this.ProbeProtocol = probeProtocol;
            this.ProbeRequestPath = probeRequestPath;
            this.LoadDistribution = loadDistribution;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the port for the external endpoint. Port numbers for each rule
        /// must be unique within the Load Balancer. Acceptable values are between 1
        /// and 65534.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "frontendPort")]
        public int FrontendPort {get; set; }

        /// <summary>
        /// Gets or sets the port used for internal connections on the endpoint.
        /// Acceptable values are between 1 and 65535.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backendPort")]
        public int BackendPort {get; set; }

        /// <summary>
        /// Gets or sets the reference to the transport protocol used by the load
        /// balancing rule. Possible values include: &#39;tcp&#39;, &#39;udp&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets the prob port used by the load balancing rule. Acceptable
        /// values are between 1 and 65535.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "probePort")]
        public int? ProbePort {get; set; }

        /// <summary>
        /// Gets or sets the reference to the load balancer probe used by the load
        /// balancing rule. Possible values include: &#39;tcp&#39;, &#39;http&#39;, &#39;https&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "probeProtocol")]
        public string ProbeProtocol {get; set; }

        /// <summary>
        /// Gets or sets the probe request path. Only supported for HTTP/HTTPS probes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "probeRequestPath")]
        public string ProbeRequestPath {get; set; }

        /// <summary>
        /// Gets or sets the load distribution policy for this rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "loadDistribution")]
        public string LoadDistribution {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Protocol == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Protocol");
            }
            if (this.ProbeProtocol == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ProbeProtocol");
            }
            if (this.FrontendPort > 65534)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "FrontendPort", 65534);
            }
            if (this.FrontendPort < 1)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "FrontendPort", 1);
            }
            if (this.BackendPort > 65534)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "BackendPort", 65534);
            }
            if (this.BackendPort < 1)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "BackendPort", 1);
            }

            if (this.ProbePort != null)
            {
                if (this.ProbePort > 65534)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "ProbePort", 65534);
                }
                if (this.ProbePort < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "ProbePort", 1);
                }
            }



        }
    }
}