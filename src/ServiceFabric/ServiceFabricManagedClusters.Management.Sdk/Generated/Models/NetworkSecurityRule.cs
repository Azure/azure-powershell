// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using System.Linq;

    /// <summary>
    /// Describes a network security rule.
    /// </summary>
    public partial class NetworkSecurityRule
    {
        /// <summary>
        /// Initializes a new instance of the NetworkSecurityRule class.
        /// </summary>
        public NetworkSecurityRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NetworkSecurityRule class.
        /// </summary>

        /// <param name="name">Network security rule name.
        /// </param>

        /// <param name="description">Network security rule description.
        /// </param>

        /// <param name="protocol">Network protocol this rule applies to.
        /// Possible values include: 'http', 'https', 'tcp', 'udp', 'icmp', 'ah', 'esp'</param>

        /// <param name="sourceAddressPrefixes">The CIDR or source IP ranges.
        /// </param>

        /// <param name="destinationAddressPrefixes">The destination address prefixes. CIDR or destination IP ranges.
        /// </param>

        /// <param name="sourcePortRanges">The source port ranges.
        /// </param>

        /// <param name="destinationPortRanges">The destination port ranges.
        /// </param>

        /// <param name="sourceAddressPrefix">The CIDR or source IP range. Asterisk &#39;*&#39; can also be used to match all
        /// source IPs. Default tags such as &#39;VirtualNetwork&#39;, &#39;AzureLoadBalancer&#39; and
        /// &#39;Internet&#39; can also be used. If this is an ingress rule, specifies where
        /// network traffic originates from.
        /// </param>

        /// <param name="destinationAddressPrefix">The destination address prefix. CIDR or destination IP range. Asterisk &#39;*&#39;
        /// can also be used to match all source IPs. Default tags such as
        /// &#39;VirtualNetwork&#39;, &#39;AzureLoadBalancer&#39; and &#39;Internet&#39; can also be used.
        /// </param>

        /// <param name="sourcePortRange">The source port or range. Integer or range between 0 and 65535. Asterisk
        /// &#39;*&#39; can also be used to match all ports.
        /// </param>

        /// <param name="destinationPortRange">he destination port or range. Integer or range between 0 and 65535.
        /// Asterisk &#39;*&#39; can also be used to match all ports.
        /// </param>

        /// <param name="access">The network traffic is allowed or denied.
        /// Possible values include: 'allow', 'deny'</param>

        /// <param name="priority">The priority of the rule. The value can be in the range 1000 to 3000.
        /// Values outside this range are reserved for Service Fabric ManagerCluster
        /// Resource Provider. The priority number must be unique for each rule in the
        /// collection. The lower the priority number, the higher the priority of the
        /// rule.
        /// </param>

        /// <param name="direction">Network security rule direction.
        /// Possible values include: 'inbound', 'outbound'</param>
        public NetworkSecurityRule(string name, string protocol, string access, int priority, string direction, string description = default(string), System.Collections.Generic.IList<string> sourceAddressPrefixes = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> destinationAddressPrefixes = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> sourcePortRanges = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> destinationPortRanges = default(System.Collections.Generic.IList<string>), string sourceAddressPrefix = default(string), string destinationAddressPrefix = default(string), string sourcePortRange = default(string), string destinationPortRange = default(string))

        {
            this.Name = name;
            this.Description = description;
            this.Protocol = protocol;
            this.SourceAddressPrefixes = sourceAddressPrefixes;
            this.DestinationAddressPrefixes = destinationAddressPrefixes;
            this.SourcePortRanges = sourcePortRanges;
            this.DestinationPortRanges = destinationPortRanges;
            this.SourceAddressPrefix = sourceAddressPrefix;
            this.DestinationAddressPrefix = destinationAddressPrefix;
            this.SourcePortRange = sourcePortRange;
            this.DestinationPortRange = destinationPortRange;
            this.Access = access;
            this.Priority = priority;
            this.Direction = direction;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets network security rule name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets network security rule description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets network protocol this rule applies to. Possible values include: &#39;http&#39;, &#39;https&#39;, &#39;tcp&#39;, &#39;udp&#39;, &#39;icmp&#39;, &#39;ah&#39;, &#39;esp&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets the CIDR or source IP ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceAddressPrefixes")]
        public System.Collections.Generic.IList<string> SourceAddressPrefixes {get; set; }

        /// <summary>
        /// Gets or sets the destination address prefixes. CIDR or destination IP
        /// ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationAddressPrefixes")]
        public System.Collections.Generic.IList<string> DestinationAddressPrefixes {get; set; }

        /// <summary>
        /// Gets or sets the source port ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourcePortRanges")]
        public System.Collections.Generic.IList<string> SourcePortRanges {get; set; }

        /// <summary>
        /// Gets or sets the destination port ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationPortRanges")]
        public System.Collections.Generic.IList<string> DestinationPortRanges {get; set; }

        /// <summary>
        /// Gets or sets the CIDR or source IP range. Asterisk &#39;*&#39; can also be used to
        /// match all source IPs. Default tags such as &#39;VirtualNetwork&#39;,
        /// &#39;AzureLoadBalancer&#39; and &#39;Internet&#39; can also be used. If this is an ingress
        /// rule, specifies where network traffic originates from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceAddressPrefix")]
        public string SourceAddressPrefix {get; set; }

        /// <summary>
        /// Gets or sets the destination address prefix. CIDR or destination IP range.
        /// Asterisk &#39;*&#39; can also be used to match all source IPs. Default tags such as
        /// &#39;VirtualNetwork&#39;, &#39;AzureLoadBalancer&#39; and &#39;Internet&#39; can also be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationAddressPrefix")]
        public string DestinationAddressPrefix {get; set; }

        /// <summary>
        /// Gets or sets the source port or range. Integer or range between 0 and
        /// 65535. Asterisk &#39;*&#39; can also be used to match all ports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourcePortRange")]
        public string SourcePortRange {get; set; }

        /// <summary>
        /// Gets or sets he destination port or range. Integer or range between 0 and
        /// 65535. Asterisk &#39;*&#39; can also be used to match all ports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationPortRange")]
        public string DestinationPortRange {get; set; }

        /// <summary>
        /// Gets or sets the network traffic is allowed or denied. Possible values include: &#39;allow&#39;, &#39;deny&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "access")]
        public string Access {get; set; }

        /// <summary>
        /// Gets or sets the priority of the rule. The value can be in the range 1000
        /// to 3000. Values outside this range are reserved for Service Fabric
        /// ManagerCluster Resource Provider. The priority number must be unique for
        /// each rule in the collection. The lower the priority number, the higher the
        /// priority of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "priority")]
        public int Priority {get; set; }

        /// <summary>
        /// Gets or sets network security rule direction. Possible values include: &#39;inbound&#39;, &#39;outbound&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "direction")]
        public string Direction {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (this.Protocol == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Protocol");
            }
            if (this.Access == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Access");
            }
            if (this.Direction == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Direction");
            }












            if (this.Priority > 3000)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "Priority", 3000);
            }
            if (this.Priority < 1000)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Priority", 1000);
            }

        }
    }
}