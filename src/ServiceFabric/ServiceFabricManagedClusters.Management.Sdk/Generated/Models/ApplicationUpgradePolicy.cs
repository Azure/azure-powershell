// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the policy for a monitored application upgrade.
    /// </summary>
    public partial class ApplicationUpgradePolicy
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationUpgradePolicy class.
        /// </summary>
        public ApplicationUpgradePolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationUpgradePolicy class.
        /// </summary>

        /// <param name="applicationHealthPolicy">Defines a health policy used to evaluate the health of an application or
        /// one of its children entities.
        /// </param>

        /// <param name="forceRestart">If true, then processes are forcefully restarted during upgrade even when
        /// the code version has not changed (the upgrade only changes configuration or
        /// data).
        /// </param>

        /// <param name="rollingUpgradeMonitoringPolicy">The policy used for monitoring the application upgrade
        /// </param>

        /// <param name="instanceCloseDelayDuration">Duration in seconds, to wait before a stateless instance is closed, to
        /// allow the active requests to drain gracefully. This would be effective when
        /// the instance is closing during the application/cluster upgrade, only for
        /// those instances which have a non-zero delay duration configured in the
        /// service description.
        /// </param>

        /// <param name="upgradeMode">The mode used to monitor health during a rolling upgrade. The values are
        /// Monitored, and UnmonitoredAuto.
        /// Possible values include: 'Monitored', 'UnmonitoredAuto'</param>

        /// <param name="upgradeReplicaSetCheckTimeout">The maximum amount of time to block processing of an upgrade domain and
        /// prevent loss of availability when there are unexpected issues. When this
        /// timeout expires, processing of the upgrade domain will proceed regardless
        /// of availability loss issues. The timeout is reset at the start of each
        /// upgrade domain. Valid values are between 0 and 42949672925 inclusive.
        /// (unsigned 32-bit integer).
        /// </param>

        /// <param name="recreateApplication">Determines whether the application should be recreated on update. If
        /// value=true, the rest of the upgrade policy parameters are not allowed.
        /// </param>
        public ApplicationUpgradePolicy(ApplicationHealthPolicy applicationHealthPolicy = default(ApplicationHealthPolicy), bool? forceRestart = default(bool?), RollingUpgradeMonitoringPolicy rollingUpgradeMonitoringPolicy = default(RollingUpgradeMonitoringPolicy), long? instanceCloseDelayDuration = default(long?), string upgradeMode = default(string), long? upgradeReplicaSetCheckTimeout = default(long?), bool? recreateApplication = default(bool?))

        {
            this.ApplicationHealthPolicy = applicationHealthPolicy;
            this.ForceRestart = forceRestart;
            this.RollingUpgradeMonitoringPolicy = rollingUpgradeMonitoringPolicy;
            this.InstanceCloseDelayDuration = instanceCloseDelayDuration;
            this.UpgradeMode = upgradeMode;
            this.UpgradeReplicaSetCheckTimeout = upgradeReplicaSetCheckTimeout;
            this.RecreateApplication = recreateApplication;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets defines a health policy used to evaluate the health of an
        /// application or one of its children entities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "applicationHealthPolicy")]
        public ApplicationHealthPolicy ApplicationHealthPolicy {get; set; }

        /// <summary>
        /// Gets or sets if true, then processes are forcefully restarted during
        /// upgrade even when the code version has not changed (the upgrade only
        /// changes configuration or data).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "forceRestart")]
        public bool? ForceRestart {get; set; }

        /// <summary>
        /// Gets or sets the policy used for monitoring the application upgrade
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rollingUpgradeMonitoringPolicy")]
        public RollingUpgradeMonitoringPolicy RollingUpgradeMonitoringPolicy {get; set; }

        /// <summary>
        /// Gets or sets duration in seconds, to wait before a stateless instance is
        /// closed, to allow the active requests to drain gracefully. This would be
        /// effective when the instance is closing during the application/cluster
        /// upgrade, only for those instances which have a non-zero delay duration
        /// configured in the service description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "instanceCloseDelayDuration")]
        public long? InstanceCloseDelayDuration {get; set; }

        /// <summary>
        /// Gets or sets the mode used to monitor health during a rolling upgrade. The
        /// values are Monitored, and UnmonitoredAuto. Possible values include: &#39;Monitored&#39;, &#39;UnmonitoredAuto&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upgradeMode")]
        public string UpgradeMode {get; set; }

        /// <summary>
        /// Gets or sets the maximum amount of time to block processing of an upgrade
        /// domain and prevent loss of availability when there are unexpected issues.
        /// When this timeout expires, processing of the upgrade domain will proceed
        /// regardless of availability loss issues. The timeout is reset at the start
        /// of each upgrade domain. Valid values are between 0 and 42949672925
        /// inclusive. (unsigned 32-bit integer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upgradeReplicaSetCheckTimeout")]
        public long? UpgradeReplicaSetCheckTimeout {get; set; }

        /// <summary>
        /// Gets or sets determines whether the application should be recreated on
        /// update. If value=true, the rest of the upgrade policy parameters are not
        /// allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recreateApplication")]
        public bool? RecreateApplication {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ApplicationHealthPolicy != null)
            {
                this.ApplicationHealthPolicy.Validate();
            }
            if (this.RollingUpgradeMonitoringPolicy != null)
            {
                this.RollingUpgradeMonitoringPolicy.Validate();
            }

        }
    }
}