// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using System.Linq;

    /// <summary>
    /// Specifies an IP configuration of the network interface.
    /// </summary>
    public partial class IpConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the IpConfiguration class.
        /// </summary>
        public IpConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IpConfiguration class.
        /// </summary>

        /// <param name="name">Name of the network interface.
        /// </param>

        /// <param name="applicationGatewayBackendAddressPools">Specifies an array of references to backend address pools of application
        /// gateways. A node type can reference backend address pools of multiple
        /// application gateways. Multiple node types cannot use the same application
        /// gateway.
        /// </param>

        /// <param name="loadBalancerBackendAddressPools">Specifies an array of references to backend address pools of load
        /// balancers. A node type can reference backend address pools of one public
        /// and one internal load balancer. Multiple node types cannot use the same
        /// basic sku load balancer.
        /// </param>

        /// <param name="loadBalancerInboundNatPools">Specifies an array of references to inbound Nat pools of the load
        /// balancers. A node type can reference inbound nat pools of one public and
        /// one internal load balancer. Multiple node types cannot use the same basic
        /// sku load balancer.
        /// </param>

        /// <param name="subnet">Specifies the subnet of the network interface.
        /// </param>

        /// <param name="privateIPAddressVersion">Specifies whether the IP configuration&#39;s private IP is IPv4 or IPv6.
        /// Default is IPv4.
        /// Possible values include: &#39;IPv4&#39;, &#39;IPv6&#39;</param>

        /// <param name="publicIPAddressConfiguration">The public IP address configuration of the network interface.
        /// </param>
        public IpConfiguration(string name, System.Collections.Generic.IList<SubResource> applicationGatewayBackendAddressPools = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> loadBalancerBackendAddressPools = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> loadBalancerInboundNatPools = default(System.Collections.Generic.IList<SubResource>), SubResource subnet = default(SubResource), string privateIPAddressVersion = default(string), IpConfigurationPublicIPAddressConfiguration publicIPAddressConfiguration = default(IpConfigurationPublicIPAddressConfiguration))

        {
            this.Name = name;
            this.ApplicationGatewayBackendAddressPools = applicationGatewayBackendAddressPools;
            this.LoadBalancerBackendAddressPools = loadBalancerBackendAddressPools;
            this.LoadBalancerInboundNatPools = loadBalancerInboundNatPools;
            this.Subnet = subnet;
            this.PrivateIPAddressVersion = privateIPAddressVersion;
            this.PublicIPAddressConfiguration = publicIPAddressConfiguration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of the network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets specifies an array of references to backend address pools of
        /// application gateways. A node type can reference backend address pools of
        /// multiple application gateways. Multiple node types cannot use the same
        /// application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "applicationGatewayBackendAddressPools")]
        public System.Collections.Generic.IList<SubResource> ApplicationGatewayBackendAddressPools {get; set; }

        /// <summary>
        /// Gets or sets specifies an array of references to backend address pools of
        /// load balancers. A node type can reference backend address pools of one
        /// public and one internal load balancer. Multiple node types cannot use the
        /// same basic sku load balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "loadBalancerBackendAddressPools")]
        public System.Collections.Generic.IList<SubResource> LoadBalancerBackendAddressPools {get; set; }

        /// <summary>
        /// Gets or sets specifies an array of references to inbound Nat pools of the
        /// load balancers. A node type can reference inbound nat pools of one public
        /// and one internal load balancer. Multiple node types cannot use the same
        /// basic sku load balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "loadBalancerInboundNatPools")]
        public System.Collections.Generic.IList<SubResource> LoadBalancerInboundNatPools {get; set; }

        /// <summary>
        /// Gets or sets specifies the subnet of the network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subnet")]
        public SubResource Subnet {get; set; }

        /// <summary>
        /// Gets or sets specifies whether the IP configuration&#39;s private IP is IPv4 or
        /// IPv6. Default is IPv4. Possible values include: &#39;IPv4&#39;, &#39;IPv6&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateIPAddressVersion")]
        public string PrivateIPAddressVersion {get; set; }

        /// <summary>
        /// Gets or sets the public IP address configuration of the network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publicIPAddressConfiguration")]
        public IpConfigurationPublicIPAddressConfiguration PublicIPAddressConfiguration {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }






            if (this.PublicIPAddressConfiguration != null)
            {
                this.PublicIPAddressConfiguration.Validate();
            }
        }
    }
}