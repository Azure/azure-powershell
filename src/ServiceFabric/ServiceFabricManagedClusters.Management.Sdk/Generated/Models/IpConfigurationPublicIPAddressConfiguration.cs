// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using System.Linq;

    /// <summary>
    /// The public IP address configuration of the network interface.
    /// </summary>
    public partial class IpConfigurationPublicIPAddressConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the IpConfigurationPublicIPAddressConfiguration class.
        /// </summary>
        public IpConfigurationPublicIPAddressConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IpConfigurationPublicIPAddressConfiguration class.
        /// </summary>

        /// <param name="name">Name of the network interface.
        /// </param>

        /// <param name="ipTags">Specifies the list of IP tags associated with the public IP address.
        /// </param>

        /// <param name="publicIPAddressVersion">Specifies whether the IP configuration&#39;s public IP is IPv4 or IPv6. Default
        /// is IPv4.
        /// Possible values include: &#39;IPv4&#39;, &#39;IPv6&#39;</param>
        public IpConfigurationPublicIPAddressConfiguration(string name, System.Collections.Generic.IList<IpTag> ipTags = default(System.Collections.Generic.IList<IpTag>), string publicIPAddressVersion = default(string))

        {
            this.Name = name;
            this.IPTags = ipTags;
            this.PublicIPAddressVersion = publicIPAddressVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of the network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets specifies the list of IP tags associated with the public IP
        /// address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipTags")]
        public System.Collections.Generic.IList<IpTag> IPTags {get; set; }

        /// <summary>
        /// Gets or sets specifies whether the IP configuration&#39;s public IP is IPv4 or
        /// IPv6. Default is IPv4. Possible values include: &#39;IPv4&#39;, &#39;IPv6&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publicIPAddressVersion")]
        public string PublicIPAddressVersion {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }

            if (this.IPTags != null)
            {
                foreach (var element in this.IPTags)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

        }
    }
}