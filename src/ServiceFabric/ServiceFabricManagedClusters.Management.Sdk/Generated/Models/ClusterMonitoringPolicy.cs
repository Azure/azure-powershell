// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the monitoring policies for the cluster upgrade.
    /// </summary>
    public partial class ClusterMonitoringPolicy
    {
        /// <summary>
        /// Initializes a new instance of the ClusterMonitoringPolicy class.
        /// </summary>
        public ClusterMonitoringPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterMonitoringPolicy class.
        /// </summary>

        /// <param name="healthCheckWaitDuration">The length of time to wait after completing an upgrade domain before
        /// performing health checks. The duration can be in either hh:mm:ss or in
        /// d.hh:mm:ss.ms format.
        /// </param>

        /// <param name="healthCheckStableDuration">The amount of time that the application or cluster must remain healthy
        /// before the upgrade proceeds to the next upgrade domain. The duration can be
        /// in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// </param>

        /// <param name="healthCheckRetryTimeout">The amount of time to retry health evaluation when the application or
        /// cluster is unhealthy before the upgrade rolls back. The timeout can be in
        /// either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// </param>

        /// <param name="upgradeTimeout">The amount of time the overall upgrade has to complete before the upgrade
        /// rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms
        /// format.
        /// </param>

        /// <param name="upgradeDomainTimeout">The amount of time each upgrade domain has to complete before the upgrade
        /// rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms
        /// format.
        /// </param>
        public ClusterMonitoringPolicy(string healthCheckWaitDuration, string healthCheckStableDuration, string healthCheckRetryTimeout, string upgradeTimeout, string upgradeDomainTimeout)

        {
            this.HealthCheckWaitDuration = healthCheckWaitDuration;
            this.HealthCheckStableDuration = healthCheckStableDuration;
            this.HealthCheckRetryTimeout = healthCheckRetryTimeout;
            this.UpgradeTimeout = upgradeTimeout;
            this.UpgradeDomainTimeout = upgradeDomainTimeout;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the length of time to wait after completing an upgrade domain
        /// before performing health checks. The duration can be in either hh:mm:ss or
        /// in d.hh:mm:ss.ms format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "healthCheckWaitDuration")]
        public string HealthCheckWaitDuration {get; set; }

        /// <summary>
        /// Gets or sets the amount of time that the application or cluster must remain
        /// healthy before the upgrade proceeds to the next upgrade domain. The
        /// duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "healthCheckStableDuration")]
        public string HealthCheckStableDuration {get; set; }

        /// <summary>
        /// Gets or sets the amount of time to retry health evaluation when the
        /// application or cluster is unhealthy before the upgrade rolls back. The
        /// timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "healthCheckRetryTimeout")]
        public string HealthCheckRetryTimeout {get; set; }

        /// <summary>
        /// Gets or sets the amount of time the overall upgrade has to complete before
        /// the upgrade rolls back. The timeout can be in either hh:mm:ss or in
        /// d.hh:mm:ss.ms format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upgradeTimeout")]
        public string UpgradeTimeout {get; set; }

        /// <summary>
        /// Gets or sets the amount of time each upgrade domain has to complete before
        /// the upgrade rolls back. The timeout can be in either hh:mm:ss or in
        /// d.hh:mm:ss.ms format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upgradeDomainTimeout")]
        public string UpgradeDomainTimeout {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.HealthCheckWaitDuration == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "HealthCheckWaitDuration");
            }
            if (this.HealthCheckStableDuration == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "HealthCheckStableDuration");
            }
            if (this.HealthCheckRetryTimeout == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "HealthCheckRetryTimeout");
            }
            if (this.UpgradeTimeout == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "UpgradeTimeout");
            }
            if (this.UpgradeDomainTimeout == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "UpgradeDomainTimeout");
            }





        }
    }
}