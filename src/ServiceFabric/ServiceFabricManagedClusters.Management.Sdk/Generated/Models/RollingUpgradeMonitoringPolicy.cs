// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using System.Linq;

    /// <summary>
    /// The policy used for monitoring the application upgrade
    /// </summary>
    public partial class RollingUpgradeMonitoringPolicy
    {
        /// <summary>
        /// Initializes a new instance of the RollingUpgradeMonitoringPolicy class.
        /// </summary>
        public RollingUpgradeMonitoringPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RollingUpgradeMonitoringPolicy class.
        /// </summary>

        /// <param name="failureAction">The compensating action to perform when a Monitored upgrade encounters
        /// monitoring policy or health policy violations. Invalid indicates the
        /// failure action is invalid. Rollback specifies that the upgrade will start
        /// rolling back automatically. Manual indicates that the upgrade will switch
        /// to UnmonitoredManual upgrade mode.
        /// Possible values include: 'Rollback', 'Manual'</param>

        /// <param name="healthCheckWaitDuration">The amount of time to wait after completing an upgrade domain before
        /// applying health policies. It is interpreted as a string representing an ISO
        /// 8601 duration with following format &#34;hh:mm:ss.fff&#34;.
        /// </param>

        /// <param name="healthCheckStableDuration">The amount of time that the application or cluster must remain healthy
        /// before the upgrade proceeds to the next upgrade domain. It is interpreted
        /// as a string representing an ISO 8601 duration with following format
        /// &#34;hh:mm:ss.fff&#34;.
        /// </param>

        /// <param name="healthCheckRetryTimeout">The amount of time to retry health evaluation when the application or
        /// cluster is unhealthy before FailureAction is executed. It is interpreted as
        /// a string representing an ISO 8601 duration with following format
        /// &#34;hh:mm:ss.fff&#34;.
        /// </param>

        /// <param name="upgradeTimeout">The amount of time the overall upgrade has to complete before FailureAction
        /// is executed. Cannot be larger than 12 hours. It is interpreted as a string
        /// representing an ISO 8601 duration with following format &#34;hh:mm:ss.fff&#34;.
        /// </param>

        /// <param name="upgradeDomainTimeout">The amount of time each upgrade domain has to complete before FailureAction
        /// is executed. Cannot be larger than 12 hours. It is interpreted as a string
        /// representing an ISO 8601 duration with following format &#34;hh:mm:ss.fff&#34;.
        /// </param>
        public RollingUpgradeMonitoringPolicy(string failureAction, string healthCheckWaitDuration, string healthCheckStableDuration, string healthCheckRetryTimeout, string upgradeTimeout, string upgradeDomainTimeout)

        {
            this.FailureAction = failureAction;
            this.HealthCheckWaitDuration = healthCheckWaitDuration;
            this.HealthCheckStableDuration = healthCheckStableDuration;
            this.HealthCheckRetryTimeout = healthCheckRetryTimeout;
            this.UpgradeTimeout = upgradeTimeout;
            this.UpgradeDomainTimeout = upgradeDomainTimeout;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the compensating action to perform when a Monitored upgrade
        /// encounters monitoring policy or health policy violations. Invalid indicates
        /// the failure action is invalid. Rollback specifies that the upgrade will
        /// start rolling back automatically. Manual indicates that the upgrade will
        /// switch to UnmonitoredManual upgrade mode. Possible values include: &#39;Rollback&#39;, &#39;Manual&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failureAction")]
        public string FailureAction {get; set; }

        /// <summary>
        /// Gets or sets the amount of time to wait after completing an upgrade domain
        /// before applying health policies. It is interpreted as a string representing
        /// an ISO 8601 duration with following format &#34;hh:mm:ss.fff&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "healthCheckWaitDuration")]
        public string HealthCheckWaitDuration {get; set; }

        /// <summary>
        /// Gets or sets the amount of time that the application or cluster must remain
        /// healthy before the upgrade proceeds to the next upgrade domain. It is
        /// interpreted as a string representing an ISO 8601 duration with following
        /// format &#34;hh:mm:ss.fff&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "healthCheckStableDuration")]
        public string HealthCheckStableDuration {get; set; }

        /// <summary>
        /// Gets or sets the amount of time to retry health evaluation when the
        /// application or cluster is unhealthy before FailureAction is executed. It is
        /// interpreted as a string representing an ISO 8601 duration with following
        /// format &#34;hh:mm:ss.fff&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "healthCheckRetryTimeout")]
        public string HealthCheckRetryTimeout {get; set; }

        /// <summary>
        /// Gets or sets the amount of time the overall upgrade has to complete before
        /// FailureAction is executed. Cannot be larger than 12 hours. It is
        /// interpreted as a string representing an ISO 8601 duration with following
        /// format &#34;hh:mm:ss.fff&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upgradeTimeout")]
        public string UpgradeTimeout {get; set; }

        /// <summary>
        /// Gets or sets the amount of time each upgrade domain has to complete before
        /// FailureAction is executed. Cannot be larger than 12 hours. It is
        /// interpreted as a string representing an ISO 8601 duration with following
        /// format &#34;hh:mm:ss.fff&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upgradeDomainTimeout")]
        public string UpgradeDomainTimeout {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.FailureAction == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "FailureAction");
            }
            if (this.HealthCheckWaitDuration == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "HealthCheckWaitDuration");
            }
            if (this.HealthCheckStableDuration == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "HealthCheckStableDuration");
            }
            if (this.HealthCheckRetryTimeout == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "HealthCheckRetryTimeout");
            }
            if (this.UpgradeTimeout == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "UpgradeTimeout");
            }
            if (this.UpgradeDomainTimeout == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "UpgradeDomainTimeout");
            }






        }
    }
}