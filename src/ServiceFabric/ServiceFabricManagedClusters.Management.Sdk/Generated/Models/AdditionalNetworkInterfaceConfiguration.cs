// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using System.Linq;

    /// <summary>
    /// Specifies the settings for a network interface to attach to the node type.
    /// </summary>
    public partial class AdditionalNetworkInterfaceConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the AdditionalNetworkInterfaceConfiguration class.
        /// </summary>
        public AdditionalNetworkInterfaceConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AdditionalNetworkInterfaceConfiguration class.
        /// </summary>

        /// <param name="name">Name of the network interface.
        /// </param>

        /// <param name="enableAcceleratedNetworking">Specifies whether the network interface is accelerated networking-enabled.
        /// </param>

        /// <param name="dscpConfiguration">Specifies the DSCP configuration to apply to the network interface.
        /// </param>

        /// <param name="ipConfigurations">Specifies the IP configurations of the network interface.
        /// </param>
        public AdditionalNetworkInterfaceConfiguration(string name, System.Collections.Generic.IList<IpConfiguration> ipConfigurations, bool? enableAcceleratedNetworking = default(bool?), SubResource dscpConfiguration = default(SubResource))

        {
            this.Name = name;
            this.EnableAcceleratedNetworking = enableAcceleratedNetworking;
            this.DscpConfiguration = dscpConfiguration;
            this.IPConfigurations = ipConfigurations;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of the network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets specifies whether the network interface is accelerated
        /// networking-enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableAcceleratedNetworking")]
        public bool? EnableAcceleratedNetworking {get; set; }

        /// <summary>
        /// Gets or sets specifies the DSCP configuration to apply to the network
        /// interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dscpConfiguration")]
        public SubResource DscpConfiguration {get; set; }

        /// <summary>
        /// Gets or sets specifies the IP configurations of the network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipConfigurations")]
        public System.Collections.Generic.IList<IpConfiguration> IPConfigurations {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (this.IPConfigurations == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "IPConfigurations");
            }


            if (this.IPConfigurations != null)
            {
                foreach (var element in this.IPConfigurations)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}