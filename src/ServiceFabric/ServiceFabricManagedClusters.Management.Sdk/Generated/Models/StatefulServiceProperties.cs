// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using System.Linq;

    /// <summary>
    /// The properties of a stateful service resource.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Stateful")]
    public partial class StatefulServiceProperties : ServiceResourceProperties
    {
        /// <summary>
        /// Initializes a new instance of the StatefulServiceProperties class.
        /// </summary>
        public StatefulServiceProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StatefulServiceProperties class.
        /// </summary>

        /// <param name="placementConstraints">The placement constraints as a string. Placement constraints are boolean
        /// expressions on node properties and allow for restricting a service to
        /// particular nodes based on the service requirements. For example, to place a
        /// service on nodes where NodeType is blue specify the following: &#34;NodeColor
        /// == blue)&#34;.
        /// </param>

        /// <param name="correlationScheme">A list that describes the correlation of the service with other services.
        /// </param>

        /// <param name="serviceLoadMetrics">The service load metrics is given as an array of ServiceLoadMetric objects.
        /// </param>

        /// <param name="servicePlacementPolicies">A list that describes the correlation of the service with other services.
        /// </param>

        /// <param name="defaultMoveCost">Specifies the move cost for the service.
        /// Possible values include: 'Zero', 'Low', 'Medium', 'High'</param>

        /// <param name="scalingPolicies">Scaling policies for this service.
        /// </param>

        /// <param name="provisioningState">The current deployment or provisioning state, which only appears in the
        /// response
        /// </param>

        /// <param name="serviceTypeName">The name of the service type
        /// </param>

        /// <param name="partitionDescription">Describes how the service is partitioned.
        /// </param>

        /// <param name="servicePackageActivationMode">The activation Mode of the service package
        /// Possible values include: 'SharedProcess', 'ExclusiveProcess'</param>

        /// <param name="serviceDnsName">Dns name used for the service. If this is specified, then the DNS name can
        /// be used to return the IP addresses of service endpoints for application
        /// layer protocols (e.g., HTTP).
        /// When updating serviceDnsName, old name may be temporarily resolvable.
        /// However, rely on new name.
        /// When removing serviceDnsName, removed name may temporarily be resolvable.
        /// Do not rely on the name being unresolvable.
        /// </param>

        /// <param name="hasPersistedState">A flag indicating whether this is a persistent service which stores states
        /// on the local disk. If it is then the value of this property is true, if not
        /// it is false.
        /// </param>

        /// <param name="targetReplicaSetSize">The target replica set size as a number.
        /// </param>

        /// <param name="minReplicaSetSize">The minimum replica set size as a number.
        /// </param>

        /// <param name="replicaRestartWaitDuration">The duration between when a replica goes down and when a new replica is
        /// created, represented in ISO 8601 format &#34;hh:mm:ss&#34;.
        /// </param>

        /// <param name="quorumLossWaitDuration">The maximum duration for which a partition is allowed to be in a state of
        /// quorum loss, represented in ISO 8601 format &#34;hh:mm:ss&#34;.
        /// </param>

        /// <param name="standByReplicaKeepDuration">The definition on how long StandBy replicas should be maintained before
        /// being removed, represented in ISO 8601 format &#34;hh:mm:ss&#34;.
        /// </param>

        /// <param name="servicePlacementTimeLimit">The duration for which replicas can stay InBuild before reporting that
        /// build is stuck, represented in ISO 8601 format &#34;hh:mm:ss&#34;.
        /// </param>
        public StatefulServiceProperties(string serviceTypeName, Partition partitionDescription, string placementConstraints = default(string), System.Collections.Generic.IList<ServiceCorrelation> correlationScheme = default(System.Collections.Generic.IList<ServiceCorrelation>), System.Collections.Generic.IList<ServiceLoadMetric> serviceLoadMetrics = default(System.Collections.Generic.IList<ServiceLoadMetric>), System.Collections.Generic.IList<ServicePlacementPolicy> servicePlacementPolicies = default(System.Collections.Generic.IList<ServicePlacementPolicy>), string defaultMoveCost = default(string), System.Collections.Generic.IList<ScalingPolicy> scalingPolicies = default(System.Collections.Generic.IList<ScalingPolicy>), string provisioningState = default(string), string servicePackageActivationMode = default(string), string serviceDnsName = default(string), bool? hasPersistedState = default(bool?), int? targetReplicaSetSize = default(int?), int? minReplicaSetSize = default(int?), string replicaRestartWaitDuration = default(string), string quorumLossWaitDuration = default(string), string standByReplicaKeepDuration = default(string), string servicePlacementTimeLimit = default(string))

        : base(serviceTypeName, partitionDescription, placementConstraints, correlationScheme, serviceLoadMetrics, servicePlacementPolicies, defaultMoveCost, scalingPolicies, provisioningState, servicePackageActivationMode, serviceDnsName)
        {
            this.HasPersistedState = hasPersistedState;
            this.TargetReplicaSetSize = targetReplicaSetSize;
            this.MinReplicaSetSize = minReplicaSetSize;
            this.ReplicaRestartWaitDuration = replicaRestartWaitDuration;
            this.QuorumLossWaitDuration = quorumLossWaitDuration;
            this.StandByReplicaKeepDuration = standByReplicaKeepDuration;
            this.ServicePlacementTimeLimit = servicePlacementTimeLimit;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a flag indicating whether this is a persistent service which
        /// stores states on the local disk. If it is then the value of this property
        /// is true, if not it is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hasPersistedState")]
        public bool? HasPersistedState {get; set; }

        /// <summary>
        /// Gets or sets the target replica set size as a number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetReplicaSetSize")]
        public int? TargetReplicaSetSize {get; set; }

        /// <summary>
        /// Gets or sets the minimum replica set size as a number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minReplicaSetSize")]
        public int? MinReplicaSetSize {get; set; }

        /// <summary>
        /// Gets or sets the duration between when a replica goes down and when a new
        /// replica is created, represented in ISO 8601 format &#34;hh:mm:ss&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "replicaRestartWaitDuration")]
        public string ReplicaRestartWaitDuration {get; set; }

        /// <summary>
        /// Gets or sets the maximum duration for which a partition is allowed to be in
        /// a state of quorum loss, represented in ISO 8601 format &#34;hh:mm:ss&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "quorumLossWaitDuration")]
        public string QuorumLossWaitDuration {get; set; }

        /// <summary>
        /// Gets or sets the definition on how long StandBy replicas should be
        /// maintained before being removed, represented in ISO 8601 format &#34;hh:mm:ss&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "standByReplicaKeepDuration")]
        public string StandByReplicaKeepDuration {get; set; }

        /// <summary>
        /// Gets or sets the duration for which replicas can stay InBuild before
        /// reporting that build is stuck, represented in ISO 8601 format &#34;hh:mm:ss&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePlacementTimeLimit")]
        public string ServicePlacementTimeLimit {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.TargetReplicaSetSize != null)
            {
                if (this.TargetReplicaSetSize < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "TargetReplicaSetSize", 1);
                }
            }
            if (this.MinReplicaSetSize != null)
            {
                if (this.MinReplicaSetSize < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MinReplicaSetSize", 1);
                }
            }




        }
    }
}