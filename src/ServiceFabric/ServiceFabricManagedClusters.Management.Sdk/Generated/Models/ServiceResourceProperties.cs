// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using System.Linq;

    /// <summary>
    /// The service resource properties.
    /// </summary>
    [Newtonsoft.Json.JsonObject("ServiceResourceProperties")]
    public partial class ServiceResourceProperties : ServiceResourcePropertiesBase
    {
        /// <summary>
        /// Initializes a new instance of the ServiceResourceProperties class.
        /// </summary>
        public ServiceResourceProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceResourceProperties class.
        /// </summary>

        /// <param name="placementConstraints">The placement constraints as a string. Placement constraints are boolean
        /// expressions on node properties and allow for restricting a service to
        /// particular nodes based on the service requirements. For example, to place a
        /// service on nodes where NodeType is blue specify the following: &#34;NodeColor
        /// == blue)&#34;.
        /// </param>

        /// <param name="correlationScheme">A list that describes the correlation of the service with other services.
        /// </param>

        /// <param name="serviceLoadMetrics">The service load metrics is given as an array of ServiceLoadMetric objects.
        /// </param>

        /// <param name="servicePlacementPolicies">A list that describes the correlation of the service with other services.
        /// </param>

        /// <param name="defaultMoveCost">Specifies the move cost for the service.
        /// Possible values include: 'Zero', 'Low', 'Medium', 'High'</param>

        /// <param name="scalingPolicies">Scaling policies for this service.
        /// </param>

        /// <param name="provisioningState">The current deployment or provisioning state, which only appears in the
        /// response
        /// </param>

        /// <param name="serviceTypeName">The name of the service type
        /// </param>

        /// <param name="partitionDescription">Describes how the service is partitioned.
        /// </param>

        /// <param name="servicePackageActivationMode">The activation Mode of the service package
        /// Possible values include: 'SharedProcess', 'ExclusiveProcess'</param>

        /// <param name="serviceDnsName">Dns name used for the service. If this is specified, then the DNS name can
        /// be used to return the IP addresses of service endpoints for application
        /// layer protocols (e.g., HTTP).
        /// When updating serviceDnsName, old name may be temporarily resolvable.
        /// However, rely on new name.
        /// When removing serviceDnsName, removed name may temporarily be resolvable.
        /// Do not rely on the name being unresolvable.
        /// </param>
        public ServiceResourceProperties(string serviceTypeName, Partition partitionDescription, string placementConstraints = default(string), System.Collections.Generic.IList<ServiceCorrelation> correlationScheme = default(System.Collections.Generic.IList<ServiceCorrelation>), System.Collections.Generic.IList<ServiceLoadMetric> serviceLoadMetrics = default(System.Collections.Generic.IList<ServiceLoadMetric>), System.Collections.Generic.IList<ServicePlacementPolicy> servicePlacementPolicies = default(System.Collections.Generic.IList<ServicePlacementPolicy>), string defaultMoveCost = default(string), System.Collections.Generic.IList<ScalingPolicy> scalingPolicies = default(System.Collections.Generic.IList<ScalingPolicy>), string provisioningState = default(string), string servicePackageActivationMode = default(string), string serviceDnsName = default(string))

        : base(placementConstraints, correlationScheme, serviceLoadMetrics, servicePlacementPolicies, defaultMoveCost, scalingPolicies)
        {
            this.ProvisioningState = provisioningState;
            this.ServiceTypeName = serviceTypeName;
            this.PartitionDescription = partitionDescription;
            this.ServicePackageActivationMode = servicePackageActivationMode;
            this.ServiceDnsName = serviceDnsName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the current deployment or provisioning state, which only appears in
        /// the response
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the name of the service type
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceTypeName")]
        public string ServiceTypeName {get; set; }

        /// <summary>
        /// Gets or sets describes how the service is partitioned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "partitionDescription")]
        public Partition PartitionDescription {get; set; }

        /// <summary>
        /// Gets or sets the activation Mode of the service package Possible values include: &#39;SharedProcess&#39;, &#39;ExclusiveProcess&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePackageActivationMode")]
        public string ServicePackageActivationMode {get; set; }

        /// <summary>
        /// Gets or sets dns name used for the service. If this is specified, then the
        /// DNS name can be used to return the IP addresses of service endpoints for
        /// application layer protocols (e.g., HTTP).
        /// When updating serviceDnsName, old name may be temporarily resolvable.
        /// However, rely on new name.
        /// When removing serviceDnsName, removed name may temporarily be resolvable.
        /// Do not rely on the name being unresolvable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceDnsName")]
        public string ServiceDnsName {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ServiceTypeName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ServiceTypeName");
            }
            if (this.PartitionDescription == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "PartitionDescription");
            }





        }
    }
}