// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using System.Linq;

    /// <summary>
    /// Describes a Subnet.
    /// </summary>
    public partial class Subnet
    {
        /// <summary>
        /// Initializes a new instance of the Subnet class.
        /// </summary>
        public Subnet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Subnet class.
        /// </summary>

        /// <param name="name">Subnet name.
        /// </param>

        /// <param name="enableIpv6">Indicates wether to enable Ipv6 or not. If not provided, it will take the
        /// same configuration as the cluster.
        /// </param>

        /// <param name="privateEndpointNetworkPolicies">Enable or Disable apply network policies on private end point in the
        /// subnet.
        /// Possible values include: 'enabled', 'disabled'</param>

        /// <param name="privateLinkServiceNetworkPolicies">Enable or Disable apply network policies on private link service in the
        /// subnet.
        /// Possible values include: 'enabled', 'disabled'</param>

        /// <param name="networkSecurityGroupId">Full resource id for the network security group.
        /// </param>
        public Subnet(string name, bool? enableIpv6 = default(bool?), string privateEndpointNetworkPolicies = default(string), string privateLinkServiceNetworkPolicies = default(string), string networkSecurityGroupId = default(string))

        {
            this.Name = name;
            this.EnableIpv6 = enableIpv6;
            this.PrivateEndpointNetworkPolicies = privateEndpointNetworkPolicies;
            this.PrivateLinkServiceNetworkPolicies = privateLinkServiceNetworkPolicies;
            this.NetworkSecurityGroupId = networkSecurityGroupId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets subnet name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets indicates wether to enable Ipv6 or not. If not provided, it
        /// will take the same configuration as the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableIpv6")]
        public bool? EnableIpv6 {get; set; }

        /// <summary>
        /// Gets or sets enable or Disable apply network policies on private end point
        /// in the subnet. Possible values include: &#39;enabled&#39;, &#39;disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateEndpointNetworkPolicies")]
        public string PrivateEndpointNetworkPolicies {get; set; }

        /// <summary>
        /// Gets or sets enable or Disable apply network policies on private link
        /// service in the subnet. Possible values include: &#39;enabled&#39;, &#39;disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateLinkServiceNetworkPolicies")]
        public string PrivateLinkServiceNetworkPolicies {get; set; }

        /// <summary>
        /// Gets or sets full resource id for the network security group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkSecurityGroupId")]
        public string NetworkSecurityGroupId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }




        }
    }
}