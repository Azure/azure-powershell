// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using System.Linq;

    /// <summary>
    /// Specifies the gallery application that should be made available to the
    /// underlying VMSS.
    /// </summary>
    public partial class VmApplication
    {
        /// <summary>
        /// Initializes a new instance of the VmApplication class.
        /// </summary>
        public VmApplication()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VmApplication class.
        /// </summary>

        /// <param name="configurationReference">Optional, Specifies the uri to an azure blob that will replace the default
        /// configuration for the package if provided.
        /// </param>

        /// <param name="enableAutomaticUpgrade">If set to true, when a new Gallery Application version is available in
        /// PIR/SIG, it will be automatically updated for the underlying VMSS.
        /// </param>

        /// <param name="order">Optional, Specifies the order in which the packages have to be installed.
        /// </param>

        /// <param name="packageReferenceId">Specifies the GalleryApplicationVersion resource id on the form of
        /// /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version}.
        /// </param>

        /// <param name="vmGalleryTags">Optional, Specifies a passthrough value for more generic context. Accepts a
        /// JSON-formatted string e.g. &#39;{&#34;Tag1&#34;:&#34;Value1&#34;,&#34;Tag2&#34;:&#34;Value2&#34;}&#39;.
        /// </param>

        /// <param name="treatFailureAsDeploymentFailure">Optional, If true, any failure for any operation in the VmApplication will
        /// fail the deployment.
        /// </param>
        public VmApplication(string packageReferenceId, string configurationReference = default(string), bool? enableAutomaticUpgrade = default(bool?), int? order = default(int?), string vmGalleryTags = default(string), bool? treatFailureAsDeploymentFailure = default(bool?))

        {
            this.ConfigurationReference = configurationReference;
            this.EnableAutomaticUpgrade = enableAutomaticUpgrade;
            this.Order = order;
            this.PackageReferenceId = packageReferenceId;
            this.VMGalleryTags = vmGalleryTags;
            this.TreatFailureAsDeploymentFailure = treatFailureAsDeploymentFailure;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets optional, Specifies the uri to an azure blob that will replace
        /// the default configuration for the package if provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "configurationReference")]
        public string ConfigurationReference {get; set; }

        /// <summary>
        /// Gets or sets if set to true, when a new Gallery Application version is
        /// available in PIR/SIG, it will be automatically updated for the underlying
        /// VMSS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableAutomaticUpgrade")]
        public bool? EnableAutomaticUpgrade {get; set; }

        /// <summary>
        /// Gets or sets optional, Specifies the order in which the packages have to be
        /// installed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "order")]
        public int? Order {get; set; }

        /// <summary>
        /// Gets or sets specifies the GalleryApplicationVersion resource id on the
        /// form of
        /// /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version}.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "packageReferenceId")]
        public string PackageReferenceId {get; set; }

        /// <summary>
        /// Gets or sets optional, Specifies a passthrough value for more generic
        /// context. Accepts a JSON-formatted string e.g.
        /// &#39;{&#34;Tag1&#34;:&#34;Value1&#34;,&#34;Tag2&#34;:&#34;Value2&#34;}&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmGalleryTags")]
        public string VMGalleryTags {get; set; }

        /// <summary>
        /// Gets or sets optional, If true, any failure for any operation in the
        /// VmApplication will fail the deployment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "treatFailureAsDeploymentFailure")]
        public bool? TreatFailureAsDeploymentFailure {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.PackageReferenceId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "PackageReferenceId");
            }



        }
    }
}