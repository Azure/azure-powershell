// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using System.Linq;

    /// <summary>
    /// The common service resource properties.
    /// </summary>
    public partial class ServiceResourcePropertiesBase
    {
        /// <summary>
        /// Initializes a new instance of the ServiceResourcePropertiesBase class.
        /// </summary>
        public ServiceResourcePropertiesBase()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceResourcePropertiesBase class.
        /// </summary>

        /// <param name="placementConstraints">The placement constraints as a string. Placement constraints are boolean
        /// expressions on node properties and allow for restricting a service to
        /// particular nodes based on the service requirements. For example, to place a
        /// service on nodes where NodeType is blue specify the following: &#34;NodeColor
        /// == blue)&#34;.
        /// </param>

        /// <param name="correlationScheme">A list that describes the correlation of the service with other services.
        /// </param>

        /// <param name="serviceLoadMetrics">The service load metrics is given as an array of ServiceLoadMetric objects.
        /// </param>

        /// <param name="servicePlacementPolicies">A list that describes the correlation of the service with other services.
        /// </param>

        /// <param name="defaultMoveCost">Specifies the move cost for the service.
        /// Possible values include: 'Zero', 'Low', 'Medium', 'High'</param>

        /// <param name="scalingPolicies">Scaling policies for this service.
        /// </param>
        public ServiceResourcePropertiesBase(string placementConstraints = default(string), System.Collections.Generic.IList<ServiceCorrelation> correlationScheme = default(System.Collections.Generic.IList<ServiceCorrelation>), System.Collections.Generic.IList<ServiceLoadMetric> serviceLoadMetrics = default(System.Collections.Generic.IList<ServiceLoadMetric>), System.Collections.Generic.IList<ServicePlacementPolicy> servicePlacementPolicies = default(System.Collections.Generic.IList<ServicePlacementPolicy>), string defaultMoveCost = default(string), System.Collections.Generic.IList<ScalingPolicy> scalingPolicies = default(System.Collections.Generic.IList<ScalingPolicy>))

        {
            this.PlacementConstraints = placementConstraints;
            this.CorrelationScheme = correlationScheme;
            this.ServiceLoadMetrics = serviceLoadMetrics;
            this.ServicePlacementPolicies = servicePlacementPolicies;
            this.DefaultMoveCost = defaultMoveCost;
            this.ScalingPolicies = scalingPolicies;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the placement constraints as a string. Placement constraints
        /// are boolean expressions on node properties and allow for restricting a
        /// service to particular nodes based on the service requirements. For example,
        /// to place a service on nodes where NodeType is blue specify the following:
        /// &#34;NodeColor == blue)&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "placementConstraints")]
        public string PlacementConstraints {get; set; }

        /// <summary>
        /// Gets or sets a list that describes the correlation of the service with
        /// other services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "correlationScheme")]
        public System.Collections.Generic.IList<ServiceCorrelation> CorrelationScheme {get; set; }

        /// <summary>
        /// Gets or sets the service load metrics is given as an array of
        /// ServiceLoadMetric objects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceLoadMetrics")]
        public System.Collections.Generic.IList<ServiceLoadMetric> ServiceLoadMetrics {get; set; }

        /// <summary>
        /// Gets or sets a list that describes the correlation of the service with
        /// other services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePlacementPolicies")]
        public System.Collections.Generic.IList<ServicePlacementPolicy> ServicePlacementPolicies {get; set; }

        /// <summary>
        /// Gets or sets specifies the move cost for the service. Possible values include: &#39;Zero&#39;, &#39;Low&#39;, &#39;Medium&#39;, &#39;High&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultMoveCost")]
        public string DefaultMoveCost {get; set; }

        /// <summary>
        /// Gets or sets scaling policies for this service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "scalingPolicies")]
        public System.Collections.Generic.IList<ScalingPolicy> ScalingPolicies {get; set; }
    }
}