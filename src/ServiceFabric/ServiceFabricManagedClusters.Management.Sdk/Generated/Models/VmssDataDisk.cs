// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using System.Linq;

    /// <summary>
    /// Managed data disk description.
    /// </summary>
    public partial class VmssDataDisk
    {
        /// <summary>
        /// Initializes a new instance of the VmssDataDisk class.
        /// </summary>
        public VmssDataDisk()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VmssDataDisk class.
        /// </summary>

        /// <param name="lun">Specifies the logical unit number of the data disk. This value is used to
        /// identify data disks within the VM and therefore must be unique for each
        /// data disk attached to a VM. Lun 0 is reserved for the service fabric data
        /// disk.
        /// </param>

        /// <param name="diskSizeGb">Disk size for each vm in the node type in GBs.
        /// </param>

        /// <param name="diskType">Managed data disk type. Specifies the storage account type for the managed
        /// disk
        /// Possible values include: 'Standard_LRS', 'StandardSSD_LRS', 'Premium_LRS'</param>

        /// <param name="diskLetter">Managed data disk letter. It can not use the reserved letter C or D and it
        /// can not change after created.
        /// </param>
        public VmssDataDisk(int lun, int diskSizeGb, string diskType, string diskLetter)

        {
            this.Lun = lun;
            this.DiskSizeGb = diskSizeGb;
            this.DiskType = diskType;
            this.DiskLetter = diskLetter;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets specifies the logical unit number of the data disk. This value
        /// is used to identify data disks within the VM and therefore must be unique
        /// for each data disk attached to a VM. Lun 0 is reserved for the service
        /// fabric data disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lun")]
        public int Lun {get; set; }

        /// <summary>
        /// Gets or sets disk size for each vm in the node type in GBs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskSizeGB")]
        public int DiskSizeGb {get; set; }

        /// <summary>
        /// Gets or sets managed data disk type. Specifies the storage account type for
        /// the managed disk Possible values include: &#39;Standard_LRS&#39;, &#39;StandardSSD_LRS&#39;, &#39;Premium_LRS&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskType")]
        public string DiskType {get; set; }

        /// <summary>
        /// Gets or sets managed data disk letter. It can not use the reserved letter C
        /// or D and it can not change after created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskLetter")]
        public string DiskLetter {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DiskType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DiskType");
            }
            if (this.DiskLetter == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DiskLetter");
            }
            if (this.Lun < 1)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Lun", 1);
            }

            if (this.DiskLetter != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.DiskLetter, "^[a-zA-Z]{1}$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "DiskLetter", "^[a-zA-Z]{1}$");
                }
            }
        }
    }
}