// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using System.Linq;

    /// <summary>
    /// Specifies set of extensions that should be installed onto the virtual
    /// machines.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class VmssExtension
    {
        /// <summary>
        /// Initializes a new instance of the VmssExtension class.
        /// </summary>
        public VmssExtension()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VmssExtension class.
        /// </summary>

        /// <param name="name">The name of the extension.
        /// </param>

        /// <param name="publisher">The name of the extension handler publisher.
        /// </param>

        /// <param name="type">Specifies the type of the extension; an example is &#34;CustomScriptExtension&#34;.
        /// </param>

        /// <param name="typeHandlerVersion">Specifies the version of the script handler.
        /// </param>

        /// <param name="autoUpgradeMinorVersion">Indicates whether the extension should use a newer minor version if one is
        /// available at deployment time. Once deployed, however, the extension will
        /// not upgrade minor versions unless redeployed, even with this property set
        /// to true.
        /// </param>

        /// <param name="settings">Json formatted public settings for the extension.
        /// </param>

        /// <param name="protectedSettings">The extension can contain either protectedSettings or
        /// protectedSettingsFromKeyVault or no protected settings at all.
        /// </param>

        /// <param name="forceUpdateTag">If a value is provided and is different from the previous value, the
        /// extension handler will be forced to update even if the extension
        /// configuration has not changed.
        /// </param>

        /// <param name="provisionAfterExtensions">Collection of extension names after which this extension needs to be
        /// provisioned.
        /// </param>

        /// <param name="provisioningState">The provisioning state, which only appears in the response.
        /// </param>

        /// <param name="enableAutomaticUpgrade">Indicates whether the extension should be automatically upgraded by the
        /// platform if there is a newer version of the extension available.
        /// </param>
        public VmssExtension(string name, string publisher, string type, string typeHandlerVersion, bool? autoUpgradeMinorVersion = default(bool?), object settings = default(object), object protectedSettings = default(object), string forceUpdateTag = default(string), System.Collections.Generic.IList<string> provisionAfterExtensions = default(System.Collections.Generic.IList<string>), string provisioningState = default(string), bool? enableAutomaticUpgrade = default(bool?))

        {
            this.Name = name;
            this.Publisher = publisher;
            this.Type = type;
            this.TypeHandlerVersion = typeHandlerVersion;
            this.AutoUpgradeMinorVersion = autoUpgradeMinorVersion;
            this.Settings = settings;
            this.ProtectedSettings = protectedSettings;
            this.ForceUpdateTag = forceUpdateTag;
            this.ProvisionAfterExtensions = provisionAfterExtensions;
            this.ProvisioningState = provisioningState;
            this.EnableAutomaticUpgrade = enableAutomaticUpgrade;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the extension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets the name of the extension handler publisher.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publisher")]
        public string Publisher {get; set; }

        /// <summary>
        /// Gets or sets specifies the type of the extension; an example is
        /// &#34;CustomScriptExtension&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.type")]
        public string Type {get; set; }

        /// <summary>
        /// Gets or sets specifies the version of the script handler.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.typeHandlerVersion")]
        public string TypeHandlerVersion {get; set; }

        /// <summary>
        /// Gets or sets indicates whether the extension should use a newer minor
        /// version if one is available at deployment time. Once deployed, however, the
        /// extension will not upgrade minor versions unless redeployed, even with this
        /// property set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.autoUpgradeMinorVersion")]
        public bool? AutoUpgradeMinorVersion {get; set; }

        /// <summary>
        /// Gets or sets json formatted public settings for the extension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.settings")]
        public object Settings {get; set; }

        /// <summary>
        /// Gets or sets the extension can contain either protectedSettings or
        /// protectedSettingsFromKeyVault or no protected settings at all.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.protectedSettings")]
        public object ProtectedSettings {get; set; }

        /// <summary>
        /// Gets or sets if a value is provided and is different from the previous
        /// value, the extension handler will be forced to update even if the extension
        /// configuration has not changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.forceUpdateTag")]
        public string ForceUpdateTag {get; set; }

        /// <summary>
        /// Gets or sets collection of extension names after which this extension needs
        /// to be provisioned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisionAfterExtensions")]
        public System.Collections.Generic.IList<string> ProvisionAfterExtensions {get; set; }

        /// <summary>
        /// Gets the provisioning state, which only appears in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets indicates whether the extension should be automatically
        /// upgraded by the platform if there is a newer version of the extension
        /// available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enableAutomaticUpgrade")]
        public bool? EnableAutomaticUpgrade {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (this.Publisher == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Publisher");
            }
            if (this.Type == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Type");
            }
            if (this.TypeHandlerVersion == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TypeHandlerVersion");
            }









        }
    }
}