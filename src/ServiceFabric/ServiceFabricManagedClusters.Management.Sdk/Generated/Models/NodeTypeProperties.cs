// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using System.Linq;

    /// <summary>
    /// Describes a node type in the cluster, each node type represents sub set of
    /// nodes in the cluster.
    /// </summary>
    public partial class NodeTypeProperties
    {
        /// <summary>
        /// Initializes a new instance of the NodeTypeProperties class.
        /// </summary>
        public NodeTypeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NodeTypeProperties class.
        /// </summary>

        /// <param name="isPrimary">Indicates the Service Fabric system services for the cluster will run on
        /// this node type. This setting cannot be changed once the node type is
        /// created.
        /// </param>

        /// <param name="vmInstanceCount">The number of nodes in the node type. &lt;br /&gt;&lt;br /&gt;**Values:** &lt;br /&gt;-1 -
        /// Use when auto scale rules are configured or sku.capacity is defined &lt;br /&gt;
        /// 0 - Not supported &lt;br /&gt; &gt;0 - Use for manual scale.
        /// </param>

        /// <param name="dataDiskSizeGb">Disk size for the managed disk attached to the vms on the node type in GBs.
        /// </param>

        /// <param name="dataDiskType">Managed data disk type. Specifies the storage account type for the managed
        /// disk
        /// Possible values include: 'Standard_LRS', 'StandardSSD_LRS', 'Premium_LRS'</param>

        /// <param name="dataDiskLetter">Managed data disk letter. It can not use the reserved letter C or D and it
        /// can not change after created.
        /// </param>

        /// <param name="placementProperties">The placement tags applied to nodes in the node type, which can be used to
        /// indicate where certain services (workload) should run.
        /// </param>

        /// <param name="capacities">The capacity tags applied to the nodes in the node type, the cluster
        /// resource manager uses these tags to understand how much resource a node
        /// has.
        /// </param>

        /// <param name="applicationPorts">The range of ports from which cluster assigned port to Service Fabric
        /// applications.
        /// </param>

        /// <param name="ephemeralPorts">The range of ephemeral ports that nodes in this node type should be
        /// configured with.
        /// </param>

        /// <param name="vmSize">The size of virtual machines in the pool. All virtual machines in a pool
        /// are the same size. For example, Standard_D3.
        /// </param>

        /// <param name="vmImagePublisher">The publisher of the Azure Virtual Machines Marketplace image. For example,
        /// Canonical or MicrosoftWindowsServer.
        /// </param>

        /// <param name="vmImageOffer">The offer type of the Azure Virtual Machines Marketplace image. For
        /// example, UbuntuServer or WindowsServer.
        /// </param>

        /// <param name="vmImageSku">The SKU of the Azure Virtual Machines Marketplace image. For example,
        /// 14.04.0-LTS or 2012-R2-Datacenter.
        /// </param>

        /// <param name="vmImageVersion">The version of the Azure Virtual Machines Marketplace image. A value of
        /// &#39;latest&#39; can be specified to select the latest version of an image. If
        /// omitted, the default is &#39;latest&#39;.
        /// </param>

        /// <param name="vmSecrets">The secrets to install in the virtual machines.
        /// </param>

        /// <param name="vmExtensions">Set of extensions that should be installed onto the virtual machines.
        /// </param>

        /// <param name="vmManagedIdentity">Identities to assign to the virtual machine scale set under the node type.
        /// </param>

        /// <param name="isStateless">Indicates if the node type can only host Stateless workloads.
        /// </param>

        /// <param name="multiplePlacementGroups">Indicates if scale set associated with the node type can be composed of
        /// multiple placement groups.
        /// </param>

        /// <param name="frontendConfigurations">Indicates the node type uses its own frontend configurations instead of the
        /// default one for the cluster. This setting can only be specified for
        /// non-primary node types and can not be added or removed after the node type
        /// is created.
        /// </param>

        /// <param name="networkSecurityRules">The Network Security Rules for this node type. This setting can only be
        /// specified for node types that are configured with frontend configurations.
        /// </param>

        /// <param name="additionalDataDisks">Additional managed data disks.
        /// </param>

        /// <param name="enableEncryptionAtHost">Enable or disable the Host Encryption for the virtual machines on the node
        /// type. This will enable the encryption for all the disks including
        /// Resource/Temp disk at host itself. Default: The Encryption at host will be
        /// disabled unless this property is set to true for the resource.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the node type resource.
        /// Possible values include: 'None', 'Creating', 'Created', 'Updating',
        /// 'Succeeded', 'Failed', 'Canceled', 'Deleting', 'Deleted', 'Other'</param>

        /// <param name="enableAcceleratedNetworking">Specifies whether the network interface is accelerated networking-enabled.
        /// </param>

        /// <param name="useDefaultPublicLoadBalancer">Specifies whether the use public load balancer. If not specified and the
        /// node type doesn&#39;t have its own frontend configuration, it will be attached
        /// to the default load balancer. If the node type uses its own Load balancer
        /// and useDefaultPublicLoadBalancer is true, then the frontend has to be an
        /// Internal Load Balancer. If the node type uses its own Load balancer and
        /// useDefaultPublicLoadBalancer is false or not set, then the custom load
        /// balancer must include a public load balancer to provide outbound
        /// connectivity.
        /// </param>

        /// <param name="useTempDataDisk">Specifies whether to use the temporary disk for the service fabric data
        /// root, in which case no managed data disk will be attached and the temporary
        /// disk will be used. It is only allowed for stateless node types.
        /// </param>

        /// <param name="enableOverProvisioning">Specifies whether the node type should be overprovisioned. It is only
        /// allowed for stateless node types.
        /// </param>

        /// <param name="zones">Specifies the availability zones where the node type would span across. If
        /// the cluster is not spanning across availability zones, initiates az
        /// migration for the cluster.
        /// </param>

        /// <param name="isSpotVM">Indicates whether the node type will be Spot Virtual Machines. Azure will
        /// allocate the VMs if there is capacity available and the VMs can be evicted
        /// at any time.
        /// </param>

        /// <param name="hostGroupId">Specifies the full host group resource Id. This property is used for
        /// deploying on azure dedicated hosts.
        /// </param>

        /// <param name="useEphemeralOSDisk">Indicates whether to use ephemeral os disk. The sku selected on the vmSize
        /// property needs to support this feature.
        /// </param>

        /// <param name="spotRestoreTimeout">Indicates the time duration after which the platform will not try to
        /// restore the VMSS SPOT instances specified as ISO 8601.
        /// </param>

        /// <param name="evictionPolicy">Specifies the eviction policy for virtual machines in a SPOT node type.
        /// Default is Delete.
        /// Possible values include: 'Delete', 'Deallocate'</param>

        /// <param name="vmImageResourceId">Indicates the resource id of the vm image. This parameter is used for
        /// custom vm image.
        /// </param>

        /// <param name="subnetId">Indicates the resource id of the subnet for the node type.
        /// </param>

        /// <param name="vmSetupActions">Specifies the actions to be performed on the vms before bootstrapping the
        /// service fabric runtime.
        /// </param>

        /// <param name="securityType">Specifies the security type of the nodeType. Only TrustedLaunch is
        /// currently supported
        /// Possible values include: 'TrustedLaunch'</param>

        /// <param name="secureBootEnabled">Specifies whether secure boot should be enabled on the nodeType. Can only
        /// be used with TrustedLaunch SecurityType
        /// </param>

        /// <param name="enableNodePublicIP">Specifies whether each node is allocated its own public IP address. This is
        /// only supported on secondary node types with custom Load Balancers.
        /// </param>

        /// <param name="vmSharedGalleryImageId">Indicates the resource id of the vm shared galleries image. This parameter
        /// is used for custom vm image.
        /// </param>

        /// <param name="natGatewayId">Specifies the resource id of a NAT Gateway to attach to the subnet of this
        /// node type. Node type must use custom load balancer.
        /// </param>

        /// <param name="vmImagePlan">Specifies information about the marketplace image used to create the
        /// virtual machine. This element is only used for marketplace images. Before
        /// you can use a marketplace image from an API, you must enable the image for
        /// programmatic use. In the Azure portal, find the marketplace image that you
        /// want to use and then click Want to deploy programmatically, Get Started -&gt;.
        /// Enter any required information and then click Save.
        /// </param>
        public NodeTypeProperties(bool isPrimary, int vmInstanceCount, int? dataDiskSizeGb = default(int?), string dataDiskType = default(string), string dataDiskLetter = default(string), System.Collections.Generic.IDictionary<string, string> placementProperties = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> capacities = default(System.Collections.Generic.IDictionary<string, string>), EndpointRangeDescription applicationPorts = default(EndpointRangeDescription), EndpointRangeDescription ephemeralPorts = default(EndpointRangeDescription), string vmSize = default(string), string vmImagePublisher = default(string), string vmImageOffer = default(string), string vmImageSku = default(string), string vmImageVersion = default(string), System.Collections.Generic.IList<VaultSecretGroup> vmSecrets = default(System.Collections.Generic.IList<VaultSecretGroup>), System.Collections.Generic.IList<VmssExtension> vmExtensions = default(System.Collections.Generic.IList<VmssExtension>), VmManagedIdentity vmManagedIdentity = default(VmManagedIdentity), bool? isStateless = default(bool?), bool? multiplePlacementGroups = default(bool?), System.Collections.Generic.IList<FrontendConfiguration> frontendConfigurations = default(System.Collections.Generic.IList<FrontendConfiguration>), System.Collections.Generic.IList<NetworkSecurityRule> networkSecurityRules = default(System.Collections.Generic.IList<NetworkSecurityRule>), System.Collections.Generic.IList<VmssDataDisk> additionalDataDisks = default(System.Collections.Generic.IList<VmssDataDisk>), bool? enableEncryptionAtHost = default(bool?), string provisioningState = default(string), bool? enableAcceleratedNetworking = default(bool?), bool? useDefaultPublicLoadBalancer = default(bool?), bool? useTempDataDisk = default(bool?), bool? enableOverProvisioning = default(bool?), System.Collections.Generic.IList<string> zones = default(System.Collections.Generic.IList<string>), bool? isSpotVM = default(bool?), string hostGroupId = default(string), bool? useEphemeralOSDisk = default(bool?), string spotRestoreTimeout = default(string), string evictionPolicy = default(string), string vmImageResourceId = default(string), string subnetId = default(string), System.Collections.Generic.IList<string> vmSetupActions = default(System.Collections.Generic.IList<string>), string securityType = default(string), bool? secureBootEnabled = default(bool?), bool? enableNodePublicIP = default(bool?), string vmSharedGalleryImageId = default(string), string natGatewayId = default(string), VmImagePlan vmImagePlan = default(VmImagePlan))

        {
            this.IsPrimary = isPrimary;
            this.VMInstanceCount = vmInstanceCount;
            this.DataDiskSizeGb = dataDiskSizeGb;
            this.DataDiskType = dataDiskType;
            this.DataDiskLetter = dataDiskLetter;
            this.PlacementProperties = placementProperties;
            this.Capacities = capacities;
            this.ApplicationPorts = applicationPorts;
            this.EphemeralPorts = ephemeralPorts;
            this.VMSize = vmSize;
            this.VMImagePublisher = vmImagePublisher;
            this.VMImageOffer = vmImageOffer;
            this.VMImageSku = vmImageSku;
            this.VMImageVersion = vmImageVersion;
            this.VMSecrets = vmSecrets;
            this.VMExtensions = vmExtensions;
            this.VMManagedIdentity = vmManagedIdentity;
            this.IsStateless = isStateless;
            this.MultiplePlacementGroups = multiplePlacementGroups;
            this.FrontendConfigurations = frontendConfigurations;
            this.NetworkSecurityRules = networkSecurityRules;
            this.AdditionalDataDisks = additionalDataDisks;
            this.EnableEncryptionAtHost = enableEncryptionAtHost;
            this.ProvisioningState = provisioningState;
            this.EnableAcceleratedNetworking = enableAcceleratedNetworking;
            this.UseDefaultPublicLoadBalancer = useDefaultPublicLoadBalancer;
            this.UseTempDataDisk = useTempDataDisk;
            this.EnableOverProvisioning = enableOverProvisioning;
            this.Zones = zones;
            this.IsSpotVM = isSpotVM;
            this.HostGroupId = hostGroupId;
            this.UseEphemeralOSDisk = useEphemeralOSDisk;
            this.SpotRestoreTimeout = spotRestoreTimeout;
            this.EvictionPolicy = evictionPolicy;
            this.VMImageResourceId = vmImageResourceId;
            this.SubnetId = subnetId;
            this.VMSetupActions = vmSetupActions;
            this.SecurityType = securityType;
            this.SecureBootEnabled = secureBootEnabled;
            this.EnableNodePublicIP = enableNodePublicIP;
            this.VMSharedGalleryImageId = vmSharedGalleryImageId;
            this.NatGatewayId = natGatewayId;
            this.VMImagePlan = vmImagePlan;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets indicates the Service Fabric system services for the cluster
        /// will run on this node type. This setting cannot be changed once the node
        /// type is created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isPrimary")]
        public bool IsPrimary {get; set; }

        /// <summary>
        /// Gets or sets the number of nodes in the node type. &lt;br /&gt;&lt;br /&gt;**Values:**
        /// &lt;br /&gt;-1 - Use when auto scale rules are configured or sku.capacity is
        /// defined &lt;br /&gt; 0 - Not supported &lt;br /&gt; &gt;0 - Use for manual scale.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmInstanceCount")]
        public int VMInstanceCount {get; set; }

        /// <summary>
        /// Gets or sets disk size for the managed disk attached to the vms on the node
        /// type in GBs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataDiskSizeGB")]
        public int? DataDiskSizeGb {get; set; }

        /// <summary>
        /// Gets or sets managed data disk type. Specifies the storage account type for
        /// the managed disk Possible values include: &#39;Standard_LRS&#39;, &#39;StandardSSD_LRS&#39;, &#39;Premium_LRS&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataDiskType")]
        public string DataDiskType {get; set; }

        /// <summary>
        /// Gets or sets managed data disk letter. It can not use the reserved letter C
        /// or D and it can not change after created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataDiskLetter")]
        public string DataDiskLetter {get; set; }

        /// <summary>
        /// Gets or sets the placement tags applied to nodes in the node type, which
        /// can be used to indicate where certain services (workload) should run.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "placementProperties")]
        public System.Collections.Generic.IDictionary<string, string> PlacementProperties {get; set; }

        /// <summary>
        /// Gets or sets the capacity tags applied to the nodes in the node type, the
        /// cluster resource manager uses these tags to understand how much resource a
        /// node has.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "capacities")]
        public System.Collections.Generic.IDictionary<string, string> Capacities {get; set; }

        /// <summary>
        /// Gets or sets the range of ports from which cluster assigned port to Service
        /// Fabric applications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "applicationPorts")]
        public EndpointRangeDescription ApplicationPorts {get; set; }

        /// <summary>
        /// Gets or sets the range of ephemeral ports that nodes in this node type
        /// should be configured with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ephemeralPorts")]
        public EndpointRangeDescription EphemeralPorts {get; set; }

        /// <summary>
        /// Gets or sets the size of virtual machines in the pool. All virtual machines
        /// in a pool are the same size. For example, Standard_D3.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmSize")]
        public string VMSize {get; set; }

        /// <summary>
        /// Gets or sets the publisher of the Azure Virtual Machines Marketplace image.
        /// For example, Canonical or MicrosoftWindowsServer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmImagePublisher")]
        public string VMImagePublisher {get; set; }

        /// <summary>
        /// Gets or sets the offer type of the Azure Virtual Machines Marketplace
        /// image. For example, UbuntuServer or WindowsServer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmImageOffer")]
        public string VMImageOffer {get; set; }

        /// <summary>
        /// Gets or sets the SKU of the Azure Virtual Machines Marketplace image. For
        /// example, 14.04.0-LTS or 2012-R2-Datacenter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmImageSku")]
        public string VMImageSku {get; set; }

        /// <summary>
        /// Gets or sets the version of the Azure Virtual Machines Marketplace image. A
        /// value of &#39;latest&#39; can be specified to select the latest version of an
        /// image. If omitted, the default is &#39;latest&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmImageVersion")]
        public string VMImageVersion {get; set; }

        /// <summary>
        /// Gets or sets the secrets to install in the virtual machines.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmSecrets")]
        public System.Collections.Generic.IList<VaultSecretGroup> VMSecrets {get; set; }

        /// <summary>
        /// Gets or sets set of extensions that should be installed onto the virtual
        /// machines.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmExtensions")]
        public System.Collections.Generic.IList<VmssExtension> VMExtensions {get; set; }

        /// <summary>
        /// Gets or sets identities to assign to the virtual machine scale set under
        /// the node type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmManagedIdentity")]
        public VmManagedIdentity VMManagedIdentity {get; set; }

        /// <summary>
        /// Gets or sets indicates if the node type can only host Stateless workloads.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isStateless")]
        public bool? IsStateless {get; set; }

        /// <summary>
        /// Gets or sets indicates if scale set associated with the node type can be
        /// composed of multiple placement groups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "multiplePlacementGroups")]
        public bool? MultiplePlacementGroups {get; set; }

        /// <summary>
        /// Gets or sets indicates the node type uses its own frontend configurations
        /// instead of the default one for the cluster. This setting can only be
        /// specified for non-primary node types and can not be added or removed after
        /// the node type is created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "frontendConfigurations")]
        public System.Collections.Generic.IList<FrontendConfiguration> FrontendConfigurations {get; set; }

        /// <summary>
        /// Gets or sets the Network Security Rules for this node type. This setting
        /// can only be specified for node types that are configured with frontend
        /// configurations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkSecurityRules")]
        public System.Collections.Generic.IList<NetworkSecurityRule> NetworkSecurityRules {get; set; }

        /// <summary>
        /// Gets or sets additional managed data disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "additionalDataDisks")]
        public System.Collections.Generic.IList<VmssDataDisk> AdditionalDataDisks {get; set; }

        /// <summary>
        /// Gets or sets enable or disable the Host Encryption for the virtual machines
        /// on the node type. This will enable the encryption for all the disks
        /// including Resource/Temp disk at host itself. Default: The Encryption at
        /// host will be disabled unless this property is set to true for the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableEncryptionAtHost")]
        public bool? EnableEncryptionAtHost {get; set; }

        /// <summary>
        /// Gets the provisioning state of the node type resource. Possible values include: &#39;None&#39;, &#39;Creating&#39;, &#39;Created&#39;, &#39;Updating&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;Deleting&#39;, &#39;Deleted&#39;, &#39;Other&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets specifies whether the network interface is accelerated
        /// networking-enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableAcceleratedNetworking")]
        public bool? EnableAcceleratedNetworking {get; set; }

        /// <summary>
        /// Gets or sets specifies whether the use public load balancer. If not
        /// specified and the node type doesn&#39;t have its own frontend configuration, it
        /// will be attached to the default load balancer. If the node type uses its
        /// own Load balancer and useDefaultPublicLoadBalancer is true, then the
        /// frontend has to be an Internal Load Balancer. If the node type uses its own
        /// Load balancer and useDefaultPublicLoadBalancer is false or not set, then
        /// the custom load balancer must include a public load balancer to provide
        /// outbound connectivity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "useDefaultPublicLoadBalancer")]
        public bool? UseDefaultPublicLoadBalancer {get; set; }

        /// <summary>
        /// Gets or sets specifies whether to use the temporary disk for the service
        /// fabric data root, in which case no managed data disk will be attached and
        /// the temporary disk will be used. It is only allowed for stateless node
        /// types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "useTempDataDisk")]
        public bool? UseTempDataDisk {get; set; }

        /// <summary>
        /// Gets or sets specifies whether the node type should be overprovisioned. It
        /// is only allowed for stateless node types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableOverProvisioning")]
        public bool? EnableOverProvisioning {get; set; }

        /// <summary>
        /// Gets or sets specifies the availability zones where the node type would
        /// span across. If the cluster is not spanning across availability zones,
        /// initiates az migration for the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "zones")]
        public System.Collections.Generic.IList<string> Zones {get; set; }

        /// <summary>
        /// Gets or sets indicates whether the node type will be Spot Virtual Machines.
        /// Azure will allocate the VMs if there is capacity available and the VMs can
        /// be evicted at any time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isSpotVM")]
        public bool? IsSpotVM {get; set; }

        /// <summary>
        /// Gets or sets specifies the full host group resource Id. This property is
        /// used for deploying on azure dedicated hosts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostGroupId")]
        public string HostGroupId {get; set; }

        /// <summary>
        /// Gets or sets indicates whether to use ephemeral os disk. The sku selected
        /// on the vmSize property needs to support this feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "useEphemeralOSDisk")]
        public bool? UseEphemeralOSDisk {get; set; }

        /// <summary>
        /// Gets or sets indicates the time duration after which the platform will not
        /// try to restore the VMSS SPOT instances specified as ISO 8601.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "spotRestoreTimeout")]
        public string SpotRestoreTimeout {get; set; }

        /// <summary>
        /// Gets or sets specifies the eviction policy for virtual machines in a SPOT
        /// node type. Default is Delete. Possible values include: &#39;Delete&#39;, &#39;Deallocate&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "evictionPolicy")]
        public string EvictionPolicy {get; set; }

        /// <summary>
        /// Gets or sets indicates the resource id of the vm image. This parameter is
        /// used for custom vm image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmImageResourceId")]
        public string VMImageResourceId {get; set; }

        /// <summary>
        /// Gets or sets indicates the resource id of the subnet for the node type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subnetId")]
        public string SubnetId {get; set; }

        /// <summary>
        /// Gets or sets specifies the actions to be performed on the vms before
        /// bootstrapping the service fabric runtime.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmSetupActions")]
        public System.Collections.Generic.IList<string> VMSetupActions {get; set; }

        /// <summary>
        /// Gets or sets specifies the security type of the nodeType. Only
        /// TrustedLaunch is currently supported Possible values include: &#39;TrustedLaunch&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "securityType")]
        public string SecurityType {get; set; }

        /// <summary>
        /// Gets or sets specifies whether secure boot should be enabled on the
        /// nodeType. Can only be used with TrustedLaunch SecurityType
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "secureBootEnabled")]
        public bool? SecureBootEnabled {get; set; }

        /// <summary>
        /// Gets or sets specifies whether each node is allocated its own public IP
        /// address. This is only supported on secondary node types with custom Load
        /// Balancers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableNodePublicIP")]
        public bool? EnableNodePublicIP {get; set; }

        /// <summary>
        /// Gets or sets indicates the resource id of the vm shared galleries image.
        /// This parameter is used for custom vm image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmSharedGalleryImageId")]
        public string VMSharedGalleryImageId {get; set; }

        /// <summary>
        /// Gets or sets specifies the resource id of a NAT Gateway to attach to the
        /// subnet of this node type. Node type must use custom load balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "natGatewayId")]
        public string NatGatewayId {get; set; }

        /// <summary>
        /// Gets or sets specifies information about the marketplace image used to
        /// create the virtual machine. This element is only used for marketplace
        /// images. Before you can use a marketplace image from an API, you must enable
        /// the image for programmatic use. In the Azure portal, find the marketplace
        /// image that you want to use and then click Want to deploy programmatically,
        /// Get Started -&gt;. Enter any required information and then click Save.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmImagePlan")]
        public VmImagePlan VMImagePlan {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.VMInstanceCount > 2147483647)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "VMInstanceCount", 2147483647);
            }
            if (this.VMInstanceCount < -1)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "VMInstanceCount", -1);
            }

            if (this.DataDiskLetter != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.DataDiskLetter, "^[a-zA-Z]{1}$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "DataDiskLetter", "^[a-zA-Z]{1}$");
                }
            }


            if (this.ApplicationPorts != null)
            {
                this.ApplicationPorts.Validate();
            }
            if (this.EphemeralPorts != null)
            {
                this.EphemeralPorts.Validate();
            }





            if (this.VMSecrets != null)
            {
                foreach (var element in this.VMSecrets)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.VMExtensions != null)
            {
                foreach (var element in this.VMExtensions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }


            if (this.NetworkSecurityRules != null)
            {
                foreach (var element in this.NetworkSecurityRules)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.AdditionalDataDisks != null)
            {
                foreach (var element in this.AdditionalDataDisks)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }












        }
    }
}