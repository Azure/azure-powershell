// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using System.Linq;

    /// <summary>
    /// The properties of a stateless service resource.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Stateless")]
    public partial class StatelessServiceProperties : ServiceResourceProperties
    {
        /// <summary>
        /// Initializes a new instance of the StatelessServiceProperties class.
        /// </summary>
        public StatelessServiceProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StatelessServiceProperties class.
        /// </summary>

        /// <param name="placementConstraints">The placement constraints as a string. Placement constraints are boolean
        /// expressions on node properties and allow for restricting a service to
        /// particular nodes based on the service requirements. For example, to place a
        /// service on nodes where NodeType is blue specify the following: &#34;NodeColor
        /// == blue)&#34;.
        /// </param>

        /// <param name="correlationScheme">A list that describes the correlation of the service with other services.
        /// </param>

        /// <param name="serviceLoadMetrics">The service load metrics is given as an array of ServiceLoadMetric objects.
        /// </param>

        /// <param name="servicePlacementPolicies">A list that describes the correlation of the service with other services.
        /// </param>

        /// <param name="defaultMoveCost">Specifies the move cost for the service.
        /// Possible values include: 'Zero', 'Low', 'Medium', 'High'</param>

        /// <param name="scalingPolicies">Scaling policies for this service.
        /// </param>

        /// <param name="provisioningState">The current deployment or provisioning state, which only appears in the
        /// response
        /// </param>

        /// <param name="serviceTypeName">The name of the service type
        /// </param>

        /// <param name="partitionDescription">Describes how the service is partitioned.
        /// </param>

        /// <param name="servicePackageActivationMode">The activation Mode of the service package
        /// Possible values include: 'SharedProcess', 'ExclusiveProcess'</param>

        /// <param name="serviceDnsName">Dns name used for the service. If this is specified, then the DNS name can
        /// be used to return the IP addresses of service endpoints for application
        /// layer protocols (e.g., HTTP).
        /// When updating serviceDnsName, old name may be temporarily resolvable.
        /// However, rely on new name.
        /// When removing serviceDnsName, removed name may temporarily be resolvable.
        /// Do not rely on the name being unresolvable.
        /// </param>

        /// <param name="instanceCount">The instance count.
        /// </param>

        /// <param name="minInstanceCount">MinInstanceCount is the minimum number of instances that must be up to meet
        /// the EnsureAvailability safety check during operations like upgrade or
        /// deactivate node. The actual number that is used is max( MinInstanceCount,
        /// ceil( MinInstancePercentage/100.0 * InstanceCount) ). Note, if
        /// InstanceCount is set to -1, during MinInstanceCount computation -1 is first
        /// converted into the number of nodes on which the instances are allowed to be
        /// placed according to the placement constraints on the service.
        /// </param>

        /// <param name="minInstancePercentage">MinInstancePercentage is the minimum percentage of InstanceCount that must
        /// be up to meet the EnsureAvailability safety check during operations like
        /// upgrade or deactivate node. The actual number that is used is max(
        /// MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ).
        /// Note, if InstanceCount is set to -1, during MinInstancePercentage
        /// computation, -1 is first converted into the number of nodes on which the
        /// instances are allowed to be placed according to the placement constraints
        /// on the service.
        /// </param>
        public StatelessServiceProperties(string serviceTypeName, Partition partitionDescription, int instanceCount, string placementConstraints = default(string), System.Collections.Generic.IList<ServiceCorrelation> correlationScheme = default(System.Collections.Generic.IList<ServiceCorrelation>), System.Collections.Generic.IList<ServiceLoadMetric> serviceLoadMetrics = default(System.Collections.Generic.IList<ServiceLoadMetric>), System.Collections.Generic.IList<ServicePlacementPolicy> servicePlacementPolicies = default(System.Collections.Generic.IList<ServicePlacementPolicy>), string defaultMoveCost = default(string), System.Collections.Generic.IList<ScalingPolicy> scalingPolicies = default(System.Collections.Generic.IList<ScalingPolicy>), string provisioningState = default(string), string servicePackageActivationMode = default(string), string serviceDnsName = default(string), int? minInstanceCount = default(int?), int? minInstancePercentage = default(int?))

        : base(serviceTypeName, partitionDescription, placementConstraints, correlationScheme, serviceLoadMetrics, servicePlacementPolicies, defaultMoveCost, scalingPolicies, provisioningState, servicePackageActivationMode, serviceDnsName)
        {
            this.InstanceCount = instanceCount;
            this.MinInstanceCount = minInstanceCount;
            this.MinInstancePercentage = minInstancePercentage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the instance count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "instanceCount")]
        public int InstanceCount {get; set; }

        /// <summary>
        /// Gets or sets minInstanceCount is the minimum number of instances that must
        /// be up to meet the EnsureAvailability safety check during operations like
        /// upgrade or deactivate node. The actual number that is used is max(
        /// MinInstanceCount, ceil( MinInstancePercentage/100.0 * InstanceCount) ).
        /// Note, if InstanceCount is set to -1, during MinInstanceCount computation -1
        /// is first converted into the number of nodes on which the instances are
        /// allowed to be placed according to the placement constraints on the service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minInstanceCount")]
        public int? MinInstanceCount {get; set; }

        /// <summary>
        /// Gets or sets minInstancePercentage is the minimum percentage of
        /// InstanceCount that must be up to meet the EnsureAvailability safety check
        /// during operations like upgrade or deactivate node. The actual number that
        /// is used is max( MinInstanceCount, ceil( MinInstancePercentage/100.0 *
        /// InstanceCount) ). Note, if InstanceCount is set to -1, during
        /// MinInstancePercentage computation, -1 is first converted into the number of
        /// nodes on which the instances are allowed to be placed according to the
        /// placement constraints on the service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minInstancePercentage")]
        public int? MinInstancePercentage {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.InstanceCount < -1)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "InstanceCount", -1);
            }
        }
    }
}