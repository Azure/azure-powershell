// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ServiceFabricManagedClusters.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the policy to be used for placement of a Service Fabric service
    /// where the service&#39;s
    /// Primary replicas should optimally be placed in a particular domain.
    /// This placement policy is usually used with fault domains in scenarios where
    /// the Service Fabric
    /// cluster is geographically distributed in order to indicate that a service&#39;s
    /// primary replica should
    /// be located in a particular fault domain, which in geo-distributed scenarios
    /// usually aligns with regional
    /// or datacenter boundaries. Note that since this is an optimization it is
    /// possible that the Primary replica
    /// may not end up located in this domain due to failures, capacity limits, or
    /// other constraints.
    /// </summary>
    [Newtonsoft.Json.JsonObject("PreferredPrimaryDomain")]
    public partial class ServicePlacementPreferPrimaryDomainPolicy : ServicePlacementPolicy
    {
        /// <summary>
        /// Initializes a new instance of the ServicePlacementPreferPrimaryDomainPolicy class.
        /// </summary>
        public ServicePlacementPreferPrimaryDomainPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServicePlacementPreferPrimaryDomainPolicy class.
        /// </summary>

        /// <param name="domainName">The name of the domain that should used for placement as per this policy.
        /// </param>
        public ServicePlacementPreferPrimaryDomainPolicy(string domainName)

        {
            this.DomainName = domainName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the domain that should used for placement as per
        /// this policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "domainName")]
        public string DomainName {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DomainName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DomainName");
            }

        }
    }
}