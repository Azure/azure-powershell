
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Authorization rule for a namespace by name.
.Description
Authorization rule for a namespace by name.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Relay.Models.IRelayIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Relay.Models.Api20211101.IAuthorizationRule
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IRelayIdentity>: Identity Parameter
  [AuthorizationRuleName <String>]: The authorization rule name.
  [HybridConnectionName <String>]: The hybrid connection name.
  [Id <String>]: Resource identity path
  [NamespaceName <String>]: The namespace name
  [PrivateEndpointConnectionName <String>]: The PrivateEndpointConnection name
  [PrivateLinkResourceName <String>]: The PrivateLinkResource name
  [RelayName <String>]: The relay name.
  [ResourceGroupName <String>]: Name of the Resource group within the Azure subscription.
  [SubscriptionId <String>]: Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
.Link
https://learn.microsoft.com/powershell/module/az.relay/get-azrelayauthorizationrule
#>
function Get-AzRelayAuthorizationRule {
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.Relay.Models.Api20211101.IAuthorizationRule])]
    [CmdletBinding(DefaultParameterSetName='List', PositionalBinding=$false)]
    param(
        [Parameter(ParameterSetName='Get', Mandatory)]
        [Parameter(ParameterSetName='Get1', Mandatory)]
        [Parameter(ParameterSetName='Get2', Mandatory)]
        [Alias('AuthorizationRuleName')]
        [Microsoft.Azure.PowerShell.Cmdlets.Relay.Category('Path')]
        [System.String]
        # The authorization rule name.
        ${Name},
    
        [Parameter(ParameterSetName='Get', Mandatory)]
        [Parameter(ParameterSetName='Get1', Mandatory)]
        [Parameter(ParameterSetName='Get2', Mandatory)]
        [Parameter(ParameterSetName='List', Mandatory)]
        [Parameter(ParameterSetName='List1', Mandatory)]
        [Parameter(ParameterSetName='List2', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.Relay.Category('Path')]
        [System.String]
        # The namespace name
        ${Namespace},
    
        [Parameter(ParameterSetName='Get', Mandatory)]
        [Parameter(ParameterSetName='Get1', Mandatory)]
        [Parameter(ParameterSetName='Get2', Mandatory)]
        [Parameter(ParameterSetName='List', Mandatory)]
        [Parameter(ParameterSetName='List1', Mandatory)]
        [Parameter(ParameterSetName='List2', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.Relay.Category('Path')]
        [System.String]
        # Name of the Resource group within the Azure subscription.
        ${ResourceGroupName},
    
        [Parameter(ParameterSetName='Get')]
        [Parameter(ParameterSetName='Get1')]
        [Parameter(ParameterSetName='Get2')]
        [Parameter(ParameterSetName='List')]
        [Parameter(ParameterSetName='List1')]
        [Parameter(ParameterSetName='List2')]
        [Microsoft.Azure.PowerShell.Cmdlets.Relay.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.Relay.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
        [System.String[]]
        # Subscription credentials which uniquely identify the Microsoft Azure subscription.
        # The subscription ID forms part of the URI for every service call.
        ${SubscriptionId},
    
        [Parameter(ParameterSetName='Get1', Mandatory)]
        [Parameter(ParameterSetName='List1', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.Relay.Category('Path')]
        [System.String]
        # The hybrid connection name.
        ${HybridConnection},
    
        [Parameter(ParameterSetName='Get2', Mandatory)]
        [Parameter(ParameterSetName='List2', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.Relay.Category('Path')]
        [System.String]
        # The relay name.
        ${WcfRelay},
    
        [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
        [Microsoft.Azure.PowerShell.Cmdlets.Relay.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.Relay.Models.IRelayIdentity]
        # Identity Parameter
        # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
        ${InputObject},
    
        [Parameter()]
        [Alias('AzureRMContext', 'AzureCredential')]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Relay.Category('Azure')]
        [System.Management.Automation.PSObject]
        # The credentials, account, tenant, and subscription used for communication with Azure.
        ${DefaultProfile},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.Relay.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Wait for .NET debugger to attach
        ${Break},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Relay.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.Relay.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be appended to the front of the pipeline
        ${HttpPipelineAppend},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Relay.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.Relay.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be prepended to the front of the pipeline
        ${HttpPipelinePrepend},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.Relay.Category('Runtime')]
        [System.Uri]
        # The URI for the proxy server to use
        ${Proxy},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Relay.Category('Runtime')]
        [System.Management.Automation.PSCredential]
        # Credentials for a proxy server to use for the remote call
        ${ProxyCredential},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.Relay.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Use the default credentials for the proxy
        ${ProxyUseDefaultCredentials}
    )

    process {
        try {
            if (('Get', 'Get1', 'Get2', 'List', 'List1', 'List2') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
            $parameterSet = $PSCmdlet.ParameterSetName
            if ($parameterSet -eq 'List') {
                Az.Relay.private\Get-AzRelayAuthorizationRule_List @PSBoundParameters
            }
            if ($parameterSet -eq 'List1') {
                Az.Relay.private\Get-AzRelayAuthorizationRule_List1 @PSBoundParameters
            }
            if ($parameterSet -eq 'List2') {
                Az.Relay.private\Get-AzRelayAuthorizationRule_List2 @PSBoundParameters
            }
            if ($parameterSet -eq 'Get') {
                Az.Relay.private\Get-AzRelayAuthorizationRule_Get @PSBoundParameters
            }
            if ($parameterSet -eq 'Get1') {
                Az.Relay.private\Get-AzRelayAuthorizationRule_Get1 @PSBoundParameters
            }
            if ($parameterSet -eq 'Get2') {
                Az.Relay.private\Get-AzRelayAuthorizationRule_Get2 @PSBoundParameters
            }
            if ($parameterSet -eq 'GetViaIdentity') {
                if ($InputObject.Id -ilike '*hybridConnections*') {
                    Az.Relay.private\Get-AzRelayAuthorizationRule_GetViaIdentity1 @PSBoundParameters
                } elseif ($InputObject.Id -ilike '*wcfRelays*') {
                    Az.Relay.private\Get-AzRelayAuthorizationRule_GetViaIdentity2 @PSBoundParameters
                } else {
                    Az.Relay.private\Get-AzRelayAuthorizationRule_GetViaIdentity @PSBoundParameters
                }
            }
            
        } catch {
    
            throw
        }
    
    }
}   