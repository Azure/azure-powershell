// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ResourceGraph.Models
{
    using System.Linq;

    /// <summary>
    /// A facet whose execution resulted in an error.
    /// </summary>
    [Newtonsoft.Json.JsonObject("FacetError")]
    public partial class FacetError : Facet
    {
        /// <summary>
        /// Initializes a new instance of the FacetError class.
        /// </summary>
        public FacetError()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FacetError class.
        /// </summary>

        /// <param name="expression">Facet expression, same as in the corresponding facet request.
        /// </param>

        /// <param name="errors">An array containing detected facet errors with details.
        /// </param>
        public FacetError(string expression, System.Collections.Generic.IList<ErrorDetails> errors)

        : base(expression)
        {
            this.Errors = errors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets an array containing detected facet errors with details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "errors")]
        public System.Collections.Generic.IList<ErrorDetails> Errors {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Errors == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Errors");
            }
            if (this.Errors != null)
            {
                foreach (var element in this.Errors)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}