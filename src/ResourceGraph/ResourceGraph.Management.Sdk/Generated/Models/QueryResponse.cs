// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ResourceGraph.Models
{
    using System.Linq;

    /// <summary>
    /// Query result.
    /// </summary>
    public partial class QueryResponse
    {
        /// <summary>
        /// Initializes a new instance of the QueryResponse class.
        /// </summary>
        public QueryResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QueryResponse class.
        /// </summary>

        /// <param name="totalRecords">Number of total records matching the query.
        /// </param>

        /// <param name="count">Number of records returned in the current response. In the case of paging,
        /// this is the number of records in the current page.
        /// </param>

        /// <param name="resultTruncated">Indicates whether the query results are truncated.
        /// Possible values include: &#39;true&#39;, &#39;false&#39;</param>

        /// <param name="skipToken">When present, the value can be passed to a subsequent query call (together
        /// with the same query and scopes used in the current request) to retrieve the
        /// next page of data.
        /// </param>

        /// <param name="data">Query output in JObject array or Table format.
        /// </param>

        /// <param name="facets">Query facets.
        /// </param>
        public QueryResponse(long totalRecords, long count, ResultTruncated resultTruncated, object data, string skipToken = default(string), System.Collections.Generic.IList<Facet> facets = default(System.Collections.Generic.IList<Facet>))

        {
            this.TotalRecords = totalRecords;
            this.Count = count;
            this.ResultTruncated = resultTruncated;
            this.SkipToken = skipToken;
            this.Data = data;
            this.Facets = facets;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets number of total records matching the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalRecords")]
        public long TotalRecords {get; set; }

        /// <summary>
        /// Gets or sets number of records returned in the current response. In the
        /// case of paging, this is the number of records in the current page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count")]
        public long Count {get; set; }

        /// <summary>
        /// Gets or sets indicates whether the query results are truncated. Possible values include: &#39;true&#39;, &#39;false&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resultTruncated")]
        public ResultTruncated ResultTruncated {get; set; }

        /// <summary>
        /// Gets or sets when present, the value can be passed to a subsequent query
        /// call (together with the same query and scopes used in the current request)
        /// to retrieve the next page of data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "$skipToken")]
        public string SkipToken {get; set; }

        /// <summary>
        /// Gets or sets query output in JObject array or Table format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "data")]
        public object Data {get; set; }

        /// <summary>
        /// Gets or sets query facets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "facets")]
        public System.Collections.Generic.IList<Facet> Facets {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Data == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Data");
            }



            if (this.Facets != null)
            {
                foreach (var element in this.Facets)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}