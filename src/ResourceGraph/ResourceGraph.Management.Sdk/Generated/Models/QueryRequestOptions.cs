// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ResourceGraph.Models
{
    using System.Linq;

    /// <summary>
    /// The options for query evaluation
    /// </summary>
    public partial class QueryRequestOptions
    {
        /// <summary>
        /// Initializes a new instance of the QueryRequestOptions class.
        /// </summary>
        public QueryRequestOptions()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QueryRequestOptions class.
        /// </summary>

        /// <param name="skipToken">Continuation token for pagination, capturing the next page size and offset,
        /// as well as the context of the query.
        /// </param>

        /// <param name="top">The maximum number of rows that the query should return. Overrides the page
        /// size when ```$skipToken``` property is present.
        /// </param>

        /// <param name="skip">The number of rows to skip from the beginning of the results. Overrides the
        /// next page offset when ```$skipToken``` property is present.
        /// </param>

        /// <param name="resultFormat">Defines in which format query result returned.
        /// Possible values include: &#39;table&#39;, &#39;objectArray&#39;</param>

        /// <param name="allowPartialScopes">Only applicable for tenant and management group level queries to decide
        /// whether to allow partial scopes for result in case the number of
        /// subscriptions exceed allowed limits.
        /// </param>
        public QueryRequestOptions(string skipToken = default(string), int? top = default(int?), int? skip = default(int?), ResultFormat? resultFormat = default(ResultFormat?), bool? allowPartialScopes = default(bool?))

        {
            this.SkipToken = skipToken;
            this.Top = top;
            this.Skip = skip;
            this.ResultFormat = resultFormat;
            this.AllowPartialScopes = allowPartialScopes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets continuation token for pagination, capturing the next page
        /// size and offset, as well as the context of the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "$skipToken")]
        public string SkipToken {get; set; }

        /// <summary>
        /// Gets or sets the maximum number of rows that the query should return.
        /// Overrides the page size when ```$skipToken``` property is present.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "$top")]
        public int? Top {get; set; }

        /// <summary>
        /// Gets or sets the number of rows to skip from the beginning of the results.
        /// Overrides the next page offset when ```$skipToken``` property is present.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "$skip")]
        public int? Skip {get; set; }

        /// <summary>
        /// Gets or sets defines in which format query result returned. Possible values include: &#39;table&#39;, &#39;objectArray&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resultFormat")]
        public ResultFormat? ResultFormat {get; set; }

        /// <summary>
        /// Gets or sets only applicable for tenant and management group level queries
        /// to decide whether to allow partial scopes for result in case the number of
        /// subscriptions exceed allowed limits.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowPartialScopes")]
        public bool? AllowPartialScopes {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.Top != null)
            {
                if (this.Top > 1000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "Top", 1000);
                }
                if (this.Top < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Top", 1);
                }
            }
            if (this.Skip != null)
            {
                if (this.Skip < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Skip", 0);
                }
            }

        }
    }
}