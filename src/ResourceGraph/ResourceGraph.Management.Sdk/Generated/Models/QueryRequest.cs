// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ResourceGraph.Models
{
    using System.Linq;

    /// <summary>
    /// Describes a query to be executed.
    /// </summary>
    public partial class QueryRequest
    {
        /// <summary>
        /// Initializes a new instance of the QueryRequest class.
        /// </summary>
        public QueryRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QueryRequest class.
        /// </summary>

        /// <param name="subscriptions">Azure subscriptions against which to execute the query.
        /// </param>

        /// <param name="managementGroups">Azure management groups against which to execute the query. Example: [
        /// &#39;mg1&#39;, &#39;mg2&#39; ]
        /// </param>

        /// <param name="query">The resources query.
        /// </param>

        /// <param name="options">The query evaluation options
        /// </param>

        /// <param name="facets">An array of facet requests to be computed against the query result.
        /// </param>
        public QueryRequest(string query, System.Collections.Generic.IList<string> subscriptions = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> managementGroups = default(System.Collections.Generic.IList<string>), QueryRequestOptions options = default(QueryRequestOptions), System.Collections.Generic.IList<FacetRequest> facets = default(System.Collections.Generic.IList<FacetRequest>))

        {
            this.Subscriptions = subscriptions;
            this.ManagementGroups = managementGroups;
            this.Query = query;
            this.Options = options;
            this.Facets = facets;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets azure subscriptions against which to execute the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subscriptions")]
        public System.Collections.Generic.IList<string> Subscriptions {get; set; }

        /// <summary>
        /// Gets or sets azure management groups against which to execute the query.
        /// Example: [ &#39;mg1&#39;, &#39;mg2&#39; ]
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "managementGroups")]
        public System.Collections.Generic.IList<string> ManagementGroups {get; set; }

        /// <summary>
        /// Gets or sets the resources query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "query")]
        public string Query {get; set; }

        /// <summary>
        /// Gets or sets the query evaluation options
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "options")]
        public QueryRequestOptions Options {get; set; }

        /// <summary>
        /// Gets or sets an array of facet requests to be computed against the query
        /// result.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "facets")]
        public System.Collections.Generic.IList<FacetRequest> Facets {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Query == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Query");
            }



            if (this.Options != null)
            {
                this.Options.Validate();
            }
            if (this.Facets != null)
            {
                foreach (var element in this.Facets)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}