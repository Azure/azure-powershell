// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Media
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Azure.Management.Media.Rest.Models;

    /// <summary>
    /// Extension methods for AzureMediaServices.
    /// </summary>
    public static partial class AzureMediaServicesExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static MediaServiceCollection GetAllMediaservices(this IAzureMediaServices operations, string subscriptionId, string resourceGroupName, string apiVersion)
            {
                return Task.Factory.StartNew(s => ((IAzureMediaServices)s).GetAllMediaservicesAsync(subscriptionId, resourceGroupName, apiVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MediaServiceCollection> GetAllMediaservicesAsync(this IAzureMediaServices operations, string subscriptionId, string resourceGroupName, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllMediaservicesWithHttpMessagesAsync(subscriptionId, resourceGroupName, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='mediaService'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static MediaService PostAllMediaservices(this IAzureMediaServices operations, string subscriptionId, string resourceGroupName, MediaService mediaService, string apiVersion)
            {
                return Task.Factory.StartNew(s => ((IAzureMediaServices)s).PostAllMediaservicesAsync(subscriptionId, resourceGroupName, mediaService, apiVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='mediaService'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MediaService> PostAllMediaservicesAsync(this IAzureMediaServices operations, string subscriptionId, string resourceGroupName, MediaService mediaService, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAllMediaservicesWithHttpMessagesAsync(subscriptionId, resourceGroupName, mediaService, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='mediaServicesName'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static MediaService GetMediaservices(this IAzureMediaServices operations, string subscriptionId, string resourceGroupName, string mediaServicesName, string apiVersion)
            {
                return Task.Factory.StartNew(s => ((IAzureMediaServices)s).GetMediaservicesAsync(subscriptionId, resourceGroupName, mediaServicesName, apiVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='mediaServicesName'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MediaService> GetMediaservicesAsync(this IAzureMediaServices operations, string subscriptionId, string resourceGroupName, string mediaServicesName, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMediaservicesWithHttpMessagesAsync(subscriptionId, resourceGroupName, mediaServicesName, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='mediaServicesName'>
            /// </param>
            /// <param name='mediaService'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static MediaService PutMediaservices(this IAzureMediaServices operations, string subscriptionId, string resourceGroupName, string mediaServicesName, MediaService mediaService, string apiVersion)
            {
                return Task.Factory.StartNew(s => ((IAzureMediaServices)s).PutMediaservicesAsync(subscriptionId, resourceGroupName, mediaServicesName, mediaService, apiVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='mediaServicesName'>
            /// </param>
            /// <param name='mediaService'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MediaService> PutMediaservicesAsync(this IAzureMediaServices operations, string subscriptionId, string resourceGroupName, string mediaServicesName, MediaService mediaService, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutMediaservicesWithHttpMessagesAsync(subscriptionId, resourceGroupName, mediaServicesName, mediaService, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='mediaServicesName'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static void DeleteMediaservices(this IAzureMediaServices operations, string subscriptionId, string resourceGroupName, string mediaServicesName, string apiVersion)
            {
                Task.Factory.StartNew(s => ((IAzureMediaServices)s).DeleteMediaservicesAsync(subscriptionId, resourceGroupName, mediaServicesName, apiVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='mediaServicesName'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMediaservicesAsync(this IAzureMediaServices operations, string subscriptionId, string resourceGroupName, string mediaServicesName, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteMediaservicesWithHttpMessagesAsync(subscriptionId, resourceGroupName, mediaServicesName, apiVersion, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='mediaServicesName'>
            /// </param>
            /// <param name='mediaService'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static MediaService PatchMediaservices(this IAzureMediaServices operations, string subscriptionId, string resourceGroupName, string mediaServicesName, MediaService mediaService, string apiVersion)
            {
                return Task.Factory.StartNew(s => ((IAzureMediaServices)s).PatchMediaservicesAsync(subscriptionId, resourceGroupName, mediaServicesName, mediaService, apiVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='mediaServicesName'>
            /// </param>
            /// <param name='mediaService'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MediaService> PatchMediaservicesAsync(this IAzureMediaServices operations, string subscriptionId, string resourceGroupName, string mediaServicesName, MediaService mediaService, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchMediaservicesWithHttpMessagesAsync(subscriptionId, resourceGroupName, mediaServicesName, mediaService, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='mediaServicesName'>
            /// </param>
            /// <param name='regenerateKeyInput'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static RegenerateKeyOutput MediaservicesRegenerateKey(this IAzureMediaServices operations, string subscriptionId, string resourceGroupName, string mediaServicesName, RegenerateKeyInput regenerateKeyInput, string apiVersion)
            {
                return Task.Factory.StartNew(s => ((IAzureMediaServices)s).MediaservicesRegenerateKeyAsync(subscriptionId, resourceGroupName, mediaServicesName, regenerateKeyInput, apiVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='mediaServicesName'>
            /// </param>
            /// <param name='regenerateKeyInput'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RegenerateKeyOutput> MediaservicesRegenerateKeyAsync(this IAzureMediaServices operations, string subscriptionId, string resourceGroupName, string mediaServicesName, RegenerateKeyInput regenerateKeyInput, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MediaservicesRegenerateKeyWithHttpMessagesAsync(subscriptionId, resourceGroupName, mediaServicesName, regenerateKeyInput, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='mediaServicesName'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static ServiceKeys MediaservicesListKeys(this IAzureMediaServices operations, string subscriptionId, string resourceGroupName, string mediaServicesName, string apiVersion)
            {
                return Task.Factory.StartNew(s => ((IAzureMediaServices)s).MediaservicesListKeysAsync(subscriptionId, resourceGroupName, mediaServicesName, apiVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='mediaServicesName'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceKeys> MediaservicesListKeysAsync(this IAzureMediaServices operations, string subscriptionId, string resourceGroupName, string mediaServicesName, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MediaservicesListKeysWithHttpMessagesAsync(subscriptionId, resourceGroupName, mediaServicesName, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='mediaServicesName'>
            /// </param>
            /// <param name='syncStorageKeysInput'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static MediaService MediaservicesSyncStorageKeys(this IAzureMediaServices operations, string subscriptionId, string resourceGroupName, string mediaServicesName, SyncStorageKeysInput syncStorageKeysInput, string apiVersion)
            {
                return Task.Factory.StartNew(s => ((IAzureMediaServices)s).MediaservicesSyncStorageKeysAsync(subscriptionId, resourceGroupName, mediaServicesName, syncStorageKeysInput, apiVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='resourceGroupName'>
            /// </param>
            /// <param name='mediaServicesName'>
            /// </param>
            /// <param name='syncStorageKeysInput'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MediaService> MediaservicesSyncStorageKeysAsync(this IAzureMediaServices operations, string subscriptionId, string resourceGroupName, string mediaServicesName, SyncStorageKeysInput syncStorageKeysInput, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MediaservicesSyncStorageKeysWithHttpMessagesAsync(subscriptionId, resourceGroupName, mediaServicesName, syncStorageKeysInput, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
