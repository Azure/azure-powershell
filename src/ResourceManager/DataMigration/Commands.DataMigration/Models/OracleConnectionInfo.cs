// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Commands.DataMigration.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Information for connecting to Oracle source
    /// </summary>
    public partial class OracleConnectionInfo : ConnectionInfo
    {
        /// <summary>
        /// Initializes a new instance of the OracleConnectionInfo class.
        /// </summary>
        public OracleConnectionInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OracleConnectionInfo class.
        /// </summary>
        /// <param name="userName">User name</param>
        /// <param name="password">Password credential. It must be RSA
        /// encrypted by the public key of the VM, then base64 encoded. It must
        /// never be the plaintext! Cryptography class contains helper methods
        /// to perform the encryption.
        /// </param>
        /// <param name="serverName">Name of the server</param>
        /// <param name="port">Port for Server</param>
        /// <param name="connectionMode">Connection mode to be used. If
        /// ConnectionString mode is used, then customConnectionString should
        /// be provided, else it should not be set. Possible values include:
        /// 'ConnectionString', 'Standard'</param>
        /// <param name="instance">Instance name (SID)</param>
        /// <param name="customConnectionString">Connection string</param>
        public OracleConnectionInfo(string userName = default(string), string password = default(string), string serverName = default(string), int? port = default(int?), OracleConnectionMode? connectionMode = default(OracleConnectionMode?), string instance = default(string), string customConnectionString = default(string))
            : base(userName, password)
        {
            ServerName = serverName;
            Port = port;
            ConnectionMode = connectionMode;
            Instance = instance;
            CustomConnectionString = customConnectionString;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        public string ServerName { get; set; }

        public int? Port { get; set; }

        public OracleConnectionMode? ConnectionMode { get; set; }

        public string Instance { get; set; }

        public string CustomConnectionString { get; set; }

    }
}
