// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

using Microsoft.Azure.Commands.Common.Authentication.Abstractions;
using Microsoft.Azure.Commands.Sql.Common;
using Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model;
using Microsoft.Azure.Management.Sql.Models;
using System;

namespace Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Services
{
    /// <summary>
    /// The SqlVulnerabilityAssessmentAdapter class is responsible for transforming the data that was received form the endpoints to the cmdlets model of auditing policy and vice versa
    /// </summary>
    public class SqlVulnerabilityAssessmentAdapter
    {
        /// <summary>
        /// Gets or sets the Azure subscription
        /// </summary>
        private IAzureSubscription Subscription { get; set; }

        /// <summary>
        /// The Vulnerability Assessment endpoints communicator used by this adapter
        /// </summary>
        private VulnerabilityAssessmentEndpointsCommunicator VulnerabilityAssessmentCommunicator { get; set; }

        /// <summary>
        /// The Azure endpoints communicator used by this adapter
        /// </summary>
        private AzureEndpointsCommunicator AzureCommunicator { get; set; }

        /// <summary>
        /// Gets or sets the Azure profile
        /// </summary>
        public IAzureContext Context { get; set; }

        public SqlVulnerabilityAssessmentAdapter(IAzureContext context)
        {
            Context = context;
            Subscription = context.Subscription;
            VulnerabilityAssessmentCommunicator = new VulnerabilityAssessmentEndpointsCommunicator(Context);
            AzureCommunicator = new AzureEndpointsCommunicator(Context);
        }

        /// <summary>
        /// Remove the Vulnerability Assessment
        /// </summary>
        public void RemoveDatabaseVulnerabilityAssessmentPolicy(DatabaseVulnerabilityAssessmentPolicyModel model)
        {
            VulnerabilityAssessmentCommunicator.RemoveDatabaseVulnerabilityAssessmentPolicy(model.ResourceGroupName, model.ServerName, model.DatabaseName);
        }

        /// <summary>
        /// Provides a database Vulnerability Assessment policy model for the given database
        /// </summary>
        public DatabaseVulnerabilityAssessmentPolicyModel GetDatabaseVulnerabilityAssessmentPolicy(string resourceGroup, string serverName, string databaseName)
        {
            var vulnerabilityAssessmentPolicy = VulnerabilityAssessmentCommunicator.GetDatabaseVulnerabilityAssessmentPolicy(resourceGroup, serverName, databaseName);

            var databaseVulnerabilityAssessmentPolicyModel = ModelizeVulnerabilityAssessmentPolicy(vulnerabilityAssessmentPolicy, new DatabaseVulnerabilityAssessmentPolicyModel()) as DatabaseVulnerabilityAssessmentPolicyModel;
            databaseVulnerabilityAssessmentPolicyModel.ResourceGroupName = resourceGroup;
            databaseVulnerabilityAssessmentPolicyModel.ServerName = serverName;
            databaseVulnerabilityAssessmentPolicyModel.DatabaseName = databaseName;
            return databaseVulnerabilityAssessmentPolicyModel;
        }

        /// <summary>
        /// Transforms the given model to its endpoints acceptable structure and sends it to the endpoint
        /// </summary>
        public void SetDatabaseVulnerabilityAssessmentPolicy(DatabaseVulnerabilityAssessmentPolicyModel model, string storageEndpointSuffix)
        {
            var policy = PolicizeDatabaseVulnerabilityAssessmentModel(model, storageEndpointSuffix);
            VulnerabilityAssessmentCommunicator.SetDatabaseVulnerabilityAssessmentPolicy(model.ResourceGroupName, model.ServerName, model.DatabaseName, 
                policy);
        }

        /// <summary>
        /// Transforms the given database policy object to its cmdlet model representation
        /// </summary>
        private static DatabaseVulnerabilityAssessmentPolicyModel ModelizeVulnerabilityAssessmentPolicy(DatabaseVulnerabilityAssessment vulnerabilityAssessmentProperties, DatabaseVulnerabilityAssessmentPolicyModel model)
        {  
            return model;
        }

        private static void ModelizeStorageAccount(DatabaseVulnerabilityAssessmentPolicyModel model, string storageEndpoint)
        {
            if (string.IsNullOrEmpty(storageEndpoint))
            {
                model.StorageAccountName = string.Empty;
                return;
            }
            var accountNameStartIndex = storageEndpoint.StartsWith("https://", StringComparison.InvariantCultureIgnoreCase) ? 8 : 7; // https:// or http://
            var accountNameEndIndex = storageEndpoint.IndexOf(".blob", StringComparison.InvariantCultureIgnoreCase);
            model.StorageAccountName = storageEndpoint.Substring(accountNameStartIndex, accountNameEndIndex - accountNameStartIndex);
        }

        /// <summary>
        /// Takes the cmdlets model object and transform it to the policy as expected by the endpoint
        /// </summary>
        private DatabaseVulnerabilityAssessment PolicizeDatabaseVulnerabilityAssessmentModel(DatabaseVulnerabilityAssessmentPolicyModel model, string storageEndpointSuffix)
        {
            var updateParameters = new DatabaseVulnerabilityAssessment();
            var properties = PopulatePolicyProperties(model, storageEndpointSuffix, new DatabaseVulnerabilityAssessment());
            return updateParameters;
        }

        private DatabaseVulnerabilityAssessment PopulatePolicyProperties(DatabaseVulnerabilityAssessmentPolicyModel model, string storageEndpointSuffix, DatabaseVulnerabilityAssessment properties)
        {
            return properties;
        }
    }
}
