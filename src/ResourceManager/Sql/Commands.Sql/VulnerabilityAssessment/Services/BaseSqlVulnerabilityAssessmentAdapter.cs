// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

using Microsoft.Azure.Commands.Common.Authentication.Abstractions;
using Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model;
using Microsoft.Azure.Management.Sql.Models;
using Microsoft.WindowsAzure.Storage.Blob;
using System;
using System.Linq;

namespace Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Services
{
    /// <summary>
    /// The base SqlVulnerabilityAssessmentAdapter class is responsible for transforming the data that was received form the endpoints to the cmdlets model of vulnerability assessment and vice versa
    /// </summary>
    public class BaseSqlVulnerabilityAssessmentAdapter
    {
        /// <summary>
        /// Gets or sets the Azure subscription
        /// </summary>
        protected IAzureSubscription Subscription { get; set; }

        /// <summary>
        /// The Vulnerability Assessment endpoints communicator used by this adapter
        /// </summary>
        protected VulnerabilityAssessmentEndpointsCommunicator VulnerabilityAssessmentCommunicator { get; set; }

        /// <summary>
        /// Gets or sets the Azure profile
        /// </summary>
        public IAzureContext Context { get; set; }

        public BaseSqlVulnerabilityAssessmentAdapter(IAzureContext context)
        {
            Context = context;
            Subscription = context.Subscription;
            VulnerabilityAssessmentCommunicator = new VulnerabilityAssessmentEndpointsCommunicator(Context);
        }

        /// <summary>
        /// Provides a database Vulnerability Assessment settings model for the given database
        /// </summary>
        public DatabaseVulnerabilityAssessmentSettingsModel GetDatabaseVulnerabilityAssessmentSettings(string resourceGroup, string serverName,
            string databaseName)
        {
            var vulnerabilityAssessmentSettings = VulnerabilityAssessmentCommunicator.GetDatabaseVulnerabilityAssessmentSettings(resourceGroup, serverName, databaseName);
          
            return ConvertSettingsToModel(resourceGroup, serverName, databaseName, vulnerabilityAssessmentSettings);
        }

        /// <summary>
        /// Provides a database Vulnerability Assessment settings model for the given database
        /// </summary>
        public DatabaseVulnerabilityAssessmentSettingsModel ConvertSettingsToModel(string resourceGroup, string serverName,
            string databaseName, DatabaseVulnerabilityAssessment settings)
        {
            if (settings.RecurringScans == null)
            {
                // This should never happen
                settings.RecurringScans = new VulnerabilityAssessmentRecurringScansProperties()
                {
                    IsEnabled = false,
                    EmailSubscriptionAdmins = true,
                    Emails = null
                };
            }

            // Getting storage info from StorageContainerPath
            string storageAccountName = string.Empty;
            string storageBlobContainerName = string.Empty;
            if (!string.IsNullOrEmpty(settings.StorageContainerPath))
            {
                string storageAccountNamePart = settings.StorageContainerPath.Split(new string[] { "https://" }, StringSplitOptions.RemoveEmptyEntries)[0];
                if (!string.IsNullOrEmpty(storageAccountNamePart))
                {
                    storageAccountName = storageAccountNamePart.Split(new string[] { "." }, StringSplitOptions.RemoveEmptyEntries)[0];
                }

                CloudBlob cloudBlob = new CloudBlob(new Uri(settings.StorageContainerPath));
                storageBlobContainerName = cloudBlob.Container.Name;
            }

            var databaseVulnerabilityAssessmentSettingsModel = new DatabaseVulnerabilityAssessmentSettingsModel
            {
                ResourceGroupName = resourceGroup,
                ServerName = serverName,
                DatabaseName = databaseName,
                StorageAccountName = storageAccountName,
                ScanResultsContainerName = storageBlobContainerName,
                RecurringScansInterval = settings.RecurringScans.IsEnabled.Value
                    ? RecurringScansInterval.Weekly
                    : RecurringScansInterval.None,
                EmailAdmins = settings.RecurringScans.EmailSubscriptionAdmins.Value,
                NotificationEmail = settings.RecurringScans.Emails?.ToArray()
            };

            return databaseVulnerabilityAssessmentSettingsModel;
        }
    }
}
