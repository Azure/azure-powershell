// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

using Microsoft.Azure.Commands.Common.Authentication;
using Microsoft.Azure.Commands.Common.Authentication.Abstractions;
using Microsoft.Azure.Management.Sql;
using Microsoft.Azure.Management.Sql.Models;
using System.Collections.Generic;

namespace Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Services
{
    /// <summary>
    /// This class is responsible for all the REST communication with the Vulnerability Assessment REST endpoints
    /// </summary>
    public class VulnerabilityAssessmentEndpointsCommunicator
    {
        /// <summary>
        /// The Sql client to be used by this end points communicator
        /// </summary>
        private static SqlManagementClient SqlClient { get; set; }

        /// <summary>
        /// Gets or set the Azure subscription
        /// </summary>
        private static IAzureSubscription Subscription { get; set; }

        /// <summary>
        /// Gets or sets the Azure profile
        /// </summary>
        public IAzureContext Context { get; set; }

        public VulnerabilityAssessmentEndpointsCommunicator(IAzureContext context)
        {
            Context = context;
            if (context.Subscription != Subscription)
            {
                Subscription = context.Subscription;
                SqlClient = null;
            }
        }

        /// <summary>
        /// Gets the database Vulnerability Assessment policy for the given database in the given database server in the given resource group
        /// </summary>
        public DatabaseVulnerabilityAssessment GetDatabaseVulnerabilityAssessmentPolicy(string resourceGroupName, string serverName, string databaseName)
        {
            return GetCurrentSqlClient().DatabaseVulnerabilityAssessments.Get(resourceGroupName, serverName, databaseName);
        }

        /// <summary>
        /// Removes the database Vulnerability Assessment policy for the given database in the given database server in the given resource group
        /// </summary>
        public void RemoveDatabaseVulnerabilityAssessmentPolicy(string resourceGroupName, string serverName, string databaseName)
        {
            GetCurrentSqlClient().DatabaseVulnerabilityAssessments.Delete(resourceGroupName, serverName, databaseName);
        }

        /// <summary>
        /// Calls the set Vulnerability Assessment APIs for the database Vulnerability Assessment policy for the given database in the given database server in the given resource group
        /// </summary>
        public void SetDatabaseVulnerabilityAssessmentPolicy(string resourceGroupName, string serverName, string databaseName, DatabaseVulnerabilityAssessment parameters)
        {
            GetCurrentSqlClient().DatabaseVulnerabilityAssessments.CreateOrUpdate(resourceGroupName, serverName, databaseName, parameters);
        }

        /// <summary>
        /// Gets the database Vulnerability Assessment rule baseline for the given rule in the given database in the given database server in the given resource group
        /// </summary>
        public DatabaseVulnerabilityAssessmentRuleBaseline GetDatabaseVulnerabilityAssessmentRuleBaseline(string resourceGroupName, string serverName,
            string databaseName, string ruleId)
        {
            return GetCurrentSqlClient().DatabaseVulnerabilityAssessmentRuleBaselines.Get(resourceGroupName, serverName, databaseName, ruleId);
        }

        /// <summary>
        /// Removes the database Vulnerability Assessment rule baseline for the given rule in the given database in the given database server in the given resource group
        /// </summary>
        public void RemoveDatabaseVulnerabilityAssessmentRuleBaseline(string resourceGroupName, string serverName, string databaseName, string ruleId)
        {
            GetCurrentSqlClient().DatabaseVulnerabilityAssessmentRuleBaselines.Delete(resourceGroupName, serverName, databaseName, ruleId);
        }

        /// <summary>
        /// Calls the set Vulnerability Assessment APIs for the database Vulnerability Assessment rule baseline for the given rule in the given database in the given database server in the given resource group
        /// </summary>
        public void SetDatabaseVulnerabilityAssessmentRuleBaseline(string resourceGroupName, string serverName, string databaseName, string ruleId,
            DatabaseVulnerabilityAssessmentRuleBaseline parameters)
        {
            GetCurrentSqlClient().DatabaseVulnerabilityAssessmentRuleBaselines.CreateOrUpdate(resourceGroupName, serverName, databaseName, ruleId, 
                parameters);
        }

        /// <summary>
        /// List the Vulnerability Assessment scan records
        /// </summary>
        public List<VulnerabilityAssessmentScanRecord> ListDatabaseVulnerabilityAssessmentScanRecords(string resourceGroupName, string serverName,
            string databaseName)
        {
            return new List<VulnerabilityAssessmentScanRecord>(GetCurrentSqlClient().DatabaseVulnerabilityAssessmentScans.ListByDatabase(resourceGroupName,
                serverName, databaseName));
        }

        /// <summary>
        /// Gets  Vulnerability Assessment scan records
        /// </summary>
        public VulnerabilityAssessmentScanRecord GetDatabaseVulnerabilityAssessmentScanRecord(string resourceGroupName, string serverName,
            string databaseName, string scanId)
        {
            return GetCurrentSqlClient().DatabaseVulnerabilityAssessmentScans.Get(resourceGroupName, serverName, databaseName, scanId);
        }

        /// <summary>
        /// Retrieve the SQL Management client for the currently selected subscription, adding the session and request
        /// id tracing headers for the current cmdlet invocation.
        /// </summary>
        /// <returns>The SQL Management client for the currently selected subscription.</returns>
        private SqlManagementClient GetCurrentSqlClient()
        {
            // Get the SQL management client for the current subscription
            if (SqlClient == null)
            {
                SqlClient = AzureSession.Instance.ClientFactory.CreateArmClient<SqlManagementClient>(Context, AzureEnvironment.Endpoint.ResourceManager);
            }
            return SqlClient;
        }
    }
}
