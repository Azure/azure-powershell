// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

using Microsoft.Azure.Commands.Common.Authentication.Abstractions;
using Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model;
using Microsoft.Azure.Management.Sql.Models;
using System.Collections.Generic;

namespace Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Services
{
    /// <summary>
    /// The SqlVulnerabilityAssessmentRuleBaselineAdapter class is responsible for transforming the data that was received form the endpoints to the cmdlets model of vulnerability assessment baseline and vice versa
    /// </summary>
    public class SqlVulnerabilityAssessmentRuleBaselineAdapter : BaseSqlVulnerabilityAssessmentAdapter
    {
        public SqlVulnerabilityAssessmentRuleBaselineAdapter(IAzureContext context) :base(context)
        {
            Context = context;
            Subscription = context.Subscription;
            VulnerabilityAssessmentCommunicator = new VulnerabilityAssessmentEndpointsCommunicator(Context);
        }

        /// <summary>
        /// Remove the Vulnerability Assessment Rule Baseline
        /// </summary>
        public void ClearDatabaseVulnerabilityAssessmentRuleBaseline(DatabaseVulnerabilityAssessmentRuleBaselineModel model)
        {
            VulnerabilityAssessmentCommunicator.ClearDatabaseVulnerabilityAssessmentRuleBaseline(model.ResourceGroupName, model.ServerName,
                model.DatabaseName, model.RuleId, model.RuleAppliesToMaster);
        }

        /// <summary>
        /// Provides a database Vulnerability Assessment Rule Baseline model for the given database
        /// </summary>
        public DatabaseVulnerabilityAssessmentRuleBaselineModel GetDatabaseVulnerabilityAssessmentRuleBaseline(string resourceGroup, string serverName,
            string databaseName, string ruleId, bool ruleAppliesToMaster)
        {
            var vulnerabilityAssessmentRuleBaseline = VulnerabilityAssessmentCommunicator.GetDatabaseVulnerabilityAssessmentRuleBaseline(resourceGroup,
                serverName, databaseName, ruleId, ruleAppliesToMaster);

            var ruleBaselineModel = new DatabaseVulnerabilityAssessmentRuleBaselineModel()
            {
                ResourceGroupName = resourceGroup,
                ServerName = serverName,
                DatabaseName = databaseName,
                RuleId = ruleId,
                RuleAppliesToMaster = ruleAppliesToMaster
            };

            ruleBaselineModel.BaselineResult = new List<DatabaseVulnerabilityAssessmentRuleBaselineRowModel>();

            foreach (var baselineResult in vulnerabilityAssessmentRuleBaseline.BaselineResults)
            {
                var ruleBaselineItem = new DatabaseVulnerabilityAssessmentRuleBaselineRowModel()
                {
                    Result = baselineResult.Result
                };

                ruleBaselineModel.BaselineResult.Add(ruleBaselineItem);
            }

            return ruleBaselineModel;
        }

        /// <summary>
        /// Transforms the given model to its endpoints acceptable structure and sends it to the endpoint
        /// </summary>
        public void SetDatabaseVulnerabilityAssessmentRuleBaseline(DatabaseVulnerabilityAssessmentRuleBaselineModel model)
        {
            var ruleBaseline = new DatabaseVulnerabilityAssessmentRuleBaseline()
            {
                BaselineResults = new List<DatabaseVulnerabilityAssessmentRuleBaselineItem>()
            };

            foreach (var baselineResult in model.BaselineResult)
            {
                var ruleBaselineItem = new DatabaseVulnerabilityAssessmentRuleBaselineItem()
                {
                    Result = baselineResult.Result
                };

                ruleBaseline.BaselineResults.Add(ruleBaselineItem);
            }

            VulnerabilityAssessmentCommunicator.SetDatabaseVulnerabilityAssessmentRuleBaseline(model.ResourceGroupName, model.ServerName,
                model.DatabaseName, model.RuleId, model.RuleAppliesToMaster, ruleBaseline);
        }
    }
}
