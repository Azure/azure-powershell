// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

using Microsoft.Azure.Commands.Common.Authentication.Abstractions;
using Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model;
using Microsoft.Azure.Management.Sql.Models;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Services
{
    /// <summary>
    /// The SqlVulnerabilityAssessmentScanAdapter class is responsible for transforming the data that was received form the endpoints to the cmdlets model of vulnerability assessment scan and vice versa
    /// </summary>
    public class SqlVulnerabilityAssessmentScanAdapter : BaseSqlVulnerabilityAssessmentAdapter
    {
        public SqlVulnerabilityAssessmentScanAdapter(IAzureContext context) : base(context)
        {
            Context = context;
            Subscription = context.Subscription;
            VulnerabilityAssessmentCommunicator = new VulnerabilityAssessmentEndpointsCommunicator(Context);
        }

        /// <summary>
        /// List the Vulnerability Assessment scan records
        /// </summary>
        public List<DatabaseVulnerabilityAssessmentScanRecordModel> ListDatabaseVulnerabilityAssessmentScanRecords(string resourceGroup, string serverName,
            string databaseName)
        {
            return VulnerabilityAssessmentCommunicator.ListDatabaseVulnerabilityAssessmentScanRecords(resourceGroup, serverName, databaseName)
                .Select(scanRecord => ConvertDatabaseVulnerabilityAssessmentScanRecord(resourceGroup, serverName, databaseName, scanRecord)).ToList();
        }

        /// <summary>
        /// Get a the Vulnerability Assessment scan record
        /// </summary>
        public DatabaseVulnerabilityAssessmentScanRecordModel GetDatabaseVulnerabilityAssessmentScanRecord(string resourceGroup, string serverName,
            string databaseName, string scanId)
        {
            DatabaseVulnerabilityAssessmentScanRecordModel model = ConvertDatabaseVulnerabilityAssessmentScanRecord(resourceGroup, serverName, databaseName,
                VulnerabilityAssessmentCommunicator.GetDatabaseVulnerabilityAssessmentScanRecord(resourceGroup, serverName, databaseName, scanId));
            return model;
        }

        /// <summary>
        /// Convert a the Vulnerability Assessment scan
        /// </summary>
        public DatabaseVulnerabilityAssessmentScanExportModel ConvertDatabaseVulnerabilityAssessmentScan(string resourceGroup, string serverName,
            string databaseName, string scanId)
        {
            var vulnerabilityAssessmentExportResponse = VulnerabilityAssessmentCommunicator.ConvertDatabaseVulnerabilityAssessmentScan(resourceGroup,
                serverName, databaseName, scanId);

            return new DatabaseVulnerabilityAssessmentScanExportModel()
            {
                ResourceGroupName = resourceGroup,
                ServerName = serverName,
                DatabaseName = databaseName,
                ExportedReportLocation = vulnerabilityAssessmentExportResponse.ExportedReportLocation,
                ScanId = scanId
            };
        }

        /// <summary>
        /// Run a new Vulnerability Assessment scan
        /// </summary>
        public void StartDatabaseVulnerabilityAssessmentScan(string resourceGroup, string serverName,
            string databaseName, string scanId)
        {
            VulnerabilityAssessmentCommunicator.TriggerDatabaseVulnerabilityAssessmentScan(resourceGroup, serverName, databaseName, scanId);
        }

        /// <summary>
        /// Convert <see cref="VulnerabilityAssessmentScanRecord"/> to <see cref="DatabaseVulnerabilityAssessmentScanRecordModel"/> 
        /// </summary>
        private DatabaseVulnerabilityAssessmentScanRecordModel ConvertDatabaseVulnerabilityAssessmentScanRecord(string resourceGroup, string serverName,
            string databaseName, VulnerabilityAssessmentScanRecord scanRecord)
        {
            TriggerType scanTriggerType;
            Enum.TryParse(scanRecord.TriggerType, true, out scanTriggerType);

            return new DatabaseVulnerabilityAssessmentScanRecordModel()
            {
                ResourceGroupName = resourceGroup,
                ServerName = serverName,
                DatabaseName = databaseName,
                ScanId = scanRecord.ScanId,
                TriggerType = scanTriggerType,
                State = scanRecord.State,
                StartTime = scanRecord.StartTime,
                EndTime = scanRecord.EndTime,
                Errors = scanRecord.Errors?.Select(scanError =>
                  new DatabaseVulnerabilityAssessmentScanErrorModel()
                  {
                      Code = scanError.Code,
                      Message = scanError.Message
                  }).ToList(),
                ScanResultsLocationPath = scanRecord.StorageContainerPath,
                NumberOfFailedSecurityChecks = scanRecord.NumberOfFailedSecurityChecks
            };
        }
    }
}
