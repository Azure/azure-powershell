// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

using System;
using System.Linq;
using Microsoft.Azure.Commands.Sql.Services;
using Microsoft.WindowsAzure.Commands.Common.Attributes;

namespace Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model
{
    /// <summary>
    /// The possible intervals of recurring scans
    /// </summary> 
    public enum RecurringScansInterval
    {
        None,
        Weekly
    };

    /// <summary>
    /// A class representing a database Vulnerability Assessment
    /// </summary>
    public class DatabaseVulnerabilityAssessmentSettingsModel
    {
        /// <summary>
        /// Gets or sets the resource group
        /// </summary>
        public string ResourceGroupName { get; set; }

        /// <summary>
        /// Gets or sets the server name
        /// </summary>
        public string ServerName { get; set; }

        /// <summary>
        /// Gets or sets the database name
        /// </summary>
        public string DatabaseName { get; set; }

        /// <summary>
        /// Gets or sets the storage account name
        /// </summary>
        [Ps1Xml(Label = "Storage Account Name", Target = ViewControl.Table)]
        public string StorageAccountName { get; internal set; }

        /// <summary>
        /// Gets or sets the blob container name that holds the scan results
        /// </summary>
        [Ps1Xml(Label = "Scan Results Container Name", Target = ViewControl.Table)]
        public string ScanResultsContainerName { get; internal set; }

        /// <summary>
        /// Gets or sets the recurring scans interval.
        /// </summary>
        /// <remarks>
        /// Enabling scan your database for vulnerabilities on a weekly basis will result in a scan each 7 days.
        /// The first scan will be performed immediately. Subsequent scans will be performed every Sunday at approximately 12:00 AM UTC
        /// </remarks>
        [Ps1Xml(Label = "Recurring Scans Interval", Target = ViewControl.Table)]
        public RecurringScansInterval RecurringScansInterval { get; internal set; }

        /// <summary>
        /// Gets or sets a value indicating whether to email service and co-administrators on recurring scan completion.
        /// </summary>
        [Ps1Xml(Label = "Email Admins", Target = ViewControl.Table)]
        public bool EmailAdmins { get; internal set; }

        /// <summary>
        /// Gets or sets a list of mail addresses to send on recurring scan completion.
        /// </summary>
        [Ps1Xml(Label = "Notification Emails", Target = ViewControl.Table)]
        public string[] NotificationEmail { get; internal set; }

        /// <summary>
        /// Preforms validity checks
        /// </summary>
        public void ValidateContent()
        {
            if (RecurringScansInterval != RecurringScansInterval.None)
            {
                NotificationEmail = NotificationEmail.Where(email => !string.IsNullOrEmpty(email)).ToArray();

                // Validity checks:
                // 1. Check that EmailAddresses are in correct format 
                bool areEmailAddressesInCorrectFormat = Util.AreEmailAddressesInCorrectFormat(NotificationEmail);
                if (!areEmailAddressesInCorrectFormat)
                {
                    throw new Exception(Properties.Resources.EmailsAreNotValid);
                }

                // 2. check that EmailAdmins is not False and NotificationEmail is not empty
                if (!EmailAdmins && (NotificationEmail == null || !NotificationEmail.Any()))
                {
                    throw new Exception(Properties.Resources.NeedToProvideEmail);
                }
            }
        }
    }
}
