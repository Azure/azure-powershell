// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

using Microsoft.Azure.Commands.ResourceManager.Common.ArgumentCompleters;
using Microsoft.Azure.Commands.Sql.AdvancedThreatProtection.Services;
using Microsoft.Azure.Commands.Sql.Common;
using Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model;
using Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Services;
using Microsoft.Azure.Management.Internal.Resources.Utilities.Models;
using System;
using System.Management.Automation;

namespace Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Cmdlet
{
    /// <summary>
    /// The base class for set policy Azure Sql Database Vulnerability Assessment Management Cmdlet
    /// </summary>
    public abstract class SqlDatabaseVulnerabilityAssessmentAtpCmdletBase<M, A> : AzureSqlDatabaseCmdletBase<M, A> where A: BaseSqlVulnerabilityAssessmentAdapter
    {
        protected const string UseExplicitArgumentsParameterSet = "UseExplicitArgumentsParameterSet";

        /// <summary>
        /// Gets or sets the name of the resource group to use.
        /// </summary>
        [Parameter(ParameterSetName = UseExplicitArgumentsParameterSet,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            Position = 0,
            HelpMessage = "The name of the resource group.")]
        [ResourceGroupCompleter]
        [ValidateNotNullOrEmpty]
        public override string ResourceGroupName { get; set; }

        /// <summary>
        /// Gets or sets the name of the database server to use.
        /// </summary>
        [Parameter(ParameterSetName = UseExplicitArgumentsParameterSet,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            Position = 1,
            HelpMessage = "SQL Database server name.")]
        [ValidateNotNullOrEmpty]
        public override string ServerName { get; set; }

        /// <summary>
        /// Gets or sets the name of the database to use.
        /// </summary>
        [Parameter(ParameterSetName = UseExplicitArgumentsParameterSet,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            Position = 2,
            HelpMessage = "SQL Database name.")]
        [ValidateNotNullOrEmpty]
        public override string DatabaseName { get; set; }

        /// <summary>
        /// Returns a settings model from settings resource ID
        /// </summary>
        /// <param name="settingsResourceId">The settings resource ID</param>
        /// <returns>A scan record model from settings resource ID</returns>
        protected DatabaseVulnerabilityAssessmentSettingsModel GetSettingsModelFromResourceId(string settingsResourceId)
        {
            var resourceInfo = new ResourceIdentifier(settingsResourceId);
            string resourceGroupName = resourceInfo.ResourceGroupName;

            var databaseResourceInfo = new ResourceIdentifier(resourceInfo.ParentResource);
            string databaseName = databaseResourceInfo.ResourceName;

            var serverResourceInfo = new ResourceIdentifier(databaseResourceInfo.ParentResource);
            string serverName = serverResourceInfo.ResourceName;

            return new DatabaseVulnerabilityAssessmentSettingsModel()
            {
                ResourceGroupName = resourceGroupName,
                ServerName = serverName,
                DatabaseName = databaseName
            };
        }

        protected override M ApplyUserInputToModel(M model)
        {
            base.ApplyUserInputToModel(model);

            // Verify that ATP is ON - if ATP is off the GetServerAdvancedThreatProtectionPolicy() will throw a not found exception
            var sqlAdvancedThreatProtectionAdapter = new SqlAdvancedThreatProtectionAdapter(DefaultProfile.DefaultContext);
            var atpPolicy = sqlAdvancedThreatProtectionAdapter.GetServerAdvancedThreatProtectionPolicy(ResourceGroupName, ServerName);
            if (!atpPolicy.IsEnabled)
            {
                throw new Exception(Properties.Resources.ServerAdvancedThreatProtectionIsNotDefined);
            }

            return model;
        }
    }
}
