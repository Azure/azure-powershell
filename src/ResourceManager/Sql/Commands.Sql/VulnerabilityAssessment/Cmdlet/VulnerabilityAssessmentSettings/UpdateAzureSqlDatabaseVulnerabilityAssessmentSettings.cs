// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

using Microsoft.Azure.Commands.Common.Authentication.Abstractions;
using Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Cmdlet;
using Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model;
using Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Services;
using System;
using System.Management.Automation;
using static Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Services.VulnerabilityAssessmentEndpointsCommunicator;

namespace Microsoft.Azure.Commands.Sql.VulnerabilityAssessmentSettings.Cmdlet
{
    /// <summary>
    /// Updates the Vulnerability Assessment settings properties for a specific database.
    /// </summary>
    [Cmdlet("Update", ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "SqlDatabaseVulnerabilityAssessmentSettings", SupportsShouldProcess = true, DefaultParameterSetName = UpdateSettingsWithStorageAccountNameParameterSet),OutputType(typeof(DatabaseVulnerabilityAssessmentSettingsModel))]
    public class UpdateAzureSqlDatabaseVulnerabilityAssessmentSettings : SqlDatabaseVulnerabilityAssessmentAtpCmdletBase<DatabaseVulnerabilityAssessmentSettingsModel, SqlVulnerabilityAssessmentAdapter>
    {
        /// <summary>
        /// The default scan results blob container name
        /// </summary>
        const string DefaultScanResultsContainerName = "vulnerability-assessment";

        /// <summary>
        /// Parameter set name for UpdateSettingsWithStorageAccountNameParameterSet mode
        /// </summary>
        /// <remarks>
        /// On "UpdateSettingsWithStorageAccountNameParameterSet" mode, the customer will need to provide a storage name and the cmdlet will create a blob container and a SAS key
        /// and will send them to the backend.
        /// </remarks>
        private const string UpdateSettingsWithStorageAccountNameParameterSet = "UpdateSettingsWithStorageAccountNameParameterSet";

        /// <summary>
        /// Parameter set name for UpdateSettingsWithBlobStorageSasUri mode
        /// </summary>
        /// <remarks>
        /// On "UpdateSettingsWithBlobStorageSasUri" mode, the customer will need to provide a SAS URI to a storage container that will hold the scan results.
        /// </remarks>
        private const string UpdateSettingsWithBlobStorageSasUri = "UpdateSettingsWithBlobStorageSasUri";

        protected const string UpdateByInputObjectParameterSet = "UpdateByInputObjectParameterSet";

        /// <summary>
        /// Vulnerability Assessment settings object to set
        /// </summary>
        [Parameter(ParameterSetName = UpdateByInputObjectParameterSet,
            Mandatory = true,
            ValueFromPipeline = true,
            HelpMessage = "The Vulnerability Assessment settings object to set")]
        [ValidateNotNullOrEmpty]
        public DatabaseVulnerabilityAssessmentSettingsModel InputObject { get; set; }

        #region "UpdateSettingsWithStorageAccountNameParameterSet" parameter set

        /// <summary>
        /// Gets or sets the name of the storage that will hold the scan results.
        /// </summary>
        [Parameter(Mandatory = false,
            ParameterSetName = UpdateSettingsWithStorageAccountNameParameterSet,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The name of the storage account that will hold the scan results.")]
        [ValidateNotNullOrEmpty]
        public string StorageAccountName { get; set; }

        /// <summary>
        /// Gets or sets the name of the name of the storage container that will hold the scan results.
        /// </summary>
        [Parameter(Mandatory = false,
            ParameterSetName = UpdateSettingsWithStorageAccountNameParameterSet,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The name of the storage container that will hold the scan results.")]
        [ValidateNotNullOrEmpty]
        public string ScanResultsContainerName { get; set; }

        #endregion

        #region "UpdateSettingsWithBlobStorageSasUri" parameter set

        /// <summary>
        /// Gets or sets a SAS URI to a storage container that will hold the scan results.
        /// </summary>
        [Parameter(Mandatory = true,
            ParameterSetName = UpdateSettingsWithBlobStorageSasUri,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "A SAS URI to a storage container that will hold the scan results.")]
        [ValidateNotNullOrEmpty]
        public Uri BlobStorageSasUri { get; set; }

        #endregion

        /// <summary>
        /// Gets or sets the recurring scans interval.
        /// </summary>
        /// <remarks>
        /// Enabling scan your database for vulnerabilities on a weekly basis will result in a scan each 7 days.
        /// The first scan will be performed immediately. Subsequent scans will be performed every Sunday at approximately 12:00 AM UTC
        /// </remarks>
        [Parameter(Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The recurring scans interval.")]
        [ValidateNotNullOrEmpty]
        public RecurringScansInterval RecurringScansInterval { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to email service and co-administrators on recurring scan completion.
        /// </summary>
        [Parameter(Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "A value indicating whether to email service and co-administrators on recurring scan completion.")]
        [ValidateNotNullOrEmpty]
        public bool EmailAdmins { get; set; }

        /// <summary>
        /// Gets or sets a list of mail addresses to send on recurring scan completion.
        /// </summary>
        [Parameter(Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "A list of mail addresses to send on recurring scan completion.")]
        public string[] NotificationEmail { get; set; }

        /// <summary>
        /// Updates the given model element with the cmdlet specific operation 
        /// </summary>
        /// <param name="model">A model object</param>
        protected override DatabaseVulnerabilityAssessmentSettingsModel ApplyUserInputToModel(DatabaseVulnerabilityAssessmentSettingsModel model)
        {
            base.ApplyUserInputToModel(model);

            if (string.Equals(this.ParameterSetName, UpdateByInputObjectParameterSet, StringComparison.OrdinalIgnoreCase))
            {
                model.StorageAccountName = InputObject.StorageAccountName;
                if (string.IsNullOrEmpty(model.StorageAccountName))
                {
                    throw new Exception(Properties.Resources.NoStorageAccountSpecified);
                }

                model.ScanResultsContainerName = InputObject.ScanResultsContainerName;
                if (string.IsNullOrEmpty(model.ScanResultsContainerName))
                {
                    // Set default value of "vulnerability-assessment"
                    model.ScanResultsContainerName = DefaultScanResultsContainerName;
                }

                model.RecurringScansInterval = InputObject.RecurringScansInterval;
                model.EmailAdmins = InputObject.EmailAdmins;
                model.NotificationEmail = InputObject.NotificationEmail;

                model.ValidateContent();

                return model;
            }

            if (string.Equals(this.ParameterSetName, UpdateSettingsWithBlobStorageSasUri, StringComparison.OrdinalIgnoreCase))
            {
                var storageContainerArgs = BlobStorageSasUri.AbsoluteUri.ToString().Split('?');
                if (storageContainerArgs.Length < 2)
                {
                    throw new Exception(Properties.Resources.InvalidBlobStorageSasUri);
                }
            }
            else if (string.Equals(this.ParameterSetName, UpdateSettingsWithStorageAccountNameParameterSet, StringComparison.OrdinalIgnoreCase))
            {
                if (MyInvocation.BoundParameters.ContainsKey(nameof(StorageAccountName)))
                {
                    model.StorageAccountName = StorageAccountName;
                }

                if (string.IsNullOrEmpty(model.StorageAccountName))
                {
                    throw new Exception(Properties.Resources.NoStorageAccountSpecified);
                }

                if (MyInvocation.BoundParameters.ContainsKey(nameof(ScanResultsContainerName)))
                {
                    model.ScanResultsContainerName = ScanResultsContainerName;
                }

                if (string.IsNullOrEmpty(model.ScanResultsContainerName))
                {
                    // Set default value of "vulnerability-assessment"
                    model.ScanResultsContainerName = DefaultScanResultsContainerName;
                }
            }

            if (MyInvocation.BoundParameters.ContainsKey(nameof(NotificationEmail)))
            {
                model.NotificationEmail = NotificationEmail;
            }

            if (MyInvocation.BoundParameters.ContainsKey(nameof(RecurringScansInterval)))
            {
                model.RecurringScansInterval = RecurringScansInterval;
            }

            if (MyInvocation.BoundParameters.ContainsKey(nameof(EmailAdmins)))
            {
                model.EmailAdmins = EmailAdmins;
            }

            if (MyInvocation.BoundParameters.ContainsKey(nameof(NotificationEmail)))
            {
                model.NotificationEmail = NotificationEmail;
            }

            model.ValidateContent();

            return model;
        }

        /// <summary>
        /// This method is responsible to call the right API in the communication layer that will eventually send the information in the 
        /// object to the REST endpoint
        /// </summary>
        /// <param name="model">The model object with the data to be sent to the REST endpoints</param>
        protected override DatabaseVulnerabilityAssessmentSettingsModel PersistChanges(DatabaseVulnerabilityAssessmentSettingsModel model)
        {
            string storageContainerPath = "";
            string storageAccountSasKey = "";

            if (ParameterSetName == UpdateSettingsWithBlobStorageSasUri)
            {
                // In this case the user provided a full BlobStorageSasUri (e.g. "https://mystorage.blob.core.windows.net/vulnerability-assessment?st=XXXXXX" )
                var storageContainerArgs = BlobStorageSasUri.AbsoluteUri.ToString().Split('?');

                storageContainerPath = storageContainerArgs[0];
                storageAccountSasKey = storageContainerArgs[1];
            }
            else 
            {
                // SetSettingsWithStorageAccountNameParameterSet and SetByInputObjectParameterSet
                StorageContainerInfo storageContainerInfo = ModelAdapter.CreateBlobStorageContainerAndSAS(model.StorageAccountName,
                    model.ScanResultsContainerName);

                storageContainerPath = storageContainerInfo.StorageContainerPath;
                storageAccountSasKey = storageContainerInfo.StorageAccountSasKey;
            }

            return ModelAdapter.SetDatabaseVulnerabilityAssessmentSettings(model, storageContainerPath, storageAccountSasKey);
        }

        /// <summary>
        /// Provides the model element that this cmdlet operates on
        /// </summary>
        /// <returns>A model object</returns>
        protected override DatabaseVulnerabilityAssessmentSettingsModel GetEntity()
        {
            return ModelAdapter.GetDatabaseVulnerabilityAssessmentSettings(ResourceGroupName, ServerName, DatabaseName);
        }

        /// <summary>
        /// Creation and initialization of the ModelAdapter object
        /// </summary>
        /// <param name="subscription">The AzureSubscription in which the current execution is performed</param>
        /// <returns>An initialized and ready to use ModelAdapter object</returns>
        protected override SqlVulnerabilityAssessmentAdapter InitModelAdapter(IAzureSubscription subscription)
        {
            return new SqlVulnerabilityAssessmentAdapter(DefaultProfile.DefaultContext);
        }
    }
}
