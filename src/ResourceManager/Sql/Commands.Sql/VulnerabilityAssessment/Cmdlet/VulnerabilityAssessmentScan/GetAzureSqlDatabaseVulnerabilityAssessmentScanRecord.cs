// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

using Microsoft.Azure.Commands.Sql.Database.Model;
using Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model;
using System;
using System.Collections.Generic;
using System.Management.Automation;

namespace Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Cmdlet.VulnerabilityAssessmentScan
{
    /// <summary>
    /// Returns the Vulnerability Assessment scan record of a specific database.
    /// </summary>
    [Cmdlet("Get", ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "SqlDatabaseVulnerabilityAssessmentScanRecord"),OutputType(typeof(DatabaseVulnerabilityAssessmentScanRecordModel))]
    public class GetAzureSqlDatabaseVulnerabilityAssessmentScanRecord : SqlDatabaseVulnerabilityAssessmentScanCmdletBase<IEnumerable<DatabaseVulnerabilityAssessmentScanRecordModel>>
    {
        protected const string GetByParentResourceParameterSet = "GetByResourceIdParameterSet";

        /// <summary>
        /// Database resource
        /// </summary>
        [Parameter(ParameterSetName = GetByParentResourceParameterSet,
            Mandatory = false,
            ValueFromPipeline = true,
            HelpMessage = "The database object to get Vulnerability Assessment scan record for ")]
        [ValidateNotNullOrEmpty]
        public AzureSqlDatabaseModel InputObject { get; set; }

        /// <summary>
        /// Get the entities from the service
        /// </summary>
        /// <returns>The list of entities</returns>
        protected override IEnumerable<DatabaseVulnerabilityAssessmentScanRecordModel> GetEntity()
        {
            ICollection<DatabaseVulnerabilityAssessmentScanRecordModel> results;

            string resourceGroupName = ResourceGroupName;
            string serverName = ServerName;
            string databaseName = DatabaseName;
            bool getScanRecordBySpecificScanId = MyInvocation.BoundParameters.ContainsKey(nameof(ScanId));
            string scanId = ScanId;

            if (string.Equals(this.ParameterSetName, GetByParentResourceParameterSet, StringComparison.OrdinalIgnoreCase))
            {
                resourceGroupName = InputObject. ResourceGroupName;
                serverName = InputObject.ServerName;
                databaseName = InputObject.DatabaseName;
            }

            if (getScanRecordBySpecificScanId)
            {
                results = new List<DatabaseVulnerabilityAssessmentScanRecordModel>
                {
                    ModelAdapter.GetDatabaseVulnerabilityAssessmentScanRecord(resourceGroupName, serverName, databaseName, scanId)
                };
            }
            else
            {
                results = ModelAdapter.ListDatabaseVulnerabilityAssessmentScanRecords(resourceGroupName, serverName, databaseName);
            }

            return results;
        }

        /// <summary>
        /// No sending is needed as this is a Get cmdlet
        /// </summary>
        /// <param name="model">The model object with the data to be sent to the REST endpoints</param>
        protected override IEnumerable<DatabaseVulnerabilityAssessmentScanRecordModel> PersistChanges(IEnumerable<DatabaseVulnerabilityAssessmentScanRecordModel> model)
        {
            return model;
        }
    }
}
