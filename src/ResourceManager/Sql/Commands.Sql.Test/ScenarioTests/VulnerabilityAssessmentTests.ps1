# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.SYNOPSIS
Tests that we get an "ATP is not ON" error for all vulnerability assessment cmdlets 
#>
function Test-VulnerabilityAssessmentWithAtpOffTest
{
	# Setup
	$testSuffix = getAssetName
	Create-VulnerabilityAssessmentTestEnvironment $testSuffix
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix

	try
	{
		$atpOffErrorMessage = "Server Advanced Threat Protection is not defined. Please run Set-AzureRmSqlServerAdvancedThreatProtectionPolicy first."
		$ruleId = "VA2031"
		$scanId = "myCustomScanId"
		$baselineResults = @(@("userA", "SELECT"),@("userB", "SELECT"))

		# Turn on ATP
		Set-AzureSqlServerAdvancedThreatProtection -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName

		# Baseline related cmdlets
		Assert-ThrowsContains -script { Set-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId -BaselineResults $baselineResults } -message $atpOffErrorMessage

		Assert-ThrowsContains -script { Get-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId } -message $atpOffErrorMessage

		Assert-ThrowsContains -script { Remove-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId } -message $atpOffErrorMessage

		# Scan related cmdlets
		Assert-ThrowsContains -script { Export-AzureRmSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -ScanId $scanId } -message $atpOffErrorMessage

		Assert-ThrowsContains -script { Get-AzureRmSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName } -message $atpOffErrorMessage

		Assert-ThrowsContains -script { Get-AzureRmSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -ScanId $scanId } -message $atpOffErrorMessage

		Assert-ThrowsContains -script { New-AzureRmSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -ScanId $scanId } -message $atpOffErrorMessage
	}
	finally
	{
		# Cleanup
		Remove-VulnerabilityAssessmentTestEnvironment $testSuffix
	}
}

<#
.SYNOPSIS
Tests that we get a "Vulnerability Assessment policy not defined" error for all vulnerability assessment cmdlets 
#>
function Test-VulnerabilityAssessmentWithPolicyNotDefinedTest
{
	# Setup
	$testSuffix = getAssetName
	Create-VulnerabilityAssessmentTestEnvironment $testSuffix
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix

	try
	{
		$vaSeetingsAreOffErrorMessage = "Vulnerability assessment policy is not defined. Please run Set-AzureRmSqlDatabaseVulnerabilityAssessmentPolicy first."
		$ruleId = "VA2031"
		$scanId = "myCustomScanId"
		$baselineResults = @(@("userA", "SELECT"),@("userB", "SELECT"))

		# Policy related cmdlets
		Assert-ThrowsContains -script { Set-AzureRmSqlDatabaseVulnerabilityAssessmentPolicy -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName } -message $vaSeetingsAreOffErrorMessage

		Assert-ThrowsContains -script { Get-AzureRmSqlDatabaseVulnerabilityAssessmentPolicy -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName } -message $vaSeetingsAreOffErrorMessage

		Assert-ThrowsContains -script { Remove-AzureRmSqlDatabaseVulnerabilityAssessmentPolicy -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName } -message $vaSeetingsAreOffErrorMessage

		# Baseline related cmdlets
		Assert-ThrowsContains -script { Set-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId -BaselineResults $baselineResults } -message $vaSeetingsAreOffErrorMessage

		Assert-ThrowsContains -script { Get-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId } -message $vaSeetingsAreOffErrorMessage

		Assert-ThrowsContains -script { Remove-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId } -message $vaSeetingsAreOffErrorMessage

		# Scan related cmdlets
		Assert-ThrowsContains -script { Export-AzureRmSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -ScanId $scanId } -message $vaSeetingsAreOffErrorMessage

		Assert-ThrowsContains -script { Get-AzureRmSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName } -message $vaSeetingsAreOffErrorMessage

		Assert-ThrowsContains -script { Get-AzureRmSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -ScanId $scanId } -message $vaSeetingsAreOffErrorMessage

		Assert-ThrowsContains -script { New-AzureRmSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -ScanId $scanId } -message $vaSeetingsAreOffErrorMessage
	}
	finally
	{
		# Cleanup
		Remove-VulnerabilityAssessmentTestEnvironment $testSuffix
	}
}


<#
.SYNOPSIS
Creates the test environment needed to perform the tests
#>
function Create-VulnerabilityAssessmentTestEnvironment ($testSuffix, $location = "West Central US", $serverVersion = "12.0")
{
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix
	Create-TestEnvironmentWithParams $params $location $serverVersion
}

<#
.SYNOPSIS
Gets the values of the parameters used at the tests
#>
function Get-SqlVulnerabilityAssessmentTestEnvironmentParameters ($testSuffix)
{
	return @{ rgname = "sql-va-cmdlet-test-rg" +$testSuffix;
			  serverName = "sql-va-cmdlet-server" +$testSuffix;
			  databaseName = "sql-va-cmdlet-db" + $testSuffix;
			  storageAccount = "sqlvacmdlets" +$testSuffix
		}
}

<#
.SYNOPSIS
Removes the test environment that was needed to perform the tests
#>
function Remove-VulnerabilityAssessmentTestEnvironment ($testSuffix)
{
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix
	Remove-AzureRmResourceGroup -Name $params.rgname -Force
}