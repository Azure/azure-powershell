# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.SYNOPSIS
Tests that we get an "ATP is not ON" error for all vulnerability assessment cmdlets 
#>
function Test-VulnerabilityAssessmentWithAtpOffTest
{
	# Setup
	$testSuffix = getAssetName
	Create-VulnerabilityAssessmentTestEnvironment $testSuffix
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix

	try
	{
		$atpOffErrorMessage = "Server Advanced Threat Protection is not defined. Please run Set-AzureRmSqlServerAdvancedThreatProtectionPolicy first."
		$ruleId = "VA2031"
		$scanId = "myCustomScanId"
		$baselineResults = @(@("userA", "SELECT"),@("userB", "SELECT"))

		# Policy related cmdlets
		Assert-ThrowsContains -script { Set-AzureRmSqlDatabaseVulnerabilityAssessmentSettings -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -StorageAccountName $params.storageAccount } -message $atpOffErrorMessage

		Assert-ThrowsContains -script { Get-AzureRmSqlDatabaseVulnerabilityAssessmentSettings -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName } -message $atpOffErrorMessage

		Assert-ThrowsContains -script { Clear-AzureRmSqlDatabaseVulnerabilityAssessmentSettings -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName } -message $atpOffErrorMessage

		# Baseline related cmdlets
		Assert-ThrowsContains -script { Set-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId -BaselineResult $baselineResults } -message $atpOffErrorMessage

		Assert-ThrowsContains -script { Get-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId } -message $atpOffErrorMessage

		Assert-ThrowsContains -script { Clear-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId } -message $atpOffErrorMessage

		# Scan related cmdlets
		Assert-ThrowsContains -script { Convert-AzureRmSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -ScanId $scanId } -message $atpOffErrorMessage

		Assert-ThrowsContains -script { Get-AzureRmSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName } -message $atpOffErrorMessage

		Assert-ThrowsContains -script { Get-AzureRmSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -ScanId $scanId } -message $atpOffErrorMessage

		Assert-ThrowsContains -script { Start-AzureRmSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -ScanId $scanId } -message $atpOffErrorMessage
	}
	finally
	{
		# Cleanup
		Remove-VulnerabilityAssessmentTestEnvironment $testSuffix
	}
}

<#
.SYNOPSIS
Tests that we get a "Vulnerability Assessment settings not defined" error for all vulnerability assessment cmdlets 
#>
function Test-VulnerabilityAssessmentWithSettingsNotDefinedTest
{
	# Setup
	$testSuffix = getAssetName
	Create-VulnerabilityAssessmentTestEnvironment $testSuffix
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix

	try
	{
		$vaSettingsAreOffErrorMessage = "Vulnerability assessment policy is not defined. Please run Set-AzureRmSqlDatabaseVulnerabilityAssessmentSettings first."
		$ruleId = "VA2031"
		$scanId = "myCustomScanId"
		$baselineResults = @(@("userA", "SELECT"),@("userB", "SELECT"))
		
		# Turn on ATP
		Set-AzureRmSqlServerThreatDetectionPolicy -ResourceGroupName $params.rgname -ServerName $params.serverName -NotificationRecipientsEmails "koko@mailTest.com;koko1@mailTest.com" -EmailAdmins $false -ExcludedDetectionType Sql_Injection_Vulnerability -StorageAccountName $params.storageAccount

		# Baseline related cmdlets
		Assert-ThrowsContains -script { Set-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId -BaselineResult $baselineResults } -message $vaSettingsAreOffErrorMessage

		Assert-ThrowsContains -script { Get-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId } -message $vaSettingsAreOffErrorMessage

		Assert-ThrowsContains -script { Clear-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId } -message $vaSettingsAreOffErrorMessage

		# Scan related cmdlets
		Assert-ThrowsContains -script { Convert-AzureRmSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -ScanId $scanId } -message $vaSettingsAreOffErrorMessage

		Assert-ThrowsContains -script { Get-AzureRmSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName } -message $vaSettingsAreOffErrorMessage

		Assert-ThrowsContains -script { Get-AzureRmSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -ScanId $scanId } -message $vaSettingsAreOffErrorMessage

		Assert-ThrowsContains -script { Start-AzureRmSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -ScanId $scanId } -message $vaSettingsAreOffErrorMessage
	}
	finally
	{
		# Cleanup
		Remove-VulnerabilityAssessmentTestEnvironment $testSuffix
	}
}

<#
.SYNOPSIS
Tests for vulnerability assessment settings scenarios 
#>
function Test-VulnerabilityAssessmentSettingsTest
{
	# Setup
	$testSuffix = getAssetName
	Create-VulnerabilityAssessmentTestEnvironment $testSuffix
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix

	try
	{
		# Turn on ATP
		Set-AzureRmSqlServerThreatDetectionPolicy -ResourceGroupName $params.rgname -ServerName $params.serverName -NotificationRecipientsEmails "koko@mailTest.com;koko1@mailTest.com" -EmailAdmins $false -ExcludedDetectionType Sql_Injection_Vulnerability -StorageAccountName $params.storageAccount

		# Set Vulnerability Assessment settings (Regular parameter set) with a client errors
		Assert-ThrowsContains -script { Set-AzureRmSqlDatabaseVulnerabilityAssessmentSettings -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		 -StorageAccountName $params.storageAccount -EmailAdmins $false -NotificationEmail @() -RecurringScansInterval Weekly } -message "You need to provide at least one email address or set EmailAdmins to True"

		# Set Vulnerability Assessment settings (Regular parameter set)
		Set-AzureRmSqlDatabaseVulnerabilityAssessmentSettings -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		 -StorageAccountName $params.storageAccount
	
		# Get Vulnerability Assessment settings
		$policy = Get-AzureRmSqlDatabaseVulnerabilityAssessmentSettings -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName 
		
		# Validate the settings
		Assert-AreEqual $params.rgname $policy.ResourceGroupName
		Assert-AreEqual $params.serverName $policy.ServerName
		Assert-AreEqual $params.databaseName $policy.DatabaseName
		Assert-AreEqual "vulnerability-assessment" $policy.ScanResultsContainerName
		Assert-AreEqual $params.storageAccount $policy.StorageAccountName	
		Assert-AreEqual None $policy.RecurringScansInterval
		Assert-AreEqual $false $policy.EmailAdmins
		Assert-AreEqualArray @() $policy.NotificationEmail

		# Set Vulnerability Assessment settings with all optional values (Regular parameter set)
		$testScanResultsContainerName = "test-scan-results-container-name"
		$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::Weekly
		$testEmailAdmins = $true
		$testNotificationEmail = @("test1@mailTest.com", "test2@mailTest.com")

		Set-AzureRmSqlDatabaseVulnerabilityAssessmentSettings -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		 -StorageAccountName $params.storageAccount -ScanResultsContainerName $testScanResultsContainerName -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `
		 -NotificationEmail $testNotificationEmail

		# Get Vulnerability Assessment settings
		$policy = Get-AzureRmSqlDatabaseVulnerabilityAssessmentSettings -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName 

		# Validate the settings
		Assert-AreEqual $params.rgname $policy.ResourceGroupName
		Assert-AreEqual $params.serverName $policy.ServerName
		Assert-AreEqual $params.databaseName $policy.DatabaseName
		Assert-AreEqual $testScanResultsContainerName $policy.ScanResultsContainerName
		Assert-AreEqual $params.storageAccount $policy.StorageAccountName	
		Assert-AreEqual $testRecurringScansInterval $policy.RecurringScansInterval
		Assert-AreEqual $testEmailAdmins $policy.EmailAdmins
		Assert-AreEqualArray $testNotificationEmail $policy.NotificationEmail

		# Clear the settings
		Clear-AzureRmSqlDatabaseVulnerabilityAssessmentSettings -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName

		# Test Get and Clear end expect an error
		$vaSettingsAreOffErrorMessage = "Vulnerability assessment policy is not defined. Please run Set-AzureRmSqlDatabaseVulnerabilityAssessmentSettings first."
		
		Assert-ThrowsContains -script { Get-AzureRmSqlDatabaseVulnerabilityAssessmentSettings -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName } -message $vaSettingsAreOffErrorMessage

		Assert-ThrowsContains -script { Clear-AzureRmSqlDatabaseVulnerabilityAssessmentSettings -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName } -message $vaSettingsAreOffErrorMessage


		# Set Vulnerability Assessment settings with all optional values (Advanced parameter set)
		$testBlobStorageSasUri = "test-scan-results-container-name"

		Set-AzureRmSqlDatabaseVulnerabilityAssessmentSettings -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		 -BlobStorageSasUri $testBlobStorageSasUri -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `
		 -NotificationEmail $testNotificationEmail

		# Get Vulnerability Assessment settings
		$policy = Get-AzureRmSqlDatabaseVulnerabilityAssessmentSettings -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName 

		# Validate the settings
		Assert-AreEqual $params.rgname $policy.ResourceGroupName
		Assert-AreEqual $params.serverName $policy.ServerName
		Assert-AreEqual $params.databaseName $policy.DatabaseName
		Assert-AreEqual $testScanResultsContainerName $policy.ScanResultsContainerName
		Assert-AreEqual $params.storageAccount $policy.StorageAccountName	
		Assert-AreEqual $testRecurringScansInterval $policy.RecurringScansInterval
		Assert-AreEqual $testEmailAdmins $policy.EmailAdmins
		Assert-AreEqualArray $testNotificationEmail $policy.NotificationEmail

		# Clear the settings
		Clear-AzureRmSqlDatabaseVulnerabilityAssessmentSettings -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName
	}
	finally
	{
		# Cleanup
		Remove-VulnerabilityAssessmentTestEnvironment $testSuffix
	}
}

<#
.SYNOPSIS
Tests for vulnerability assessment baseline scenarios 
#>
function Test-VulnerabilityAssessmentBaselineTest
{
	# Setup
	$testSuffix = getAssetName
	Create-VulnerabilityAssessmentTestEnvironment $testSuffix
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix

	try
	{
		# Turn on ATP
		Set-AzureRmSqlServerThreatDetectionPolicy -ResourceGroupName $params.rgname -ServerName $params.serverName -NotificationRecipientsEmails "koko@mailTest.com;koko1@mailTest.com" -EmailAdmins $false -ExcludedDetectionType Sql_Injection_Vulnerability -StorageAccountName $params.storageAccount

		# Set Vulnerability Assessment policy
		Set-AzureRmSqlDatabaseVulnerabilityAssessmentSettings -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		 -StorageAccountName $params.storageAccount
	
		$ruleId = "VA2108"

		# Get and remove baseline for non existing baseline
		$baselineDoesntExistsErrorMessage = "Baseline does not exist for rule 'VA2108'"
		Assert-ThrowsContains -script { Get-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId } -message $baselineDoesntExistsErrorMessage

		Assert-ThrowsContains -script { Clear-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId } -message $baselineDoesntExistsErrorMessage

		# Set baseline
		$baselineToSet = @( @( "Principal1", "db_ddladmin", "SQL_USER", "None")  , @( "Principal2", "db_ddladmin", "SQL_USER", "None"))
		Set-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-RuleId $ruleId -BaselineResult $baselineToSet
		
		# Get baseline and compare with what we sent
		$baseline = Get-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-RuleId $ruleId

		Assert-AreEqualArray $baselineToSet[0] $baseline.BaselineResult[0].Result
		Assert-AreEqualArray $baselineToSet[1] $baseline.BaselineResult[1].Result

		# Set baseline
		$baselineToSet = @( @( "Principal3", "db_ddladmin", "SQL_USER", "None")  , @( "Principal4", "db_ddladmin", "SQL_USER", "None"))
		Set-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-RuleId $ruleId -BaselineResult $baselineToSet
		
		# Get baseline and compare with what we sent
		$baseline = Get-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-RuleId $ruleId

		Assert-AreEqualArray $baselineToSet[0] $baseline.BaselineResult[0].Result
		Assert-AreEqualArray $baselineToSet[1] $baseline.BaselineResult[1].Result

		# Clear baseline
		Clear-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-RuleId $ruleId

		# Get and remove baseline for non existing baseline
		Assert-ThrowsContains -script { Get-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId } -message $baselineDoesntExistsErrorMessage

		Assert-ThrowsContains -script { Clear-AzureRmSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId } -message $baselineDoesntExistsErrorMessage
	}
	finally
	{
		# Cleanup
		Remove-VulnerabilityAssessmentTestEnvironment $testSuffix
	}
}

<#
.SYNOPSIS
Tests for vulnerability assessment scan , scan record get and list scenarios 
#>
function Test-VulnerabilityAssessmentScanRecordGetListTest
{
	# Setup
	$testSuffix = getAssetName
	Create-VulnerabilityAssessmentTestEnvironment $testSuffix
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix

	try
	{
		# Turn on ATP
		Set-AzureRmSqlServerThreatDetectionPolicy -ResourceGroupName $params.rgname -ServerName $params.serverName -NotificationRecipientsEmails "koko@mailTest.com;koko1@mailTest.com" -EmailAdmins $false -ExcludedDetectionType Sql_Injection_Vulnerability -StorageAccountName $params.storageAccount

		# Set Vulnerability Assessment policy
		Set-AzureRmSqlDatabaseVulnerabilityAssessmentSettings -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		 -StorageAccountName $params.storageAccount
	
		# Trigger scan without scan ID
		Start-AzureRmSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName 
		
		# Trigger scan  as a Job
		$scanJob = Start-AzureRmSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -AsJob
		$scanJob | Wait-Job

		# Trigger scan with scan ID
		$scanId1 = "cmdletGetListScan"
		$scanRecord1 = Start-AzureRmSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-ScanId $scanId1

		# Validate the scan record that we got from the scan
		Assert-AreEqual $params.rgname $scanRecord1.ResourceGroupName
		Assert-AreEqual $params.serverName $scanRecord1.ServerName 
		Assert-AreEqual $params.databaseName $scanRecord1.DatabaseName 
		Assert-AreEqual $scanId1 $scanRecord1.ScanId
		Assert-AreEqual "OnDemand" $scanRecord1.TriggerType

		# Validate the scan record that we got from the get scan record cmdlet
		$scanRecord1FromGet = Get-AzureRmSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -ScanId $scanId1

		Assert-AreEqual $scanRecord1FromGet.ResourceGroupName $scanRecord1.ResourceGroupName
		Assert-AreEqual $scanRecord1FromGet.ServerName $scanRecord1.ServerName
		Assert-AreEqual $scanRecord1FromGet.DatabaseName $scanRecord1.DatabaseName
		Assert-AreEqual $scanRecord1FromGet.ScanId $scanRecord1.ScanId
		Assert-AreEqual $scanRecord1FromGet.TriggerType $scanRecord1.TriggerType
		Assert-AreEqual $scanRecord1FromGet.State $scanRecord1.State
		Assert-AreEqual $scanRecord1FromGet.StartTime $scanRecord1.StartTime
		Assert-AreEqual $scanRecord1FromGet.EndTime $scanRecord1.EndTime
		Assert-AreEqual $scanRecord1FromGet.Errors $scanRecord1.Errors
		Assert-AreEqual $scanRecord1FromGet.ScanResultsLocationPath $scanRecord1.ScanResultsLocationPath
		Assert-AreEqual $scanRecord1FromGet.NumberOfFailedSecurityChecks $scanRecord1.NumberOfFailedSecurityChecks

		# Verify list scans
		$excpectedScanCount = 3
		$scanRecordList = Get-AzureRmSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName 
		Assert-AreEqual $excpectedScanCount $scanRecordList.Count

		$scanRecord1FromListCmdlet = $scanRecordList[$excpectedScanCount-1]
		Assert-AreEqual $scanRecord1FromListCmdlet.ResourceGroupName $scanRecord1.ResourceGroupName
		Assert-AreEqual $scanRecord1FromListCmdlet.ServerName $scanRecord1.ServerName
		Assert-AreEqual $scanRecord1FromListCmdlet.DatabaseName $scanRecord1.DatabaseName
		Assert-AreEqual $scanRecord1FromListCmdlet.ScanId $scanRecord1.ScanId
		Assert-AreEqual $scanRecord1FromListCmdlet.TriggerType $scanRecord1.TriggerType
		Assert-AreEqual $scanRecord1FromListCmdlet.State $scanRecord1.State
		Assert-AreEqual $scanRecord1FromListCmdlet.StartTime $scanRecord1.StartTime
		Assert-AreEqual $scanRecord1FromListCmdlet.EndTime $scanRecord1.EndTime
		Assert-AreEqual $scanRecord1FromListCmdlet.Errors $scanRecord1.Errors
		Assert-AreEqual $scanRecord1FromListCmdlet.ScanResultsLocationPath $scanRecord1.ScanResultsLocationPath
		Assert-AreEqual $scanRecord1FromListCmdlet.NumberOfFailedSecurityChecks $scanRecord1.NumberOfFailedSecurityChecks
	}
	finally
	{
		# Cleanup
		Remove-VulnerabilityAssessmentTestEnvironment $testSuffix
	}
}

<#
.SYNOPSIS
Tests for vulnerability assessment scan Convert scenarios 
#>
function Test-VulnerabilityAssessmentScanConvertTest
{
	# Setup
	$testSuffix = getAssetName
	Create-VulnerabilityAssessmentTestEnvironment $testSuffix
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix

	try
	{
		# Turn on ATP
		Set-AzureRmSqlServerThreatDetectionPolicy -ResourceGroupName $params.rgname -ServerName $params.serverName -NotificationRecipientsEmails "koko@mailTest.com;koko1@mailTest.com" -EmailAdmins $false -ExcludedDetectionType Sql_Injection_Vulnerability -StorageAccountName $params.storageAccount

		# Set Vulnerability Assessment Settings
		Set-AzureRmSqlDatabaseVulnerabilityAssessmentSettings -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		 -StorageAccountName $params.storageAccount

		# Trigger a new scan
		$scanId = "cmdletConvertScan"
		Start-AzureRmSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -ScanId $scanId

		# Convert the scan
		$convertScanObject = Convert-AzureRmSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-ScanId $scanId
	
		Assert-AreEqual $params.rgname $convertScanObject.ResourceGroupName
		Assert-AreEqual $params.serverName $convertScanObject.ServerName
		Assert-AreEqual $params.databaseName $convertScanObject.DatabaseName
	    Assert-NotNull $convertScanObject.ExportedReportLocation
		Assert-AreNotEqual "" $convertScanObject.ExportedReportLocation
	}
	finally
	{
		# Cleanup
		Remove-VulnerabilityAssessmentTestEnvironment $testSuffix
	}
}

<#
.SYNOPSIS
Creates the test environment needed to perform the tests
#>
function Create-VulnerabilityAssessmentTestEnvironment ($testSuffix, $location = "West Central US", $serverVersion = "12.0")
{
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix
	Create-TestEnvironmentWithParams $params $location $serverVersion
}

<#
.SYNOPSIS
Gets the values of the parameters used at the tests
#>
function Get-SqlVulnerabilityAssessmentTestEnvironmentParameters ($testSuffix)
{
	return @{ rgname = "sql-va-cmdlet-test-rg" +$testSuffix;
			  serverName = "sql-va-cmdlet-server" +$testSuffix;
			  databaseName = "sql-va-cmdlet-db" + $testSuffix;
			  storageAccount = "sqlvacmdlets" +$testSuffix
		}
}

<#
.SYNOPSIS
Removes the test environment that was needed to perform the tests
#>
function Remove-VulnerabilityAssessmentTestEnvironment ($testSuffix)
{
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix
	Remove-AzureRmResourceGroup -Name $params.rgname -Force
}