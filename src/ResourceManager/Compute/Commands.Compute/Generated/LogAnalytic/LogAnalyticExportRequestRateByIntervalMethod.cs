//
// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Warning: This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using Microsoft.Azure.Commands.Compute.Automation.Models;
using Microsoft.Azure.Management.Compute;
using Microsoft.Azure.Management.Compute.Models;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;

namespace Microsoft.Azure.Commands.Compute.Automation
{
    public partial class InvokeAzureComputeMethodCmdlet : ComputeAutomationBaseCmdlet
    {
        protected object CreateLogAnalyticExportRequestRateByIntervalDynamicParameters()
        {
            dynamicParameters = new RuntimeDefinedParameterDictionary();
            var pFromTime = new RuntimeDefinedParameter();
            pFromTime.Name = "FromTime";
            pFromTime.ParameterType = typeof(DateTime);
            pFromTime.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 1,
                Mandatory = false
            });
            pFromTime.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("FromTime", pFromTime);

            var pGroupByOperationName = new RuntimeDefinedParameter();
            pGroupByOperationName.Name = "GroupByOperationName";
            pGroupByOperationName.ParameterType = typeof(bool?);
            pGroupByOperationName.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 2,
                Mandatory = false
            });
            pGroupByOperationName.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("GroupByOperationName", pGroupByOperationName);

            var pIntervalLength = new RuntimeDefinedParameter();
            pIntervalLength.Name = "IntervalLength";
            pIntervalLength.ParameterType = typeof(IntervalInMins);
            pIntervalLength.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 3,
                Mandatory = false
            });
            pIntervalLength.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("IntervalLength", pIntervalLength);

            var pGroupByThrottlePolicy = new RuntimeDefinedParameter();
            pGroupByThrottlePolicy.Name = "GroupByThrottlePolicy";
            pGroupByThrottlePolicy.ParameterType = typeof(bool?);
            pGroupByThrottlePolicy.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 4,
                Mandatory = false
            });
            pGroupByThrottlePolicy.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("GroupByThrottlePolicy", pGroupByThrottlePolicy);

            var pBlobContainerSasUri = new RuntimeDefinedParameter();
            pBlobContainerSasUri.Name = "BlobContainerSasUri";
            pBlobContainerSasUri.ParameterType = typeof(string);
            pBlobContainerSasUri.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 5,
                Mandatory = false
            });
            pBlobContainerSasUri.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("BlobContainerSasUri", pBlobContainerSasUri);

            var pGroupByResourceName = new RuntimeDefinedParameter();
            pGroupByResourceName.Name = "GroupByResourceName";
            pGroupByResourceName.ParameterType = typeof(bool?);
            pGroupByResourceName.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 6,
                Mandatory = false
            });
            pGroupByResourceName.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("GroupByResourceName", pGroupByResourceName);

            var pToTime = new RuntimeDefinedParameter();
            pToTime.Name = "ToTime";
            pToTime.ParameterType = typeof(DateTime);
            pToTime.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 7,
                Mandatory = false
            });
            pToTime.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("ToTime", pToTime);

            var pLocation = new RuntimeDefinedParameter();
            pLocation.Name = "Location";
            pLocation.ParameterType = typeof(string);
            pLocation.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 8,
                Mandatory = true
            });
            pLocation.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("Location", pLocation);

            var pArgumentList = new RuntimeDefinedParameter();
            pArgumentList.Name = "ArgumentList";
            pArgumentList.ParameterType = typeof(object[]);
            pArgumentList.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByStaticParameters",
                Position = 9,
                Mandatory = true
            });
            pArgumentList.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("ArgumentList", pArgumentList);

            return dynamicParameters;
        }

        protected void ExecuteLogAnalyticExportRequestRateByIntervalMethod(object[] invokeMethodInputParameters)
        {
            var parameters = new RequestRateByIntervalInput();
            var pFromTime = (DateTime) ParseParameter(invokeMethodInputParameters[0]);
            parameters.FromTime = pFromTime;
            var pGroupByOperationName = (bool?) ParseParameter(invokeMethodInputParameters[1]);
            parameters.GroupByOperationName = pGroupByOperationName;
            var pIntervalLength = (IntervalInMins) ParseParameter(invokeMethodInputParameters[2]);
            parameters.IntervalLength = pIntervalLength;
            var pGroupByThrottlePolicy = (bool?) ParseParameter(invokeMethodInputParameters[3]);
            parameters.GroupByThrottlePolicy = pGroupByThrottlePolicy;
            var pBlobContainerSasUri = (string) ParseParameter(invokeMethodInputParameters[4]);
            parameters.BlobContainerSasUri = pBlobContainerSasUri;
            var pGroupByResourceName = (bool?) ParseParameter(invokeMethodInputParameters[5]);
            parameters.GroupByResourceName = pGroupByResourceName;
            var pToTime = (DateTime) ParseParameter(invokeMethodInputParameters[6]);
            parameters.ToTime = pToTime;
            string location = (string)ParseParameter(invokeMethodInputParameters[8]);

            var result = LogAnalyticsClient.ExportRequestRateByInterval(parameters, location);
            WriteObject(result);
        }
    }

    public partial class NewAzureComputeArgumentListCmdlet : ComputeAutomationBaseCmdlet
    {
        protected PSArgument[] CreateLogAnalyticExportRequestRateByIntervalParameters()
        {
            RequestRateByIntervalInput parameters = new RequestRateByIntervalInput();
            string location = string.Empty;

            return ConvertFromObjectsToArguments(
                 new string[] { "Parameters", "Location" },
                 new object[] { parameters, location });
        }
    }

    [Cmdlet("Export", ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "LogAnalyticRequestRateByInterval", DefaultParameterSetName = "DefaultParameter", SupportsShouldProcess = true)]
    [OutputType(typeof(PSLogAnalyticsOperationResult))]
    public partial class ExportAzureRmLogAnalyticRequestRateByInterval : ComputeAutomationBaseCmdlet
    {
        public override void ExecuteCmdlet()
        {
            base.ExecuteCmdlet();
            ExecuteClientAction(() =>
            {
                if (ShouldProcess(this.Location, VerbsData.Export))
                {
                    var parameters = new RequestRateByIntervalInput();
                    parameters.FromTime = this.FromTime;
                    parameters.GroupByOperationName = this.GroupByOperationName;
                    parameters.IntervalLength = this.IntervalLength;
                    parameters.GroupByThrottlePolicy = this.GroupByThrottlePolicy;
                    parameters.BlobContainerSasUri = this.BlobContainerSasUri;
                    parameters.GroupByResourceName = this.GroupByResourceName;
                    parameters.ToTime = this.ToTime;
                    string location = this.Location.Canonicalize();

                    var result = LogAnalyticsClient.ExportRequestRateByInterval(parameters, location);
                    var psObject = new PSLogAnalyticsOperationResult();
                    ComputeAutomationAutoMapperProfile.Mapper.Map<LogAnalyticsOperationResult, PSLogAnalyticsOperationResult>(result, psObject);
                    WriteObject(psObject);
                }
            });
        }

        [Parameter(
            ParameterSetName = "DefaultParameter",
            Position = 2,
            Mandatory = true)]
        public DateTime FromTime { get; set; }

        [Parameter(
            ParameterSetName = "DefaultParameter",
            Mandatory = false)]
        public SwitchParameter GroupByOperationName { get; set; }

        [Parameter(
            ParameterSetName = "DefaultParameter",
            Position = 5,
            Mandatory = true)]
        public IntervalInMins IntervalLength { get; set; }

        [Parameter(
            ParameterSetName = "DefaultParameter",
            Mandatory = false)]
        public SwitchParameter GroupByThrottlePolicy { get; set; }

        [Parameter(
            ParameterSetName = "DefaultParameter",
            Position = 4,
            Mandatory = true)]
        public string BlobContainerSasUri { get; set; }

        [Parameter(
            ParameterSetName = "DefaultParameter",
            Mandatory = false)]
        public SwitchParameter GroupByResourceName { get; set; }

        [Parameter(
            ParameterSetName = "DefaultParameter",
            Position = 3,
            Mandatory = true)]
        public DateTime ToTime { get; set; }

        [Parameter(
            ParameterSetName = "DefaultParameter",
            Position = 1,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true)]
        [ResourceManager.Common.ArgumentCompleters.LocationCompleter("Microsoft.Compute/locations/logAnalytics")]
        public string Location { get; set; }

        [Parameter(Mandatory = false, HelpMessage = "Run cmdlet in the background")]
        public SwitchParameter AsJob { get; set; }
    }
}
