// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System.Collections.Generic;
using Microsoft.Azure.Management.Compute.Models;

namespace Microsoft.Azure.Commands.Compute.Models
{
    public class PSVirtualMachineIdentity
    {
        public string PrincipalId { get; set; }

        public string TenantId { get; set; }

        public ResourceIdentityType? Type { get; set; }

        public IDictionary<string, VirtualMachineIdentityUserAssignedIdentitiesValue> UserAssignedIdentities { get; set; }
    
        public PSVirtualMachineIdentity()
        {
        }

        public PSVirtualMachineIdentity(
            string principalId = null,
            string tenantId = null,
            ResourceIdentityType? type = null,
            IDictionary<string, VirtualMachineIdentityUserAssignedIdentitiesValue> userAssignedIdentities = null)
        {
            this.PrincipalId = principalId;
            this.TenantId = tenantId;
            this.Type = type;
            this.UserAssignedIdentities = userAssignedIdentities;
        }

        public IList<string> IdentityIds
        {
            get
            {
                if (this.UserAssignedIdentities == null) return null;
                var result = new List<string>();
                foreach (var userIds in this.UserAssignedIdentities)
                {
                    result.Add(userIds.Key);
                }

                return result;
            }
        }
    }
}
