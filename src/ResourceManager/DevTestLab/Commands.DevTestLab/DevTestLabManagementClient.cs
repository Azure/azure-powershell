// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.DevTestLab;
using Microsoft.Azure.Management.DevTestLab.Models;
using Newtonsoft.Json.Linq;
using Environment = Microsoft.Azure.Management.DevTestLab.Models.Environment;

namespace Microsoft.Azure.Management.DevTestLab.Models
{
    /// <summary>
    /// Specifications for artifacts to be deployed on a virtual machine.
    /// </summary>
    public partial class ArtifactDeploymentParameters
    {
        /// <summary>
        /// Initializes a new instance of the ArtifactDeploymentParameters
        /// class.
        /// </summary>
        public ArtifactDeploymentParameters()
        {
        }
    }

    /// <summary>
    /// Artifact deployment status information.
    /// </summary>
    public partial class ArtifactDeploymentStatus
    {
        private int _artifactsApplied;

        /// <summary>
        /// Optional. Gets the number of artifacts that were successfully
        /// applied on the virtual machine.
        /// </summary>
        public int ArtifactsApplied
        {
            get { return this._artifactsApplied; }
            set { this._artifactsApplied = value; }
        }

        private int _totalArtifacts;

        /// <summary>
        /// Optional. Gets the number of artifacts that were applied on the
        /// virtual machine.
        /// </summary>
        public int TotalArtifacts
        {
            get { return this._totalArtifacts; }
            set { this._totalArtifacts = value; }
        }

        /// <summary>
        /// Initializes a new instance of the ArtifactDeploymentStatus class.
        /// </summary>
        public ArtifactDeploymentStatus()
        {
        }
    }

    /// <summary>
    /// Environment summary information.
    /// </summary>
    public partial class Environment
    {
        private string _id;

        /// <summary>
        /// Optional. Gets the unique identifier of the environment.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }

        private string _location;

        /// <summary>
        /// Optional. Gets the location of the environment.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }

        private string _name;

        /// <summary>
        /// Optional. Gets the name of the environment.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }

        private EnvironmentProperties _properties;

        /// <summary>
        /// Optional. Gets the properties of the environment.
        /// </summary>
        public EnvironmentProperties Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }

        private string _resourceType;

        /// <summary>
        /// Optional. Gets the resource type of the environment.
        /// </summary>
        public string ResourceType
        {
            get { return this._resourceType; }
            set { this._resourceType = value; }
        }

        /// <summary>
        /// Initializes a new instance of the Environment class.
        /// </summary>
        public Environment()
        {
        }
    }

    /// <summary>
    /// The status of the asynchronous environment creation operation.
    /// </summary>
    public enum EnvironmentCreateOperationStatus
    {
        /// <summary>
        /// The environment creation is in progress.
        /// </summary>
        Creating = 0,

        /// <summary>
        /// The environment creation failed.
        /// </summary>
        Failed = 1,

        /// <summary>
        /// The environment creation succeeded.
        /// </summary>
        Succeeded = 2,

        /// <summary>
        /// The environment creation timed out.
        /// </summary>
        TimedOut = 3,
    }

    /// <summary>
    /// Specifications for creating an new environment.
    /// </summary>
    public partial class EnvironmentCreateParameters
    {
        private string _location;

        /// <summary>
        /// Required. Gets or sets the location of the environment to be
        /// created.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }

        private string _name;

        /// <summary>
        /// Required. Gets or sets the name of the environment to be created.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }

        private EnvironmentCreateProperties _properties;

        /// <summary>
        /// Required. Gets or sets the properties associated with the
        /// environment to be created.
        /// </summary>
        public EnvironmentCreateProperties Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }

        private string _resourceType;

        /// <summary>
        /// Required. Gets or sets the resource type of the environment to be
        /// created.
        /// </summary>
        public string ResourceType
        {
            get { return this._resourceType; }
            set { this._resourceType = value; }
        }

        private Tags _tags;

        /// <summary>
        /// Optional. Gets or sets the tags associated with the environment to
        /// be created.
        /// </summary>
        public Tags Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }

        /// <summary>
        /// Initializes a new instance of the EnvironmentCreateParameters class.
        /// </summary>
        public EnvironmentCreateParameters()
        {
            this.ResourceType = "Microsoft.DevTestLab/Environments";
        }
    }

    /// <summary>
    /// Properties for an new environment.
    /// </summary>
    public partial class EnvironmentCreateProperties
    {
        private string _labId;

        /// <summary>
        /// Optional. Gets or sets the unique identifier of the lab in which
        /// the environment will be created.
        /// </summary>
        public string LabId
        {
            get { return this._labId; }
            set { this._labId = value; }
        }

        private string _notes;

        /// <summary>
        /// Optional. Gets or sets the notes associated with the environment to
        /// be created.
        /// </summary>
        public string Notes
        {
            get { return this._notes; }
            set { this._notes = value; }
        }

        private IList<VMCreateParameters> _vMParameters;

        /// <summary>
        /// Optional. The specifications for the virtual machines in the
        /// environment to be created.
        /// </summary>
        public IList<VMCreateParameters> VMParameters
        {
            get { return this._vMParameters; }
            set { this._vMParameters = value; }
        }

        /// <summary>
        /// Initializes a new instance of the EnvironmentCreateProperties class.
        /// </summary>
        public EnvironmentCreateProperties()
        {
            this.VMParameters = new LazyList<VMCreateParameters>();
        }
    }

    /// <summary>
    /// The response from the Environment Create operation.
    /// </summary>
    public partial class EnvironmentCreateResponse : AzureOperationResponse
    {
        private string _location;

        /// <summary>
        /// Optional. Gets the redirect URI location with any necessary
        /// parameters
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }

        private EnvironmentCreateOperationStatus _status;

        /// <summary>
        /// Optional. Gets the resource group provisioning state.
        /// </summary>
        public EnvironmentCreateOperationStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }

        /// <summary>
        /// Initializes a new instance of the EnvironmentCreateResponse class.
        /// </summary>
        public EnvironmentCreateResponse()
        {
        }
    }

    /// <summary>
    /// The response from the Environment Get operation.
    /// </summary>
    public partial class EnvironmentGetResponse : AzureOperationResponse
    {
        private Environment _environment;

        /// <summary>
        /// Required. Gets the environment.
        /// </summary>
        public Environment Environment
        {
            get { return this._environment; }
            set { this._environment = value; }
        }

        /// <summary>
        /// Initializes a new instance of the EnvironmentGetResponse class.
        /// </summary>
        public EnvironmentGetResponse()
        {
        }

        /// <summary>
        /// Initializes a new instance of the EnvironmentGetResponse class with
        /// required arguments.
        /// </summary>
        public EnvironmentGetResponse(Environment environment)
            : this()
        {
            if (environment == null)
            {
                throw new ArgumentNullException("environment");
            }
            this.Environment = environment;
        }
    }

    /// <summary>
    /// The response from the Environment List operation.
    /// </summary>
    public partial class EnvironmentListResponse : AzureOperationResponse, IEnumerable<Environment>
    {
        private IList<Environment> _environments;

        /// <summary>
        /// Required. Gets the list of environments.
        /// </summary>
        public IList<Environment> Environments
        {
            get { return this._environments; }
            set { this._environments = value; }
        }

        /// <summary>
        /// Initializes a new instance of the EnvironmentListResponse class.
        /// </summary>
        public EnvironmentListResponse()
        {
            this.Environments = new LazyList<Environment>();
        }

        /// <summary>
        /// Initializes a new instance of the EnvironmentListResponse class
        /// with required arguments.
        /// </summary>
        public EnvironmentListResponse(IList<Environment> environments)
            : this()
        {
            if (environments == null)
            {
                throw new ArgumentNullException("environments");
            }
            this.Environments = environments;
        }

        /// <summary>
        /// Gets the sequence of Environments.
        /// </summary>
        public IEnumerator<Environment> GetEnumerator()
        {
            return this.Environments.GetEnumerator();
        }

        /// <summary>
        /// Gets the sequence of Environments.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }

    /// <summary>
    /// Environment properties information.
    /// </summary>
    public partial class EnvironmentProperties
    {
        private string _labId;

        /// <summary>
        /// Optional. Gets the unique identifier of the lab associated with the
        /// environment.
        /// </summary>
        public string LabId
        {
            get { return this._labId; }
            set { this._labId = value; }
        }

        private string _notes;

        /// <summary>
        /// Optional. Gets the notes associated with the environment.
        /// </summary>
        public string Notes
        {
            get { return this._notes; }
            set { this._notes = value; }
        }

        private string _ownerObjectId;

        /// <summary>
        /// Optional. Gets the owner of the environment.
        /// </summary>
        public string OwnerObjectId
        {
            get { return this._ownerObjectId; }
            set { this._ownerObjectId = value; }
        }

        private string _provisioningState;

        /// <summary>
        /// Optional. Gets the provisioning state of the environment.
        /// </summary>
        public string ProvisioningState
        {
            get { return this._provisioningState; }
            set { this._provisioningState = value; }
        }

        private IList<VM> _vMs;

        /// <summary>
        /// Optional. Gets the list of virtual machines in the environment.
        /// </summary>
        public IList<VM> VMs
        {
            get { return this._vMs; }
            set { this._vMs = value; }
        }

        /// <summary>
        /// Initializes a new instance of the EnvironmentProperties class.
        /// </summary>
        public EnvironmentProperties()
        {
            this.VMs = new LazyList<VM>();
        }
    }

    /// <summary>
    /// Lab summary information.
    /// </summary>
    public partial class Lab
    {
        private string _id;

        /// <summary>
        /// Optional. Gets the unique identifier of the lab.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }

        private string _location;

        /// <summary>
        /// Optional. Gets the location of the lab.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }

        private string _name;

        /// <summary>
        /// Optional. Gets the name of the lab.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }

        private LabProperties _properties;

        /// <summary>
        /// Optional. Gets the properties of the lab.
        /// </summary>
        public LabProperties Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }

        private string _resourceType;

        /// <summary>
        /// Optional. Gets the resource type of the lab.
        /// </summary>
        public string ResourceType
        {
            get { return this._resourceType; }
            set { this._resourceType = value; }
        }

        /// <summary>
        /// Initializes a new instance of the Lab class.
        /// </summary>
        public Lab()
        {
        }
    }

    /// <summary>
    /// The response from the Lab Get operation.
    /// </summary>
    public partial class LabGetResponse : AzureOperationResponse
    {
        private Lab _lab;

        /// <summary>
        /// Required. Gets a lab.
        /// </summary>
        public Lab Lab
        {
            get { return this._lab; }
            set { this._lab = value; }
        }

        /// <summary>
        /// Initializes a new instance of the LabGetResponse class.
        /// </summary>
        public LabGetResponse()
        {
        }

        /// <summary>
        /// Initializes a new instance of the LabGetResponse class with
        /// required arguments.
        /// </summary>
        public LabGetResponse(Lab lab)
            : this()
        {
            if (lab == null)
            {
                throw new ArgumentNullException("lab");
            }
            this.Lab = lab;
        }
    }

    /// <summary>
    /// The response from the Lab List operation.
    /// </summary>
    public partial class LabListResponse : AzureOperationResponse, IEnumerable<Lab>
    {
        private IList<Lab> _labs;

        /// <summary>
        /// Required. Gets the list of labs.
        /// </summary>
        public IList<Lab> Labs
        {
            get { return this._labs; }
            set { this._labs = value; }
        }

        /// <summary>
        /// Initializes a new instance of the LabListResponse class.
        /// </summary>
        public LabListResponse()
        {
            this.Labs = new LazyList<Lab>();
        }

        /// <summary>
        /// Initializes a new instance of the LabListResponse class with
        /// required arguments.
        /// </summary>
        public LabListResponse(IList<Lab> labs)
            : this()
        {
            if (labs == null)
            {
                throw new ArgumentNullException("labs");
            }
            this.Labs = labs;
        }

        /// <summary>
        /// Gets the sequence of Labs.
        /// </summary>
        public IEnumerator<Lab> GetEnumerator()
        {
            return this.Labs.GetEnumerator();
        }

        /// <summary>
        /// Gets the sequence of Labs.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }

    /// <summary>
    /// Lab properties information.
    /// </summary>
    public partial class LabProperties
    {
        private string _defaultStorageAccount;

        /// <summary>
        /// Optional. Gets the default storage account associated with the lab.
        /// </summary>
        public string DefaultStorageAccount
        {
            get { return this._defaultStorageAccount; }
            set { this._defaultStorageAccount = value; }
        }

        private string _provisioningState;

        /// <summary>
        /// Optional. Gets the provisioning state of the lab.
        /// </summary>
        public string ProvisioningState
        {
            get { return this._provisioningState; }
            set { this._provisioningState = value; }
        }

        private IList<string> _storageAccounts;

        /// <summary>
        /// Optional. Gets the secondary storage accounts associated with the
        /// lab.
        /// </summary>
        public IList<string> StorageAccounts
        {
            get { return this._storageAccounts; }
            set { this._storageAccounts = value; }
        }

        private string _vaultName;

        /// <summary>
        /// Optional. Gets the Azure key vault associated with the lab.
        /// </summary>
        public string VaultName
        {
            get { return this._vaultName; }
            set { this._vaultName = value; }
        }

        /// <summary>
        /// Initializes a new instance of the LabProperties class.
        /// </summary>
        public LabProperties()
        {
            this.StorageAccounts = new LazyList<string>();
        }
    }

    /// <summary>
    /// Tags summary information.
    /// </summary>
    public partial class Tags
    {
        /// <summary>
        /// Initializes a new instance of the Tags class.
        /// </summary>
        public Tags()
        {
        }
    }

    /// <summary>
    /// Virtual machine summary information.
    /// </summary>
    public partial class VM
    {
        private ArtifactDeploymentStatus _artifactDeploymentStatus;

        /// <summary>
        /// Optional. Gets the status of the artifact deployments on the
        /// virtual machine.
        /// </summary>
        public ArtifactDeploymentStatus ArtifactDeploymentStatus
        {
            get { return this._artifactDeploymentStatus; }
            set { this._artifactDeploymentStatus = value; }
        }

        private string _builtInUserName;

        /// <summary>
        /// Optional. Gets the username associated with the virtual machine (if
        /// created from a non-sysprepped VHD).
        /// </summary>
        public string BuiltInUserName
        {
            get { return this._builtInUserName; }
            set { this._builtInUserName = value; }
        }

        private string _fqdn;

        /// <summary>
        /// Optional. Gets the fully qualified domain name of the virtual
        /// machine.
        /// </summary>
        public string Fqdn
        {
            get { return this._fqdn; }
            set { this._fqdn = value; }
        }

        private string _name;

        /// <summary>
        /// Optional. Gets the name of the virtual machine.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }

        private string _size;

        /// <summary>
        /// Optional. Gets the size of the virtual machine.
        /// </summary>
        public string Size
        {
            get { return this._size; }
            set { this._size = value; }
        }

        private string _userName;

        /// <summary>
        /// Optional. Gets the username associated with the virtual machine (if
        /// created from a sysprepped VHD).
        /// </summary>
        public string UserName
        {
            get { return this._userName; }
            set { this._userName = value; }
        }

        private string _vMTemplateName;

        /// <summary>
        /// Optional. Gets the VM template associated with the virtual machine.
        /// </summary>
        public string VMTemplateName
        {
            get { return this._vMTemplateName; }
            set { this._vMTemplateName = value; }
        }

        /// <summary>
        /// Initializes a new instance of the VM class.
        /// </summary>
        public VM()
        {
        }
    }

    /// <summary>
    /// Specifications for creating an new virtual machine.
    /// </summary>
    public partial class VMCreateParameters
    {
        private IList<ArtifactDeploymentParameters> _artifacts;

        /// <summary>
        /// Optional. Gets or sets the specifications for the artifacts to be
        /// deployed on the virtual machine being created.
        /// </summary>
        public IList<ArtifactDeploymentParameters> Artifacts
        {
            get { return this._artifacts; }
            set { this._artifacts = value; }
        }

        private bool _isAuthenticationWithSshKey;

        /// <summary>
        /// Optional. Gets or sets whether a SSH key is used for authenticating
        /// to the virtual machine being created.
        /// </summary>
        public bool IsAuthenticationWithSshKey
        {
            get { return this._isAuthenticationWithSshKey; }
            set { this._isAuthenticationWithSshKey = value; }
        }

        private string _name;

        /// <summary>
        /// Optional. Gets or sets the name of the virtual machine to be
        /// created.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }

        private string _password;

        /// <summary>
        /// Optional. Gets or sets the password associated with the virtual
        /// machine to be created.
        /// </summary>
        public string Password
        {
            get { return this._password; }
            set { this._password = value; }
        }

        private string _powerState;

        /// <summary>
        /// Optional. Gets or sets the power state of the virtual machine to be
        /// created.
        /// </summary>
        public string PowerState
        {
            get { return this._powerState; }
            set { this._powerState = value; }
        }

        private string _size;

        /// <summary>
        /// Optional. Gets or sets the size of the virtual machine to be
        /// created.
        /// </summary>
        public string Size
        {
            get { return this._size; }
            set { this._size = value; }
        }

        private string _sshKey;

        /// <summary>
        /// Optional. Gets or sets the SSH key associated with the virtual
        /// machine to be created.
        /// </summary>
        public string SshKey
        {
            get { return this._sshKey; }
            set { this._sshKey = value; }
        }

        private string _userName;

        /// <summary>
        /// Optional. Gets or sets the username associated with the virtual
        /// machine to be created.
        /// </summary>
        public string UserName
        {
            get { return this._userName; }
            set { this._userName = value; }
        }

        private string _vMTemplateName;

        /// <summary>
        /// Optional. Gets or sets the name of VM template to be used for
        /// creating the virtual machine.
        /// </summary>
        public string VMTemplateName
        {
            get { return this._vMTemplateName; }
            set { this._vMTemplateName = value; }
        }

        /// <summary>
        /// Initializes a new instance of the VMCreateParameters class.
        /// </summary>
        public VMCreateParameters()
        {
            this.Artifacts = new LazyList<ArtifactDeploymentParameters>();
        }
    }

    /// <summary>
    /// VM template summary information.
    /// </summary>
    public partial class VMTemplate
    {
        private string _id;

        /// <summary>
        /// Optional. Gets the unique identifier of the VM template.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }

        private string _location;

        /// <summary>
        /// Optional. Gets the location of the VM template.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }

        private string _name;

        /// <summary>
        /// Optional. Gets the name of the VM template.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }

        private VMTemplateProperties _properties;

        /// <summary>
        /// Optional. Get the properties of the VM template.
        /// </summary>
        public VMTemplateProperties Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }

        private string _resourceType;

        /// <summary>
        /// Optional. Gets the resource type of the VM template.
        /// </summary>
        public string ResourceType
        {
            get { return this._resourceType; }
            set { this._resourceType = value; }
        }

        /// <summary>
        /// Initializes a new instance of the VMTemplate class.
        /// </summary>
        public VMTemplate()
        {
        }
    }

    /// <summary>
    /// The response from the VMTemplate Get operation.
    /// </summary>
    public partial class VMTemplateGetResponse : AzureOperationResponse
    {
        private VMTemplate _vMTemplate;

        /// <summary>
        /// Required. Gets the VM template.
        /// </summary>
        public VMTemplate VMTemplate
        {
            get { return this._vMTemplate; }
            set { this._vMTemplate = value; }
        }

        /// <summary>
        /// Initializes a new instance of the VMTemplateGetResponse class.
        /// </summary>
        public VMTemplateGetResponse()
        {
        }

        /// <summary>
        /// Initializes a new instance of the VMTemplateGetResponse class with
        /// required arguments.
        /// </summary>
        public VMTemplateGetResponse(VMTemplate vMTemplate)
            : this()
        {
            if (vMTemplate == null)
            {
                throw new ArgumentNullException("vMTemplate");
            }
            this.VMTemplate = vMTemplate;
        }
    }

    /// <summary>
    /// The response from the VMTemplate List operation.
    /// </summary>
    public partial class VMTemplateListResponse : AzureOperationResponse, IEnumerable<VMTemplate>
    {
        private IList<VMTemplate> _vMTemplates;

        /// <summary>
        /// Required. Gets the list of VM templates.
        /// </summary>
        public IList<VMTemplate> VMTemplates
        {
            get { return this._vMTemplates; }
            set { this._vMTemplates = value; }
        }

        /// <summary>
        /// Initializes a new instance of the VMTemplateListResponse class.
        /// </summary>
        public VMTemplateListResponse()
        {
            this.VMTemplates = new LazyList<VMTemplate>();
        }

        /// <summary>
        /// Initializes a new instance of the VMTemplateListResponse class with
        /// required arguments.
        /// </summary>
        public VMTemplateListResponse(IList<VMTemplate> vMTemplates)
            : this()
        {
            if (vMTemplates == null)
            {
                throw new ArgumentNullException("vMTemplates");
            }
            this.VMTemplates = vMTemplates;
        }

        /// <summary>
        /// Gets the sequence of VMTemplates.
        /// </summary>
        public IEnumerator<VMTemplate> GetEnumerator()
        {
            return this.VMTemplates.GetEnumerator();
        }

        /// <summary>
        /// Gets the sequence of VMTemplates.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }

    /// <summary>
    /// VM template properties information.
    /// </summary>
    public partial class VMTemplateProperties
    {
        private string _author;

        /// <summary>
        /// Optional. Gets the creator of the VM template.
        /// </summary>
        public string Author
        {
            get { return this._author; }
            set { this._author = value; }
        }

        private DateTime _creationDate;

        /// <summary>
        /// Optional. Gets the creation date of the VM template.
        /// </summary>
        public DateTime CreationDate
        {
            get { return this._creationDate; }
            set { this._creationDate = value; }
        }

        private string _description;

        /// <summary>
        /// Optional. Gets the description associated with the VM template.
        /// </summary>
        public string Description
        {
            get { return this._description; }
            set { this._description = value; }
        }

        private string _imageName;

        /// <summary>
        /// Optional. Gets the name of the image associated with the VM
        /// template.
        /// </summary>
        public string ImageName
        {
            get { return this._imageName; }
            set { this._imageName = value; }
        }

        private string _imageType;

        /// <summary>
        /// Optional. Gets the image type associated with the VM template.
        /// </summary>
        public string ImageType
        {
            get { return this._imageType; }
            set { this._imageType = value; }
        }

        private bool _isSysPrepped;

        /// <summary>
        /// Optional. Gets whether the image associated with the VM template is
        /// sysprepped.
        /// </summary>
        public bool IsSysPrepped
        {
            get { return this._isSysPrepped; }
            set { this._isSysPrepped = value; }
        }

        private string _labName;

        /// <summary>
        /// Optional. Gets the name of the lab associated with the VM template.
        /// </summary>
        public string LabName
        {
            get { return this._labName; }
            set { this._labName = value; }
        }

        private string _osType;

        /// <summary>
        /// Optional. Gets the operating system type associated with the VM
        /// template.
        /// </summary>
        public string OsType
        {
            get { return this._osType; }
            set { this._osType = value; }
        }

        private string _password;

        /// <summary>
        /// Optional. Gets the password associated with the VM template.
        /// </summary>
        public string Password
        {
            get { return this._password; }
            set { this._password = value; }
        }

        private string _provisioningState;

        /// <summary>
        /// Optional. Gets the provisioning state of the VM template.
        /// </summary>
        public string ProvisioningState
        {
            get { return this._provisioningState; }
            set { this._provisioningState = value; }
        }

        private string _userName;

        /// <summary>
        /// Optional. Gets the username associated with the VM template.
        /// </summary>
        public string UserName
        {
            get { return this._userName; }
            set { this._userName = value; }
        }

        /// <summary>
        /// Initializes a new instance of the VMTemplateProperties class.
        /// </summary>
        public VMTemplateProperties()
        {
        }
    }
}

namespace Microsoft.Azure.Management.DevTestLab
{
    /// <summary>
    /// Client for managing labs and environments.
    /// </summary>
    public static partial class DevTestLabManagementClientExtensions
    {
    }

    /// <summary>
    /// Client for managing labs and environments.
    /// </summary>
    public partial interface IDevTestLabManagementClient : IDisposable
    {
        /// <summary>
        /// The URI used as the base for all Service Management requests.
        /// </summary>
        Uri BaseUri
        {
            get; set;
        }

        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API. The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure. No anonymous requests are
        /// allowed.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; set;
        }

        /// <summary>
        /// Environment operations
        /// </summary>
        IEnvironmentOperations Environments
        {
            get;
        }

        /// <summary>
        /// Lab operations
        /// </summary>
        ILabOperations Labs
        {
            get;
        }

        /// <summary>
        /// VMTemplate operations
        /// </summary>
        IVMTemplateOperations VMTemplates
        {
            get;
        }
    }

    /// <summary>
    /// Client for managing labs and environments.
    /// </summary>
    public partial class DevTestLabManagementClient : ServiceClient<DevTestLabManagementClient>, IDevTestLabManagementClient
    {
        private Uri _baseUri;

        /// <summary>
        /// The URI used as the base for all Service Management requests.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
            set { this._baseUri = value; }
        }

        private SubscriptionCloudCredentials _credentials;

        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API. The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure. No anonymous requests are
        /// allowed.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
            set { this._credentials = value; }
        }

        private IEnvironmentOperations _environments;

        /// <summary>
        /// Environment operations
        /// </summary>
        public virtual IEnvironmentOperations Environments
        {
            get { return this._environments; }
        }

        private ILabOperations _labs;

        /// <summary>
        /// Lab operations
        /// </summary>
        public virtual ILabOperations Labs
        {
            get { return this._labs; }
        }

        private IVMTemplateOperations _vMTemplates;

        /// <summary>
        /// VMTemplate operations
        /// </summary>
        public virtual IVMTemplateOperations VMTemplates
        {
            get { return this._vMTemplates; }
        }

        /// <summary>
        /// Initializes a new instance of the DevTestLabManagementClient class.
        /// </summary>
        public DevTestLabManagementClient()
            : base()
        {
            this._environments = new EnvironmentOperations(this);
            this._labs = new LabOperations(this);
            this._vMTemplates = new VMTemplateOperations(this);
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }

        /// <summary>
        /// Initializes a new instance of the DevTestLabManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. When you create a Windows Azure subscription, it is
        /// uniquely identified by a subscription ID. The subscription ID
        /// forms part of the URI for every call that you make to the Service
        /// Management API. The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure. No anonymous requests are
        /// allowed.
        /// </param>
        /// <param name='baseUri'>
        /// Required. The URI used as the base for all Service Management
        /// requests.
        /// </param>
        public DevTestLabManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;

            this.Credentials.InitializeServiceClient(this);
        }

        /// <summary>
        /// Initializes a new instance of the DevTestLabManagementClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public DevTestLabManagementClient(HttpClient httpClient)
            : base(httpClient)
        {
            this._environments = new EnvironmentOperations(this);
            this._labs = new LabOperations(this);
            this._vMTemplates = new VMTemplateOperations(this);
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }

        /// <summary>
        /// Initializes a new instance of the DevTestLabManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. When you create a Windows Azure subscription, it is
        /// uniquely identified by a subscription ID. The subscription ID
        /// forms part of the URI for every call that you make to the Service
        /// Management API. The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure. No anonymous requests are
        /// allowed.
        /// </param>
        /// <param name='baseUri'>
        /// Required. The URI used as the base for all Service Management
        /// requests.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public DevTestLabManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;

            this.Credentials.InitializeServiceClient(this);
        }

        /// <summary>
        /// Clones properties from current instance to another
        /// DevTestLabManagementClient instance
        /// </summary>
        /// <param name='client'>
        /// Instance of DevTestLabManagementClient to clone to
        /// </param>
        protected override void Clone(ServiceClient<DevTestLabManagementClient> client)
        {
            base.Clone(client);

            if (client is DevTestLabManagementClient)
            {
                DevTestLabManagementClient clonedClient = ((DevTestLabManagementClient)client);

                clonedClient._credentials = this._credentials;
                clonedClient._baseUri = this._baseUri;

                clonedClient.Credentials.InitializeServiceClient(clonedClient);
            }
        }

        /// <summary>
        /// Parse enum values for type EnvironmentCreateOperationStatus.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static EnvironmentCreateOperationStatus ParseEnvironmentCreateOperationStatus(string value)
        {
            if ("Creating".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return EnvironmentCreateOperationStatus.Creating;
            }
            if ("Failed".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return EnvironmentCreateOperationStatus.Failed;
            }
            if ("Succeeded".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return EnvironmentCreateOperationStatus.Succeeded;
            }
            if ("TimedOut".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return EnvironmentCreateOperationStatus.TimedOut;
            }
            throw new ArgumentOutOfRangeException("value");
        }

        /// <summary>
        /// Convert an enum of type EnvironmentCreateOperationStatus to a
        /// string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string EnvironmentCreateOperationStatusToString(EnvironmentCreateOperationStatus value)
        {
            if (value == EnvironmentCreateOperationStatus.Creating)
            {
                return "Creating";
            }
            if (value == EnvironmentCreateOperationStatus.Failed)
            {
                return "Failed";
            }
            if (value == EnvironmentCreateOperationStatus.Succeeded)
            {
                return "Succeeded";
            }
            if (value == EnvironmentCreateOperationStatus.TimedOut)
            {
                return "TimedOut";
            }
            throw new ArgumentOutOfRangeException("value");
        }
    }

    /// <summary>
    /// Client for managing labs and environments.
    /// </summary>
    public static partial class EnvironmentOperationsExtensions
    {
        /// <summary>
        /// Begins creating a new environment with the specified parameters.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IEnvironmentOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the lab's resource group.
        /// </param>
        /// <param name='labName'>
        /// Required. The name of the lab.
        /// </param>
        /// <param name='parameters'>
        /// Required. The specifications for creating an environment in the lab.
        /// </param>
        /// <returns>
        /// The response from the Environment Create operation.
        /// </returns>
        public static EnvironmentCreateResponse BeginCreate(this IEnvironmentOperations operations, string resourceGroupName, string labName, EnvironmentCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((IEnvironmentOperations)s).BeginCreateAsync(resourceGroupName, labName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Begins creating a new environment with the specified parameters.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IEnvironmentOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the lab's resource group.
        /// </param>
        /// <param name='labName'>
        /// Required. The name of the lab.
        /// </param>
        /// <param name='parameters'>
        /// Required. The specifications for creating an environment in the lab.
        /// </param>
        /// <returns>
        /// The response from the Environment Create operation.
        /// </returns>
        public static Task<EnvironmentCreateResponse> BeginCreateAsync(this IEnvironmentOperations operations, string resourceGroupName, string labName, EnvironmentCreateParameters parameters)
        {
            return operations.BeginCreateAsync(resourceGroupName, labName, parameters, CancellationToken.None);
        }

        /// <summary>
        /// Creates a new environment with the specified parameters.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IEnvironmentOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the lab's resource group.
        /// </param>
        /// <param name='labName'>
        /// Required. The name of the lab.
        /// </param>
        /// <param name='parameters'>
        /// Required. The specifications for creating an environment in the lab.
        /// </param>
        /// <returns>
        /// The response from the Environment Create operation.
        /// </returns>
        public static EnvironmentCreateResponse Create(this IEnvironmentOperations operations, string resourceGroupName, string labName, EnvironmentCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((IEnvironmentOperations)s).CreateAsync(resourceGroupName, labName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a new environment with the specified parameters.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IEnvironmentOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the lab's resource group.
        /// </param>
        /// <param name='labName'>
        /// Required. The name of the lab.
        /// </param>
        /// <param name='parameters'>
        /// Required. The specifications for creating an environment in the lab.
        /// </param>
        /// <returns>
        /// The response from the Environment Create operation.
        /// </returns>
        public static Task<EnvironmentCreateResponse> CreateAsync(this IEnvironmentOperations operations, string resourceGroupName, string labName, EnvironmentCreateParameters parameters)
        {
            return operations.CreateAsync(resourceGroupName, labName, parameters, CancellationToken.None);
        }

        /// <summary>
        /// Gets the specified environment.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IEnvironmentOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the environment's resource group.
        /// </param>
        /// <param name='environmentName'>
        /// Required. The name of the environment.
        /// </param>
        /// <returns>
        /// The response from the Environment Get operation.
        /// </returns>
        public static EnvironmentGetResponse Get(this IEnvironmentOperations operations, string resourceGroupName, string environmentName)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((IEnvironmentOperations)s).GetAsync(resourceGroupName, environmentName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the specified environment.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IEnvironmentOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the environment's resource group.
        /// </param>
        /// <param name='environmentName'>
        /// Required. The name of the environment.
        /// </param>
        /// <returns>
        /// The response from the Environment Get operation.
        /// </returns>
        public static Task<EnvironmentGetResponse> GetAsync(this IEnvironmentOperations operations, string resourceGroupName, string environmentName)
        {
            return operations.GetAsync(resourceGroupName, environmentName, CancellationToken.None);
        }

        /// <summary>
        /// Gets the current status of the environment creation operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IEnvironmentOperations.
        /// </param>
        /// <param name='location'>
        /// Required. Location value returned by the BeginCreate() method.
        /// </param>
        /// <returns>
        /// The response from the Environment Create operation.
        /// </returns>
        public static EnvironmentCreateResponse GetCreateStatus(this IEnvironmentOperations operations, string location)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((IEnvironmentOperations)s).GetCreateStatusAsync(location);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the current status of the environment creation operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IEnvironmentOperations.
        /// </param>
        /// <param name='location'>
        /// Required. Location value returned by the BeginCreate() method.
        /// </param>
        /// <returns>
        /// The response from the Environment Create operation.
        /// </returns>
        public static Task<EnvironmentCreateResponse> GetCreateStatusAsync(this IEnvironmentOperations operations, string location)
        {
            return operations.GetCreateStatusAsync(location, CancellationToken.None);
        }

        /// <summary>
        /// Lists all environments under the current subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IEnvironmentOperations.
        /// </param>
        /// <returns>
        /// The response from the Environment List operation.
        /// </returns>
        public static EnvironmentListResponse ListAll(this IEnvironmentOperations operations)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((IEnvironmentOperations)s).ListAllAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all environments under the current subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IEnvironmentOperations.
        /// </param>
        /// <returns>
        /// The response from the Environment List operation.
        /// </returns>
        public static Task<EnvironmentListResponse> ListAllAsync(this IEnvironmentOperations operations)
        {
            return operations.ListAllAsync(CancellationToken.None);
        }

        /// <summary>
        /// Lists all environments under the specified lab.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IEnvironmentOperations.
        /// </param>
        /// <param name='labName'>
        /// Required. The name of the lab.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the labs's resource group.
        /// </param>
        /// <returns>
        /// The response from the Environment List operation.
        /// </returns>
        public static EnvironmentListResponse ListByLab(this IEnvironmentOperations operations, string labName, string resourceGroupName)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((IEnvironmentOperations)s).ListByLabAsync(labName, resourceGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all environments under the specified lab.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IEnvironmentOperations.
        /// </param>
        /// <param name='labName'>
        /// Required. The name of the lab.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the labs's resource group.
        /// </param>
        /// <returns>
        /// The response from the Environment List operation.
        /// </returns>
        public static Task<EnvironmentListResponse> ListByLabAsync(this IEnvironmentOperations operations, string labName, string resourceGroupName)
        {
            return operations.ListByLabAsync(labName, resourceGroupName, CancellationToken.None);
        }

        /// <summary>
        /// Lists all environments under specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IEnvironmentOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the environment's resource group.
        /// </param>
        /// <returns>
        /// The response from the Environment List operation.
        /// </returns>
        public static EnvironmentListResponse ListByResourceGroup(this IEnvironmentOperations operations, string resourceGroupName)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((IEnvironmentOperations)s).ListByResourceGroupAsync(resourceGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all environments under specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IEnvironmentOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the environment's resource group.
        /// </param>
        /// <returns>
        /// The response from the Environment List operation.
        /// </returns>
        public static Task<EnvironmentListResponse> ListByResourceGroupAsync(this IEnvironmentOperations operations, string resourceGroupName)
        {
            return operations.ListByResourceGroupAsync(resourceGroupName, CancellationToken.None);
        }

        /// <summary>
        /// Lists all environments under the specified subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IEnvironmentOperations.
        /// </param>
        /// <param name='subscriptionId'>
        /// Required. The Subscription Id.
        /// </param>
        /// <returns>
        /// The response from the Environment List operation.
        /// </returns>
        public static EnvironmentListResponse ListBySubscription(this IEnvironmentOperations operations, string subscriptionId)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((IEnvironmentOperations)s).ListBySubscriptionAsync(subscriptionId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all environments under the specified subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IEnvironmentOperations.
        /// </param>
        /// <param name='subscriptionId'>
        /// Required. The Subscription Id.
        /// </param>
        /// <returns>
        /// The response from the Environment List operation.
        /// </returns>
        public static Task<EnvironmentListResponse> ListBySubscriptionAsync(this IEnvironmentOperations operations, string subscriptionId)
        {
            return operations.ListBySubscriptionAsync(subscriptionId, CancellationToken.None);
        }
    }

    /// <summary>
    /// Environment operations
    /// </summary>
    public partial interface IEnvironmentOperations
    {
        /// <summary>
        /// Begins creating a new environment with the specified parameters.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the lab's resource group.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='parameters'>
        /// The specifications for creating an environment in the lab.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Environment Create operation.
        /// </returns>
        Task<EnvironmentCreateResponse> BeginCreateAsync(string resourceGroupName, string labName, EnvironmentCreateParameters parameters, CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new environment with the specified parameters.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the lab's resource group.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='parameters'>
        /// The specifications for creating an environment in the lab.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Environment Create operation.
        /// </returns>
        Task<EnvironmentCreateResponse> CreateAsync(string resourceGroupName, string labName, EnvironmentCreateParameters parameters, CancellationToken cancellationToken);

        /// <summary>
        /// Gets the specified environment.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the environment's resource group.
        /// </param>
        /// <param name='environmentName'>
        /// The name of the environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Environment Get operation.
        /// </returns>
        Task<EnvironmentGetResponse> GetAsync(string resourceGroupName, string environmentName, CancellationToken cancellationToken);

        /// <summary>
        /// Gets the current status of the environment creation operation.
        /// </summary>
        /// <param name='location'>
        /// Location value returned by the BeginCreate() method.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Environment Create operation.
        /// </returns>
        Task<EnvironmentCreateResponse> GetCreateStatusAsync(string location, CancellationToken cancellationToken);

        /// <summary>
        /// Lists all environments under the current subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Environment List operation.
        /// </returns>
        Task<EnvironmentListResponse> ListAllAsync(CancellationToken cancellationToken);

        /// <summary>
        /// Lists all environments under the specified lab.
        /// </summary>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the labs's resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Environment List operation.
        /// </returns>
        Task<EnvironmentListResponse> ListByLabAsync(string labName, string resourceGroupName, CancellationToken cancellationToken);

        /// <summary>
        /// Lists all environments under specified resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the environment's resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Environment List operation.
        /// </returns>
        Task<EnvironmentListResponse> ListByResourceGroupAsync(string resourceGroupName, CancellationToken cancellationToken);

        /// <summary>
        /// Lists all environments under the specified subscription.
        /// </summary>
        /// <param name='subscriptionId'>
        /// The Subscription Id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Environment List operation.
        /// </returns>
        Task<EnvironmentListResponse> ListBySubscriptionAsync(string subscriptionId, CancellationToken cancellationToken);
    }

    /// <summary>
    /// Environment operations
    /// </summary>
    internal partial class EnvironmentOperations : IServiceOperations<DevTestLabManagementClient>, IEnvironmentOperations
    {
        /// <summary>
        /// Initializes a new instance of the EnvironmentOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal EnvironmentOperations(DevTestLabManagementClient client)
        {
            this._client = client;
        }

        private DevTestLabManagementClient _client;

        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.DevTestLab.DevTestLabManagementClient.
        /// </summary>
        public DevTestLabManagementClient Client
        {
            get { return this._client; }
        }

        /// <summary>
        /// Begins creating a new environment with the specified parameters.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the lab's resource group.
        /// </param>
        /// <param name='labName'>
        /// Required. The name of the lab.
        /// </param>
        /// <param name='parameters'>
        /// Required. The specifications for creating an environment in the lab.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Environment Create operation.
        /// </returns>
        public async Task<EnvironmentCreateResponse> BeginCreateAsync(string resourceGroupName, string labName, EnvironmentCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (labName == null)
            {
                throw new ArgumentNullException("labName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            if (parameters.Name == null)
            {
                throw new ArgumentNullException("parameters.Name");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            if (parameters.ResourceType == null)
            {
                throw new ArgumentNullException("parameters.ResourceType");
            }

            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("labName", labName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateAsync", tracingParameters);
            }

            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DevTestLab";
            url = url + "/labs/";
            url = url + Uri.EscapeDataString(labName);
            url = url + "/CreateEnvironment";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-21-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);

                // Set Headers

                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);

                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;

                JObject environmentCreateParametersValue = new JObject();
                requestDoc = environmentCreateParametersValue;

                environmentCreateParametersValue["name"] = parameters.Name;

                environmentCreateParametersValue["type"] = parameters.ResourceType;

                environmentCreateParametersValue["location"] = parameters.Location;

                if (parameters.Tags != null)
                {
                    environmentCreateParametersValue["tags"] = parameters.Tags.ToString();
                }

                JObject propertiesValue = new JObject();
                environmentCreateParametersValue["properties"] = propertiesValue;

                if (parameters.Properties.LabId != null)
                {
                    propertiesValue["labid"] = parameters.Properties.LabId;
                }

                if (parameters.Properties.Notes != null)
                {
                    propertiesValue["notes"] = parameters.Properties.Notes;
                }

                if (parameters.Properties.VMParameters != null)
                {
                    if (parameters.Properties.VMParameters is ILazyCollection == false || ((ILazyCollection)parameters.Properties.VMParameters).IsInitialized)
                    {
                        JArray vmsArray = new JArray();
                        foreach (VMCreateParameters vmsItem in parameters.Properties.VMParameters)
                        {
                            JObject vMCreateParametersValue = new JObject();
                            vmsArray.Add(vMCreateParametersValue);

                            if (vmsItem.Name != null)
                            {
                                vMCreateParametersValue["name"] = vmsItem.Name;
                            }

                            if (vmsItem.VMTemplateName != null)
                            {
                                vMCreateParametersValue["vmTemplateName"] = vmsItem.VMTemplateName;
                            }

                            if (vmsItem.Size != null)
                            {
                                vMCreateParametersValue["size"] = vmsItem.Size;
                            }

                            if (vmsItem.PowerState != null)
                            {
                                vMCreateParametersValue["powerState"] = vmsItem.PowerState;
                            }

                            if (vmsItem.UserName != null)
                            {
                                vMCreateParametersValue["userName"] = vmsItem.UserName;
                            }

                            if (vmsItem.Password != null)
                            {
                                vMCreateParametersValue["password"] = vmsItem.Password;
                            }

                            if (vmsItem.SshKey != null)
                            {
                                vMCreateParametersValue["sshKey"] = vmsItem.SshKey;
                            }

                            vMCreateParametersValue["isAuthenticationWithSshKey"] = vmsItem.IsAuthenticationWithSshKey;

                            if (vmsItem.Artifacts != null)
                            {
                                if (vmsItem.Artifacts is ILazyCollection == false || ((ILazyCollection)vmsItem.Artifacts).IsInitialized)
                                {
                                    JArray artifactsArray = new JArray();
                                    foreach (ArtifactDeploymentParameters artifactsItem in vmsItem.Artifacts)
                                    {
                                    }
                                    vMCreateParametersValue["artifacts"] = artifactsArray;
                                }
                            }
                        }
                        propertiesValue["vms"] = vmsArray;
                    }
                }

                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");

                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }

                    // Create Result
                    EnvironmentCreateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new EnvironmentCreateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }

                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken statusValue = responseDoc["status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                EnvironmentCreateOperationStatus statusInstance = DevTestLabManagementClient.ParseEnvironmentCreateOperationStatus(((string)statusValue));
                                result.Status = statusInstance;
                            }
                        }

                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }

                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }

        /// <summary>
        /// Creates a new environment with the specified parameters.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the lab's resource group.
        /// </param>
        /// <param name='labName'>
        /// Required. The name of the lab.
        /// </param>
        /// <param name='parameters'>
        /// Required. The specifications for creating an environment in the lab.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Environment Create operation.
        /// </returns>
        public async Task<EnvironmentCreateResponse> CreateAsync(string resourceGroupName, string labName, EnvironmentCreateParameters parameters, CancellationToken cancellationToken)
        {
            DevTestLabManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("labName", labName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }

            cancellationToken.ThrowIfCancellationRequested();
            EnvironmentCreateResponse response = await client.Environments.BeginCreateAsync(resourceGroupName, labName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == EnvironmentCreateOperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            EnvironmentCreateResponse result = await client.Environments.GetCreateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 15;
            while (result.Status == EnvironmentCreateOperationStatus.Creating)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Environments.GetCreateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 15;
            }

            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }

            return result;
        }

        /// <summary>
        /// Gets the specified environment.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the environment's resource group.
        /// </param>
        /// <param name='environmentName'>
        /// Required. The name of the environment.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Environment Get operation.
        /// </returns>
        public async Task<EnvironmentGetResponse> GetAsync(string resourceGroupName, string environmentName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (environmentName == null)
            {
                throw new ArgumentNullException("environmentName");
            }

            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("environmentName", environmentName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }

            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DevTestLab";
            url = url + "/environments/";
            url = url + Uri.EscapeDataString(environmentName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-21-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);

                // Set Headers

                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);

                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }

                    // Create Result
                    EnvironmentGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EnvironmentGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }

                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Environment environmentInstance = new Environment();
                        result.Environment = environmentInstance;

                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            environmentInstance.Id = idInstance;
                        }

                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            environmentInstance.Name = nameInstance;
                        }

                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            environmentInstance.ResourceType = typeInstance;
                        }

                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            environmentInstance.Location = locationInstance;
                        }

                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            EnvironmentProperties propertiesInstance = new EnvironmentProperties();
                            environmentInstance.Properties = propertiesInstance;

                            JToken labidValue = propertiesValue["labid"];
                            if (labidValue != null && labidValue.Type != JTokenType.Null)
                            {
                                string labidInstance = ((string)labidValue);
                                propertiesInstance.LabId = labidInstance;
                            }

                            JToken vmsArray = propertiesValue["vms"];
                            if (vmsArray != null && vmsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken vmsValue in ((JArray)vmsArray))
                                {
                                    VM vmInstance = new VM();
                                    propertiesInstance.VMs.Add(vmInstance);

                                    JToken nameValue2 = vmsValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        vmInstance.Name = nameInstance2;
                                    }

                                    JToken vmTemplateNameValue = vmsValue["vmTemplateName"];
                                    if (vmTemplateNameValue != null && vmTemplateNameValue.Type != JTokenType.Null)
                                    {
                                        string vmTemplateNameInstance = ((string)vmTemplateNameValue);
                                        vmInstance.VMTemplateName = vmTemplateNameInstance;
                                    }

                                    JToken sizeValue = vmsValue["size"];
                                    if (sizeValue != null && sizeValue.Type != JTokenType.Null)
                                    {
                                        string sizeInstance = ((string)sizeValue);
                                        vmInstance.Size = sizeInstance;
                                    }

                                    JToken userNameValue = vmsValue["userName"];
                                    if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                    {
                                        string userNameInstance = ((string)userNameValue);
                                        vmInstance.UserName = userNameInstance;
                                    }

                                    JToken fqdnValue = vmsValue["fqdn"];
                                    if (fqdnValue != null && fqdnValue.Type != JTokenType.Null)
                                    {
                                        string fqdnInstance = ((string)fqdnValue);
                                        vmInstance.Fqdn = fqdnInstance;
                                    }

                                    JToken builtInUserNameValue = vmsValue["builtInUserName"];
                                    if (builtInUserNameValue != null && builtInUserNameValue.Type != JTokenType.Null)
                                    {
                                        string builtInUserNameInstance = ((string)builtInUserNameValue);
                                        vmInstance.BuiltInUserName = builtInUserNameInstance;
                                    }

                                    JToken artifactDeploymentStatusValue = vmsValue["artifactDeploymentStatus"];
                                    if (artifactDeploymentStatusValue != null && artifactDeploymentStatusValue.Type != JTokenType.Null)
                                    {
                                        ArtifactDeploymentStatus artifactDeploymentStatusInstance = new ArtifactDeploymentStatus();
                                        vmInstance.ArtifactDeploymentStatus = artifactDeploymentStatusInstance;

                                        JToken artifactsAppliedValue = artifactDeploymentStatusValue["artifactsApplied"];
                                        if (artifactsAppliedValue != null && artifactsAppliedValue.Type != JTokenType.Null)
                                        {
                                            int artifactsAppliedInstance = ((int)artifactsAppliedValue);
                                            artifactDeploymentStatusInstance.ArtifactsApplied = artifactsAppliedInstance;
                                        }

                                        JToken totalArtifactsValue = artifactDeploymentStatusValue["totalArtifacts"];
                                        if (totalArtifactsValue != null && totalArtifactsValue.Type != JTokenType.Null)
                                        {
                                            int totalArtifactsInstance = ((int)totalArtifactsValue);
                                            artifactDeploymentStatusInstance.TotalArtifacts = totalArtifactsInstance;
                                        }
                                    }
                                }
                            }

                            JToken notesValue = propertiesValue["notes"];
                            if (notesValue != null && notesValue.Type != JTokenType.Null)
                            {
                                string notesInstance = ((string)notesValue);
                                propertiesInstance.Notes = notesInstance;
                            }

                            JToken ownerObjectIdValue = propertiesValue["ownerObjectId"];
                            if (ownerObjectIdValue != null && ownerObjectIdValue.Type != JTokenType.Null)
                            {
                                string ownerObjectIdInstance = ((string)ownerObjectIdValue);
                                propertiesInstance.OwnerObjectId = ownerObjectIdInstance;
                            }

                            JToken provisioningStateValue = propertiesValue["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                        }
                    }

                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }

                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }

        /// <summary>
        /// Gets the current status of the environment creation operation.
        /// </summary>
        /// <param name='location'>
        /// Required. Location value returned by the BeginCreate() method.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Environment Create operation.
        /// </returns>
        public async Task<EnvironmentCreateResponse> GetCreateStatusAsync(string location, CancellationToken cancellationToken)
        {
            // Validate
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }

            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                TracingAdapter.Enter(invocationId, this, "GetCreateStatusAsync", tracingParameters);
            }

            // Construct URL
            string url = "";
            url = url + location;
            url = url.Replace(" ", "%20");

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);

                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-05-21-preview");

                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);

                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }

                    // Create Result
                    EnvironmentCreateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new EnvironmentCreateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }

                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken statusValue = responseDoc["status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                EnvironmentCreateOperationStatus statusInstance = DevTestLabManagementClient.ParseEnvironmentCreateOperationStatus(((string)statusValue));
                                result.Status = statusInstance;
                            }
                        }

                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }

                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }

        /// <summary>
        /// Lists all environments under the current subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Environment List operation.
        /// </returns>
        public async Task<EnvironmentListResponse> ListAllAsync(CancellationToken cancellationToken)
        {
            // Validate

            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAllAsync", tracingParameters);
            }

            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.DevTestLab";
            url = url + "/environments";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-21-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);

                // Set Headers

                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);

                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }

                    // Create Result
                    EnvironmentListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EnvironmentListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }

                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                Environment environmentInstance = new Environment();
                                result.Environments.Add(environmentInstance);

                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    environmentInstance.Id = idInstance;
                                }

                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    environmentInstance.Name = nameInstance;
                                }

                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    environmentInstance.ResourceType = typeInstance;
                                }

                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    environmentInstance.Location = locationInstance;
                                }

                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    EnvironmentProperties propertiesInstance = new EnvironmentProperties();
                                    environmentInstance.Properties = propertiesInstance;

                                    JToken labidValue = propertiesValue["labid"];
                                    if (labidValue != null && labidValue.Type != JTokenType.Null)
                                    {
                                        string labidInstance = ((string)labidValue);
                                        propertiesInstance.LabId = labidInstance;
                                    }

                                    JToken vmsArray = propertiesValue["vms"];
                                    if (vmsArray != null && vmsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken vmsValue in ((JArray)vmsArray))
                                        {
                                            VM vmInstance = new VM();
                                            propertiesInstance.VMs.Add(vmInstance);

                                            JToken nameValue2 = vmsValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                vmInstance.Name = nameInstance2;
                                            }

                                            JToken vmTemplateNameValue = vmsValue["vmTemplateName"];
                                            if (vmTemplateNameValue != null && vmTemplateNameValue.Type != JTokenType.Null)
                                            {
                                                string vmTemplateNameInstance = ((string)vmTemplateNameValue);
                                                vmInstance.VMTemplateName = vmTemplateNameInstance;
                                            }

                                            JToken sizeValue = vmsValue["size"];
                                            if (sizeValue != null && sizeValue.Type != JTokenType.Null)
                                            {
                                                string sizeInstance = ((string)sizeValue);
                                                vmInstance.Size = sizeInstance;
                                            }

                                            JToken userNameValue = vmsValue["userName"];
                                            if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                            {
                                                string userNameInstance = ((string)userNameValue);
                                                vmInstance.UserName = userNameInstance;
                                            }

                                            JToken fqdnValue = vmsValue["fqdn"];
                                            if (fqdnValue != null && fqdnValue.Type != JTokenType.Null)
                                            {
                                                string fqdnInstance = ((string)fqdnValue);
                                                vmInstance.Fqdn = fqdnInstance;
                                            }

                                            JToken builtInUserNameValue = vmsValue["builtInUserName"];
                                            if (builtInUserNameValue != null && builtInUserNameValue.Type != JTokenType.Null)
                                            {
                                                string builtInUserNameInstance = ((string)builtInUserNameValue);
                                                vmInstance.BuiltInUserName = builtInUserNameInstance;
                                            }

                                            JToken artifactDeploymentStatusValue = vmsValue["artifactDeploymentStatus"];
                                            if (artifactDeploymentStatusValue != null && artifactDeploymentStatusValue.Type != JTokenType.Null)
                                            {
                                                ArtifactDeploymentStatus artifactDeploymentStatusInstance = new ArtifactDeploymentStatus();
                                                vmInstance.ArtifactDeploymentStatus = artifactDeploymentStatusInstance;

                                                JToken artifactsAppliedValue = artifactDeploymentStatusValue["artifactsApplied"];
                                                if (artifactsAppliedValue != null && artifactsAppliedValue.Type != JTokenType.Null)
                                                {
                                                    int artifactsAppliedInstance = ((int)artifactsAppliedValue);
                                                    artifactDeploymentStatusInstance.ArtifactsApplied = artifactsAppliedInstance;
                                                }

                                                JToken totalArtifactsValue = artifactDeploymentStatusValue["totalArtifacts"];
                                                if (totalArtifactsValue != null && totalArtifactsValue.Type != JTokenType.Null)
                                                {
                                                    int totalArtifactsInstance = ((int)totalArtifactsValue);
                                                    artifactDeploymentStatusInstance.TotalArtifacts = totalArtifactsInstance;
                                                }
                                            }
                                        }
                                    }

                                    JToken notesValue = propertiesValue["notes"];
                                    if (notesValue != null && notesValue.Type != JTokenType.Null)
                                    {
                                        string notesInstance = ((string)notesValue);
                                        propertiesInstance.Notes = notesInstance;
                                    }

                                    JToken ownerObjectIdValue = propertiesValue["ownerObjectId"];
                                    if (ownerObjectIdValue != null && ownerObjectIdValue.Type != JTokenType.Null)
                                    {
                                        string ownerObjectIdInstance = ((string)ownerObjectIdValue);
                                        propertiesInstance.OwnerObjectId = ownerObjectIdInstance;
                                    }

                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                }
                            }
                        }
                    }

                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }

                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }

        /// <summary>
        /// Lists all environments under the specified lab.
        /// </summary>
        /// <param name='labName'>
        /// Required. The name of the lab.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the labs's resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Environment List operation.
        /// </returns>
        public async Task<EnvironmentListResponse> ListByLabAsync(string labName, string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (labName == null)
            {
                throw new ArgumentNullException("labName");
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }

            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("labName", labName);
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListByLabAsync", tracingParameters);
            }

            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.DevTestLab";
            url = url + "/environments";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-21-preview");
            List<string> odataFilter = new List<string>();
            if (this.Client.Credentials.SubscriptionId != null)
            {
                odataFilter.Add("tolower(Properties/LabId) eq tolower('/subscriptions/" + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId) + "/resourceGroups/" + Uri.EscapeDataString(resourceGroupName) + "/providers/Microsoft.DevTestLab/labs/" + Uri.EscapeDataString(labName) + "')");
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);

                // Set Headers

                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);

                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }

                    // Create Result
                    EnvironmentListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EnvironmentListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }

                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                Environment environmentInstance = new Environment();
                                result.Environments.Add(environmentInstance);

                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    environmentInstance.Id = idInstance;
                                }

                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    environmentInstance.Name = nameInstance;
                                }

                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    environmentInstance.ResourceType = typeInstance;
                                }

                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    environmentInstance.Location = locationInstance;
                                }

                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    EnvironmentProperties propertiesInstance = new EnvironmentProperties();
                                    environmentInstance.Properties = propertiesInstance;

                                    JToken labidValue = propertiesValue["labid"];
                                    if (labidValue != null && labidValue.Type != JTokenType.Null)
                                    {
                                        string labidInstance = ((string)labidValue);
                                        propertiesInstance.LabId = labidInstance;
                                    }

                                    JToken vmsArray = propertiesValue["vms"];
                                    if (vmsArray != null && vmsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken vmsValue in ((JArray)vmsArray))
                                        {
                                            VM vmInstance = new VM();
                                            propertiesInstance.VMs.Add(vmInstance);

                                            JToken nameValue2 = vmsValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                vmInstance.Name = nameInstance2;
                                            }

                                            JToken vmTemplateNameValue = vmsValue["vmTemplateName"];
                                            if (vmTemplateNameValue != null && vmTemplateNameValue.Type != JTokenType.Null)
                                            {
                                                string vmTemplateNameInstance = ((string)vmTemplateNameValue);
                                                vmInstance.VMTemplateName = vmTemplateNameInstance;
                                            }

                                            JToken sizeValue = vmsValue["size"];
                                            if (sizeValue != null && sizeValue.Type != JTokenType.Null)
                                            {
                                                string sizeInstance = ((string)sizeValue);
                                                vmInstance.Size = sizeInstance;
                                            }

                                            JToken userNameValue = vmsValue["userName"];
                                            if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                            {
                                                string userNameInstance = ((string)userNameValue);
                                                vmInstance.UserName = userNameInstance;
                                            }

                                            JToken fqdnValue = vmsValue["fqdn"];
                                            if (fqdnValue != null && fqdnValue.Type != JTokenType.Null)
                                            {
                                                string fqdnInstance = ((string)fqdnValue);
                                                vmInstance.Fqdn = fqdnInstance;
                                            }

                                            JToken builtInUserNameValue = vmsValue["builtInUserName"];
                                            if (builtInUserNameValue != null && builtInUserNameValue.Type != JTokenType.Null)
                                            {
                                                string builtInUserNameInstance = ((string)builtInUserNameValue);
                                                vmInstance.BuiltInUserName = builtInUserNameInstance;
                                            }

                                            JToken artifactDeploymentStatusValue = vmsValue["artifactDeploymentStatus"];
                                            if (artifactDeploymentStatusValue != null && artifactDeploymentStatusValue.Type != JTokenType.Null)
                                            {
                                                ArtifactDeploymentStatus artifactDeploymentStatusInstance = new ArtifactDeploymentStatus();
                                                vmInstance.ArtifactDeploymentStatus = artifactDeploymentStatusInstance;

                                                JToken artifactsAppliedValue = artifactDeploymentStatusValue["artifactsApplied"];
                                                if (artifactsAppliedValue != null && artifactsAppliedValue.Type != JTokenType.Null)
                                                {
                                                    int artifactsAppliedInstance = ((int)artifactsAppliedValue);
                                                    artifactDeploymentStatusInstance.ArtifactsApplied = artifactsAppliedInstance;
                                                }

                                                JToken totalArtifactsValue = artifactDeploymentStatusValue["totalArtifacts"];
                                                if (totalArtifactsValue != null && totalArtifactsValue.Type != JTokenType.Null)
                                                {
                                                    int totalArtifactsInstance = ((int)totalArtifactsValue);
                                                    artifactDeploymentStatusInstance.TotalArtifacts = totalArtifactsInstance;
                                                }
                                            }
                                        }
                                    }

                                    JToken notesValue = propertiesValue["notes"];
                                    if (notesValue != null && notesValue.Type != JTokenType.Null)
                                    {
                                        string notesInstance = ((string)notesValue);
                                        propertiesInstance.Notes = notesInstance;
                                    }

                                    JToken ownerObjectIdValue = propertiesValue["ownerObjectId"];
                                    if (ownerObjectIdValue != null && ownerObjectIdValue.Type != JTokenType.Null)
                                    {
                                        string ownerObjectIdInstance = ((string)ownerObjectIdValue);
                                        propertiesInstance.OwnerObjectId = ownerObjectIdInstance;
                                    }

                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                }
                            }
                        }
                    }

                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }

                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }

        /// <summary>
        /// Lists all environments under specified resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the environment's resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Environment List operation.
        /// </returns>
        public async Task<EnvironmentListResponse> ListByResourceGroupAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }

            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListByResourceGroupAsync", tracingParameters);
            }

            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DevTestLab";
            url = url + "/environments";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-21-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);

                // Set Headers

                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);

                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }

                    // Create Result
                    EnvironmentListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EnvironmentListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }

                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                Environment environmentInstance = new Environment();
                                result.Environments.Add(environmentInstance);

                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    environmentInstance.Id = idInstance;
                                }

                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    environmentInstance.Name = nameInstance;
                                }

                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    environmentInstance.ResourceType = typeInstance;
                                }

                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    environmentInstance.Location = locationInstance;
                                }

                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    EnvironmentProperties propertiesInstance = new EnvironmentProperties();
                                    environmentInstance.Properties = propertiesInstance;

                                    JToken labidValue = propertiesValue["labid"];
                                    if (labidValue != null && labidValue.Type != JTokenType.Null)
                                    {
                                        string labidInstance = ((string)labidValue);
                                        propertiesInstance.LabId = labidInstance;
                                    }

                                    JToken vmsArray = propertiesValue["vms"];
                                    if (vmsArray != null && vmsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken vmsValue in ((JArray)vmsArray))
                                        {
                                            VM vmInstance = new VM();
                                            propertiesInstance.VMs.Add(vmInstance);

                                            JToken nameValue2 = vmsValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                vmInstance.Name = nameInstance2;
                                            }

                                            JToken vmTemplateNameValue = vmsValue["vmTemplateName"];
                                            if (vmTemplateNameValue != null && vmTemplateNameValue.Type != JTokenType.Null)
                                            {
                                                string vmTemplateNameInstance = ((string)vmTemplateNameValue);
                                                vmInstance.VMTemplateName = vmTemplateNameInstance;
                                            }

                                            JToken sizeValue = vmsValue["size"];
                                            if (sizeValue != null && sizeValue.Type != JTokenType.Null)
                                            {
                                                string sizeInstance = ((string)sizeValue);
                                                vmInstance.Size = sizeInstance;
                                            }

                                            JToken userNameValue = vmsValue["userName"];
                                            if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                            {
                                                string userNameInstance = ((string)userNameValue);
                                                vmInstance.UserName = userNameInstance;
                                            }

                                            JToken fqdnValue = vmsValue["fqdn"];
                                            if (fqdnValue != null && fqdnValue.Type != JTokenType.Null)
                                            {
                                                string fqdnInstance = ((string)fqdnValue);
                                                vmInstance.Fqdn = fqdnInstance;
                                            }

                                            JToken builtInUserNameValue = vmsValue["builtInUserName"];
                                            if (builtInUserNameValue != null && builtInUserNameValue.Type != JTokenType.Null)
                                            {
                                                string builtInUserNameInstance = ((string)builtInUserNameValue);
                                                vmInstance.BuiltInUserName = builtInUserNameInstance;
                                            }

                                            JToken artifactDeploymentStatusValue = vmsValue["artifactDeploymentStatus"];
                                            if (artifactDeploymentStatusValue != null && artifactDeploymentStatusValue.Type != JTokenType.Null)
                                            {
                                                ArtifactDeploymentStatus artifactDeploymentStatusInstance = new ArtifactDeploymentStatus();
                                                vmInstance.ArtifactDeploymentStatus = artifactDeploymentStatusInstance;

                                                JToken artifactsAppliedValue = artifactDeploymentStatusValue["artifactsApplied"];
                                                if (artifactsAppliedValue != null && artifactsAppliedValue.Type != JTokenType.Null)
                                                {
                                                    int artifactsAppliedInstance = ((int)artifactsAppliedValue);
                                                    artifactDeploymentStatusInstance.ArtifactsApplied = artifactsAppliedInstance;
                                                }

                                                JToken totalArtifactsValue = artifactDeploymentStatusValue["totalArtifacts"];
                                                if (totalArtifactsValue != null && totalArtifactsValue.Type != JTokenType.Null)
                                                {
                                                    int totalArtifactsInstance = ((int)totalArtifactsValue);
                                                    artifactDeploymentStatusInstance.TotalArtifacts = totalArtifactsInstance;
                                                }
                                            }
                                        }
                                    }

                                    JToken notesValue = propertiesValue["notes"];
                                    if (notesValue != null && notesValue.Type != JTokenType.Null)
                                    {
                                        string notesInstance = ((string)notesValue);
                                        propertiesInstance.Notes = notesInstance;
                                    }

                                    JToken ownerObjectIdValue = propertiesValue["ownerObjectId"];
                                    if (ownerObjectIdValue != null && ownerObjectIdValue.Type != JTokenType.Null)
                                    {
                                        string ownerObjectIdInstance = ((string)ownerObjectIdValue);
                                        propertiesInstance.OwnerObjectId = ownerObjectIdInstance;
                                    }

                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                }
                            }
                        }
                    }

                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }

                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }

        /// <summary>
        /// Lists all environments under the specified subscription.
        /// </summary>
        /// <param name='subscriptionId'>
        /// Required. The Subscription Id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Environment List operation.
        /// </returns>
        public async Task<EnvironmentListResponse> ListBySubscriptionAsync(string subscriptionId, CancellationToken cancellationToken)
        {
            // Validate
            if (subscriptionId == null)
            {
                throw new ArgumentNullException("subscriptionId");
            }

            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("subscriptionId", subscriptionId);
                TracingAdapter.Enter(invocationId, this, "ListBySubscriptionAsync", tracingParameters);
            }

            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            url = url + Uri.EscapeDataString(subscriptionId);
            url = url + "/providers/";
            url = url + "Microsoft.DevTestLab";
            url = url + "/environments";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-21-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);

                // Set Headers

                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);

                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }

                    // Create Result
                    EnvironmentListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EnvironmentListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }

                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                Environment environmentInstance = new Environment();
                                result.Environments.Add(environmentInstance);

                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    environmentInstance.Id = idInstance;
                                }

                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    environmentInstance.Name = nameInstance;
                                }

                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    environmentInstance.ResourceType = typeInstance;
                                }

                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    environmentInstance.Location = locationInstance;
                                }

                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    EnvironmentProperties propertiesInstance = new EnvironmentProperties();
                                    environmentInstance.Properties = propertiesInstance;

                                    JToken labidValue = propertiesValue["labid"];
                                    if (labidValue != null && labidValue.Type != JTokenType.Null)
                                    {
                                        string labidInstance = ((string)labidValue);
                                        propertiesInstance.LabId = labidInstance;
                                    }

                                    JToken vmsArray = propertiesValue["vms"];
                                    if (vmsArray != null && vmsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken vmsValue in ((JArray)vmsArray))
                                        {
                                            VM vmInstance = new VM();
                                            propertiesInstance.VMs.Add(vmInstance);

                                            JToken nameValue2 = vmsValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                vmInstance.Name = nameInstance2;
                                            }

                                            JToken vmTemplateNameValue = vmsValue["vmTemplateName"];
                                            if (vmTemplateNameValue != null && vmTemplateNameValue.Type != JTokenType.Null)
                                            {
                                                string vmTemplateNameInstance = ((string)vmTemplateNameValue);
                                                vmInstance.VMTemplateName = vmTemplateNameInstance;
                                            }

                                            JToken sizeValue = vmsValue["size"];
                                            if (sizeValue != null && sizeValue.Type != JTokenType.Null)
                                            {
                                                string sizeInstance = ((string)sizeValue);
                                                vmInstance.Size = sizeInstance;
                                            }

                                            JToken userNameValue = vmsValue["userName"];
                                            if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                            {
                                                string userNameInstance = ((string)userNameValue);
                                                vmInstance.UserName = userNameInstance;
                                            }

                                            JToken fqdnValue = vmsValue["fqdn"];
                                            if (fqdnValue != null && fqdnValue.Type != JTokenType.Null)
                                            {
                                                string fqdnInstance = ((string)fqdnValue);
                                                vmInstance.Fqdn = fqdnInstance;
                                            }

                                            JToken builtInUserNameValue = vmsValue["builtInUserName"];
                                            if (builtInUserNameValue != null && builtInUserNameValue.Type != JTokenType.Null)
                                            {
                                                string builtInUserNameInstance = ((string)builtInUserNameValue);
                                                vmInstance.BuiltInUserName = builtInUserNameInstance;
                                            }

                                            JToken artifactDeploymentStatusValue = vmsValue["artifactDeploymentStatus"];
                                            if (artifactDeploymentStatusValue != null && artifactDeploymentStatusValue.Type != JTokenType.Null)
                                            {
                                                ArtifactDeploymentStatus artifactDeploymentStatusInstance = new ArtifactDeploymentStatus();
                                                vmInstance.ArtifactDeploymentStatus = artifactDeploymentStatusInstance;

                                                JToken artifactsAppliedValue = artifactDeploymentStatusValue["artifactsApplied"];
                                                if (artifactsAppliedValue != null && artifactsAppliedValue.Type != JTokenType.Null)
                                                {
                                                    int artifactsAppliedInstance = ((int)artifactsAppliedValue);
                                                    artifactDeploymentStatusInstance.ArtifactsApplied = artifactsAppliedInstance;
                                                }

                                                JToken totalArtifactsValue = artifactDeploymentStatusValue["totalArtifacts"];
                                                if (totalArtifactsValue != null && totalArtifactsValue.Type != JTokenType.Null)
                                                {
                                                    int totalArtifactsInstance = ((int)totalArtifactsValue);
                                                    artifactDeploymentStatusInstance.TotalArtifacts = totalArtifactsInstance;
                                                }
                                            }
                                        }
                                    }

                                    JToken notesValue = propertiesValue["notes"];
                                    if (notesValue != null && notesValue.Type != JTokenType.Null)
                                    {
                                        string notesInstance = ((string)notesValue);
                                        propertiesInstance.Notes = notesInstance;
                                    }

                                    JToken ownerObjectIdValue = propertiesValue["ownerObjectId"];
                                    if (ownerObjectIdValue != null && ownerObjectIdValue.Type != JTokenType.Null)
                                    {
                                        string ownerObjectIdInstance = ((string)ownerObjectIdValue);
                                        propertiesInstance.OwnerObjectId = ownerObjectIdInstance;
                                    }

                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                }
                            }
                        }
                    }

                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }

                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Client for managing labs and environments.
    /// </summary>
    public static partial class LabOperationsExtensions
    {
        /// <summary>
        /// Gets the specified lab.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.ILabOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the lab's resource group.
        /// </param>
        /// <param name='labName'>
        /// Required. The name of the lab.
        /// </param>
        /// <returns>
        /// The response from the Lab Get operation.
        /// </returns>
        public static LabGetResponse Get(this ILabOperations operations, string resourceGroupName, string labName)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((ILabOperations)s).GetAsync(resourceGroupName, labName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the specified lab.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.ILabOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the lab's resource group.
        /// </param>
        /// <param name='labName'>
        /// Required. The name of the lab.
        /// </param>
        /// <returns>
        /// The response from the Lab Get operation.
        /// </returns>
        public static Task<LabGetResponse> GetAsync(this ILabOperations operations, string resourceGroupName, string labName)
        {
            return operations.GetAsync(resourceGroupName, labName, CancellationToken.None);
        }

        /// <summary>
        /// Lists all labs under the current subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.ILabOperations.
        /// </param>
        /// <returns>
        /// The response from the Lab List operation.
        /// </returns>
        public static LabListResponse ListAll(this ILabOperations operations)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((ILabOperations)s).ListAllAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all labs under the current subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.ILabOperations.
        /// </param>
        /// <returns>
        /// The response from the Lab List operation.
        /// </returns>
        public static Task<LabListResponse> ListAllAsync(this ILabOperations operations)
        {
            return operations.ListAllAsync(CancellationToken.None);
        }

        /// <summary>
        /// Lists all labs in the specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.ILabOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the lab's resource group.
        /// </param>
        /// <returns>
        /// The response from the Lab List operation.
        /// </returns>
        public static LabListResponse ListByResourceGroup(this ILabOperations operations, string resourceGroupName)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((ILabOperations)s).ListByResourceGroupAsync(resourceGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all labs in the specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.ILabOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the lab's resource group.
        /// </param>
        /// <returns>
        /// The response from the Lab List operation.
        /// </returns>
        public static Task<LabListResponse> ListByResourceGroupAsync(this ILabOperations operations, string resourceGroupName)
        {
            return operations.ListByResourceGroupAsync(resourceGroupName, CancellationToken.None);
        }

        /// <summary>
        /// Lists all labs under the specified subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.ILabOperations.
        /// </param>
        /// <param name='subscriptionId'>
        /// Required. The Subscription Id.
        /// </param>
        /// <returns>
        /// The response from the Lab List operation.
        /// </returns>
        public static LabListResponse ListBySubscription(this ILabOperations operations, string subscriptionId)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((ILabOperations)s).ListBySubscriptionAsync(subscriptionId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all labs under the specified subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.ILabOperations.
        /// </param>
        /// <param name='subscriptionId'>
        /// Required. The Subscription Id.
        /// </param>
        /// <returns>
        /// The response from the Lab List operation.
        /// </returns>
        public static Task<LabListResponse> ListBySubscriptionAsync(this ILabOperations operations, string subscriptionId)
        {
            return operations.ListBySubscriptionAsync(subscriptionId, CancellationToken.None);
        }
    }

    /// <summary>
    /// Lab operations
    /// </summary>
    public partial interface ILabOperations
    {
        /// <summary>
        /// Gets the specified lab.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the lab's resource group.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Lab Get operation.
        /// </returns>
        Task<LabGetResponse> GetAsync(string resourceGroupName, string labName, CancellationToken cancellationToken);

        /// <summary>
        /// Lists all labs under the current subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Lab List operation.
        /// </returns>
        Task<LabListResponse> ListAllAsync(CancellationToken cancellationToken);

        /// <summary>
        /// Lists all labs in the specified resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the lab's resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Lab List operation.
        /// </returns>
        Task<LabListResponse> ListByResourceGroupAsync(string resourceGroupName, CancellationToken cancellationToken);

        /// <summary>
        /// Lists all labs under the specified subscription.
        /// </summary>
        /// <param name='subscriptionId'>
        /// The Subscription Id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Lab List operation.
        /// </returns>
        Task<LabListResponse> ListBySubscriptionAsync(string subscriptionId, CancellationToken cancellationToken);
    }

    /// <summary>
    /// Lab operations
    /// </summary>
    internal partial class LabOperations : IServiceOperations<DevTestLabManagementClient>, ILabOperations
    {
        /// <summary>
        /// Initializes a new instance of the LabOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal LabOperations(DevTestLabManagementClient client)
        {
            this._client = client;
        }

        private DevTestLabManagementClient _client;

        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.DevTestLab.DevTestLabManagementClient.
        /// </summary>
        public DevTestLabManagementClient Client
        {
            get { return this._client; }
        }

        /// <summary>
        /// Gets the specified lab.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the lab's resource group.
        /// </param>
        /// <param name='labName'>
        /// Required. The name of the lab.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Lab Get operation.
        /// </returns>
        public async Task<LabGetResponse> GetAsync(string resourceGroupName, string labName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (labName == null)
            {
                throw new ArgumentNullException("labName");
            }

            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("labName", labName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }

            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DevTestLab";
            url = url + "/labs/";
            url = url + Uri.EscapeDataString(labName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-21-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);

                // Set Headers

                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);

                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }

                    // Create Result
                    LabGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new LabGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }

                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Lab labInstance = new Lab();
                        result.Lab = labInstance;

                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            labInstance.Id = idInstance;
                        }

                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            labInstance.Name = nameInstance;
                        }

                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            labInstance.ResourceType = typeInstance;
                        }

                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            labInstance.Location = locationInstance;
                        }

                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            LabProperties propertiesInstance = new LabProperties();
                            labInstance.Properties = propertiesInstance;

                            JToken defaultStorageAccountValue = propertiesValue["defaultStorageAccount"];
                            if (defaultStorageAccountValue != null && defaultStorageAccountValue.Type != JTokenType.Null)
                            {
                                string defaultStorageAccountInstance = ((string)defaultStorageAccountValue);
                                propertiesInstance.DefaultStorageAccount = defaultStorageAccountInstance;
                            }

                            JToken vaultNameValue = propertiesValue["vaultName"];
                            if (vaultNameValue != null && vaultNameValue.Type != JTokenType.Null)
                            {
                                string vaultNameInstance = ((string)vaultNameValue);
                                propertiesInstance.VaultName = vaultNameInstance;
                            }

                            JToken storageAccountsArray = propertiesValue["storageAccounts"];
                            if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                {
                                    propertiesInstance.StorageAccounts.Add(((string)storageAccountsValue));
                                }
                            }

                            JToken provisioningStateValue = propertiesValue["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                        }
                    }

                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }

                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }

        /// <summary>
        /// Lists all labs under the current subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Lab List operation.
        /// </returns>
        public async Task<LabListResponse> ListAllAsync(CancellationToken cancellationToken)
        {
            // Validate

            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAllAsync", tracingParameters);
            }

            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.DevTestLab";
            url = url + "/labs";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-21-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);

                // Set Headers

                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);

                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }

                    // Create Result
                    LabListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new LabListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }

                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                Lab labInstance = new Lab();
                                result.Labs.Add(labInstance);

                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    labInstance.Id = idInstance;
                                }

                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    labInstance.Name = nameInstance;
                                }

                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    labInstance.ResourceType = typeInstance;
                                }

                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    labInstance.Location = locationInstance;
                                }

                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    LabProperties propertiesInstance = new LabProperties();
                                    labInstance.Properties = propertiesInstance;

                                    JToken defaultStorageAccountValue = propertiesValue["defaultStorageAccount"];
                                    if (defaultStorageAccountValue != null && defaultStorageAccountValue.Type != JTokenType.Null)
                                    {
                                        string defaultStorageAccountInstance = ((string)defaultStorageAccountValue);
                                        propertiesInstance.DefaultStorageAccount = defaultStorageAccountInstance;
                                    }

                                    JToken vaultNameValue = propertiesValue["vaultName"];
                                    if (vaultNameValue != null && vaultNameValue.Type != JTokenType.Null)
                                    {
                                        string vaultNameInstance = ((string)vaultNameValue);
                                        propertiesInstance.VaultName = vaultNameInstance;
                                    }

                                    JToken storageAccountsArray = propertiesValue["storageAccounts"];
                                    if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                        {
                                            propertiesInstance.StorageAccounts.Add(((string)storageAccountsValue));
                                        }
                                    }

                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                }
                            }
                        }
                    }

                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }

                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }

        /// <summary>
        /// Lists all labs in the specified resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the lab's resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Lab List operation.
        /// </returns>
        public async Task<LabListResponse> ListByResourceGroupAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }

            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListByResourceGroupAsync", tracingParameters);
            }

            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DevTestLab";
            url = url + "/labs";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-21-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);

                // Set Headers

                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);

                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }

                    // Create Result
                    LabListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new LabListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }

                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                Lab labInstance = new Lab();
                                result.Labs.Add(labInstance);

                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    labInstance.Id = idInstance;
                                }

                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    labInstance.Name = nameInstance;
                                }

                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    labInstance.ResourceType = typeInstance;
                                }

                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    labInstance.Location = locationInstance;
                                }

                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    LabProperties propertiesInstance = new LabProperties();
                                    labInstance.Properties = propertiesInstance;

                                    JToken defaultStorageAccountValue = propertiesValue["defaultStorageAccount"];
                                    if (defaultStorageAccountValue != null && defaultStorageAccountValue.Type != JTokenType.Null)
                                    {
                                        string defaultStorageAccountInstance = ((string)defaultStorageAccountValue);
                                        propertiesInstance.DefaultStorageAccount = defaultStorageAccountInstance;
                                    }

                                    JToken vaultNameValue = propertiesValue["vaultName"];
                                    if (vaultNameValue != null && vaultNameValue.Type != JTokenType.Null)
                                    {
                                        string vaultNameInstance = ((string)vaultNameValue);
                                        propertiesInstance.VaultName = vaultNameInstance;
                                    }

                                    JToken storageAccountsArray = propertiesValue["storageAccounts"];
                                    if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                        {
                                            propertiesInstance.StorageAccounts.Add(((string)storageAccountsValue));
                                        }
                                    }

                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                }
                            }
                        }
                    }

                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }

                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }

        /// <summary>
        /// Lists all labs under the specified subscription.
        /// </summary>
        /// <param name='subscriptionId'>
        /// Required. The Subscription Id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the Lab List operation.
        /// </returns>
        public async Task<LabListResponse> ListBySubscriptionAsync(string subscriptionId, CancellationToken cancellationToken)
        {
            // Validate
            if (subscriptionId == null)
            {
                throw new ArgumentNullException("subscriptionId");
            }

            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("subscriptionId", subscriptionId);
                TracingAdapter.Enter(invocationId, this, "ListBySubscriptionAsync", tracingParameters);
            }

            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            url = url + Uri.EscapeDataString(subscriptionId);
            url = url + "/providers/";
            url = url + "Microsoft.DevTestLab";
            url = url + "/labs";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-21-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);

                // Set Headers

                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);

                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }

                    // Create Result
                    LabListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new LabListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }

                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                Lab labInstance = new Lab();
                                result.Labs.Add(labInstance);

                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    labInstance.Id = idInstance;
                                }

                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    labInstance.Name = nameInstance;
                                }

                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    labInstance.ResourceType = typeInstance;
                                }

                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    labInstance.Location = locationInstance;
                                }

                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    LabProperties propertiesInstance = new LabProperties();
                                    labInstance.Properties = propertiesInstance;

                                    JToken defaultStorageAccountValue = propertiesValue["defaultStorageAccount"];
                                    if (defaultStorageAccountValue != null && defaultStorageAccountValue.Type != JTokenType.Null)
                                    {
                                        string defaultStorageAccountInstance = ((string)defaultStorageAccountValue);
                                        propertiesInstance.DefaultStorageAccount = defaultStorageAccountInstance;
                                    }

                                    JToken vaultNameValue = propertiesValue["vaultName"];
                                    if (vaultNameValue != null && vaultNameValue.Type != JTokenType.Null)
                                    {
                                        string vaultNameInstance = ((string)vaultNameValue);
                                        propertiesInstance.VaultName = vaultNameInstance;
                                    }

                                    JToken storageAccountsArray = propertiesValue["storageAccounts"];
                                    if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                        {
                                            propertiesInstance.StorageAccounts.Add(((string)storageAccountsValue));
                                        }
                                    }

                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                }
                            }
                        }
                    }

                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }

                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Client for managing labs and environments.
    /// </summary>
    public static partial class VMTemplateOperationsExtensions
    {
        /// <summary>
        /// Lists all VMTemplates within the specified lab.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IVMTemplateOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the lab's resource group.
        /// </param>
        /// <param name='labName'>
        /// Required. The name of the lab.
        /// </param>
        /// <param name='vmTemplateName'>
        /// Required. The name of the VM template.
        /// </param>
        /// <returns>
        /// The response from the VMTemplate Get operation.
        /// </returns>
        public static VMTemplateGetResponse Get(this IVMTemplateOperations operations, string resourceGroupName, string labName, string vmTemplateName)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((IVMTemplateOperations)s).GetAsync(resourceGroupName, labName, vmTemplateName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all VMTemplates within the specified lab.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IVMTemplateOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the lab's resource group.
        /// </param>
        /// <param name='labName'>
        /// Required. The name of the lab.
        /// </param>
        /// <param name='vmTemplateName'>
        /// Required. The name of the VM template.
        /// </param>
        /// <returns>
        /// The response from the VMTemplate Get operation.
        /// </returns>
        public static Task<VMTemplateGetResponse> GetAsync(this IVMTemplateOperations operations, string resourceGroupName, string labName, string vmTemplateName)
        {
            return operations.GetAsync(resourceGroupName, labName, vmTemplateName, CancellationToken.None);
        }

        /// <summary>
        /// Lists all VMTemplates within the specified lab.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IVMTemplateOperations.
        /// </param>
        /// <param name='labName'>
        /// Required. The name of the lab.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the lab's resource group.
        /// </param>
        /// <returns>
        /// The response from the VMTemplate List operation.
        /// </returns>
        public static VMTemplateListResponse ListByLab(this IVMTemplateOperations operations, string labName, string resourceGroupName)
        {
            return Task.Factory.StartNew((object s) =>
            {
                return ((IVMTemplateOperations)s).ListByLabAsync(labName, resourceGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all VMTemplates within the specified lab.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DevTestLab.IVMTemplateOperations.
        /// </param>
        /// <param name='labName'>
        /// Required. The name of the lab.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the lab's resource group.
        /// </param>
        /// <returns>
        /// The response from the VMTemplate List operation.
        /// </returns>
        public static Task<VMTemplateListResponse> ListByLabAsync(this IVMTemplateOperations operations, string labName, string resourceGroupName)
        {
            return operations.ListByLabAsync(labName, resourceGroupName, CancellationToken.None);
        }
    }

    /// <summary>
    /// VMTemplate operations
    /// </summary>
    public partial interface IVMTemplateOperations
    {
        /// <summary>
        /// Lists all VMTemplates within the specified lab.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the lab's resource group.
        /// </param>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='vmTemplateName'>
        /// The name of the VM template.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the VMTemplate Get operation.
        /// </returns>
        Task<VMTemplateGetResponse> GetAsync(string resourceGroupName, string labName, string vmTemplateName, CancellationToken cancellationToken);

        /// <summary>
        /// Lists all VMTemplates within the specified lab.
        /// </summary>
        /// <param name='labName'>
        /// The name of the lab.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the lab's resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the VMTemplate List operation.
        /// </returns>
        Task<VMTemplateListResponse> ListByLabAsync(string labName, string resourceGroupName, CancellationToken cancellationToken);
    }

    /// <summary>
    /// VMTemplate operations
    /// </summary>
    internal partial class VMTemplateOperations : IServiceOperations<DevTestLabManagementClient>, IVMTemplateOperations
    {
        /// <summary>
        /// Initializes a new instance of the VMTemplateOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VMTemplateOperations(DevTestLabManagementClient client)
        {
            this._client = client;
        }

        private DevTestLabManagementClient _client;

        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.DevTestLab.DevTestLabManagementClient.
        /// </summary>
        public DevTestLabManagementClient Client
        {
            get { return this._client; }
        }

        /// <summary>
        /// Lists all VMTemplates within the specified lab.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the lab's resource group.
        /// </param>
        /// <param name='labName'>
        /// Required. The name of the lab.
        /// </param>
        /// <param name='vmTemplateName'>
        /// Required. The name of the VM template.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the VMTemplate Get operation.
        /// </returns>
        public async Task<VMTemplateGetResponse> GetAsync(string resourceGroupName, string labName, string vmTemplateName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (labName == null)
            {
                throw new ArgumentNullException("labName");
            }
            if (vmTemplateName == null)
            {
                throw new ArgumentNullException("vmTemplateName");
            }

            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("labName", labName);
                tracingParameters.Add("vmTemplateName", vmTemplateName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }

            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DevTestLab";
            url = url + "/labs/";
            url = url + Uri.EscapeDataString(labName);
            url = url + "/vmtemplates/";
            url = url + Uri.EscapeDataString(vmTemplateName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-21-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);

                // Set Headers

                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);

                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }

                    // Create Result
                    VMTemplateGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new VMTemplateGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }

                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        VMTemplate vMTemplateInstance = new VMTemplate();
                        result.VMTemplate = vMTemplateInstance;

                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            vMTemplateInstance.Id = idInstance;
                        }

                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            vMTemplateInstance.Name = nameInstance;
                        }

                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            vMTemplateInstance.ResourceType = typeInstance;
                        }

                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            vMTemplateInstance.Location = locationInstance;
                        }

                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            VMTemplateProperties propertiesInstance = new VMTemplateProperties();
                            vMTemplateInstance.Properties = propertiesInstance;

                            JToken imageNameValue = propertiesValue["imageName"];
                            if (imageNameValue != null && imageNameValue.Type != JTokenType.Null)
                            {
                                string imageNameInstance = ((string)imageNameValue);
                                propertiesInstance.ImageName = imageNameInstance;
                            }

                            JToken descriptionValue = propertiesValue["description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                propertiesInstance.Description = descriptionInstance;
                            }

                            JToken osTypeValue = propertiesValue["osType"];
                            if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                            {
                                string osTypeInstance = ((string)osTypeValue);
                                propertiesInstance.OsType = osTypeInstance;
                            }

                            JToken imageTypeValue = propertiesValue["imageType"];
                            if (imageTypeValue != null && imageTypeValue.Type != JTokenType.Null)
                            {
                                string imageTypeInstance = ((string)imageTypeValue);
                                propertiesInstance.ImageType = imageTypeInstance;
                            }

                            JToken sysPrepValue = propertiesValue["sysPrep"];
                            if (sysPrepValue != null && sysPrepValue.Type != JTokenType.Null)
                            {
                                bool sysPrepInstance = ((bool)sysPrepValue);
                                propertiesInstance.IsSysPrepped = sysPrepInstance;
                            }

                            JToken userNameValue = propertiesValue["userName"];
                            if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                            {
                                string userNameInstance = ((string)userNameValue);
                                propertiesInstance.UserName = userNameInstance;
                            }

                            JToken passwordValue = propertiesValue["password"];
                            if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                            {
                                string passwordInstance = ((string)passwordValue);
                                propertiesInstance.Password = passwordInstance;
                            }

                            JToken authorValue = propertiesValue["author"];
                            if (authorValue != null && authorValue.Type != JTokenType.Null)
                            {
                                string authorInstance = ((string)authorValue);
                                propertiesInstance.Author = authorInstance;
                            }

                            JToken creationDateValue = propertiesValue["creationDate"];
                            if (creationDateValue != null && creationDateValue.Type != JTokenType.Null)
                            {
                                DateTime creationDateInstance = ((DateTime)creationDateValue);
                                propertiesInstance.CreationDate = creationDateInstance;
                            }

                            JToken labNameValue = propertiesValue["labName"];
                            if (labNameValue != null && labNameValue.Type != JTokenType.Null)
                            {
                                string labNameInstance = ((string)labNameValue);
                                propertiesInstance.LabName = labNameInstance;
                            }

                            JToken provisioningStateValue = propertiesValue["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                        }
                    }

                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }

                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }

        /// <summary>
        /// Lists all VMTemplates within the specified lab.
        /// </summary>
        /// <param name='labName'>
        /// Required. The name of the lab.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the lab's resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response from the VMTemplate List operation.
        /// </returns>
        public async Task<VMTemplateListResponse> ListByLabAsync(string labName, string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (labName == null)
            {
                throw new ArgumentNullException("labName");
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }

            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("labName", labName);
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListByLabAsync", tracingParameters);
            }

            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.DevTestLab";
            url = url + "/labs/";
            url = url + Uri.EscapeDataString(labName);
            url = url + "/vmtemplates";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-21-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);

                // Set Headers

                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);

                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode >= HttpStatusCode.BadRequest)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }

                    // Create Result
                    VMTemplateListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new VMTemplateListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }

                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                VMTemplate vMTemplateInstance = new VMTemplate();
                                result.VMTemplates.Add(vMTemplateInstance);

                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    vMTemplateInstance.Id = idInstance;
                                }

                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    vMTemplateInstance.Name = nameInstance;
                                }

                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    vMTemplateInstance.ResourceType = typeInstance;
                                }

                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    vMTemplateInstance.Location = locationInstance;
                                }

                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    VMTemplateProperties propertiesInstance = new VMTemplateProperties();
                                    vMTemplateInstance.Properties = propertiesInstance;

                                    JToken imageNameValue = propertiesValue["imageName"];
                                    if (imageNameValue != null && imageNameValue.Type != JTokenType.Null)
                                    {
                                        string imageNameInstance = ((string)imageNameValue);
                                        propertiesInstance.ImageName = imageNameInstance;
                                    }

                                    JToken descriptionValue = propertiesValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        propertiesInstance.Description = descriptionInstance;
                                    }

                                    JToken osTypeValue = propertiesValue["osType"];
                                    if (osTypeValue != null && osTypeValue.Type != JTokenType.Null)
                                    {
                                        string osTypeInstance = ((string)osTypeValue);
                                        propertiesInstance.OsType = osTypeInstance;
                                    }

                                    JToken imageTypeValue = propertiesValue["imageType"];
                                    if (imageTypeValue != null && imageTypeValue.Type != JTokenType.Null)
                                    {
                                        string imageTypeInstance = ((string)imageTypeValue);
                                        propertiesInstance.ImageType = imageTypeInstance;
                                    }

                                    JToken sysPrepValue = propertiesValue["sysPrep"];
                                    if (sysPrepValue != null && sysPrepValue.Type != JTokenType.Null)
                                    {
                                        bool sysPrepInstance = ((bool)sysPrepValue);
                                        propertiesInstance.IsSysPrepped = sysPrepInstance;
                                    }

                                    JToken userNameValue = propertiesValue["userName"];
                                    if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                    {
                                        string userNameInstance = ((string)userNameValue);
                                        propertiesInstance.UserName = userNameInstance;
                                    }

                                    JToken passwordValue = propertiesValue["password"];
                                    if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                    {
                                        string passwordInstance = ((string)passwordValue);
                                        propertiesInstance.Password = passwordInstance;
                                    }

                                    JToken authorValue = propertiesValue["author"];
                                    if (authorValue != null && authorValue.Type != JTokenType.Null)
                                    {
                                        string authorInstance = ((string)authorValue);
                                        propertiesInstance.Author = authorInstance;
                                    }

                                    JToken creationDateValue = propertiesValue["creationDate"];
                                    if (creationDateValue != null && creationDateValue.Type != JTokenType.Null)
                                    {
                                        DateTime creationDateInstance = ((DateTime)creationDateValue);
                                        propertiesInstance.CreationDate = creationDateInstance;
                                    }

                                    JToken labNameValue = propertiesValue["labName"];
                                    if (labNameValue != null && labNameValue.Type != JTokenType.Null)
                                    {
                                        string labNameInstance = ((string)labNameValue);
                                        propertiesInstance.LabName = labNameInstance;
                                    }

                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                }
                            }
                        }
                    }

                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }

                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
