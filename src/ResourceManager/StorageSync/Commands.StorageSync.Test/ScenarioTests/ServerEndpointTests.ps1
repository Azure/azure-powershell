# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.SYNOPSIS
Test ServerEndpoint
.DESCRIPTION
SmokeTest
#>
function Test-ServerEndpoint
{
    # Setup
    $resourceGroupName = Get-ResourceGroupName

    try
    {
       # Test
        $storageSyncServiceName = Get-ResourceName("sss")
        $syncGroupName = Get-ResourceName("sg")
        $serverEndpointName = Get-ResourceName("sep")
        $cloudEndpointName = Get-ResourceName("cep")
        $resourceLocation = Get-ProviderLocation ResourceManagement

        $storageAccountShareName = "testfs" #Get-ResourceName("fs")
        $storageAccountName = Get-ResourceName("sa")
        $storageAccountTenantId = (Get-AzureRmTenant).Id
        # NOTE: Check the local server drives where we are performing registration.
        $serverLocalPath = "D:\" + $serverEndpointName
        $cloudSeededDataFileShareUri = "http://dummy"
        $tierFilesOlderThanDays = 10
        $volumeFreeSpacePercent = 60
        $volumeFreeSpacePercent2 = 80

        Write-Verbose "RGName: $resourceGroupName | Loc: $resourceLocation | Type : ResourceGroup"
        New-AzureRmResourceGroup -Name $resourceGroupName -Location $resourceLocation;

        Write-Verbose "Resource: $storageSyncServiceName | Loc: $resourceLocation | Type : StorageSyncService"
        $storageSyncService = New-AzureRmStorageSyncService -ResourceGroupName $resourceGroupName -Location $resourceLocation -StorageSyncServiceName $storageSyncServiceName

        Write-Verbose "Resource: $syncGroupName | Loc: $resourceLocation | Type : SyncGroup"
        $syncGroup = New-AzureRmStorageSyncGroup -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -Name $syncGroupName

        Write-Verbose "Resource: $StorageAccountName | Loc: $resourceLocation | Type : StorageAccount"
        $storageAccount = New-AzureRmStorageAccount  -SkuName Standard_LRS -ResourceGroupName $resourceGroupName -Name $StorageAccountName -Location $resourceLocation
        $key = Get-AzureRmStorageAccountKey -ResourceGroupName $resourceGroupName -Name $StorageAccountName
        $context = New-AzureStorageContext -StorageAccountName $storageAccount.StorageAccountName -StorageAccountKey $key[0].Value
        Write-Verbose "Resource: $StorageAccountShareName | Loc: $resourceLocation | Type : AzureStorageShare"

        if(IsLive)
        {
            $azureFileShare = New-AzureStorageShare -Name $StorageAccountShareName -Context $context
            $azureFileShareName = $azureFileShare.Name 
        }
        else 
        {
                $azureFileShareName = $StorageAccountShareName
        }

        $storageAccountResourceId = $storageAccount.Id

        Write-Verbose "Resource: $cloudEndpointName | Loc: $resourceLocation | Type : CloudEndpoint"
        $job = New-AzureRMStorageSyncCloudEndpoint -ParentObject $syncGroup -Name $cloudEndpointName -StorageAccountResourceId $storageAccountResourceId -StorageAccountShareName $azureFileShareName -StorageAccountTenantId $StorageAccountTenantId -AsJob 
        $job | Wait-Job
        $cloudEndpoint = get-job -Id $job.Id | receive-job -Keep

        Write-Verbose "Resource: <auto-generated> | Loc: $resourceLocation | Type : RegisteredServer"
        $job = Register-AzureRmStorageSyncServer -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -AsJob 
        $job | Wait-Job
        $registeredServer = get-job -Id $job.Id | receive-job -Keep

        Write-Verbose "Resource: $serverEndpointName | Loc: $resourceLocation | Type : ServerEndpoint"
        $job = New-AzureRMStorageSyncServerEndpoint -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -SyncGroupName $syncGroupName -Name $serverEndpointName -ServerResourceId $registeredServer.ResourceId -ServerLocalPath $serverLocalPath -CloudTiering -CloudSeededData -VolumeFreeSpacePercent $volumeFreeSpacePercent -CloudSeededDataFileShareUri $cloudSeededDataFileShareUri -TierFilesOlderThanDays $tierFilesOlderThanDays -Verbose -AsJob 

        $job | Wait-Job
        $serverEndpoint = get-job -Id $job.Id | receive-job -Keep

        Write-Verbose "Validating ServerEndpoint Properties"
        Assert-AreEqual $serverEndpointName $serverEndpoint.ServerEndpointName
        Assert-AreEqual $serverLocalPath $serverEndpoint.ServerLocalPath
        Assert-AreEqual $volumeFreeSpacePercent $serverEndpoint.VolumeFreeSpacePercent

        Write-Verbose "Get ServerEndpoint by Name"
        $serverEndpoint = Get-AzureRMStorageSyncServerEndpoint -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -SyncGroupName $syncGroupName -ServerEndpointName $serverEndpointName 

        Write-Verbose "Validating ServerEndpoint Properties"
        Assert-AreEqual $serverEndpointName $serverEndpoint.ServerEndpointName
        Assert-AreEqual $serverLocalPath $serverEndpoint.ServerLocalPath
        Assert-AreEqual $volumeFreeSpacePercent $serverEndpoint.VolumeFreeSpacePercent

        Write-Verbose "Get ServerEndpoint by ParentObject"
        $serverEndpoint = Get-AzureRMStorageSyncServerEndpoint -ParentObject $syncGroup -Name $serverEndpointName -Verbose
        Write-Verbose "Validating ServerEndpoint Properties"
        Assert-AreEqual $serverEndpointName $serverEndpoint.ServerEndpointName
        Assert-AreEqual $serverLocalPath $serverEndpoint.ServerLocalPath
        Assert-AreEqual $volumeFreeSpacePercent $serverEndpoint.VolumeFreeSpacePercent

        Write-Verbose "Get ServerEndpoint by ParentResourceId"
        $serverEndpoint = Get-AzureRMStorageSyncServerEndpoint -ParentResourceId $syncGroup.ResourceId -Name $serverEndpointName -Verbose
        Write-Verbose "Validating ServerEndpoint Properties"
        Assert-AreEqual $serverEndpointName $serverEndpoint.ServerEndpointName
        Assert-AreEqual $serverLocalPath $serverEndpoint.ServerLocalPath
        Assert-AreEqual $volumeFreeSpacePercent $serverEndpoint.VolumeFreeSpacePercent

        $job = Set-AzureRMStorageSyncServerEndpoint -InputObject $ServerEndpoint -VolumeFreeSpacePercent $volumeFreeSpacePercent2 -Verbose -AsJob 
        $job | Wait-Job
        $serverEndpoint2 = get-job -Id $job.Id | receive-job -Keep
        Write-Verbose "Validating ServerEndpoint Properties"
        Assert-AreEqual $serverEndpointName $serverEndpoint2.ServerEndpointName
        Assert-AreEqual $serverLocalPath $serverEndpoint2.ServerLocalPath
        Assert-AreEqual $volumeFreeSpacePercent2 $serverEndpoint2.VolumeFreeSpacePercent

        Write-Verbose "Removing ServerEndpoint: $serverEndpointName"
        Remove-AzureRMStorageSyncServerEndpoint -Force -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -SyncGroupName $syncGroupName -Name $serverEndpointName -AsJob | Wait-Job

        Write-Verbose "Executing Piping Scenarios"
        New-AzureRMStorageSyncServerEndpoint -ParentObject $syncGroup -Name $serverEndpointName -ServerResourceId $registeredServer.ResourceId -ServerLocalPath $serverLocalPath -CloudTiering -CloudSeededData -VolumeFreeSpacePercent $volumeFreeSpacePercent -CloudSeededDataFileShareUri $cloudSeededDataFileShareUri -TierFilesOlderThanDays $tierFilesOlderThanDays | Get-AzureRMStorageSyncServerEndpoint  | Remove-AzureRMStorageSyncServerEndpoint -Force -AsJob | Wait-Job

        New-AzureRMStorageSyncServerEndpoint -ParentResourceId $syncGroup.ResourceId -Name $serverEndpointName -ServerResourceId $registeredServer.ResourceId -ServerLocalPath $serverLocalPath -CloudTiering -CloudSeededData -VolumeFreeSpacePercent $volumeFreeSpacePercent -CloudSeededDataFileShareUri $cloudSeededDataFileShareUri -TierFilesOlderThanDays $tierFilesOlderThanDays | Remove-AzureRMStorageSyncServerEndpoint -Force -AsJob | Wait-Job

        Write-Verbose "Unregister Server: $($registeredServer.ServerId)"
        Unregister-AzureRmStorageSyncServer -Force -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -ServerId $registeredServer.ServerId -AsJob | Wait-Job

        Write-Verbose "Removing CloudEndpoint: $cloudEndpointName"
        Remove-AzureRMStorageSyncCloudEndpoint -Force -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -SyncGroupName $syncGroupName -Name $cloudEndpointName -AsJob | Wait-Job

        Write-Verbose "Removing SyncGroup: $syncGroupName"
        Remove-AzureRmStorageSyncGroup -Force -ResourceGroupName $resourceGroupName -StorageSyncServiceName $storageSyncServiceName -Name $syncGroupName -AsJob | Wait-Job

        Write-Verbose "Removing StorageSyncService: $storageSyncServiceName"
        Remove-AzureRmStorageSyncService -Force -ResourceGroupName $resourceGroupName -Name $storageSyncServiceName -AsJob | Wait-Job

        if(IsLive)
        {
            Write-Verbose "Removing: $StorageAccountShareName | Loc: $resourceLocation | Type : AzureStorageShare"
            $azureFileShare = Remove-AzureStorageShare -Name $StorageAccountShareName -Context $context -Force
        }

        Write-Verbose "Removing $StorageAccountName | Loc: $resourceLocation | Type : StorageAccount"
        Remove-AzureRmStorageAccount -Force -ResourceGroupName $resourceGroupName -Name $StorageAccountName

    }
    finally
    {
        # Cleanup
        Write-Verbose "Removing ResourceGroup : $resourceGroupName"
        Clean-ResourceGroup $resourceGroupName
    }
}
