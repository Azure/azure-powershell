<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Confirm_OverwriteRecord" xml:space="preserve">
    <value>Are you sure you want to overwrite any existing record set '{0}' of type {1} in zone '{2}'? You will lose any existing records in that record set.</value>
  </data>
  <data name="Confirm_RemoveRecordSet" xml:space="preserve">
    <value>Are you sure you want to permanently remove record set '{0}' from zone '{1}'?</value>
  </data>
  <data name="Confirm_RemoveZone" xml:space="preserve">
    <value>Are you sure you want to permanently remove zone '{0}'?</value>
  </data>
  <data name="Error_AddRecordMultipleCnames" xml:space="preserve">
    <value>There already exists a CNAME record in this set. A CNAME record set can only contain one record.</value>
  </data>
  <data name="Error_AddRecordSOA" xml:space="preserve">
    <value>There can be only one record set of type SOA, and it can be modified but not deleted.</value>
  </data>
  <data name="Error_AddRecordTypeMismatch" xml:space="preserve">
    <value>Cannot add a record of type {0} to a record set of type {1}. The types must match.</value>
  </data>
  <data name="Error_EtagNotSpecified" xml:space="preserve">
    <value>The ETag property of the {0} object is empty or "*". In order to perform this operation with optimistic concurrency checks, please set the Etag property (you may need to Get the {0} first). In order to perform the operation without optimistic concurrency checks, please specify the -Overwrite switch. </value>
  </data>
  <data name="Error_NameAndEndsWith" xml:space="preserve">
    <value>Name parameter cannot be used with EndsWith.</value>
  </data>
  <data name="Error_RecordSetNameEndsWithZoneName" xml:space="preserve">
    <value>The relative record set name "{0}" includes the zone name "{1}". This will result in the set name "{0}.{1}".</value>
  </data>
  <data name="Error_RemoveRecordTypeMismatch" xml:space="preserve">
    <value>Cannot remove a record of type {0} from a record set of type {1}. The types must match.</value>
  </data>
  <data name="Error_UnknownParameterSetName" xml:space="preserve">
    <value>The parameter set {0} of cmdlet is unknown</value>
  </data>
  <data name="Progress_CreatingNewZone" xml:space="preserve">
    <value>Creating zone ...</value>
  </data>
  <data name="Progress_CreatingRecordSet" xml:space="preserve">
    <value>Creating record set ...</value>
  </data>
  <data name="Progress_Modifying" xml:space="preserve">
    <value>Modifying ...</value>
  </data>
  <data name="Progress_RemovingRecordSet" xml:space="preserve">
    <value>Removing record set ...</value>
  </data>
  <data name="Progress_RemovingZone" xml:space="preserve">
    <value>Removing zone ...</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Success!</value>
  </data>
  <data name="Success_NewRecordSet" xml:space="preserve">
    <value>Record set '{0}' was created in zone '{1}'.The record set is empty. Use Add-AzureRmDnsRecordConfig to add {2} records to it and Set-AzureRmDnsRecordSet to save your changes.</value>
  </data>
  <data name="Success_NewZone" xml:space="preserve">
    <value>Zone '{0}' was created in resource group '{1}'. The SOA and authoritative NS records for this zone have been created automatically. Use Get-AzureRmDnsRecordSet to retrieve them</value>
  </data>
  <data name="Success_NonExistentZone" xml:space="preserve">
    <value>The Zone '{0}' was not present in the resource group '{1}'. Hence, was not deleted</value>
  </data>
  <data name="Success_RecordAdded" xml:space="preserve">
    <value>Record added. Use Set-AzureRmDnsRecordSet to save your change to this record set.</value>
  </data>
  <data name="Success_RecordRemoved" xml:space="preserve">
    <value>Record removed. Use Set-AzureRmDnsRecordSet to save your change to this record set.</value>
  </data>
  <data name="Success_RecordSetFqdn" xml:space="preserve">
    <value>After you create {2} records in this record set you will be able to query them in DNS using the FQDN '{0}.{1}.'</value>
  </data>
  <data name="Success_RemoveRecordSet" xml:space="preserve">
    <value>Record set '{0}' was removed from zone '{1}'.</value>
  </data>
  <data name="Success_RemoveZone" xml:space="preserve">
    <value>Zone '{0}' was removed from resource group '{1}'. The SOA and authoritative NS records for this zone have also been deleted.</value>
  </data>
  <data name="Warning_DnsRecordsParamNeedsToBeSpecified" xml:space="preserve">
    <value>Usage of this cmdlet without DnsRecords parameter will be deprecated soon. If there is a need to create empty record set, please specify DnsRecords parameter with an empty array as value</value>
  </data>
</root>