<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountAndKeyInUse" xml:space="preserve">
    <value>Executing cmdlet with Batch account {0} with its {1} key. To change which key to use, set the KeyInUse property on the BatchAccountContext.</value>
  </data>
  <data name="BeginMAMLCall" xml:space="preserve">
    <value>Begin {0} call to RP</value>
  </data>
  <data name="Downloading" xml:space="preserve">
    <value>Downloading {0} file {1} to: {2}</value>
  </data>
  <data name="EndMAMLCall" xml:space="preserve">
    <value>End {0} call to RP</value>
  </data>
  <data name="GBAK_GettingKeys" xml:space="preserve">
    <value>Getting account keys for {0}</value>
  </data>
  <data name="GBA_AllAccounts" xml:space="preserve">
    <value>Getting all accounts in subscription</value>
  </data>
  <data name="GBA_ResGroupAccounts" xml:space="preserve">
    <value>Getting accounts in resource group {0}</value>
  </data>
  <data name="GBJ_GetByName" xml:space="preserve">
    <value>Getting job "{0}" from workitem "{1}"</value>
  </data>
  <data name="GBJ_GetByOData" xml:space="preserve">
    <value>Getting jobs matching the specified OData filter from workitem "{0}". </value>
  </data>
  <data name="GBJ_GetNoFilter" xml:space="preserve">
    <value>Getting all jobs from workitem "{0}". </value>
  </data>
  <data name="GBP_GetByName" xml:space="preserve">
    <value>Getting pool "{0}"</value>
  </data>
  <data name="GBP_GetByOData" xml:space="preserve">
    <value>Getting pools matching the specified OData filter. </value>
  </data>
  <data name="GBP_NoFilter" xml:space="preserve">
    <value>Getting all pools associated with the Batch account. </value>
  </data>
  <data name="GBTF_GetByName" xml:space="preserve">
    <value>Getting task file "{0}" from task "{1}"</value>
  </data>
  <data name="GBTF_GetByOData" xml:space="preserve">
    <value>Getting task files matching the specified OData filter from task "{0}".</value>
  </data>
  <data name="GBTF_NoFilter" xml:space="preserve">
    <value>Getting all task files under task "{0}".</value>
  </data>
  <data name="GBT_GetByName" xml:space="preserve">
    <value>Getting task "{0}" from job "{1}" under workitem "{2}"</value>
  </data>
  <data name="GBT_GetByOData" xml:space="preserve">
    <value>Getting tasks matching the specified OData filter from job "{0}".</value>
  </data>
  <data name="GBT_GetNoFilter" xml:space="preserve">
    <value>Getting all tasks from job "{0}".</value>
  </data>
  <data name="GBVMF_GetByName" xml:space="preserve">
    <value>Getting vm file "{0}" from vm "{1}"</value>
  </data>
  <data name="GBVMF_GetByOData" xml:space="preserve">
    <value>Getting vm files matching the specified OData filter from vm "{0}".</value>
  </data>
  <data name="GBVMF_NoFilter" xml:space="preserve">
    <value>Getting all vm files from vm "{0}".</value>
  </data>
  <data name="GBVM_GetByName" xml:space="preserve">
    <value>Getting vm "{0}" from pool "{1}".</value>
  </data>
  <data name="GBVM_GetByOData" xml:space="preserve">
    <value>Getting vms matching the specified OData filter from pool "{0}".</value>
  </data>
  <data name="GBVM_NoFilter" xml:space="preserve">
    <value>Getting all vms under pool "{0}".</value>
  </data>
  <data name="GBWI_GetByName" xml:space="preserve">
    <value>Getting workitem "{0}"</value>
  </data>
  <data name="GBWI_GetByOData" xml:space="preserve">
    <value>Getting workitems matching the specified OData filter. </value>
  </data>
  <data name="GBWI_NoFilter" xml:space="preserve">
    <value>Getting all workitems associated with the Batch account. </value>
  </data>
  <data name="GRDP_NoVM" xml:space="preserve">
    <value>No vm was specified. Supply a PSVM object or a pool name and vm name for the RDP file to point to.</value>
  </data>
  <data name="InvalidEndpointType" xml:space="preserve">
    <value>The endpoint is not recognized as valid: {0}</value>
  </data>
  <data name="InvalidResourceId" xml:space="preserve">
    <value>The resource ID is not recognized as valid: {0}</value>
  </data>
  <data name="InvalidTagFormat" xml:space="preserve">
    <value>Invalid tag format. Expect @{Name = "tagName"} or @{Name = "tagName"; Value = "tagValue"}</value>
  </data>
  <data name="InvalidTagFormatNotUniqueName" xml:space="preserve">
    <value>Invalid tag format. Ensure that each tag has a unique name. Example: @{Name = "tagName1"; Value = "tagValue1"}, @{Name = "tagName2"; Value = "tagValue2"}</value>
  </data>
  <data name="KeyNotPresent" xml:space="preserve">
    <value>The current KeyInUse on this BatchAccountContext is the {0} key, but this key is not populated on the BatchAccountContext object. Use the Get-AzureBatchAccountKeys cmdlet to get a BatchAccountContext object with its keys populated.</value>
  </data>
  <data name="MaxCount" xml:space="preserve">
    <value>A max count of {0} will be returned.</value>
  </data>
  <data name="MissingResGroupName" xml:space="preserve">
    <value>Cannot find resource group name in ID property: {0}</value>
  </data>
  <data name="NBA_AccountAlreadyExists" xml:space="preserve">
    <value>AccountAlreadyExists: Account already exists.</value>
  </data>
  <data name="NBA_LookupAccount" xml:space="preserve">
    <value>Checking if account already exists</value>
  </data>
  <data name="NBA_NameAvailability" xml:space="preserve">
    <value>Performing name availability check for account {0}</value>
  </data>
  <data name="NBP_CreatingPool" xml:space="preserve">
    <value>Creating pool {0}</value>
  </data>
  <data name="NBT_CreatingTask" xml:space="preserve">
    <value>Creating task {0}</value>
  </data>
  <data name="NBU_CreatingUser" xml:space="preserve">
    <value>Creating user {0} on vm {1}</value>
  </data>
  <data name="NBWI_CreatingWorkItem" xml:space="preserve">
    <value>Creating workitem {0}</value>
  </data>
  <data name="NoDownloadDestination" xml:space="preserve">
    <value>No destination was provided for the downloaded file. Either provide a file path or a Stream object.</value>
  </data>
  <data name="NoJob" xml:space="preserve">
    <value>No job was specified. Supply a PSCloudJob object or a workitem name and job name.</value>
  </data>
  <data name="NoPool" xml:space="preserve">
    <value>No pool was specified. Supply a PSCloudPool object or a pool name.</value>
  </data>
  <data name="NoTask" xml:space="preserve">
    <value>No task was specified. Supply a PSCloudTask object or a workitem name, job name, and task name.</value>
  </data>
  <data name="NoTaskFile" xml:space="preserve">
    <value>No task file was specified. Supply a PSTaskFile object or a workitem name, job name, task name, and task file name.</value>
  </data>
  <data name="NoVM" xml:space="preserve">
    <value>No vm was specified. Supply a PSVM object or a pool name and vm name.</value>
  </data>
  <data name="NoVMFile" xml:space="preserve">
    <value>No vm file was specified. Supply a PSVMFile object or a pool name, vm name, and vm file name.</value>
  </data>
  <data name="NoVMUser" xml:space="preserve">
    <value>No vm user specified. Supply a pool name, vm name, and user name.</value>
  </data>
  <data name="NoWorkItem" xml:space="preserve">
    <value>No workitem was specified.  Supply a workitem name or PSCloudWorkItem object.</value>
  </data>
  <data name="RBA_RemoveConfirm" xml:space="preserve">
    <value>Are you sure you want to remove batch account {0}?</value>
  </data>
  <data name="RBA_RemoveResource" xml:space="preserve">
    <value>Removing batch account ...</value>
  </data>
  <data name="RBJ_RemoveConfirm" xml:space="preserve">
    <value>Are you sure you want to remove job {0}?</value>
  </data>
  <data name="RBJ_RemoveJob" xml:space="preserve">
    <value>Removing job ...</value>
  </data>
  <data name="RBP_RemoveConfirm" xml:space="preserve">
    <value>Are you sure you want to remove pool {0}?</value>
  </data>
  <data name="RBP_RemovePool" xml:space="preserve">
    <value>Removing pool ...</value>
  </data>
  <data name="RBT_RemoveConfirm" xml:space="preserve">
    <value>Are you sure you want to remove task {0}?</value>
  </data>
  <data name="RBT_RemoveTask" xml:space="preserve">
    <value>Removing task ...</value>
  </data>
  <data name="RBU_RemoveConfirm" xml:space="preserve">
    <value>Are you sure you want to remove user {0}?</value>
  </data>
  <data name="RBU_RemoveUser" xml:space="preserve">
    <value>Removing user ...</value>
  </data>
  <data name="RBWI_RemoveConfirm" xml:space="preserve">
    <value>Are you sure you want to remove workitem {0}?</value>
  </data>
  <data name="RBWI_RemoveWorkItem" xml:space="preserve">
    <value>Removing workitem ...</value>
  </data>
  <data name="ResGroupLookup" xml:space="preserve">
    <value>Looking up resource group for account {0}</value>
  </data>
  <data name="ResourceNotFound" xml:space="preserve">
    <value>ResourceNotFound: Resource not found.</value>
    <comment>emulate exception generated by RP</comment>
  </data>
  <data name="SBA_Updating" xml:space="preserve">
    <value>Updating account {0}</value>
  </data>
  <data name="SBPR_ResizingPool" xml:space="preserve">
    <value>Resizing pool {0}, new target dedicated: {1}.</value>
  </data>
  <data name="SBPR_StopResizingPool" xml:space="preserve">
    <value>Stopping resize operation on pool {0}.</value>
  </data>
</root>