<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountAndKeyInUse" xml:space="preserve">
    <value>Executing cmdlet with Batch account {0} with its {1} key. To change which key to use, set the KeyInUse property on the BatchAccountContext.</value>
  </data>
  <data name="BeginMAMLCall" xml:space="preserve">
    <value>Begin {0} call to RP</value>
  </data>
  <data name="EndMAMLCall" xml:space="preserve">
    <value>End {0} call to RP</value>
  </data>
  <data name="GBAK_GettingKeys" xml:space="preserve">
    <value>Getting account keys for {0}</value>
  </data>
  <data name="GBA_AllAccounts" xml:space="preserve">
    <value>Getting all accounts in subscription</value>
  </data>
  <data name="GBA_ResGroupAccounts" xml:space="preserve">
    <value>Getting accounts in resource group {0}</value>
  </data>
  <data name="GBJ_GetByName" xml:space="preserve">
    <value>Getting Job "{0}" from WorkItem "{1}"</value>
  </data>
  <data name="GBJ_GetByOData" xml:space="preserve">
    <value>Getting Jobs matching the specified OData filter from WorkItem "{0}". A max count of {1} will be returned.</value>
  </data>
  <data name="GBJ_GetNoFilter" xml:space="preserve">
    <value>Getting all Jobs from WorkItem "{0}". A max count of {1} will be returned.</value>
  </data>
  <data name="GBJ_NoWorkItem" xml:space="preserve">
    <value>No WorkItem was specified.  Supply a WorkItem name or WorkItem object to query for Jobs.</value>
  </data>
  <data name="GBP_GetByName" xml:space="preserve">
    <value>Getting Pool "{0}"</value>
  </data>
  <data name="GBP_GetByOData" xml:space="preserve">
    <value>Getting Pools matching the specified OData filter. A max count of {0} will be returned.</value>
  </data>
  <data name="GBP_NoFilter" xml:space="preserve">
    <value>Getting all Pools associated with the Batch account. A max count of {0} will be returned.</value>
  </data>
  <data name="GBT_GetByName" xml:space="preserve">
    <value>Getting Task "{0}" from Job "{1}" under WorkItem "{2}"</value>
  </data>
  <data name="GBT_GetByOData" xml:space="preserve">
    <value>Getting Tasks matching the specified OData filter from Job "{0}". A max count of {1} will be returned.</value>
  </data>
  <data name="GBT_GetNoFilter" xml:space="preserve">
    <value>Getting all Tasks from Job "{0}". A max count of {1} will be returned.</value>
  </data>
  <data name="GBT_NoJob" xml:space="preserve">
    <value>No Job was specified. Supply a Job object or a WorkItem namd and Job name to query for Tasks.</value>
  </data>
  <data name="GBWI_GetByName" xml:space="preserve">
    <value>Getting WorkItem "{0}"</value>
  </data>
  <data name="GBWI_GetByOData" xml:space="preserve">
    <value>Getting WorkItems matching the specified OData filter. A max count of {0} will be returned.</value>
  </data>
  <data name="GBWI_NoFilter" xml:space="preserve">
    <value>Getting all WorkItems associated with the Batch account. A max count of {0} will be returned.</value>
  </data>
  <data name="InvalidEndpointType" xml:space="preserve">
    <value>The endpoint is not recognized as valid: {0}</value>
  </data>
  <data name="InvalidResourceId" xml:space="preserve">
    <value>The resource ID is not recognized as valid: {0}</value>
  </data>
  <data name="InvalidTagFormat" xml:space="preserve">
    <value>Invalid tag format. Expect @{Name = "tagName"} or @{Name = "tagName"; Value = "tagValue"}</value>
  </data>
  <data name="InvalidTagFormatNotUniqueName" xml:space="preserve">
    <value>Invalid tag format. Ensure that each tag has a unique name. Example: @{Name = "tagName1"; Value = "tagValue1"}, @{Name = "tagName2"; Value = "tagValue2"}</value>
  </data>
  <data name="KeyNotPresent" xml:space="preserve">
    <value>The current KeyInUse on this BatchAccountContext is the {0} key, but this key is not populated on the BatchAccountContext object. Use the Get-AzureBatchAccountKeys cmdlet to get a BatchAccountContext object with its keys populated.</value>
  </data>
  <data name="MissingResGroupName" xml:space="preserve">
    <value>Cannot find resource group name in ID property: {0}</value>
  </data>
  <data name="NBA_AccountAlreadyExists" xml:space="preserve">
    <value>AccountAlreadyExists: Account already exists.</value>
  </data>
  <data name="NBA_LookupAccount" xml:space="preserve">
    <value>Checking if account already exists</value>
  </data>
  <data name="NBA_NameAvailability" xml:space="preserve">
    <value>Performing name availability check for account {0}</value>
  </data>
  <data name="RBA_RemoveConfirm" xml:space="preserve">
    <value>Are you sure you want to remove batch account {0}</value>
  </data>
  <data name="RBA_RemoveResource" xml:space="preserve">
    <value>Removing batch account ...</value>
  </data>
  <data name="ResGroupLookup" xml:space="preserve">
    <value>Looking up resource group for account {0}</value>
  </data>
  <data name="ResourceNotFound" xml:space="preserve">
    <value>ResourceNotFound: Resource not found.</value>
    <comment>emulate exception generated by RP</comment>
  </data>
  <data name="SBA_Updating" xml:space="preserve">
    <value>Updating account {0}</value>
  </data>
</root>