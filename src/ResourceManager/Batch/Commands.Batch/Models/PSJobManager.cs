// -----------------------------------------------------------------------------
﻿//
﻿// Copyright Microsoft Corporation
﻿// Licensed under the Apache License, Version 2.0 (the "License");
﻿// you may not use this file except in compliance with the License.
﻿// You may obtain a copy of the License at
﻿// http://www.apache.org/licenses/LICENSE-2.0
﻿// Unless required by applicable law or agreed to in writing, software
﻿// distributed under the License is distributed on an "AS IS" BASIS,
﻿// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
﻿// See the License for the specific language governing permissions and
﻿// limitations under the License.
﻿// -----------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Azure.Commands.Batch.Models
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using Microsoft.Azure.Batch;
    
    
    public class PSJobManager
    {
        
        internal Microsoft.Azure.Batch.IJobManager omObject;
        
        private IList<PSResourceFile> resourceFiles;
        
        private IList<PSEnvironmentSetting> environmentSettings;
        
        private PSTaskConstraints taskConstraints;
        
        public PSJobManager()
        {
            this.omObject = new Microsoft.Azure.Batch.JobManager();
        }
        
        internal PSJobManager(Microsoft.Azure.Batch.IJobManager omObject)
        {
            if ((omObject == null))
            {
                throw new System.ArgumentNullException("omObject");
            }
            this.omObject = omObject;
        }
        
        public string Name
        {
            get
            {
                return this.omObject.Name;
            }
            set
            {
                this.omObject.Name = value;
            }
        }
        
        public string CommandLine
        {
            get
            {
                return this.omObject.CommandLine;
            }
            set
            {
                this.omObject.CommandLine = value;
            }
        }
        
        public IList<PSResourceFile> ResourceFiles
        {
            get
            {
                if (((this.resourceFiles == null) 
                            && (this.omObject.ResourceFiles != null)))
                {
                    List<PSResourceFile> list;
                    list = new List<PSResourceFile>();
                    IEnumerator<Microsoft.Azure.Batch.IResourceFile> enumerator;
                    enumerator = this.omObject.ResourceFiles.GetEnumerator();
                    for (
                    ; enumerator.MoveNext(); 
                    )
                    {
                        list.Add(new PSResourceFile(enumerator.Current));
                    }
                    this.resourceFiles = list;
                }
                return this.resourceFiles;
            }
            set
            {
                if ((value == null))
                {
                    this.omObject.ResourceFiles = null;
                }
                else
                {
                    this.omObject.ResourceFiles = new List<Microsoft.Azure.Batch.IResourceFile>();
                }
                this.resourceFiles = value;
            }
        }
        
        public IList<PSEnvironmentSetting> EnvironmentSettings
        {
            get
            {
                if (((this.environmentSettings == null) 
                            && (this.omObject.EnvironmentSettings != null)))
                {
                    List<PSEnvironmentSetting> list;
                    list = new List<PSEnvironmentSetting>();
                    IEnumerator<Microsoft.Azure.Batch.IEnvironmentSetting> enumerator;
                    enumerator = this.omObject.EnvironmentSettings.GetEnumerator();
                    for (
                    ; enumerator.MoveNext(); 
                    )
                    {
                        list.Add(new PSEnvironmentSetting(enumerator.Current));
                    }
                    this.environmentSettings = list;
                }
                return this.environmentSettings;
            }
            set
            {
                if ((value == null))
                {
                    this.omObject.EnvironmentSettings = null;
                }
                else
                {
                    this.omObject.EnvironmentSettings = new List<Microsoft.Azure.Batch.IEnvironmentSetting>();
                }
                this.environmentSettings = value;
            }
        }
        
        public System.Boolean? RunElevated
        {
            get
            {
                return this.omObject.RunElevated;
            }
            set
            {
                this.omObject.RunElevated = value;
            }
        }
        
        public System.Boolean? RunExclusive
        {
            get
            {
                return this.omObject.RunExclusive;
            }
            set
            {
                this.omObject.RunExclusive = value;
            }
        }
        
        public PSTaskConstraints TaskConstraints
        {
            get
            {
                if (((this.taskConstraints == null) 
                            && (this.omObject.TaskConstraints != null)))
                {
                    this.taskConstraints = new PSTaskConstraints(this.omObject.TaskConstraints);
                }
                return this.taskConstraints;
            }
            set
            {
                if ((value == null))
                {
                    this.omObject.TaskConstraints = null;
                }
                else
                {
                    this.omObject.TaskConstraints = value.omObject;
                }
                this.taskConstraints = value;
            }
        }
        
        public System.Boolean? KillJobOnCompletion
        {
            get
            {
                return this.omObject.KillJobOnCompletion;
            }
            set
            {
                this.omObject.KillJobOnCompletion = value;
            }
        }
    }
}
