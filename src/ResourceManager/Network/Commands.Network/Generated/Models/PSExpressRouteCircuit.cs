// <auto-generated>
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// 
// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.
// 
// For documentation on code generator please visit
//   https://aka.ms/nrp-code-generation
// Please contact wanrpdev@microsoft.com if you need to make changes to this file.
// </auto-generated>

using Microsoft.Azure.Management.Network.Models;
using Microsoft.WindowsAzure.Commands.Common.Attributes;
using Newtonsoft.Json;
using System.Collections.Generic;

namespace Microsoft.Azure.Commands.Network.Models
{
    public partial class PSExpressRouteCircuit : PSTopLevelResource
    {
        [Ps1Xml(Target = ViewControl.Table)]
        public bool? AllowClassicOperations { get; set; }
        [Ps1Xml(Target = ViewControl.Table)]
        public string CircuitProvisioningState { get; set; }
        [Ps1Xml(Target = ViewControl.Table)]
        public string ServiceProviderProvisioningState { get; set; }
        public string ServiceKey { get; set; }
        [Ps1Xml(Target = ViewControl.Table)]
        public string ServiceProviderNotes { get; set; }
        [Ps1Xml(Target = ViewControl.Table)]
        public string ProvisioningState { get; set; }
        public string GatewayManagerEtag { get; set; }
        [Ps1Xml(Target = ViewControl.Table)]
        public bool? AllowGlobalReach { get; set; }
        [Ps1Xml(Label = "Sku Name", Target = ViewControl.Table, ScriptBlock = "$_.Sku.Name")]
        public PSExpressRouteCircuitSku Sku { get; set; }
        public List<PSExpressRouteCircuitAuthorization> Authorizations { get; set; }
        public List<PSPeering> Peerings { get; set; }
        [Ps1Xml(Label = "ServiceProviderProperties ServiceProviderName", Target = ViewControl.Table, ScriptBlock = "$_.ServiceProviderProperties.ServiceProviderName")]
        public PSServiceProviderProperties ServiceProviderProperties { get; set; }
        public PSResourceId ExpressRoutePort { get; set; }
        [Ps1Xml(Target = ViewControl.Table)]
        public double? BandwidthInGbps { get; set; }
        [Ps1Xml(Target = ViewControl.Table)]
        public int? Stag { get; set; }

        [JsonIgnore]
        public string SkuText
        {
            get { return JsonConvert.SerializeObject(Sku, Formatting.Indented, new JsonSerializerSettings() { NullValueHandling = NullValueHandling.Ignore }); }
        }

        [JsonIgnore]
        public string AuthorizationsText
        {
            get { return JsonConvert.SerializeObject(Authorizations, Formatting.Indented, new JsonSerializerSettings() { NullValueHandling = NullValueHandling.Ignore }); }
        }

        [JsonIgnore]
        public string PeeringsText
        {
            get { return JsonConvert.SerializeObject(Peerings, Formatting.Indented, new JsonSerializerSettings() { NullValueHandling = NullValueHandling.Ignore }); }
        }

        [JsonIgnore]
        public string ServiceProviderPropertiesText
        {
            get { return JsonConvert.SerializeObject(ServiceProviderProperties, Formatting.Indented, new JsonSerializerSettings() { NullValueHandling = NullValueHandling.Ignore }); }
        }

        [JsonIgnore]
        public string ExpressRoutePortText
        {
            get { return JsonConvert.SerializeObject(ExpressRoutePort, Formatting.Indented, new JsonSerializerSettings() { NullValueHandling = NullValueHandling.Ignore }); }
        }
    }
}
