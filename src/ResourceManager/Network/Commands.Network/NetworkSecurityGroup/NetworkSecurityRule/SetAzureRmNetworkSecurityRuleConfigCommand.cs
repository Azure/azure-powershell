// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using Microsoft.Azure.Commands.Network.Models;
using Microsoft.Azure.Management.Network.Models;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;

namespace Microsoft.Azure.Commands.Network.Automation
{
    [Cmdlet("Set", "AzureRmNetworkSecurityRuleConfig", SupportsShouldProcess = true), OutputType(typeof(PSNetworkSecurityGroup))]
     public class SetAzureRmNetworkSecurityRuleConfigCommand : NetworkBaseCmdlet
    {
        [Parameter(
            Mandatory = true,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public PSNetworkSecurityGroup NetworkSecurityGroup { get; set; }

        [Parameter(
            Mandatory = false,
            HelpMessage = "A description for this rule. Restricted to 140 chars.",
            ValueFromPipelineByPropertyName = true)]
        public string Description { get; set; }

        [Parameter(
            Mandatory = false,
            HelpMessage = "Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'.",
            ValueFromPipelineByPropertyName = true)]
        public string Protocol { get; set; }

        [Parameter(
            Mandatory = false,
            HelpMessage = "The source port or range. Integer or range between 0 and 65535. Asterix '*' can also be used to match all ports.",
            ValueFromPipelineByPropertyName = true)]
        public string SourcePortRange { get; set; }

        [Parameter(
            Mandatory = false,
            HelpMessage = "The destination port or range. Integer or range between 0 and 65535. Asterix '*' can also be used to match all ports.",
            ValueFromPipelineByPropertyName = true)]
        public string DestinationPortRange { get; set; }

        [Parameter(
            Mandatory = false,
            HelpMessage = "The CIDR or source IP range. Asterix '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from. ",
            ValueFromPipelineByPropertyName = true)]
        public string SourceAddressPrefix { get; set; }

        [Parameter(
            Mandatory = false,
            HelpMessage = "The destination address prefix. CIDR or destination IP range. Asterix '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.",
            ValueFromPipelineByPropertyName = true)]
        public string DestinationAddressPrefix { get; set; }

        [Parameter(
            Mandatory = false,
            HelpMessage = "The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.",
            ValueFromPipelineByPropertyName = true)]
        public string Access { get; set; }

        [Parameter(
            Mandatory = false,
            HelpMessage = "The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.",
            ValueFromPipelineByPropertyName = true)]
        public int Priority { get; set; }

        [Parameter(
            Mandatory = false,
            HelpMessage = "The direction of the rule. The direction specifies if rule will be evaluated on incoming or outcoming traffic. Possible values are: 'Inbound' and 'Outbound'.",
            ValueFromPipelineByPropertyName = true)]
        public string Direction { get; set; }

        [Parameter(
            Mandatory = false,
            HelpMessage = "Name of the security rule.")]
        public string Name { get; set; }


        public override void Execute()
        {
            var vSecurityRulesIndex = this.NetworkSecurityGroup.SecurityRules.IndexOf(
                this.NetworkSecurityGroup.SecurityRules.SingleOrDefault(
                    resource => string.Equals(resource.Name, this.Name, System.StringComparison.CurrentCultureIgnoreCase)));
            if (vSecurityRulesIndex == -1)
            {
                throw new ArgumentException("SecurityRules with the specified name does not exist");
            }
            var vSecurityRules = new PSSecurityRule();

            vSecurityRules.Description = this.Description;
            vSecurityRules.Protocol = this.Protocol;
            vSecurityRules.SourcePortRange = this.SourcePortRange;
            vSecurityRules.DestinationPortRange = this.DestinationPortRange;
            vSecurityRules.SourceAddressPrefix = this.SourceAddressPrefix;
            vSecurityRules.DestinationAddressPrefix = this.DestinationAddressPrefix;
            vSecurityRules.Access = this.Access;
            vSecurityRules.Priority = this.Priority;
            vSecurityRules.Direction = this.Direction;
            vSecurityRules.Name = this.Name;
            this.NetworkSecurityGroup.SecurityRules[vSecurityRulesIndex] = vSecurityRules;
            WriteObject(this.NetworkSecurityGroup, true);
        }
    }
}

