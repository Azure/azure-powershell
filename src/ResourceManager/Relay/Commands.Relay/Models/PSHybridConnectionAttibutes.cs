// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Commands.Relay.Models
{
    using Azure.Management.Relay.Models;

    /// <summary>
    /// Description of HybridConnection Resource.
    /// </summary>
    public partial class PSHybridConnectionAttibutes : PSResourceAttributes
    {
        /// <summary>
        /// Initializes a new instance of the HybridConnection class.
        /// </summary>
        public PSHybridConnectionAttibutes() { }

        /// <summary>
        /// Initializes a new instance of the HybridConnection class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="createdAt">The time the HybridConnection was
        /// created.</param>
        /// <param name="updatedAt">The time the namespace was updated.</param>
        /// <param name="listenerCount">The number of listeners for this
        /// HybridConnection. min : 1 and max:25 supported</param>
        /// <param name="requiresClientAuthorization">true if client
        /// authorization is needed for this HybridConnection; otherwise,
        /// false.</param>
        /// <param name="userMetadata">usermetadata is a placeholder to store
        /// user-defined string data for the HybridConnection endpoint.e.g. it
        /// can be used to store  descriptive data, such as list of teams and
        /// their contact information also user-defined configuration settings
        /// can be stored.</param>
        public PSHybridConnectionAttibutes(string id = default(string), string name = default(string), string type = default(string), System.DateTime? createdAt = default(System.DateTime?), System.DateTime? updatedAt = default(System.DateTime?), int? listenerCount = default(int?), bool? requiresClientAuthorization = default(bool?), string userMetadata = default(string))
            : base(id, name, type)
        {
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            ListenerCount = listenerCount;
            RequiresClientAuthorization = requiresClientAuthorization;
            UserMetadata = userMetadata;
        }


        public PSHybridConnectionAttibutes(HybridConnection hybridConnection)
        {
            Id = hybridConnection.Id;
            Name = hybridConnection.Name;
            Type = hybridConnection.Type;
            CreatedAt = hybridConnection.CreatedAt;
            UpdatedAt = hybridConnection.UpdatedAt;
            ListenerCount = hybridConnection.ListenerCount;
            RequiresClientAuthorization = hybridConnection.RequiresClientAuthorization;
            UserMetadata = hybridConnection.UserMetadata;
        }


        /// <summary>
        /// Gets the time the HybridConnection was created.
        /// </summary>
        public System.DateTime? CreatedAt { get; protected set; }

        /// <summary>
        /// Gets the time the namespace was updated.
        /// </summary>
        public System.DateTime? UpdatedAt { get; protected set; }

        /// <summary>
        /// Gets the number of listeners for this HybridConnection. min : 1 and
        /// max:25 supported
        /// </summary>
        public int? ListenerCount { get; protected set; }

        /// <summary>
        /// Gets or sets true if client authorization is needed for this
        /// HybridConnection; otherwise, false.
        /// </summary>
        public bool? RequiresClientAuthorization { get; set; }

        /// <summary>
        /// Gets or sets usermetadata is a placeholder to store user-defined
        /// string data for the HybridConnection endpoint.e.g. it can be used
        /// to store  descriptive data, such as list of teams and their contact
        /// information also user-defined configuration settings can be stored.
        /// </summary>
        public string UserMetadata { get; set; }
        
    }
}

