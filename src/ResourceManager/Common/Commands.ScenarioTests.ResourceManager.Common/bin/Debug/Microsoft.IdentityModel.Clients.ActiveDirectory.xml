<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.IdentityModel.Clients.ActiveDirectory</name>
    </assembly>
    <members>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalIdHelper">
            <summary>
            This class adds additional query parameters or headers to the requests sent to STS. This can help us in
            collecting statistics and potentially on diagnostics.
            </summary>
            <summary>
            This class adds additional query parameters or headers to the requests sent to STS. This can help us in
            collecting statistics and potentially on diagnostics.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalException">
            <summary>
            The exception type thrown when an error occurs during token acquisition.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalException.#ctor">
            <summary>
             Initializes a new instance of the exception class.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalException.#ctor(System.String)">
            <summary>
             Initializes a new instance of the exception class with a specified
             error code.
            </summary>
            <param name="errorCode">The error code returned by the service or generated by client. This is the code you can rely on for exception handling.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalException.#ctor(System.String,System.String)">
            <summary>
             Initializes a new instance of the exception class with a specified
             error code and error message.
            </summary>
            <param name="errorCode">The error code returned by the service or generated by client. This is the code you can rely on for exception handling.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalException.#ctor(System.String,System.Exception)">
            <summary>
             Initializes a new instance of the exception class with a specified
             error code and a reference to the inner exception that is the cause of
             this exception.
            </summary>
            <param name="errorCode">The error code returned by the service or generated by client. This is the code you can rely on for exception handling.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified. It may especially contain the actual error message returned by the service.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalException.#ctor(System.String,System.String,System.Exception)">
            <summary>
             Initializes a new instance of the exception class with a specified
             error code, error message and a reference to the inner exception that is the cause of
             this exception.
            </summary>
            <param name="errorCode">The error code returned by the service or generated by client. This is the code you can rely on for exception handling.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified. It may especially contain the actual error message returned by the service.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalException.ErrorCode">
            <summary>
            Gets the protocol error code returned by the service or generated by client. This is the code you can rely on for exception handling.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalIdParameter.Product">
            <summary>
            ADAL Flavor: .NET or WinRT
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalIdParameter.Version">
            <summary>
            ADAL assembly version
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalIdParameter.CpuPlatform">
            <summary>
            CPU platform with x86, x64 or ARM as value
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalIdParameter.OS">
            <summary>
            Version of the operating system. This will not be sent on WinRT
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalIdParameter.DeviceModel">
            <summary>
            Device model. This will not be sent on .NET
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalServiceException">
            <summary>
            The exception type thrown when user returned by service does not match user in the request.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalServiceException.#ctor(System.String,System.String)">
            <summary>
             Initializes a new instance of the exception class with a specified
             error code and error message.
            </summary>
            <param name="errorCode">The error code returned by the service or generated by client. This is the code you can rely on for exception handling.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalServiceException.#ctor(System.String,System.Net.WebException)">
            <summary>
             Initializes a new instance of the exception class with a specified
             error code and a reference to the inner exception that is the cause of
             this exception.
            </summary>
            <param name="errorCode">The error code returned by the service or generated by client. This is the code you can rely on for exception handling.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified. It may especially contain the actual error message returned by the service.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalServiceException.#ctor(System.String,System.String,System.String[],System.Net.WebException)">
            <summary>
             Initializes a new instance of the exception class with a specified
             error code, error message and a reference to the inner exception that is the cause of
             this exception.
            </summary>
            <param name="errorCode">The protocol error code returned by the service or generated by client. This is the code you can rely on for exception handling.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="serviceErrorCodes">The specific error codes that may be returned by the service.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified. It may especially contain the actual error message returned by the service.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalServiceException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalServiceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalServiceException.StatusCode">
            <summary>
            Gets the status code returned from http layer. This status code is either the HttpStatusCode in the inner WebException response or
            NavigateError Event Status Code in browser based flow (See http://msdn.microsoft.com/en-us/library/bb268233(v=vs.85).aspx).
            You can use this code for purposes such as implementing retry logic or error investigation.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalServiceException.ServiceErrorCodes">
            <summary>
            Gets the specific error codes that may be returned by the service.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalSilentTokenAcquisitionException">
            <summary>
            The exception type thrown when a token cannot be acquired silently.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalSilentTokenAcquisitionException.#ctor">
            <summary>
             Initializes a new instance of the exception class.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalSilentTokenAcquisitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalSilentTokenAcquisitionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalUserMismatchException">
            <summary>
            The exception type thrown when user returned by service does not match user in the request.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalUserMismatchException.#ctor(System.String,System.String)">
            <summary>
             Initializes a new instance of the exception class.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalUserMismatchException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalUserMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalUserMismatchException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalUserMismatchException.RequestedUser">
            <summary>
            Gets the user requested from service.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalUserMismatchException.ReturnedUser">
            <summary>
            Gets the user returned by service.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext">
            <summary>
            The AuthenticationContext class retrieves authentication tokens from Azure Active Directory and ADFS services.
            </summary>
            <summary>
            The main class representing the authority issuing tokens for resources.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.#ctor(System.String)">
            <summary>
            Constructor to create the context with the address of the authority.
            Using this constructor will turn ON validation of the authority URL by default if validation is supported for the authority address.
            </summary>
            <param name="authority">Address of the authority to issue token.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor to create the context with the address of the authority and flag to turn address validation off.
            Using this constructor, address validation can be turned off. Make sure you are aware of the security implication of not validating the address.
            </summary>
            <param name="authority">Address of the authority to issue token.</param>
            <param name="validateAuthority">Flag to turn address validation ON or OFF.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.#ctor(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache)">
            <summary>
            Constructor to create the context with the address of the authority.
            Using this constructor will turn ON validation of the authority URL by default if validation is supported for the authority address.
            </summary>
            <param name="authority">Address of the authority to issue token.</param>
            <param name="tokenCache">Token cache used to lookup cached tokens on calls to AcquireToken</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.#ctor(System.String,System.Boolean,Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache)">
            <summary>
            Constructor to create the context with the address of the authority and flag to turn address validation off.
            Using this constructor, address validation can be turned off. Make sure you are aware of the security implication of not validating the address.
            </summary>
            <param name="authority">Address of the authority to issue token.</param>
            <param name="validateAuthority">Flag to turn address validation ON or OFF.</param>
            <param name="tokenCache">Token cache used to lookup cached tokens on calls to AcquireToken</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenAsync(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserCredential)">
            <summary>
            Acquires security token from the authority.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientId">Identifier of the client requesting the token.</param>
            <param name="userCredential">The user credential to use for token acquisition.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenAsync(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserAssertion)">
            <summary>
            Acquires security token from the authority.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientId">Identifier of the client requesting the token.</param>
            <param name="userAssertion">The assertion to use for token acquisition.</param>
            <returns>It contains Access Token and the Access Token's expiration time. Refresh Token property will be null for this overload.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenAsync(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential)">
            <summary>
            Acquires security token from the authority.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientCredential">The client credential to use for token acquisition.</param>
            <returns>It contains Access Token and the Access Token's expiration time. Refresh Token property will be null for this overload.</returns>        
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenAsync(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate)">
            <summary>
            Acquires security token from the authority.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientCertificate">The client certificate to use for token acquisition.</param>
            <returns>It contains Access Token and the Access Token's expiration time. Refresh Token property will be null for this overload.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenAsync(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion)">
            <summary>
            Acquires security token from the authority.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientAssertion">The client assertion to use for token acquisition.</param>
            <returns>It contains Access Token and the Access Token's expiration time. Refresh Token property will be null for this overload.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByAuthorizationCodeAsync(System.String,System.Uri,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential)">
            <summary>
            Acquires security token from the authority using authorization code previously received.
            This method does not lookup token cache, but stores the result in it, so it can be looked up using other methods such as <see cref="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilentAsync(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)"/>.
            </summary>
            <param name="authorizationCode">The authorization code received from service authorization endpoint.</param>
            <param name="redirectUri">Address to return to upon receiving a response from the authority.</param>
            <param name="clientCredential">The credential to use for token acquisition.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByAuthorizationCodeAsync(System.String,System.Uri,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential,System.String)">
            <summary>
            Acquires security token from the authority using an authorization code previously received.
            This method does not lookup token cache, but stores the result in it, so it can be looked up using other methods such as <see cref="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilentAsync(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)"/>.
            </summary>
            <param name="authorizationCode">The authorization code received from service authorization endpoint.</param>
            <param name="redirectUri">Address to return to upon receiving a response from the authority.</param>
            <param name="clientCredential">The credential to use for token acquisition.</param>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token. It can be null if provided earlier to acquire authorizationCode.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByAuthorizationCodeAsync(System.String,System.Uri,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion)">
            <summary>
            Acquires security token from the authority using an authorization code previously received.
            This method does not lookup token cache, but stores the result in it, so it can be looked up using other methods such as <see cref="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilentAsync(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)"/>.
            </summary>
            <param name="authorizationCode">The authorization code received from service authorization endpoint.</param>
            <param name="redirectUri">The redirect address used for obtaining authorization code.</param>
            <param name="clientAssertion">The client assertion to use for token acquisition.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByAuthorizationCodeAsync(System.String,System.Uri,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion,System.String)">
            <summary>
            Acquires security token from the authority using an authorization code previously received.
            This method does not lookup token cache, but stores the result in it, so it can be looked up using other methods such as <see cref="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilentAsync(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)"/>.
            </summary>
            <param name="authorizationCode">The authorization code received from service authorization endpoint.</param>
            <param name="redirectUri">The redirect address used for obtaining authorization code.</param>
            <param name="clientAssertion">The client assertion to use for token acquisition.</param>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token. It can be null if provided earlier to acquire authorizationCode.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByAuthorizationCodeAsync(System.String,System.Uri,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate)">
            <summary>
            Acquires security token from the authority using an authorization code previously received.
            This method does not lookup token cache, but stores the result in it, so it can be looked up using other methods such as <see cref="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilentAsync(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)"/>.
            </summary>
            <param name="authorizationCode">The authorization code received from service authorization endpoint.</param>
            <param name="redirectUri">The redirect address used for obtaining authorization code.</param>
            <param name="clientCertificate">The client certificate to use for token acquisition.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByAuthorizationCodeAsync(System.String,System.Uri,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate,System.String)">
            <summary>
            Acquires security token from the authority using an authorization code previously received.
            This method does not lookup token cache, but stores the result in it, so it can be looked up using other methods such as <see cref="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilentAsync(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)"/>.
            </summary>
            <param name="authorizationCode">The authorization code received from service authorization endpoint.</param>
            <param name="redirectUri">The redirect address used for obtaining authorization code.</param>
            <param name="clientCertificate">The client certificate to use for token acquisition.</param>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token. It can be null if provided earlier to acquire authorizationCode.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByRefreshTokenAsync(System.String,System.String)">
            <summary>
            Acquires a security token from the authority using a Refresh Token previously received.
            </summary>
            <param name="refreshToken">Refresh Token to use in the refresh flow.</param>
            <param name="clientId">Name or ID of the client requesting the token.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByRefreshTokenAsync(System.String,System.String,System.String)">
            <summary>
            Acquires a security token from the authority using a Refresh Token previously received.
            </summary>
            <param name="refreshToken">Refresh Token to use in the refresh flow.</param>
            <param name="clientId">Name or ID of the client requesting the token.</param>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token. If null, token is requested for the same resource refresh token was originally issued for.
            If passed, resource should match the original resource used to acquire refresh token unless token service supports refresh token for multiple resources.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByRefreshTokenAsync(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential)">
            <summary>
            Acquires a security token from the authority using a Refresh Token previously received.
            </summary>
            <param name="refreshToken">Refresh Token to use in the refresh flow.</param>
            <param name="clientCredential">The client credential used for token acquisition.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByRefreshTokenAsync(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential,System.String)">
            <summary>
            Acquires a security token from the authority using a Refresh Token previously received.
            </summary>
            <param name="refreshToken">Refresh Token to use in the refresh flow.</param>
            <param name="clientCredential">The client credential used for token acquisition.</param>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token. If null, token is requested for the same resource refresh token was originally issued for.
            If passed, resource should match the original resource used to acquire refresh token unless token service supports refresh token for multiple resources.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByRefreshTokenAsync(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion)">
            <summary>
            Acquires a security token from the authority using a Refresh Token previously received.
            </summary>
            <param name="refreshToken">Refresh Token to use in the refresh flow.</param>
            <param name="clientAssertion">The client assertion used for token acquisition.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByRefreshTokenAsync(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion,System.String)">
            <summary>
            Acquires a security token from the authority using a Refresh Token previously received.
            </summary>
            <param name="refreshToken">Refresh Token to use in the refresh flow.</param>
            <param name="clientAssertion">The client assertion used for token acquisition.</param>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token. If null, token is requested for the same resource refresh token was originally issued for.
            If passed, resource should match the original resource used to acquire refresh token unless token service supports refresh token for multiple resources.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByRefreshTokenAsync(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate)">
            <summary>
            Acquires a security token from the authority using a Refresh Token previously received.
            </summary>
            <param name="refreshToken">Refresh Token to use in the refresh flow.</param>
            <param name="clientCertificate">The client certificate used for token acquisition.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByRefreshTokenAsync(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate,System.String)">
            <summary>
            Acquires a security token from the authority using a Refresh Token previously received.
            </summary>
            <param name="refreshToken">Refresh Token to use in the refresh flow.</param>
            <param name="clientCertificate">The client certificate used for token acquisition.</param>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token. If null, token is requested for the same resource refresh token was originally issued for.
            If passed, resource should match the original resource used to acquire refresh token unless token service supports refresh token for multiple resources.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenAsync(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential,Microsoft.IdentityModel.Clients.ActiveDirectory.UserAssertion)">
            <summary>
            Acquires an access token from the authority on behalf of a user. It requires using a user token previously received.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientCredential">The client credential to use for token acquisition.</param>
            <param name="userAssertion">The user assertion (token) to use for token acquisition.</param>
            <returns>It contains Access Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenAsync(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate,Microsoft.IdentityModel.Clients.ActiveDirectory.UserAssertion)">
            <summary>
            Acquires an access token from the authority on behalf of a user. It requires using a user token previously received.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientCertificate">The client certificate to use for token acquisition.</param>
            <param name="userAssertion">The user assertion (token) to use for token acquisition.</param>
            <returns>It contains Access Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenAsync(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion,Microsoft.IdentityModel.Clients.ActiveDirectory.UserAssertion)">
            <summary>
            Acquires an access token from the authority on behalf of a user. It requires using a user token previously received.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientAssertion">The client assertion to use for token acquisition.</param>
            <param name="userAssertion">The user assertion (token) to use for token acquisition.</param>
            <returns>It contains Access Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilentAsync(System.String,System.String)">
            <summary>
            Acquires security token without asking for user credential.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientId">Identifier of the client requesting the token.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time. If acquiring token without user credential is not possible, the method throws AdalException.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilentAsync(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)">
            <summary>
            Acquires security token without asking for user credential.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientId">Identifier of the client requesting the token.</param>
            <param name="userId">Identifier of the user token is requested for. This parameter can be <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier"/>.Any.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time. If acquiring token without user credential is not possible, the method throws AdalException.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilentAsync(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)">
            <summary>
            Acquires security token without asking for user credential.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientCredential">The client credential to use for token acquisition.</param>
            <param name="userId">Identifier of the user token is requested for. This parameter can be <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier"/>.Any.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time. If acquiring token without user credential is not possible, the method throws AdalException.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilentAsync(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)">
            <summary>
            Acquires security token without asking for user credential.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientCertificate">The client certificate to use for token acquisition.</param>
            <param name="userId">Identifier of the user token is requested for. This parameter can be <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier"/>.Any.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time. If acquiring token without user credential is not possible, the method throws AdalException.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilentAsync(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)">
            <summary>
            Acquires security token without asking for user credential.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientAssertion">The client assertion to use for token acquisition.</param>
            <param name="userId">Identifier of the user token is requested for. This parameter can be <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier"/>.Any.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time. If acquiring token without user credential is not possible, the method throws AdalException.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireToken(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserCredential)">
            <summary>
            Acquires security token from the authority.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientId">Identifier of the client requesting the token.</param>
            <param name="userCredential">The credential to use for token acquisition.</param>
            <returns>It contains Access Token and the Access Token's expiration time. Refresh Token property will be null for this overload.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireToken(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserAssertion)">
            <summary>
            Acquires security token from the authority.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientId">Identifier of the client requesting the token.</param>
            <param name="userAssertion">The assertion to use for token acquisition.</param>
            <returns>It contains Access Token and the Access Token's expiration time. Refresh Token property will be null for this overload.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireToken(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential)">
            <summary>
            Acquires security token from the authority.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientCredential">The client credential to use for token acquisition.</param>
            <returns>It contains Access Token and the Access Token's expiration time. Refresh Token property will be null for this overload.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireToken(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate)">
            <summary>
            Acquires security token from the authority.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientCertificate">The client certificate to use for token acquisition.</param>
            <returns>It contains Access Token and the Access Token's expiration time. Refresh Token property will be null for this overload.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireToken(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion)">
            <summary>
            Acquires security token from the authority.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientAssertion">The client assertion to use for token acquisition.</param>
            <returns>It contains Access Token and the Access Token's expiration time. Refresh Token property will be null for this overload.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireToken(System.String,System.String,System.Uri)">
            <summary>
            Acquires security token from the authority.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientId">Identifier of the client requesting the token.</param>
            <param name="redirectUri">Address to return to upon receiving a response from the authority.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireToken(System.String,System.String,System.Uri,Microsoft.IdentityModel.Clients.ActiveDirectory.PromptBehavior)">
            <summary>
            Acquires security token from the authority.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientId">Identifier of the client requesting the token.</param>
            <param name="redirectUri">Address to return to upon receiving a response from the authority.</param>
            <param name="promptBehavior">If <see cref="F:Microsoft.IdentityModel.Clients.ActiveDirectory.PromptBehavior.Always"/>, asks service to show user the authentication page which gives them chance to authenticate as a different user.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireToken(System.String,System.String,System.Uri,Microsoft.IdentityModel.Clients.ActiveDirectory.PromptBehavior,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)">
            <summary>
            Acquires security token from the authority.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientId">Identifier of the client requesting the token.</param>
            <param name="redirectUri">Address to return to upon receiving a response from the authority.</param>
            <param name="promptBehavior">If <see cref="F:Microsoft.IdentityModel.Clients.ActiveDirectory.PromptBehavior.Always"/>, asks service to show user the authentication page which gives them chance to authenticate as a different user.</param>
            <param name="userId">Identifier of the user token is requested for. If created from DisplayableId, this parameter will be used to pre-populate the username field in the authentication form. Please note that the end user can still edit the username field and authenticate as a different user. 
            If you want to be notified of such change with an exception, create UserIdentifier with type RequiredDisplayableId. This parameter can be <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier"/>.Any.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireToken(System.String,System.String,System.Uri,Microsoft.IdentityModel.Clients.ActiveDirectory.PromptBehavior,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier,System.String)">
            <summary>
            Acquires security token from the authority.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientId">Identifier of the client requesting the token.</param>
            <param name="redirectUri">Address to return to upon receiving a response from the authority.</param>
            <param name="userId">Identifier of the user token is requested for. If created from DisplayableId, this parameter will be used to pre-populate the username field in the authentication form. Please note that the end user can still edit the username field and authenticate as a different user. 
            If you want to be notified of such change with an exception, create UserIdentifier with type RequiredDisplayableId. This parameter can be <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier"/>.Any.</param>
            <param name="promptBehavior">If <see cref="F:Microsoft.IdentityModel.Clients.ActiveDirectory.PromptBehavior.Always"/>, asks service to show user the authentication page which gives them chance to authenticate as a different user.</param>
            <param name="extraQueryParameters">This parameter will be appended as is to the query string in the HTTP authentication request to the authority. The parameter can be null.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByAuthorizationCode(System.String,System.Uri,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential)">
            <summary>
            Acquires security token from the authority using authorization code previously received.
            This method does not lookup token cache, but stores the result in it, so it can be looked up using other methods such as <see cref="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilent(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)"/>.
            </summary>
            <param name="authorizationCode">The authorization code received from service authorization endpoint.</param>
            <param name="redirectUri">Address to return to upon receiving a response from the authority.</param>
            <param name="clientCredential">The credential to use for token acquisition.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByAuthorizationCode(System.String,System.Uri,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential,System.String)">
            <summary>
            Acquires security token from the authority using an authorization code previously received.
            This method does not lookup token cache, but stores the result in it, so it can be looked up using other methods such as <see cref="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilent(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)"/>.
            </summary>
            <param name="authorizationCode">The authorization code received from service authorization endpoint.</param>
            <param name="redirectUri">Address to return to upon receiving a response from the authority.</param>
            <param name="clientCredential">The credential to use for token acquisition.</param>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token. It can be null if provided earlier to acquire authorizationCode.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByAuthorizationCode(System.String,System.Uri,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion)">
            <summary>
            Acquires security token from the authority using an authorization code previously received.
            This method does not lookup token cache, but stores the result in it, so it can be looked up using other methods such as <see cref="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilent(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)"/>.
            </summary>
            <param name="authorizationCode">The authorization code received from service authorization endpoint.</param>
            <param name="redirectUri">The redirect address used for obtaining authorization code.</param>
            <param name="clientAssertion">The client assertion to use for token acquisition.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByAuthorizationCode(System.String,System.Uri,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion,System.String)">
            <summary>
            Acquires security token from the authority using an authorization code previously received.
            This method does not lookup token cache, but stores the result in it, so it can be looked up using other methods such as <see cref="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilent(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)"/>.
            </summary>
            <param name="authorizationCode">The authorization code received from service authorization endpoint.</param>
            <param name="redirectUri">The redirect address used for obtaining authorization code.</param>
            <param name="clientAssertion">The client assertion to use for token acquisition.</param>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token. It can be null if provided earlier to acquire authorizationCode.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByAuthorizationCode(System.String,System.Uri,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate)">
            <summary>
            Acquires security token from the authority using an authorization code previously received.
            This method does not lookup token cache, but stores the result in it, so it can be looked up using other methods such as <see cref="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilent(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)"/>.
            </summary>
            <param name="authorizationCode">The authorization code received from service authorization endpoint.</param>
            <param name="redirectUri">The redirect address used for obtaining authorization code.</param>
            <param name="clientCertificate">The client certificate to use for token acquisition.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByAuthorizationCode(System.String,System.Uri,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate,System.String)">
            <summary>
            Acquires security token from the authority using an authorization code previously received.
            This method does not lookup token cache, but stores the result in it, so it can be looked up using other methods such as <see cref="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilent(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)"/>.
            </summary>
            <param name="authorizationCode">The authorization code received from service authorization endpoint.</param>
            <param name="redirectUri">The redirect address used for obtaining authorization code.</param>
            <param name="clientCertificate">The client certificate to use for token acquisition.</param>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token. It can be null if provided earlier to acquire authorizationCode.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByRefreshToken(System.String,System.String)">
            <summary>
            Acquires a security token from the authority using a Refresh Token previously received.
            </summary>
            <param name="refreshToken">Refresh Token to use in the refresh flow.</param>
            <param name="clientId">Name or ID of the client requesting the token.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByRefreshToken(System.String,System.String,System.String)">
            <summary>
            Acquires a security token from the authority using a Refresh Token previously received.
            </summary>
            <param name="refreshToken">Refresh Token to use in the refresh flow.</param>
            <param name="clientId">Name or ID of the client requesting the token.</param>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token. If null, token is requested for the same resource refresh token was originally issued for.
            If passed, resource should match the original resource used to acquire refresh token unless token service supports refresh token for multiple resources.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByRefreshToken(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential)">
            <summary>
            Acquires a security token from the authority using a Refresh Token previously received.
            </summary>
            <param name="refreshToken">Refresh Token to use in the refresh flow.</param>
            <param name="clientCredential">The client credential used for token acquisition.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByRefreshToken(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential,System.String)">
            <summary>
            Acquires a security token from the authority using a Refresh Token previously received.
            </summary>
            <param name="refreshToken">Refresh Token to use in the refresh flow.</param>
            <param name="clientCredential">The client credential used for token acquisition.</param>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token. If null, token is requested for the same resource refresh token was originally issued for.
            If passed, resource should match the original resource used to acquire refresh token unless token service supports refresh token for multiple resources.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByRefreshToken(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion)">
            <summary>
            Acquires a security token from the authority using a Refresh Token previously received.
            </summary>
            <param name="refreshToken">Refresh Token to use in the refresh flow.</param>
            <param name="clientAssertion">The client assertion used for token acquisition.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByRefreshToken(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion,System.String)">
            <summary>
            Acquires a security token from the authority using a Refresh Token previously received.
            </summary>
            <param name="refreshToken">Refresh Token to use in the refresh flow.</param>
            <param name="clientAssertion">The client assertion used for token acquisition.</param>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token. If null, token is requested for the same resource refresh token was originally issued for.
            If passed, resource should match the original resource used to acquire refresh token unless token service supports refresh token for multiple resources.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByRefreshToken(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate)">
            <summary>
            Acquires a security token from the authority using a Refresh Token previously received.
            </summary>
            <param name="refreshToken">Refresh Token to use in the refresh flow.</param>
            <param name="clientCertificate">The client certificate used for token acquisition.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenByRefreshToken(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate,System.String)">
            <summary>
            Acquires a security token from the authority using a Refresh Token previously received.
            </summary>
            <param name="refreshToken">Refresh Token to use in the refresh flow.</param>
            <param name="clientCertificate">The client certificate used for token acquisition.</param>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token. If null, token is requested for the same resource refresh token was originally issued for.
            If passed, resource should match the original resource used to acquire refresh token unless token service supports refresh token for multiple resources.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireToken(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential,Microsoft.IdentityModel.Clients.ActiveDirectory.UserAssertion)">
            <summary>
            Acquires an access token from the authority on behalf of a user. It requires using a user token previously received.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientCredential">The client credential to use for token acquisition.</param>
            <param name="userAssertion">The user assertion (token) to use for token acquisition.</param>
            <returns>It contains Access Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireToken(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate,Microsoft.IdentityModel.Clients.ActiveDirectory.UserAssertion)">
            <summary>
            Acquires an access token from the authority on behalf of a user. It requires using a user token previously received.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientCertificate">The client certificate to use for token acquisition.</param>
            <param name="userAssertion">The user assertion (token) to use for token acquisition.</param>
            <returns>It contains Access Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireToken(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion,Microsoft.IdentityModel.Clients.ActiveDirectory.UserAssertion)">
            <summary>
            Acquires an access token from the authority on behalf of a user. It requires using a user token previously received.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientAssertion">The client assertion to use for token acquisition.</param>
            <param name="userAssertion">The user assertion (token) to use for token acquisition.</param>
            <returns>It contains Access Token and the Access Token's expiration time.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilent(System.String,System.String)">
            <summary>
            Acquires security token without asking for user credential.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientId">Identifier of the client requesting the token.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time. If acquiring token without user credential is not possible, the method throws AdalException.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilent(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)">
            <summary>
            Acquires security token without asking for user credential.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientId">Identifier of the client requesting the token.</param>
            <param name="userId">Identifier of the user token is requested for. This parameter can be <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier"/>.Any.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time. If acquiring token without user credential is not possible, the method throws AdalException.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilent(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)">
            <summary>
            Acquires security token without asking for user credential.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientCredential">The client credential to use for token acquisition.</param>
            <param name="userId">Identifier of the user token is requested for. This parameter can be <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier"/>.Any.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time. If acquiring token without user credential is not possible, the method throws AdalException.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilent(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)">
            <summary>
            Acquires security token without asking for user credential.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientCertificate">The client certificate to use for token acquisition.</param>
            <param name="userId">Identifier of the user token is requested for. This parameter can be <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier"/>.Any.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time. If acquiring token without user credential is not possible, the method throws AdalException.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenSilent(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier)">
            <summary>
            Acquires security token without asking for user credential.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientAssertion">The client assertion to use for token acquisition.</param>
            <param name="userId">Identifier of the user token is requested for. This parameter can be <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier"/>.Any.</param>
            <returns>It contains Access Token, Refresh Token and the Access Token's expiration time. If acquiring token without user credential is not possible, the method throws AdalException.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.GetAuthorizationRequestURL(System.String,System.String,System.Uri,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier,System.String)">
            <summary>
            Gets URL of the authorize endpoint including the query parameters.
            </summary>
            <param name="resource">Identifier of the target resource that is the recipient of the requested token.</param>
            <param name="clientId">Identifier of the client requesting the token.</param>
            <param name="redirectUri">Address to return to upon receiving a response from the authority.</param>
            <param name="userId">Identifier of the user token is requested for. This parameter can be <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier"/>.Any.</param>
            <param name="extraQueryParameters">This parameter will be appended as is to the query string in the HTTP authentication request to the authority. The parameter can be null.</param>
            <returns>URL of the authorize endpoint including the query parameters.</returns>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.Authority">
            <summary>
            Gets address of the authority to issue token.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.ValidateAuthority">
            <summary>
            Gets a value indicating whether address validation is ON or OFF.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.TokenCache">
            <summary>
            Gets the TokenCache
            </summary>
            <remarks>
            By default, TokenCache is an in-memory collection of key/value pairs. 
            Library will automatically save tokens in the cache when AcquireToken is called.  
            The default token cache is static so all tokens will available to all instances of AuthenticationContext. To use a custom TokenCache pass one to the <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext">.constructor</see>.
            To turn OFF token caching, use the constructor and set TokenCache to null.
            </remarks>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.CorrelationId">
            <summary>
            Gets or sets correlation Id which would be sent to the service with the next request. 
            Correlation Id is to be used for diagnostics purposes. 
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.OwnerWindow">
            <summary>
            Gets or sets the owner of the browser dialog which pops up for receiving user credentials. It can be null.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationParameters">
            <summary>
            Contains authentication parameters based on unauthorized response from resource server.
            </summary>
            <summary>
            Contains authentication parameters based on unauthorized response from resource server.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationParameters.CreateFromResponseAuthenticateHeader(System.String)">
            <summary>
            Creates authentication parameters from the WWW-Authenticate header in response received from resource. This method expects the header to contain authentication parameters.
            </summary>
            <param name="authenticateHeader">Content of header WWW-Authenticate header</param>
            <returns>AuthenticationParameters object containing authentication parameters</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationParameters.CreateFromResourceUrlAsync(System.Uri)">
            <summary>
            Creates authentication parameters from address of the resource. This method expects the resource server to return unauthorized response
            with WWW-Authenticate header containing authentication parameters.
            </summary>
            <param name="resourceUrl">Address of the resource</param>
            <returns>AuthenticationParameters object containing authentication parameters</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationParameters.CreateFromUnauthorizedResponse(System.Net.HttpWebResponse)">
            <summary>
            Creates authentication parameters from the response received from the response received from the resource. This method expects the response to have unauthorized status and
            WWW-Authenticate header containing authentication parameters.</summary>
            <param name="response">Response received from the resource.</param>
            <returns>AuthenticationParameters object containing authentication parameters</returns>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationParameters.Authority">
            <summary>
            Gets or sets the address of the authority to issue token.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationParameters.Resource">
            <summary>
            Gets or sets the identifier of the target resource that is the recipient of the requested token.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationResult">
            <summary>
            Contains the results of one token acquisition operation. 
            </summary>
            <summary>
            Contains the results of one token acquisition operation. 
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationResult.#ctor(System.String,System.String,System.String,System.DateTimeOffset)">
            <summary>
            Creates result returned from AcquireToken. Except in advanced scenarios related to token caching, you do not need to create any instance of AuthenticationResult.
            </summary>
            <param name="accessTokenType">Type of the Access Token returned</param>
            <param name="accessToken">The Access Token requested</param>
            <param name="refreshToken">The Refresh Token associated with the requested Access Token</param>
            <param name="expiresOn">The point in time in which the Access Token returned in the AccessToken property ceases to be valid</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationResult.Deserialize(System.String)">
            <summary>
            Serializes the object to a JSON string
            </summary>
            <returns>Deserialized authentication result</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationResult.CreateAuthorizationHeader">
            <summary>
            Creates authorization header from authentication result.
            </summary>
            <returns>Created authorization header</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationResult.Serialize">
            <summary>
            Serializes the object to a JSON string
            </summary>
            <returns>Serialized authentication result</returns>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationResult.AccessTokenType">
            <summary>
            Gets the type of the Access Token returned. 
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationResult.AccessToken">
            <summary>
            Gets the Access Token requested.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationResult.RefreshToken">
            <summary>
            Gets the Refresh Token associated with the requested Access Token. Note: not all operations will return a Refresh Token.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationResult.ExpiresOn">
            <summary>
            Gets the point in time in which the Access Token returned in the AccessToken property ceases to be valid.
            This value is calculated based on current UTC time measured locally and the value expiresIn received from the service.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationResult.TenantId">
            <summary>
            Gets an identifier for the tenant the token was acquired from. This property will be null if tenant information is not returned by the service.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationResult.UserInfo">
            <summary>
            Gets user information including user Id. Some elements in UserInfo might be null if not returned by the service.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationResult.IdToken">
            <summary>
            Gets the entire Id Token if returned by the service or null if no Id Token is returned.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationResult.IsMultipleResourceRefreshToken">
            <summary>
            Gets a value indicating whether the refresh token can be used for requesting access token for other resources.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError">
            <summary>
            Error code returned as a property in AdalException
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.Unknown">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.InvalidArgument">
            <summary>
            Invalid argument.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.AuthenticationFailed">
            <summary>
            Authentication failed.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.AuthenticationCanceled">
            <summary>
            Authentication canceled.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.UnauthorizedResponseExpected">
            <summary>
            Unauthorized response expected from resource server.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.AuthorityNotInValidList">
            <summary>
            'authority' is not in the list of valid addresses.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.AuthorityValidationFailed">
            <summary>
            Authority validation failed.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.AssemblyLoadFailed">
            <summary>
            Loading required assembly failed.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.InvalidOwnerWindowType">
            <summary>
            Loading required assembly failed.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.MultipleTokensMatched">
            <summary>
            MultipleTokensMatched were matched.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.InvalidAuthorityType">
            <summary>
            Invalid authority type.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.InvalidCredentialType">
            <summary>
            Invalid credential type.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.InvalidServiceUrl">
            <summary>
            Invalid service URL.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.FailedToAcquireTokenSilently">
            <summary>
            failed_to_acquire_token_silently.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.CertificateKeySizeTooSmall">
            <summary>
            Certificate key size too small.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.IdentityProtocolLoginUrlNull">
            <summary>
            Identity protocol login URL Null.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.IdentityProtocolMismatch">
            <summary>
            Identity protocol mismatch.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.EmailAddressSuffixMismatch">
            <summary>
            Email address suffix mismatch.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.IdentityProviderRequestFailed">
            <summary>
            Identity provider request failed.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.StsTokenRequestFailed">
            <summary>
            STS token request failed.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.EncodedTokenTooLong">
            <summary>
            Encoded token too long.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.ServiceUnavailable">
            <summary>
            Service unavailable.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.ServiceReturnedError">
            <summary>
            Service returned error.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.FederatedServiceReturnedError">
            <summary>
            Federated service returned error.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.StsMetadataRequestFailed">
            <summary>
            STS metadata request failed.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.NoDataFromSts">
            <summary>
            No data from STS.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.UserMismatch">
            <summary>
            User Mismatch.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.UnknownUserType">
            <summary>
            Unknown User Type.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.UnknownUser">
            <summary>
            Unknown User.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.UserRealmDiscoveryFailed">
            <summary>
            User Realm Discovery Failed.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.AccessingWsMetadataExchangeFailed">
            <summary>
            Accessing WS Metadata Exchange Failed.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.ParsingWsMetadataExchangeFailed">
            <summary>
            Parsing WS Metadata Exchange Failed.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.WsTrustEndpointNotFoundInMetadataDocument">
            <summary>
            WS-Trust Endpoint Not Found in Metadata Document.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.ParsingWsTrustResponseFailed">
            <summary>
            Parsing WS-Trust Response Failed.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.NetworkNotAvailable">
            <summary>
            The request could not be preformed because the network is down.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.AuthenticationUiFailed">
            <summary>
            The request could not be preformed because of an unknown failure in the UI flow.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.UserInteractionRequired">
            <summary>
            One of two conditions was encountered.
            1. The PromptBehavior.Never flag was passed and but the constraint could not be honored 
               because user interaction was required.
            2. An error occurred during a silent web authentication that prevented the authentication
               flow from completing in a short enough time frame.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.PasswordRequiredForManagedUserError">
            <summary>
            Password is required for managed user.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.GetUserNameFailed">
            <summary>
            Failed to get user name.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.MissingFederationMetadataUrl">
            <summary>
            Federation Metadata Url is missing for federated user.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.FailedToRefreshToken">
            <summary>
            Failed to refresh token.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.IntegratedAuthFailed">
            <summary>
            Integrated authentication failed. You may try an alternative authentication method.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError.DuplicateQueryParameter">
            <summary>
            Duplicate query parameter in extraQueryParameters
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalErrorMessage">
            <summary>
            The active directory authentication error message.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.EncodingHelper">
            <summary>
            The encoding helper.
            </summary>
            <summary>
            The encoding helper.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.PromptBehavior">
            <summary>
            Indicates whether AcquireToken should automatically prompt only if necessary or whether
            it should prompt regardless of whether there is a cached token.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.PromptBehavior.Auto">
            <summary>
            Acquire token will prompt the user for credentials only when necessary.  If a token
            that meets the requirements is already cached then the user will not be prompted.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.PromptBehavior.Always">
            <summary>
            The user will be prompted for credentials even if there is a token that meets the requirements
            already in the cache.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.PromptBehavior.Never">
            <summary>
            The user will not be prompted for credentials.  If prompting is necessary then the AcquireToken request
            will fail.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.PromptBehavior.RefreshSession">
            <summary>
            Re-authorizes (through displaying webview) the resource usage, making sure that the resulting access
            token contains updated claims. If user logon cookies are available, the user will not be asked for 
            credentials again and the logon dialog will dismiss automatically.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheNotification">
            <summary>
            Notification for certain token cache interactions during token acquisition.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache">
            <summary>
            Token cache class used by <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext"/> to store access and refresh tokens.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache.#ctor(System.Byte[])">
            <summary>
            Constructor receiving state of the cache
            </summary>        
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache.Serialize">
            <summary>
            Serializes current state of the cache as a blob. Caller application can persist the blob and update the state of the cache later by 
            passing that blob back in constructor or by calling method Deserialize.
            </summary>
            <returns>Current state of the cache as a blob</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache.Deserialize(System.Byte[])">
            <summary>
            Deserializes state of the cache. The state should be the blob received earlier by calling the method Serialize.
            </summary>
            <param name="state">State of the cache as a blob</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache.ReadItems">
            <summary>
            Reads a copy of the list of all items in the cache. 
            </summary>
            <returns>The items in the cache</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache.DeleteItem(Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheItem)">
            <summary>
            Deletes an item from the cache.
            </summary>
            <param name="item">The item to delete from the cache</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache.Clear">
            <summary>
            Clears the cache by deleting all the items. Note that if the cache is the default shared cache, clearing it would
            impact all the instances of <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext"/> which share that cache.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache.QueryCache(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.TokenSubjectType,System.String,System.String)">
            <summary>
            Queries all values in the cache that meet the passed in values, plus the 
            authority value that this AuthorizationContext was created with.  In every case passing
            null results in a wildcard evaluation.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache.DefaultShared">
            <summary>
            Static token cache shared by all instances of AuthenticationContext which do not explicitly pass a cache instance during construction.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache.BeforeAccess">
            <summary>
            Notification method called before any library method accesses the cache.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache.BeforeWrite">
            <summary>
            Notification method called before any library method writes to the cache. This notification can be used to reload
            the cache state from a row in database and lock that row. That database row can then be unlocked in <see cref="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache.AfterAccess"/> notification.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache.AfterAccess">
            <summary>
            Notification method called after any library method accesses the cache.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache.HasStateChanged">
            <summary>
            Gets or sets the flag indicating whether cache state has changed. ADAL methods set this flag after any change. Caller application should reset 
            the flag after serializing and persisting the state of the cache.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache.Count">
            <summary>
            Gets the nunmber of items in the cache.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheItem">
            <summary>
            Token cache item
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheItem.#ctor(Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheKey,Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationResult)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheItem.Authority">
            <summary>
            Gets the Authority.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheItem.ClientId">
            <summary>
            Gets the ClientId.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheItem.ExpiresOn">
            <summary>
            Gets the Expiration.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheItem.FamilyName">
            <summary>
            Gets the FamilyName.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheItem.GivenName">
            <summary>
            Gets the GivenName.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheItem.IdentityProvider">
            <summary>
            Gets the IdentityProviderName.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheItem.IsMultipleResourceRefreshToken">
            <summary>
            Gets a value indicating whether the RefreshToken applies to multiple resources.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheItem.Resource">
            <summary>
            Gets the Resource.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheItem.TenantId">
            <summary>
            Gets the TenantId.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheItem.UniqueId">
            <summary>
            Gets the user's unique Id.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheItem.DisplayableId">
            <summary>
            Gets the user's displayable Id.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheItem.AccessToken">
            <summary>
            Gets the Access Token requested.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheItem.RefreshToken">
            <summary>
            Gets the Refresh Token associated with the requested Access Token. Note: not all operations will return a Refresh Token.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheItem.IdToken">
            <summary>
            Gets the entire Id Token if returned by the service or null if no Id Token is returned.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenSubjectType">
            <summary>
            Determines what type of subject the token was issued for.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenSubjectType.User">
            <summary>
            User
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenSubjectType.Client">
            <summary>
            Client
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenSubjectType.UserPlusClient">
            <summary>
            UserPlusClient: This is for confidential clients used in middle tier.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheKey">
            <summary>
            <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheKey"/> can be used with Linq to access items from the TokenCache dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheKey.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheKey.Equals(Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheKey)">
            <summary>
            Determines whether the specified TokenCacheKey is equal to the current object.
            </summary>
            <returns>
            true if the specified TokenCacheKey is equal to the current object; otherwise, false.
            </returns>
            <param name="other">The TokenCacheKey to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheKey.GetHashCode">
            <summary>
            Returns the hash code for this TokenCacheKey.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheNotificationArgs">
            <summary>
            Contains parameters used by the ADAL call accessing the cache.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheNotificationArgs.TokenCache">
            <summary>
            Gets the TokenCache
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheNotificationArgs.ClientId">
            <summary>
            Gets the ClientId.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheNotificationArgs.Resource">
            <summary>
            Gets the Resource.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheNotificationArgs.UniqueId">
            <summary>
            Gets the user's unique Id.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheNotificationArgs.DisplayableId">
            <summary>
            Gets the user's displayable Id.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserAssertion">
            <summary>
            Credential type containing an assertion representing user credential.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.UserAssertion.#ctor(System.String)">
            <summary>
            Constructor to create the object with an assertion. This constructor can be used for On Behalf Of flow which assumes the
            assertion is a JWT token. For other flows, the other construction with assertionType must be used.
            </summary>
            <param name="assertion">Assertion representing the user.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.UserAssertion.#ctor(System.String,System.String)">
            <summary>
            Constructor to create credential with client id, assertion and assertionType
            </summary>
            <param name="assertion">Assertion representing the user.</param>
            <param name="assertionType">Type of the assertion representing the user.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.UserAssertion.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor to create credential with client id, assertion, assertionType and userId
            </summary>
            <param name="assertion">Assertion representing the user.</param>
            <param name="assertionType">Type of the assertion representing the user.</param>
            <param name="userName">Identity of the user token is requested for. This parameter can be null.</param>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.UserAssertion.Assertion">
            <summary>
            Gets the assertion.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.UserAssertion.AssertionType">
            <summary>
            Gets the assertion type.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.UserAssertion.UserName">
            <summary>
            Gets name of the user.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserCredential">
            <summary>
            Credential used for integrated authentication on domain-joined machines.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.UserCredential.#ctor">
            <summary>
            Constructor to create user credential. Using this constructor would imply integrated authentication with logged in user
            and it can only be used in domain joined scenarios.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.UserCredential.#ctor(System.String)">
            <summary>
            Constructor to create credential with client id and secret
            </summary>
            <param name="userName">Identifier of the user application requests token on behalf.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.UserCredential.#ctor(System.String,System.String)">
            <summary>
            Constructor to create credential with client id and secret
            </summary>
            <param name="userName">Identifier of the user application requests token on behalf.</param>
            <param name="password">User password.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.UserCredential.#ctor(System.String,System.Security.SecureString)">
            <summary>
            Constructor to create credential with client id and secret
            </summary>
            <param name="userName">Identifier of the user application requests token on behalf.</param>
            <param name="securePassword">User password.</param>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.UserCredential.UserName">
            <summary>
            Gets identifier of the user.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifierType">
            <summary>
            Indicates the type of <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier"/>
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifierType.UniqueId">
            <summary>
            When a <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier"/> of this type is passed in a token acquisition operation,
            the operation is guaranteed to return a token issued for the user with corresponding <see cref="P:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier.UniqueId"/> or fail.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifierType.OptionalDisplayableId">
            <summary>
            When a <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier"/> of this type is passed in a token acquisition operation,
            the operation restricts cache matches to the value provided and injects it as a hint in the authentication experience. However the end user could overwrite that value, resulting in a token issued to a different account than the one specified in the <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier"/> in input.
            </summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifierType.RequiredDisplayableId">
            <summary>
            When a <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier"/> of this type is passed in a token acquisition operation,
            the operation is guaranteed to return a token issued for the user with corresponding <see cref="P:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier.DisplayableId"/> (UPN or email) or fail
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier">
            <summary>
            Contains identifier for a user.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier.#ctor(System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifierType)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="type"></param>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier.Type">
            <summary>
            Gets type of the <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier"/>.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier.Id">
            <summary>
            Gets Id of the <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier"/>.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier.AnyUser">
            <summary>
            Gets an static instance of <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier"/> to represent any user.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.UserInfo">
            <summary>
            Contains information of a single user. This information is used for token cache lookup. Also if created with userId, userId is sent to the service when login_hint is accepted.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.UserInfo.UniqueId">
            <summary>
            Gets identifier of the user authenticated during token acquisition. 
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.UserInfo.DisplayableId">
            <summary>
            Gets a displayable value in UserPrincipalName (UPN) format. The value can be null.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.UserInfo.GivenName">
            <summary>
            Gets given name of the user if provided by the service. If not, the value is null. 
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.UserInfo.FamilyName">
            <summary>
            Gets family name of the user if provided by the service. If not, the value is null. 
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.UserInfo.PasswordExpiresOn">
            <summary>
            Gets the time when the password expires. Default value is 0.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.UserInfo.PasswordChangeUrl">
            <summary>
            Gets the url where the user can change the expiring password. The value can be null.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.UserInfo.IdentityProvider">
            <summary>
            Gets identity provider if returned by the service. If not, the value is null. 
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalTrace">
            <summary>
            This class manages tracing in ADAL.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalTrace.TraceSource">
            <summary>
            Sets/gets the TraceSource that ADAL writes events to which has the name Microsoft.IdentityModel.Clients.ActiveDirectory.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.AdalTrace.LegacyTraceSwitch">
            <summary>
            Enables/disables basic tracing using class System.Diagnostics.Trace.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion">
            <summary>
            Credential type containing an assertion of type "urn:ietf:params:oauth:token-type:jwt".
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion.#ctor(System.String,System.String)">
            <summary>
            Constructor to create credential with a jwt token encoded as a base64 url encoded string.
            </summary>
            <param name="clientId">Identifier of the client requesting the token.</param>
            <param name="assertion">The jwt used as credential.</param>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion.ClientId">
            <summary>
            Gets the identifier of the client requesting the token.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion.Assertion">
            <summary>
            Gets the assertion.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion.AssertionType">
            <summary>
            Gets the assertion type.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate">
            <summary>
            Containing certificate used to create client assertion.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate.#ctor(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Constructor to create credential with client Id and certificate.
            </summary>
            <param name="clientId">Identifier of the client requesting the token.</param>
            <param name="certificate">The certificate used as credential.</param>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate.MinKeySizeInBits">
            <summary>
            Gets minimum X509 certificate key size in bits
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate.ClientId">
            <summary>
            Gets the identifier of the client requesting the token.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate.Certificate">
            <summary>
            Gets the certificate used as credential.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential">
            <summary>
            Credential including client id and secret.
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential.#ctor(System.String,System.String)">
            <summary>
            Constructor to create credential with client id and secret
            </summary>
            <param name="clientId">Identifier of the client requesting the token.</param>
            <param name="clientSecret">Secret of the client requesting the token.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential.#ctor(System.String,System.Security.SecureString)">
            <summary>
            Constructor to create credential with client id and secret. This constructor accepts client secret as SecureString.
            </summary>
            <param name="clientId">Identifier of the client requesting the token.</param>
            <param name="secureClientSecret">Secret of the client requesting the token in form of SecureString.</param>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential.ClientId">
            <summary>
            Gets the identifier of the client requesting the token.
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.StaTaskScheduler">
            <summary>Provides a scheduler that uses STA threads.</summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.StaTaskScheduler._tasks">
            <summary>Stores the queued tasks to be executed by our pool of STA threads.</summary>
        </member>
        <member name="F:Microsoft.IdentityModel.Clients.ActiveDirectory.StaTaskScheduler._threads">
            <summary>The STA threads used by the scheduler.</summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.StaTaskScheduler.#ctor(System.Int32)">
            <summary>Initializes a new instance of the StaTaskScheduler class with the specified concurrency level.</summary>
            <param name="numberOfThreads">The number of threads that should be created and used by this scheduler.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.StaTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a Task to be executed by this scheduler.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.StaTaskScheduler.GetScheduledTasks">
            <summary>Provides a list of the scheduled tasks for the debugger to consume.</summary>
            <returns>An enumerable of all tasks currently scheduled.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.StaTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Determines whether a Task may be inlined.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued.</param>
            <returns>true if the task was successfully inlined; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.StaTaskScheduler.Dispose">
            <summary>
            Cleans up the scheduler by indicating that no more tasks will be queued.
            This method blocks until all threads successfully shutdown.
            </summary>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.StaTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.IWebUI">
            <summary>
            Interface for Authentication Dialog
            </summary>
        </member>
        <member name="M:Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.IWebUI.Authenticate(System.Uri,System.Uri)">
            <summary>
            
            </summary>
            <param name="requestUri"></param>
            <param name="callbackUri"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.IWebUI.OwnerWindow">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.IdentityModel.Clients.ActiveDirectory.WebUIFactory">
            <summary>
            This class loads the assembly containing the authentication dialog classes and creates a new instance of an IWebUI.
            This class is necessary since there is a loose coupling between this assembly and the assembly containing Windows Forms 
            dependencies.
            </summary>
        </member>
    </members>
</doc>
