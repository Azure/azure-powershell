<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ImportingRedisCache" xml:space="preserve">
    <value>Are you sure you want to import data into redis cache '{0}'?</value>
  </data>
  <data name="ImportRedisCache" xml:space="preserve">
    <value>Importing data into redis cache '{0}' ...</value>
  </data>
  <data name="MaxMemoryPolicyException" xml:space="preserve">
    <value>The 'MaxMemoryPolicy' setting has been deprecated. Please use 'RedisConfiguration' setting to set MaxMemoryPolicy. e.g. -RedisConfiguration @{"maxmemory-policy" = "allkeys-lru"}</value>
  </data>
  <data name="RebootingRedisCache" xml:space="preserve">
    <value>Are you sure you want to reboot redis cache '{0}' {1}?</value>
  </data>
  <data name="RebootRedisCache" xml:space="preserve">
    <value>Rebooting redis cache '{0}' ...</value>
  </data>
  <data name="RedisCacheExists" xml:space="preserve">
    <value>Redis cache with name '{0}' already exists.</value>
  </data>
  <data name="RegenerateRedisCacheKey" xml:space="preserve">
    <value>Regenerating {1} key for redis cache '{0}' ...</value>
  </data>
  <data name="RegeneratingRedisCacheKey" xml:space="preserve">
    <value>Are you sure you want to regenerate {1} key for redis cache '{0}'?</value>
  </data>
  <data name="RemoveRedisCache" xml:space="preserve">
    <value>Removing redis cache '{0}' ...</value>
  </data>
  <data name="RemoveRedisCacheDiagnostics" xml:space="preserve">
    <value>Disabling diagnostics on redis cache '{0}' ...</value>
  </data>
  <data name="RemovingRedisCache" xml:space="preserve">
    <value>Are you sure you want to remove redis cache '{0}'?</value>
  </data>
  <data name="RemovingRedisCacheDiagnostics" xml:space="preserve">
    <value>Are you sure you want to disable diagnostics on redis cache '{0}'?</value>
  </data>
  <data name="StorageAccountIdException" xml:space="preserve">
    <value>StorageAccountId is not valid ARM resource Id.</value>
  </data>
  <data name="InvalidRedisCacheName" xml:space="preserve">
    <value>Name should not contain '/' or '.'. Name should be the plain, short name of the redis cache, e.g. 'mycache'. (Not a fully qualified DNS name, and not an Azure resource identifier.)</value>
  </data>
  <data name="InvalidResourceGroupName" xml:space="preserve">
    <value>ResourceGroupName should not contain '/'. Name should be the plain, short name of the resource group, e.g. 'myResourceGroup'. (Not an Azure resource identifier.)</value>
  </data>
  <data name="PatchScheduleNotFound" xml:space="preserve">
    <value>There are no patch schedules found for redis cache '{0}'.</value>
  </data>
  <data name="FirewallRuleCreationFailed" xml:space="preserve">
    <value>Operation to create firewall rule failed.</value>
  </data>
  <data name="FirewallRuleNotFound" xml:space="preserve">
    <value>Cache '{0}' does not have a firewall rule with name '{1}'.</value>
  </data>
  <data name="LinkedServerCreationFailed" xml:space="preserve">
    <value>Operation to link cache '{0}' to cache '{1}' failed.</value>
  </data>
  <data name="LinkedServerNotFound" xml:space="preserve">
    <value>Primary Cache '{0}' does not have link with secondary cache '{1}'.</value>
  </data>
  <data name="InvalidRedisCacheId" xml:space="preserve">
    <value>Redis Cache Id '{0}'is not valid. Redis Cache Id should be of the form "/subscriptions/&lt;subscription id&gt;/resourceGroups/&lt;resource group name&gt;/providers/Microsoft.Cache/Redis/&lt;cache name&gt;". </value>
  </data>
  <data name="CreatingFirewallRule" xml:space="preserve">
    <value>Creating firewall rule on Redis Cache '{0}'...</value>
  </data>
  <data name="LinkingRedisCache" xml:space="preserve">
    <value>Linking Redis Cache '{0}' to '{1}'...</value>
  </data>
  <data name="RemoveFirewallRule" xml:space="preserve">
    <value>Removing firewall rule '{0}' from Redis Cache '{1}'...</value>
  </data>
  <data name="RemoveLinkedServer" xml:space="preserve">
    <value>Unlinking Redis Cache '{0}' from '{1}'...</value>
  </data>
  <data name="CacheNotFound" xml:space="preserve">
    <value>Redis Cache with name '{0}' does not exists.</value>
  </data>
  <data name="CreatePatchSchedule" xml:space="preserve">
    <value>Creating patching schedule on redis cache '{0}'...</value>
  </data>
  <data name="CreateRedisCache" xml:space="preserve">
    <value>Creating redis cache '{0}' ...</value>
  </data>
  <data name="ExportRedisCache" xml:space="preserve">
    <value>Exporting data from redis cache '{0}' ...</value>
  </data>
  <data name="RemovePatchSchedule" xml:space="preserve">
    <value>Removing patching schedule from redis cache '{0}'...</value>
  </data>
  <data name="SetRedisCacheDiagnostics" xml:space="preserve">
    <value>Enabling diagnostics on redis cache '{0}' ...</value>
  </data>
  <data name="UpdateRedisCache" xml:space="preserve">
    <value>Updating redis cache '{0}' ...</value>
  </data>
</root>