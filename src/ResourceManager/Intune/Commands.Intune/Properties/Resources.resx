<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddLinkedResouce_ActionMessage" xml:space="preserve">
    <value>Are you sure you want to add {0} with name '{1}' to {2} with name '{3}'</value>
    <comment>Example: Are you sure you want to add App with name 'appName' to Android policy with name 'policyId'</comment>
  </data>
  <data name="AddLinkedResources_ProcessMessage" xml:space="preserve">
    <value>Adding {0} with name '{1}' to {2} with name '{3}'.</value>
    <comment>Example: Adding App with name 'appName' to Android policy with name 'policyId'.</comment>
  </data>
  <data name="AndroidPolicy" xml:space="preserve">
    <value>Android policy</value>
  </data>
  <data name="App" xml:space="preserve">
    <value>App</value>
  </data>
  <data name="ARMEndpointNotSetErrorMessage" xml:space="preserve">
    <value>The endpoint for the Azure Resource Manager service is not set. Please report this issue via GitHub or contact Microsoft customer support.</value>
  </data>
  <data name="DeleteResource_ActionMessage" xml:space="preserve">
    <value>Are you sure you want to delete {0} with name '{1}'</value>
    <comment>Example: Are you sure you want to delete Android policy with name 'policyName'</comment>
  </data>
  <data name="DeleteResource_ProcessMessage" xml:space="preserve">
    <value>Deleting {0} with name '{1}'.</value>
    <comment>Example: Deleting Android policy with name 'policyName'.</comment>
  </data>
  <data name="Group" xml:space="preserve">
    <value>Group</value>
  </data>
  <data name="IosPolicy" xml:space="preserve">
    <value>iOSpolicy</value>
  </data>
  <data name="NewResource" xml:space="preserve">
    <value>New {0}</value>
    <comment>Example: New Android policy</comment>
  </data>
  <data name="NewResource_ActionMessage" xml:space="preserve">
    <value>Are you sure you want to create a new {0} with name '{1}'</value>
    <comment>Example: Are you sure you want to create a new Android policy with name 'policyName'</comment>
  </data>
  <data name="NewResource_ProcessMessage" xml:space="preserve">
    <value>Creating a new {0} with name '{1}'.</value>
    <comment>Example: Creating a new Android policy with name 'policyName'.</comment>
  </data>
  <data name="NoItemsDeleted" xml:space="preserve">
    <value>0 item deleted.</value>
  </data>
  <data name="NoItemsReturned" xml:space="preserve">
    <value>0 items returned.</value>
  </data>
  <data name="OneItemDeleted" xml:space="preserve">
    <value>1 item deleted.</value>
  </data>
  <data name="OperationCompletedMessage" xml:space="preserve">
    <value>Operation completed successfully.</value>
  </data>
  <data name="RemoveLinkedResource_ActionMessage" xml:space="preserve">
    <value>Are you sure you want to remove {0} with name '{1}' from {2} with name '{3}'</value>
    <comment>Are you sure you want to remove App with name 'appName' from android policy with name 'policyName'</comment>
  </data>
  <data name="RemoveLinkedResource_ProcessMessage" xml:space="preserve">
    <value>Removing the {0} with name '{1}' from {2} with name '{3}'.</value>
    <comment>Example: Removing the App with name 'appName' from iOS policy with name 'policyName'.</comment>
  </data>
  <data name="SetResource_ActionMessage" xml:space="preserve">
    <value>Are you sure you want to update {0} with name '{1}'</value>
    <comment>Example: Are you sure you want to update iOS policy with name 'policyName'</comment>
  </data>
  <data name="SetResource_ProcessMessage" xml:space="preserve">
    <value>Updating {0} with name '{1}'.</value>
    <comment>Example:Updating iOS policy with name 'policyName'.</comment>
  </data>
  <data name="SpecifyValueGreaterOrEqualToZeroMessage" xml:space="preserve">
    <value>Please specify value greater than or equal to 0</value>
  </data>
  <data name="NotInitializedErrorMessage" xml:space="preserve">
    <value>Not initialized</value>
  </data>
  <data name="InvokeDeviceWipe_ActionMessage" xml:space="preserve">
    <value>Are you sure you want to wipe device {0} for user '{1}'?</value>
  </data>
  <data name="InvokeDeviceWipe_ProcessMessage" xml:space="preserve">
    <value>Wiping device {0} for user '{1}'.</value>
  </data>
</root>