// -----------------------------------------------------------------------------
﻿//
﻿// Copyright Microsoft Corporation
﻿// Licensed under the Apache License, Version 2.0 (the "License");
﻿// you may not use this file except in compliance with the License.
﻿// You may obtain a copy of the License at
﻿// http://www.apache.org/licenses/LICENSE-2.0
﻿// Unless required by applicable law or agreed to in writing, software
﻿// distributed under the License is distributed on an "AS IS" BASIS,
﻿// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
﻿// See the License for the specific language governing permissions and
﻿// limitations under the License.
﻿// -----------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Azure.Commands.Batch.Models
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using Microsoft.Azure.Batch;
    
    
    public partial class PSExitConditions
    {
        
        internal Microsoft.Azure.Batch.ExitConditions omObject;
        
        private PSExitOptions @default;
        
        private IList<PSExitCodeRangeMapping> exitCodeRanges;
        
        private IList<PSExitCodeMapping> exitCodes;
        
        private PSExitOptions schedulingError;
        
        public PSExitConditions()
        {
            this.omObject = new Microsoft.Azure.Batch.ExitConditions();
        }
        
        internal PSExitConditions(Microsoft.Azure.Batch.ExitConditions omObject)
        {
            if ((omObject == null))
            {
                throw new System.ArgumentNullException("omObject");
            }
            this.omObject = omObject;
        }
        
        public PSExitOptions Default
        {
            get
            {
                if (((this.@default == null) 
                            && (this.omObject.Default != null)))
                {
                    this.@default = new PSExitOptions(this.omObject.Default);
                }
                return this.@default;
            }
            set
            {
                if ((value == null))
                {
                    this.omObject.Default = null;
                }
                else
                {
                    this.omObject.Default = value.omObject;
                }
                this.@default = value;
            }
        }
        
        public IList<PSExitCodeRangeMapping> ExitCodeRanges
        {
            get
            {
                if (((this.exitCodeRanges == null) 
                            && (this.omObject.ExitCodeRanges != null)))
                {
                    List<PSExitCodeRangeMapping> list;
                    list = new List<PSExitCodeRangeMapping>();
                    IEnumerator<Microsoft.Azure.Batch.ExitCodeRangeMapping> enumerator;
                    enumerator = this.omObject.ExitCodeRanges.GetEnumerator();
                    for (
                    ; enumerator.MoveNext(); 
                    )
                    {
                        list.Add(new PSExitCodeRangeMapping(enumerator.Current));
                    }
                    this.exitCodeRanges = list;
                }
                return this.exitCodeRanges;
            }
            set
            {
                if ((value == null))
                {
                    this.omObject.ExitCodeRanges = null;
                }
                else
                {
                    this.omObject.ExitCodeRanges = new List<Microsoft.Azure.Batch.ExitCodeRangeMapping>();
                }
                this.exitCodeRanges = value;
            }
        }
        
        public IList<PSExitCodeMapping> ExitCodes
        {
            get
            {
                if (((this.exitCodes == null) 
                            && (this.omObject.ExitCodes != null)))
                {
                    List<PSExitCodeMapping> list;
                    list = new List<PSExitCodeMapping>();
                    IEnumerator<Microsoft.Azure.Batch.ExitCodeMapping> enumerator;
                    enumerator = this.omObject.ExitCodes.GetEnumerator();
                    for (
                    ; enumerator.MoveNext(); 
                    )
                    {
                        list.Add(new PSExitCodeMapping(enumerator.Current));
                    }
                    this.exitCodes = list;
                }
                return this.exitCodes;
            }
            set
            {
                if ((value == null))
                {
                    this.omObject.ExitCodes = null;
                }
                else
                {
                    this.omObject.ExitCodes = new List<Microsoft.Azure.Batch.ExitCodeMapping>();
                }
                this.exitCodes = value;
            }
        }
        
        public PSExitOptions SchedulingError
        {
            get
            {
                if (((this.schedulingError == null) 
                            && (this.omObject.SchedulingError != null)))
                {
                    this.schedulingError = new PSExitOptions(this.omObject.SchedulingError);
                }
                return this.schedulingError;
            }
            set
            {
                if ((value == null))
                {
                    this.omObject.SchedulingError = null;
                }
                else
                {
                    this.omObject.SchedulingError = value.omObject;
                }
                this.schedulingError = value;
            }
        }
    }
}
