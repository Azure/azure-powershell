// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Runtime.Extensions;

    /// <summary>Properties of the storage task.</summary>
    public partial class StorageTaskProperties :
        Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskProperties,
        Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskPropertiesInternal
    {

        /// <summary>Backing field for <see cref="Action" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskAction _action;

        /// <summary>The storage task action that is executed</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskAction Action { get => (this._action = this._action ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.StorageTaskAction()); set => this._action = value; }

        /// <summary>Backing field for <see cref="CreationTimeInUtc" /> property.</summary>
        private global::System.DateTime? _creationTimeInUtc;

        /// <summary>The creation date and time of the storage task in UTC.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.PropertyOrigin.Owned)]
        public global::System.DateTime? CreationTimeInUtc { get => this._creationTimeInUtc; }

        /// <summary>Backing field for <see cref="Description" /> property.</summary>
        private string _description;

        /// <summary>Text that describes the purpose of the storage task</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.PropertyOrigin.Owned)]
        public string Description { get => this._description; set => this._description = value; }

        /// <summary>List of operations to execute in the else block</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation> ElseOperation { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskActionInternal)Action).ElseOperation; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskActionInternal)Action).ElseOperation = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Enabled" /> property.</summary>
        private bool _enabled;

        /// <summary>Storage Task is enabled when set to true and disabled when set to false</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.PropertyOrigin.Owned)]
        public bool Enabled { get => this._enabled; set => this._enabled = value; }

        /// <summary>
        /// Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and operators.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.PropertyOrigin.Inlined)]
        public string IfCondition { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskActionInternal)Action).IfCondition; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskActionInternal)Action).IfCondition = value ; }

        /// <summary>List of operations to execute when the condition predicate satisfies.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation> IfOperation { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskActionInternal)Action).IfOperation; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskActionInternal)Action).IfOperation = value ; }

        /// <summary>Internal Acessors for Action</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskAction Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskPropertiesInternal.Action { get => (this._action = this._action ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.StorageTaskAction()); set { {_action = value;} } }

        /// <summary>Internal Acessors for ActionElse</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IElseCondition Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskPropertiesInternal.ActionElse { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskActionInternal)Action).Else; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskActionInternal)Action).Else = value; }

        /// <summary>Internal Acessors for ActionIf</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IIfCondition Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskPropertiesInternal.ActionIf { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskActionInternal)Action).If; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskActionInternal)Action).If = value; }

        /// <summary>Internal Acessors for CreationTimeInUtc</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskPropertiesInternal.CreationTimeInUtc { get => this._creationTimeInUtc; set { {_creationTimeInUtc = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for TaskVersion</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskPropertiesInternal.TaskVersion { get => this._taskVersion; set { {_taskVersion = value;} } }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>Represents the provisioning state of the storage task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="TaskVersion" /> property.</summary>
        private long? _taskVersion;

        /// <summary>Storage task version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.PropertyOrigin.Owned)]
        public long? TaskVersion { get => this._taskVersion; }

        /// <summary>Creates an new <see cref="StorageTaskProperties" /> instance.</summary>
        public StorageTaskProperties()
        {

        }
    }
    /// Properties of the storage task.
    public partial interface IStorageTaskProperties :
        Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Runtime.IJsonSerializable
    {
        /// <summary>The creation date and time of the storage task in UTC.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The creation date and time of the storage task in UTC.",
        SerializedName = @"creationTimeInUtc",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreationTimeInUtc { get;  }
        /// <summary>Text that describes the purpose of the storage task</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Text that describes the purpose of the storage task",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>List of operations to execute in the else block</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of operations to execute in the else block",
        SerializedName = @"operations",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation> ElseOperation { get; set; }
        /// <summary>Storage Task is enabled when set to true and disabled when set to false</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Storage Task is enabled when set to true and disabled when set to false",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool Enabled { get; set; }
        /// <summary>
        /// Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and operators.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and operators.",
        SerializedName = @"condition",
        PossibleTypes = new [] { typeof(string) })]
        string IfCondition { get; set; }
        /// <summary>List of operations to execute when the condition predicate satisfies.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of operations to execute when the condition predicate satisfies.",
        SerializedName = @"operations",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation> IfOperation { get; set; }
        /// <summary>Represents the provisioning state of the storage task.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Represents the provisioning state of the storage task.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StorageAction.PSArgumentCompleterAttribute("ValidateSubscriptionQuotaBegin", "ValidateSubscriptionQuotaEnd", "Creating", "Succeeded", "Deleting", "Canceled", "Failed")]
        string ProvisioningState { get;  }
        /// <summary>Storage task version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Storage task version.",
        SerializedName = @"taskVersion",
        PossibleTypes = new [] { typeof(long) })]
        long? TaskVersion { get;  }

    }
    /// Properties of the storage task.
    internal partial interface IStorageTaskPropertiesInternal

    {
        /// <summary>The storage task action that is executed</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskAction Action { get; set; }
        /// <summary>The else block of storage task operation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IElseCondition ActionElse { get; set; }
        /// <summary>The if block of storage task operation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IIfCondition ActionIf { get; set; }
        /// <summary>The creation date and time of the storage task in UTC.</summary>
        global::System.DateTime? CreationTimeInUtc { get; set; }
        /// <summary>Text that describes the purpose of the storage task</summary>
        string Description { get; set; }
        /// <summary>List of operations to execute in the else block</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation> ElseOperation { get; set; }
        /// <summary>Storage Task is enabled when set to true and disabled when set to false</summary>
        bool Enabled { get; set; }
        /// <summary>
        /// Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and operators.
        /// </summary>
        string IfCondition { get; set; }
        /// <summary>List of operations to execute when the condition predicate satisfies.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation> IfOperation { get; set; }
        /// <summary>Represents the provisioning state of the storage task.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.StorageAction.PSArgumentCompleterAttribute("ValidateSubscriptionQuotaBegin", "ValidateSubscriptionQuotaEnd", "Creating", "Succeeded", "Deleting", "Canceled", "Failed")]
        string ProvisioningState { get; set; }
        /// <summary>Storage task version.</summary>
        long? TaskVersion { get; set; }

    }
}