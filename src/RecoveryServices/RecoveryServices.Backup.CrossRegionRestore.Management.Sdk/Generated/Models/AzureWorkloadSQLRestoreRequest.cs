// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.Backup.CrossRegionRestore.Models
{
    using System.Linq;

    /// <summary>
    /// AzureWorkload SQL -specific restore. Specifically for full/diff restore
    /// </summary>
    [Newtonsoft.Json.JsonObject("AzureWorkloadSQLRestoreRequest")]
    public partial class AzureWorkloadSQLRestoreRequest : AzureWorkloadRestoreRequest
    {
        /// <summary>
        /// Initializes a new instance of the AzureWorkloadSQLRestoreRequest class.
        /// </summary>
        public AzureWorkloadSQLRestoreRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureWorkloadSQLRestoreRequest class.
        /// </summary>

        /// <param name="recoveryType">Type of this recovery.
        /// Possible values include: 'Invalid', 'OriginalLocation',
        /// 'AlternateLocation', 'RestoreDisks', 'Offline'</param>

        /// <param name="sourceResourceId">Fully qualified ARM ID of the VM on which workload that was running is
        /// being recovered.
        /// </param>

        /// <param name="propertyBag">Workload specific property bag.
        /// </param>

        /// <param name="targetInfo">Details of target database
        /// </param>

        /// <param name="recoveryMode">Defines whether the current recovery mode is file restore or database
        /// restore
        /// Possible values include: 'Invalid', 'FileRecovery', 'WorkloadRecovery'</param>

        /// <param name="targetVirtualMachineId">This is the complete ARM Id of the target VM
        /// For e.g.
        /// /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
        /// </param>

        /// <param name="shouldUseAlternateTargetLocation">Default option set to true. If this is set to false, alternate data
        /// directory must be provided
        /// </param>

        /// <param name="isNonRecoverable">SQL specific property where user can chose to set no-recovery when restore
        /// operation is tried
        /// </param>

        /// <param name="alternateDirectoryPaths">Data directory details
        /// </param>
        public AzureWorkloadSQLRestoreRequest(string recoveryType = default(string), string sourceResourceId = default(string), System.Collections.Generic.IDictionary<string, string> propertyBag = default(System.Collections.Generic.IDictionary<string, string>), TargetRestoreInfo targetInfo = default(TargetRestoreInfo), string recoveryMode = default(string), string targetVirtualMachineId = default(string), bool? shouldUseAlternateTargetLocation = default(bool?), bool? isNonRecoverable = default(bool?), System.Collections.Generic.IList<SQLDataDirectoryMapping> alternateDirectoryPaths = default(System.Collections.Generic.IList<SQLDataDirectoryMapping>))

        : base(recoveryType, sourceResourceId, propertyBag, targetInfo, recoveryMode, targetVirtualMachineId)
        {
            this.ShouldUseAlternateTargetLocation = shouldUseAlternateTargetLocation;
            this.IsNonRecoverable = isNonRecoverable;
            this.AlternateDirectoryPaths = alternateDirectoryPaths;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets default option set to true. If this is set to false, alternate
        /// data directory must be provided
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "shouldUseAlternateTargetLocation")]
        public bool? ShouldUseAlternateTargetLocation {get; set; }

        /// <summary>
        /// Gets or sets sQL specific property where user can chose to set no-recovery
        /// when restore operation is tried
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isNonRecoverable")]
        public bool? IsNonRecoverable {get; set; }

        /// <summary>
        /// Gets or sets data directory details
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "alternateDirectoryPaths")]
        public System.Collections.Generic.IList<SQLDataDirectoryMapping> AlternateDirectoryPaths {get; set; }
    }
}