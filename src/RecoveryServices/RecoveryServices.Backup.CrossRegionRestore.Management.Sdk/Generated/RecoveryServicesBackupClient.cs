// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.Backup.CrossRegionRestore
{
    using System.Linq;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    public partial class RecoveryServicesBackupClient : Microsoft.Rest.ServiceClient<RecoveryServicesBackupClient>, IRecoveryServicesBackupClient, IAzureClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }
        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; private set; }
        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; private set; }
        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        public Microsoft.Rest.ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// The API version to use for this operation.
        /// </summary>
        public string ApiVersion { get; private set; }

        /// <summary>
        /// The subscription Id.
        /// </summary>
        public string SubscriptionId { get; set;}

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set;}

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default
        /// value is 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set;}

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When 
        /// set to true a unique x-ms-client-request-id value is generated and 
        /// included in each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set;}

        /// <summary>
        /// Gets the IBackupUsageSummariesCrrOperations
        /// </summary>
        public virtual IBackupUsageSummariesCrrOperations BackupUsageSummariesCrr { get; private set; }
        /// <summary>
        /// Gets the IAadPropertiesOperations
        /// </summary>
        public virtual IAadPropertiesOperations AadProperties { get; private set; }
        /// <summary>
        /// Gets the ICrossRegionRestoreOperations
        /// </summary>
        public virtual ICrossRegionRestoreOperations CrossRegionRestore { get; private set; }
        /// <summary>
        /// Gets the IBackupCrrJobDetailsOperations
        /// </summary>
        public virtual IBackupCrrJobDetailsOperations BackupCrrJobDetails { get; private set; }
        /// <summary>
        /// Gets the IBackupCrrJobsOperations
        /// </summary>
        public virtual IBackupCrrJobsOperations BackupCrrJobs { get; private set; }
        /// <summary>
        /// Gets the ICrrOperationResultsOperations
        /// </summary>
        public virtual ICrrOperationResultsOperations CrrOperationResults { get; private set; }
        /// <summary>
        /// Gets the ICrrOperationStatusOperations
        /// </summary>
        public virtual ICrrOperationStatusOperations CrrOperationStatus { get; private set; }
        /// <summary>
        /// Gets the IRecoveryPointsOperations
        /// </summary>
        public virtual IRecoveryPointsOperations RecoveryPoints { get; private set; }
        /// <summary>
        /// Gets the IBackupResourceStorageConfigsOperations
        /// </summary>
        public virtual IBackupResourceStorageConfigsOperations BackupResourceStorageConfigs { get; private set; }
        /// <summary>
        /// Gets the IRecoveryPointsCrrOperations
        /// </summary>
        public virtual IRecoveryPointsCrrOperations RecoveryPointsCrr { get; private set; }
        /// <summary>
        /// Gets the IBackupProtectedItemsCrrOperations
        /// </summary>
        public virtual IBackupProtectedItemsCrrOperations BackupProtectedItemsCrr { get; private set; }
        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling RecoveryServicesBackupClient.Dispose(). False: will not dispose provided httpClient</param>
        protected RecoveryServicesBackupClient(System.Net.Http.HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected RecoveryServicesBackupClient(params System.Net.Http.DelegatingHandler[] handlers) : base(handlers)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient  class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected RecoveryServicesBackupClient(System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected RecoveryServicesBackupClient(System.Uri baseUri, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }
        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected RecoveryServicesBackupClient(System.Uri baseUri, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
        
            this.BaseUri = baseUri;
        }
        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public RecoveryServicesBackupClient(Microsoft.Rest.ServiceClientCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient class.
        /// </summary>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling RecoveryServicesBackupClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public RecoveryServicesBackupClient(Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient class.
        /// </summary>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public RecoveryServicesBackupClient(Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public RecoveryServicesBackupClient(System.Uri baseUri, Microsoft.Rest.ServiceClientCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers) 
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public RecoveryServicesBackupClient(System.Uri baseUri, Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();

        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.BackupUsageSummariesCrr = new BackupUsageSummariesCrrOperations(this);
            this.AadProperties = new AadPropertiesOperations(this);
            this.CrossRegionRestore = new CrossRegionRestoreOperations(this);
            this.BackupCrrJobDetails = new BackupCrrJobDetailsOperations(this);
            this.BackupCrrJobs = new BackupCrrJobsOperations(this);
            this.CrrOperationResults = new CrrOperationResultsOperations(this);
            this.CrrOperationStatus = new CrrOperationStatusOperations(this);
            this.RecoveryPoints = new RecoveryPointsOperations(this);
            this.BackupResourceStorageConfigs = new BackupResourceStorageConfigsOperations(this);
            this.RecoveryPointsCrr = new RecoveryPointsCrrOperations(this);
            this.BackupProtectedItemsCrr = new BackupProtectedItemsCrrOperations(this);
            this.BaseUri = new System.Uri("https://management.azure.com");
            this.ApiVersion = "2021-11-15";
            this.AcceptLanguage = "en-US";
            this.LongRunningOperationRetryTimeout = 30;
            this.GenerateClientRequestId = true;
            SerializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<CrrAccessToken>("objectType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<CrrAccessToken>("objectType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<RestoreRequest>("objectType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<RestoreRequest>("objectType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<Job>("jobType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<Job>("jobType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<OperationStatusExtendedInfo>("objectType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<OperationStatusExtendedInfo>("objectType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<RecoveryPoint>("objectType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<RecoveryPoint>("objectType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<ProtectedItem>("protectedItemType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<ProtectedItem>("protectedItemType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<AzureIaaSVMProtectedItem>("protectedItemType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<AzureIaaSVMProtectedItem>("protectedItemType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<AzureVmWorkloadProtectedItem>("protectedItemType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<AzureVmWorkloadProtectedItem>("protectedItemType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<AzureWorkloadPointInTimeRecoveryPoint>("objectType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<AzureWorkloadPointInTimeRecoveryPoint>("objectType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<AzureWorkloadRecoveryPoint>("objectType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<AzureWorkloadRecoveryPoint>("objectType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<AzureWorkloadRestoreRequest>("objectType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<AzureWorkloadRestoreRequest>("objectType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<AzureWorkloadSAPHanaRestoreRequest>("objectType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<AzureWorkloadSAPHanaRestoreRequest>("objectType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<AzureWorkloadSQLRecoveryPoint>("objectType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<AzureWorkloadSQLRecoveryPoint>("objectType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<AzureWorkloadSQLRestoreRequest>("objectType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<AzureWorkloadSQLRestoreRequest>("objectType"));
            CustomInitialize();
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Azure.CloudErrorJsonConverter());
        }
    }
}