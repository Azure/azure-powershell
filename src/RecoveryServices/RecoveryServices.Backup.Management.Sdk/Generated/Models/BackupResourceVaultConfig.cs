// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models
{
    using System.Linq;

    /// <summary>
    /// Backup resource vault config details.
    /// </summary>
    public partial class BackupResourceVaultConfig
    {
        /// <summary>
        /// Initializes a new instance of the BackupResourceVaultConfig class.
        /// </summary>
        public BackupResourceVaultConfig()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BackupResourceVaultConfig class.
        /// </summary>

        /// <param name="storageModelType">Storage type.
        /// Possible values include: 'Invalid', 'GeoRedundant', 'LocallyRedundant',
        /// 'ZoneRedundant', 'ReadAccessGeoZoneRedundant'</param>

        /// <param name="storageType">Storage type.
        /// Possible values include: 'Invalid', 'GeoRedundant', 'LocallyRedundant',
        /// 'ZoneRedundant', 'ReadAccessGeoZoneRedundant'</param>

        /// <param name="storageTypeState">Locked or Unlocked. Once a machine is registered against a resource, the
        /// storageTypeState is always Locked.
        /// Possible values include: 'Invalid', 'Locked', 'Unlocked'</param>

        /// <param name="enhancedSecurityState">Enabled or Disabled.
        /// Possible values include: 'Invalid', 'Enabled', 'Disabled'</param>

        /// <param name="softDeleteFeatureState">Soft Delete feature state
        /// Possible values include: 'Invalid', 'Enabled', 'Disabled'</param>

        /// <param name="resourceGuardOperationRequests">ResourceGuard Operation Requests
        /// </param>

        /// <param name="isSoftDeleteFeatureStateEditable">Is soft delete feature state editable
        /// </param>
        public BackupResourceVaultConfig(string storageModelType = default(string), string storageType = default(string), string storageTypeState = default(string), string enhancedSecurityState = default(string), string softDeleteFeatureState = default(string), System.Collections.Generic.IList<string> resourceGuardOperationRequests = default(System.Collections.Generic.IList<string>), bool? isSoftDeleteFeatureStateEditable = default(bool?))

        {
            this.StorageModelType = storageModelType;
            this.StorageType = storageType;
            this.StorageTypeState = storageTypeState;
            this.EnhancedSecurityState = enhancedSecurityState;
            this.SoftDeleteFeatureState = softDeleteFeatureState;
            this.ResourceGuardOperationRequests = resourceGuardOperationRequests;
            this.IsSoftDeleteFeatureStateEditable = isSoftDeleteFeatureStateEditable;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets storage type. Possible values include: &#39;Invalid&#39;, &#39;GeoRedundant&#39;, &#39;LocallyRedundant&#39;, &#39;ZoneRedundant&#39;, &#39;ReadAccessGeoZoneRedundant&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageModelType")]
        public string StorageModelType {get; set; }

        /// <summary>
        /// Gets or sets storage type. Possible values include: &#39;Invalid&#39;, &#39;GeoRedundant&#39;, &#39;LocallyRedundant&#39;, &#39;ZoneRedundant&#39;, &#39;ReadAccessGeoZoneRedundant&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageType")]
        public string StorageType {get; set; }

        /// <summary>
        /// Gets or sets locked or Unlocked. Once a machine is registered against a
        /// resource, the storageTypeState is always Locked. Possible values include: &#39;Invalid&#39;, &#39;Locked&#39;, &#39;Unlocked&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageTypeState")]
        public string StorageTypeState {get; set; }

        /// <summary>
        /// Gets or sets enabled or Disabled. Possible values include: &#39;Invalid&#39;, &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enhancedSecurityState")]
        public string EnhancedSecurityState {get; set; }

        /// <summary>
        /// Gets or sets soft Delete feature state Possible values include: &#39;Invalid&#39;, &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "softDeleteFeatureState")]
        public string SoftDeleteFeatureState {get; set; }

        /// <summary>
        /// Gets or sets resourceGuard Operation Requests
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceGuardOperationRequests")]
        public System.Collections.Generic.IList<string> ResourceGuardOperationRequests {get; set; }

        /// <summary>
        /// Gets or sets is soft delete feature state editable
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isSoftDeleteFeatureStateEditable")]
        public bool? IsSoftDeleteFeatureStateEditable {get; set; }
    }
}