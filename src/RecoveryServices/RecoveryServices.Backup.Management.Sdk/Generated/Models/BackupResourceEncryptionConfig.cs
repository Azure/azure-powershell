// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models
{
    using System.Linq;

    public partial class BackupResourceEncryptionConfig
    {
        /// <summary>
        /// Initializes a new instance of the BackupResourceEncryptionConfig class.
        /// </summary>
        public BackupResourceEncryptionConfig()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BackupResourceEncryptionConfig class.
        /// </summary>

        /// <param name="encryptionAtRestType">Encryption At Rest Type
        /// Possible values include: &#39;Invalid&#39;, &#39;MicrosoftManaged&#39;, &#39;CustomerManaged&#39;</param>

        /// <param name="keyUri">Key Vault Key URI
        /// </param>

        /// <param name="subscriptionId">Key Vault Subscription Id
        /// </param>

        /// <param name="lastUpdateStatus">
        /// Possible values include: &#39;Invalid&#39;, &#39;NotEnabled&#39;, &#39;PartiallySucceeded&#39;,
        /// &#39;PartiallyFailed&#39;, &#39;Failed&#39;, &#39;Succeeded&#39;, &#39;Initialized&#39;,
        /// &#39;FirstInitialization&#39;</param>

        /// <param name="infrastructureEncryptionState">
        /// Possible values include: &#39;Invalid&#39;, &#39;Disabled&#39;, &#39;Enabled&#39;</param>
        public BackupResourceEncryptionConfig(string encryptionAtRestType = default(string), string keyUri = default(string), string subscriptionId = default(string), string lastUpdateStatus = default(string), string infrastructureEncryptionState = default(string))

        {
            this.EncryptionAtRestType = encryptionAtRestType;
            this.KeyUri = keyUri;
            this.SubscriptionId = subscriptionId;
            this.LastUpdateStatus = lastUpdateStatus;
            this.InfrastructureEncryptionState = infrastructureEncryptionState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets encryption At Rest Type Possible values include: &#39;Invalid&#39;, &#39;MicrosoftManaged&#39;, &#39;CustomerManaged&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptionAtRestType")]
        public string EncryptionAtRestType {get; set; }

        /// <summary>
        /// Gets or sets key Vault Key URI
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keyUri")]
        public string KeyUri {get; set; }

        /// <summary>
        /// Gets or sets key Vault Subscription Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subscriptionId")]
        public string SubscriptionId {get; set; }

        /// <summary>
        /// Gets or sets Possible values include: &#39;Invalid&#39;, &#39;NotEnabled&#39;, &#39;PartiallySucceeded&#39;, &#39;PartiallyFailed&#39;, &#39;Failed&#39;, &#39;Succeeded&#39;, &#39;Initialized&#39;, &#39;FirstInitialization&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastUpdateStatus")]
        public string LastUpdateStatus {get; set; }

        /// <summary>
        /// Gets or sets Possible values include: &#39;Invalid&#39;, &#39;Disabled&#39;, &#39;Enabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "infrastructureEncryptionState")]
        public string InfrastructureEncryptionState {get; set; }
    }
}