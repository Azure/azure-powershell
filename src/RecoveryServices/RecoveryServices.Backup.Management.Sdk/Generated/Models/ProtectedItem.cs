// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models
{
    using System.Linq;

    /// <summary>
    /// Base class for backup items.
    /// </summary>
    [Newtonsoft.Json.JsonObject("ProtectedItem")]
    public partial class ProtectedItem
    {
        /// <summary>
        /// Initializes a new instance of the ProtectedItem class.
        /// </summary>
        public ProtectedItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProtectedItem class.
        /// </summary>

        /// <param name="backupManagementType">Type of backup management for the backed up item.
        /// Possible values include: &#39;Invalid&#39;, &#39;AzureIaasVM&#39;, &#39;MAB&#39;, &#39;DPM&#39;,
        /// &#39;AzureBackupServer&#39;, &#39;AzureSql&#39;, &#39;AzureStorage&#39;, &#39;AzureWorkload&#39;,
        /// &#39;DefaultBackup&#39;</param>

        /// <param name="workloadType">Type of workload this item represents.
        /// Possible values include: &#39;Invalid&#39;, &#39;VM&#39;, &#39;FileFolder&#39;, &#39;AzureSqlDb&#39;,
        /// &#39;SQLDB&#39;, &#39;Exchange&#39;, &#39;Sharepoint&#39;, &#39;VMwareVM&#39;, &#39;SystemState&#39;, &#39;Client&#39;,
        /// &#39;GenericDataSource&#39;, &#39;SQLDataBase&#39;, &#39;AzureFileShare&#39;, &#39;SAPHanaDatabase&#39;,
        /// &#39;SAPAseDatabase&#39;, &#39;SAPHanaDBInstance&#39;</param>

        /// <param name="containerName">Unique name of container
        /// </param>

        /// <param name="sourceResourceId">ARM ID of the resource to be backed up.
        /// </param>

        /// <param name="policyId">ID of the backup policy with which this item is backed up.
        /// </param>

        /// <param name="lastRecoveryPoint">Timestamp when the last (latest) backup copy was created for this backup
        /// item.
        /// </param>

        /// <param name="backupSetName">Name of the backup set the backup item belongs to
        /// </param>

        /// <param name="createMode">Create mode to indicate recovery of existing soft deleted data source or
        /// creation of new data source.
        /// Possible values include: &#39;Invalid&#39;, &#39;Default&#39;, &#39;Recover&#39;</param>

        /// <param name="deferredDeleteTimeInUtc">Time for deferred deletion in UTC
        /// </param>

        /// <param name="isScheduledForDeferredDelete">Flag to identify whether the DS is scheduled for deferred delete
        /// </param>

        /// <param name="deferredDeleteTimeRemaining">Time remaining before the DS marked for deferred delete is permanently
        /// deleted
        /// </param>

        /// <param name="isDeferredDeleteScheduleUpcoming">Flag to identify whether the deferred deleted DS is to be purged soon
        /// </param>

        /// <param name="isRehydrate">Flag to identify that deferred deleted DS is to be moved into Pause state
        /// </param>

        /// <param name="resourceGuardOperationRequests">ResourceGuardOperationRequests on which LAC check will be performed
        /// </param>

        /// <param name="isArchiveEnabled">Flag to identify whether datasource is protected in archive
        /// </param>

        /// <param name="policyName">Name of the policy used for protection
        /// </param>

        /// <param name="softDeleteRetentionPeriodInDays">Soft delete retention period in days
        /// </param>

        /// <param name="vaultId">ID of the vault which protects this item
        /// </param>
        public ProtectedItem(string backupManagementType = default(string), string workloadType = default(string), string containerName = default(string), string sourceResourceId = default(string), string policyId = default(string), System.DateTime? lastRecoveryPoint = default(System.DateTime?), string backupSetName = default(string), string createMode = default(string), System.DateTime? deferredDeleteTimeInUtc = default(System.DateTime?), bool? isScheduledForDeferredDelete = default(bool?), string deferredDeleteTimeRemaining = default(string), bool? isDeferredDeleteScheduleUpcoming = default(bool?), bool? isRehydrate = default(bool?), System.Collections.Generic.IList<string> resourceGuardOperationRequests = default(System.Collections.Generic.IList<string>), bool? isArchiveEnabled = default(bool?), string policyName = default(string), int? softDeleteRetentionPeriodInDays = default(int?), string vaultId = default(string))

        {
            this.BackupManagementType = backupManagementType;
            this.WorkloadType = workloadType;
            this.ContainerName = containerName;
            this.SourceResourceId = sourceResourceId;
            this.PolicyId = policyId;
            this.LastRecoveryPoint = lastRecoveryPoint;
            this.BackupSetName = backupSetName;
            this.CreateMode = createMode;
            this.DeferredDeleteTimeInUtc = deferredDeleteTimeInUtc;
            this.IsScheduledForDeferredDelete = isScheduledForDeferredDelete;
            this.DeferredDeleteTimeRemaining = deferredDeleteTimeRemaining;
            this.IsDeferredDeleteScheduleUpcoming = isDeferredDeleteScheduleUpcoming;
            this.IsRehydrate = isRehydrate;
            this.ResourceGuardOperationRequests = resourceGuardOperationRequests;
            this.IsArchiveEnabled = isArchiveEnabled;
            this.PolicyName = policyName;
            this.SoftDeleteRetentionPeriodInDays = softDeleteRetentionPeriodInDays;
            this.VaultId = vaultId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets type of backup management for the backed up item. Possible values include: &#39;Invalid&#39;, &#39;AzureIaasVM&#39;, &#39;MAB&#39;, &#39;DPM&#39;, &#39;AzureBackupServer&#39;, &#39;AzureSql&#39;, &#39;AzureStorage&#39;, &#39;AzureWorkload&#39;, &#39;DefaultBackup&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupManagementType")]
        public string BackupManagementType {get; private set; }

        /// <summary>
        /// Gets type of workload this item represents. Possible values include: &#39;Invalid&#39;, &#39;VM&#39;, &#39;FileFolder&#39;, &#39;AzureSqlDb&#39;, &#39;SQLDB&#39;, &#39;Exchange&#39;, &#39;Sharepoint&#39;, &#39;VMwareVM&#39;, &#39;SystemState&#39;, &#39;Client&#39;, &#39;GenericDataSource&#39;, &#39;SQLDataBase&#39;, &#39;AzureFileShare&#39;, &#39;SAPHanaDatabase&#39;, &#39;SAPAseDatabase&#39;, &#39;SAPHanaDBInstance&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "workloadType")]
        public string WorkloadType {get; private set; }

        /// <summary>
        /// Gets or sets unique name of container
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "containerName")]
        public string ContainerName {get; set; }

        /// <summary>
        /// Gets or sets aRM ID of the resource to be backed up.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceResourceId")]
        public string SourceResourceId {get; set; }

        /// <summary>
        /// Gets or sets iD of the backup policy with which this item is backed up.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyId")]
        public string PolicyId {get; set; }

        /// <summary>
        /// Gets or sets timestamp when the last (latest) backup copy was created for
        /// this backup item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastRecoveryPoint")]
        public System.DateTime? LastRecoveryPoint {get; set; }

        /// <summary>
        /// Gets or sets name of the backup set the backup item belongs to
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupSetName")]
        public string BackupSetName {get; set; }

        /// <summary>
        /// Gets or sets create mode to indicate recovery of existing soft deleted data
        /// source or creation of new data source. Possible values include: &#39;Invalid&#39;, &#39;Default&#39;, &#39;Recover&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "createMode")]
        public string CreateMode {get; set; }

        /// <summary>
        /// Gets or sets time for deferred deletion in UTC
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deferredDeleteTimeInUTC")]
        public System.DateTime? DeferredDeleteTimeInUtc {get; set; }

        /// <summary>
        /// Gets or sets flag to identify whether the DS is scheduled for deferred
        /// delete
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isScheduledForDeferredDelete")]
        public bool? IsScheduledForDeferredDelete {get; set; }

        /// <summary>
        /// Gets or sets time remaining before the DS marked for deferred delete is
        /// permanently deleted
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deferredDeleteTimeRemaining")]
        public string DeferredDeleteTimeRemaining {get; set; }

        /// <summary>
        /// Gets or sets flag to identify whether the deferred deleted DS is to be
        /// purged soon
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isDeferredDeleteScheduleUpcoming")]
        public bool? IsDeferredDeleteScheduleUpcoming {get; set; }

        /// <summary>
        /// Gets or sets flag to identify that deferred deleted DS is to be moved into
        /// Pause state
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isRehydrate")]
        public bool? IsRehydrate {get; set; }

        /// <summary>
        /// Gets or sets resourceGuardOperationRequests on which LAC check will be
        /// performed
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceGuardOperationRequests")]
        public System.Collections.Generic.IList<string> ResourceGuardOperationRequests {get; set; }

        /// <summary>
        /// Gets or sets flag to identify whether datasource is protected in archive
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isArchiveEnabled")]
        public bool? IsArchiveEnabled {get; set; }

        /// <summary>
        /// Gets or sets name of the policy used for protection
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyName")]
        public string PolicyName {get; set; }

        /// <summary>
        /// Gets or sets soft delete retention period in days
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "softDeleteRetentionPeriodInDays")]
        public int? SoftDeleteRetentionPeriodInDays {get; set; }

        /// <summary>
        /// Gets iD of the vault which protects this item
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vaultId")]
        public string VaultId {get; private set; }
    }
}