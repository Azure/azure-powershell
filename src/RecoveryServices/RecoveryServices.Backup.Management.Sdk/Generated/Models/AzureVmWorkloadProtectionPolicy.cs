// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models
{
    using System.Linq;

    /// <summary>
    /// Azure VM (Mercury) workload-specific backup policy.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AzureWorkload")]
    public partial class AzureVmWorkloadProtectionPolicy : ProtectionPolicy
    {
        /// <summary>
        /// Initializes a new instance of the AzureVmWorkloadProtectionPolicy class.
        /// </summary>
        public AzureVmWorkloadProtectionPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureVmWorkloadProtectionPolicy class.
        /// </summary>

        /// <param name="protectedItemsCount">Number of items associated with this policy.
        /// </param>

        /// <param name="resourceGuardOperationRequests">ResourceGuard Operation Requests
        /// </param>

        /// <param name="workLoadType">Type of workload for the backup management
        /// Possible values include: &#39;Invalid&#39;, &#39;VM&#39;, &#39;FileFolder&#39;, &#39;AzureSqlDb&#39;,
        /// &#39;SQLDB&#39;, &#39;Exchange&#39;, &#39;Sharepoint&#39;, &#39;VMwareVM&#39;, &#39;SystemState&#39;, &#39;Client&#39;,
        /// &#39;GenericDataSource&#39;, &#39;SQLDataBase&#39;, &#39;AzureFileShare&#39;, &#39;SAPHanaDatabase&#39;,
        /// &#39;SAPAseDatabase&#39;, &#39;SAPHanaDBInstance&#39;</param>

        /// <param name="settings">Common settings for the backup management
        /// </param>

        /// <param name="subProtectionPolicy">List of sub-protection policies which includes schedule and retention
        /// </param>

        /// <param name="makePolicyConsistent">Fix the policy inconsistency
        /// </param>
        public AzureVmWorkloadProtectionPolicy(int? protectedItemsCount = default(int?), System.Collections.Generic.IList<string> resourceGuardOperationRequests = default(System.Collections.Generic.IList<string>), string workLoadType = default(string), Settings settings = default(Settings), System.Collections.Generic.IList<SubProtectionPolicy> subProtectionPolicy = default(System.Collections.Generic.IList<SubProtectionPolicy>), bool? makePolicyConsistent = default(bool?))

        : base(protectedItemsCount, resourceGuardOperationRequests)
        {
            this.WorkLoadType = workLoadType;
            this.Settings = settings;
            this.SubProtectionPolicy = subProtectionPolicy;
            this.MakePolicyConsistent = makePolicyConsistent;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets type of workload for the backup management Possible values include: &#39;Invalid&#39;, &#39;VM&#39;, &#39;FileFolder&#39;, &#39;AzureSqlDb&#39;, &#39;SQLDB&#39;, &#39;Exchange&#39;, &#39;Sharepoint&#39;, &#39;VMwareVM&#39;, &#39;SystemState&#39;, &#39;Client&#39;, &#39;GenericDataSource&#39;, &#39;SQLDataBase&#39;, &#39;AzureFileShare&#39;, &#39;SAPHanaDatabase&#39;, &#39;SAPAseDatabase&#39;, &#39;SAPHanaDBInstance&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "workLoadType")]
        public string WorkLoadType {get; set; }

        /// <summary>
        /// Gets or sets common settings for the backup management
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "settings")]
        public Settings Settings {get; set; }

        /// <summary>
        /// Gets or sets list of sub-protection policies which includes schedule and
        /// retention
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subProtectionPolicy")]
        public System.Collections.Generic.IList<SubProtectionPolicy> SubProtectionPolicy {get; set; }

        /// <summary>
        /// Gets or sets fix the policy inconsistency
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "makePolicyConsistent")]
        public bool? MakePolicyConsistent {get; set; }
    }
}