// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models
{
    using System.Linq;

    /// <summary>
    /// DPM workload-specific protection container.
    /// </summary>
    [Newtonsoft.Json.JsonObject("DPMContainer")]
    public partial class DpmContainer : ProtectionContainer
    {
        /// <summary>
        /// Initializes a new instance of the DpmContainer class.
        /// </summary>
        public DpmContainer()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DpmContainer class.
        /// </summary>

        /// <param name="friendlyName">Friendly name of the container.
        /// </param>

        /// <param name="backupManagementType">Type of backup management for the container.
        /// Possible values include: &#39;Invalid&#39;, &#39;AzureIaasVM&#39;, &#39;MAB&#39;, &#39;DPM&#39;,
        /// &#39;AzureBackupServer&#39;, &#39;AzureSql&#39;, &#39;AzureStorage&#39;, &#39;AzureWorkload&#39;,
        /// &#39;DefaultBackup&#39;</param>

        /// <param name="registrationStatus">Status of registration of the container with the Recovery Services Vault.
        /// </param>

        /// <param name="healthStatus">Status of health of the container.
        /// </param>

        /// <param name="protectableObjectType">Type of the protectable object associated with this container
        /// </param>

        /// <param name="canReRegister">Specifies whether the container is re-registrable.
        /// </param>

        /// <param name="containerId">ID of container.
        /// </param>

        /// <param name="protectedItemCount">Number of protected items in the BackupEngine
        /// </param>

        /// <param name="dpmAgentVersion">Backup engine Agent version
        /// </param>

        /// <param name="dpmServers">List of BackupEngines protecting the container
        /// </param>

        /// <param name="upgradeAvailable">To check if upgrade available
        /// </param>

        /// <param name="protectionStatus">Protection status of the container.
        /// </param>

        /// <param name="extendedInfo">Extended Info of the container.
        /// </param>
        public DpmContainer(string friendlyName = default(string), string backupManagementType = default(string), string registrationStatus = default(string), string healthStatus = default(string), string protectableObjectType = default(string), bool? canReRegister = default(bool?), string containerId = default(string), long? protectedItemCount = default(long?), string dpmAgentVersion = default(string), System.Collections.Generic.IList<string> dpmServers = default(System.Collections.Generic.IList<string>), bool? upgradeAvailable = default(bool?), string protectionStatus = default(string), DPMContainerExtendedInfo extendedInfo = default(DPMContainerExtendedInfo))

        : base(friendlyName, backupManagementType, registrationStatus, healthStatus, protectableObjectType)
        {
            this.CanReRegister = canReRegister;
            this.ContainerId = containerId;
            this.ProtectedItemCount = protectedItemCount;
            this.DpmAgentVersion = dpmAgentVersion;
            this.DpmServers = dpmServers;
            this.UpgradeAvailable = upgradeAvailable;
            this.ProtectionStatus = protectionStatus;
            this.ExtendedInfo = extendedInfo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets specifies whether the container is re-registrable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "canReRegister")]
        public bool? CanReRegister {get; set; }

        /// <summary>
        /// Gets or sets iD of container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "containerId")]
        public string ContainerId {get; set; }

        /// <summary>
        /// Gets or sets number of protected items in the BackupEngine
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectedItemCount")]
        public long? ProtectedItemCount {get; set; }

        /// <summary>
        /// Gets or sets backup engine Agent version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dpmAgentVersion")]
        public string DpmAgentVersion {get; set; }

        /// <summary>
        /// Gets or sets list of BackupEngines protecting the container
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dpmServers")]
        public System.Collections.Generic.IList<string> DpmServers {get; set; }

        /// <summary>
        /// Gets or sets to check if upgrade available
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "upgradeAvailable")]
        public bool? UpgradeAvailable {get; set; }

        /// <summary>
        /// Gets or sets protection status of the container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectionStatus")]
        public string ProtectionStatus {get; set; }

        /// <summary>
        /// Gets or sets extended Info of the container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "extendedInfo")]
        public DPMContainerExtendedInfo ExtendedInfo {get; set; }
    }
}