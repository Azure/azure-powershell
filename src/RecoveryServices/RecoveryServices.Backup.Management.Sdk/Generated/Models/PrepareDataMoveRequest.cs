// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models
{
    using System.Linq;

    /// <summary>
    /// Prepare DataMove Request
    /// </summary>
    public partial class PrepareDataMoveRequest
    {
        /// <summary>
        /// Initializes a new instance of the PrepareDataMoveRequest class.
        /// </summary>
        public PrepareDataMoveRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PrepareDataMoveRequest class.
        /// </summary>

        /// <param name="targetResourceId">ARM Id of target vault
        /// </param>

        /// <param name="targetRegion">Target Region
        /// </param>

        /// <param name="dataMoveLevel">DataMove Level
        /// Possible values include: &#39;Invalid&#39;, &#39;Vault&#39;, &#39;Container&#39;</param>

        /// <param name="sourceContainerArmIds">Source Container ArmIds This needs to be populated only if DataMoveLevel is
        /// set to container
        /// </param>

        /// <param name="ignoreMoved">Ignore the artifacts which are already moved.
        /// </param>
        public PrepareDataMoveRequest(string targetResourceId, string targetRegion, string dataMoveLevel, System.Collections.Generic.IList<string> sourceContainerArmIds = default(System.Collections.Generic.IList<string>), bool? ignoreMoved = default(bool?))

        {
            this.TargetResourceId = targetResourceId;
            this.TargetRegion = targetRegion;
            this.DataMoveLevel = dataMoveLevel;
            this.SourceContainerArmIds = sourceContainerArmIds;
            this.IgnoreMoved = ignoreMoved;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets aRM Id of target vault
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetResourceId")]
        public string TargetResourceId {get; set; }

        /// <summary>
        /// Gets or sets target Region
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetRegion")]
        public string TargetRegion {get; set; }

        /// <summary>
        /// Gets or sets dataMove Level Possible values include: &#39;Invalid&#39;, &#39;Vault&#39;, &#39;Container&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataMoveLevel")]
        public string DataMoveLevel {get; set; }

        /// <summary>
        /// Gets or sets source Container ArmIds This needs to be populated only if
        /// DataMoveLevel is set to container
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceContainerArmIds")]
        public System.Collections.Generic.IList<string> SourceContainerArmIds {get; set; }

        /// <summary>
        /// Gets or sets ignore the artifacts which are already moved.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ignoreMoved")]
        public bool? IgnoreMoved {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.TargetResourceId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TargetResourceId");
            }
            if (this.TargetRegion == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TargetRegion");
            }
            if (this.DataMoveLevel == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DataMoveLevel");
            }




        }
    }
}