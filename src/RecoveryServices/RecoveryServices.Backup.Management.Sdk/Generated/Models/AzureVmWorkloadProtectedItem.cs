// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models
{
    using System.Linq;

    /// <summary>
    /// Azure VM workload-specific protected item.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AzureVmWorkloadProtectedItem")]
    public partial class AzureVmWorkloadProtectedItem : ProtectedItem
    {
        /// <summary>
        /// Initializes a new instance of the AzureVmWorkloadProtectedItem class.
        /// </summary>
        public AzureVmWorkloadProtectedItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureVmWorkloadProtectedItem class.
        /// </summary>

        /// <param name="backupManagementType">Type of backup management for the backed up item.
        /// Possible values include: 'Invalid', 'AzureIaasVM', 'MAB', 'DPM',
        /// 'AzureBackupServer', 'AzureSql', 'AzureStorage', 'AzureWorkload',
        /// 'DefaultBackup'</param>

        /// <param name="workloadType">Type of workload this item represents.
        /// Possible values include: 'Invalid', 'VM', 'FileFolder', 'AzureSqlDb',
        /// 'SQLDB', 'Exchange', 'Sharepoint', 'VMwareVM', 'SystemState', 'Client',
        /// 'GenericDataSource', 'SQLDataBase', 'AzureFileShare', 'SAPHanaDatabase',
        /// 'SAPAseDatabase', 'SAPHanaDBInstance'</param>

        /// <param name="containerName">Unique name of container
        /// </param>

        /// <param name="sourceResourceId">ARM ID of the resource to be backed up.
        /// </param>

        /// <param name="policyId">ID of the backup policy with which this item is backed up.
        /// </param>

        /// <param name="lastRecoveryPoint">Timestamp when the last (latest) backup copy was created for this backup
        /// item.
        /// </param>

        /// <param name="backupSetName">Name of the backup set the backup item belongs to
        /// </param>

        /// <param name="createMode">Create mode to indicate recovery of existing soft deleted data source or
        /// creation of new data source.
        /// Possible values include: 'Invalid', 'Default', 'Recover'</param>

        /// <param name="deferredDeleteTimeInUtc">Time for deferred deletion in UTC
        /// </param>

        /// <param name="isScheduledForDeferredDelete">Flag to identify whether the DS is scheduled for deferred delete
        /// </param>

        /// <param name="deferredDeleteTimeRemaining">Time remaining before the DS marked for deferred delete is permanently
        /// deleted
        /// </param>

        /// <param name="isDeferredDeleteScheduleUpcoming">Flag to identify whether the deferred deleted DS is to be purged soon
        /// </param>

        /// <param name="isRehydrate">Flag to identify that deferred deleted DS is to be moved into Pause state
        /// </param>

        /// <param name="resourceGuardOperationRequests">ResourceGuardOperationRequests on which LAC check will be performed
        /// </param>

        /// <param name="isArchiveEnabled">Flag to identify whether datasource is protected in archive
        /// </param>

        /// <param name="policyName">Name of the policy used for protection
        /// </param>

        /// <param name="softDeleteRetentionPeriod">Soft delete retention period in days
        /// </param>

        /// <param name="friendlyName">Friendly name of the DB represented by this backup item.
        /// </param>

        /// <param name="serverName">Host/Cluster Name for instance or AG
        /// </param>

        /// <param name="parentName">Parent name of the DB such as Instance or Availability Group.
        /// </param>

        /// <param name="parentType">Parent type of protected item, example: for a DB, standalone server or
        /// distributed
        /// </param>

        /// <param name="protectionStatus">Backup status of this backup item.
        /// </param>

        /// <param name="protectionState">Backup state of this backup item.
        /// Possible values include: 'Invalid', 'IRPending', 'Protected',
        /// 'ProtectionError', 'ProtectionStopped', 'ProtectionPaused',
        /// 'BackupsSuspended'</param>

        /// <param name="lastBackupStatus">Last backup operation status. Possible values: Healthy, Unhealthy.
        /// Possible values include: 'Invalid', 'Healthy', 'Unhealthy', 'IRPending'</param>

        /// <param name="lastBackupTime">Timestamp of the last backup operation on this backup item.
        /// </param>

        /// <param name="lastBackupErrorDetail">Error details in last backup
        /// </param>

        /// <param name="protectedItemDataSourceId">Data ID of the protected item.
        /// </param>

        /// <param name="protectedItemHealthStatus">Health status of the backup item, evaluated based on last heartbeat
        /// received
        /// Possible values include: 'Invalid', 'Healthy', 'Unhealthy', 'NotReachable',
        /// 'IRPending'</param>

        /// <param name="extendedInfo">Additional information for this backup item.
        /// </param>

        /// <param name="kpisHealths">Health details of different KPIs
        /// </param>
        public AzureVmWorkloadProtectedItem(string backupManagementType = default(string), string workloadType = default(string), string containerName = default(string), string sourceResourceId = default(string), string policyId = default(string), System.DateTime? lastRecoveryPoint = default(System.DateTime?), string backupSetName = default(string), string createMode = default(string), System.DateTime? deferredDeleteTimeInUtc = default(System.DateTime?), bool? isScheduledForDeferredDelete = default(bool?), string deferredDeleteTimeRemaining = default(string), bool? isDeferredDeleteScheduleUpcoming = default(bool?), bool? isRehydrate = default(bool?), System.Collections.Generic.IList<string> resourceGuardOperationRequests = default(System.Collections.Generic.IList<string>), bool? isArchiveEnabled = default(bool?), string policyName = default(string), int? softDeleteRetentionPeriod = default(int?), string friendlyName = default(string), string serverName = default(string), string parentName = default(string), string parentType = default(string), string protectionStatus = default(string), string protectionState = default(string), string lastBackupStatus = default(string), System.DateTime? lastBackupTime = default(System.DateTime?), ErrorDetail lastBackupErrorDetail = default(ErrorDetail), string protectedItemDataSourceId = default(string), string protectedItemHealthStatus = default(string), AzureVmWorkloadProtectedItemExtendedInfo extendedInfo = default(AzureVmWorkloadProtectedItemExtendedInfo), System.Collections.Generic.IDictionary<string, KPIResourceHealthDetails> kpisHealths = default(System.Collections.Generic.IDictionary<string, KPIResourceHealthDetails>))

        : base(backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUtc, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests, isArchiveEnabled, policyName, softDeleteRetentionPeriod)
        {
            this.FriendlyName = friendlyName;
            this.ServerName = serverName;
            this.ParentName = parentName;
            this.ParentType = parentType;
            this.ProtectionStatus = protectionStatus;
            this.ProtectionState = protectionState;
            this.LastBackupStatus = lastBackupStatus;
            this.LastBackupTime = lastBackupTime;
            this.LastBackupErrorDetail = lastBackupErrorDetail;
            this.ProtectedItemDataSourceId = protectedItemDataSourceId;
            this.ProtectedItemHealthStatus = protectedItemHealthStatus;
            this.ExtendedInfo = extendedInfo;
            this.KpisHealths = kpisHealths;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets friendly name of the DB represented by this backup item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName {get; private set; }

        /// <summary>
        /// Gets or sets host/Cluster Name for instance or AG
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverName")]
        public string ServerName {get; set; }

        /// <summary>
        /// Gets or sets parent name of the DB such as Instance or Availability Group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "parentName")]
        public string ParentName {get; set; }

        /// <summary>
        /// Gets or sets parent type of protected item, example: for a DB, standalone
        /// server or distributed
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "parentType")]
        public string ParentType {get; set; }

        /// <summary>
        /// Gets backup status of this backup item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectionStatus")]
        public string ProtectionStatus {get; private set; }

        /// <summary>
        /// Gets or sets backup state of this backup item. Possible values include: &#39;Invalid&#39;, &#39;IRPending&#39;, &#39;Protected&#39;, &#39;ProtectionError&#39;, &#39;ProtectionStopped&#39;, &#39;ProtectionPaused&#39;, &#39;BackupsSuspended&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectionState")]
        public string ProtectionState {get; set; }

        /// <summary>
        /// Gets or sets last backup operation status. Possible values: Healthy,
        /// Unhealthy. Possible values include: &#39;Invalid&#39;, &#39;Healthy&#39;, &#39;Unhealthy&#39;, &#39;IRPending&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastBackupStatus")]
        public string LastBackupStatus {get; set; }

        /// <summary>
        /// Gets or sets timestamp of the last backup operation on this backup item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastBackupTime")]
        public System.DateTime? LastBackupTime {get; set; }

        /// <summary>
        /// Gets or sets error details in last backup
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastBackupErrorDetail")]
        public ErrorDetail LastBackupErrorDetail {get; set; }

        /// <summary>
        /// Gets or sets data ID of the protected item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectedItemDataSourceId")]
        public string ProtectedItemDataSourceId {get; set; }

        /// <summary>
        /// Gets or sets health status of the backup item, evaluated based on last
        /// heartbeat received Possible values include: &#39;Invalid&#39;, &#39;Healthy&#39;, &#39;Unhealthy&#39;, &#39;NotReachable&#39;, &#39;IRPending&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectedItemHealthStatus")]
        public string ProtectedItemHealthStatus {get; set; }

        /// <summary>
        /// Gets or sets additional information for this backup item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "extendedInfo")]
        public AzureVmWorkloadProtectedItemExtendedInfo ExtendedInfo {get; set; }

        /// <summary>
        /// Gets or sets health details of different KPIs
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "kpisHealths")]
        public System.Collections.Generic.IDictionary<string, KPIResourceHealthDetails> KpisHealths {get; set; }
    }
}