// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.Backup
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// 
    /// </summary>
    public partial interface IRecoveryServicesBackupClient :  System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        Microsoft.Rest.ServiceClientCredentials Credentials { get;}


        /// <summary>
        /// The API version to use for this operation.
        /// </summary>
        string ApiVersion { get;}


        /// <summary>
        /// The subscription Id.
        /// </summary>
        string SubscriptionId { get; set;}


        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        string AcceptLanguage { get; set;}


        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default
        /// value is 30.
        /// </summary>
        int? LongRunningOperationRetryTimeout { get; set;}


        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When 
        /// set to true a unique x-ms-client-request-id value is generated and 
        /// included in each request. Default is true.
        /// </summary>
        bool? GenerateClientRequestId { get; set;}


        /// <summary>
        /// Gets the IBackupResourceStorageConfigsNonCrrOperations
        /// </summary>
        IBackupResourceStorageConfigsNonCrrOperations BackupResourceStorageConfigsNonCrr { get; }

        /// <summary>
        /// Gets the IProtectionIntentOperations
        /// </summary>
        IProtectionIntentOperations ProtectionIntent { get; }

        /// <summary>
        /// Gets the IBackupStatusOperations
        /// </summary>
        IBackupStatusOperations BackupStatus { get; }

        /// <summary>
        /// Gets the IFeatureSupportOperations
        /// </summary>
        IFeatureSupportOperations FeatureSupport { get; }

        /// <summary>
        /// Gets the IBackupProtectionIntentOperations
        /// </summary>
        IBackupProtectionIntentOperations BackupProtectionIntent { get; }

        /// <summary>
        /// Gets the IBackupUsageSummariesOperations
        /// </summary>
        IBackupUsageSummariesOperations BackupUsageSummaries { get; }

        /// <summary>
        /// Gets the IOperations
        /// </summary>
        IOperations Operations { get; }

        /// <summary>
        /// Gets the IBackupResourceVaultConfigsOperations
        /// </summary>
        IBackupResourceVaultConfigsOperations BackupResourceVaultConfigs { get; }

        /// <summary>
        /// Gets the IBackupResourceEncryptionConfigsOperations
        /// </summary>
        IBackupResourceEncryptionConfigsOperations BackupResourceEncryptionConfigs { get; }

        /// <summary>
        /// Gets the IPrivateEndpointConnectionOperations
        /// </summary>
        IPrivateEndpointConnectionOperations PrivateEndpointConnection { get; }

        /// <summary>
        /// Gets the IPrivateEndpointOperations
        /// </summary>
        IPrivateEndpointOperations PrivateEndpoint { get; }

        /// <summary>
        /// Gets the IBmsPrepareDataMoveOperationResultOperations
        /// </summary>
        IBmsPrepareDataMoveOperationResultOperations BmsPrepareDataMoveOperationResult { get; }

        /// <summary>
        /// Gets the IProtectedItemsOperations
        /// </summary>
        IProtectedItemsOperations ProtectedItems { get; }

        /// <summary>
        /// Gets the IProtectedItemOperationResultsOperations
        /// </summary>
        IProtectedItemOperationResultsOperations ProtectedItemOperationResults { get; }

        /// <summary>
        /// Gets the IRecoveryPointsOperations
        /// </summary>
        IRecoveryPointsOperations RecoveryPoints { get; }

        /// <summary>
        /// Gets the IRestoresOperations
        /// </summary>
        IRestoresOperations Restores { get; }

        /// <summary>
        /// Gets the IBackupPoliciesOperations
        /// </summary>
        IBackupPoliciesOperations BackupPolicies { get; }

        /// <summary>
        /// Gets the IProtectionPoliciesOperations
        /// </summary>
        IProtectionPoliciesOperations ProtectionPolicies { get; }

        /// <summary>
        /// Gets the IProtectionPolicyOperationResultsOperations
        /// </summary>
        IProtectionPolicyOperationResultsOperations ProtectionPolicyOperationResults { get; }

        /// <summary>
        /// Gets the IBackupJobsOperations
        /// </summary>
        IBackupJobsOperations BackupJobs { get; }

        /// <summary>
        /// Gets the IJobDetailsOperations
        /// </summary>
        IJobDetailsOperations JobDetails { get; }

        /// <summary>
        /// Gets the IJobCancellationsOperations
        /// </summary>
        IJobCancellationsOperations JobCancellations { get; }

        /// <summary>
        /// Gets the IJobOperationResultsOperations
        /// </summary>
        IJobOperationResultsOperations JobOperationResults { get; }

        /// <summary>
        /// Gets the IExportJobsOperationResultsOperations
        /// </summary>
        IExportJobsOperationResultsOperations ExportJobsOperationResults { get; }

        /// <summary>
        /// Gets the IJobsOperations
        /// </summary>
        IJobsOperations Jobs { get; }

        /// <summary>
        /// Gets the IBackupProtectedItemsOperations
        /// </summary>
        IBackupProtectedItemsOperations BackupProtectedItems { get; }

        /// <summary>
        /// Gets the IOperationOperations
        /// </summary>
        IOperationOperations Operation { get; }

        /// <summary>
        /// Gets the IValidateOperationOperations
        /// </summary>
        IValidateOperationOperations ValidateOperation { get; }

        /// <summary>
        /// Gets the IValidateOperationResultsOperations
        /// </summary>
        IValidateOperationResultsOperations ValidateOperationResults { get; }

        /// <summary>
        /// Gets the IValidateOperationStatusesOperations
        /// </summary>
        IValidateOperationStatusesOperations ValidateOperationStatuses { get; }

        /// <summary>
        /// Gets the IBackupEnginesOperations
        /// </summary>
        IBackupEnginesOperations BackupEngines { get; }

        /// <summary>
        /// Gets the IProtectionContainerRefreshOperationResultsOperations
        /// </summary>
        IProtectionContainerRefreshOperationResultsOperations ProtectionContainerRefreshOperationResults { get; }

        /// <summary>
        /// Gets the IProtectableContainersOperations
        /// </summary>
        IProtectableContainersOperations ProtectableContainers { get; }

        /// <summary>
        /// Gets the IProtectionContainersOperations
        /// </summary>
        IProtectionContainersOperations ProtectionContainers { get; }

        /// <summary>
        /// Gets the IBackupWorkloadItemsOperations
        /// </summary>
        IBackupWorkloadItemsOperations BackupWorkloadItems { get; }

        /// <summary>
        /// Gets the IProtectionContainerOperationResultsOperations
        /// </summary>
        IProtectionContainerOperationResultsOperations ProtectionContainerOperationResults { get; }

        /// <summary>
        /// Gets the IBackupsOperations
        /// </summary>
        IBackupsOperations Backups { get; }

        /// <summary>
        /// Gets the IProtectedItemOperationStatusesOperations
        /// </summary>
        IProtectedItemOperationStatusesOperations ProtectedItemOperationStatuses { get; }

        /// <summary>
        /// Gets the IItemLevelRecoveryConnectionsOperations
        /// </summary>
        IItemLevelRecoveryConnectionsOperations ItemLevelRecoveryConnections { get; }

        /// <summary>
        /// Gets the IBackupOperationResultsOperations
        /// </summary>
        IBackupOperationResultsOperations BackupOperationResults { get; }

        /// <summary>
        /// Gets the IBackupOperationStatusesOperations
        /// </summary>
        IBackupOperationStatusesOperations BackupOperationStatuses { get; }

        /// <summary>
        /// Gets the IProtectionPolicyOperationStatusesOperations
        /// </summary>
        IProtectionPolicyOperationStatusesOperations ProtectionPolicyOperationStatuses { get; }

        /// <summary>
        /// Gets the IBackupProtectableItemsOperations
        /// </summary>
        IBackupProtectableItemsOperations BackupProtectableItems { get; }

        /// <summary>
        /// Gets the IBackupProtectionContainersOperations
        /// </summary>
        IBackupProtectionContainersOperations BackupProtectionContainers { get; }

        /// <summary>
        /// Gets the IDeletedProtectionContainersOperations
        /// </summary>
        IDeletedProtectionContainersOperations DeletedProtectionContainers { get; }

        /// <summary>
        /// Gets the ISecurityPiNsOperations
        /// </summary>
        ISecurityPiNsOperations SecurityPiNs { get; }

        /// <summary>
        /// Gets the IRecoveryPointsRecommendedForMoveOperations
        /// </summary>
        IRecoveryPointsRecommendedForMoveOperations RecoveryPointsRecommendedForMove { get; }

        /// <summary>
        /// Gets the IResourceGuardProxiesOperations
        /// </summary>
        IResourceGuardProxiesOperations ResourceGuardProxies { get; }

        /// <summary>
        /// Gets the IResourceGuardProxyOperations
        /// </summary>
        IResourceGuardProxyOperations ResourceGuardProxy { get; }

        /// <summary>
        /// Fetches operation status for data move operation on vault
        /// </summary>
        /// <remarks>
        /// Fetches operation status for data move operation on vault
        /// </remarks>
        /// <param name='vaultName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is present.
        /// </param>
        /// <param name='operationId'>
        /// 
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<OperationStatus>> GetOperationStatusWithHttpMessagesAsync(string vaultName, string resourceGroupName, string operationId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Prepares source vault for Data Move operation
        /// </summary>
        /// <remarks>
        /// Prepares source vault for Data Move operation
        /// </remarks>
        /// <param name='vaultName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is present.
        /// </param>
        /// <param name='parameters'>
        /// Prepare data move request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> BMSPrepareDataMoveWithHttpMessagesAsync(string vaultName, string resourceGroupName, PrepareDataMoveRequest parameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Triggers Data Move Operation on target vault
        /// </summary>
        /// <remarks>
        /// Triggers Data Move Operation on target vault
        /// </remarks>
        /// <param name='vaultName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is present.
        /// </param>
        /// <param name='parameters'>
        /// Trigger data move request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> BMSTriggerDataMoveWithHttpMessagesAsync(string vaultName, string resourceGroupName, TriggerDataMoveRequest parameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Move recovery point from one datastore to another store.
        /// </summary>
        /// <remarks>
        /// Move recovery point from one datastore to another store.
        /// </remarks>
        /// <param name='vaultName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is present.
        /// </param>
        /// <param name='fabricName'>
        /// 
        /// </param>
        /// <param name='containerName'>
        /// 
        /// </param>
        /// <param name='protectedItemName'>
        /// 
        /// </param>
        /// <param name='recoveryPointId'>
        /// 
        /// </param>
        /// <param name='parameters'>
        /// Move Resource Across Tiers Request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> MoveRecoveryPointWithHttpMessagesAsync(string vaultName, string resourceGroupName, string fabricName, string containerName, string protectedItemName, string recoveryPointId, MoveRPAcrossTiersRequest parameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Prepares source vault for Data Move operation
        /// </summary>
        /// <remarks>
        /// Prepares source vault for Data Move operation
        /// </remarks>
        /// <param name='vaultName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is present.
        /// </param>
        /// <param name='parameters'>
        /// Prepare data move request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> BeginBMSPrepareDataMoveWithHttpMessagesAsync(string vaultName, string resourceGroupName, PrepareDataMoveRequest parameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Triggers Data Move Operation on target vault
        /// </summary>
        /// <remarks>
        /// Triggers Data Move Operation on target vault
        /// </remarks>
        /// <param name='vaultName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is present.
        /// </param>
        /// <param name='parameters'>
        /// Trigger data move request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> BeginBMSTriggerDataMoveWithHttpMessagesAsync(string vaultName, string resourceGroupName, TriggerDataMoveRequest parameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Move recovery point from one datastore to another store.
        /// </summary>
        /// <remarks>
        /// Move recovery point from one datastore to another store.
        /// </remarks>
        /// <param name='vaultName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is present.
        /// </param>
        /// <param name='fabricName'>
        /// 
        /// </param>
        /// <param name='containerName'>
        /// 
        /// </param>
        /// <param name='protectedItemName'>
        /// 
        /// </param>
        /// <param name='recoveryPointId'>
        /// 
        /// </param>
        /// <param name='parameters'>
        /// Move Resource Across Tiers Request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> BeginMoveRecoveryPointWithHttpMessagesAsync(string vaultName, string resourceGroupName, string fabricName, string containerName, string protectedItemName, string recoveryPointId, MoveRPAcrossTiersRequest parameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }
}