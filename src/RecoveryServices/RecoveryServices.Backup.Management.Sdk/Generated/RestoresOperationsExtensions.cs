// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.RecoveryServices.Backup
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for RestoresOperations
    /// </summary>
    public static partial class RestoresOperationsExtensions
    {
        /// <summary>
        /// Restores the specified backed up data. This is an asynchronous operation.
        /// To know the status of this API call, use GetProtectedItemOperationResult
        /// API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name associated with the backed up items.
        /// </param>
        /// <param name='containerName'>
        /// Container name associated with the backed up items.
        /// </param>
        /// <param name='protectedItemName'>
        /// Backed up item to be restored.
        /// </param>
        /// <param name='recoveryPointId'>
        /// Recovery point ID which represents the backed up data to be restored.
        /// </param>
        /// <param name='xMsAuthorizationAuxiliary'>
        /// 
        /// </param>
        public static void Trigger(this IRestoresOperations operations, string vaultName, string resourceGroupName, string fabricName, string containerName, string protectedItemName, string recoveryPointId, RestoreRequestResource parameters, string xMsAuthorizationAuxiliary = default(string))
        {
                ((IRestoresOperations)operations).TriggerAsync(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, recoveryPointId, parameters, xMsAuthorizationAuxiliary).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Restores the specified backed up data. This is an asynchronous operation.
        /// To know the status of this API call, use GetProtectedItemOperationResult
        /// API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name associated with the backed up items.
        /// </param>
        /// <param name='containerName'>
        /// Container name associated with the backed up items.
        /// </param>
        /// <param name='protectedItemName'>
        /// Backed up item to be restored.
        /// </param>
        /// <param name='recoveryPointId'>
        /// Recovery point ID which represents the backed up data to be restored.
        /// </param>
        /// <param name='xMsAuthorizationAuxiliary'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task TriggerAsync(this IRestoresOperations operations, string vaultName, string resourceGroupName, string fabricName, string containerName, string protectedItemName, string recoveryPointId, RestoreRequestResource parameters, string xMsAuthorizationAuxiliary = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.TriggerWithHttpMessagesAsync(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, recoveryPointId, parameters, xMsAuthorizationAuxiliary, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Restores the specified backed up data. This is an asynchronous operation.
        /// To know the status of this API call, use GetProtectedItemOperationResult
        /// API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name associated with the backed up items.
        /// </param>
        /// <param name='containerName'>
        /// Container name associated with the backed up items.
        /// </param>
        /// <param name='protectedItemName'>
        /// Backed up item to be restored.
        /// </param>
        /// <param name='recoveryPointId'>
        /// Recovery point ID which represents the backed up data to be restored.
        /// </param>
        /// <param name='xMsAuthorizationAuxiliary'>
        /// 
        /// </param>
        public static void BeginTrigger(this IRestoresOperations operations, string vaultName, string resourceGroupName, string fabricName, string containerName, string protectedItemName, string recoveryPointId, RestoreRequestResource parameters, string xMsAuthorizationAuxiliary = default(string))
        {
                ((IRestoresOperations)operations).BeginTriggerAsync(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, recoveryPointId, parameters, xMsAuthorizationAuxiliary).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Restores the specified backed up data. This is an asynchronous operation.
        /// To know the status of this API call, use GetProtectedItemOperationResult
        /// API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name associated with the backed up items.
        /// </param>
        /// <param name='containerName'>
        /// Container name associated with the backed up items.
        /// </param>
        /// <param name='protectedItemName'>
        /// Backed up item to be restored.
        /// </param>
        /// <param name='recoveryPointId'>
        /// Recovery point ID which represents the backed up data to be restored.
        /// </param>
        /// <param name='xMsAuthorizationAuxiliary'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginTriggerAsync(this IRestoresOperations operations, string vaultName, string resourceGroupName, string fabricName, string containerName, string protectedItemName, string recoveryPointId, RestoreRequestResource parameters, string xMsAuthorizationAuxiliary = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginTriggerWithHttpMessagesAsync(vaultName, resourceGroupName, fabricName, containerName, protectedItemName, recoveryPointId, parameters, xMsAuthorizationAuxiliary, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
    }
}
