// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.RecoveryServices
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DeletedVaultsOperations
    /// </summary>
    public static partial class DeletedVaultsOperationsExtensions
    {
        /// <summary>
        /// List deleted vaults in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The name of Azure region.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DeletedVault> ListBySubscriptionId(this IDeletedVaultsOperations operations, string location)
        {
                return ((IDeletedVaultsOperations)operations).ListBySubscriptionIdAsync(location).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List deleted vaults in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The name of Azure region.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DeletedVault>> ListBySubscriptionIdAsync(this IDeletedVaultsOperations operations, string location, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySubscriptionIdWithHttpMessagesAsync(location, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a specific deleted vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The name of Azure region.
        /// </param>
        /// <param name='deletedVaultName'>
        /// The name of the DeletedVault
        /// </param>
        public static DeletedVault Get(this IDeletedVaultsOperations operations, string location, string deletedVaultName)
        {
                return ((IDeletedVaultsOperations)operations).GetAsync(location, deletedVaultName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a specific deleted vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The name of Azure region.
        /// </param>
        /// <param name='deletedVaultName'>
        /// The name of the DeletedVault
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeletedVault> GetAsync(this IDeletedVaultsOperations operations, string location, string deletedVaultName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(location, deletedVaultName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get the operation status of a deleted vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The name of Azure region.
        /// </param>
        /// <param name='deletedVaultName'>
        /// The name of deleted vault.
        /// </param>
        /// <param name='operationId'>
        /// 
        /// </param>
        public static OperationResource GetOperationStatus(this IDeletedVaultsOperations operations, string location, string deletedVaultName, string operationId)
        {
                return ((IDeletedVaultsOperations)operations).GetOperationStatusAsync(location, deletedVaultName, operationId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the operation status of a deleted vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The name of Azure region.
        /// </param>
        /// <param name='deletedVaultName'>
        /// The name of deleted vault.
        /// </param>
        /// <param name='operationId'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<OperationResource> GetOperationStatusAsync(this IDeletedVaultsOperations operations, string location, string deletedVaultName, string operationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetOperationStatusWithHttpMessagesAsync(location, deletedVaultName, operationId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Start undelete of a deleted vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The name of Azure region.
        /// </param>
        /// <param name='deletedVaultName'>
        /// The name of the DeletedVault
        /// </param>
        public static DeletedVault Undelete(this IDeletedVaultsOperations operations, string location, string deletedVaultName, DeletedVaultUndeleteInputProperties properties)
        {
                return ((IDeletedVaultsOperations)operations).UndeleteAsync(location, deletedVaultName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Start undelete of a deleted vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The name of Azure region.
        /// </param>
        /// <param name='deletedVaultName'>
        /// The name of the DeletedVault
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeletedVault> UndeleteAsync(this IDeletedVaultsOperations operations, string location, string deletedVaultName, DeletedVaultUndeleteInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UndeleteWithHttpMessagesAsync(location, deletedVaultName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Start undelete of a deleted vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The name of Azure region.
        /// </param>
        /// <param name='deletedVaultName'>
        /// The name of the DeletedVault
        /// </param>
        public static DeletedVault BeginUndelete(this IDeletedVaultsOperations operations, string location, string deletedVaultName, DeletedVaultUndeleteInputProperties properties)
        {
                return ((IDeletedVaultsOperations)operations).BeginUndeleteAsync(location, deletedVaultName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Start undelete of a deleted vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The name of Azure region.
        /// </param>
        /// <param name='deletedVaultName'>
        /// The name of the DeletedVault
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeletedVault> BeginUndeleteAsync(this IDeletedVaultsOperations operations, string location, string deletedVaultName, DeletedVaultUndeleteInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUndeleteWithHttpMessagesAsync(location, deletedVaultName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List deleted vaults in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DeletedVault> ListBySubscriptionIdNext(this IDeletedVaultsOperations operations, string nextPageLink)
        {
                return ((IDeletedVaultsOperations)operations).ListBySubscriptionIdNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List deleted vaults in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DeletedVault>> ListBySubscriptionIdNextAsync(this IDeletedVaultsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySubscriptionIdNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
