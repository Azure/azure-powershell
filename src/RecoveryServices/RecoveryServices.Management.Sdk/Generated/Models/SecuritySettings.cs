// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.Models
{
    using System.Linq;

    /// <summary>
    /// Security Settings of the vault
    /// </summary>
    public partial class SecuritySettings
    {
        /// <summary>
        /// Initializes a new instance of the SecuritySettings class.
        /// </summary>
        public SecuritySettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecuritySettings class.
        /// </summary>

        /// <param name="immutabilitySettings">Immutability Settings of a vault
        /// </param>

        /// <param name="softDeleteSettings">Soft delete Settings of a vault
        /// </param>

        /// <param name="multiUserAuthorization">MUA Settings of a vault
        /// Possible values include: &#39;Invalid&#39;, &#39;Enabled&#39;, &#39;Disabled&#39;</param>
        public SecuritySettings(ImmutabilitySettings immutabilitySettings = default(ImmutabilitySettings), SoftDeleteSettings softDeleteSettings = default(SoftDeleteSettings), string multiUserAuthorization = default(string))

        {
            this.ImmutabilitySettings = immutabilitySettings;
            this.SoftDeleteSettings = softDeleteSettings;
            this.MultiUserAuthorization = multiUserAuthorization;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets immutability Settings of a vault
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "immutabilitySettings")]
        public ImmutabilitySettings ImmutabilitySettings {get; set; }

        /// <summary>
        /// Gets or sets soft delete Settings of a vault
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "softDeleteSettings")]
        public SoftDeleteSettings SoftDeleteSettings {get; set; }

        /// <summary>
        /// Gets mUA Settings of a vault Possible values include: &#39;Invalid&#39;, &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "multiUserAuthorization")]
        public string MultiUserAuthorization {get; private set; }
    }
}