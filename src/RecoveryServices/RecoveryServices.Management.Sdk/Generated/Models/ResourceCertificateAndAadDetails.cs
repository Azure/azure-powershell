// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.Models
{
    using System.Linq;

    /// <summary>
    /// Certificate details representing the Vault credentials for AAD.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AzureActiveDirectory")]
    public partial class ResourceCertificateAndAadDetails : ResourceCertificateDetails
    {
        /// <summary>
        /// Initializes a new instance of the ResourceCertificateAndAadDetails class.
        /// </summary>
        public ResourceCertificateAndAadDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResourceCertificateAndAadDetails class.
        /// </summary>

        /// <param name="certificate">The base64 encoded certificate raw data string.
        /// </param>

        /// <param name="friendlyName">Certificate friendly name.
        /// </param>

        /// <param name="issuer">Certificate issuer.
        /// </param>

        /// <param name="resourceId">Resource ID of the vault.
        /// </param>

        /// <param name="subject">Certificate Subject Name.
        /// </param>

        /// <param name="thumbprint">Certificate thumbprint.
        /// </param>

        /// <param name="validFrom">Certificate Validity start Date time.
        /// </param>

        /// <param name="validTo">Certificate Validity End Date time.
        /// </param>

        /// <param name="aadAuthority">AAD tenant authority.
        /// </param>

        /// <param name="aadTenantId">AAD tenant Id.
        /// </param>

        /// <param name="servicePrincipalClientId">AAD service principal clientId.
        /// </param>

        /// <param name="servicePrincipalObjectId">AAD service principal ObjectId.
        /// </param>

        /// <param name="azureManagementEndpointAudience">Azure Management Endpoint Audience.
        /// </param>

        /// <param name="serviceResourceId">Service Resource Id.
        /// </param>

        /// <param name="aadAudience">AAD audience for the resource
        /// </param>
        public ResourceCertificateAndAadDetails(string aadAuthority, string aadTenantId, string servicePrincipalClientId, string servicePrincipalObjectId, string azureManagementEndpointAudience, byte[] certificate = default(byte[]), string friendlyName = default(string), string issuer = default(string), long? resourceId = default(long?), string subject = default(string), string thumbprint = default(string), System.DateTime? validFrom = default(System.DateTime?), System.DateTime? validTo = default(System.DateTime?), string serviceResourceId = default(string), string aadAudience = default(string))

        : base(certificate, friendlyName, issuer, resourceId, subject, thumbprint, validFrom, validTo)
        {
            this.AadAuthority = aadAuthority;
            this.AadTenantId = aadTenantId;
            this.ServicePrincipalClientId = servicePrincipalClientId;
            this.ServicePrincipalObjectId = servicePrincipalObjectId;
            this.AzureManagementEndpointAudience = azureManagementEndpointAudience;
            this.ServiceResourceId = serviceResourceId;
            this.AadAudience = aadAudience;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets aAD tenant authority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "aadAuthority")]
        public string AadAuthority {get; set; }

        /// <summary>
        /// Gets or sets aAD tenant Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "aadTenantId")]
        public string AadTenantId {get; set; }

        /// <summary>
        /// Gets or sets aAD service principal clientId.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalClientId")]
        public string ServicePrincipalClientId {get; set; }

        /// <summary>
        /// Gets or sets aAD service principal ObjectId.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipalObjectId")]
        public string ServicePrincipalObjectId {get; set; }

        /// <summary>
        /// Gets or sets azure Management Endpoint Audience.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azureManagementEndpointAudience")]
        public string AzureManagementEndpointAudience {get; set; }

        /// <summary>
        /// Gets or sets service Resource Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceResourceId")]
        public string ServiceResourceId {get; set; }

        /// <summary>
        /// Gets or sets aAD audience for the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "aadAudience")]
        public string AadAudience {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.AadAuthority == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AadAuthority");
            }
            if (this.AadTenantId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AadTenantId");
            }
            if (this.ServicePrincipalClientId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ServicePrincipalClientId");
            }
            if (this.ServicePrincipalObjectId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ServicePrincipalObjectId");
            }
            if (this.AzureManagementEndpointAudience == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AzureManagementEndpointAudience");
            }







        }
    }
}