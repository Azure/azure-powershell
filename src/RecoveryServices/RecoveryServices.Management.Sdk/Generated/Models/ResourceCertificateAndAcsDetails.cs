// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.Models
{
    using System.Linq;

    /// <summary>
    /// Certificate details representing the Vault credentials for ACS.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AccessControlService")]
    public partial class ResourceCertificateAndAcsDetails : ResourceCertificateDetails
    {
        /// <summary>
        /// Initializes a new instance of the ResourceCertificateAndAcsDetails class.
        /// </summary>
        public ResourceCertificateAndAcsDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResourceCertificateAndAcsDetails class.
        /// </summary>

        /// <param name="certificate">The base64 encoded certificate raw data string.
        /// </param>

        /// <param name="friendlyName">Certificate friendly name.
        /// </param>

        /// <param name="issuer">Certificate issuer.
        /// </param>

        /// <param name="resourceId">Resource ID of the vault.
        /// </param>

        /// <param name="subject">Certificate Subject Name.
        /// </param>

        /// <param name="thumbprint">Certificate thumbprint.
        /// </param>

        /// <param name="validFrom">Certificate Validity start Date time.
        /// </param>

        /// <param name="validTo">Certificate Validity End Date time.
        /// </param>

        /// <param name="globalAcsNamespace">ACS namespace name - tenant for our service.
        /// </param>

        /// <param name="globalAcsHostName">Acs mgmt host name to connect to.
        /// </param>

        /// <param name="globalAcsRpRealm">Global ACS namespace RP realm.
        /// </param>
        public ResourceCertificateAndAcsDetails(string globalAcsNamespace, string globalAcsHostName, string globalAcsRpRealm, byte[] certificate = default(byte[]), string friendlyName = default(string), string issuer = default(string), long? resourceId = default(long?), string subject = default(string), string thumbprint = default(string), System.DateTime? validFrom = default(System.DateTime?), System.DateTime? validTo = default(System.DateTime?))

        : base(certificate, friendlyName, issuer, resourceId, subject, thumbprint, validFrom, validTo)
        {
            this.GlobalAcsNamespace = globalAcsNamespace;
            this.GlobalAcsHostName = globalAcsHostName;
            this.GlobalAcsRpRealm = globalAcsRpRealm;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets aCS namespace name - tenant for our service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "globalAcsNamespace")]
        public string GlobalAcsNamespace {get; set; }

        /// <summary>
        /// Gets or sets acs mgmt host name to connect to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "globalAcsHostName")]
        public string GlobalAcsHostName {get; set; }

        /// <summary>
        /// Gets or sets global ACS namespace RP realm.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "globalAcsRPRealm")]
        public string GlobalAcsRpRealm {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.GlobalAcsNamespace == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "GlobalAcsNamespace");
            }
            if (this.GlobalAcsHostName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "GlobalAcsHostName");
            }
            if (this.GlobalAcsRpRealm == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "GlobalAcsRpRealm");
            }



        }
    }
}