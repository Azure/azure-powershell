// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.Models
{
    using System.Linq;

    /// <summary>
    /// Certificate details representing the Vault credentials.
    /// </summary>
    [Newtonsoft.Json.JsonObject("ResourceCertificateDetails")]
    public partial class ResourceCertificateDetails
    {
        /// <summary>
        /// Initializes a new instance of the ResourceCertificateDetails class.
        /// </summary>
        public ResourceCertificateDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResourceCertificateDetails class.
        /// </summary>

        /// <param name="certificate">The base64 encoded certificate raw data string.
        /// </param>

        /// <param name="friendlyName">Certificate friendly name.
        /// </param>

        /// <param name="issuer">Certificate issuer.
        /// </param>

        /// <param name="resourceId">Resource ID of the vault.
        /// </param>

        /// <param name="subject">Certificate Subject Name.
        /// </param>

        /// <param name="thumbprint">Certificate thumbprint.
        /// </param>

        /// <param name="validFrom">Certificate Validity start Date time.
        /// </param>

        /// <param name="validTo">Certificate Validity End Date time.
        /// </param>
        public ResourceCertificateDetails(byte[] certificate = default(byte[]), string friendlyName = default(string), string issuer = default(string), long? resourceId = default(long?), string subject = default(string), string thumbprint = default(string), System.DateTime? validFrom = default(System.DateTime?), System.DateTime? validTo = default(System.DateTime?))

        {
            this.Certificate = certificate;
            this.FriendlyName = friendlyName;
            this.Issuer = issuer;
            this.ResourceId = resourceId;
            this.Subject = subject;
            this.Thumbprint = thumbprint;
            this.ValidFrom = validFrom;
            this.ValidTo = validTo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the base64 encoded certificate raw data string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "certificate")]
        public byte[] Certificate {get; set; }

        /// <summary>
        /// Gets or sets certificate friendly name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName {get; set; }

        /// <summary>
        /// Gets or sets certificate issuer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "issuer")]
        public string Issuer {get; set; }

        /// <summary>
        /// Gets or sets resource ID of the vault.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceId")]
        public long? ResourceId {get; set; }

        /// <summary>
        /// Gets or sets certificate Subject Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subject")]
        public string Subject {get; set; }

        /// <summary>
        /// Gets or sets certificate thumbprint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "thumbprint")]
        public string Thumbprint {get; set; }

        /// <summary>
        /// Gets or sets certificate Validity start Date time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "validFrom")]
        public System.DateTime? ValidFrom {get; set; }

        /// <summary>
        /// Gets or sets certificate Validity End Date time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "validTo")]
        public System.DateTime? ValidTo {get; set; }
    }
}