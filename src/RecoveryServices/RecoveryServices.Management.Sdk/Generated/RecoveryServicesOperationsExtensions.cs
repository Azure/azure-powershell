// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.RecoveryServices
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for RecoveryServicesOperations
    /// </summary>
    public static partial class RecoveryServicesOperationsExtensions
    {
        /// <summary>
        /// API to check for resource name availability.
        /// A name is available if no other resource exists that has the same
        /// SubscriptionId, Resource Name and Type
        /// or if one or more such resources exist, each of these must be GC&#39;d and
        /// their time of deletion be more than 24 Hours Ago
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='location'>
        /// Location of the resource
        /// </param>
        public static CheckNameAvailabilityResult CheckNameAvailability(this IRecoveryServicesOperations operations, string resourceGroupName, string location, string type = default(string), string name = default(string))
        {
                return ((IRecoveryServicesOperations)operations).CheckNameAvailabilityAsync(resourceGroupName, location, type, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// API to check for resource name availability.
        /// A name is available if no other resource exists that has the same
        /// SubscriptionId, Resource Name and Type
        /// or if one or more such resources exist, each of these must be GC&#39;d and
        /// their time of deletion be more than 24 Hours Ago
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='location'>
        /// Location of the resource
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CheckNameAvailabilityResult> CheckNameAvailabilityAsync(this IRecoveryServicesOperations operations, string resourceGroupName, string location, string type = default(string), string name = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(resourceGroupName, location, type, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// API to get details about capabilities provided by
        /// Microsoft.RecoveryServices RP
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// Location of the resource
        /// </param>
        public static CapabilitiesResponse Capabilities(this IRecoveryServicesOperations operations, string location, string type, CapabilitiesProperties properties = default(CapabilitiesProperties))
        {
                return ((IRecoveryServicesOperations)operations).CapabilitiesAsync(location, type, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// API to get details about capabilities provided by
        /// Microsoft.RecoveryServices RP
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// Location of the resource
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CapabilitiesResponse> CapabilitiesAsync(this IRecoveryServicesOperations operations, string location, string type, CapabilitiesProperties properties = default(CapabilitiesProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CapabilitiesWithHttpMessagesAsync(location, type, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
