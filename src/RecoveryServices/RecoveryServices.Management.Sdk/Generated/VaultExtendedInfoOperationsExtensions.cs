// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.RecoveryServices
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for VaultExtendedInfoOperations
    /// </summary>
    public static partial class VaultExtendedInfoOperationsExtensions
    {
        /// <summary>
        /// Get the vault extended info.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the recovery services vault.
        /// </param>
        public static VaultExtendedInfoResource Get(this IVaultExtendedInfoOperations operations, string resourceGroupName, string vaultName)
        {
                return ((IVaultExtendedInfoOperations)operations).GetAsync(resourceGroupName, vaultName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the vault extended info.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VaultExtendedInfoResource> GetAsync(this IVaultExtendedInfoOperations operations, string resourceGroupName, string vaultName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, vaultName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create vault extended info.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the recovery services vault.
        /// </param>
        public static VaultExtendedInfoResource CreateOrUpdate(this IVaultExtendedInfoOperations operations, string resourceGroupName, string vaultName, VaultExtendedInfoResource resourceExtendedInfoDetails)
        {
                return ((IVaultExtendedInfoOperations)operations).CreateOrUpdateAsync(resourceGroupName, vaultName, resourceExtendedInfoDetails).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create vault extended info.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VaultExtendedInfoResource> CreateOrUpdateAsync(this IVaultExtendedInfoOperations operations, string resourceGroupName, string vaultName, VaultExtendedInfoResource resourceExtendedInfoDetails, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, vaultName, resourceExtendedInfoDetails, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update vault extended info.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the recovery services vault.
        /// </param>
        public static VaultExtendedInfoResource Update(this IVaultExtendedInfoOperations operations, string resourceGroupName, string vaultName, VaultExtendedInfoResource resourceExtendedInfoDetails)
        {
                return ((IVaultExtendedInfoOperations)operations).UpdateAsync(resourceGroupName, vaultName, resourceExtendedInfoDetails).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update vault extended info.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='vaultName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VaultExtendedInfoResource> UpdateAsync(this IVaultExtendedInfoOperations operations, string resourceGroupName, string vaultName, VaultExtendedInfoResource resourceExtendedInfoDetails, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, vaultName, resourceExtendedInfoDetails, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
