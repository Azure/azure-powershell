// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// RecoveryServicesOperations operations.
    /// </summary>
    public partial interface IRecoveryServicesOperations
    {
        /// <summary>
        /// API to check for resource name availability.
        /// A name is available if no other resource exists that has the same SubscriptionId, Resource Name and Type
        /// or if one or more such resources exist, each of these must be GC&#39;d and their time of deletion be more than 24 Hours Ago
        /// </summary>
        /// <remarks>
        /// API to check for resource name availability.
        /// A name is available if no other resource exists that has the same SubscriptionId, Resource Name and Type
        /// or if one or more such resources exist, each of these must be GC&#39;d and their time of deletion be more than 24 Hours Ago
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='location'>
        /// Location of the resource
        /// </param>
        /// <param name='type'>
        /// Describes the Resource type: Microsoft.RecoveryServices/Vaults
        /// </param>
        /// <param name='name'>
        /// Resource name for which availability needs to be checked
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<CheckNameAvailabilityResult>> CheckNameAvailabilityWithHttpMessagesAsync(string resourceGroupName, string location, string type = default(string), string name = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// API to get details about capabilities provided by Microsoft.RecoveryServices RP
        /// </summary>
        /// <remarks>
        /// API to get details about capabilities provided by Microsoft.RecoveryServices RP
        /// </remarks>
        /// <param name='location'>
        /// Location of the resource
        /// </param>
        /// <param name='type'>
        /// Describes the Resource type: Microsoft.RecoveryServices/Vaults
        /// </param>
        /// <param name='properties'>
        /// Capabilities information
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<CapabilitiesResponse>> CapabilitiesWithHttpMessagesAsync(string location, string type, CapabilitiesProperties properties = default(CapabilitiesProperties), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }
}