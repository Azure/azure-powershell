// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ResourceGraph.Models
{
    using System.Linq;

    /// <summary>
    /// A request to compute additional statistics (facets) over the query results.
    /// </summary>
    public partial class FacetRequest
    {
        /// <summary>
        /// Initializes a new instance of the FacetRequest class.
        /// </summary>
        public FacetRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FacetRequest class.
        /// </summary>

        /// <param name="expression">The column or list of columns to summarize by
        /// </param>

        /// <param name="options">The options for facet evaluation
        /// </param>
        public FacetRequest(string expression, FacetRequestOptions options = default(FacetRequestOptions))

        {
            this.Expression = expression;
            this.Options = options;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the column or list of columns to summarize by
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "expression")]
        public string Expression {get; set; }

        /// <summary>
        /// Gets or sets the options for facet evaluation
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "options")]
        public FacetRequestOptions Options {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Expression == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Expression");
            }

            if (this.Options != null)
            {
                this.Options.Validate();
            }
        }
    }
}