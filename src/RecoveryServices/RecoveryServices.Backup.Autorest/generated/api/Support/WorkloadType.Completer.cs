// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support
{

    /// <summary>Type of workload for the backup management</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.WorkloadTypeTypeConverter))]
    public partial struct WorkloadType :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Invalid".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Invalid'", "Invalid", global::System.Management.Automation.CompletionResultType.ParameterValue, "Invalid");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "VM".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'VM'", "VM", global::System.Management.Automation.CompletionResultType.ParameterValue, "VM");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "FileFolder".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'FileFolder'", "FileFolder", global::System.Management.Automation.CompletionResultType.ParameterValue, "FileFolder");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureSqlDb".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureSqlDb'", "AzureSqlDb", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureSqlDb");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SQLDB".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SQLDB'", "SQLDB", global::System.Management.Automation.CompletionResultType.ParameterValue, "SQLDB");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Exchange".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Exchange'", "Exchange", global::System.Management.Automation.CompletionResultType.ParameterValue, "Exchange");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Sharepoint".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Sharepoint'", "Sharepoint", global::System.Management.Automation.CompletionResultType.ParameterValue, "Sharepoint");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "VMwareVM".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'VMwareVM'", "VMwareVM", global::System.Management.Automation.CompletionResultType.ParameterValue, "VMwareVM");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SystemState".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SystemState'", "SystemState", global::System.Management.Automation.CompletionResultType.ParameterValue, "SystemState");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Client".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Client'", "Client", global::System.Management.Automation.CompletionResultType.ParameterValue, "Client");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GenericDataSource".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GenericDataSource'", "GenericDataSource", global::System.Management.Automation.CompletionResultType.ParameterValue, "GenericDataSource");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SQLDataBase".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SQLDataBase'", "SQLDataBase", global::System.Management.Automation.CompletionResultType.ParameterValue, "SQLDataBase");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureFileShare".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureFileShare'", "AzureFileShare", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureFileShare");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SAPHanaDatabase".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SAPHanaDatabase'", "SAPHanaDatabase", global::System.Management.Automation.CompletionResultType.ParameterValue, "SAPHanaDatabase");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SAPAseDatabase".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SAPAseDatabase'", "SAPAseDatabase", global::System.Management.Automation.CompletionResultType.ParameterValue, "SAPAseDatabase");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SAPHanaDBInstance".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SAPHanaDBInstance'", "SAPHanaDBInstance", global::System.Management.Automation.CompletionResultType.ParameterValue, "SAPHanaDBInstance");
            }
        }
    }
}