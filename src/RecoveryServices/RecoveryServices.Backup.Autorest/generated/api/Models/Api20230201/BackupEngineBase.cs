// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Extensions;

    /// <summary>
    /// The base backup engine class. All workload specific backup engines derive from this class.
    /// </summary>
    public partial class BackupEngineBase :
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineBase,
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineBaseInternal
    {

        /// <summary>Backing field for <see cref="AzureBackupAgentVersion" /> property.</summary>
        private string _azureBackupAgentVersion;

        /// <summary>Backup agent version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        public string AzureBackupAgentVersion { get => this._azureBackupAgentVersion; set => this._azureBackupAgentVersion = value; }

        /// <summary>Backing field for <see cref="BackupEngineId" /> property.</summary>
        private string _backupEngineId;

        /// <summary>ID of the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        public string BackupEngineId { get => this._backupEngineId; set => this._backupEngineId = value; }

        /// <summary>Backing field for <see cref="BackupEngineState" /> property.</summary>
        private string _backupEngineState;

        /// <summary>
        /// Status of the backup engine with the Recovery Services Vault. = {Active/Deleting/DeleteFailed}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        public string BackupEngineState { get => this._backupEngineState; set => this._backupEngineState = value; }

        /// <summary>Backing field for <see cref="BackupEngineType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.BackupEngineType _backupEngineType;

        /// <summary>Type of the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.BackupEngineType BackupEngineType { get => this._backupEngineType; set => this._backupEngineType = value; }

        /// <summary>Backing field for <see cref="BackupManagementType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.BackupManagementType? _backupManagementType;

        /// <summary>Type of backup management for the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.BackupManagementType? BackupManagementType { get => this._backupManagementType; set => this._backupManagementType = value; }

        /// <summary>Backing field for <see cref="CanReRegister" /> property.</summary>
        private bool? _canReRegister;

        /// <summary>Flag indicating if the backup engine be registered, once already registered.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        public bool? CanReRegister { get => this._canReRegister; set => this._canReRegister = value; }

        /// <summary>Backing field for <see cref="DpmVersion" /> property.</summary>
        private string _dpmVersion;

        /// <summary>Backup engine version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        public string DpmVersion { get => this._dpmVersion; set => this._dpmVersion = value; }

        /// <summary>Backing field for <see cref="ExtendedInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfo _extendedInfo;

        /// <summary>Extended info of the backupengine</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfo ExtendedInfo { get => (this._extendedInfo = this._extendedInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.BackupEngineExtendedInfo()); set => this._extendedInfo = value; }

        /// <summary>Disk space currently available in the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public double? ExtendedInfoAvailableDiskSpace { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfoInternal)ExtendedInfo).AvailableDiskSpace; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfoInternal)ExtendedInfo).AvailableDiskSpace = value ?? default(double); }

        /// <summary>Protected instances in the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public int? ExtendedInfoAzureProtectedInstance { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfoInternal)ExtendedInfo).AzureProtectedInstance; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfoInternal)ExtendedInfo).AzureProtectedInstance = value ?? default(int); }

        /// <summary>Database name of backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public string ExtendedInfoDatabaseName { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfoInternal)ExtendedInfo).DatabaseName; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfoInternal)ExtendedInfo).DatabaseName = value ?? null; }

        /// <summary>Number of disks in the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public int? ExtendedInfoDiskCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfoInternal)ExtendedInfo).DiskCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfoInternal)ExtendedInfo).DiskCount = value ?? default(int); }

        /// <summary>Number of protected items in the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public int? ExtendedInfoProtectedItemsCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfoInternal)ExtendedInfo).ProtectedItemsCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfoInternal)ExtendedInfo).ProtectedItemsCount = value ?? default(int); }

        /// <summary>Number of protected servers in the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public int? ExtendedInfoProtectedServersCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfoInternal)ExtendedInfo).ProtectedServersCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfoInternal)ExtendedInfo).ProtectedServersCount = value ?? default(int); }

        /// <summary>Last refresh time in the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public global::System.DateTime? ExtendedInfoRefreshedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfoInternal)ExtendedInfo).RefreshedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfoInternal)ExtendedInfo).RefreshedAt = value ?? default(global::System.DateTime); }

        /// <summary>Disk space used in the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Inlined)]
        public double? ExtendedInfoUsedDiskSpace { get => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfoInternal)ExtendedInfo).UsedDiskSpace; set => ((Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfoInternal)ExtendedInfo).UsedDiskSpace = value ?? default(double); }

        /// <summary>Backing field for <see cref="FriendlyName" /> property.</summary>
        private string _friendlyName;

        /// <summary>Friendly name of the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        public string FriendlyName { get => this._friendlyName; set => this._friendlyName = value; }

        /// <summary>Backing field for <see cref="HealthStatus" /> property.</summary>
        private string _healthStatus;

        /// <summary>Backup status of the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        public string HealthStatus { get => this._healthStatus; set => this._healthStatus = value; }

        /// <summary>Backing field for <see cref="IsAzureBackupAgentUpgradeAvailable" /> property.</summary>
        private bool? _isAzureBackupAgentUpgradeAvailable;

        /// <summary>To check if backup agent upgrade available</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        public bool? IsAzureBackupAgentUpgradeAvailable { get => this._isAzureBackupAgentUpgradeAvailable; set => this._isAzureBackupAgentUpgradeAvailable = value; }

        /// <summary>Backing field for <see cref="IsDpmUpgradeAvailable" /> property.</summary>
        private bool? _isDpmUpgradeAvailable;

        /// <summary>To check if backup engine upgrade available</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        public bool? IsDpmUpgradeAvailable { get => this._isDpmUpgradeAvailable; set => this._isDpmUpgradeAvailable = value; }

        /// <summary>Internal Acessors for ExtendedInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfo Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineBaseInternal.ExtendedInfo { get => (this._extendedInfo = this._extendedInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.BackupEngineExtendedInfo()); set { {_extendedInfo = value;} } }

        /// <summary>Backing field for <see cref="RegistrationStatus" /> property.</summary>
        private string _registrationStatus;

        /// <summary>Registration status of the backup engine with the Recovery Services Vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.PropertyOrigin.Owned)]
        public string RegistrationStatus { get => this._registrationStatus; set => this._registrationStatus = value; }

        /// <summary>Creates an new <see cref="BackupEngineBase" /> instance.</summary>
        public BackupEngineBase()
        {

        }
    }
    /// The base backup engine class. All workload specific backup engines derive from this class.
    public partial interface IBackupEngineBase :
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.IJsonSerializable
    {
        /// <summary>Backup agent version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Backup agent version",
        SerializedName = @"azureBackupAgentVersion",
        PossibleTypes = new [] { typeof(string) })]
        string AzureBackupAgentVersion { get; set; }
        /// <summary>ID of the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ID of the backup engine.",
        SerializedName = @"backupEngineId",
        PossibleTypes = new [] { typeof(string) })]
        string BackupEngineId { get; set; }
        /// <summary>
        /// Status of the backup engine with the Recovery Services Vault. = {Active/Deleting/DeleteFailed}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Status of the backup engine with the Recovery Services Vault. = {Active/Deleting/DeleteFailed}",
        SerializedName = @"backupEngineState",
        PossibleTypes = new [] { typeof(string) })]
        string BackupEngineState { get; set; }
        /// <summary>Type of the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Type of the backup engine.",
        SerializedName = @"backupEngineType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.BackupEngineType) })]
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.BackupEngineType BackupEngineType { get; set; }
        /// <summary>Type of backup management for the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of backup management for the backup engine.",
        SerializedName = @"backupManagementType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.BackupManagementType) })]
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.BackupManagementType? BackupManagementType { get; set; }
        /// <summary>Flag indicating if the backup engine be registered, once already registered.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag indicating if the backup engine be registered, once already registered.",
        SerializedName = @"canReRegister",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CanReRegister { get; set; }
        /// <summary>Backup engine version</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Backup engine version",
        SerializedName = @"dpmVersion",
        PossibleTypes = new [] { typeof(string) })]
        string DpmVersion { get; set; }
        /// <summary>Disk space currently available in the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Disk space currently available in the backup engine.",
        SerializedName = @"availableDiskSpace",
        PossibleTypes = new [] { typeof(double) })]
        double? ExtendedInfoAvailableDiskSpace { get; set; }
        /// <summary>Protected instances in the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Protected instances in the backup engine.",
        SerializedName = @"azureProtectedInstances",
        PossibleTypes = new [] { typeof(int) })]
        int? ExtendedInfoAzureProtectedInstance { get; set; }
        /// <summary>Database name of backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Database name of backup engine.",
        SerializedName = @"databaseName",
        PossibleTypes = new [] { typeof(string) })]
        string ExtendedInfoDatabaseName { get; set; }
        /// <summary>Number of disks in the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of disks in the backup engine.",
        SerializedName = @"diskCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ExtendedInfoDiskCount { get; set; }
        /// <summary>Number of protected items in the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of protected items in the backup engine.",
        SerializedName = @"protectedItemsCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ExtendedInfoProtectedItemsCount { get; set; }
        /// <summary>Number of protected servers in the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of protected servers in the backup engine.",
        SerializedName = @"protectedServersCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ExtendedInfoProtectedServersCount { get; set; }
        /// <summary>Last refresh time in the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Last refresh time in the backup engine.",
        SerializedName = @"refreshedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExtendedInfoRefreshedAt { get; set; }
        /// <summary>Disk space used in the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Disk space used in the backup engine.",
        SerializedName = @"usedDiskSpace",
        PossibleTypes = new [] { typeof(double) })]
        double? ExtendedInfoUsedDiskSpace { get; set; }
        /// <summary>Friendly name of the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Friendly name of the backup engine.",
        SerializedName = @"friendlyName",
        PossibleTypes = new [] { typeof(string) })]
        string FriendlyName { get; set; }
        /// <summary>Backup status of the backup engine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Backup status of the backup engine.",
        SerializedName = @"healthStatus",
        PossibleTypes = new [] { typeof(string) })]
        string HealthStatus { get; set; }
        /// <summary>To check if backup agent upgrade available</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"To check if backup agent upgrade available",
        SerializedName = @"isAzureBackupAgentUpgradeAvailable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsAzureBackupAgentUpgradeAvailable { get; set; }
        /// <summary>To check if backup engine upgrade available</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"To check if backup engine upgrade available",
        SerializedName = @"isDpmUpgradeAvailable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsDpmUpgradeAvailable { get; set; }
        /// <summary>Registration status of the backup engine with the Recovery Services Vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Registration status of the backup engine with the Recovery Services Vault.",
        SerializedName = @"registrationStatus",
        PossibleTypes = new [] { typeof(string) })]
        string RegistrationStatus { get; set; }

    }
    /// The base backup engine class. All workload specific backup engines derive from this class.
    internal partial interface IBackupEngineBaseInternal

    {
        /// <summary>Backup agent version</summary>
        string AzureBackupAgentVersion { get; set; }
        /// <summary>ID of the backup engine.</summary>
        string BackupEngineId { get; set; }
        /// <summary>
        /// Status of the backup engine with the Recovery Services Vault. = {Active/Deleting/DeleteFailed}
        /// </summary>
        string BackupEngineState { get; set; }
        /// <summary>Type of the backup engine.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.BackupEngineType BackupEngineType { get; set; }
        /// <summary>Type of backup management for the backup engine.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.BackupManagementType? BackupManagementType { get; set; }
        /// <summary>Flag indicating if the backup engine be registered, once already registered.</summary>
        bool? CanReRegister { get; set; }
        /// <summary>Backup engine version</summary>
        string DpmVersion { get; set; }
        /// <summary>Extended info of the backupengine</summary>
        Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IBackupEngineExtendedInfo ExtendedInfo { get; set; }
        /// <summary>Disk space currently available in the backup engine.</summary>
        double? ExtendedInfoAvailableDiskSpace { get; set; }
        /// <summary>Protected instances in the backup engine.</summary>
        int? ExtendedInfoAzureProtectedInstance { get; set; }
        /// <summary>Database name of backup engine.</summary>
        string ExtendedInfoDatabaseName { get; set; }
        /// <summary>Number of disks in the backup engine.</summary>
        int? ExtendedInfoDiskCount { get; set; }
        /// <summary>Number of protected items in the backup engine.</summary>
        int? ExtendedInfoProtectedItemsCount { get; set; }
        /// <summary>Number of protected servers in the backup engine.</summary>
        int? ExtendedInfoProtectedServersCount { get; set; }
        /// <summary>Last refresh time in the backup engine.</summary>
        global::System.DateTime? ExtendedInfoRefreshedAt { get; set; }
        /// <summary>Disk space used in the backup engine.</summary>
        double? ExtendedInfoUsedDiskSpace { get; set; }
        /// <summary>Friendly name of the backup engine.</summary>
        string FriendlyName { get; set; }
        /// <summary>Backup status of the backup engine.</summary>
        string HealthStatus { get; set; }
        /// <summary>To check if backup agent upgrade available</summary>
        bool? IsAzureBackupAgentUpgradeAvailable { get; set; }
        /// <summary>To check if backup engine upgrade available</summary>
        bool? IsDpmUpgradeAvailable { get; set; }
        /// <summary>Registration status of the backup engine with the Recovery Services Vault.</summary>
        string RegistrationStatus { get; set; }

    }
}