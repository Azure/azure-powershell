
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Registers the container with Recovery Services vault.\r\nThis is an asynchronous operation.
To track the operation status, use location header to call get latest status of\r\nthe operation.
.Description
Registers the container with Recovery Services vault.\r\nThis is an asynchronous operation.
To track the operation status, use location header to call get latest status of\r\nthe operation.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IProtectionContainerResource
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.IRecoveryServicesIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IProtectionContainerResource
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IRecoveryServicesIdentity>: Identity Parameter
  [AzureRegion <String>]: Azure region to hit Api
  [BackupEngineName <String>]: Name of the backup management server.
  [ContainerName <String>]: 
  [FabricName <String>]: Fabric name associated with the backed up item.
  [Id <String>]: Resource identity path
  [IntentObjectName <String>]: Backed up item name whose details are to be fetched.
  [JobName <String>]: Name of the job whose details are to be fetched.
  [OperationId <String>]: Operation id
  [PolicyName <String>]: Backup policy information to be fetched.
  [PrivateEndpointConnectionName <String>]: The name of the private endpoint connection.
  [ProtectedItemName <String>]: 
  [RecoveryPointId <String>]: 
  [ResourceGroupName <String>]: The name of the resource group where the recovery services vault is present.
  [ResourceGuardProxyName <String>]: 
  [SubscriptionId <String>]: The subscription Id.
  [VaultName <String>]: The name of the recovery services vault.

PARAMETER <IProtectionContainerResource>: Base class for container with backup items. Containers with specific workloads are derived from this class.
  [ETag <String>]: Optional ETag.
  [Location <String>]: Resource location.
  [Tag <IResourceTags>]: Resource tags.
    [(Any) <String>]: This indicates any property can be added to this object.
  [BackupManagementType <BackupManagementType?>]: Type of backup management for the container.
  [ContainerType <ProtectableContainerType?>]: Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.         Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is         Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload         Backup is VMAppContainer
  [FriendlyName <String>]: Friendly name of the container.
  [HealthStatus <String>]: Status of health of the container.
  [ProtectableObjectType <String>]: Type of the protectable object associated with this container
  [RegistrationStatus <String>]: Status of registration of the container with the Recovery Services Vault.
.Link
https://learn.microsoft.com/powershell/module/az.recoveryservices/register-azrecoveryservicesprotectioncontainer
#>
function Register-AzRecoveryServicesProtectionContainer {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IProtectionContainerResource])]
[CmdletBinding(DefaultParameterSetName='RegisterExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Register', Mandatory)]
    [Parameter(ParameterSetName='RegisterExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Path')]
    [System.String]
    # Name of the container to be registered.
    ${ContainerName},

    [Parameter(ParameterSetName='Register', Mandatory)]
    [Parameter(ParameterSetName='RegisterExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Path')]
    [System.String]
    # Fabric name associated with the container.
    ${FabricName},

    [Parameter(ParameterSetName='Register', Mandatory)]
    [Parameter(ParameterSetName='RegisterExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Path')]
    [System.String]
    # The name of the resource group where the recovery services vault is present.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Register')]
    [Parameter(ParameterSetName='RegisterExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The subscription Id.
    ${SubscriptionId},

    [Parameter(ParameterSetName='Register', Mandatory)]
    [Parameter(ParameterSetName='RegisterExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Path')]
    [System.String]
    # The name of the recovery services vault.
    ${VaultName},

    [Parameter(ParameterSetName='RegisterViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='RegisterViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.IRecoveryServicesIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Register', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='RegisterViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IProtectionContainerResource]
    # Base class for container with backup items.
    # Containers with specific workloads are derived from this class.
    # To construct, see NOTES section for PARAMETER properties and create a hash table.
    ${Parameter},

    [Parameter(ParameterSetName='RegisterExpanded')]
    [Parameter(ParameterSetName='RegisterViaIdentityExpanded')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.BackupManagementType])]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.BackupManagementType]
    # Type of backup management for the container.
    ${BackupManagementType},

    [Parameter(ParameterSetName='RegisterExpanded')]
    [Parameter(ParameterSetName='RegisterViaIdentityExpanded')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.ProtectableContainerType])]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Support.ProtectableContainerType]
    # Type of the container.
    # The value of this property for: 1.
    # Compute Azure VM is Microsoft.Compute/virtualMachines 2.Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3.
    # Windows machines (like MAB, DPM etc) isWindows 4.
    # Azure SQL instance is AzureSqlContainer.
    # 5.
    # Storage containers is StorageContainer.
    # 6.
    # Azure workloadBackup is VMAppContainer
    ${ContainerType},

    [Parameter(ParameterSetName='RegisterExpanded')]
    [Parameter(ParameterSetName='RegisterViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Body')]
    [System.String]
    # Optional ETag.
    ${ETag},

    [Parameter(ParameterSetName='RegisterExpanded')]
    [Parameter(ParameterSetName='RegisterViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Body')]
    [System.String]
    # Friendly name of the container.
    ${FriendlyName},

    [Parameter(ParameterSetName='RegisterExpanded')]
    [Parameter(ParameterSetName='RegisterViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Body')]
    [System.String]
    # Status of health of the container.
    ${HealthStatus},

    [Parameter(ParameterSetName='RegisterExpanded')]
    [Parameter(ParameterSetName='RegisterViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Body')]
    [System.String]
    # Resource location.
    ${Location},

    [Parameter(ParameterSetName='RegisterExpanded')]
    [Parameter(ParameterSetName='RegisterViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Body')]
    [System.String]
    # Type of the protectable object associated with this container
    ${ProtectableObjectType},

    [Parameter(ParameterSetName='RegisterExpanded')]
    [Parameter(ParameterSetName='RegisterViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Body')]
    [System.String]
    # Status of registration of the container with the Recovery Services Vault.
    ${RegistrationStatus},

    [Parameter(ParameterSetName='RegisterExpanded')]
    [Parameter(ParameterSetName='RegisterViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Models.Api20230201.IResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.RecoveryServices.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        $mapping = @{
            Register = 'Az.RecoveryServices.private\Register-AzRecoveryServicesProtectionContainer_Register';
            RegisterExpanded = 'Az.RecoveryServices.private\Register-AzRecoveryServicesProtectionContainer_RegisterExpanded';
            RegisterViaIdentity = 'Az.RecoveryServices.private\Register-AzRecoveryServicesProtectionContainer_RegisterViaIdentity';
            RegisterViaIdentityExpanded = 'Az.RecoveryServices.private\Register-AzRecoveryServicesProtectionContainer_RegisterViaIdentityExpanded';
        }
        if (('Register', 'RegisterExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }

        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {

        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {

        throw
    }

}
end {
    try {
        $steppablePipeline.End()

    } catch {

        throw
    }
} 
}
