// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ReplicationPoliciesOperations
    /// </summary>
    public static partial class ReplicationPoliciesOperationsExtensions
    {
        /// <summary>
        /// Lists the replication policies for a vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Policy> List(this IReplicationPoliciesOperations operations, string resourceGroupName, string resourceName)
        {
                return ((IReplicationPoliciesOperations)operations).ListAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the replication policies for a vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Policy>> ListAsync(this IReplicationPoliciesOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the details of a replication policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='policyName'>
        /// Replication policy name.
        /// </param>
        public static Policy Get(this IReplicationPoliciesOperations operations, string resourceGroupName, string resourceName, string policyName)
        {
                return ((IReplicationPoliciesOperations)operations).GetAsync(resourceGroupName, resourceName, policyName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the details of a replication policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='policyName'>
        /// Replication policy name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Policy> GetAsync(this IReplicationPoliciesOperations operations, string resourceGroupName, string resourceName, string policyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, policyName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to create a replication policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='policyName'>
        /// Replication policy name.
        /// </param>
        public static Policy Create(this IReplicationPoliciesOperations operations, string resourceGroupName, string resourceName, string policyName, CreatePolicyInputProperties properties = default(CreatePolicyInputProperties))
        {
                return ((IReplicationPoliciesOperations)operations).CreateAsync(resourceGroupName, resourceName, policyName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to create a replication policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='policyName'>
        /// Replication policy name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Policy> CreateAsync(this IReplicationPoliciesOperations operations, string resourceGroupName, string resourceName, string policyName, CreatePolicyInputProperties properties = default(CreatePolicyInputProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, resourceName, policyName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to delete a replication policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='policyName'>
        /// Replication policy name.
        /// </param>
        public static void Delete(this IReplicationPoliciesOperations operations, string resourceGroupName, string resourceName, string policyName)
        {
                ((IReplicationPoliciesOperations)operations).DeleteAsync(resourceGroupName, resourceName, policyName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to delete a replication policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='policyName'>
        /// Replication policy name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IReplicationPoliciesOperations operations, string resourceGroupName, string resourceName, string policyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, policyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The operation to update a replication policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='policyName'>
        /// Policy Id.
        /// </param>
        public static Policy Update(this IReplicationPoliciesOperations operations, string resourceGroupName, string resourceName, string policyName, UpdatePolicyInputProperties properties = default(UpdatePolicyInputProperties))
        {
                return ((IReplicationPoliciesOperations)operations).UpdateAsync(resourceGroupName, resourceName, policyName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to update a replication policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='policyName'>
        /// Policy Id.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Policy> UpdateAsync(this IReplicationPoliciesOperations operations, string resourceGroupName, string resourceName, string policyName, UpdatePolicyInputProperties properties = default(UpdatePolicyInputProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, resourceName, policyName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to create a replication policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='policyName'>
        /// Replication policy name.
        /// </param>
        public static Policy BeginCreate(this IReplicationPoliciesOperations operations, string resourceGroupName, string resourceName, string policyName, CreatePolicyInputProperties properties = default(CreatePolicyInputProperties))
        {
                return ((IReplicationPoliciesOperations)operations).BeginCreateAsync(resourceGroupName, resourceName, policyName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to create a replication policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='policyName'>
        /// Replication policy name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Policy> BeginCreateAsync(this IReplicationPoliciesOperations operations, string resourceGroupName, string resourceName, string policyName, CreatePolicyInputProperties properties = default(CreatePolicyInputProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, resourceName, policyName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to delete a replication policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='policyName'>
        /// Replication policy name.
        /// </param>
        public static void BeginDelete(this IReplicationPoliciesOperations operations, string resourceGroupName, string resourceName, string policyName)
        {
                ((IReplicationPoliciesOperations)operations).BeginDeleteAsync(resourceGroupName, resourceName, policyName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to delete a replication policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='policyName'>
        /// Replication policy name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IReplicationPoliciesOperations operations, string resourceGroupName, string resourceName, string policyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, resourceName, policyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The operation to update a replication policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='policyName'>
        /// Policy Id.
        /// </param>
        public static Policy BeginUpdate(this IReplicationPoliciesOperations operations, string resourceGroupName, string resourceName, string policyName, UpdatePolicyInputProperties properties = default(UpdatePolicyInputProperties))
        {
                return ((IReplicationPoliciesOperations)operations).BeginUpdateAsync(resourceGroupName, resourceName, policyName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to update a replication policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='policyName'>
        /// Policy Id.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Policy> BeginUpdateAsync(this IReplicationPoliciesOperations operations, string resourceGroupName, string resourceName, string policyName, UpdatePolicyInputProperties properties = default(UpdatePolicyInputProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, policyName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the replication policies for a vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Policy> ListNext(this IReplicationPoliciesOperations operations, string nextPageLink)
        {
                return ((IReplicationPoliciesOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the replication policies for a vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Policy>> ListNextAsync(this IReplicationPoliciesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
