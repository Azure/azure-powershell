// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ReplicationRecoveryPlansOperations
    /// </summary>
    public static partial class ReplicationRecoveryPlansOperationsExtensions
    {
        /// <summary>
        /// Lists the recovery plans in the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RecoveryPlan> List(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName)
        {
                return ((IReplicationRecoveryPlansOperations)operations).ListAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the recovery plans in the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RecoveryPlan>> ListAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the details of the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Name of the recovery plan.
        /// </param>
        public static RecoveryPlan Get(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName)
        {
                return ((IReplicationRecoveryPlansOperations)operations).GetAsync(resourceGroupName, resourceName, recoveryPlanName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the details of the recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Name of the recovery plan.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecoveryPlan> GetAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to create a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static RecoveryPlan Create(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, CreateRecoveryPlanInputProperties properties)
        {
                return ((IReplicationRecoveryPlansOperations)operations).CreateAsync(resourceGroupName, resourceName, recoveryPlanName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to create a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecoveryPlan> CreateAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, CreateRecoveryPlanInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static void Delete(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName)
        {
                ((IReplicationRecoveryPlansOperations)operations).DeleteAsync(resourceGroupName, resourceName, recoveryPlanName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The operation to update a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static RecoveryPlan Update(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, UpdateRecoveryPlanInputProperties properties = default(UpdateRecoveryPlanInputProperties))
        {
                return ((IReplicationRecoveryPlansOperations)operations).UpdateAsync(resourceGroupName, resourceName, recoveryPlanName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to update a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecoveryPlan> UpdateAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, UpdateRecoveryPlanInputProperties properties = default(UpdateRecoveryPlanInputProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to cancel the failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static RecoveryPlan FailoverCancel(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName)
        {
                return ((IReplicationRecoveryPlansOperations)operations).FailoverCancelAsync(resourceGroupName, resourceName, recoveryPlanName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to cancel the failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecoveryPlan> FailoverCancelAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.FailoverCancelWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to commit the failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static RecoveryPlan FailoverCommit(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName)
        {
                return ((IReplicationRecoveryPlansOperations)operations).FailoverCommitAsync(resourceGroupName, resourceName, recoveryPlanName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to commit the failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecoveryPlan> FailoverCommitAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.FailoverCommitWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to start the planned failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static RecoveryPlan PlannedFailover(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, RecoveryPlanPlannedFailoverInputProperties properties)
        {
                return ((IReplicationRecoveryPlansOperations)operations).PlannedFailoverAsync(resourceGroupName, resourceName, recoveryPlanName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to start the planned failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecoveryPlan> PlannedFailoverAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, RecoveryPlanPlannedFailoverInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.PlannedFailoverWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to reprotect(reverse replicate) a recovery plan. This api is
        /// for deprecated scenarios and no longer works.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static RecoveryPlan Reprotect(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName)
        {
                return ((IReplicationRecoveryPlansOperations)operations).ReprotectAsync(resourceGroupName, resourceName, recoveryPlanName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to reprotect(reverse replicate) a recovery plan. This api is
        /// for deprecated scenarios and no longer works.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecoveryPlan> ReprotectAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ReprotectWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to start the test failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static RecoveryPlan TestFailover(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, RecoveryPlanTestFailoverInputProperties properties)
        {
                return ((IReplicationRecoveryPlansOperations)operations).TestFailoverAsync(resourceGroupName, resourceName, recoveryPlanName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to start the test failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecoveryPlan> TestFailoverAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, RecoveryPlanTestFailoverInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.TestFailoverWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to cleanup test failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static RecoveryPlan TestFailoverCleanup(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, RecoveryPlanTestFailoverCleanupInputProperties properties)
        {
                return ((IReplicationRecoveryPlansOperations)operations).TestFailoverCleanupAsync(resourceGroupName, resourceName, recoveryPlanName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to cleanup test failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecoveryPlan> TestFailoverCleanupAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, RecoveryPlanTestFailoverCleanupInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.TestFailoverCleanupWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to start the unplanned failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static RecoveryPlan UnplannedFailover(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, RecoveryPlanUnplannedFailoverInputProperties properties)
        {
                return ((IReplicationRecoveryPlansOperations)operations).UnplannedFailoverAsync(resourceGroupName, resourceName, recoveryPlanName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to start the unplanned failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecoveryPlan> UnplannedFailoverAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, RecoveryPlanUnplannedFailoverInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UnplannedFailoverWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to create a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static RecoveryPlan BeginCreate(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, CreateRecoveryPlanInputProperties properties)
        {
                return ((IReplicationRecoveryPlansOperations)operations).BeginCreateAsync(resourceGroupName, resourceName, recoveryPlanName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to create a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecoveryPlan> BeginCreateAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, CreateRecoveryPlanInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static void BeginDelete(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName)
        {
                ((IReplicationRecoveryPlansOperations)operations).BeginDeleteAsync(resourceGroupName, resourceName, recoveryPlanName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The operation to update a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static RecoveryPlan BeginUpdate(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, UpdateRecoveryPlanInputProperties properties = default(UpdateRecoveryPlanInputProperties))
        {
                return ((IReplicationRecoveryPlansOperations)operations).BeginUpdateAsync(resourceGroupName, resourceName, recoveryPlanName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to update a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecoveryPlan> BeginUpdateAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, UpdateRecoveryPlanInputProperties properties = default(UpdateRecoveryPlanInputProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to cancel the failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static RecoveryPlan BeginFailoverCancel(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName)
        {
                return ((IReplicationRecoveryPlansOperations)operations).BeginFailoverCancelAsync(resourceGroupName, resourceName, recoveryPlanName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to cancel the failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecoveryPlan> BeginFailoverCancelAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginFailoverCancelWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to commit the failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static RecoveryPlan BeginFailoverCommit(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName)
        {
                return ((IReplicationRecoveryPlansOperations)operations).BeginFailoverCommitAsync(resourceGroupName, resourceName, recoveryPlanName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to commit the failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecoveryPlan> BeginFailoverCommitAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginFailoverCommitWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to start the planned failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static RecoveryPlan BeginPlannedFailover(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, RecoveryPlanPlannedFailoverInputProperties properties)
        {
                return ((IReplicationRecoveryPlansOperations)operations).BeginPlannedFailoverAsync(resourceGroupName, resourceName, recoveryPlanName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to start the planned failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecoveryPlan> BeginPlannedFailoverAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, RecoveryPlanPlannedFailoverInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginPlannedFailoverWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to reprotect(reverse replicate) a recovery plan. This api is
        /// for deprecated scenarios and no longer works.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static RecoveryPlan BeginReprotect(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName)
        {
                return ((IReplicationRecoveryPlansOperations)operations).BeginReprotectAsync(resourceGroupName, resourceName, recoveryPlanName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to reprotect(reverse replicate) a recovery plan. This api is
        /// for deprecated scenarios and no longer works.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecoveryPlan> BeginReprotectAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginReprotectWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to start the test failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static RecoveryPlan BeginTestFailover(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, RecoveryPlanTestFailoverInputProperties properties)
        {
                return ((IReplicationRecoveryPlansOperations)operations).BeginTestFailoverAsync(resourceGroupName, resourceName, recoveryPlanName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to start the test failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecoveryPlan> BeginTestFailoverAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, RecoveryPlanTestFailoverInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginTestFailoverWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to cleanup test failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static RecoveryPlan BeginTestFailoverCleanup(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, RecoveryPlanTestFailoverCleanupInputProperties properties)
        {
                return ((IReplicationRecoveryPlansOperations)operations).BeginTestFailoverCleanupAsync(resourceGroupName, resourceName, recoveryPlanName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to cleanup test failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecoveryPlan> BeginTestFailoverCleanupAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, RecoveryPlanTestFailoverCleanupInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginTestFailoverCleanupWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to start the unplanned failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        public static RecoveryPlan BeginUnplannedFailover(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, RecoveryPlanUnplannedFailoverInputProperties properties)
        {
                return ((IReplicationRecoveryPlansOperations)operations).BeginUnplannedFailoverAsync(resourceGroupName, resourceName, recoveryPlanName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to start the unplanned failover of a recovery plan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='recoveryPlanName'>
        /// Recovery plan name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RecoveryPlan> BeginUnplannedFailoverAsync(this IReplicationRecoveryPlansOperations operations, string resourceGroupName, string resourceName, string recoveryPlanName, RecoveryPlanUnplannedFailoverInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUnplannedFailoverWithHttpMessagesAsync(resourceGroupName, resourceName, recoveryPlanName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the recovery plans in the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RecoveryPlan> ListNext(this IReplicationRecoveryPlansOperations operations, string nextPageLink)
        {
                return ((IReplicationRecoveryPlansOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the recovery plans in the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RecoveryPlan>> ListNextAsync(this IReplicationRecoveryPlansOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
