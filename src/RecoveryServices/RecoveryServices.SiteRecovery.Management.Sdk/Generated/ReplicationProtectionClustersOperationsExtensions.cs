// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ReplicationProtectionClustersOperations
    /// </summary>
    public static partial class ReplicationProtectionClustersOperationsExtensions
    {
        /// <summary>
        /// Gets the list of ASR replication protected clusters in the protection
        /// container.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReplicationProtectionCluster> ListByReplicationProtectionContainers(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName)
        {
                return ((IReplicationProtectionClustersOperations)operations).ListByReplicationProtectionContainersAsync(resourceGroupName, resourceName, fabricName, protectionContainerName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of ASR replication protected clusters in the protection
        /// container.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReplicationProtectionCluster>> ListByReplicationProtectionContainersAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByReplicationProtectionContainersWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the details of an ASR replication protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        public static ReplicationProtectionCluster Get(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName)
        {
                return ((IReplicationProtectionClustersOperations)operations).GetAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the details of an ASR replication protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplicationProtectionCluster> GetAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to create an ASR replication protection cluster item.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        public static ReplicationProtectionCluster Create(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ReplicationProtectionClusterProperties properties = default(ReplicationProtectionClusterProperties))
        {
                return ((IReplicationProtectionClustersOperations)operations).CreateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to create an ASR replication protection cluster item.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplicationProtectionCluster> CreateAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ReplicationProtectionClusterProperties properties = default(ReplicationProtectionClusterProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to purge the replication protection cluster. This operation
        /// will force delete the replication protection cluster. Use the remove
        /// operation on replication protection cluster to perform a clean disable
        /// replication protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        public static ReplicationProtectionClustersPurgeHeaders Purge(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName)
        {
                return ((IReplicationProtectionClustersOperations)operations).PurgeAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to purge the replication protection cluster. This operation
        /// will force delete the replication protection cluster. Use the remove
        /// operation on replication protection cluster to perform a clean disable
        /// replication protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplicationProtectionClustersPurgeHeaders> PurgeAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.PurgeWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Operation to apply a new cluster recovery point on the Protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        public static ReplicationProtectionCluster ApplyRecoveryPoint(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ApplyClusterRecoveryPointInputProperties properties)
        {
                return ((IReplicationProtectionClustersOperations)operations).ApplyRecoveryPointAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to apply a new cluster recovery point on the Protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplicationProtectionCluster> ApplyRecoveryPointAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ApplyClusterRecoveryPointInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApplyRecoveryPointWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Operation to initiate commit failover of the replication protection
        /// cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        public static ReplicationProtectionCluster FailoverCommit(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName)
        {
                return ((IReplicationProtectionClustersOperations)operations).FailoverCommitAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to initiate commit failover of the replication protection
        /// cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplicationProtectionCluster> FailoverCommitAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.FailoverCommitWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Track the results of an asynchronous operation on the replication
        /// protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        /// <param name='jobId'>
        /// job id to track.
        /// </param>
        public static ReplicationProtectionCluster GetOperationResults(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, string jobId)
        {
                return ((IReplicationProtectionClustersOperations)operations).GetOperationResultsAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, jobId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Track the results of an asynchronous operation on the replication
        /// protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        /// <param name='jobId'>
        /// job id to track.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplicationProtectionCluster> GetOperationResultsAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, string jobId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetOperationResultsWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, jobId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to repair replication protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        public static ReplicationProtectionCluster RepairReplication(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName)
        {
                return ((IReplicationProtectionClustersOperations)operations).RepairReplicationAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to repair replication protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplicationProtectionCluster> RepairReplicationAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.RepairReplicationWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Operation to initiate a failover of the replication protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        public static ReplicationProtectionCluster TestFailover(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ClusterTestFailoverInputProperties properties)
        {
                return ((IReplicationProtectionClustersOperations)operations).TestFailoverAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to initiate a failover of the replication protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplicationProtectionCluster> TestFailoverAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ClusterTestFailoverInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.TestFailoverWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Operation to clean up the test failover of a replication protected cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        public static ReplicationProtectionCluster TestFailoverCleanup(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ClusterTestFailoverCleanupInputProperties properties)
        {
                return ((IReplicationProtectionClustersOperations)operations).TestFailoverCleanupAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to clean up the test failover of a replication protected cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplicationProtectionCluster> TestFailoverCleanupAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ClusterTestFailoverCleanupInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.TestFailoverCleanupWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Operation to initiate a failover of the replication protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        public static ReplicationProtectionCluster UnplannedFailover(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ClusterUnplannedFailoverInputProperties properties)
        {
                return ((IReplicationProtectionClustersOperations)operations).UnplannedFailoverAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to initiate a failover of the replication protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplicationProtectionCluster> UnplannedFailoverAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ClusterUnplannedFailoverInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UnplannedFailoverWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the list of ASR replication protected clusters in the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='skipToken'>
        /// The pagination token. Possible values: &#34;FabricId&#34; or &#34;FabricId_CloudId&#34; or
        /// null.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReplicationProtectionCluster> List(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, Microsoft.Rest.Azure.OData.ODataQuery<ProtectedClustersQueryParameter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ProtectedClustersQueryParameter>), string skipToken = default(string))
        {
                return ((IReplicationProtectionClustersOperations)operations).ListAsync(resourceGroupName, resourceName, odataQuery, skipToken).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of ASR replication protected clusters in the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='skipToken'>
        /// The pagination token. Possible values: &#34;FabricId&#34; or &#34;FabricId_CloudId&#34; or
        /// null.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReplicationProtectionCluster>> ListAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, Microsoft.Rest.Azure.OData.ODataQuery<ProtectedClustersQueryParameter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<ProtectedClustersQueryParameter>), string skipToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, resourceName, odataQuery, skipToken, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to create an ASR replication protection cluster item.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        public static ReplicationProtectionCluster BeginCreate(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ReplicationProtectionClusterProperties properties = default(ReplicationProtectionClusterProperties))
        {
                return ((IReplicationProtectionClustersOperations)operations).BeginCreateAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to create an ASR replication protection cluster item.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplicationProtectionCluster> BeginCreateAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ReplicationProtectionClusterProperties properties = default(ReplicationProtectionClusterProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to purge the replication protection cluster. This operation
        /// will force delete the replication protection cluster. Use the remove
        /// operation on replication protection cluster to perform a clean disable
        /// replication protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        public static ReplicationProtectionClustersPurgeHeaders BeginPurge(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName)
        {
                return ((IReplicationProtectionClustersOperations)operations).BeginPurgeAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to purge the replication protection cluster. This operation
        /// will force delete the replication protection cluster. Use the remove
        /// operation on replication protection cluster to perform a clean disable
        /// replication protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplicationProtectionClustersPurgeHeaders> BeginPurgeAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginPurgeWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Operation to apply a new cluster recovery point on the Protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        public static ReplicationProtectionCluster BeginApplyRecoveryPoint(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ApplyClusterRecoveryPointInputProperties properties)
        {
                return ((IReplicationProtectionClustersOperations)operations).BeginApplyRecoveryPointAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to apply a new cluster recovery point on the Protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplicationProtectionCluster> BeginApplyRecoveryPointAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ApplyClusterRecoveryPointInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginApplyRecoveryPointWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Operation to initiate commit failover of the replication protection
        /// cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        public static ReplicationProtectionCluster BeginFailoverCommit(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName)
        {
                return ((IReplicationProtectionClustersOperations)operations).BeginFailoverCommitAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to initiate commit failover of the replication protection
        /// cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplicationProtectionCluster> BeginFailoverCommitAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginFailoverCommitWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to repair replication protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        public static ReplicationProtectionCluster BeginRepairReplication(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName)
        {
                return ((IReplicationProtectionClustersOperations)operations).BeginRepairReplicationAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to repair replication protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplicationProtectionCluster> BeginRepairReplicationAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginRepairReplicationWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Operation to initiate a failover of the replication protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        public static ReplicationProtectionCluster BeginTestFailover(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ClusterTestFailoverInputProperties properties)
        {
                return ((IReplicationProtectionClustersOperations)operations).BeginTestFailoverAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to initiate a failover of the replication protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplicationProtectionCluster> BeginTestFailoverAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ClusterTestFailoverInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginTestFailoverWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Operation to clean up the test failover of a replication protected cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        public static ReplicationProtectionCluster BeginTestFailoverCleanup(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ClusterTestFailoverCleanupInputProperties properties)
        {
                return ((IReplicationProtectionClustersOperations)operations).BeginTestFailoverCleanupAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to clean up the test failover of a replication protected cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplicationProtectionCluster> BeginTestFailoverCleanupAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ClusterTestFailoverCleanupInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginTestFailoverCleanupWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Operation to initiate a failover of the replication protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        public static ReplicationProtectionCluster BeginUnplannedFailover(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ClusterUnplannedFailoverInputProperties properties)
        {
                return ((IReplicationProtectionClustersOperations)operations).BeginUnplannedFailoverAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to initiate a failover of the replication protection cluster.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='replicationProtectionClusterName'>
        /// Replication protection cluster name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplicationProtectionCluster> BeginUnplannedFailoverAsync(this IReplicationProtectionClustersOperations operations, string resourceGroupName, string resourceName, string fabricName, string protectionContainerName, string replicationProtectionClusterName, ClusterUnplannedFailoverInputProperties properties, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUnplannedFailoverWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, protectionContainerName, replicationProtectionClusterName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the list of ASR replication protected clusters in the protection
        /// container.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReplicationProtectionCluster> ListByReplicationProtectionContainersNext(this IReplicationProtectionClustersOperations operations, string nextPageLink)
        {
                return ((IReplicationProtectionClustersOperations)operations).ListByReplicationProtectionContainersNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of ASR replication protected clusters in the protection
        /// container.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReplicationProtectionCluster>> ListByReplicationProtectionContainersNextAsync(this IReplicationProtectionClustersOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByReplicationProtectionContainersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the list of ASR replication protected clusters in the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReplicationProtectionCluster> ListNext(this IReplicationProtectionClustersOperations operations, string nextPageLink)
        {
                return ((IReplicationProtectionClustersOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of ASR replication protected clusters in the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReplicationProtectionCluster>> ListNextAsync(this IReplicationProtectionClustersOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
