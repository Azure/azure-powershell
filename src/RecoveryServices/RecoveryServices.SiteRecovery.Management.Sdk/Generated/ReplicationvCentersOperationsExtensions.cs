// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ReplicationvCentersOperations
    /// </summary>
    public static partial class ReplicationvCentersOperationsExtensions
    {
        /// <summary>
        /// Lists the vCenter servers registered in a fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<VCenter> ListByReplicationFabrics(this IReplicationvCentersOperations operations, string resourceGroupName, string resourceName, string fabricName)
        {
                return ((IReplicationvCentersOperations)operations).ListByReplicationFabricsAsync(resourceGroupName, resourceName, fabricName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the vCenter servers registered in a fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<VCenter>> ListByReplicationFabricsAsync(this IReplicationvCentersOperations operations, string resourceGroupName, string resourceName, string fabricName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByReplicationFabricsWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the details of a registered vCenter server(Add vCenter server).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='vcenterName'>
        /// vcenter name.
        /// </param>
        public static VCenter Get(this IReplicationvCentersOperations operations, string resourceGroupName, string resourceName, string fabricName, string vcenterName)
        {
                return ((IReplicationvCentersOperations)operations).GetAsync(resourceGroupName, resourceName, fabricName, vcenterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the details of a registered vCenter server(Add vCenter server).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='vcenterName'>
        /// vcenter name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VCenter> GetAsync(this IReplicationvCentersOperations operations, string resourceGroupName, string resourceName, string fabricName, string vcenterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, vcenterName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to create a vCenter object..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='vcenterName'>
        /// vcenter name.
        /// </param>
        public static VCenter Create(this IReplicationvCentersOperations operations, string resourceGroupName, string resourceName, string fabricName, string vcenterName, AddVCenterRequestProperties properties = default(AddVCenterRequestProperties))
        {
                return ((IReplicationvCentersOperations)operations).CreateAsync(resourceGroupName, resourceName, fabricName, vcenterName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to create a vCenter object..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='vcenterName'>
        /// vcenter name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VCenter> CreateAsync(this IReplicationvCentersOperations operations, string resourceGroupName, string resourceName, string fabricName, string vcenterName, AddVCenterRequestProperties properties = default(AddVCenterRequestProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, vcenterName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to remove(unregister) a registered vCenter server from the
        /// vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='vcenterName'>
        /// vcenter name.
        /// </param>
        public static void Delete(this IReplicationvCentersOperations operations, string resourceGroupName, string resourceName, string fabricName, string vcenterName)
        {
                ((IReplicationvCentersOperations)operations).DeleteAsync(resourceGroupName, resourceName, fabricName, vcenterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to remove(unregister) a registered vCenter server from the
        /// vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='vcenterName'>
        /// vcenter name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IReplicationvCentersOperations operations, string resourceGroupName, string resourceName, string fabricName, string vcenterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, vcenterName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The operation to update a registered vCenter.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='vcenterName'>
        /// vcenter name.
        /// </param>
        public static VCenter Update(this IReplicationvCentersOperations operations, string resourceGroupName, string resourceName, string fabricName, string vcenterName, UpdateVCenterRequestProperties properties = default(UpdateVCenterRequestProperties))
        {
                return ((IReplicationvCentersOperations)operations).UpdateAsync(resourceGroupName, resourceName, fabricName, vcenterName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to update a registered vCenter.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='vcenterName'>
        /// vcenter name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VCenter> UpdateAsync(this IReplicationvCentersOperations operations, string resourceGroupName, string resourceName, string fabricName, string vcenterName, UpdateVCenterRequestProperties properties = default(UpdateVCenterRequestProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, vcenterName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the vCenter servers registered in the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<VCenter> List(this IReplicationvCentersOperations operations, string resourceGroupName, string resourceName)
        {
                return ((IReplicationvCentersOperations)operations).ListAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the vCenter servers registered in the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<VCenter>> ListAsync(this IReplicationvCentersOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to create a vCenter object..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='vcenterName'>
        /// vcenter name.
        /// </param>
        public static VCenter BeginCreate(this IReplicationvCentersOperations operations, string resourceGroupName, string resourceName, string fabricName, string vcenterName, AddVCenterRequestProperties properties = default(AddVCenterRequestProperties))
        {
                return ((IReplicationvCentersOperations)operations).BeginCreateAsync(resourceGroupName, resourceName, fabricName, vcenterName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to create a vCenter object..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='vcenterName'>
        /// vcenter name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VCenter> BeginCreateAsync(this IReplicationvCentersOperations operations, string resourceGroupName, string resourceName, string fabricName, string vcenterName, AddVCenterRequestProperties properties = default(AddVCenterRequestProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, vcenterName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to remove(unregister) a registered vCenter server from the
        /// vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='vcenterName'>
        /// vcenter name.
        /// </param>
        public static void BeginDelete(this IReplicationvCentersOperations operations, string resourceGroupName, string resourceName, string fabricName, string vcenterName)
        {
                ((IReplicationvCentersOperations)operations).BeginDeleteAsync(resourceGroupName, resourceName, fabricName, vcenterName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to remove(unregister) a registered vCenter server from the
        /// vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='vcenterName'>
        /// vcenter name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IReplicationvCentersOperations operations, string resourceGroupName, string resourceName, string fabricName, string vcenterName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, vcenterName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The operation to update a registered vCenter.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='vcenterName'>
        /// vcenter name.
        /// </param>
        public static VCenter BeginUpdate(this IReplicationvCentersOperations operations, string resourceGroupName, string resourceName, string fabricName, string vcenterName, UpdateVCenterRequestProperties properties = default(UpdateVCenterRequestProperties))
        {
                return ((IReplicationvCentersOperations)operations).BeginUpdateAsync(resourceGroupName, resourceName, fabricName, vcenterName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to update a registered vCenter.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='vcenterName'>
        /// vcenter name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VCenter> BeginUpdateAsync(this IReplicationvCentersOperations operations, string resourceGroupName, string resourceName, string fabricName, string vcenterName, UpdateVCenterRequestProperties properties = default(UpdateVCenterRequestProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, fabricName, vcenterName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the vCenter servers registered in a fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<VCenter> ListByReplicationFabricsNext(this IReplicationvCentersOperations operations, string nextPageLink)
        {
                return ((IReplicationvCentersOperations)operations).ListByReplicationFabricsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the vCenter servers registered in a fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<VCenter>> ListByReplicationFabricsNextAsync(this IReplicationvCentersOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByReplicationFabricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the vCenter servers registered in the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<VCenter> ListNext(this IReplicationvCentersOperations operations, string nextPageLink)
        {
                return ((IReplicationvCentersOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the vCenter servers registered in the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<VCenter>> ListNextAsync(this IReplicationvCentersOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
