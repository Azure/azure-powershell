// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ReplicationProtectionContainersOperations
    /// </summary>
    public static partial class ReplicationProtectionContainersOperationsExtensions
    {
        /// <summary>
        /// Lists the protection containers in the specified fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProtectionContainer> ListByReplicationFabrics(this IReplicationProtectionContainersOperations operations, string fabricName)
        {
                return ((IReplicationProtectionContainersOperations)operations).ListByReplicationFabricsAsync(fabricName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the protection containers in the specified fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProtectionContainer>> ListByReplicationFabricsAsync(this IReplicationProtectionContainersOperations operations, string fabricName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByReplicationFabricsWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the details of a protection container.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        public static ProtectionContainer Get(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName)
        {
                return ((IReplicationProtectionContainersOperations)operations).GetAsync(fabricName, protectionContainerName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the details of a protection container.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProtectionContainer> GetAsync(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(fabricName, protectionContainerName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Operation to create a protection container.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Unique fabric ARM name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Unique protection container ARM name.
        /// </param>
        public static ProtectionContainer Create(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, CreateProtectionContainerInputProperties properties = default(CreateProtectionContainerInputProperties))
        {
                return ((IReplicationProtectionContainersOperations)operations).CreateAsync(fabricName, protectionContainerName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to create a protection container.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Unique fabric ARM name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Unique protection container ARM name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProtectionContainer> CreateAsync(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, CreateProtectionContainerInputProperties properties = default(CreateProtectionContainerInputProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(fabricName, protectionContainerName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to a add a protectable item to a protection container(Add physical server).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// The name of the fabric.
        /// </param>
        /// <param name='protectionContainerName'>
        /// The name of the protection container.
        /// </param>
        public static ProtectionContainer DiscoverProtectableItem(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, DiscoverProtectableItemRequestProperties properties = default(DiscoverProtectableItemRequestProperties))
        {
                return ((IReplicationProtectionContainersOperations)operations).DiscoverProtectableItemAsync(fabricName, protectionContainerName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to a add a protectable item to a protection container(Add physical server).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// The name of the fabric.
        /// </param>
        /// <param name='protectionContainerName'>
        /// The name of the protection container.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProtectionContainer> DiscoverProtectableItemAsync(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, DiscoverProtectableItemRequestProperties properties = default(DiscoverProtectableItemRequestProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DiscoverProtectableItemWithHttpMessagesAsync(fabricName, protectionContainerName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Operation to remove a protection container.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Unique fabric ARM name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Unique protection container ARM name.
        /// </param>
        public static void Delete(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName)
        {
                ((IReplicationProtectionContainersOperations)operations).DeleteAsync(fabricName, protectionContainerName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to remove a protection container.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Unique fabric ARM name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Unique protection container ARM name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(fabricName, protectionContainerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Operation to switch protection from one container to another or one replication provider to another.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Unique fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        public static ProtectionContainer SwitchProtection(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, SwitchProtectionInputProperties properties = default(SwitchProtectionInputProperties))
        {
                return ((IReplicationProtectionContainersOperations)operations).SwitchProtectionAsync(fabricName, protectionContainerName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to switch protection from one container to another or one replication provider to another.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Unique fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProtectionContainer> SwitchProtectionAsync(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, SwitchProtectionInputProperties properties = default(SwitchProtectionInputProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.SwitchProtectionWithHttpMessagesAsync(fabricName, protectionContainerName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the protection containers in a vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProtectionContainer> List(this IReplicationProtectionContainersOperations operations)
        {
                return ((IReplicationProtectionContainersOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the protection containers in a vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProtectionContainer>> ListAsync(this IReplicationProtectionContainersOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Operation to create a protection container.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Unique fabric ARM name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Unique protection container ARM name.
        /// </param>
        public static ProtectionContainer BeginCreate(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, CreateProtectionContainerInputProperties properties = default(CreateProtectionContainerInputProperties))
        {
                return ((IReplicationProtectionContainersOperations)operations).BeginCreateAsync(fabricName, protectionContainerName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to create a protection container.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Unique fabric ARM name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Unique protection container ARM name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProtectionContainer> BeginCreateAsync(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, CreateProtectionContainerInputProperties properties = default(CreateProtectionContainerInputProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateWithHttpMessagesAsync(fabricName, protectionContainerName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to a add a protectable item to a protection container(Add physical server).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// The name of the fabric.
        /// </param>
        /// <param name='protectionContainerName'>
        /// The name of the protection container.
        /// </param>
        public static ProtectionContainer BeginDiscoverProtectableItem(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, DiscoverProtectableItemRequestProperties properties = default(DiscoverProtectableItemRequestProperties))
        {
                return ((IReplicationProtectionContainersOperations)operations).BeginDiscoverProtectableItemAsync(fabricName, protectionContainerName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to a add a protectable item to a protection container(Add physical server).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// The name of the fabric.
        /// </param>
        /// <param name='protectionContainerName'>
        /// The name of the protection container.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProtectionContainer> BeginDiscoverProtectableItemAsync(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, DiscoverProtectableItemRequestProperties properties = default(DiscoverProtectableItemRequestProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDiscoverProtectableItemWithHttpMessagesAsync(fabricName, protectionContainerName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Operation to remove a protection container.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Unique fabric ARM name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Unique protection container ARM name.
        /// </param>
        public static void BeginDelete(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName)
        {
                ((IReplicationProtectionContainersOperations)operations).BeginDeleteAsync(fabricName, protectionContainerName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to remove a protection container.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Unique fabric ARM name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Unique protection container ARM name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(fabricName, protectionContainerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Operation to switch protection from one container to another or one replication provider to another.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Unique fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        public static ProtectionContainer BeginSwitchProtection(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, SwitchProtectionInputProperties properties = default(SwitchProtectionInputProperties))
        {
                return ((IReplicationProtectionContainersOperations)operations).BeginSwitchProtectionAsync(fabricName, protectionContainerName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Operation to switch protection from one container to another or one replication provider to another.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Unique fabric name.
        /// </param>
        /// <param name='protectionContainerName'>
        /// Protection container name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProtectionContainer> BeginSwitchProtectionAsync(this IReplicationProtectionContainersOperations operations, string fabricName, string protectionContainerName, SwitchProtectionInputProperties properties = default(SwitchProtectionInputProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginSwitchProtectionWithHttpMessagesAsync(fabricName, protectionContainerName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the protection containers in the specified fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProtectionContainer> ListByReplicationFabricsNext(this IReplicationProtectionContainersOperations operations, string nextPageLink)
        {
                return ((IReplicationProtectionContainersOperations)operations).ListByReplicationFabricsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the protection containers in the specified fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProtectionContainer>> ListByReplicationFabricsNextAsync(this IReplicationProtectionContainersOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByReplicationFabricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the protection containers in a vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProtectionContainer> ListNext(this IReplicationProtectionContainersOperations operations, string nextPageLink)
        {
                return ((IReplicationProtectionContainersOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the protection containers in a vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProtectionContainer>> ListNextAsync(this IReplicationProtectionContainersOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
