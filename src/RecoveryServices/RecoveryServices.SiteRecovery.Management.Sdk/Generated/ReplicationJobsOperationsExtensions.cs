// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ReplicationJobsOperations
    /// </summary>
    public static partial class ReplicationJobsOperationsExtensions
    {
        /// <summary>
        /// Gets the list of Azure Site Recovery Jobs for the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Job> List(this IReplicationJobsOperations operations, Microsoft.Rest.Azure.OData.ODataQuery<JobQueryParameter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<JobQueryParameter>))
        {
                return ((IReplicationJobsOperations)operations).ListAsync(odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of Azure Site Recovery Jobs for the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Job>> ListAsync(this IReplicationJobsOperations operations, Microsoft.Rest.Azure.OData.ODataQuery<JobQueryParameter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<JobQueryParameter>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get the details of an Azure Site Recovery job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='jobName'>
        /// Job identifier.
        /// </param>
        public static Job Get(this IReplicationJobsOperations operations, string jobName)
        {
                return ((IReplicationJobsOperations)operations).GetAsync(jobName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the details of an Azure Site Recovery job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='jobName'>
        /// Job identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Job> GetAsync(this IReplicationJobsOperations operations, string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(jobName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to cancel an Azure Site Recovery job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='jobName'>
        /// Job identifier.
        /// </param>
        public static Job Cancel(this IReplicationJobsOperations operations, string jobName)
        {
                return ((IReplicationJobsOperations)operations).CancelAsync(jobName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to cancel an Azure Site Recovery job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='jobName'>
        /// Job identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Job> CancelAsync(this IReplicationJobsOperations operations, string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CancelWithHttpMessagesAsync(jobName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to restart an Azure Site Recovery job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='jobName'>
        /// Job identifier.
        /// </param>
        public static Job Restart(this IReplicationJobsOperations operations, string jobName)
        {
                return ((IReplicationJobsOperations)operations).RestartAsync(jobName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to restart an Azure Site Recovery job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='jobName'>
        /// Job identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Job> RestartAsync(this IReplicationJobsOperations operations, string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.RestartWithHttpMessagesAsync(jobName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to resume an Azure Site Recovery job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='jobName'>
        /// Job identifier.
        /// </param>
        public static Job Resume(this IReplicationJobsOperations operations, string jobName, ResumeJobParamsProperties properties = default(ResumeJobParamsProperties))
        {
                return ((IReplicationJobsOperations)operations).ResumeAsync(jobName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to resume an Azure Site Recovery job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='jobName'>
        /// Job identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Job> ResumeAsync(this IReplicationJobsOperations operations, string jobName, ResumeJobParamsProperties properties = default(ResumeJobParamsProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ResumeWithHttpMessagesAsync(jobName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to export the details of the Azure Site Recovery jobs of the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Job Export(this IReplicationJobsOperations operations, JobQueryParameter jobQueryParameter)
        {
                return ((IReplicationJobsOperations)operations).ExportAsync(jobQueryParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to export the details of the Azure Site Recovery jobs of the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Job> ExportAsync(this IReplicationJobsOperations operations, JobQueryParameter jobQueryParameter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ExportWithHttpMessagesAsync(jobQueryParameter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to cancel an Azure Site Recovery job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='jobName'>
        /// Job identifier.
        /// </param>
        public static Job BeginCancel(this IReplicationJobsOperations operations, string jobName)
        {
                return ((IReplicationJobsOperations)operations).BeginCancelAsync(jobName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to cancel an Azure Site Recovery job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='jobName'>
        /// Job identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Job> BeginCancelAsync(this IReplicationJobsOperations operations, string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCancelWithHttpMessagesAsync(jobName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to restart an Azure Site Recovery job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='jobName'>
        /// Job identifier.
        /// </param>
        public static Job BeginRestart(this IReplicationJobsOperations operations, string jobName)
        {
                return ((IReplicationJobsOperations)operations).BeginRestartAsync(jobName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to restart an Azure Site Recovery job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='jobName'>
        /// Job identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Job> BeginRestartAsync(this IReplicationJobsOperations operations, string jobName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginRestartWithHttpMessagesAsync(jobName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to resume an Azure Site Recovery job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='jobName'>
        /// Job identifier.
        /// </param>
        public static Job BeginResume(this IReplicationJobsOperations operations, string jobName, ResumeJobParamsProperties properties = default(ResumeJobParamsProperties))
        {
                return ((IReplicationJobsOperations)operations).BeginResumeAsync(jobName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to resume an Azure Site Recovery job.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='jobName'>
        /// Job identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Job> BeginResumeAsync(this IReplicationJobsOperations operations, string jobName, ResumeJobParamsProperties properties = default(ResumeJobParamsProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginResumeWithHttpMessagesAsync(jobName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to export the details of the Azure Site Recovery jobs of the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Job BeginExport(this IReplicationJobsOperations operations, JobQueryParameter jobQueryParameter)
        {
                return ((IReplicationJobsOperations)operations).BeginExportAsync(jobQueryParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to export the details of the Azure Site Recovery jobs of the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Job> BeginExportAsync(this IReplicationJobsOperations operations, JobQueryParameter jobQueryParameter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginExportWithHttpMessagesAsync(jobQueryParameter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the list of Azure Site Recovery Jobs for the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Job> ListNext(this IReplicationJobsOperations operations, string nextPageLink)
        {
                return ((IReplicationJobsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of Azure Site Recovery Jobs for the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Job>> ListNextAsync(this IReplicationJobsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
