// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ReplicationFabricsOperations
    /// </summary>
    public static partial class ReplicationFabricsOperationsExtensions
    {
        /// <summary>
        /// Gets a list of the Azure Site Recovery fabrics in the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Fabric> List(this IReplicationFabricsOperations operations)
        {
                return ((IReplicationFabricsOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a list of the Azure Site Recovery fabrics in the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Fabric>> ListAsync(this IReplicationFabricsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the details of an Azure Site Recovery fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        public static Fabric Get(this IReplicationFabricsOperations operations, string fabricName, Microsoft.Rest.Azure.OData.ODataQuery<FabricQueryParameter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<FabricQueryParameter>))
        {
                return ((IReplicationFabricsOperations)operations).GetAsync(fabricName, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the details of an Azure Site Recovery fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Fabric> GetAsync(this IReplicationFabricsOperations operations, string fabricName, Microsoft.Rest.Azure.OData.ODataQuery<FabricQueryParameter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<FabricQueryParameter>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(fabricName, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Name of the ASR fabric.
        /// </param>
        public static Fabric Create(this IReplicationFabricsOperations operations, string fabricName, FabricCreationInputProperties properties = default(FabricCreationInputProperties))
        {
                return ((IReplicationFabricsOperations)operations).CreateAsync(fabricName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Name of the ASR fabric.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Fabric> CreateAsync(this IReplicationFabricsOperations operations, string fabricName, FabricCreationInputProperties properties = default(FabricCreationInputProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(fabricName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to purge(force delete) an Azure Site Recovery fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// ASR fabric to purge.
        /// </param>
        public static void Purge(this IReplicationFabricsOperations operations, string fabricName)
        {
                ((IReplicationFabricsOperations)operations).PurgeAsync(fabricName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to purge(force delete) an Azure Site Recovery fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// ASR fabric to purge.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task PurgeAsync(this IReplicationFabricsOperations operations, string fabricName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.PurgeWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The operation to perform a consistency check on the fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        public static Fabric CheckConsistency(this IReplicationFabricsOperations operations, string fabricName)
        {
                return ((IReplicationFabricsOperations)operations).CheckConsistencyAsync(fabricName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to perform a consistency check on the fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Fabric> CheckConsistencyAsync(this IReplicationFabricsOperations operations, string fabricName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckConsistencyWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to migrate an Azure Site Recovery fabric to AAD.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// ASR fabric to migrate.
        /// </param>
        public static void MigrateToAad(this IReplicationFabricsOperations operations, string fabricName)
        {
                ((IReplicationFabricsOperations)operations).MigrateToAadAsync(fabricName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to migrate an Azure Site Recovery fabric to AAD.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// ASR fabric to migrate.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task MigrateToAadAsync(this IReplicationFabricsOperations operations, string fabricName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.MigrateToAadWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The operation to move replications from a process server to another process server.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// The name of the fabric containing the process server.
        /// </param>
        public static Fabric ReassociateGateway(this IReplicationFabricsOperations operations, string fabricName, FailoverProcessServerRequestProperties properties = default(FailoverProcessServerRequestProperties))
        {
                return ((IReplicationFabricsOperations)operations).ReassociateGatewayAsync(fabricName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to move replications from a process server to another process server.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// The name of the fabric containing the process server.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Fabric> ReassociateGatewayAsync(this IReplicationFabricsOperations operations, string fabricName, FailoverProcessServerRequestProperties properties = default(FailoverProcessServerRequestProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ReassociateGatewayWithHttpMessagesAsync(fabricName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to delete or remove an Azure Site Recovery fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// ASR fabric to delete.
        /// </param>
        public static void Delete(this IReplicationFabricsOperations operations, string fabricName)
        {
                ((IReplicationFabricsOperations)operations).DeleteAsync(fabricName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to delete or remove an Azure Site Recovery fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// ASR fabric to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IReplicationFabricsOperations operations, string fabricName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Renews the connection certificate for the ASR replication fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// fabric name to renew certs for.
        /// </param>
        public static Fabric RenewCertificate(this IReplicationFabricsOperations operations, string fabricName, RenewCertificateInputProperties properties = default(RenewCertificateInputProperties))
        {
                return ((IReplicationFabricsOperations)operations).RenewCertificateAsync(fabricName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Renews the connection certificate for the ASR replication fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// fabric name to renew certs for.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Fabric> RenewCertificateAsync(this IReplicationFabricsOperations operations, string fabricName, RenewCertificateInputProperties properties = default(RenewCertificateInputProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.RenewCertificateWithHttpMessagesAsync(fabricName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Name of the ASR fabric.
        /// </param>
        public static Fabric BeginCreate(this IReplicationFabricsOperations operations, string fabricName, FabricCreationInputProperties properties = default(FabricCreationInputProperties))
        {
                return ((IReplicationFabricsOperations)operations).BeginCreateAsync(fabricName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Name of the ASR fabric.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Fabric> BeginCreateAsync(this IReplicationFabricsOperations operations, string fabricName, FabricCreationInputProperties properties = default(FabricCreationInputProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateWithHttpMessagesAsync(fabricName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to purge(force delete) an Azure Site Recovery fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// ASR fabric to purge.
        /// </param>
        public static void BeginPurge(this IReplicationFabricsOperations operations, string fabricName)
        {
                ((IReplicationFabricsOperations)operations).BeginPurgeAsync(fabricName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to purge(force delete) an Azure Site Recovery fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// ASR fabric to purge.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginPurgeAsync(this IReplicationFabricsOperations operations, string fabricName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginPurgeWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The operation to perform a consistency check on the fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        public static Fabric BeginCheckConsistency(this IReplicationFabricsOperations operations, string fabricName)
        {
                return ((IReplicationFabricsOperations)operations).BeginCheckConsistencyAsync(fabricName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to perform a consistency check on the fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// Fabric name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Fabric> BeginCheckConsistencyAsync(this IReplicationFabricsOperations operations, string fabricName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCheckConsistencyWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to migrate an Azure Site Recovery fabric to AAD.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// ASR fabric to migrate.
        /// </param>
        public static void BeginMigrateToAad(this IReplicationFabricsOperations operations, string fabricName)
        {
                ((IReplicationFabricsOperations)operations).BeginMigrateToAadAsync(fabricName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to migrate an Azure Site Recovery fabric to AAD.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// ASR fabric to migrate.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginMigrateToAadAsync(this IReplicationFabricsOperations operations, string fabricName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginMigrateToAadWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The operation to move replications from a process server to another process server.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// The name of the fabric containing the process server.
        /// </param>
        public static Fabric BeginReassociateGateway(this IReplicationFabricsOperations operations, string fabricName, FailoverProcessServerRequestProperties properties = default(FailoverProcessServerRequestProperties))
        {
                return ((IReplicationFabricsOperations)operations).BeginReassociateGatewayAsync(fabricName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to move replications from a process server to another process server.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// The name of the fabric containing the process server.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Fabric> BeginReassociateGatewayAsync(this IReplicationFabricsOperations operations, string fabricName, FailoverProcessServerRequestProperties properties = default(FailoverProcessServerRequestProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginReassociateGatewayWithHttpMessagesAsync(fabricName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The operation to delete or remove an Azure Site Recovery fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// ASR fabric to delete.
        /// </param>
        public static void BeginDelete(this IReplicationFabricsOperations operations, string fabricName)
        {
                ((IReplicationFabricsOperations)operations).BeginDeleteAsync(fabricName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The operation to delete or remove an Azure Site Recovery fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// ASR fabric to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IReplicationFabricsOperations operations, string fabricName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Renews the connection certificate for the ASR replication fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// fabric name to renew certs for.
        /// </param>
        public static Fabric BeginRenewCertificate(this IReplicationFabricsOperations operations, string fabricName, RenewCertificateInputProperties properties = default(RenewCertificateInputProperties))
        {
                return ((IReplicationFabricsOperations)operations).BeginRenewCertificateAsync(fabricName, properties).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Renews the connection certificate for the ASR replication fabric.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='fabricName'>
        /// fabric name to renew certs for.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Fabric> BeginRenewCertificateAsync(this IReplicationFabricsOperations operations, string fabricName, RenewCertificateInputProperties properties = default(RenewCertificateInputProperties), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginRenewCertificateWithHttpMessagesAsync(fabricName, properties, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a list of the Azure Site Recovery fabrics in the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Fabric> ListNext(this IReplicationFabricsOperations operations, string nextPageLink)
        {
                return ((IReplicationFabricsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a list of the Azure Site Recovery fabrics in the vault.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Fabric>> ListNextAsync(this IReplicationFabricsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
