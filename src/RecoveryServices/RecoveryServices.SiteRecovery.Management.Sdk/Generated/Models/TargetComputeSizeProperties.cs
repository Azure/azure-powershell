// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// Represents applicable recovery vm sizes properties.
    /// </summary>
    public partial class TargetComputeSizeProperties
    {
        /// <summary>
        /// Initializes a new instance of the TargetComputeSizeProperties class.
        /// </summary>
        public TargetComputeSizeProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TargetComputeSizeProperties class.
        /// </summary>

        /// <param name="name">Target compute size name.
        /// </param>

        /// <param name="friendlyName">Target compute size display name.
        /// </param>

        /// <param name="cpuCoresCount">The maximum cpu cores count supported by target compute size.
        /// </param>

        /// <param name="vCpUsAvailable">The Available vCPUs supported by target compute size.
        /// </param>

        /// <param name="memoryInGb">The maximum memory in GB supported by target compute size.
        /// </param>

        /// <param name="maxDataDiskCount">The maximum data disks count supported by target compute size.
        /// </param>

        /// <param name="maxNicsCount">The maximum Nics count supported by target compute size.
        /// </param>

        /// <param name="errors">The reasons why the target compute size is not applicable for the protected
        /// item.
        /// </param>

        /// <param name="highIopsSupported">The value indicating whether the target compute size supports high Iops.
        /// </param>

        /// <param name="hyperVGenerations">The supported HyperV Generations.
        /// </param>
        public TargetComputeSizeProperties(string name = default(string), string friendlyName = default(string), int? cpuCoresCount = default(int?), int? vCpUsAvailable = default(int?), double? memoryInGb = default(double?), int? maxDataDiskCount = default(int?), int? maxNicsCount = default(int?), System.Collections.Generic.IList<ComputeSizeErrorDetails> errors = default(System.Collections.Generic.IList<ComputeSizeErrorDetails>), string highIopsSupported = default(string), System.Collections.Generic.IList<string> hyperVGenerations = default(System.Collections.Generic.IList<string>))

        {
            this.Name = name;
            this.FriendlyName = friendlyName;
            this.CpuCoresCount = cpuCoresCount;
            this.VCpUsAvailable = vCpUsAvailable;
            this.MemoryInGb = memoryInGb;
            this.MaxDataDiskCount = maxDataDiskCount;
            this.MaxNicsCount = maxNicsCount;
            this.Errors = errors;
            this.HighIopsSupported = highIopsSupported;
            this.HyperVGenerations = hyperVGenerations;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets target compute size name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets target compute size display name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName {get; set; }

        /// <summary>
        /// Gets or sets the maximum cpu cores count supported by target compute size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cpuCoresCount")]
        public int? CpuCoresCount {get; set; }

        /// <summary>
        /// Gets the Available vCPUs supported by target compute size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vCPUsAvailable")]
        public int? VCpUsAvailable {get; private set; }

        /// <summary>
        /// Gets or sets the maximum memory in GB supported by target compute size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "memoryInGB")]
        public double? MemoryInGb {get; set; }

        /// <summary>
        /// Gets or sets the maximum data disks count supported by target compute size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxDataDiskCount")]
        public int? MaxDataDiskCount {get; set; }

        /// <summary>
        /// Gets or sets the maximum Nics count supported by target compute size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxNicsCount")]
        public int? MaxNicsCount {get; set; }

        /// <summary>
        /// Gets or sets the reasons why the target compute size is not applicable for
        /// the protected item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "errors")]
        public System.Collections.Generic.IList<ComputeSizeErrorDetails> Errors {get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether the target compute size supports
        /// high Iops.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "highIopsSupported")]
        public string HighIopsSupported {get; set; }

        /// <summary>
        /// Gets or sets the supported HyperV Generations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hyperVGenerations")]
        public System.Collections.Generic.IList<string> HyperVGenerations {get; set; }
    }
}