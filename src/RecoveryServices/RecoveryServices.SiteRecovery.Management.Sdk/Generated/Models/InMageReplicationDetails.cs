// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// InMage provider specific settings.
    /// </summary>
    [Newtonsoft.Json.JsonObject("InMage")]
    public partial class InMageReplicationDetails : ReplicationProviderSpecificSettings
    {
        /// <summary>
        /// Initializes a new instance of the InMageReplicationDetails class.
        /// </summary>
        public InMageReplicationDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InMageReplicationDetails class.
        /// </summary>

        /// <param name="activeSiteType">The active location of the VM. If the VM is being protected from Azure,
        /// this field will take values from { Azure, OnPrem }. If the VM is being
        /// protected between two data-centers, this field will be OnPrem always.
        /// </param>

        /// <param name="sourceVMCpuCount">The CPU count of the VM on the primary side.
        /// </param>

        /// <param name="sourceVMRamSizeInMb">The RAM size of the VM on the primary side.
        /// </param>

        /// <param name="osDetails">The OS details.
        /// </param>

        /// <param name="protectionStage">The protection stage.
        /// </param>

        /// <param name="vmId">The virtual machine Id.
        /// </param>

        /// <param name="vmProtectionState">The protection state for the vm.
        /// </param>

        /// <param name="vmProtectionStateDescription">The protection state description for the vm.
        /// </param>

        /// <param name="resyncDetails">The resync details of the machine.
        /// </param>

        /// <param name="retentionWindowStart">The retention window start time.
        /// </param>

        /// <param name="retentionWindowEnd">The retention window end time.
        /// </param>

        /// <param name="compressedDataRateInMb">The compressed data change rate in MB.
        /// </param>

        /// <param name="uncompressedDataRateInMb">The uncompressed data change rate in MB.
        /// </param>

        /// <param name="rpoInSeconds">The RPO in seconds.
        /// </param>

        /// <param name="protectedDisks">The list of protected disks.
        /// </param>

        /// <param name="ipAddress">The source IP address.
        /// </param>

        /// <param name="lastHeartbeat">The last heartbeat received from the source server.
        /// </param>

        /// <param name="processServerId">The process server Id.
        /// </param>

        /// <param name="masterTargetId">The master target Id.
        /// </param>

        /// <param name="consistencyPoints">The collection of Consistency points.
        /// </param>

        /// <param name="diskResized">A value indicating whether any disk is resized for this VM.
        /// </param>

        /// <param name="rebootAfterUpdateStatus">A value indicating whether the source server requires a restart after
        /// update.
        /// </param>

        /// <param name="multiVMGroupId">The multi vm group Id, if any.
        /// </param>

        /// <param name="multiVMGroupName">The multi vm group name, if any.
        /// </param>

        /// <param name="multiVMSyncStatus">A value indicating whether the multi vm sync is enabled or disabled.
        /// </param>

        /// <param name="agentDetails">The agent details.
        /// </param>

        /// <param name="vCenterInfrastructureId">The vCenter infrastructure Id.
        /// </param>

        /// <param name="infrastructureVMId">The infrastructure VM Id.
        /// </param>

        /// <param name="vmNics">The PE Network details.
        /// </param>

        /// <param name="discoveryType">A value indicating the discovery type of the machine.
        /// </param>

        /// <param name="azureStorageAccountId">A value indicating the underlying Azure storage account. If the VM is not
        /// running in Azure, this value shall be set to null.
        /// </param>

        /// <param name="datastores">The datastores of the on-premise machine Value can be list of strings that
        /// contain datastore names.
        /// </param>

        /// <param name="validationErrors">The validation errors of the on-premise machine Value can be list of
        /// validation errors.
        /// </param>

        /// <param name="lastRpoCalculatedTime">The last RPO calculated time.
        /// </param>

        /// <param name="lastUpdateReceivedTime">The last update time received from on-prem components.
        /// </param>

        /// <param name="replicaId">The replica id of the protected item.
        /// </param>

        /// <param name="osVersion">The OS Version of the protected item.
        /// </param>

        /// <param name="isAdditionalStatsAvailable">A value indicating whether additional IR stats are available or not.
        /// </param>

        /// <param name="totalDataTransferred">The total transferred data in bytes.
        /// </param>

        /// <param name="totalProgressHealth">The progress health.
        /// </param>
        public InMageReplicationDetails(string activeSiteType = default(string), int? sourceVMCpuCount = default(int?), int? sourceVMRamSizeInMb = default(int?), OSDiskDetails osDetails = default(OSDiskDetails), string protectionStage = default(string), string vmId = default(string), string vmProtectionState = default(string), string vmProtectionStateDescription = default(string), InitialReplicationDetails resyncDetails = default(InitialReplicationDetails), System.DateTime? retentionWindowStart = default(System.DateTime?), System.DateTime? retentionWindowEnd = default(System.DateTime?), double? compressedDataRateInMb = default(double?), double? uncompressedDataRateInMb = default(double?), long? rpoInSeconds = default(long?), System.Collections.Generic.IList<InMageProtectedDiskDetails> protectedDisks = default(System.Collections.Generic.IList<InMageProtectedDiskDetails>), string ipAddress = default(string), System.DateTime? lastHeartbeat = default(System.DateTime?), string processServerId = default(string), string masterTargetId = default(string), System.Collections.Generic.IDictionary<string, System.DateTime?> consistencyPoints = default(System.Collections.Generic.IDictionary<string, System.DateTime?>), string diskResized = default(string), string rebootAfterUpdateStatus = default(string), string multiVMGroupId = default(string), string multiVMGroupName = default(string), string multiVMSyncStatus = default(string), InMageAgentDetails agentDetails = default(InMageAgentDetails), string vCenterInfrastructureId = default(string), string infrastructureVMId = default(string), System.Collections.Generic.IList<VMNicDetails> vmNics = default(System.Collections.Generic.IList<VMNicDetails>), string discoveryType = default(string), string azureStorageAccountId = default(string), System.Collections.Generic.IList<string> datastores = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<HealthError> validationErrors = default(System.Collections.Generic.IList<HealthError>), System.DateTime? lastRpoCalculatedTime = default(System.DateTime?), System.DateTime? lastUpdateReceivedTime = default(System.DateTime?), string replicaId = default(string), string osVersion = default(string), bool? isAdditionalStatsAvailable = default(bool?), long? totalDataTransferred = default(long?), string totalProgressHealth = default(string))

        {
            this.ActiveSiteType = activeSiteType;
            this.SourceVMCpuCount = sourceVMCpuCount;
            this.SourceVMRamSizeInMb = sourceVMRamSizeInMb;
            this.OSDetails = osDetails;
            this.ProtectionStage = protectionStage;
            this.VMId = vmId;
            this.VMProtectionState = vmProtectionState;
            this.VMProtectionStateDescription = vmProtectionStateDescription;
            this.ResyncDetails = resyncDetails;
            this.RetentionWindowStart = retentionWindowStart;
            this.RetentionWindowEnd = retentionWindowEnd;
            this.CompressedDataRateInMb = compressedDataRateInMb;
            this.UncompressedDataRateInMb = uncompressedDataRateInMb;
            this.RpoInSeconds = rpoInSeconds;
            this.ProtectedDisks = protectedDisks;
            this.IPAddress = ipAddress;
            this.LastHeartbeat = lastHeartbeat;
            this.ProcessServerId = processServerId;
            this.MasterTargetId = masterTargetId;
            this.ConsistencyPoints = consistencyPoints;
            this.DiskResized = diskResized;
            this.RebootAfterUpdateStatus = rebootAfterUpdateStatus;
            this.MultiVMGroupId = multiVMGroupId;
            this.MultiVMGroupName = multiVMGroupName;
            this.MultiVMSyncStatus = multiVMSyncStatus;
            this.AgentDetails = agentDetails;
            this.VCenterInfrastructureId = vCenterInfrastructureId;
            this.InfrastructureVMId = infrastructureVMId;
            this.VMNics = vmNics;
            this.DiscoveryType = discoveryType;
            this.AzureStorageAccountId = azureStorageAccountId;
            this.Datastores = datastores;
            this.ValidationErrors = validationErrors;
            this.LastRpoCalculatedTime = lastRpoCalculatedTime;
            this.LastUpdateReceivedTime = lastUpdateReceivedTime;
            this.ReplicaId = replicaId;
            this.OSVersion = osVersion;
            this.IsAdditionalStatsAvailable = isAdditionalStatsAvailable;
            this.TotalDataTransferred = totalDataTransferred;
            this.TotalProgressHealth = totalProgressHealth;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the active location of the VM. If the VM is being protected
        /// from Azure, this field will take values from { Azure, OnPrem }. If the VM
        /// is being protected between two data-centers, this field will be OnPrem
        /// always.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "activeSiteType")]
        public string ActiveSiteType {get; set; }

        /// <summary>
        /// Gets or sets the CPU count of the VM on the primary side.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceVmCpuCount")]
        public int? SourceVMCpuCount {get; set; }

        /// <summary>
        /// Gets or sets the RAM size of the VM on the primary side.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceVmRamSizeInMB")]
        public int? SourceVMRamSizeInMb {get; set; }

        /// <summary>
        /// Gets or sets the OS details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osDetails")]
        public OSDiskDetails OSDetails {get; set; }

        /// <summary>
        /// Gets or sets the protection stage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectionStage")]
        public string ProtectionStage {get; set; }

        /// <summary>
        /// Gets or sets the virtual machine Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmId")]
        public string VMId {get; set; }

        /// <summary>
        /// Gets or sets the protection state for the vm.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmProtectionState")]
        public string VMProtectionState {get; set; }

        /// <summary>
        /// Gets or sets the protection state description for the vm.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmProtectionStateDescription")]
        public string VMProtectionStateDescription {get; set; }

        /// <summary>
        /// Gets or sets the resync details of the machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncDetails")]
        public InitialReplicationDetails ResyncDetails {get; set; }

        /// <summary>
        /// Gets or sets the retention window start time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "retentionWindowStart")]
        public System.DateTime? RetentionWindowStart {get; set; }

        /// <summary>
        /// Gets or sets the retention window end time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "retentionWindowEnd")]
        public System.DateTime? RetentionWindowEnd {get; set; }

        /// <summary>
        /// Gets or sets the compressed data change rate in MB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "compressedDataRateInMB")]
        public double? CompressedDataRateInMb {get; set; }

        /// <summary>
        /// Gets or sets the uncompressed data change rate in MB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uncompressedDataRateInMB")]
        public double? UncompressedDataRateInMb {get; set; }

        /// <summary>
        /// Gets or sets the RPO in seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rpoInSeconds")]
        public long? RpoInSeconds {get; set; }

        /// <summary>
        /// Gets or sets the list of protected disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectedDisks")]
        public System.Collections.Generic.IList<InMageProtectedDiskDetails> ProtectedDisks {get; set; }

        /// <summary>
        /// Gets or sets the source IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipAddress")]
        public string IPAddress {get; set; }

        /// <summary>
        /// Gets or sets the last heartbeat received from the source server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastHeartbeat")]
        public System.DateTime? LastHeartbeat {get; set; }

        /// <summary>
        /// Gets or sets the process server Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "processServerId")]
        public string ProcessServerId {get; set; }

        /// <summary>
        /// Gets or sets the master target Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "masterTargetId")]
        public string MasterTargetId {get; set; }

        /// <summary>
        /// Gets or sets the collection of Consistency points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "consistencyPoints")]
        public System.Collections.Generic.IDictionary<string, System.DateTime?> ConsistencyPoints {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether any disk is resized for this VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskResized")]
        public string DiskResized {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the source server requires a
        /// restart after update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rebootAfterUpdateStatus")]
        public string RebootAfterUpdateStatus {get; set; }

        /// <summary>
        /// Gets or sets the multi vm group Id, if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "multiVmGroupId")]
        public string MultiVMGroupId {get; set; }

        /// <summary>
        /// Gets or sets the multi vm group name, if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "multiVmGroupName")]
        public string MultiVMGroupName {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the multi vm sync is enabled or
        /// disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "multiVmSyncStatus")]
        public string MultiVMSyncStatus {get; set; }

        /// <summary>
        /// Gets or sets the agent details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentDetails")]
        public InMageAgentDetails AgentDetails {get; set; }

        /// <summary>
        /// Gets or sets the vCenter infrastructure Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vCenterInfrastructureId")]
        public string VCenterInfrastructureId {get; set; }

        /// <summary>
        /// Gets or sets the infrastructure VM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "infrastructureVmId")]
        public string InfrastructureVMId {get; set; }

        /// <summary>
        /// Gets or sets the PE Network details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmNics")]
        public System.Collections.Generic.IList<VMNicDetails> VMNics {get; set; }

        /// <summary>
        /// Gets or sets a value indicating the discovery type of the machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "discoveryType")]
        public string DiscoveryType {get; set; }

        /// <summary>
        /// Gets or sets a value indicating the underlying Azure storage account. If
        /// the VM is not running in Azure, this value shall be set to null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azureStorageAccountId")]
        public string AzureStorageAccountId {get; set; }

        /// <summary>
        /// Gets or sets the datastores of the on-premise machine Value can be list of
        /// strings that contain datastore names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "datastores")]
        public System.Collections.Generic.IList<string> Datastores {get; set; }

        /// <summary>
        /// Gets or sets the validation errors of the on-premise machine Value can be
        /// list of validation errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "validationErrors")]
        public System.Collections.Generic.IList<HealthError> ValidationErrors {get; set; }

        /// <summary>
        /// Gets or sets the last RPO calculated time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastRpoCalculatedTime")]
        public System.DateTime? LastRpoCalculatedTime {get; set; }

        /// <summary>
        /// Gets or sets the last update time received from on-prem components.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastUpdateReceivedTime")]
        public System.DateTime? LastUpdateReceivedTime {get; set; }

        /// <summary>
        /// Gets or sets the replica id of the protected item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "replicaId")]
        public string ReplicaId {get; set; }

        /// <summary>
        /// Gets or sets the OS Version of the protected item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osVersion")]
        public string OSVersion {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether additional IR stats are available
        /// or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isAdditionalStatsAvailable")]
        public bool? IsAdditionalStatsAvailable {get; set; }

        /// <summary>
        /// Gets or sets the total transferred data in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalDataTransferred")]
        public long? TotalDataTransferred {get; set; }

        /// <summary>
        /// Gets or sets the progress health.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalProgressHealth")]
        public string TotalProgressHealth {get; set; }
    }
}