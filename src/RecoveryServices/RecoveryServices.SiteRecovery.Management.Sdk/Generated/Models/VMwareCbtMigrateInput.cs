// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// VMwareCbt specific migrate input.
    /// </summary>
    [Newtonsoft.Json.JsonObject("VMwareCbt")]
    public partial class VMwareCbtMigrateInput : MigrateProviderSpecificInput
    {
        /// <summary>
        /// Initializes a new instance of the VMwareCbtMigrateInput class.
        /// </summary>
        public VMwareCbtMigrateInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VMwareCbtMigrateInput class.
        /// </summary>

        /// <param name="performShutdown">A value indicating whether VM is to be shutdown.
        /// </param>

        /// <param name="osUpgradeVersion">A value indicating the inplace OS Upgrade version.
        /// </param>
        public VMwareCbtMigrateInput(string performShutdown, string osUpgradeVersion = default(string))

        {
            this.PerformShutdown = performShutdown;
            this.OSUpgradeVersion = osUpgradeVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a value indicating whether VM is to be shutdown.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "performShutdown")]
        public string PerformShutdown {get; set; }

        /// <summary>
        /// Gets or sets a value indicating the inplace OS Upgrade version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osUpgradeVersion")]
        public string OSUpgradeVersion {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.PerformShutdown == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "PerformShutdown");
            }


        }
    }
}