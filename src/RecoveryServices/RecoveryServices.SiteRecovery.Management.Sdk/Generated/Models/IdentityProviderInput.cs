// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// Identity provider input.
    /// </summary>
    public partial class IdentityProviderInput
    {
        /// <summary>
        /// Initializes a new instance of the IdentityProviderInput class.
        /// </summary>
        public IdentityProviderInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IdentityProviderInput class.
        /// </summary>

        /// <param name="tenantId">The tenant Id for the service principal with which the on-premise
        /// management/data plane components would communicate with our Azure services.
        /// </param>

        /// <param name="applicationId">The application/client Id for the service principal with which the
        /// on-premise management/data plane components would communicate with our
        /// Azure services.
        /// </param>

        /// <param name="objectId">The object Id of the service principal with which the on-premise
        /// management/data plane components would communicate with our Azure services.
        /// </param>

        /// <param name="audience">The intended Audience of the service principal with which the on-premise
        /// management/data plane components would communicate with our Azure services.
        /// </param>

        /// <param name="aadAuthority">The base authority for Azure Active Directory authentication.
        /// </param>
        public IdentityProviderInput(string tenantId, string applicationId, string objectId, string audience, string aadAuthority)

        {
            this.TenantId = tenantId;
            this.ApplicationId = applicationId;
            this.ObjectId = objectId;
            this.Audience = audience;
            this.AadAuthority = aadAuthority;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the tenant Id for the service principal with which the
        /// on-premise management/data plane components would communicate with our
        /// Azure services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tenantId")]
        public string TenantId {get; set; }

        /// <summary>
        /// Gets or sets the application/client Id for the service principal with which
        /// the on-premise management/data plane components would communicate with our
        /// Azure services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "applicationId")]
        public string ApplicationId {get; set; }

        /// <summary>
        /// Gets or sets the object Id of the service principal with which the
        /// on-premise management/data plane components would communicate with our
        /// Azure services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "objectId")]
        public string ObjectId {get; set; }

        /// <summary>
        /// Gets or sets the intended Audience of the service principal with which the
        /// on-premise management/data plane components would communicate with our
        /// Azure services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "audience")]
        public string Audience {get; set; }

        /// <summary>
        /// Gets or sets the base authority for Azure Active Directory authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "aadAuthority")]
        public string AadAuthority {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.TenantId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TenantId");
            }
            if (this.ApplicationId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ApplicationId");
            }
            if (this.ObjectId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ObjectId");
            }
            if (this.Audience == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Audience");
            }
            if (this.AadAuthority == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AadAuthority");
            }





        }
    }
}