// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// InMageRcmFailback provider specific details.
    /// </summary>
    [Newtonsoft.Json.JsonObject("InMageRcmFailback")]
    public partial class InMageRcmFailbackReplicationDetails : ReplicationProviderSpecificSettings
    {
        /// <summary>
        /// Initializes a new instance of the InMageRcmFailbackReplicationDetails class.
        /// </summary>
        public InMageRcmFailbackReplicationDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InMageRcmFailbackReplicationDetails class.
        /// </summary>

        /// <param name="internalIdentifier">The virtual machine internal identifier.
        /// </param>

        /// <param name="azureVirtualMachineId">The ARM Id of the azure VM.
        /// </param>

        /// <param name="multiVMGroupName">The multi VM group name.
        /// </param>

        /// <param name="reprotectAgentId">The reprotect agent Id.
        /// </param>

        /// <param name="reprotectAgentName">The reprotect agent name.
        /// </param>

        /// <param name="osType">The type of the OS on the VM.
        /// </param>

        /// <param name="logStorageAccountId">The log storage account ARM Id.
        /// </param>

        /// <param name="targetvCenterId">The target vCenter Id.
        /// </param>

        /// <param name="targetDataStoreName">The target datastore name.
        /// </param>

        /// <param name="targetVMName">The target VM name.
        /// </param>

        /// <param name="initialReplicationProgressPercentage">The initial replication progress percentage.
        /// </param>

        /// <param name="initialReplicationProcessedBytes">The initial replication processed bytes. This includes sum of total bytes
        /// transferred and matched bytes on all selected disks in source VM.
        /// </param>

        /// <param name="initialReplicationTransferredBytes">The initial replication transferred bytes from source VM to target for all
        /// selected disks on source VM.
        /// </param>

        /// <param name="initialReplicationProgressHealth">The initial replication progress health.
        /// Possible values include: 'None', 'InProgress', 'SlowProgress', 'NoProgress'</param>

        /// <param name="resyncProgressPercentage">The resync progress percentage.
        /// </param>

        /// <param name="resyncProcessedBytes">The resync processed bytes. This includes sum of total bytes transferred
        /// and matched bytes on all selected disks in source VM.
        /// </param>

        /// <param name="resyncTransferredBytes">The resync transferred bytes from source VM to target for all selected
        /// disks on source VM.
        /// </param>

        /// <param name="resyncProgressHealth">The resync progress health.
        /// Possible values include: 'None', 'InProgress', 'SlowProgress', 'NoProgress'</param>

        /// <param name="resyncRequired">A value indicating whether resync is required.
        /// </param>

        /// <param name="resyncState">The resync state.
        /// Possible values include: 'None', 'PreparedForResynchronization',
        /// 'StartedResynchronization'</param>

        /// <param name="protectedDisks">The list of protected disks.
        /// </param>

        /// <param name="mobilityAgentDetails">The mobility agent information.
        /// </param>

        /// <param name="vmNics">The network details.
        /// </param>

        /// <param name="lastPlannedFailoverStartTime">The last planned failover start time.
        /// </param>

        /// <param name="lastPlannedFailoverStatus">The last planned failover status.
        /// Possible values include: 'Succeeded', 'Failed', 'Cancelled', 'Unknown'</param>

        /// <param name="discoveredVMDetails">The discovered VM information.
        /// </param>

        /// <param name="lastUsedPolicyId">The policy Id used by the forward replication.
        /// </param>

        /// <param name="lastUsedPolicyFriendlyName">The policy friendly name used by the forward replication.
        /// </param>

        /// <param name="isAgentRegistrationSuccessfulAfterFailover">A value indicating whether agent registration was successful after
        /// failover.
        /// </param>
        public InMageRcmFailbackReplicationDetails(string internalIdentifier = default(string), string azureVirtualMachineId = default(string), string multiVMGroupName = default(string), string reprotectAgentId = default(string), string reprotectAgentName = default(string), string osType = default(string), string logStorageAccountId = default(string), string targetvCenterId = default(string), string targetDataStoreName = default(string), string targetVMName = default(string), int? initialReplicationProgressPercentage = default(int?), long? initialReplicationProcessedBytes = default(long?), long? initialReplicationTransferredBytes = default(long?), string initialReplicationProgressHealth = default(string), int? resyncProgressPercentage = default(int?), long? resyncProcessedBytes = default(long?), long? resyncTransferredBytes = default(long?), string resyncProgressHealth = default(string), string resyncRequired = default(string), string resyncState = default(string), System.Collections.Generic.IList<InMageRcmFailbackProtectedDiskDetails> protectedDisks = default(System.Collections.Generic.IList<InMageRcmFailbackProtectedDiskDetails>), InMageRcmFailbackMobilityAgentDetails mobilityAgentDetails = default(InMageRcmFailbackMobilityAgentDetails), System.Collections.Generic.IList<InMageRcmFailbackNicDetails> vmNics = default(System.Collections.Generic.IList<InMageRcmFailbackNicDetails>), System.DateTime? lastPlannedFailoverStartTime = default(System.DateTime?), string lastPlannedFailoverStatus = default(string), InMageRcmFailbackDiscoveredProtectedVmDetails discoveredVMDetails = default(InMageRcmFailbackDiscoveredProtectedVmDetails), string lastUsedPolicyId = default(string), string lastUsedPolicyFriendlyName = default(string), bool? isAgentRegistrationSuccessfulAfterFailover = default(bool?))

        {
            this.InternalIdentifier = internalIdentifier;
            this.AzureVirtualMachineId = azureVirtualMachineId;
            this.MultiVMGroupName = multiVMGroupName;
            this.ReprotectAgentId = reprotectAgentId;
            this.ReprotectAgentName = reprotectAgentName;
            this.OSType = osType;
            this.LogStorageAccountId = logStorageAccountId;
            this.TargetvCenterId = targetvCenterId;
            this.TargetDataStoreName = targetDataStoreName;
            this.TargetVMName = targetVMName;
            this.InitialReplicationProgressPercentage = initialReplicationProgressPercentage;
            this.InitialReplicationProcessedBytes = initialReplicationProcessedBytes;
            this.InitialReplicationTransferredBytes = initialReplicationTransferredBytes;
            this.InitialReplicationProgressHealth = initialReplicationProgressHealth;
            this.ResyncProgressPercentage = resyncProgressPercentage;
            this.ResyncProcessedBytes = resyncProcessedBytes;
            this.ResyncTransferredBytes = resyncTransferredBytes;
            this.ResyncProgressHealth = resyncProgressHealth;
            this.ResyncRequired = resyncRequired;
            this.ResyncState = resyncState;
            this.ProtectedDisks = protectedDisks;
            this.MobilityAgentDetails = mobilityAgentDetails;
            this.VMNics = vmNics;
            this.LastPlannedFailoverStartTime = lastPlannedFailoverStartTime;
            this.LastPlannedFailoverStatus = lastPlannedFailoverStatus;
            this.DiscoveredVMDetails = discoveredVMDetails;
            this.LastUsedPolicyId = lastUsedPolicyId;
            this.LastUsedPolicyFriendlyName = lastUsedPolicyFriendlyName;
            this.IsAgentRegistrationSuccessfulAfterFailover = isAgentRegistrationSuccessfulAfterFailover;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the virtual machine internal identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "internalIdentifier")]
        public string InternalIdentifier {get; private set; }

        /// <summary>
        /// Gets the ARM Id of the azure VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azureVirtualMachineId")]
        public string AzureVirtualMachineId {get; private set; }

        /// <summary>
        /// Gets the multi VM group name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "multiVmGroupName")]
        public string MultiVMGroupName {get; private set; }

        /// <summary>
        /// Gets the reprotect agent Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reprotectAgentId")]
        public string ReprotectAgentId {get; private set; }

        /// <summary>
        /// Gets the reprotect agent name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reprotectAgentName")]
        public string ReprotectAgentName {get; private set; }

        /// <summary>
        /// Gets the type of the OS on the VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osType")]
        public string OSType {get; private set; }

        /// <summary>
        /// Gets the log storage account ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "logStorageAccountId")]
        public string LogStorageAccountId {get; private set; }

        /// <summary>
        /// Gets the target vCenter Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetvCenterId")]
        public string TargetvCenterId {get; private set; }

        /// <summary>
        /// Gets the target datastore name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetDataStoreName")]
        public string TargetDataStoreName {get; private set; }

        /// <summary>
        /// Gets the target VM name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmName")]
        public string TargetVMName {get; private set; }

        /// <summary>
        /// Gets the initial replication progress percentage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "initialReplicationProgressPercentage")]
        public int? InitialReplicationProgressPercentage {get; private set; }

        /// <summary>
        /// Gets the initial replication processed bytes. This includes sum of total
        /// bytes transferred and matched bytes on all selected disks in source VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "initialReplicationProcessedBytes")]
        public long? InitialReplicationProcessedBytes {get; private set; }

        /// <summary>
        /// Gets the initial replication transferred bytes from source VM to target for
        /// all selected disks on source VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "initialReplicationTransferredBytes")]
        public long? InitialReplicationTransferredBytes {get; private set; }

        /// <summary>
        /// Gets the initial replication progress health. Possible values include: &#39;None&#39;, &#39;InProgress&#39;, &#39;SlowProgress&#39;, &#39;NoProgress&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "initialReplicationProgressHealth")]
        public string InitialReplicationProgressHealth {get; private set; }

        /// <summary>
        /// Gets the resync progress percentage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncProgressPercentage")]
        public int? ResyncProgressPercentage {get; private set; }

        /// <summary>
        /// Gets the resync processed bytes. This includes sum of total bytes
        /// transferred and matched bytes on all selected disks in source VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncProcessedBytes")]
        public long? ResyncProcessedBytes {get; private set; }

        /// <summary>
        /// Gets the resync transferred bytes from source VM to target for all selected
        /// disks on source VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncTransferredBytes")]
        public long? ResyncTransferredBytes {get; private set; }

        /// <summary>
        /// Gets the resync progress health. Possible values include: &#39;None&#39;, &#39;InProgress&#39;, &#39;SlowProgress&#39;, &#39;NoProgress&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncProgressHealth")]
        public string ResyncProgressHealth {get; private set; }

        /// <summary>
        /// Gets a value indicating whether resync is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncRequired")]
        public string ResyncRequired {get; private set; }

        /// <summary>
        /// Gets the resync state. Possible values include: &#39;None&#39;, &#39;PreparedForResynchronization&#39;, &#39;StartedResynchronization&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncState")]
        public string ResyncState {get; private set; }

        /// <summary>
        /// Gets or sets the list of protected disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectedDisks")]
        public System.Collections.Generic.IList<InMageRcmFailbackProtectedDiskDetails> ProtectedDisks {get; set; }

        /// <summary>
        /// Gets or sets the mobility agent information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mobilityAgentDetails")]
        public InMageRcmFailbackMobilityAgentDetails MobilityAgentDetails {get; set; }

        /// <summary>
        /// Gets or sets the network details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmNics")]
        public System.Collections.Generic.IList<InMageRcmFailbackNicDetails> VMNics {get; set; }

        /// <summary>
        /// Gets the last planned failover start time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastPlannedFailoverStartTime")]
        public System.DateTime? LastPlannedFailoverStartTime {get; private set; }

        /// <summary>
        /// Gets the last planned failover status. Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Cancelled&#39;, &#39;Unknown&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastPlannedFailoverStatus")]
        public string LastPlannedFailoverStatus {get; private set; }

        /// <summary>
        /// Gets or sets the discovered VM information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "discoveredVmDetails")]
        public InMageRcmFailbackDiscoveredProtectedVmDetails DiscoveredVMDetails {get; set; }

        /// <summary>
        /// Gets the policy Id used by the forward replication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastUsedPolicyId")]
        public string LastUsedPolicyId {get; private set; }

        /// <summary>
        /// Gets the policy friendly name used by the forward replication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastUsedPolicyFriendlyName")]
        public string LastUsedPolicyFriendlyName {get; private set; }

        /// <summary>
        /// Gets a value indicating whether agent registration was successful after
        /// failover.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isAgentRegistrationSuccessfulAfterFailover")]
        public bool? IsAgentRegistrationSuccessfulAfterFailover {get; private set; }
    }
}