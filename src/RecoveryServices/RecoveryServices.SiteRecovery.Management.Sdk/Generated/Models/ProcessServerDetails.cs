// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// Process server details.
    /// </summary>
    public partial class ProcessServerDetails
    {
        /// <summary>
        /// Initializes a new instance of the ProcessServerDetails class.
        /// </summary>
        public ProcessServerDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProcessServerDetails class.
        /// </summary>

        /// <param name="id">The process server Id.
        /// </param>

        /// <param name="name">The process server name.
        /// </param>

        /// <param name="biosId">The process server Bios Id.
        /// </param>

        /// <param name="fabricObjectId">The fabric object Id.
        /// </param>

        /// <param name="fqdn">The process server Fqdn.
        /// </param>

        /// <param name="ipAddresses">The list of IP addresses for communicating with the RCM component.
        /// </param>

        /// <param name="version">The version.
        /// </param>

        /// <param name="lastHeartbeatUtc">The last heartbeat received from the process server.
        /// </param>

        /// <param name="totalMemoryInBytes">The total memory.
        /// </param>

        /// <param name="availableMemoryInBytes">The available memory.
        /// </param>

        /// <param name="usedMemoryInBytes">The used memory.
        /// </param>

        /// <param name="memoryUsagePercentage">The memory usage percentage.
        /// </param>

        /// <param name="totalSpaceInBytes">The total disk space.
        /// </param>

        /// <param name="availableSpaceInBytes">The available disk space.
        /// </param>

        /// <param name="usedSpaceInBytes">The used disk space.
        /// </param>

        /// <param name="freeSpacePercentage">The free disk space percentage.
        /// </param>

        /// <param name="throughputUploadPendingDataInBytes">The uploading pending data in bytes.
        /// </param>

        /// <param name="throughputInBytes">The throughput in bytes.
        /// </param>

        /// <param name="processorUsagePercentage">The processor usage percentage.
        /// </param>

        /// <param name="throughputStatus">The throughput status.
        /// Possible values include: 'Healthy', 'Warning', 'Critical', 'Unknown'</param>

        /// <param name="systemLoad">The system load.
        /// </param>

        /// <param name="systemLoadStatus">The system load status.
        /// Possible values include: 'Healthy', 'Warning', 'Critical', 'Unknown'</param>

        /// <param name="diskUsageStatus">The disk usage status.
        /// Possible values include: 'Healthy', 'Warning', 'Critical', 'Unknown'</param>

        /// <param name="memoryUsageStatus">The memory usage status.
        /// Possible values include: 'Healthy', 'Warning', 'Critical', 'Unknown'</param>

        /// <param name="processorUsageStatus">The processor usage status.
        /// Possible values include: 'Healthy', 'Warning', 'Critical', 'Unknown'</param>

        /// <param name="health">The health of the process server.
        /// Possible values include: 'None', 'Normal', 'Warning', 'Critical'</param>

        /// <param name="healthErrors">The health errors.
        /// </param>

        /// <param name="protectedItemCount">The protected item count.
        /// </param>

        /// <param name="historicHealth">The historic health of the process server based on the health in last 24
        /// hours.
        /// Possible values include: 'None', 'Normal', 'Warning', 'Critical'</param>
        public ProcessServerDetails(string id = default(string), string name = default(string), string biosId = default(string), string fabricObjectId = default(string), string fqdn = default(string), System.Collections.Generic.IList<string> ipAddresses = default(System.Collections.Generic.IList<string>), string version = default(string), System.DateTime? lastHeartbeatUtc = default(System.DateTime?), long? totalMemoryInBytes = default(long?), long? availableMemoryInBytes = default(long?), long? usedMemoryInBytes = default(long?), double? memoryUsagePercentage = default(double?), long? totalSpaceInBytes = default(long?), long? availableSpaceInBytes = default(long?), long? usedSpaceInBytes = default(long?), double? freeSpacePercentage = default(double?), long? throughputUploadPendingDataInBytes = default(long?), long? throughputInBytes = default(long?), double? processorUsagePercentage = default(double?), string throughputStatus = default(string), long? systemLoad = default(long?), string systemLoadStatus = default(string), string diskUsageStatus = default(string), string memoryUsageStatus = default(string), string processorUsageStatus = default(string), string health = default(string), System.Collections.Generic.IList<HealthError> healthErrors = default(System.Collections.Generic.IList<HealthError>), int? protectedItemCount = default(int?), string historicHealth = default(string))

        {
            this.Id = id;
            this.Name = name;
            this.BiosId = biosId;
            this.FabricObjectId = fabricObjectId;
            this.Fqdn = fqdn;
            this.IPAddresses = ipAddresses;
            this.Version = version;
            this.LastHeartbeatUtc = lastHeartbeatUtc;
            this.TotalMemoryInBytes = totalMemoryInBytes;
            this.AvailableMemoryInBytes = availableMemoryInBytes;
            this.UsedMemoryInBytes = usedMemoryInBytes;
            this.MemoryUsagePercentage = memoryUsagePercentage;
            this.TotalSpaceInBytes = totalSpaceInBytes;
            this.AvailableSpaceInBytes = availableSpaceInBytes;
            this.UsedSpaceInBytes = usedSpaceInBytes;
            this.FreeSpacePercentage = freeSpacePercentage;
            this.ThroughputUploadPendingDataInBytes = throughputUploadPendingDataInBytes;
            this.ThroughputInBytes = throughputInBytes;
            this.ProcessorUsagePercentage = processorUsagePercentage;
            this.ThroughputStatus = throughputStatus;
            this.SystemLoad = systemLoad;
            this.SystemLoadStatus = systemLoadStatus;
            this.DiskUsageStatus = diskUsageStatus;
            this.MemoryUsageStatus = memoryUsageStatus;
            this.ProcessorUsageStatus = processorUsageStatus;
            this.Health = health;
            this.HealthErrors = healthErrors;
            this.ProtectedItemCount = protectedItemCount;
            this.HistoricHealth = historicHealth;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the process server Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; private set; }

        /// <summary>
        /// Gets the process server name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; private set; }

        /// <summary>
        /// Gets the process server Bios Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "biosId")]
        public string BiosId {get; private set; }

        /// <summary>
        /// Gets the fabric object Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fabricObjectId")]
        public string FabricObjectId {get; private set; }

        /// <summary>
        /// Gets the process server Fqdn.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fqdn")]
        public string Fqdn {get; private set; }

        /// <summary>
        /// Gets the list of IP addresses for communicating with the RCM component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipAddresses")]
        public System.Collections.Generic.IList<string> IPAddresses {get; private set; }

        /// <summary>
        /// Gets the version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "version")]
        public string Version {get; private set; }

        /// <summary>
        /// Gets the last heartbeat received from the process server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastHeartbeatUtc")]
        public System.DateTime? LastHeartbeatUtc {get; private set; }

        /// <summary>
        /// Gets the total memory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalMemoryInBytes")]
        public long? TotalMemoryInBytes {get; private set; }

        /// <summary>
        /// Gets the available memory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "availableMemoryInBytes")]
        public long? AvailableMemoryInBytes {get; private set; }

        /// <summary>
        /// Gets the used memory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "usedMemoryInBytes")]
        public long? UsedMemoryInBytes {get; private set; }

        /// <summary>
        /// Gets the memory usage percentage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "memoryUsagePercentage")]
        public double? MemoryUsagePercentage {get; private set; }

        /// <summary>
        /// Gets the total disk space.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalSpaceInBytes")]
        public long? TotalSpaceInBytes {get; private set; }

        /// <summary>
        /// Gets the available disk space.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "availableSpaceInBytes")]
        public long? AvailableSpaceInBytes {get; private set; }

        /// <summary>
        /// Gets the used disk space.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "usedSpaceInBytes")]
        public long? UsedSpaceInBytes {get; private set; }

        /// <summary>
        /// Gets the free disk space percentage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "freeSpacePercentage")]
        public double? FreeSpacePercentage {get; private set; }

        /// <summary>
        /// Gets the uploading pending data in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "throughputUploadPendingDataInBytes")]
        public long? ThroughputUploadPendingDataInBytes {get; private set; }

        /// <summary>
        /// Gets the throughput in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "throughputInBytes")]
        public long? ThroughputInBytes {get; private set; }

        /// <summary>
        /// Gets the processor usage percentage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "processorUsagePercentage")]
        public double? ProcessorUsagePercentage {get; private set; }

        /// <summary>
        /// Gets the throughput status. Possible values include: &#39;Healthy&#39;, &#39;Warning&#39;, &#39;Critical&#39;, &#39;Unknown&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "throughputStatus")]
        public string ThroughputStatus {get; private set; }

        /// <summary>
        /// Gets the system load.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "systemLoad")]
        public long? SystemLoad {get; private set; }

        /// <summary>
        /// Gets the system load status. Possible values include: &#39;Healthy&#39;, &#39;Warning&#39;, &#39;Critical&#39;, &#39;Unknown&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "systemLoadStatus")]
        public string SystemLoadStatus {get; private set; }

        /// <summary>
        /// Gets the disk usage status. Possible values include: &#39;Healthy&#39;, &#39;Warning&#39;, &#39;Critical&#39;, &#39;Unknown&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskUsageStatus")]
        public string DiskUsageStatus {get; private set; }

        /// <summary>
        /// Gets the memory usage status. Possible values include: &#39;Healthy&#39;, &#39;Warning&#39;, &#39;Critical&#39;, &#39;Unknown&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "memoryUsageStatus")]
        public string MemoryUsageStatus {get; private set; }

        /// <summary>
        /// Gets the processor usage status. Possible values include: &#39;Healthy&#39;, &#39;Warning&#39;, &#39;Critical&#39;, &#39;Unknown&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "processorUsageStatus")]
        public string ProcessorUsageStatus {get; private set; }

        /// <summary>
        /// Gets the health of the process server. Possible values include: &#39;None&#39;, &#39;Normal&#39;, &#39;Warning&#39;, &#39;Critical&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "health")]
        public string Health {get; private set; }

        /// <summary>
        /// Gets the health errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "healthErrors")]
        public System.Collections.Generic.IList<HealthError> HealthErrors {get; private set; }

        /// <summary>
        /// Gets the protected item count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectedItemCount")]
        public int? ProtectedItemCount {get; private set; }

        /// <summary>
        /// Gets the historic health of the process server based on the health in last
        /// 24 hours. Possible values include: &#39;None&#39;, &#39;Normal&#39;, &#39;Warning&#39;, &#39;Critical&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "historicHealth")]
        public string HistoricHealth {get; private set; }
    }
}