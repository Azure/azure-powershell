// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// Store the fabric details specific to the VMware fabric.
    /// </summary>
    [Newtonsoft.Json.JsonObject("VMware")]
    public partial class VMwareDetails : FabricSpecificDetails
    {
        /// <summary>
        /// Initializes a new instance of the VMwareDetails class.
        /// </summary>
        public VMwareDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VMwareDetails class.
        /// </summary>

        /// <param name="processServers">The list of Process Servers associated with the fabric.
        /// </param>

        /// <param name="masterTargetServers">The list of Master Target servers associated with the fabric.
        /// </param>

        /// <param name="runAsAccounts">The list of run as accounts created on the server.
        /// </param>

        /// <param name="replicationPairCount">The number of replication pairs configured in this CS.
        /// </param>

        /// <param name="processServerCount">The number of process servers.
        /// </param>

        /// <param name="agentCount">The number of source and target servers configured to talk to this CS.
        /// </param>

        /// <param name="protectedServers">The number of protected servers.
        /// </param>

        /// <param name="systemLoad">The percentage of the system load.
        /// </param>

        /// <param name="systemLoadStatus">The system load status.
        /// </param>

        /// <param name="cpuLoad">The percentage of the CPU load.
        /// </param>

        /// <param name="cpuLoadStatus">The CPU load status.
        /// </param>

        /// <param name="totalMemoryInBytes">The total memory.
        /// </param>

        /// <param name="availableMemoryInBytes">The available memory.
        /// </param>

        /// <param name="memoryUsageStatus">The memory usage status.
        /// </param>

        /// <param name="totalSpaceInBytes">The total space.
        /// </param>

        /// <param name="availableSpaceInBytes">The available space.
        /// </param>

        /// <param name="spaceUsageStatus">The space usage status.
        /// </param>

        /// <param name="webLoad">The web load.
        /// </param>

        /// <param name="webLoadStatus">The web load status.
        /// </param>

        /// <param name="databaseServerLoad">The database server load.
        /// </param>

        /// <param name="databaseServerLoadStatus">The database server load status.
        /// </param>

        /// <param name="csServiceStatus">The CS service status.
        /// </param>

        /// <param name="ipAddress">The IP address.
        /// </param>

        /// <param name="agentVersion">The agent Version.
        /// </param>

        /// <param name="hostName">The host name.
        /// </param>

        /// <param name="lastHeartbeat">The last heartbeat received from CS server.
        /// </param>

        /// <param name="versionStatus">Version status.
        /// </param>

        /// <param name="sslCertExpiryDate">CS SSL cert expiry date.
        /// </param>

        /// <param name="sslCertExpiryRemainingDays">CS SSL cert expiry date.
        /// </param>

        /// <param name="psTemplateVersion">PS template version.
        /// </param>

        /// <param name="agentExpiryDate">Agent expiry date.
        /// </param>

        /// <param name="agentVersionDetails">The agent version details.
        /// </param>

        /// <param name="switchProviderBlockingErrorDetails">The switch provider blocking error information.
        /// </param>
        public VMwareDetails(System.Collections.Generic.IList<ProcessServer> processServers = default(System.Collections.Generic.IList<ProcessServer>), System.Collections.Generic.IList<MasterTargetServer> masterTargetServers = default(System.Collections.Generic.IList<MasterTargetServer>), System.Collections.Generic.IList<RunAsAccount> runAsAccounts = default(System.Collections.Generic.IList<RunAsAccount>), string replicationPairCount = default(string), string processServerCount = default(string), string agentCount = default(string), string protectedServers = default(string), string systemLoad = default(string), string systemLoadStatus = default(string), string cpuLoad = default(string), string cpuLoadStatus = default(string), long? totalMemoryInBytes = default(long?), long? availableMemoryInBytes = default(long?), string memoryUsageStatus = default(string), long? totalSpaceInBytes = default(long?), long? availableSpaceInBytes = default(long?), string spaceUsageStatus = default(string), string webLoad = default(string), string webLoadStatus = default(string), string databaseServerLoad = default(string), string databaseServerLoadStatus = default(string), string csServiceStatus = default(string), string ipAddress = default(string), string agentVersion = default(string), string hostName = default(string), System.DateTime? lastHeartbeat = default(System.DateTime?), string versionStatus = default(string), System.DateTime? sslCertExpiryDate = default(System.DateTime?), int? sslCertExpiryRemainingDays = default(int?), string psTemplateVersion = default(string), System.DateTime? agentExpiryDate = default(System.DateTime?), VersionDetails agentVersionDetails = default(VersionDetails), System.Collections.Generic.IList<InMageFabricSwitchProviderBlockingErrorDetails> switchProviderBlockingErrorDetails = default(System.Collections.Generic.IList<InMageFabricSwitchProviderBlockingErrorDetails>))

        {
            this.ProcessServers = processServers;
            this.MasterTargetServers = masterTargetServers;
            this.RunAsAccounts = runAsAccounts;
            this.ReplicationPairCount = replicationPairCount;
            this.ProcessServerCount = processServerCount;
            this.AgentCount = agentCount;
            this.ProtectedServers = protectedServers;
            this.SystemLoad = systemLoad;
            this.SystemLoadStatus = systemLoadStatus;
            this.CpuLoad = cpuLoad;
            this.CpuLoadStatus = cpuLoadStatus;
            this.TotalMemoryInBytes = totalMemoryInBytes;
            this.AvailableMemoryInBytes = availableMemoryInBytes;
            this.MemoryUsageStatus = memoryUsageStatus;
            this.TotalSpaceInBytes = totalSpaceInBytes;
            this.AvailableSpaceInBytes = availableSpaceInBytes;
            this.SpaceUsageStatus = spaceUsageStatus;
            this.WebLoad = webLoad;
            this.WebLoadStatus = webLoadStatus;
            this.DatabaseServerLoad = databaseServerLoad;
            this.DatabaseServerLoadStatus = databaseServerLoadStatus;
            this.CsServiceStatus = csServiceStatus;
            this.IPAddress = ipAddress;
            this.AgentVersion = agentVersion;
            this.HostName = hostName;
            this.LastHeartbeat = lastHeartbeat;
            this.VersionStatus = versionStatus;
            this.SslCertExpiryDate = sslCertExpiryDate;
            this.SslCertExpiryRemainingDays = sslCertExpiryRemainingDays;
            this.PsTemplateVersion = psTemplateVersion;
            this.AgentExpiryDate = agentExpiryDate;
            this.AgentVersionDetails = agentVersionDetails;
            this.SwitchProviderBlockingErrorDetails = switchProviderBlockingErrorDetails;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the list of Process Servers associated with the fabric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "processServers")]
        public System.Collections.Generic.IList<ProcessServer> ProcessServers {get; set; }

        /// <summary>
        /// Gets or sets the list of Master Target servers associated with the fabric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "masterTargetServers")]
        public System.Collections.Generic.IList<MasterTargetServer> MasterTargetServers {get; set; }

        /// <summary>
        /// Gets or sets the list of run as accounts created on the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runAsAccounts")]
        public System.Collections.Generic.IList<RunAsAccount> RunAsAccounts {get; set; }

        /// <summary>
        /// Gets or sets the number of replication pairs configured in this CS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "replicationPairCount")]
        public string ReplicationPairCount {get; set; }

        /// <summary>
        /// Gets or sets the number of process servers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "processServerCount")]
        public string ProcessServerCount {get; set; }

        /// <summary>
        /// Gets or sets the number of source and target servers configured to talk to
        /// this CS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentCount")]
        public string AgentCount {get; set; }

        /// <summary>
        /// Gets or sets the number of protected servers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectedServers")]
        public string ProtectedServers {get; set; }

        /// <summary>
        /// Gets or sets the percentage of the system load.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "systemLoad")]
        public string SystemLoad {get; set; }

        /// <summary>
        /// Gets or sets the system load status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "systemLoadStatus")]
        public string SystemLoadStatus {get; set; }

        /// <summary>
        /// Gets or sets the percentage of the CPU load.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cpuLoad")]
        public string CpuLoad {get; set; }

        /// <summary>
        /// Gets or sets the CPU load status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cpuLoadStatus")]
        public string CpuLoadStatus {get; set; }

        /// <summary>
        /// Gets or sets the total memory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalMemoryInBytes")]
        public long? TotalMemoryInBytes {get; set; }

        /// <summary>
        /// Gets or sets the available memory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "availableMemoryInBytes")]
        public long? AvailableMemoryInBytes {get; set; }

        /// <summary>
        /// Gets or sets the memory usage status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "memoryUsageStatus")]
        public string MemoryUsageStatus {get; set; }

        /// <summary>
        /// Gets or sets the total space.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalSpaceInBytes")]
        public long? TotalSpaceInBytes {get; set; }

        /// <summary>
        /// Gets or sets the available space.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "availableSpaceInBytes")]
        public long? AvailableSpaceInBytes {get; set; }

        /// <summary>
        /// Gets or sets the space usage status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "spaceUsageStatus")]
        public string SpaceUsageStatus {get; set; }

        /// <summary>
        /// Gets or sets the web load.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "webLoad")]
        public string WebLoad {get; set; }

        /// <summary>
        /// Gets or sets the web load status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "webLoadStatus")]
        public string WebLoadStatus {get; set; }

        /// <summary>
        /// Gets or sets the database server load.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseServerLoad")]
        public string DatabaseServerLoad {get; set; }

        /// <summary>
        /// Gets or sets the database server load status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseServerLoadStatus")]
        public string DatabaseServerLoadStatus {get; set; }

        /// <summary>
        /// Gets or sets the CS service status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "csServiceStatus")]
        public string CsServiceStatus {get; set; }

        /// <summary>
        /// Gets or sets the IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipAddress")]
        public string IPAddress {get; set; }

        /// <summary>
        /// Gets or sets the agent Version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentVersion")]
        public string AgentVersion {get; set; }

        /// <summary>
        /// Gets or sets the host name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostName")]
        public string HostName {get; set; }

        /// <summary>
        /// Gets or sets the last heartbeat received from CS server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastHeartbeat")]
        public System.DateTime? LastHeartbeat {get; set; }

        /// <summary>
        /// Gets or sets version status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "versionStatus")]
        public string VersionStatus {get; set; }

        /// <summary>
        /// Gets or sets cS SSL cert expiry date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sslCertExpiryDate")]
        public System.DateTime? SslCertExpiryDate {get; set; }

        /// <summary>
        /// Gets or sets cS SSL cert expiry date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sslCertExpiryRemainingDays")]
        public int? SslCertExpiryRemainingDays {get; set; }

        /// <summary>
        /// Gets or sets pS template version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "psTemplateVersion")]
        public string PsTemplateVersion {get; set; }

        /// <summary>
        /// Gets or sets agent expiry date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentExpiryDate")]
        public System.DateTime? AgentExpiryDate {get; set; }

        /// <summary>
        /// Gets or sets the agent version details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentVersionDetails")]
        public VersionDetails AgentVersionDetails {get; set; }

        /// <summary>
        /// Gets or sets the switch provider blocking error information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "switchProviderBlockingErrorDetails")]
        public System.Collections.Generic.IList<InMageFabricSwitchProviderBlockingErrorDetails> SwitchProviderBlockingErrorDetails {get; set; }
    }
}