// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// VMwareCbt provider specific settings.
    /// </summary>
    [Newtonsoft.Json.JsonObject("VMwareCbt")]
    public partial class VMwareCbtMigrationDetails : MigrationProviderSpecificSettings
    {
        /// <summary>
        /// Initializes a new instance of the VMwareCbtMigrationDetails class.
        /// </summary>
        public VMwareCbtMigrationDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VMwareCbtMigrationDetails class.
        /// </summary>

        /// <param name="vmwareMachineId">The ARM Id of the VM discovered in VMware.
        /// </param>

        /// <param name="osType">The type of the OS on the VM.
        /// </param>

        /// <param name="osName">The name of the OS on the VM.
        /// </param>

        /// <param name="firmwareType">The firmware type.
        /// </param>

        /// <param name="targetGeneration">The target generation.
        /// </param>

        /// <param name="licenseType">License Type of the VM to be used.
        /// </param>

        /// <param name="sqlServerLicenseType">The SQL Server license type.
        /// </param>

        /// <param name="dataMoverRunAsAccountId">The data mover run as account Id.
        /// </param>

        /// <param name="snapshotRunAsAccountId">The snapshot run as account Id.
        /// </param>

        /// <param name="storageAccountId">The replication storage account ARM Id. This is applicable only for the
        /// blob based replication test hook.
        /// </param>

        /// <param name="targetVMName">Target VM name.
        /// </param>

        /// <param name="targetVMSize">The target VM size.
        /// </param>

        /// <param name="targetLocation">The target location.
        /// </param>

        /// <param name="targetResourceGroupId">The target resource group Id.
        /// </param>

        /// <param name="targetAvailabilitySetId">The target availability set Id.
        /// </param>

        /// <param name="targetAvailabilityZone">The target availability zone.
        /// </param>

        /// <param name="targetProximityPlacementGroupId">The target proximity placement group Id.
        /// </param>

        /// <param name="confidentialVMKeyVaultId">The confidential VM key vault Id for ADE installation.
        /// </param>

        /// <param name="targetVMSecurityProfile">The target VM security profile.
        /// </param>

        /// <param name="targetBootDiagnosticsStorageAccountId">The target boot diagnostics storage account ARM Id.
        /// </param>

        /// <param name="targetVMTags">The target VM tags.
        /// </param>

        /// <param name="protectedDisks">The list of protected disks.
        /// </param>

        /// <param name="targetNetworkId">The target network Id.
        /// </param>

        /// <param name="testNetworkId">The test network Id.
        /// </param>

        /// <param name="vmNics">The network details.
        /// </param>

        /// <param name="targetNicTags">The tags for the target NICs.
        /// </param>

        /// <param name="migrationRecoveryPointId">The recovery point Id to which the VM was migrated.
        /// </param>

        /// <param name="lastRecoveryPointReceived">The last recovery point received time.
        /// </param>

        /// <param name="lastRecoveryPointId">The last recovery point Id.
        /// </param>

        /// <param name="initialSeedingProgressPercentage">The initial seeding progress percentage.
        /// </param>

        /// <param name="migrationProgressPercentage">The migration progress percentage.
        /// </param>

        /// <param name="resyncProgressPercentage">The resync progress percentage.
        /// </param>

        /// <param name="resumeProgressPercentage">The resume progress percentage.
        /// </param>

        /// <param name="initialSeedingRetryCount">The initial seeding retry count.
        /// </param>

        /// <param name="resyncRetryCount">The resync retry count.
        /// </param>

        /// <param name="resumeRetryCount">The resume retry count.
        /// </param>

        /// <param name="resyncRequired">A value indicating whether resync is required.
        /// </param>

        /// <param name="resyncState">The resync state.
        /// Possible values include: 'None', 'PreparedForResynchronization',
        /// 'StartedResynchronization'</param>

        /// <param name="performAutoResync">A value indicating whether auto resync is to be done.
        /// </param>

        /// <param name="seedDiskTags">The tags for the seed disks.
        /// </param>

        /// <param name="targetDiskTags">The tags for the target disks.
        /// </param>

        /// <param name="supportedOSVersions">List of supported inplace OS Upgrade versions.
        /// </param>
        public VMwareCbtMigrationDetails(string vmwareMachineId = default(string), string osType = default(string), string osName = default(string), string firmwareType = default(string), string targetGeneration = default(string), string licenseType = default(string), string sqlServerLicenseType = default(string), string dataMoverRunAsAccountId = default(string), string snapshotRunAsAccountId = default(string), string storageAccountId = default(string), string targetVMName = default(string), string targetVMSize = default(string), string targetLocation = default(string), string targetResourceGroupId = default(string), string targetAvailabilitySetId = default(string), string targetAvailabilityZone = default(string), string targetProximityPlacementGroupId = default(string), string confidentialVMKeyVaultId = default(string), VMwareCbtSecurityProfileProperties targetVMSecurityProfile = default(VMwareCbtSecurityProfileProperties), string targetBootDiagnosticsStorageAccountId = default(string), System.Collections.Generic.IDictionary<string, string> targetVMTags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IList<VMwareCbtProtectedDiskDetails> protectedDisks = default(System.Collections.Generic.IList<VMwareCbtProtectedDiskDetails>), string targetNetworkId = default(string), string testNetworkId = default(string), System.Collections.Generic.IList<VMwareCbtNicDetails> vmNics = default(System.Collections.Generic.IList<VMwareCbtNicDetails>), System.Collections.Generic.IDictionary<string, string> targetNicTags = default(System.Collections.Generic.IDictionary<string, string>), string migrationRecoveryPointId = default(string), System.DateTime? lastRecoveryPointReceived = default(System.DateTime?), string lastRecoveryPointId = default(string), int? initialSeedingProgressPercentage = default(int?), int? migrationProgressPercentage = default(int?), int? resyncProgressPercentage = default(int?), int? resumeProgressPercentage = default(int?), long? initialSeedingRetryCount = default(long?), long? resyncRetryCount = default(long?), long? resumeRetryCount = default(long?), string resyncRequired = default(string), string resyncState = default(string), string performAutoResync = default(string), System.Collections.Generic.IDictionary<string, string> seedDiskTags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> targetDiskTags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IList<string> supportedOSVersions = default(System.Collections.Generic.IList<string>))

        {
            this.VmwareMachineId = vmwareMachineId;
            this.OSType = osType;
            this.OSName = osName;
            this.FirmwareType = firmwareType;
            this.TargetGeneration = targetGeneration;
            this.LicenseType = licenseType;
            this.SqlServerLicenseType = sqlServerLicenseType;
            this.DataMoverRunAsAccountId = dataMoverRunAsAccountId;
            this.SnapshotRunAsAccountId = snapshotRunAsAccountId;
            this.StorageAccountId = storageAccountId;
            this.TargetVMName = targetVMName;
            this.TargetVMSize = targetVMSize;
            this.TargetLocation = targetLocation;
            this.TargetResourceGroupId = targetResourceGroupId;
            this.TargetAvailabilitySetId = targetAvailabilitySetId;
            this.TargetAvailabilityZone = targetAvailabilityZone;
            this.TargetProximityPlacementGroupId = targetProximityPlacementGroupId;
            this.ConfidentialVMKeyVaultId = confidentialVMKeyVaultId;
            this.TargetVMSecurityProfile = targetVMSecurityProfile;
            this.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountId;
            this.TargetVMTags = targetVMTags;
            this.ProtectedDisks = protectedDisks;
            this.TargetNetworkId = targetNetworkId;
            this.TestNetworkId = testNetworkId;
            this.VMNics = vmNics;
            this.TargetNicTags = targetNicTags;
            this.MigrationRecoveryPointId = migrationRecoveryPointId;
            this.LastRecoveryPointReceived = lastRecoveryPointReceived;
            this.LastRecoveryPointId = lastRecoveryPointId;
            this.InitialSeedingProgressPercentage = initialSeedingProgressPercentage;
            this.MigrationProgressPercentage = migrationProgressPercentage;
            this.ResyncProgressPercentage = resyncProgressPercentage;
            this.ResumeProgressPercentage = resumeProgressPercentage;
            this.InitialSeedingRetryCount = initialSeedingRetryCount;
            this.ResyncRetryCount = resyncRetryCount;
            this.ResumeRetryCount = resumeRetryCount;
            this.ResyncRequired = resyncRequired;
            this.ResyncState = resyncState;
            this.PerformAutoResync = performAutoResync;
            this.SeedDiskTags = seedDiskTags;
            this.TargetDiskTags = targetDiskTags;
            this.SupportedOSVersions = supportedOSVersions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the ARM Id of the VM discovered in VMware.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmwareMachineId")]
        public string VmwareMachineId {get; private set; }

        /// <summary>
        /// Gets the type of the OS on the VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osType")]
        public string OSType {get; private set; }

        /// <summary>
        /// Gets the name of the OS on the VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osName")]
        public string OSName {get; private set; }

        /// <summary>
        /// Gets the firmware type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "firmwareType")]
        public string FirmwareType {get; private set; }

        /// <summary>
        /// Gets the target generation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetGeneration")]
        public string TargetGeneration {get; private set; }

        /// <summary>
        /// Gets or sets license Type of the VM to be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "licenseType")]
        public string LicenseType {get; set; }

        /// <summary>
        /// Gets or sets the SQL Server license type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sqlServerLicenseType")]
        public string SqlServerLicenseType {get; set; }

        /// <summary>
        /// Gets the data mover run as account Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataMoverRunAsAccountId")]
        public string DataMoverRunAsAccountId {get; private set; }

        /// <summary>
        /// Gets the snapshot run as account Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "snapshotRunAsAccountId")]
        public string SnapshotRunAsAccountId {get; private set; }

        /// <summary>
        /// Gets the replication storage account ARM Id. This is applicable only for
        /// the blob based replication test hook.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageAccountId")]
        public string StorageAccountId {get; private set; }

        /// <summary>
        /// Gets or sets target VM name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmName")]
        public string TargetVMName {get; set; }

        /// <summary>
        /// Gets or sets the target VM size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmSize")]
        public string TargetVMSize {get; set; }

        /// <summary>
        /// Gets the target location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetLocation")]
        public string TargetLocation {get; private set; }

        /// <summary>
        /// Gets or sets the target resource group Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetResourceGroupId")]
        public string TargetResourceGroupId {get; set; }

        /// <summary>
        /// Gets or sets the target availability set Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetAvailabilitySetId")]
        public string TargetAvailabilitySetId {get; set; }

        /// <summary>
        /// Gets or sets the target availability zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetAvailabilityZone")]
        public string TargetAvailabilityZone {get; set; }

        /// <summary>
        /// Gets or sets the target proximity placement group Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetProximityPlacementGroupId")]
        public string TargetProximityPlacementGroupId {get; set; }

        /// <summary>
        /// Gets or sets the confidential VM key vault Id for ADE installation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "confidentialVmKeyVaultId")]
        public string ConfidentialVMKeyVaultId {get; set; }

        /// <summary>
        /// Gets or sets the target VM security profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmSecurityProfile")]
        public VMwareCbtSecurityProfileProperties TargetVMSecurityProfile {get; set; }

        /// <summary>
        /// Gets or sets the target boot diagnostics storage account ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetBootDiagnosticsStorageAccountId")]
        public string TargetBootDiagnosticsStorageAccountId {get; set; }

        /// <summary>
        /// Gets or sets the target VM tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmTags")]
        public System.Collections.Generic.IDictionary<string, string> TargetVMTags {get; set; }

        /// <summary>
        /// Gets or sets the list of protected disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectedDisks")]
        public System.Collections.Generic.IList<VMwareCbtProtectedDiskDetails> ProtectedDisks {get; set; }

        /// <summary>
        /// Gets or sets the target network Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetNetworkId")]
        public string TargetNetworkId {get; set; }

        /// <summary>
        /// Gets or sets the test network Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "testNetworkId")]
        public string TestNetworkId {get; set; }

        /// <summary>
        /// Gets or sets the network details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmNics")]
        public System.Collections.Generic.IList<VMwareCbtNicDetails> VMNics {get; set; }

        /// <summary>
        /// Gets or sets the tags for the target NICs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetNicTags")]
        public System.Collections.Generic.IDictionary<string, string> TargetNicTags {get; set; }

        /// <summary>
        /// Gets the recovery point Id to which the VM was migrated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "migrationRecoveryPointId")]
        public string MigrationRecoveryPointId {get; private set; }

        /// <summary>
        /// Gets the last recovery point received time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastRecoveryPointReceived")]
        public System.DateTime? LastRecoveryPointReceived {get; private set; }

        /// <summary>
        /// Gets the last recovery point Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastRecoveryPointId")]
        public string LastRecoveryPointId {get; private set; }

        /// <summary>
        /// Gets the initial seeding progress percentage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "initialSeedingProgressPercentage")]
        public int? InitialSeedingProgressPercentage {get; private set; }

        /// <summary>
        /// Gets the migration progress percentage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "migrationProgressPercentage")]
        public int? MigrationProgressPercentage {get; private set; }

        /// <summary>
        /// Gets the resync progress percentage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncProgressPercentage")]
        public int? ResyncProgressPercentage {get; private set; }

        /// <summary>
        /// Gets the resume progress percentage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resumeProgressPercentage")]
        public int? ResumeProgressPercentage {get; private set; }

        /// <summary>
        /// Gets the initial seeding retry count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "initialSeedingRetryCount")]
        public long? InitialSeedingRetryCount {get; private set; }

        /// <summary>
        /// Gets the resync retry count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncRetryCount")]
        public long? ResyncRetryCount {get; private set; }

        /// <summary>
        /// Gets the resume retry count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resumeRetryCount")]
        public long? ResumeRetryCount {get; private set; }

        /// <summary>
        /// Gets a value indicating whether resync is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncRequired")]
        public string ResyncRequired {get; private set; }

        /// <summary>
        /// Gets the resync state. Possible values include: &#39;None&#39;, &#39;PreparedForResynchronization&#39;, &#39;StartedResynchronization&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncState")]
        public string ResyncState {get; private set; }

        /// <summary>
        /// Gets or sets a value indicating whether auto resync is to be done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "performAutoResync")]
        public string PerformAutoResync {get; set; }

        /// <summary>
        /// Gets or sets the tags for the seed disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "seedDiskTags")]
        public System.Collections.Generic.IDictionary<string, string> SeedDiskTags {get; set; }

        /// <summary>
        /// Gets or sets the tags for the target disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetDiskTags")]
        public System.Collections.Generic.IDictionary<string, string> TargetDiskTags {get; set; }

        /// <summary>
        /// Gets or sets list of supported inplace OS Upgrade versions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supportedOSVersions")]
        public System.Collections.Generic.IList<string> SupportedOSVersions {get; set; }
    }
}