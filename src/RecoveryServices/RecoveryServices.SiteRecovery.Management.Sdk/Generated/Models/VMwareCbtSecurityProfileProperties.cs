// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// VMwareCbt security profile input.
    /// </summary>
    public partial class VMwareCbtSecurityProfileProperties
    {
        /// <summary>
        /// Initializes a new instance of the VMwareCbtSecurityProfileProperties class.
        /// </summary>
        public VMwareCbtSecurityProfileProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VMwareCbtSecurityProfileProperties class.
        /// </summary>

        /// <param name="targetVMSecurityType">The target VM security type.
        /// Possible values include: 'None', 'TrustedLaunch', 'ConfidentialVM'</param>

        /// <param name="isTargetVMSecureBootEnabled">A value indicating whether secure boot to be enabled.
        /// </param>

        /// <param name="isTargetVMTpmEnabled">A value indicating whether trusted platform module to be enabled.
        /// </param>

        /// <param name="isTargetVMIntegrityMonitoringEnabled">A value indicating whether integrity monitoring to be enabled.
        /// </param>

        /// <param name="isTargetVMConfidentialEncryptionEnabled">A value indicating whether confidential compute encryption to be enabled.
        /// </param>
        public VMwareCbtSecurityProfileProperties(string targetVMSecurityType = default(string), string isTargetVMSecureBootEnabled = default(string), string isTargetVMTpmEnabled = default(string), string isTargetVMIntegrityMonitoringEnabled = default(string), string isTargetVMConfidentialEncryptionEnabled = default(string))

        {
            this.TargetVMSecurityType = targetVMSecurityType;
            this.IsTargetVMSecureBootEnabled = isTargetVMSecureBootEnabled;
            this.IsTargetVMTpmEnabled = isTargetVMTpmEnabled;
            this.IsTargetVMIntegrityMonitoringEnabled = isTargetVMIntegrityMonitoringEnabled;
            this.IsTargetVMConfidentialEncryptionEnabled = isTargetVMConfidentialEncryptionEnabled;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the target VM security type. Possible values include: &#39;None&#39;, &#39;TrustedLaunch&#39;, &#39;ConfidentialVM&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmSecurityType")]
        public string TargetVMSecurityType {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether secure boot to be enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isTargetVmSecureBootEnabled")]
        public string IsTargetVMSecureBootEnabled {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether trusted platform module to be
        /// enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isTargetVmTpmEnabled")]
        public string IsTargetVMTpmEnabled {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether integrity monitoring to be enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isTargetVmIntegrityMonitoringEnabled")]
        public string IsTargetVMIntegrityMonitoringEnabled {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether confidential compute encryption to
        /// be enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isTargetVmConfidentialEncryptionEnabled")]
        public string IsTargetVMConfidentialEncryptionEnabled {get; set; }
    }
}