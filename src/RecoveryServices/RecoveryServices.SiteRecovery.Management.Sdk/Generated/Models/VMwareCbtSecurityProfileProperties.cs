// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// VMwareCbt security profile input.
    /// </summary>
    public partial class VMwareCbtSecurityProfileProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// VMwareCbtSecurityProfileProperties class.
        /// </summary>
        public VMwareCbtSecurityProfileProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// VMwareCbtSecurityProfileProperties class.
        /// </summary>
        /// <param name="targetVmSecurityType">The target VM security type.
        /// Possible values include: 'None', 'TrustedLaunch',
        /// 'ConfidentialVM'</param>
        /// <param name="isTargetVmSecureBootEnabled">A value indicating
        /// whether secure boot to be enabled.</param>
        /// <param name="isTargetVmTpmEnabled">A value indicating whether
        /// trusted platform module to be enabled.</param>
        /// <param name="isTargetVmIntegrityMonitoringEnabled">A value
        /// indicating whether integrity monitoring to be enabled.</param>
        /// <param name="isTargetVmConfidentialEncryptionEnabled">A value
        /// indicating whether confidential compute encryption to be
        /// enabled.</param>
        public VMwareCbtSecurityProfileProperties(string targetVmSecurityType = default(string), string isTargetVmSecureBootEnabled = default(string), string isTargetVmTpmEnabled = default(string), string isTargetVmIntegrityMonitoringEnabled = default(string), string isTargetVmConfidentialEncryptionEnabled = default(string))
        {
            TargetVmSecurityType = targetVmSecurityType;
            IsTargetVmSecureBootEnabled = isTargetVmSecureBootEnabled;
            IsTargetVmTpmEnabled = isTargetVmTpmEnabled;
            IsTargetVmIntegrityMonitoringEnabled = isTargetVmIntegrityMonitoringEnabled;
            IsTargetVmConfidentialEncryptionEnabled = isTargetVmConfidentialEncryptionEnabled;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the target VM security type. Possible values include:
        /// 'None', 'TrustedLaunch', 'ConfidentialVM'
        /// </summary>
        [JsonProperty(PropertyName = "targetVmSecurityType")]
        public string TargetVmSecurityType { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether secure boot to be enabled.
        /// </summary>
        [JsonProperty(PropertyName = "isTargetVmSecureBootEnabled")]
        public string IsTargetVmSecureBootEnabled { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether trusted platform module to
        /// be enabled.
        /// </summary>
        [JsonProperty(PropertyName = "isTargetVmTpmEnabled")]
        public string IsTargetVmTpmEnabled { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether integrity monitoring to be
        /// enabled.
        /// </summary>
        [JsonProperty(PropertyName = "isTargetVmIntegrityMonitoringEnabled")]
        public string IsTargetVmIntegrityMonitoringEnabled { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether confidential compute
        /// encryption to be enabled.
        /// </summary>
        [JsonProperty(PropertyName = "isTargetVmConfidentialEncryptionEnabled")]
        public string IsTargetVmConfidentialEncryptionEnabled { get; set; }

    }
}
