// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// A2A protected disk details.
    /// </summary>
    public partial class A2AProtectedDiskDetails
    {
        /// <summary>
        /// Initializes a new instance of the A2AProtectedDiskDetails class.
        /// </summary>
        public A2AProtectedDiskDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the A2AProtectedDiskDetails class.
        /// </summary>

        /// <param name="diskUri">The disk uri.
        /// </param>

        /// <param name="recoveryAzureStorageAccountId">The recovery disk storage account.
        /// </param>

        /// <param name="primaryDiskAzureStorageAccountId">The primary disk storage account.
        /// </param>

        /// <param name="recoveryDiskUri">Recovery disk uri.
        /// </param>

        /// <param name="diskName">The disk name.
        /// </param>

        /// <param name="diskCapacityInBytes">The disk capacity in bytes.
        /// </param>

        /// <param name="primaryStagingAzureStorageAccountId">The primary staging storage account.
        /// </param>

        /// <param name="diskType">The type of disk.
        /// </param>

        /// <param name="resyncRequired">A value indicating whether resync is required for this disk.
        /// </param>

        /// <param name="monitoringPercentageCompletion">The percentage of the monitoring job. The type of the monitoring job is
        /// defined by MonitoringJobType property.
        /// </param>

        /// <param name="monitoringJobType">The type of the monitoring job. The progress is contained in
        /// MonitoringPercentageCompletion property.
        /// </param>

        /// <param name="dataPendingInStagingStorageAccountInMb">The data pending for replication in MB at staging account.
        /// </param>

        /// <param name="dataPendingAtSourceAgentInMb">The data pending at source virtual machine in MB.
        /// </param>

        /// <param name="diskState">The disk state.
        /// </param>

        /// <param name="allowedDiskLevelOperation">The disk level operations list.
        /// </param>

        /// <param name="isDiskEncrypted">A value indicating whether vm has encrypted os disk or not.
        /// </param>

        /// <param name="secretIdentifier">The secret URL / identifier (BEK).
        /// </param>

        /// <param name="dekKeyVaultArmId">The KeyVault resource id for secret (BEK).
        /// </param>

        /// <param name="isDiskKeyEncrypted">A value indicating whether disk key got encrypted or not.
        /// </param>

        /// <param name="keyIdentifier">The key URL / identifier (KEK).
        /// </param>

        /// <param name="kekKeyVaultArmId">The KeyVault resource id for key (KEK).
        /// </param>

        /// <param name="failoverDiskName">The failover name for the managed disk.
        /// </param>

        /// <param name="tfoDiskName">The test failover name for the managed disk.
        /// </param>
        public A2AProtectedDiskDetails(string diskUri = default(string), string recoveryAzureStorageAccountId = default(string), string primaryDiskAzureStorageAccountId = default(string), string recoveryDiskUri = default(string), string diskName = default(string), long? diskCapacityInBytes = default(long?), string primaryStagingAzureStorageAccountId = default(string), string diskType = default(string), bool? resyncRequired = default(bool?), int? monitoringPercentageCompletion = default(int?), string monitoringJobType = default(string), double? dataPendingInStagingStorageAccountInMb = default(double?), double? dataPendingAtSourceAgentInMb = default(double?), string diskState = default(string), System.Collections.Generic.IList<string> allowedDiskLevelOperation = default(System.Collections.Generic.IList<string>), bool? isDiskEncrypted = default(bool?), string secretIdentifier = default(string), string dekKeyVaultArmId = default(string), bool? isDiskKeyEncrypted = default(bool?), string keyIdentifier = default(string), string kekKeyVaultArmId = default(string), string failoverDiskName = default(string), string tfoDiskName = default(string))

        {
            this.DiskUri = diskUri;
            this.RecoveryAzureStorageAccountId = recoveryAzureStorageAccountId;
            this.PrimaryDiskAzureStorageAccountId = primaryDiskAzureStorageAccountId;
            this.RecoveryDiskUri = recoveryDiskUri;
            this.DiskName = diskName;
            this.DiskCapacityInBytes = diskCapacityInBytes;
            this.PrimaryStagingAzureStorageAccountId = primaryStagingAzureStorageAccountId;
            this.DiskType = diskType;
            this.ResyncRequired = resyncRequired;
            this.MonitoringPercentageCompletion = monitoringPercentageCompletion;
            this.MonitoringJobType = monitoringJobType;
            this.DataPendingInStagingStorageAccountInMb = dataPendingInStagingStorageAccountInMb;
            this.DataPendingAtSourceAgentInMb = dataPendingAtSourceAgentInMb;
            this.DiskState = diskState;
            this.AllowedDiskLevelOperation = allowedDiskLevelOperation;
            this.IsDiskEncrypted = isDiskEncrypted;
            this.SecretIdentifier = secretIdentifier;
            this.DekKeyVaultArmId = dekKeyVaultArmId;
            this.IsDiskKeyEncrypted = isDiskKeyEncrypted;
            this.KeyIdentifier = keyIdentifier;
            this.KekKeyVaultArmId = kekKeyVaultArmId;
            this.FailoverDiskName = failoverDiskName;
            this.TfoDiskName = tfoDiskName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the disk uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskUri")]
        public string DiskUri {get; set; }

        /// <summary>
        /// Gets or sets the recovery disk storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recoveryAzureStorageAccountId")]
        public string RecoveryAzureStorageAccountId {get; set; }

        /// <summary>
        /// Gets or sets the primary disk storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryDiskAzureStorageAccountId")]
        public string PrimaryDiskAzureStorageAccountId {get; set; }

        /// <summary>
        /// Gets or sets recovery disk uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recoveryDiskUri")]
        public string RecoveryDiskUri {get; set; }

        /// <summary>
        /// Gets or sets the disk name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskName")]
        public string DiskName {get; set; }

        /// <summary>
        /// Gets or sets the disk capacity in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskCapacityInBytes")]
        public long? DiskCapacityInBytes {get; set; }

        /// <summary>
        /// Gets or sets the primary staging storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryStagingAzureStorageAccountId")]
        public string PrimaryStagingAzureStorageAccountId {get; set; }

        /// <summary>
        /// Gets or sets the type of disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskType")]
        public string DiskType {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether resync is required for this disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncRequired")]
        public bool? ResyncRequired {get; set; }

        /// <summary>
        /// Gets or sets the percentage of the monitoring job. The type of the
        /// monitoring job is defined by MonitoringJobType property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "monitoringPercentageCompletion")]
        public int? MonitoringPercentageCompletion {get; set; }

        /// <summary>
        /// Gets or sets the type of the monitoring job. The progress is contained in
        /// MonitoringPercentageCompletion property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "monitoringJobType")]
        public string MonitoringJobType {get; set; }

        /// <summary>
        /// Gets or sets the data pending for replication in MB at staging account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataPendingInStagingStorageAccountInMB")]
        public double? DataPendingInStagingStorageAccountInMb {get; set; }

        /// <summary>
        /// Gets or sets the data pending at source virtual machine in MB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataPendingAtSourceAgentInMB")]
        public double? DataPendingAtSourceAgentInMb {get; set; }

        /// <summary>
        /// Gets or sets the disk state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskState")]
        public string DiskState {get; set; }

        /// <summary>
        /// Gets or sets the disk level operations list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowedDiskLevelOperation")]
        public System.Collections.Generic.IList<string> AllowedDiskLevelOperation {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether vm has encrypted os disk or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isDiskEncrypted")]
        public bool? IsDiskEncrypted {get; set; }

        /// <summary>
        /// Gets or sets the secret URL / identifier (BEK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "secretIdentifier")]
        public string SecretIdentifier {get; set; }

        /// <summary>
        /// Gets or sets the KeyVault resource id for secret (BEK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dekKeyVaultArmId")]
        public string DekKeyVaultArmId {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether disk key got encrypted or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isDiskKeyEncrypted")]
        public bool? IsDiskKeyEncrypted {get; set; }

        /// <summary>
        /// Gets or sets the key URL / identifier (KEK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keyIdentifier")]
        public string KeyIdentifier {get; set; }

        /// <summary>
        /// Gets or sets the KeyVault resource id for key (KEK).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "kekKeyVaultArmId")]
        public string KekKeyVaultArmId {get; set; }

        /// <summary>
        /// Gets or sets the failover name for the managed disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failoverDiskName")]
        public string FailoverDiskName {get; set; }

        /// <summary>
        /// Gets or sets the test failover name for the managed disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tfoDiskName")]
        public string TfoDiskName {get; set; }
    }
}