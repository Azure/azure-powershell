// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// HyperV replica Azure input to update replication protected item.
    /// </summary>
    [Newtonsoft.Json.JsonObject("HyperVReplicaAzure")]
    public partial class HyperVReplicaAzureUpdateReplicationProtectedItemInput : UpdateReplicationProtectedItemProviderInput
    {
        /// <summary>
        /// Initializes a new instance of the HyperVReplicaAzureUpdateReplicationProtectedItemInput class.
        /// </summary>
        public HyperVReplicaAzureUpdateReplicationProtectedItemInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HyperVReplicaAzureUpdateReplicationProtectedItemInput class.
        /// </summary>

        /// <param name="recoveryAzureV1ResourceGroupId">The recovery Azure resource group Id for classic deployment.
        /// </param>

        /// <param name="recoveryAzureV2ResourceGroupId">The recovery Azure resource group Id for resource manager deployment.
        /// </param>

        /// <param name="useManagedDisks">A value indicating whether managed disks should be used during failover.
        /// </param>

        /// <param name="diskIdToDiskEncryptionMap">The dictionary of disk resource Id to disk encryption set ARM Id.
        /// </param>

        /// <param name="targetProximityPlacementGroupId">The target proximity placement group Id.
        /// </param>

        /// <param name="targetAvailabilityZone">The target availability zone.
        /// </param>

        /// <param name="targetVMTags">The target VM tags.
        /// </param>

        /// <param name="targetManagedDiskTags">The tags for the target managed disks.
        /// </param>

        /// <param name="targetNicTags">The tags for the target NICs.
        /// </param>

        /// <param name="sqlServerLicenseType">The SQL Server license type.
        /// Possible values include: 'NotSpecified', 'NoLicenseType', 'PAYG', 'AHUB'</param>

        /// <param name="vmDisks">The list of disk update properties.
        /// </param>
        public HyperVReplicaAzureUpdateReplicationProtectedItemInput(string recoveryAzureV1ResourceGroupId = default(string), string recoveryAzureV2ResourceGroupId = default(string), string useManagedDisks = default(string), System.Collections.Generic.IDictionary<string, string> diskIdToDiskEncryptionMap = default(System.Collections.Generic.IDictionary<string, string>), string targetProximityPlacementGroupId = default(string), string targetAvailabilityZone = default(string), System.Collections.Generic.IDictionary<string, string> targetVMTags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> targetManagedDiskTags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> targetNicTags = default(System.Collections.Generic.IDictionary<string, string>), string sqlServerLicenseType = default(string), System.Collections.Generic.IList<UpdateDiskInput> vmDisks = default(System.Collections.Generic.IList<UpdateDiskInput>))

        {
            this.RecoveryAzureV1ResourceGroupId = recoveryAzureV1ResourceGroupId;
            this.RecoveryAzureV2ResourceGroupId = recoveryAzureV2ResourceGroupId;
            this.UseManagedDisks = useManagedDisks;
            this.DiskIdToDiskEncryptionMap = diskIdToDiskEncryptionMap;
            this.TargetProximityPlacementGroupId = targetProximityPlacementGroupId;
            this.TargetAvailabilityZone = targetAvailabilityZone;
            this.TargetVMTags = targetVMTags;
            this.TargetManagedDiskTags = targetManagedDiskTags;
            this.TargetNicTags = targetNicTags;
            this.SqlServerLicenseType = sqlServerLicenseType;
            this.VMDisks = vmDisks;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the recovery Azure resource group Id for classic deployment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recoveryAzureV1ResourceGroupId")]
        public string RecoveryAzureV1ResourceGroupId {get; set; }

        /// <summary>
        /// Gets or sets the recovery Azure resource group Id for resource manager
        /// deployment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recoveryAzureV2ResourceGroupId")]
        public string RecoveryAzureV2ResourceGroupId {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether managed disks should be used during
        /// failover.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "useManagedDisks")]
        public string UseManagedDisks {get; set; }

        /// <summary>
        /// Gets or sets the dictionary of disk resource Id to disk encryption set ARM
        /// Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskIdToDiskEncryptionMap")]
        public System.Collections.Generic.IDictionary<string, string> DiskIdToDiskEncryptionMap {get; set; }

        /// <summary>
        /// Gets or sets the target proximity placement group Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetProximityPlacementGroupId")]
        public string TargetProximityPlacementGroupId {get; set; }

        /// <summary>
        /// Gets or sets the target availability zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetAvailabilityZone")]
        public string TargetAvailabilityZone {get; set; }

        /// <summary>
        /// Gets or sets the target VM tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmTags")]
        public System.Collections.Generic.IDictionary<string, string> TargetVMTags {get; set; }

        /// <summary>
        /// Gets or sets the tags for the target managed disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetManagedDiskTags")]
        public System.Collections.Generic.IDictionary<string, string> TargetManagedDiskTags {get; set; }

        /// <summary>
        /// Gets or sets the tags for the target NICs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetNicTags")]
        public System.Collections.Generic.IDictionary<string, string> TargetNicTags {get; set; }

        /// <summary>
        /// Gets or sets the SQL Server license type. Possible values include: &#39;NotSpecified&#39;, &#39;NoLicenseType&#39;, &#39;PAYG&#39;, &#39;AHUB&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sqlServerLicenseType")]
        public string SqlServerLicenseType {get; set; }

        /// <summary>
        /// Gets or sets the list of disk update properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmDisks")]
        public System.Collections.Generic.IList<UpdateDiskInput> VMDisks {get; set; }
    }
}