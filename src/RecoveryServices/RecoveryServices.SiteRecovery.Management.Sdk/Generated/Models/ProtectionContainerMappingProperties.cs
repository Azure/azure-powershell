// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// Protection container mapping properties.
    /// </summary>
    public partial class ProtectionContainerMappingProperties
    {
        /// <summary>
        /// Initializes a new instance of the ProtectionContainerMappingProperties class.
        /// </summary>
        public ProtectionContainerMappingProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProtectionContainerMappingProperties class.
        /// </summary>

        /// <param name="targetProtectionContainerId">Paired protection container ARM ID.
        /// </param>

        /// <param name="targetProtectionContainerFriendlyName">Friendly name of paired container.
        /// </param>

        /// <param name="providerSpecificDetails">Provider specific provider details.
        /// </param>

        /// <param name="health">Health of pairing.
        /// </param>

        /// <param name="healthErrorDetails">Health error.
        /// </param>

        /// <param name="policyId">Policy ARM Id.
        /// </param>

        /// <param name="state">Association Status.
        /// </param>

        /// <param name="sourceProtectionContainerFriendlyName">Friendly name of source protection container.
        /// </param>

        /// <param name="sourceFabricFriendlyName">Friendly name of source fabric.
        /// </param>

        /// <param name="targetFabricFriendlyName">Friendly name of target fabric.
        /// </param>

        /// <param name="policyFriendlyName">Friendly name of replication policy.
        /// </param>
        public ProtectionContainerMappingProperties(string targetProtectionContainerId = default(string), string targetProtectionContainerFriendlyName = default(string), ProtectionContainerMappingProviderSpecificDetails providerSpecificDetails = default(ProtectionContainerMappingProviderSpecificDetails), string health = default(string), System.Collections.Generic.IList<HealthError> healthErrorDetails = default(System.Collections.Generic.IList<HealthError>), string policyId = default(string), string state = default(string), string sourceProtectionContainerFriendlyName = default(string), string sourceFabricFriendlyName = default(string), string targetFabricFriendlyName = default(string), string policyFriendlyName = default(string))

        {
            this.TargetProtectionContainerId = targetProtectionContainerId;
            this.TargetProtectionContainerFriendlyName = targetProtectionContainerFriendlyName;
            this.ProviderSpecificDetails = providerSpecificDetails;
            this.Health = health;
            this.HealthErrorDetails = healthErrorDetails;
            this.PolicyId = policyId;
            this.State = state;
            this.SourceProtectionContainerFriendlyName = sourceProtectionContainerFriendlyName;
            this.SourceFabricFriendlyName = sourceFabricFriendlyName;
            this.TargetFabricFriendlyName = targetFabricFriendlyName;
            this.PolicyFriendlyName = policyFriendlyName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets paired protection container ARM ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetProtectionContainerId")]
        public string TargetProtectionContainerId {get; set; }

        /// <summary>
        /// Gets or sets friendly name of paired container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetProtectionContainerFriendlyName")]
        public string TargetProtectionContainerFriendlyName {get; set; }

        /// <summary>
        /// Gets or sets provider specific provider details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "providerSpecificDetails")]
        public ProtectionContainerMappingProviderSpecificDetails ProviderSpecificDetails {get; set; }

        /// <summary>
        /// Gets or sets health of pairing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "health")]
        public string Health {get; set; }

        /// <summary>
        /// Gets or sets health error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "healthErrorDetails")]
        public System.Collections.Generic.IList<HealthError> HealthErrorDetails {get; set; }

        /// <summary>
        /// Gets or sets policy ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyId")]
        public string PolicyId {get; set; }

        /// <summary>
        /// Gets or sets association Status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; set; }

        /// <summary>
        /// Gets or sets friendly name of source protection container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceProtectionContainerFriendlyName")]
        public string SourceProtectionContainerFriendlyName {get; set; }

        /// <summary>
        /// Gets or sets friendly name of source fabric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceFabricFriendlyName")]
        public string SourceFabricFriendlyName {get; set; }

        /// <summary>
        /// Gets or sets friendly name of target fabric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetFabricFriendlyName")]
        public string TargetFabricFriendlyName {get; set; }

        /// <summary>
        /// Gets or sets friendly name of replication policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyFriendlyName")]
        public string PolicyFriendlyName {get; set; }
    }
}