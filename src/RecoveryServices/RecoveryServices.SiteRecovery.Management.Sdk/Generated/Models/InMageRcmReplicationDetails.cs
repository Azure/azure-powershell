// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// InMageRcm provider specific details.
    /// </summary>
    [Newtonsoft.Json.JsonObject("InMageRcm")]
    public partial class InMageRcmReplicationDetails : ReplicationProviderSpecificSettings
    {
        /// <summary>
        /// Initializes a new instance of the InMageRcmReplicationDetails class.
        /// </summary>
        public InMageRcmReplicationDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InMageRcmReplicationDetails class.
        /// </summary>

        /// <param name="internalIdentifier">The virtual machine internal identifier.
        /// </param>

        /// <param name="fabricDiscoveryMachineId">The ARM Id of the discovered VM.
        /// </param>

        /// <param name="multiVMGroupName">The multi VM group name.
        /// </param>

        /// <param name="discoveryType">The type of the discovered VM.
        /// </param>

        /// <param name="processServerId">The process server Id.
        /// </param>

        /// <param name="processorCoreCount">The processor core count.
        /// </param>

        /// <param name="allocatedMemoryInMb">The allocated memory in MB.
        /// </param>

        /// <param name="processServerName">The process server name.
        /// </param>

        /// <param name="runAsAccountId">The run-as account Id.
        /// </param>

        /// <param name="osType">The type of the OS on the VM.
        /// </param>

        /// <param name="firmwareType">The firmware type.
        /// </param>

        /// <param name="primaryNicIPAddress">The IP address of the primary network interface.
        /// </param>

        /// <param name="targetGeneration">The target generation.
        /// </param>

        /// <param name="licenseType">License Type of the VM to be used.
        /// </param>

        /// <param name="storageAccountId">The replication storage account ARM Id. This is applicable only for the
        /// blob based replication test hook.
        /// </param>

        /// <param name="targetVMName">Target VM name.
        /// </param>

        /// <param name="targetVMSize">The target VM size.
        /// </param>

        /// <param name="targetResourceGroupId">The target resource group Id.
        /// </param>

        /// <param name="targetLocation">The target location.
        /// </param>

        /// <param name="targetAvailabilitySetId">The target availability set Id.
        /// </param>

        /// <param name="targetAvailabilityZone">The target availability zone.
        /// </param>

        /// <param name="targetProximityPlacementGroupId">The target proximity placement group Id.
        /// </param>

        /// <param name="targetBootDiagnosticsStorageAccountId">The target boot diagnostics storage account ARM Id.
        /// </param>

        /// <param name="targetNetworkId">The target network Id.
        /// </param>

        /// <param name="testNetworkId">The test network Id.
        /// </param>

        /// <param name="failoverRecoveryPointId">The recovery point Id to which the VM was failed over.
        /// </param>

        /// <param name="lastRecoveryPointReceived">The last recovery point received time.
        /// </param>

        /// <param name="lastRpoInSeconds">The last recovery point objective value.
        /// </param>

        /// <param name="lastRpoCalculatedTime">The last recovery point objective calculated time.
        /// </param>

        /// <param name="lastRecoveryPointId">The last recovery point Id.
        /// </param>

        /// <param name="initialReplicationProgressPercentage">The initial replication progress percentage. This is calculated based on
        /// total bytes processed for all disks in the source VM.
        /// </param>

        /// <param name="initialReplicationProcessedBytes">The initial replication processed bytes. This includes sum of total bytes
        /// transferred and matched bytes on all selected disks in source VM.
        /// </param>

        /// <param name="initialReplicationTransferredBytes">The initial replication transferred bytes from source VM to azure for all
        /// selected disks on source VM.
        /// </param>

        /// <param name="initialReplicationProgressHealth">The initial replication progress health.
        /// Possible values include: 'None', 'InProgress', 'SlowProgress', 'NoProgress'</param>

        /// <param name="resyncProgressPercentage">The resync progress percentage. This is calculated based on total bytes
        /// processed for all disks in the source VM.
        /// </param>

        /// <param name="resyncProcessedBytes">The resync processed bytes. This includes sum of total bytes transferred
        /// and matched bytes on all selected disks in source VM.
        /// </param>

        /// <param name="resyncTransferredBytes">The resync transferred bytes from source VM to azure for all selected disks
        /// on source VM.
        /// </param>

        /// <param name="resyncProgressHealth">The resync progress health.
        /// Possible values include: 'None', 'InProgress', 'SlowProgress', 'NoProgress'</param>

        /// <param name="resyncRequired">A value indicating whether resync is required.
        /// </param>

        /// <param name="resyncState">The resync state.
        /// Possible values include: 'None', 'PreparedForResynchronization',
        /// 'StartedResynchronization'</param>

        /// <param name="agentUpgradeState">The agent auto upgrade state.
        /// Possible values include: 'None', 'Started', 'Completed', 'Commit'</param>

        /// <param name="lastAgentUpgradeType">The last agent upgrade type.
        /// </param>

        /// <param name="agentUpgradeJobId">The agent upgrade job Id.
        /// </param>

        /// <param name="agentUpgradeAttemptToVersion">The agent version to which last agent upgrade was attempted.
        /// </param>

        /// <param name="protectedDisks">The list of protected disks.
        /// </param>

        /// <param name="isLastUpgradeSuccessful">A value indicating whether last agent upgrade was successful or not.
        /// </param>

        /// <param name="isAgentRegistrationSuccessfulAfterFailover">A value indicating whether agent registration was successful after
        /// failover.
        /// </param>

        /// <param name="mobilityAgentDetails">The mobility agent information.
        /// </param>

        /// <param name="lastAgentUpgradeErrorDetails">The last agent upgrade error information.
        /// </param>

        /// <param name="agentUpgradeBlockingErrorDetails">The agent upgrade blocking error information.
        /// </param>

        /// <param name="vmNics">The network details.
        /// </param>

        /// <param name="discoveredVMDetails">The discovered VM details.
        /// </param>
        public InMageRcmReplicationDetails(string internalIdentifier = default(string), string fabricDiscoveryMachineId = default(string), string multiVMGroupName = default(string), string discoveryType = default(string), string processServerId = default(string), int? processorCoreCount = default(int?), double? allocatedMemoryInMb = default(double?), string processServerName = default(string), string runAsAccountId = default(string), string osType = default(string), string firmwareType = default(string), string primaryNicIPAddress = default(string), string targetGeneration = default(string), string licenseType = default(string), string storageAccountId = default(string), string targetVMName = default(string), string targetVMSize = default(string), string targetResourceGroupId = default(string), string targetLocation = default(string), string targetAvailabilitySetId = default(string), string targetAvailabilityZone = default(string), string targetProximityPlacementGroupId = default(string), string targetBootDiagnosticsStorageAccountId = default(string), string targetNetworkId = default(string), string testNetworkId = default(string), string failoverRecoveryPointId = default(string), System.DateTime? lastRecoveryPointReceived = default(System.DateTime?), long? lastRpoInSeconds = default(long?), System.DateTime? lastRpoCalculatedTime = default(System.DateTime?), string lastRecoveryPointId = default(string), int? initialReplicationProgressPercentage = default(int?), long? initialReplicationProcessedBytes = default(long?), long? initialReplicationTransferredBytes = default(long?), string initialReplicationProgressHealth = default(string), int? resyncProgressPercentage = default(int?), long? resyncProcessedBytes = default(long?), long? resyncTransferredBytes = default(long?), string resyncProgressHealth = default(string), string resyncRequired = default(string), string resyncState = default(string), string agentUpgradeState = default(string), string lastAgentUpgradeType = default(string), string agentUpgradeJobId = default(string), string agentUpgradeAttemptToVersion = default(string), System.Collections.Generic.IList<InMageRcmProtectedDiskDetails> protectedDisks = default(System.Collections.Generic.IList<InMageRcmProtectedDiskDetails>), string isLastUpgradeSuccessful = default(string), bool? isAgentRegistrationSuccessfulAfterFailover = default(bool?), InMageRcmMobilityAgentDetails mobilityAgentDetails = default(InMageRcmMobilityAgentDetails), System.Collections.Generic.IList<InMageRcmLastAgentUpgradeErrorDetails> lastAgentUpgradeErrorDetails = default(System.Collections.Generic.IList<InMageRcmLastAgentUpgradeErrorDetails>), System.Collections.Generic.IList<InMageRcmAgentUpgradeBlockingErrorDetails> agentUpgradeBlockingErrorDetails = default(System.Collections.Generic.IList<InMageRcmAgentUpgradeBlockingErrorDetails>), System.Collections.Generic.IList<InMageRcmNicDetails> vmNics = default(System.Collections.Generic.IList<InMageRcmNicDetails>), InMageRcmDiscoveredProtectedVmDetails discoveredVMDetails = default(InMageRcmDiscoveredProtectedVmDetails))

        {
            this.InternalIdentifier = internalIdentifier;
            this.FabricDiscoveryMachineId = fabricDiscoveryMachineId;
            this.MultiVMGroupName = multiVMGroupName;
            this.DiscoveryType = discoveryType;
            this.ProcessServerId = processServerId;
            this.ProcessorCoreCount = processorCoreCount;
            this.AllocatedMemoryInMb = allocatedMemoryInMb;
            this.ProcessServerName = processServerName;
            this.RunAsAccountId = runAsAccountId;
            this.OSType = osType;
            this.FirmwareType = firmwareType;
            this.PrimaryNicIPAddress = primaryNicIPAddress;
            this.TargetGeneration = targetGeneration;
            this.LicenseType = licenseType;
            this.StorageAccountId = storageAccountId;
            this.TargetVMName = targetVMName;
            this.TargetVMSize = targetVMSize;
            this.TargetResourceGroupId = targetResourceGroupId;
            this.TargetLocation = targetLocation;
            this.TargetAvailabilitySetId = targetAvailabilitySetId;
            this.TargetAvailabilityZone = targetAvailabilityZone;
            this.TargetProximityPlacementGroupId = targetProximityPlacementGroupId;
            this.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountId;
            this.TargetNetworkId = targetNetworkId;
            this.TestNetworkId = testNetworkId;
            this.FailoverRecoveryPointId = failoverRecoveryPointId;
            this.LastRecoveryPointReceived = lastRecoveryPointReceived;
            this.LastRpoInSeconds = lastRpoInSeconds;
            this.LastRpoCalculatedTime = lastRpoCalculatedTime;
            this.LastRecoveryPointId = lastRecoveryPointId;
            this.InitialReplicationProgressPercentage = initialReplicationProgressPercentage;
            this.InitialReplicationProcessedBytes = initialReplicationProcessedBytes;
            this.InitialReplicationTransferredBytes = initialReplicationTransferredBytes;
            this.InitialReplicationProgressHealth = initialReplicationProgressHealth;
            this.ResyncProgressPercentage = resyncProgressPercentage;
            this.ResyncProcessedBytes = resyncProcessedBytes;
            this.ResyncTransferredBytes = resyncTransferredBytes;
            this.ResyncProgressHealth = resyncProgressHealth;
            this.ResyncRequired = resyncRequired;
            this.ResyncState = resyncState;
            this.AgentUpgradeState = agentUpgradeState;
            this.LastAgentUpgradeType = lastAgentUpgradeType;
            this.AgentUpgradeJobId = agentUpgradeJobId;
            this.AgentUpgradeAttemptToVersion = agentUpgradeAttemptToVersion;
            this.ProtectedDisks = protectedDisks;
            this.IsLastUpgradeSuccessful = isLastUpgradeSuccessful;
            this.IsAgentRegistrationSuccessfulAfterFailover = isAgentRegistrationSuccessfulAfterFailover;
            this.MobilityAgentDetails = mobilityAgentDetails;
            this.LastAgentUpgradeErrorDetails = lastAgentUpgradeErrorDetails;
            this.AgentUpgradeBlockingErrorDetails = agentUpgradeBlockingErrorDetails;
            this.VMNics = vmNics;
            this.DiscoveredVMDetails = discoveredVMDetails;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the virtual machine internal identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "internalIdentifier")]
        public string InternalIdentifier {get; private set; }

        /// <summary>
        /// Gets the ARM Id of the discovered VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fabricDiscoveryMachineId")]
        public string FabricDiscoveryMachineId {get; private set; }

        /// <summary>
        /// Gets the multi VM group name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "multiVmGroupName")]
        public string MultiVMGroupName {get; private set; }

        /// <summary>
        /// Gets the type of the discovered VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "discoveryType")]
        public string DiscoveryType {get; private set; }

        /// <summary>
        /// Gets the process server Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "processServerId")]
        public string ProcessServerId {get; private set; }

        /// <summary>
        /// Gets the processor core count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "processorCoreCount")]
        public int? ProcessorCoreCount {get; private set; }

        /// <summary>
        /// Gets the allocated memory in MB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allocatedMemoryInMB")]
        public double? AllocatedMemoryInMb {get; private set; }

        /// <summary>
        /// Gets the process server name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "processServerName")]
        public string ProcessServerName {get; private set; }

        /// <summary>
        /// Gets the run-as account Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runAsAccountId")]
        public string RunAsAccountId {get; private set; }

        /// <summary>
        /// Gets the type of the OS on the VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osType")]
        public string OSType {get; private set; }

        /// <summary>
        /// Gets the firmware type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "firmwareType")]
        public string FirmwareType {get; private set; }

        /// <summary>
        /// Gets the IP address of the primary network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryNicIpAddress")]
        public string PrimaryNicIPAddress {get; private set; }

        /// <summary>
        /// Gets the target generation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetGeneration")]
        public string TargetGeneration {get; private set; }

        /// <summary>
        /// Gets or sets license Type of the VM to be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "licenseType")]
        public string LicenseType {get; set; }

        /// <summary>
        /// Gets the replication storage account ARM Id. This is applicable only for
        /// the blob based replication test hook.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageAccountId")]
        public string StorageAccountId {get; private set; }

        /// <summary>
        /// Gets or sets target VM name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmName")]
        public string TargetVMName {get; set; }

        /// <summary>
        /// Gets or sets the target VM size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmSize")]
        public string TargetVMSize {get; set; }

        /// <summary>
        /// Gets or sets the target resource group Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetResourceGroupId")]
        public string TargetResourceGroupId {get; set; }

        /// <summary>
        /// Gets or sets the target location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetLocation")]
        public string TargetLocation {get; set; }

        /// <summary>
        /// Gets or sets the target availability set Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetAvailabilitySetId")]
        public string TargetAvailabilitySetId {get; set; }

        /// <summary>
        /// Gets or sets the target availability zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetAvailabilityZone")]
        public string TargetAvailabilityZone {get; set; }

        /// <summary>
        /// Gets or sets the target proximity placement group Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetProximityPlacementGroupId")]
        public string TargetProximityPlacementGroupId {get; set; }

        /// <summary>
        /// Gets or sets the target boot diagnostics storage account ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetBootDiagnosticsStorageAccountId")]
        public string TargetBootDiagnosticsStorageAccountId {get; set; }

        /// <summary>
        /// Gets or sets the target network Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetNetworkId")]
        public string TargetNetworkId {get; set; }

        /// <summary>
        /// Gets or sets the test network Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "testNetworkId")]
        public string TestNetworkId {get; set; }

        /// <summary>
        /// Gets the recovery point Id to which the VM was failed over.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failoverRecoveryPointId")]
        public string FailoverRecoveryPointId {get; private set; }

        /// <summary>
        /// Gets the last recovery point received time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastRecoveryPointReceived")]
        public System.DateTime? LastRecoveryPointReceived {get; private set; }

        /// <summary>
        /// Gets the last recovery point objective value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastRpoInSeconds")]
        public long? LastRpoInSeconds {get; private set; }

        /// <summary>
        /// Gets the last recovery point objective calculated time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastRpoCalculatedTime")]
        public System.DateTime? LastRpoCalculatedTime {get; private set; }

        /// <summary>
        /// Gets the last recovery point Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastRecoveryPointId")]
        public string LastRecoveryPointId {get; private set; }

        /// <summary>
        /// Gets the initial replication progress percentage. This is calculated based
        /// on total bytes processed for all disks in the source VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "initialReplicationProgressPercentage")]
        public int? InitialReplicationProgressPercentage {get; private set; }

        /// <summary>
        /// Gets the initial replication processed bytes. This includes sum of total
        /// bytes transferred and matched bytes on all selected disks in source VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "initialReplicationProcessedBytes")]
        public long? InitialReplicationProcessedBytes {get; private set; }

        /// <summary>
        /// Gets the initial replication transferred bytes from source VM to azure for
        /// all selected disks on source VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "initialReplicationTransferredBytes")]
        public long? InitialReplicationTransferredBytes {get; private set; }

        /// <summary>
        /// Gets the initial replication progress health. Possible values include: &#39;None&#39;, &#39;InProgress&#39;, &#39;SlowProgress&#39;, &#39;NoProgress&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "initialReplicationProgressHealth")]
        public string InitialReplicationProgressHealth {get; private set; }

        /// <summary>
        /// Gets the resync progress percentage. This is calculated based on total
        /// bytes processed for all disks in the source VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncProgressPercentage")]
        public int? ResyncProgressPercentage {get; private set; }

        /// <summary>
        /// Gets the resync processed bytes. This includes sum of total bytes
        /// transferred and matched bytes on all selected disks in source VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncProcessedBytes")]
        public long? ResyncProcessedBytes {get; private set; }

        /// <summary>
        /// Gets the resync transferred bytes from source VM to azure for all selected
        /// disks on source VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncTransferredBytes")]
        public long? ResyncTransferredBytes {get; private set; }

        /// <summary>
        /// Gets the resync progress health. Possible values include: &#39;None&#39;, &#39;InProgress&#39;, &#39;SlowProgress&#39;, &#39;NoProgress&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncProgressHealth")]
        public string ResyncProgressHealth {get; private set; }

        /// <summary>
        /// Gets a value indicating whether resync is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncRequired")]
        public string ResyncRequired {get; private set; }

        /// <summary>
        /// Gets the resync state. Possible values include: &#39;None&#39;, &#39;PreparedForResynchronization&#39;, &#39;StartedResynchronization&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncState")]
        public string ResyncState {get; private set; }

        /// <summary>
        /// Gets the agent auto upgrade state. Possible values include: &#39;None&#39;, &#39;Started&#39;, &#39;Completed&#39;, &#39;Commit&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentUpgradeState")]
        public string AgentUpgradeState {get; private set; }

        /// <summary>
        /// Gets the last agent upgrade type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastAgentUpgradeType")]
        public string LastAgentUpgradeType {get; private set; }

        /// <summary>
        /// Gets the agent upgrade job Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentUpgradeJobId")]
        public string AgentUpgradeJobId {get; private set; }

        /// <summary>
        /// Gets the agent version to which last agent upgrade was attempted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentUpgradeAttemptToVersion")]
        public string AgentUpgradeAttemptToVersion {get; private set; }

        /// <summary>
        /// Gets or sets the list of protected disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectedDisks")]
        public System.Collections.Generic.IList<InMageRcmProtectedDiskDetails> ProtectedDisks {get; set; }

        /// <summary>
        /// Gets a value indicating whether last agent upgrade was successful or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isLastUpgradeSuccessful")]
        public string IsLastUpgradeSuccessful {get; private set; }

        /// <summary>
        /// Gets a value indicating whether agent registration was successful after
        /// failover.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isAgentRegistrationSuccessfulAfterFailover")]
        public bool? IsAgentRegistrationSuccessfulAfterFailover {get; private set; }

        /// <summary>
        /// Gets or sets the mobility agent information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mobilityAgentDetails")]
        public InMageRcmMobilityAgentDetails MobilityAgentDetails {get; set; }

        /// <summary>
        /// Gets or sets the last agent upgrade error information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastAgentUpgradeErrorDetails")]
        public System.Collections.Generic.IList<InMageRcmLastAgentUpgradeErrorDetails> LastAgentUpgradeErrorDetails {get; set; }

        /// <summary>
        /// Gets or sets the agent upgrade blocking error information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentUpgradeBlockingErrorDetails")]
        public System.Collections.Generic.IList<InMageRcmAgentUpgradeBlockingErrorDetails> AgentUpgradeBlockingErrorDetails {get; set; }

        /// <summary>
        /// Gets or sets the network details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmNics")]
        public System.Collections.Generic.IList<InMageRcmNicDetails> VMNics {get; set; }

        /// <summary>
        /// Gets or sets the discovered VM details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "discoveredVmDetails")]
        public InMageRcmDiscoveredProtectedVmDetails DiscoveredVMDetails {get; set; }
    }
}