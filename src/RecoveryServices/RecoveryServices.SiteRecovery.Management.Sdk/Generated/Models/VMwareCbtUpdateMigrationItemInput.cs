// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// VMwareCbt specific update migration item input.
    /// </summary>
    [Newtonsoft.Json.JsonObject("VMwareCbt")]
    public partial class VMwareCbtUpdateMigrationItemInput : UpdateMigrationItemProviderSpecificInput
    {
        /// <summary>
        /// Initializes a new instance of the VMwareCbtUpdateMigrationItemInput class.
        /// </summary>
        public VMwareCbtUpdateMigrationItemInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VMwareCbtUpdateMigrationItemInput class.
        /// </summary>

        /// <param name="targetVMName">The target VM name.
        /// </param>

        /// <param name="targetVMSize">The target VM size.
        /// </param>

        /// <param name="targetResourceGroupId">The target resource group ARM Id.
        /// </param>

        /// <param name="targetAvailabilitySetId">The target availability set ARM Id.
        /// </param>

        /// <param name="targetAvailabilityZone">The target availability zone.
        /// </param>

        /// <param name="targetProximityPlacementGroupId">The target proximity placement group ARM Id.
        /// </param>

        /// <param name="targetBootDiagnosticsStorageAccountId">The target boot diagnostics storage account ARM Id.
        /// </param>

        /// <param name="targetNetworkId">The target network ARM Id.
        /// </param>

        /// <param name="testNetworkId">The test network ARM Id.
        /// </param>

        /// <param name="vmNics">The list of NIC details.
        /// </param>

        /// <param name="vmDisks">The list of disk update properties.
        /// </param>

        /// <param name="licenseType">The license type.
        /// Possible values include: 'NotSpecified', 'NoLicenseType', 'WindowsServer'</param>

        /// <param name="sqlServerLicenseType">The SQL Server license type.
        /// Possible values include: 'NotSpecified', 'NoLicenseType', 'PAYG', 'AHUB'</param>

        /// <param name="performAutoResync">A value indicating whether auto resync is to be done.
        /// </param>

        /// <param name="targetVMTags">The target VM tags.
        /// </param>

        /// <param name="targetDiskTags">The tags for the target disks.
        /// </param>

        /// <param name="targetNicTags">The tags for the target NICs.
        /// </param>
        public VMwareCbtUpdateMigrationItemInput(string targetVMName = default(string), string targetVMSize = default(string), string targetResourceGroupId = default(string), string targetAvailabilitySetId = default(string), string targetAvailabilityZone = default(string), string targetProximityPlacementGroupId = default(string), string targetBootDiagnosticsStorageAccountId = default(string), string targetNetworkId = default(string), string testNetworkId = default(string), System.Collections.Generic.IList<VMwareCbtNicInput> vmNics = default(System.Collections.Generic.IList<VMwareCbtNicInput>), System.Collections.Generic.IList<VMwareCbtUpdateDiskInput> vmDisks = default(System.Collections.Generic.IList<VMwareCbtUpdateDiskInput>), string licenseType = default(string), string sqlServerLicenseType = default(string), string performAutoResync = default(string), System.Collections.Generic.IDictionary<string, string> targetVMTags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> targetDiskTags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> targetNicTags = default(System.Collections.Generic.IDictionary<string, string>))

        {
            this.TargetVMName = targetVMName;
            this.TargetVMSize = targetVMSize;
            this.TargetResourceGroupId = targetResourceGroupId;
            this.TargetAvailabilitySetId = targetAvailabilitySetId;
            this.TargetAvailabilityZone = targetAvailabilityZone;
            this.TargetProximityPlacementGroupId = targetProximityPlacementGroupId;
            this.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountId;
            this.TargetNetworkId = targetNetworkId;
            this.TestNetworkId = testNetworkId;
            this.VMNics = vmNics;
            this.VMDisks = vmDisks;
            this.LicenseType = licenseType;
            this.SqlServerLicenseType = sqlServerLicenseType;
            this.PerformAutoResync = performAutoResync;
            this.TargetVMTags = targetVMTags;
            this.TargetDiskTags = targetDiskTags;
            this.TargetNicTags = targetNicTags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the target VM name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmName")]
        public string TargetVMName {get; set; }

        /// <summary>
        /// Gets or sets the target VM size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmSize")]
        public string TargetVMSize {get; set; }

        /// <summary>
        /// Gets or sets the target resource group ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetResourceGroupId")]
        public string TargetResourceGroupId {get; set; }

        /// <summary>
        /// Gets or sets the target availability set ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetAvailabilitySetId")]
        public string TargetAvailabilitySetId {get; set; }

        /// <summary>
        /// Gets or sets the target availability zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetAvailabilityZone")]
        public string TargetAvailabilityZone {get; set; }

        /// <summary>
        /// Gets or sets the target proximity placement group ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetProximityPlacementGroupId")]
        public string TargetProximityPlacementGroupId {get; set; }

        /// <summary>
        /// Gets or sets the target boot diagnostics storage account ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetBootDiagnosticsStorageAccountId")]
        public string TargetBootDiagnosticsStorageAccountId {get; set; }

        /// <summary>
        /// Gets or sets the target network ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetNetworkId")]
        public string TargetNetworkId {get; set; }

        /// <summary>
        /// Gets or sets the test network ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "testNetworkId")]
        public string TestNetworkId {get; set; }

        /// <summary>
        /// Gets or sets the list of NIC details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmNics")]
        public System.Collections.Generic.IList<VMwareCbtNicInput> VMNics {get; set; }

        /// <summary>
        /// Gets or sets the list of disk update properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmDisks")]
        public System.Collections.Generic.IList<VMwareCbtUpdateDiskInput> VMDisks {get; set; }

        /// <summary>
        /// Gets or sets the license type. Possible values include: &#39;NotSpecified&#39;, &#39;NoLicenseType&#39;, &#39;WindowsServer&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "licenseType")]
        public string LicenseType {get; set; }

        /// <summary>
        /// Gets or sets the SQL Server license type. Possible values include: &#39;NotSpecified&#39;, &#39;NoLicenseType&#39;, &#39;PAYG&#39;, &#39;AHUB&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sqlServerLicenseType")]
        public string SqlServerLicenseType {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether auto resync is to be done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "performAutoResync")]
        public string PerformAutoResync {get; set; }

        /// <summary>
        /// Gets or sets the target VM tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmTags")]
        public System.Collections.Generic.IDictionary<string, string> TargetVMTags {get; set; }

        /// <summary>
        /// Gets or sets the tags for the target disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetDiskTags")]
        public System.Collections.Generic.IDictionary<string, string> TargetDiskTags {get; set; }

        /// <summary>
        /// Gets or sets the tags for the target NICs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetNicTags")]
        public System.Collections.Generic.IDictionary<string, string> TargetNicTags {get; set; }
    }
}