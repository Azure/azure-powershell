// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// Disk input details.
    /// </summary>
    public partial class HyperVReplicaAzureDiskInputDetails
    {
        /// <summary>
        /// Initializes a new instance of the HyperVReplicaAzureDiskInputDetails class.
        /// </summary>
        public HyperVReplicaAzureDiskInputDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HyperVReplicaAzureDiskInputDetails class.
        /// </summary>

        /// <param name="diskId">The DiskId.
        /// </param>

        /// <param name="logStorageAccountId">The LogStorageAccountId.
        /// </param>

        /// <param name="diskType">The disk type.
        /// Possible values include: &#39;Standard_LRS&#39;, &#39;Premium_LRS&#39;, &#39;StandardSSD_LRS&#39;,
        /// &#39;PremiumV2_LRS&#39;, &#39;UltraSSD_LRS&#39;, &#39;StandardSSD_ZRS&#39;, &#39;Premium_ZRS&#39;</param>

        /// <param name="diskEncryptionSetId">The DiskEncryptionSet ARM ID.
        /// </param>

        /// <param name="sectorSizeInBytes">The logical sector size (in bytes), 512 by default.
        /// </param>
        public HyperVReplicaAzureDiskInputDetails(string diskId = default(string), string logStorageAccountId = default(string), string diskType = default(string), string diskEncryptionSetId = default(string), int? sectorSizeInBytes = default(int?))

        {
            this.DiskId = diskId;
            this.LogStorageAccountId = logStorageAccountId;
            this.DiskType = diskType;
            this.DiskEncryptionSetId = diskEncryptionSetId;
            this.SectorSizeInBytes = sectorSizeInBytes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the DiskId.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskId")]
        public string DiskId {get; set; }

        /// <summary>
        /// Gets or sets the LogStorageAccountId.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "logStorageAccountId")]
        public string LogStorageAccountId {get; set; }

        /// <summary>
        /// Gets or sets the disk type. Possible values include: &#39;Standard_LRS&#39;, &#39;Premium_LRS&#39;, &#39;StandardSSD_LRS&#39;, &#39;PremiumV2_LRS&#39;, &#39;UltraSSD_LRS&#39;, &#39;StandardSSD_ZRS&#39;, &#39;Premium_ZRS&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskType")]
        public string DiskType {get; set; }

        /// <summary>
        /// Gets or sets the DiskEncryptionSet ARM ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskEncryptionSetId")]
        public string DiskEncryptionSetId {get; set; }

        /// <summary>
        /// Gets or sets the logical sector size (in bytes), 512 by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sectorSizeInBytes")]
        public int? SectorSizeInBytes {get; set; }
    }
}