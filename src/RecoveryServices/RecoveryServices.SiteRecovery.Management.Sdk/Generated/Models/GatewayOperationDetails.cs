// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// Details of the gateway operation.
    /// </summary>
    public partial class GatewayOperationDetails
    {
        /// <summary>
        /// Initializes a new instance of the GatewayOperationDetails class.
        /// </summary>
        public GatewayOperationDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GatewayOperationDetails class.
        /// </summary>

        /// <param name="state">A value indicating the state of gateway operation.
        /// </param>

        /// <param name="progressPercentage">A value indicating the progress percentage of gateway operation.
        /// </param>

        /// <param name="timeElapsed">A value indicating the time elapsed for the operation in milliseconds.
        /// </param>

        /// <param name="timeRemaining">A value indicating the time remaining for the operation in milliseconds.
        /// </param>

        /// <param name="uploadSpeed">A value indicating the upload speed in bytes per second.
        /// </param>

        /// <param name="hostName">A value indicating the ESXi host name.
        /// </param>

        /// <param name="dataStores">A value indicating the datastore collection.
        /// </param>

        /// <param name="vmwareReadThroughput">A value indicating the VMware read throughput in bytes per second.
        /// </param>
        public GatewayOperationDetails(string state = default(string), int? progressPercentage = default(int?), long? timeElapsed = default(long?), long? timeRemaining = default(long?), long? uploadSpeed = default(long?), string hostName = default(string), System.Collections.Generic.IList<string> dataStores = default(System.Collections.Generic.IList<string>), long? vmwareReadThroughput = default(long?))

        {
            this.State = state;
            this.ProgressPercentage = progressPercentage;
            this.TimeElapsed = timeElapsed;
            this.TimeRemaining = timeRemaining;
            this.UploadSpeed = uploadSpeed;
            this.HostName = hostName;
            this.DataStores = dataStores;
            this.VmwareReadThroughput = vmwareReadThroughput;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets a value indicating the state of gateway operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; private set; }

        /// <summary>
        /// Gets a value indicating the progress percentage of gateway operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "progressPercentage")]
        public int? ProgressPercentage {get; private set; }

        /// <summary>
        /// Gets a value indicating the time elapsed for the operation in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeElapsed")]
        public long? TimeElapsed {get; private set; }

        /// <summary>
        /// Gets a value indicating the time remaining for the operation in
        /// milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeRemaining")]
        public long? TimeRemaining {get; private set; }

        /// <summary>
        /// Gets a value indicating the upload speed in bytes per second.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uploadSpeed")]
        public long? UploadSpeed {get; private set; }

        /// <summary>
        /// Gets a value indicating the ESXi host name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostName")]
        public string HostName {get; private set; }

        /// <summary>
        /// Gets a value indicating the datastore collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataStores")]
        public System.Collections.Generic.IList<string> DataStores {get; private set; }

        /// <summary>
        /// Gets a value indicating the VMware read throughput in bytes per second.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmwareReadThroughput")]
        public long? VmwareReadThroughput {get; private set; }
    }
}