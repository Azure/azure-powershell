// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// InMageAzureV2 provider specific settings.
    /// </summary>
    [Newtonsoft.Json.JsonObject("InMageAzureV2")]
    public partial class InMageAzureV2ReplicationDetails : ReplicationProviderSpecificSettings
    {
        /// <summary>
        /// Initializes a new instance of the InMageAzureV2ReplicationDetails class.
        /// </summary>
        public InMageAzureV2ReplicationDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InMageAzureV2ReplicationDetails class.
        /// </summary>

        /// <param name="infrastructureVMId">The infrastructure VM Id.
        /// </param>

        /// <param name="vCenterInfrastructureId">The vCenter infrastructure Id.
        /// </param>

        /// <param name="protectionStage">The protection stage.
        /// </param>

        /// <param name="vmId">The virtual machine Id.
        /// </param>

        /// <param name="vmProtectionState">The protection state for the vm.
        /// </param>

        /// <param name="vmProtectionStateDescription">The protection state description for the vm.
        /// </param>

        /// <param name="resyncProgressPercentage">The resync progress percentage.
        /// </param>

        /// <param name="rpoInSeconds">The RPO in seconds.
        /// </param>

        /// <param name="compressedDataRateInMb">The compressed data change rate in MB.
        /// </param>

        /// <param name="uncompressedDataRateInMb">The uncompressed data change rate in MB.
        /// </param>

        /// <param name="ipAddress">The source IP address.
        /// </param>

        /// <param name="agentVersion">The agent version.
        /// </param>

        /// <param name="agentExpiryDate">Agent expiry date.
        /// </param>

        /// <param name="isAgentUpdateRequired">A value indicating whether installed agent needs to be updated.
        /// </param>

        /// <param name="isRebootAfterUpdateRequired">A value indicating whether the source server requires a restart after
        /// update.
        /// </param>

        /// <param name="lastHeartbeat">The last heartbeat received from the source server.
        /// </param>

        /// <param name="processServerId">The process server Id.
        /// </param>

        /// <param name="processServerName">The process server name.
        /// </param>

        /// <param name="multiVMGroupId">The multi vm group Id.
        /// </param>

        /// <param name="multiVMGroupName">The multi vm group name.
        /// </param>

        /// <param name="multiVMSyncStatus">A value indicating whether multi vm sync is enabled or disabled.
        /// </param>

        /// <param name="protectedDisks">The list of protected disks.
        /// </param>

        /// <param name="diskResized">A value indicating whether any disk is resized for this VM.
        /// </param>

        /// <param name="masterTargetId">The master target Id.
        /// </param>

        /// <param name="sourceVMCpuCount">The CPU count of the VM on the primary side.
        /// </param>

        /// <param name="sourceVMRamSizeInMb">The RAM size of the VM on the primary side.
        /// </param>

        /// <param name="osType">The type of the OS on the VM.
        /// </param>

        /// <param name="vhdName">The OS disk VHD name.
        /// </param>

        /// <param name="osDiskId">The id of the disk containing the OS.
        /// </param>

        /// <param name="azureVMDiskDetails">Azure VM Disk details.
        /// </param>

        /// <param name="recoveryAzureVMName">Recovery Azure given name.
        /// </param>

        /// <param name="recoveryAzureVMSize">The Recovery Azure VM size.
        /// </param>

        /// <param name="recoveryAzureStorageAccount">The recovery Azure storage account.
        /// </param>

        /// <param name="recoveryAzureLogStorageAccountId">The ARM id of the log storage account used for replication. This will be
        /// set to null if no log storage account was provided during enable
        /// protection.
        /// </param>

        /// <param name="vmNics">The PE Network details.
        /// </param>

        /// <param name="selectedRecoveryAzureNetworkId">The selected recovery azure network Id.
        /// </param>

        /// <param name="selectedTfoAzureNetworkId">The test failover virtual network.
        /// </param>

        /// <param name="selectedSourceNicId">The selected source nic Id which will be used as the primary nic during
        /// failover.
        /// </param>

        /// <param name="discoveryType">A value indicating the discovery type of the machine. Value can be vCenter
        /// or physical.
        /// </param>

        /// <param name="enableRdpOnTargetOption">The selected option to enable RDP\SSH on target vm after failover. String
        /// value of SrsDataContract.EnableRDPOnTargetOption enum.
        /// </param>

        /// <param name="datastores">The datastores of the on-premise machine. Value can be list of strings that
        /// contain datastore names.
        /// </param>

        /// <param name="targetVMId">The ARM Id of the target Azure VM. This value will be null until the VM is
        /// failed over. Only after failure it will be populated with the ARM Id of the
        /// Azure VM.
        /// </param>

        /// <param name="recoveryAzureResourceGroupId">The target resource group Id.
        /// </param>

        /// <param name="recoveryAvailabilitySetId">The recovery availability set Id.
        /// </param>

        /// <param name="targetAvailabilityZone">The target availability zone.
        /// </param>

        /// <param name="targetProximityPlacementGroupId">The target proximity placement group Id.
        /// </param>

        /// <param name="useManagedDisks">A value indicating whether managed disks should be used during failover.
        /// </param>

        /// <param name="licenseType">License Type of the VM to be used.
        /// </param>

        /// <param name="sqlServerLicenseType">The SQL Server license type.
        /// </param>

        /// <param name="validationErrors">The validation errors of the on-premise machine Value can be list of
        /// validation errors.
        /// </param>

        /// <param name="lastRpoCalculatedTime">The last RPO calculated time.
        /// </param>

        /// <param name="lastUpdateReceivedTime">The last update time received from on-prem components.
        /// </param>

        /// <param name="replicaId">The replica id of the protected item.
        /// </param>

        /// <param name="osVersion">The OS Version of the protected item.
        /// </param>

        /// <param name="protectedManagedDisks">The list of protected managed disks.
        /// </param>

        /// <param name="lastRecoveryPointReceived">The last recovery point received time.
        /// </param>

        /// <param name="firmwareType">The firmware type of this protected item.
        /// </param>

        /// <param name="azureVMGeneration">The target generation for this protected item.
        /// </param>

        /// <param name="isAdditionalStatsAvailable">A value indicating whether additional IR stats are available or not.
        /// </param>

        /// <param name="totalDataTransferred">The total transferred data in bytes.
        /// </param>

        /// <param name="totalProgressHealth">The progress health.
        /// </param>

        /// <param name="targetVMTags">The target VM tags.
        /// </param>

        /// <param name="seedManagedDiskTags">The tags for the seed managed disks.
        /// </param>

        /// <param name="targetManagedDiskTags">The tags for the target managed disks.
        /// </param>

        /// <param name="targetNicTags">The tags for the target NICs.
        /// </param>

        /// <param name="switchProviderBlockingErrorDetails">The switch provider blocking error information.
        /// </param>

        /// <param name="switchProviderDetails">The switch provider blocking error information.
        /// </param>
        public InMageAzureV2ReplicationDetails(string infrastructureVMId = default(string), string vCenterInfrastructureId = default(string), string protectionStage = default(string), string vmId = default(string), string vmProtectionState = default(string), string vmProtectionStateDescription = default(string), int? resyncProgressPercentage = default(int?), long? rpoInSeconds = default(long?), double? compressedDataRateInMb = default(double?), double? uncompressedDataRateInMb = default(double?), string ipAddress = default(string), string agentVersion = default(string), System.DateTime? agentExpiryDate = default(System.DateTime?), string isAgentUpdateRequired = default(string), string isRebootAfterUpdateRequired = default(string), System.DateTime? lastHeartbeat = default(System.DateTime?), string processServerId = default(string), string processServerName = default(string), string multiVMGroupId = default(string), string multiVMGroupName = default(string), string multiVMSyncStatus = default(string), System.Collections.Generic.IList<InMageAzureV2ProtectedDiskDetails> protectedDisks = default(System.Collections.Generic.IList<InMageAzureV2ProtectedDiskDetails>), string diskResized = default(string), string masterTargetId = default(string), int? sourceVMCpuCount = default(int?), int? sourceVMRamSizeInMb = default(int?), string osType = default(string), string vhdName = default(string), string osDiskId = default(string), System.Collections.Generic.IList<AzureVmDiskDetails> azureVMDiskDetails = default(System.Collections.Generic.IList<AzureVmDiskDetails>), string recoveryAzureVMName = default(string), string recoveryAzureVMSize = default(string), string recoveryAzureStorageAccount = default(string), string recoveryAzureLogStorageAccountId = default(string), System.Collections.Generic.IList<VMNicDetails> vmNics = default(System.Collections.Generic.IList<VMNicDetails>), string selectedRecoveryAzureNetworkId = default(string), string selectedTfoAzureNetworkId = default(string), string selectedSourceNicId = default(string), string discoveryType = default(string), string enableRdpOnTargetOption = default(string), System.Collections.Generic.IList<string> datastores = default(System.Collections.Generic.IList<string>), string targetVMId = default(string), string recoveryAzureResourceGroupId = default(string), string recoveryAvailabilitySetId = default(string), string targetAvailabilityZone = default(string), string targetProximityPlacementGroupId = default(string), string useManagedDisks = default(string), string licenseType = default(string), string sqlServerLicenseType = default(string), System.Collections.Generic.IList<HealthError> validationErrors = default(System.Collections.Generic.IList<HealthError>), System.DateTime? lastRpoCalculatedTime = default(System.DateTime?), System.DateTime? lastUpdateReceivedTime = default(System.DateTime?), string replicaId = default(string), string osVersion = default(string), System.Collections.Generic.IList<InMageAzureV2ManagedDiskDetails> protectedManagedDisks = default(System.Collections.Generic.IList<InMageAzureV2ManagedDiskDetails>), System.DateTime? lastRecoveryPointReceived = default(System.DateTime?), string firmwareType = default(string), string azureVMGeneration = default(string), bool? isAdditionalStatsAvailable = default(bool?), long? totalDataTransferred = default(long?), string totalProgressHealth = default(string), System.Collections.Generic.IDictionary<string, string> targetVMTags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> seedManagedDiskTags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> targetManagedDiskTags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> targetNicTags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IList<InMageAzureV2SwitchProviderBlockingErrorDetails> switchProviderBlockingErrorDetails = default(System.Collections.Generic.IList<InMageAzureV2SwitchProviderBlockingErrorDetails>), InMageAzureV2SwitchProviderDetails switchProviderDetails = default(InMageAzureV2SwitchProviderDetails))

        {
            this.InfrastructureVMId = infrastructureVMId;
            this.VCenterInfrastructureId = vCenterInfrastructureId;
            this.ProtectionStage = protectionStage;
            this.VMId = vmId;
            this.VMProtectionState = vmProtectionState;
            this.VMProtectionStateDescription = vmProtectionStateDescription;
            this.ResyncProgressPercentage = resyncProgressPercentage;
            this.RpoInSeconds = rpoInSeconds;
            this.CompressedDataRateInMb = compressedDataRateInMb;
            this.UncompressedDataRateInMb = uncompressedDataRateInMb;
            this.IPAddress = ipAddress;
            this.AgentVersion = agentVersion;
            this.AgentExpiryDate = agentExpiryDate;
            this.IsAgentUpdateRequired = isAgentUpdateRequired;
            this.IsRebootAfterUpdateRequired = isRebootAfterUpdateRequired;
            this.LastHeartbeat = lastHeartbeat;
            this.ProcessServerId = processServerId;
            this.ProcessServerName = processServerName;
            this.MultiVMGroupId = multiVMGroupId;
            this.MultiVMGroupName = multiVMGroupName;
            this.MultiVMSyncStatus = multiVMSyncStatus;
            this.ProtectedDisks = protectedDisks;
            this.DiskResized = diskResized;
            this.MasterTargetId = masterTargetId;
            this.SourceVMCpuCount = sourceVMCpuCount;
            this.SourceVMRamSizeInMb = sourceVMRamSizeInMb;
            this.OSType = osType;
            this.VhdName = vhdName;
            this.OSDiskId = osDiskId;
            this.AzureVMDiskDetails = azureVMDiskDetails;
            this.RecoveryAzureVMName = recoveryAzureVMName;
            this.RecoveryAzureVMSize = recoveryAzureVMSize;
            this.RecoveryAzureStorageAccount = recoveryAzureStorageAccount;
            this.RecoveryAzureLogStorageAccountId = recoveryAzureLogStorageAccountId;
            this.VMNics = vmNics;
            this.SelectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkId;
            this.SelectedTfoAzureNetworkId = selectedTfoAzureNetworkId;
            this.SelectedSourceNicId = selectedSourceNicId;
            this.DiscoveryType = discoveryType;
            this.EnableRdpOnTargetOption = enableRdpOnTargetOption;
            this.Datastores = datastores;
            this.TargetVMId = targetVMId;
            this.RecoveryAzureResourceGroupId = recoveryAzureResourceGroupId;
            this.RecoveryAvailabilitySetId = recoveryAvailabilitySetId;
            this.TargetAvailabilityZone = targetAvailabilityZone;
            this.TargetProximityPlacementGroupId = targetProximityPlacementGroupId;
            this.UseManagedDisks = useManagedDisks;
            this.LicenseType = licenseType;
            this.SqlServerLicenseType = sqlServerLicenseType;
            this.ValidationErrors = validationErrors;
            this.LastRpoCalculatedTime = lastRpoCalculatedTime;
            this.LastUpdateReceivedTime = lastUpdateReceivedTime;
            this.ReplicaId = replicaId;
            this.OSVersion = osVersion;
            this.ProtectedManagedDisks = protectedManagedDisks;
            this.LastRecoveryPointReceived = lastRecoveryPointReceived;
            this.FirmwareType = firmwareType;
            this.AzureVMGeneration = azureVMGeneration;
            this.IsAdditionalStatsAvailable = isAdditionalStatsAvailable;
            this.TotalDataTransferred = totalDataTransferred;
            this.TotalProgressHealth = totalProgressHealth;
            this.TargetVMTags = targetVMTags;
            this.SeedManagedDiskTags = seedManagedDiskTags;
            this.TargetManagedDiskTags = targetManagedDiskTags;
            this.TargetNicTags = targetNicTags;
            this.SwitchProviderBlockingErrorDetails = switchProviderBlockingErrorDetails;
            this.SwitchProviderDetails = switchProviderDetails;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the infrastructure VM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "infrastructureVmId")]
        public string InfrastructureVMId {get; set; }

        /// <summary>
        /// Gets or sets the vCenter infrastructure Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vCenterInfrastructureId")]
        public string VCenterInfrastructureId {get; set; }

        /// <summary>
        /// Gets or sets the protection stage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectionStage")]
        public string ProtectionStage {get; set; }

        /// <summary>
        /// Gets or sets the virtual machine Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmId")]
        public string VMId {get; set; }

        /// <summary>
        /// Gets or sets the protection state for the vm.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmProtectionState")]
        public string VMProtectionState {get; set; }

        /// <summary>
        /// Gets or sets the protection state description for the vm.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmProtectionStateDescription")]
        public string VMProtectionStateDescription {get; set; }

        /// <summary>
        /// Gets or sets the resync progress percentage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncProgressPercentage")]
        public int? ResyncProgressPercentage {get; set; }

        /// <summary>
        /// Gets or sets the RPO in seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rpoInSeconds")]
        public long? RpoInSeconds {get; set; }

        /// <summary>
        /// Gets or sets the compressed data change rate in MB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "compressedDataRateInMB")]
        public double? CompressedDataRateInMb {get; set; }

        /// <summary>
        /// Gets or sets the uncompressed data change rate in MB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uncompressedDataRateInMB")]
        public double? UncompressedDataRateInMb {get; set; }

        /// <summary>
        /// Gets or sets the source IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipAddress")]
        public string IPAddress {get; set; }

        /// <summary>
        /// Gets or sets the agent version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentVersion")]
        public string AgentVersion {get; set; }

        /// <summary>
        /// Gets or sets agent expiry date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentExpiryDate")]
        public System.DateTime? AgentExpiryDate {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether installed agent needs to be
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isAgentUpdateRequired")]
        public string IsAgentUpdateRequired {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the source server requires a
        /// restart after update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isRebootAfterUpdateRequired")]
        public string IsRebootAfterUpdateRequired {get; set; }

        /// <summary>
        /// Gets or sets the last heartbeat received from the source server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastHeartbeat")]
        public System.DateTime? LastHeartbeat {get; set; }

        /// <summary>
        /// Gets or sets the process server Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "processServerId")]
        public string ProcessServerId {get; set; }

        /// <summary>
        /// Gets or sets the process server name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "processServerName")]
        public string ProcessServerName {get; set; }

        /// <summary>
        /// Gets or sets the multi vm group Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "multiVmGroupId")]
        public string MultiVMGroupId {get; set; }

        /// <summary>
        /// Gets or sets the multi vm group name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "multiVmGroupName")]
        public string MultiVMGroupName {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether multi vm sync is enabled or
        /// disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "multiVmSyncStatus")]
        public string MultiVMSyncStatus {get; set; }

        /// <summary>
        /// Gets or sets the list of protected disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectedDisks")]
        public System.Collections.Generic.IList<InMageAzureV2ProtectedDiskDetails> ProtectedDisks {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether any disk is resized for this VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskResized")]
        public string DiskResized {get; set; }

        /// <summary>
        /// Gets or sets the master target Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "masterTargetId")]
        public string MasterTargetId {get; set; }

        /// <summary>
        /// Gets or sets the CPU count of the VM on the primary side.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceVmCpuCount")]
        public int? SourceVMCpuCount {get; set; }

        /// <summary>
        /// Gets or sets the RAM size of the VM on the primary side.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceVmRamSizeInMB")]
        public int? SourceVMRamSizeInMb {get; set; }

        /// <summary>
        /// Gets or sets the type of the OS on the VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osType")]
        public string OSType {get; set; }

        /// <summary>
        /// Gets or sets the OS disk VHD name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vhdName")]
        public string VhdName {get; set; }

        /// <summary>
        /// Gets or sets the id of the disk containing the OS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osDiskId")]
        public string OSDiskId {get; set; }

        /// <summary>
        /// Gets or sets azure VM Disk details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azureVMDiskDetails")]
        public System.Collections.Generic.IList<AzureVmDiskDetails> AzureVMDiskDetails {get; set; }

        /// <summary>
        /// Gets or sets recovery Azure given name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recoveryAzureVMName")]
        public string RecoveryAzureVMName {get; set; }

        /// <summary>
        /// Gets or sets the Recovery Azure VM size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recoveryAzureVMSize")]
        public string RecoveryAzureVMSize {get; set; }

        /// <summary>
        /// Gets or sets the recovery Azure storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recoveryAzureStorageAccount")]
        public string RecoveryAzureStorageAccount {get; set; }

        /// <summary>
        /// Gets or sets the ARM id of the log storage account used for replication.
        /// This will be set to null if no log storage account was provided during
        /// enable protection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recoveryAzureLogStorageAccountId")]
        public string RecoveryAzureLogStorageAccountId {get; set; }

        /// <summary>
        /// Gets or sets the PE Network details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmNics")]
        public System.Collections.Generic.IList<VMNicDetails> VMNics {get; set; }

        /// <summary>
        /// Gets or sets the selected recovery azure network Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "selectedRecoveryAzureNetworkId")]
        public string SelectedRecoveryAzureNetworkId {get; set; }

        /// <summary>
        /// Gets or sets the test failover virtual network.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "selectedTfoAzureNetworkId")]
        public string SelectedTfoAzureNetworkId {get; set; }

        /// <summary>
        /// Gets or sets the selected source nic Id which will be used as the primary
        /// nic during failover.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "selectedSourceNicId")]
        public string SelectedSourceNicId {get; set; }

        /// <summary>
        /// Gets or sets a value indicating the discovery type of the machine. Value
        /// can be vCenter or physical.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "discoveryType")]
        public string DiscoveryType {get; set; }

        /// <summary>
        /// Gets or sets the selected option to enable RDP\SSH on target vm after
        /// failover. String value of SrsDataContract.EnableRDPOnTargetOption enum.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableRdpOnTargetOption")]
        public string EnableRdpOnTargetOption {get; set; }

        /// <summary>
        /// Gets or sets the datastores of the on-premise machine. Value can be list of
        /// strings that contain datastore names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "datastores")]
        public System.Collections.Generic.IList<string> Datastores {get; set; }

        /// <summary>
        /// Gets or sets the ARM Id of the target Azure VM. This value will be null
        /// until the VM is failed over. Only after failure it will be populated with
        /// the ARM Id of the Azure VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmId")]
        public string TargetVMId {get; set; }

        /// <summary>
        /// Gets or sets the target resource group Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recoveryAzureResourceGroupId")]
        public string RecoveryAzureResourceGroupId {get; set; }

        /// <summary>
        /// Gets or sets the recovery availability set Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recoveryAvailabilitySetId")]
        public string RecoveryAvailabilitySetId {get; set; }

        /// <summary>
        /// Gets or sets the target availability zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetAvailabilityZone")]
        public string TargetAvailabilityZone {get; set; }

        /// <summary>
        /// Gets or sets the target proximity placement group Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetProximityPlacementGroupId")]
        public string TargetProximityPlacementGroupId {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether managed disks should be used during
        /// failover.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "useManagedDisks")]
        public string UseManagedDisks {get; set; }

        /// <summary>
        /// Gets or sets license Type of the VM to be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "licenseType")]
        public string LicenseType {get; set; }

        /// <summary>
        /// Gets or sets the SQL Server license type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sqlServerLicenseType")]
        public string SqlServerLicenseType {get; set; }

        /// <summary>
        /// Gets or sets the validation errors of the on-premise machine Value can be
        /// list of validation errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "validationErrors")]
        public System.Collections.Generic.IList<HealthError> ValidationErrors {get; set; }

        /// <summary>
        /// Gets or sets the last RPO calculated time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastRpoCalculatedTime")]
        public System.DateTime? LastRpoCalculatedTime {get; set; }

        /// <summary>
        /// Gets or sets the last update time received from on-prem components.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastUpdateReceivedTime")]
        public System.DateTime? LastUpdateReceivedTime {get; set; }

        /// <summary>
        /// Gets or sets the replica id of the protected item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "replicaId")]
        public string ReplicaId {get; set; }

        /// <summary>
        /// Gets or sets the OS Version of the protected item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osVersion")]
        public string OSVersion {get; set; }

        /// <summary>
        /// Gets or sets the list of protected managed disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectedManagedDisks")]
        public System.Collections.Generic.IList<InMageAzureV2ManagedDiskDetails> ProtectedManagedDisks {get; set; }

        /// <summary>
        /// Gets the last recovery point received time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastRecoveryPointReceived")]
        public System.DateTime? LastRecoveryPointReceived {get; private set; }

        /// <summary>
        /// Gets or sets the firmware type of this protected item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "firmwareType")]
        public string FirmwareType {get; set; }

        /// <summary>
        /// Gets or sets the target generation for this protected item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azureVmGeneration")]
        public string AzureVMGeneration {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether additional IR stats are available
        /// or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isAdditionalStatsAvailable")]
        public bool? IsAdditionalStatsAvailable {get; set; }

        /// <summary>
        /// Gets or sets the total transferred data in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalDataTransferred")]
        public long? TotalDataTransferred {get; set; }

        /// <summary>
        /// Gets or sets the progress health.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalProgressHealth")]
        public string TotalProgressHealth {get; set; }

        /// <summary>
        /// Gets or sets the target VM tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmTags")]
        public System.Collections.Generic.IDictionary<string, string> TargetVMTags {get; set; }

        /// <summary>
        /// Gets or sets the tags for the seed managed disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "seedManagedDiskTags")]
        public System.Collections.Generic.IDictionary<string, string> SeedManagedDiskTags {get; set; }

        /// <summary>
        /// Gets or sets the tags for the target managed disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetManagedDiskTags")]
        public System.Collections.Generic.IDictionary<string, string> TargetManagedDiskTags {get; set; }

        /// <summary>
        /// Gets or sets the tags for the target NICs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetNicTags")]
        public System.Collections.Generic.IDictionary<string, string> TargetNicTags {get; set; }

        /// <summary>
        /// Gets or sets the switch provider blocking error information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "switchProviderBlockingErrorDetails")]
        public System.Collections.Generic.IList<InMageAzureV2SwitchProviderBlockingErrorDetails> SwitchProviderBlockingErrorDetails {get; set; }

        /// <summary>
        /// Gets or sets the switch provider blocking error information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "switchProviderDetails")]
        public InMageAzureV2SwitchProviderDetails SwitchProviderDetails {get; set; }
    }
}