// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// Details of the Process Server.
    /// </summary>
    public partial class ProcessServer
    {
        /// <summary>
        /// Initializes a new instance of the ProcessServer class.
        /// </summary>
        public ProcessServer()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProcessServer class.
        /// </summary>

        /// <param name="friendlyName">The Process Server&#39;s friendly name.
        /// </param>

        /// <param name="id">The Process Server Id.
        /// </param>

        /// <param name="ipAddress">The IP address of the server.
        /// </param>

        /// <param name="osType">The OS type of the server.
        /// </param>

        /// <param name="agentVersion">The version of the scout component on the server.
        /// </param>

        /// <param name="lastHeartbeat">The last heartbeat received from the server.
        /// </param>

        /// <param name="versionStatus">Version status.
        /// </param>

        /// <param name="mobilityServiceUpdates">The list of the mobility service updates available on the Process Server.
        /// </param>

        /// <param name="hostId">The agent generated Id.
        /// </param>

        /// <param name="machineCount">The servers configured with this PS.
        /// </param>

        /// <param name="replicationPairCount">The number of replication pairs configured in this PS.
        /// </param>

        /// <param name="systemLoad">The percentage of the system load.
        /// </param>

        /// <param name="systemLoadStatus">The system load status.
        /// </param>

        /// <param name="cpuLoad">The percentage of the CPU load.
        /// </param>

        /// <param name="cpuLoadStatus">The CPU load status.
        /// </param>

        /// <param name="totalMemoryInBytes">The total memory.
        /// </param>

        /// <param name="availableMemoryInBytes">The available memory.
        /// </param>

        /// <param name="memoryUsageStatus">The memory usage status.
        /// </param>

        /// <param name="totalSpaceInBytes">The total space.
        /// </param>

        /// <param name="availableSpaceInBytes">The available space.
        /// </param>

        /// <param name="spaceUsageStatus">The space usage status.
        /// </param>

        /// <param name="psServiceStatus">The PS service status.
        /// </param>

        /// <param name="sslCertExpiryDate">The PS SSL cert expiry date.
        /// </param>

        /// <param name="sslCertExpiryRemainingDays">CS SSL cert expiry date.
        /// </param>

        /// <param name="osVersion">OS Version of the process server. Note: This will get populated if user has
        /// CS version greater than 9.12.0.0.
        /// </param>

        /// <param name="healthErrors">Health errors.
        /// </param>

        /// <param name="agentExpiryDate">Agent expiry date.
        /// </param>

        /// <param name="agentVersionDetails">The agent version details.
        /// </param>

        /// <param name="health">The health of Process Server.
        /// Possible values include: 'None', 'Normal', 'Warning', 'Critical'</param>

        /// <param name="psStatsRefreshTime">The process server stats refresh time.
        /// </param>

        /// <param name="throughputUploadPendingDataInBytes">The uploading pending data in bytes.
        /// </param>

        /// <param name="throughputInMBps">The throughput in MBps.
        /// </param>

        /// <param name="throughputInBytes">The throughput in bytes.
        /// </param>

        /// <param name="throughputStatus">The throughput status.
        /// </param>

        /// <param name="marsCommunicationStatus">The MARS communication status.
        /// </param>

        /// <param name="marsRegistrationStatus">The MARS registration status.
        /// </param>
        public ProcessServer(string friendlyName = default(string), string id = default(string), string ipAddress = default(string), string osType = default(string), string agentVersion = default(string), System.DateTime? lastHeartbeat = default(System.DateTime?), string versionStatus = default(string), System.Collections.Generic.IList<MobilityServiceUpdate> mobilityServiceUpdates = default(System.Collections.Generic.IList<MobilityServiceUpdate>), string hostId = default(string), string machineCount = default(string), string replicationPairCount = default(string), string systemLoad = default(string), string systemLoadStatus = default(string), string cpuLoad = default(string), string cpuLoadStatus = default(string), long? totalMemoryInBytes = default(long?), long? availableMemoryInBytes = default(long?), string memoryUsageStatus = default(string), long? totalSpaceInBytes = default(long?), long? availableSpaceInBytes = default(long?), string spaceUsageStatus = default(string), string psServiceStatus = default(string), System.DateTime? sslCertExpiryDate = default(System.DateTime?), int? sslCertExpiryRemainingDays = default(int?), string osVersion = default(string), System.Collections.Generic.IList<HealthError> healthErrors = default(System.Collections.Generic.IList<HealthError>), System.DateTime? agentExpiryDate = default(System.DateTime?), VersionDetails agentVersionDetails = default(VersionDetails), string health = default(string), System.DateTime? psStatsRefreshTime = default(System.DateTime?), long? throughputUploadPendingDataInBytes = default(long?), long? throughputInMBps = default(long?), long? throughputInBytes = default(long?), string throughputStatus = default(string), string marsCommunicationStatus = default(string), string marsRegistrationStatus = default(string))

        {
            this.FriendlyName = friendlyName;
            this.Id = id;
            this.IPAddress = ipAddress;
            this.OSType = osType;
            this.AgentVersion = agentVersion;
            this.LastHeartbeat = lastHeartbeat;
            this.VersionStatus = versionStatus;
            this.MobilityServiceUpdates = mobilityServiceUpdates;
            this.HostId = hostId;
            this.MachineCount = machineCount;
            this.ReplicationPairCount = replicationPairCount;
            this.SystemLoad = systemLoad;
            this.SystemLoadStatus = systemLoadStatus;
            this.CpuLoad = cpuLoad;
            this.CpuLoadStatus = cpuLoadStatus;
            this.TotalMemoryInBytes = totalMemoryInBytes;
            this.AvailableMemoryInBytes = availableMemoryInBytes;
            this.MemoryUsageStatus = memoryUsageStatus;
            this.TotalSpaceInBytes = totalSpaceInBytes;
            this.AvailableSpaceInBytes = availableSpaceInBytes;
            this.SpaceUsageStatus = spaceUsageStatus;
            this.PsServiceStatus = psServiceStatus;
            this.SslCertExpiryDate = sslCertExpiryDate;
            this.SslCertExpiryRemainingDays = sslCertExpiryRemainingDays;
            this.OSVersion = osVersion;
            this.HealthErrors = healthErrors;
            this.AgentExpiryDate = agentExpiryDate;
            this.AgentVersionDetails = agentVersionDetails;
            this.Health = health;
            this.PsStatsRefreshTime = psStatsRefreshTime;
            this.ThroughputUploadPendingDataInBytes = throughputUploadPendingDataInBytes;
            this.ThroughputInMBps = throughputInMBps;
            this.ThroughputInBytes = throughputInBytes;
            this.ThroughputStatus = throughputStatus;
            this.MarsCommunicationStatus = marsCommunicationStatus;
            this.MarsRegistrationStatus = marsRegistrationStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the Process Server&#39;s friendly name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName {get; set; }

        /// <summary>
        /// Gets or sets the Process Server Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; set; }

        /// <summary>
        /// Gets or sets the IP address of the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipAddress")]
        public string IPAddress {get; set; }

        /// <summary>
        /// Gets or sets the OS type of the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osType")]
        public string OSType {get; set; }

        /// <summary>
        /// Gets or sets the version of the scout component on the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentVersion")]
        public string AgentVersion {get; set; }

        /// <summary>
        /// Gets or sets the last heartbeat received from the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastHeartbeat")]
        public System.DateTime? LastHeartbeat {get; set; }

        /// <summary>
        /// Gets or sets version status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "versionStatus")]
        public string VersionStatus {get; set; }

        /// <summary>
        /// Gets or sets the list of the mobility service updates available on the
        /// Process Server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mobilityServiceUpdates")]
        public System.Collections.Generic.IList<MobilityServiceUpdate> MobilityServiceUpdates {get; set; }

        /// <summary>
        /// Gets or sets the agent generated Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostId")]
        public string HostId {get; set; }

        /// <summary>
        /// Gets or sets the servers configured with this PS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "machineCount")]
        public string MachineCount {get; set; }

        /// <summary>
        /// Gets or sets the number of replication pairs configured in this PS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "replicationPairCount")]
        public string ReplicationPairCount {get; set; }

        /// <summary>
        /// Gets or sets the percentage of the system load.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "systemLoad")]
        public string SystemLoad {get; set; }

        /// <summary>
        /// Gets or sets the system load status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "systemLoadStatus")]
        public string SystemLoadStatus {get; set; }

        /// <summary>
        /// Gets or sets the percentage of the CPU load.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cpuLoad")]
        public string CpuLoad {get; set; }

        /// <summary>
        /// Gets or sets the CPU load status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cpuLoadStatus")]
        public string CpuLoadStatus {get; set; }

        /// <summary>
        /// Gets or sets the total memory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalMemoryInBytes")]
        public long? TotalMemoryInBytes {get; set; }

        /// <summary>
        /// Gets or sets the available memory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "availableMemoryInBytes")]
        public long? AvailableMemoryInBytes {get; set; }

        /// <summary>
        /// Gets or sets the memory usage status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "memoryUsageStatus")]
        public string MemoryUsageStatus {get; set; }

        /// <summary>
        /// Gets or sets the total space.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalSpaceInBytes")]
        public long? TotalSpaceInBytes {get; set; }

        /// <summary>
        /// Gets or sets the available space.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "availableSpaceInBytes")]
        public long? AvailableSpaceInBytes {get; set; }

        /// <summary>
        /// Gets or sets the space usage status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "spaceUsageStatus")]
        public string SpaceUsageStatus {get; set; }

        /// <summary>
        /// Gets or sets the PS service status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "psServiceStatus")]
        public string PsServiceStatus {get; set; }

        /// <summary>
        /// Gets or sets the PS SSL cert expiry date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sslCertExpiryDate")]
        public System.DateTime? SslCertExpiryDate {get; set; }

        /// <summary>
        /// Gets or sets cS SSL cert expiry date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sslCertExpiryRemainingDays")]
        public int? SslCertExpiryRemainingDays {get; set; }

        /// <summary>
        /// Gets or sets oS Version of the process server. Note: This will get
        /// populated if user has CS version greater than 9.12.0.0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osVersion")]
        public string OSVersion {get; set; }

        /// <summary>
        /// Gets or sets health errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "healthErrors")]
        public System.Collections.Generic.IList<HealthError> HealthErrors {get; set; }

        /// <summary>
        /// Gets or sets agent expiry date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentExpiryDate")]
        public System.DateTime? AgentExpiryDate {get; set; }

        /// <summary>
        /// Gets or sets the agent version details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentVersionDetails")]
        public VersionDetails AgentVersionDetails {get; set; }

        /// <summary>
        /// Gets the health of Process Server. Possible values include: &#39;None&#39;, &#39;Normal&#39;, &#39;Warning&#39;, &#39;Critical&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "health")]
        public string Health {get; private set; }

        /// <summary>
        /// Gets the process server stats refresh time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "psStatsRefreshTime")]
        public System.DateTime? PsStatsRefreshTime {get; private set; }

        /// <summary>
        /// Gets the uploading pending data in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "throughputUploadPendingDataInBytes")]
        public long? ThroughputUploadPendingDataInBytes {get; private set; }

        /// <summary>
        /// Gets the throughput in MBps.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "throughputInMBps")]
        public long? ThroughputInMBps {get; private set; }

        /// <summary>
        /// Gets the throughput in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "throughputInBytes")]
        public long? ThroughputInBytes {get; private set; }

        /// <summary>
        /// Gets the throughput status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "throughputStatus")]
        public string ThroughputStatus {get; private set; }

        /// <summary>
        /// Gets the MARS communication status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "marsCommunicationStatus")]
        public string MarsCommunicationStatus {get; private set; }

        /// <summary>
        /// Gets the MARS registration status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "marsRegistrationStatus")]
        public string MarsRegistrationStatus {get; private set; }
    }
}