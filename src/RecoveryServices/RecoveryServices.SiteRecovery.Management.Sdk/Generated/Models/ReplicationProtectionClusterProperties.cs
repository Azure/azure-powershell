// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// Replication protection cluster custom data details.
    /// </summary>
    public partial class ReplicationProtectionClusterProperties
    {
        /// <summary>
        /// Initializes a new instance of the ReplicationProtectionClusterProperties class.
        /// </summary>
        public ReplicationProtectionClusterProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReplicationProtectionClusterProperties class.
        /// </summary>

        /// <param name="protectionClusterType">The type of protection cluster type.
        /// </param>

        /// <param name="primaryFabricFriendlyName">The friendly name of the primary fabric.
        /// </param>

        /// <param name="primaryFabricProvider">The fabric provider of the primary fabric.
        /// </param>

        /// <param name="recoveryFabricFriendlyName">The friendly name of recovery fabric.
        /// </param>

        /// <param name="recoveryFabricId">The Arm Id of recovery fabric.
        /// </param>

        /// <param name="primaryProtectionContainerFriendlyName">The name of primary protection container friendly name.
        /// </param>

        /// <param name="recoveryProtectionContainerFriendlyName">The name of recovery container friendly name.
        /// </param>

        /// <param name="protectionState">The protection status.
        /// </param>

        /// <param name="protectionStateDescription">The protection state description.
        /// </param>

        /// <param name="activeLocation">The Current active location of the Protection cluster.
        /// </param>

        /// <param name="testFailoverState">The Test failover state.
        /// </param>

        /// <param name="testFailoverStateDescription">The Test failover state description.
        /// </param>

        /// <param name="allowedOperations">The allowed operations on the Replication protection cluster.
        /// </param>

        /// <param name="replicationHealth">The consolidated protection health for the VM taking any issues with SRS as
        /// well as all the replication units associated with the VM&#39;s replication
        /// group into account. This is a string representation of the ProtectionHealth
        /// enumeration.
        /// </param>

        /// <param name="healthErrors">List of health errors.
        /// </param>

        /// <param name="lastSuccessfulFailoverTime">The last successful failover time.
        /// </param>

        /// <param name="lastSuccessfulTestFailoverTime">The last successful test failover time.
        /// </param>

        /// <param name="policyFriendlyName">The name of Policy governing this PE.
        /// </param>

        /// <param name="currentScenario">The current scenario.
        /// </param>

        /// <param name="recoveryContainerId">The recovery container Id.
        /// </param>

        /// <param name="agentClusterId">The Agent cluster Id.
        /// </param>

        /// <param name="clusterFqdn">The cluster FQDN.
        /// </param>

        /// <param name="clusterNodeFqdns">The List of cluster Node FQDNs.
        /// </param>

        /// <param name="clusterProtectedItemIds">The List of Protected Item Id&#39;s.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the cluster.
        /// </param>

        /// <param name="areAllClusterNodesRegistered">A value indicating whether all nodes of the cluster are registered or not.
        /// </param>

        /// <param name="clusterRegisteredNodes">The registered node details.
        /// </param>

        /// <param name="providerSpecificDetails">The Replication cluster provider custom settings.
        /// </param>

        /// <param name="sharedDiskProperties">The shared disk properties.
        /// </param>

        /// <param name="policyId">The Policy Id.
        /// </param>
        public ReplicationProtectionClusterProperties(string protectionClusterType = default(string), string primaryFabricFriendlyName = default(string), string primaryFabricProvider = default(string), string recoveryFabricFriendlyName = default(string), string recoveryFabricId = default(string), string primaryProtectionContainerFriendlyName = default(string), string recoveryProtectionContainerFriendlyName = default(string), string protectionState = default(string), string protectionStateDescription = default(string), string activeLocation = default(string), string testFailoverState = default(string), string testFailoverStateDescription = default(string), System.Collections.Generic.IList<string> allowedOperations = default(System.Collections.Generic.IList<string>), string replicationHealth = default(string), System.Collections.Generic.IList<HealthError> healthErrors = default(System.Collections.Generic.IList<HealthError>), System.DateTime? lastSuccessfulFailoverTime = default(System.DateTime?), System.DateTime? lastSuccessfulTestFailoverTime = default(System.DateTime?), string policyFriendlyName = default(string), CurrentScenarioDetails currentScenario = default(CurrentScenarioDetails), string recoveryContainerId = default(string), string agentClusterId = default(string), string clusterFqdn = default(string), System.Collections.Generic.IList<string> clusterNodeFqdns = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> clusterProtectedItemIds = default(System.Collections.Generic.IList<string>), string provisioningState = default(string), bool? areAllClusterNodesRegistered = default(bool?), System.Collections.Generic.IList<RegisteredClusterNodes> clusterRegisteredNodes = default(System.Collections.Generic.IList<RegisteredClusterNodes>), ReplicationClusterProviderSpecificSettings providerSpecificDetails = default(ReplicationClusterProviderSpecificSettings), SharedDiskReplicationItemProperties sharedDiskProperties = default(SharedDiskReplicationItemProperties), string policyId = default(string))

        {
            this.ProtectionClusterType = protectionClusterType;
            this.PrimaryFabricFriendlyName = primaryFabricFriendlyName;
            this.PrimaryFabricProvider = primaryFabricProvider;
            this.RecoveryFabricFriendlyName = recoveryFabricFriendlyName;
            this.RecoveryFabricId = recoveryFabricId;
            this.PrimaryProtectionContainerFriendlyName = primaryProtectionContainerFriendlyName;
            this.RecoveryProtectionContainerFriendlyName = recoveryProtectionContainerFriendlyName;
            this.ProtectionState = protectionState;
            this.ProtectionStateDescription = protectionStateDescription;
            this.ActiveLocation = activeLocation;
            this.TestFailoverState = testFailoverState;
            this.TestFailoverStateDescription = testFailoverStateDescription;
            this.AllowedOperations = allowedOperations;
            this.ReplicationHealth = replicationHealth;
            this.HealthErrors = healthErrors;
            this.LastSuccessfulFailoverTime = lastSuccessfulFailoverTime;
            this.LastSuccessfulTestFailoverTime = lastSuccessfulTestFailoverTime;
            this.PolicyFriendlyName = policyFriendlyName;
            this.CurrentScenario = currentScenario;
            this.RecoveryContainerId = recoveryContainerId;
            this.AgentClusterId = agentClusterId;
            this.ClusterFqdn = clusterFqdn;
            this.ClusterNodeFqdns = clusterNodeFqdns;
            this.ClusterProtectedItemIds = clusterProtectedItemIds;
            this.ProvisioningState = provisioningState;
            this.AreAllClusterNodesRegistered = areAllClusterNodesRegistered;
            this.ClusterRegisteredNodes = clusterRegisteredNodes;
            this.ProviderSpecificDetails = providerSpecificDetails;
            this.SharedDiskProperties = sharedDiskProperties;
            this.PolicyId = policyId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the type of protection cluster type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectionClusterType")]
        public string ProtectionClusterType {get; set; }

        /// <summary>
        /// Gets or sets the friendly name of the primary fabric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryFabricFriendlyName")]
        public string PrimaryFabricFriendlyName {get; set; }

        /// <summary>
        /// Gets or sets the fabric provider of the primary fabric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryFabricProvider")]
        public string PrimaryFabricProvider {get; set; }

        /// <summary>
        /// Gets or sets the friendly name of recovery fabric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recoveryFabricFriendlyName")]
        public string RecoveryFabricFriendlyName {get; set; }

        /// <summary>
        /// Gets or sets the Arm Id of recovery fabric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recoveryFabricId")]
        public string RecoveryFabricId {get; set; }

        /// <summary>
        /// Gets or sets the name of primary protection container friendly name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryProtectionContainerFriendlyName")]
        public string PrimaryProtectionContainerFriendlyName {get; set; }

        /// <summary>
        /// Gets or sets the name of recovery container friendly name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recoveryProtectionContainerFriendlyName")]
        public string RecoveryProtectionContainerFriendlyName {get; set; }

        /// <summary>
        /// Gets or sets the protection status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectionState")]
        public string ProtectionState {get; set; }

        /// <summary>
        /// Gets or sets the protection state description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectionStateDescription")]
        public string ProtectionStateDescription {get; set; }

        /// <summary>
        /// Gets or sets the Current active location of the Protection cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "activeLocation")]
        public string ActiveLocation {get; set; }

        /// <summary>
        /// Gets or sets the Test failover state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "testFailoverState")]
        public string TestFailoverState {get; set; }

        /// <summary>
        /// Gets or sets the Test failover state description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "testFailoverStateDescription")]
        public string TestFailoverStateDescription {get; set; }

        /// <summary>
        /// Gets or sets the allowed operations on the Replication protection cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowedOperations")]
        public System.Collections.Generic.IList<string> AllowedOperations {get; set; }

        /// <summary>
        /// Gets or sets the consolidated protection health for the VM taking any
        /// issues with SRS as well as all the replication units associated with the
        /// VM&#39;s replication group into account. This is a string representation of the
        /// ProtectionHealth enumeration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "replicationHealth")]
        public string ReplicationHealth {get; set; }

        /// <summary>
        /// Gets or sets list of health errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "healthErrors")]
        public System.Collections.Generic.IList<HealthError> HealthErrors {get; set; }

        /// <summary>
        /// Gets or sets the last successful failover time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastSuccessfulFailoverTime")]
        public System.DateTime? LastSuccessfulFailoverTime {get; set; }

        /// <summary>
        /// Gets or sets the last successful test failover time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastSuccessfulTestFailoverTime")]
        public System.DateTime? LastSuccessfulTestFailoverTime {get; set; }

        /// <summary>
        /// Gets or sets the name of Policy governing this PE.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyFriendlyName")]
        public string PolicyFriendlyName {get; set; }

        /// <summary>
        /// Gets or sets the current scenario.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "currentScenario")]
        public CurrentScenarioDetails CurrentScenario {get; set; }

        /// <summary>
        /// Gets or sets the recovery container Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recoveryContainerId")]
        public string RecoveryContainerId {get; set; }

        /// <summary>
        /// Gets or sets the Agent cluster Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentClusterId")]
        public string AgentClusterId {get; set; }

        /// <summary>
        /// Gets or sets the cluster FQDN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clusterFqdn")]
        public string ClusterFqdn {get; set; }

        /// <summary>
        /// Gets or sets the List of cluster Node FQDNs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clusterNodeFqdns")]
        public System.Collections.Generic.IList<string> ClusterNodeFqdns {get; set; }

        /// <summary>
        /// Gets or sets the List of Protected Item Id&#39;s.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clusterProtectedItemIds")]
        public System.Collections.Generic.IList<string> ClusterProtectedItemIds {get; set; }

        /// <summary>
        /// Gets the provisioning state of the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets a value indicating whether all nodes of the cluster are
        /// registered or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "areAllClusterNodesRegistered")]
        public bool? AreAllClusterNodesRegistered {get; set; }

        /// <summary>
        /// Gets or sets the registered node details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clusterRegisteredNodes")]
        public System.Collections.Generic.IList<RegisteredClusterNodes> ClusterRegisteredNodes {get; set; }

        /// <summary>
        /// Gets or sets the Replication cluster provider custom settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "providerSpecificDetails")]
        public ReplicationClusterProviderSpecificSettings ProviderSpecificDetails {get; set; }

        /// <summary>
        /// Gets or sets the shared disk properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sharedDiskProperties")]
        public SharedDiskReplicationItemProperties SharedDiskProperties {get; set; }

        /// <summary>
        /// Gets or sets the Policy Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyId")]
        public string PolicyId {get; set; }
    }
}