// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// InMageRcm specific enable protection input.
    /// </summary>
    [Newtonsoft.Json.JsonObject("InMageRcm")]
    public partial class InMageRcmEnableProtectionInput : EnableProtectionProviderSpecificInput
    {
        /// <summary>
        /// Initializes a new instance of the InMageRcmEnableProtectionInput class.
        /// </summary>
        public InMageRcmEnableProtectionInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InMageRcmEnableProtectionInput class.
        /// </summary>

        /// <param name="fabricDiscoveryMachineId">The ARM Id of discovered machine.
        /// </param>

        /// <param name="disksToInclude">The disks to include list.
        /// </param>

        /// <param name="disksDefault">The default disk input.
        /// </param>

        /// <param name="targetResourceGroupId">The target resource group ARM Id.
        /// </param>

        /// <param name="targetNetworkId">The selected target network ARM Id.
        /// </param>

        /// <param name="testNetworkId">The selected test network ARM Id.
        /// </param>

        /// <param name="targetSubnetName">The selected target subnet name.
        /// </param>

        /// <param name="testSubnetName">The selected test subnet name.
        /// </param>

        /// <param name="targetVMName">The target VM name.
        /// </param>

        /// <param name="targetVMSize">The target VM size.
        /// </param>

        /// <param name="licenseType">The license type.
        /// Possible values include: 'NotSpecified', 'NoLicenseType', 'WindowsServer'</param>

        /// <param name="targetAvailabilitySetId">The target availability set ARM Id.
        /// </param>

        /// <param name="targetAvailabilityZone">The target availability zone.
        /// </param>

        /// <param name="targetProximityPlacementGroupId">The target proximity placement group Id.
        /// </param>

        /// <param name="targetBootDiagnosticsStorageAccountId">The target boot diagnostics storage account ARM Id.
        /// </param>

        /// <param name="runAsAccountId">The run-as account Id.
        /// </param>

        /// <param name="processServerId">The process server Id.
        /// </param>

        /// <param name="multiVMGroupName">The multi VM group name.
        /// </param>
        public InMageRcmEnableProtectionInput(string fabricDiscoveryMachineId, string targetResourceGroupId, string processServerId, System.Collections.Generic.IList<InMageRcmDiskInput> disksToInclude = default(System.Collections.Generic.IList<InMageRcmDiskInput>), InMageRcmDisksDefaultInput disksDefault = default(InMageRcmDisksDefaultInput), string targetNetworkId = default(string), string testNetworkId = default(string), string targetSubnetName = default(string), string testSubnetName = default(string), string targetVMName = default(string), string targetVMSize = default(string), string licenseType = default(string), string targetAvailabilitySetId = default(string), string targetAvailabilityZone = default(string), string targetProximityPlacementGroupId = default(string), string targetBootDiagnosticsStorageAccountId = default(string), string runAsAccountId = default(string), string multiVMGroupName = default(string))

        {
            this.FabricDiscoveryMachineId = fabricDiscoveryMachineId;
            this.DisksToInclude = disksToInclude;
            this.DisksDefault = disksDefault;
            this.TargetResourceGroupId = targetResourceGroupId;
            this.TargetNetworkId = targetNetworkId;
            this.TestNetworkId = testNetworkId;
            this.TargetSubnetName = targetSubnetName;
            this.TestSubnetName = testSubnetName;
            this.TargetVMName = targetVMName;
            this.TargetVMSize = targetVMSize;
            this.LicenseType = licenseType;
            this.TargetAvailabilitySetId = targetAvailabilitySetId;
            this.TargetAvailabilityZone = targetAvailabilityZone;
            this.TargetProximityPlacementGroupId = targetProximityPlacementGroupId;
            this.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountId;
            this.RunAsAccountId = runAsAccountId;
            this.ProcessServerId = processServerId;
            this.MultiVMGroupName = multiVMGroupName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the ARM Id of discovered machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fabricDiscoveryMachineId")]
        public string FabricDiscoveryMachineId {get; set; }

        /// <summary>
        /// Gets or sets the disks to include list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disksToInclude")]
        public System.Collections.Generic.IList<InMageRcmDiskInput> DisksToInclude {get; set; }

        /// <summary>
        /// Gets or sets the default disk input.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disksDefault")]
        public InMageRcmDisksDefaultInput DisksDefault {get; set; }

        /// <summary>
        /// Gets or sets the target resource group ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetResourceGroupId")]
        public string TargetResourceGroupId {get; set; }

        /// <summary>
        /// Gets or sets the selected target network ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetNetworkId")]
        public string TargetNetworkId {get; set; }

        /// <summary>
        /// Gets or sets the selected test network ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "testNetworkId")]
        public string TestNetworkId {get; set; }

        /// <summary>
        /// Gets or sets the selected target subnet name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetSubnetName")]
        public string TargetSubnetName {get; set; }

        /// <summary>
        /// Gets or sets the selected test subnet name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "testSubnetName")]
        public string TestSubnetName {get; set; }

        /// <summary>
        /// Gets or sets the target VM name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmName")]
        public string TargetVMName {get; set; }

        /// <summary>
        /// Gets or sets the target VM size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmSize")]
        public string TargetVMSize {get; set; }

        /// <summary>
        /// Gets or sets the license type. Possible values include: &#39;NotSpecified&#39;, &#39;NoLicenseType&#39;, &#39;WindowsServer&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "licenseType")]
        public string LicenseType {get; set; }

        /// <summary>
        /// Gets or sets the target availability set ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetAvailabilitySetId")]
        public string TargetAvailabilitySetId {get; set; }

        /// <summary>
        /// Gets or sets the target availability zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetAvailabilityZone")]
        public string TargetAvailabilityZone {get; set; }

        /// <summary>
        /// Gets or sets the target proximity placement group Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetProximityPlacementGroupId")]
        public string TargetProximityPlacementGroupId {get; set; }

        /// <summary>
        /// Gets or sets the target boot diagnostics storage account ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetBootDiagnosticsStorageAccountId")]
        public string TargetBootDiagnosticsStorageAccountId {get; set; }

        /// <summary>
        /// Gets or sets the run-as account Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runAsAccountId")]
        public string RunAsAccountId {get; set; }

        /// <summary>
        /// Gets or sets the process server Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "processServerId")]
        public string ProcessServerId {get; set; }

        /// <summary>
        /// Gets or sets the multi VM group name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "multiVmGroupName")]
        public string MultiVMGroupName {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.FabricDiscoveryMachineId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "FabricDiscoveryMachineId");
            }
            if (this.TargetResourceGroupId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TargetResourceGroupId");
            }
            if (this.ProcessServerId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ProcessServerId");
            }

            if (this.DisksToInclude != null)
            {
                foreach (var element in this.DisksToInclude)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.DisksDefault != null)
            {
                this.DisksDefault.Validate();
            }















        }
    }
}