// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// VMwareCbt disk input for update.
    /// </summary>
    public partial class VMwareCbtUpdateDiskInput
    {
        /// <summary>
        /// Initializes a new instance of the VMwareCbtUpdateDiskInput class.
        /// </summary>
        public VMwareCbtUpdateDiskInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VMwareCbtUpdateDiskInput class.
        /// </summary>

        /// <param name="diskId">The disk Id.
        /// </param>

        /// <param name="targetDiskName">The target disk name.
        /// </param>

        /// <param name="isOSDisk">A value indicating whether the disk is the OS disk.
        /// </param>

        /// <param name="iops">The number of IOPS allowed for Premium V2 and Ultra disks.
        /// </param>

        /// <param name="throughputInMbps">The total throughput in Mbps for Premium V2 and Ultra disks.
        /// </param>

        /// <param name="diskSizeInGb">The target disk size in GB.
        /// </param>
        public VMwareCbtUpdateDiskInput(string diskId, string targetDiskName = default(string), string isOSDisk = default(string), long? iops = default(long?), long? throughputInMbps = default(long?), long? diskSizeInGb = default(long?))

        {
            this.DiskId = diskId;
            this.TargetDiskName = targetDiskName;
            this.IsOSDisk = isOSDisk;
            this.Iops = iops;
            this.ThroughputInMbps = throughputInMbps;
            this.DiskSizeInGb = diskSizeInGb;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the disk Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskId")]
        public string DiskId {get; set; }

        /// <summary>
        /// Gets or sets the target disk name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetDiskName")]
        public string TargetDiskName {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the disk is the OS disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isOSDisk")]
        public string IsOSDisk {get; set; }

        /// <summary>
        /// Gets or sets the number of IOPS allowed for Premium V2 and Ultra disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "iops")]
        public long? Iops {get; set; }

        /// <summary>
        /// Gets or sets the total throughput in Mbps for Premium V2 and Ultra disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "throughputInMbps")]
        public long? ThroughputInMbps {get; set; }

        /// <summary>
        /// Gets or sets the target disk size in GB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskSizeInGB")]
        public long? DiskSizeInGb {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DiskId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DiskId");
            }



        }
    }
}