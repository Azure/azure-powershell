// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// Recovery plan group details.
    /// </summary>
    public partial class RecoveryPlanGroup
    {
        /// <summary>
        /// Initializes a new instance of the RecoveryPlanGroup class.
        /// </summary>
        public RecoveryPlanGroup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RecoveryPlanGroup class.
        /// </summary>

        /// <param name="groupType">The group type.
        /// Possible values include: 'Shutdown', 'Boot', 'Failover'</param>

        /// <param name="replicationProtectedItems">The list of protected items.
        /// </param>

        /// <param name="startGroupActions">The start group actions.
        /// </param>

        /// <param name="endGroupActions">The end group actions.
        /// </param>
        public RecoveryPlanGroup(string groupType, System.Collections.Generic.IList<RecoveryPlanProtectedItem> replicationProtectedItems = default(System.Collections.Generic.IList<RecoveryPlanProtectedItem>), System.Collections.Generic.IList<RecoveryPlanAction> startGroupActions = default(System.Collections.Generic.IList<RecoveryPlanAction>), System.Collections.Generic.IList<RecoveryPlanAction> endGroupActions = default(System.Collections.Generic.IList<RecoveryPlanAction>))

        {
            this.GroupType = groupType;
            this.ReplicationProtectedItems = replicationProtectedItems;
            this.StartGroupActions = startGroupActions;
            this.EndGroupActions = endGroupActions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the group type. Possible values include: &#39;Shutdown&#39;, &#39;Boot&#39;, &#39;Failover&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "groupType")]
        public string GroupType {get; set; }

        /// <summary>
        /// Gets or sets the list of protected items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "replicationProtectedItems")]
        public System.Collections.Generic.IList<RecoveryPlanProtectedItem> ReplicationProtectedItems {get; set; }

        /// <summary>
        /// Gets or sets the start group actions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startGroupActions")]
        public System.Collections.Generic.IList<RecoveryPlanAction> StartGroupActions {get; set; }

        /// <summary>
        /// Gets or sets the end group actions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endGroupActions")]
        public System.Collections.Generic.IList<RecoveryPlanAction> EndGroupActions {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.GroupType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "GroupType");
            }


            if (this.StartGroupActions != null)
            {
                foreach (var element in this.StartGroupActions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.EndGroupActions != null)
            {
                foreach (var element in this.EndGroupActions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}