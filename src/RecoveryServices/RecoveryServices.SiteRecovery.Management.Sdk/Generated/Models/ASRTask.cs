// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// Task of the Job.
    /// </summary>
    public partial class ASRTask
    {
        /// <summary>
        /// Initializes a new instance of the ASRTask class.
        /// </summary>
        public ASRTask()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ASRTask class.
        /// </summary>

        /// <param name="taskId">The Id.
        /// </param>

        /// <param name="name">The unique Task name.
        /// </param>

        /// <param name="startTime">The start time.
        /// </param>

        /// <param name="endTime">The end time.
        /// </param>

        /// <param name="allowedActions">The state/actions applicable on this task.
        /// </param>

        /// <param name="friendlyName">The name.
        /// </param>

        /// <param name="state">The State. It is one of these values - NotStarted, InProgress, Succeeded,
        /// Failed, Cancelled, Suspended or Other.
        /// </param>

        /// <param name="stateDescription">The description of the task state. For example - For Succeeded state,
        /// description can be Completed, PartiallySucceeded, CompletedWithInformation
        /// or Skipped.
        /// </param>

        /// <param name="taskType">The type of task. Details in CustomDetails property depend on this type.
        /// </param>

        /// <param name="customDetails">The custom task details based on the task type.
        /// </param>

        /// <param name="groupTaskCustomDetails">The custom task details based on the task type, if the task type is
        /// GroupTaskDetails or one of the types derived from it.
        /// </param>

        /// <param name="errors">The task error details.
        /// </param>
        public ASRTask(string taskId = default(string), string name = default(string), System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), System.Collections.Generic.IList<string> allowedActions = default(System.Collections.Generic.IList<string>), string friendlyName = default(string), string state = default(string), string stateDescription = default(string), string taskType = default(string), TaskTypeDetails customDetails = default(TaskTypeDetails), GroupTaskDetails groupTaskCustomDetails = default(GroupTaskDetails), System.Collections.Generic.IList<JobErrorDetails> errors = default(System.Collections.Generic.IList<JobErrorDetails>))

        {
            this.TaskId = taskId;
            this.Name = name;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.AllowedActions = allowedActions;
            this.FriendlyName = friendlyName;
            this.State = state;
            this.StateDescription = stateDescription;
            this.TaskType = taskType;
            this.CustomDetails = customDetails;
            this.GroupTaskCustomDetails = groupTaskCustomDetails;
            this.Errors = errors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taskId")]
        public string TaskId {get; set; }

        /// <summary>
        /// Gets or sets the unique Task name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets the start time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTime")]
        public System.DateTime? StartTime {get; set; }

        /// <summary>
        /// Gets or sets the end time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endTime")]
        public System.DateTime? EndTime {get; set; }

        /// <summary>
        /// Gets or sets the state/actions applicable on this task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowedActions")]
        public System.Collections.Generic.IList<string> AllowedActions {get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName {get; set; }

        /// <summary>
        /// Gets or sets the State. It is one of these values - NotStarted, InProgress,
        /// Succeeded, Failed, Cancelled, Suspended or Other.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; set; }

        /// <summary>
        /// Gets or sets the description of the task state. For example - For Succeeded
        /// state, description can be Completed, PartiallySucceeded,
        /// CompletedWithInformation or Skipped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "stateDescription")]
        public string StateDescription {get; set; }

        /// <summary>
        /// Gets or sets the type of task. Details in CustomDetails property depend on
        /// this type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taskType")]
        public string TaskType {get; set; }

        /// <summary>
        /// Gets or sets the custom task details based on the task type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customDetails")]
        public TaskTypeDetails CustomDetails {get; set; }

        /// <summary>
        /// Gets or sets the custom task details based on the task type, if the task
        /// type is GroupTaskDetails or one of the types derived from it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "groupTaskCustomDetails")]
        public GroupTaskDetails GroupTaskCustomDetails {get; set; }

        /// <summary>
        /// Gets or sets the task error details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "errors")]
        public System.Collections.Generic.IList<JobErrorDetails> Errors {get; set; }
    }
}