// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// VMwareCbt specific enable migration input.
    /// </summary>
    [Newtonsoft.Json.JsonObject("VMwareCbt")]
    public partial class VMwareCbtEnableMigrationInput : EnableMigrationProviderSpecificInput
    {
        /// <summary>
        /// Initializes a new instance of the VMwareCbtEnableMigrationInput class.
        /// </summary>
        public VMwareCbtEnableMigrationInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VMwareCbtEnableMigrationInput class.
        /// </summary>

        /// <param name="vmwareMachineId">The ARM Id of the VM discovered in VMware.
        /// </param>

        /// <param name="disksToInclude">The disks to include list.
        /// </param>

        /// <param name="licenseType">License type.
        /// Possible values include: 'NotSpecified', 'NoLicenseType', 'WindowsServer'</param>

        /// <param name="sqlServerLicenseType">The SQL Server license type.
        /// Possible values include: 'NotSpecified', 'NoLicenseType', 'PAYG', 'AHUB'</param>

        /// <param name="performSqlBulkRegistration">A value indicating whether bulk SQL RP registration to be done.
        /// </param>

        /// <param name="dataMoverRunAsAccountId">The data mover run as account Id.
        /// </param>

        /// <param name="snapshotRunAsAccountId">The snapshot run as account Id.
        /// </param>

        /// <param name="targetVMName">The target VM name.
        /// </param>

        /// <param name="targetVMSize">The target VM size.
        /// </param>

        /// <param name="targetResourceGroupId">The target resource group ARM Id.
        /// </param>

        /// <param name="targetNetworkId">The target network ARM Id.
        /// </param>

        /// <param name="testNetworkId">The selected test network ARM Id.
        /// </param>

        /// <param name="targetSubnetName">The target subnet name.
        /// </param>

        /// <param name="testSubnetName">The selected test subnet name.
        /// </param>

        /// <param name="targetAvailabilitySetId">The target availability set ARM Id.
        /// </param>

        /// <param name="targetAvailabilityZone">The target availability zone.
        /// </param>

        /// <param name="targetProximityPlacementGroupId">The target proximity placement group ARM Id.
        /// </param>

        /// <param name="confidentialVMKeyVaultId">The confidential VM key vault Id for ADE installation.
        /// </param>

        /// <param name="targetVMSecurityProfile">The target VM security profile.
        /// </param>

        /// <param name="targetBootDiagnosticsStorageAccountId">The target boot diagnostics storage account ARM Id.
        /// </param>

        /// <param name="performAutoResync">A value indicating whether auto resync is to be done.
        /// </param>

        /// <param name="targetVMTags">The target VM tags.
        /// </param>

        /// <param name="seedDiskTags">The tags for the seed disks.
        /// </param>

        /// <param name="targetDiskTags">The tags for the target disks.
        /// </param>

        /// <param name="targetNicTags">The tags for the target NICs.
        /// </param>
        public VMwareCbtEnableMigrationInput(string vmwareMachineId, System.Collections.Generic.IList<VMwareCbtDiskInput> disksToInclude, string dataMoverRunAsAccountId, string snapshotRunAsAccountId, string targetResourceGroupId, string targetNetworkId, string licenseType = default(string), string sqlServerLicenseType = default(string), string performSqlBulkRegistration = default(string), string targetVMName = default(string), string targetVMSize = default(string), string testNetworkId = default(string), string targetSubnetName = default(string), string testSubnetName = default(string), string targetAvailabilitySetId = default(string), string targetAvailabilityZone = default(string), string targetProximityPlacementGroupId = default(string), string confidentialVMKeyVaultId = default(string), VMwareCbtSecurityProfileProperties targetVMSecurityProfile = default(VMwareCbtSecurityProfileProperties), string targetBootDiagnosticsStorageAccountId = default(string), string performAutoResync = default(string), System.Collections.Generic.IDictionary<string, string> targetVMTags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> seedDiskTags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> targetDiskTags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> targetNicTags = default(System.Collections.Generic.IDictionary<string, string>))

        {
            this.VmwareMachineId = vmwareMachineId;
            this.DisksToInclude = disksToInclude;
            this.LicenseType = licenseType;
            this.SqlServerLicenseType = sqlServerLicenseType;
            this.PerformSqlBulkRegistration = performSqlBulkRegistration;
            this.DataMoverRunAsAccountId = dataMoverRunAsAccountId;
            this.SnapshotRunAsAccountId = snapshotRunAsAccountId;
            this.TargetVMName = targetVMName;
            this.TargetVMSize = targetVMSize;
            this.TargetResourceGroupId = targetResourceGroupId;
            this.TargetNetworkId = targetNetworkId;
            this.TestNetworkId = testNetworkId;
            this.TargetSubnetName = targetSubnetName;
            this.TestSubnetName = testSubnetName;
            this.TargetAvailabilitySetId = targetAvailabilitySetId;
            this.TargetAvailabilityZone = targetAvailabilityZone;
            this.TargetProximityPlacementGroupId = targetProximityPlacementGroupId;
            this.ConfidentialVMKeyVaultId = confidentialVMKeyVaultId;
            this.TargetVMSecurityProfile = targetVMSecurityProfile;
            this.TargetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountId;
            this.PerformAutoResync = performAutoResync;
            this.TargetVMTags = targetVMTags;
            this.SeedDiskTags = seedDiskTags;
            this.TargetDiskTags = targetDiskTags;
            this.TargetNicTags = targetNicTags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the ARM Id of the VM discovered in VMware.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmwareMachineId")]
        public string VmwareMachineId {get; set; }

        /// <summary>
        /// Gets or sets the disks to include list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disksToInclude")]
        public System.Collections.Generic.IList<VMwareCbtDiskInput> DisksToInclude {get; set; }

        /// <summary>
        /// Gets or sets license type. Possible values include: &#39;NotSpecified&#39;, &#39;NoLicenseType&#39;, &#39;WindowsServer&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "licenseType")]
        public string LicenseType {get; set; }

        /// <summary>
        /// Gets or sets the SQL Server license type. Possible values include: &#39;NotSpecified&#39;, &#39;NoLicenseType&#39;, &#39;PAYG&#39;, &#39;AHUB&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sqlServerLicenseType")]
        public string SqlServerLicenseType {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether bulk SQL RP registration to be
        /// done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "performSqlBulkRegistration")]
        public string PerformSqlBulkRegistration {get; set; }

        /// <summary>
        /// Gets or sets the data mover run as account Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataMoverRunAsAccountId")]
        public string DataMoverRunAsAccountId {get; set; }

        /// <summary>
        /// Gets or sets the snapshot run as account Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "snapshotRunAsAccountId")]
        public string SnapshotRunAsAccountId {get; set; }

        /// <summary>
        /// Gets or sets the target VM name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmName")]
        public string TargetVMName {get; set; }

        /// <summary>
        /// Gets or sets the target VM size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmSize")]
        public string TargetVMSize {get; set; }

        /// <summary>
        /// Gets or sets the target resource group ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetResourceGroupId")]
        public string TargetResourceGroupId {get; set; }

        /// <summary>
        /// Gets or sets the target network ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetNetworkId")]
        public string TargetNetworkId {get; set; }

        /// <summary>
        /// Gets or sets the selected test network ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "testNetworkId")]
        public string TestNetworkId {get; set; }

        /// <summary>
        /// Gets or sets the target subnet name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetSubnetName")]
        public string TargetSubnetName {get; set; }

        /// <summary>
        /// Gets or sets the selected test subnet name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "testSubnetName")]
        public string TestSubnetName {get; set; }

        /// <summary>
        /// Gets or sets the target availability set ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetAvailabilitySetId")]
        public string TargetAvailabilitySetId {get; set; }

        /// <summary>
        /// Gets or sets the target availability zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetAvailabilityZone")]
        public string TargetAvailabilityZone {get; set; }

        /// <summary>
        /// Gets or sets the target proximity placement group ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetProximityPlacementGroupId")]
        public string TargetProximityPlacementGroupId {get; set; }

        /// <summary>
        /// Gets or sets the confidential VM key vault Id for ADE installation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "confidentialVmKeyVaultId")]
        public string ConfidentialVMKeyVaultId {get; set; }

        /// <summary>
        /// Gets or sets the target VM security profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmSecurityProfile")]
        public VMwareCbtSecurityProfileProperties TargetVMSecurityProfile {get; set; }

        /// <summary>
        /// Gets or sets the target boot diagnostics storage account ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetBootDiagnosticsStorageAccountId")]
        public string TargetBootDiagnosticsStorageAccountId {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether auto resync is to be done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "performAutoResync")]
        public string PerformAutoResync {get; set; }

        /// <summary>
        /// Gets or sets the target VM tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmTags")]
        public System.Collections.Generic.IDictionary<string, string> TargetVMTags {get; set; }

        /// <summary>
        /// Gets or sets the tags for the seed disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "seedDiskTags")]
        public System.Collections.Generic.IDictionary<string, string> SeedDiskTags {get; set; }

        /// <summary>
        /// Gets or sets the tags for the target disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetDiskTags")]
        public System.Collections.Generic.IDictionary<string, string> TargetDiskTags {get; set; }

        /// <summary>
        /// Gets or sets the tags for the target NICs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetNicTags")]
        public System.Collections.Generic.IDictionary<string, string> TargetNicTags {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.VmwareMachineId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "VmwareMachineId");
            }
            if (this.DisksToInclude == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DisksToInclude");
            }
            if (this.DataMoverRunAsAccountId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DataMoverRunAsAccountId");
            }
            if (this.SnapshotRunAsAccountId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SnapshotRunAsAccountId");
            }
            if (this.TargetResourceGroupId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TargetResourceGroupId");
            }
            if (this.TargetNetworkId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TargetNetworkId");
            }

            if (this.DisksToInclude != null)
            {
                foreach (var element in this.DisksToInclude)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }























        }
    }
}