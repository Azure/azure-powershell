// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// InMageRcm add disk(s) input.
    /// </summary>
    [Newtonsoft.Json.JsonObject("InMageRcm")]
    public partial class InMageRcmAddDisksInput : AddDisksProviderSpecificInput
    {
        /// <summary>
        /// Initializes a new instance of the InMageRcmAddDisksInput class.
        /// </summary>
        public InMageRcmAddDisksInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InMageRcmAddDisksInput class.
        /// </summary>

        /// <param name="disks">The list of disk details.
        /// </param>
        public InMageRcmAddDisksInput(System.Collections.Generic.IList<InMageRcmDiskInput> disks)

        {
            this.Disks = disks;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the list of disk details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disks")]
        public System.Collections.Generic.IList<InMageRcmDiskInput> Disks {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Disks == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Disks");
            }
            if (this.Disks != null)
            {
                foreach (var element in this.Disks)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}