// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// InMage protected disk details.
    /// </summary>
    public partial class InMageProtectedDiskDetails
    {
        /// <summary>
        /// Initializes a new instance of the InMageProtectedDiskDetails class.
        /// </summary>
        public InMageProtectedDiskDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InMageProtectedDiskDetails class.
        /// </summary>

        /// <param name="diskId">The disk id.
        /// </param>

        /// <param name="diskName">The disk name.
        /// </param>

        /// <param name="protectionStage">The protection stage.
        /// </param>

        /// <param name="healthErrorCode">The health error code for the disk.
        /// </param>

        /// <param name="rpoInSeconds">The RPO in seconds.
        /// </param>

        /// <param name="resyncRequired">A value indicating whether resync is required for this disk.
        /// </param>

        /// <param name="resyncProgressPercentage">The resync progress percentage.
        /// </param>

        /// <param name="resyncDurationInSeconds">The resync duration in seconds.
        /// </param>

        /// <param name="diskCapacityInBytes">The disk capacity in bytes.
        /// </param>

        /// <param name="fileSystemCapacityInBytes">The file system capacity in bytes.
        /// </param>

        /// <param name="sourceDataInMb">The source data transit in MB.
        /// </param>

        /// <param name="psDataInMb">The PS data transit in MB.
        /// </param>

        /// <param name="targetDataInMb">The target data transit in MB.
        /// </param>

        /// <param name="diskResized">A value indicating whether disk is resized.
        /// </param>

        /// <param name="lastRpoCalculatedTime">The last RPO calculated time.
        /// </param>

        /// <param name="resyncProcessedBytes">The resync processed bytes.
        /// </param>

        /// <param name="resyncTotalTransferredBytes">The resync total transferred bytes.
        /// </param>

        /// <param name="resyncLast15MinutesTransferredBytes">The resync last 15 minutes transferred bytes.
        /// </param>

        /// <param name="resyncLastDataTransferTimeUtc">The last data transfer time in UTC.
        /// </param>

        /// <param name="resyncStartTime">The resync start time.
        /// </param>

        /// <param name="progressHealth">The Progress Health.
        /// </param>

        /// <param name="progressStatus">The Progress Status.
        /// </param>
        public InMageProtectedDiskDetails(string diskId = default(string), string diskName = default(string), string protectionStage = default(string), string healthErrorCode = default(string), long? rpoInSeconds = default(long?), string resyncRequired = default(string), int? resyncProgressPercentage = default(int?), long? resyncDurationInSeconds = default(long?), long? diskCapacityInBytes = default(long?), long? fileSystemCapacityInBytes = default(long?), double? sourceDataInMb = default(double?), double? psDataInMb = default(double?), double? targetDataInMb = default(double?), string diskResized = default(string), System.DateTime? lastRpoCalculatedTime = default(System.DateTime?), long? resyncProcessedBytes = default(long?), long? resyncTotalTransferredBytes = default(long?), long? resyncLast15MinutesTransferredBytes = default(long?), System.DateTime? resyncLastDataTransferTimeUtc = default(System.DateTime?), System.DateTime? resyncStartTime = default(System.DateTime?), string progressHealth = default(string), string progressStatus = default(string))

        {
            this.DiskId = diskId;
            this.DiskName = diskName;
            this.ProtectionStage = protectionStage;
            this.HealthErrorCode = healthErrorCode;
            this.RpoInSeconds = rpoInSeconds;
            this.ResyncRequired = resyncRequired;
            this.ResyncProgressPercentage = resyncProgressPercentage;
            this.ResyncDurationInSeconds = resyncDurationInSeconds;
            this.DiskCapacityInBytes = diskCapacityInBytes;
            this.FileSystemCapacityInBytes = fileSystemCapacityInBytes;
            this.SourceDataInMb = sourceDataInMb;
            this.PsDataInMb = psDataInMb;
            this.TargetDataInMb = targetDataInMb;
            this.DiskResized = diskResized;
            this.LastRpoCalculatedTime = lastRpoCalculatedTime;
            this.ResyncProcessedBytes = resyncProcessedBytes;
            this.ResyncTotalTransferredBytes = resyncTotalTransferredBytes;
            this.ResyncLast15MinutesTransferredBytes = resyncLast15MinutesTransferredBytes;
            this.ResyncLastDataTransferTimeUtc = resyncLastDataTransferTimeUtc;
            this.ResyncStartTime = resyncStartTime;
            this.ProgressHealth = progressHealth;
            this.ProgressStatus = progressStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the disk id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskId")]
        public string DiskId {get; set; }

        /// <summary>
        /// Gets or sets the disk name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskName")]
        public string DiskName {get; set; }

        /// <summary>
        /// Gets or sets the protection stage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protectionStage")]
        public string ProtectionStage {get; set; }

        /// <summary>
        /// Gets or sets the health error code for the disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "healthErrorCode")]
        public string HealthErrorCode {get; set; }

        /// <summary>
        /// Gets or sets the RPO in seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rpoInSeconds")]
        public long? RpoInSeconds {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether resync is required for this disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncRequired")]
        public string ResyncRequired {get; set; }

        /// <summary>
        /// Gets or sets the resync progress percentage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncProgressPercentage")]
        public int? ResyncProgressPercentage {get; set; }

        /// <summary>
        /// Gets or sets the resync duration in seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncDurationInSeconds")]
        public long? ResyncDurationInSeconds {get; set; }

        /// <summary>
        /// Gets or sets the disk capacity in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskCapacityInBytes")]
        public long? DiskCapacityInBytes {get; set; }

        /// <summary>
        /// Gets or sets the file system capacity in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileSystemCapacityInBytes")]
        public long? FileSystemCapacityInBytes {get; set; }

        /// <summary>
        /// Gets or sets the source data transit in MB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceDataInMB")]
        public double? SourceDataInMb {get; set; }

        /// <summary>
        /// Gets or sets the PS data transit in MB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "psDataInMB")]
        public double? PsDataInMb {get; set; }

        /// <summary>
        /// Gets or sets the target data transit in MB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetDataInMB")]
        public double? TargetDataInMb {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether disk is resized.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskResized")]
        public string DiskResized {get; set; }

        /// <summary>
        /// Gets or sets the last RPO calculated time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastRpoCalculatedTime")]
        public System.DateTime? LastRpoCalculatedTime {get; set; }

        /// <summary>
        /// Gets or sets the resync processed bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncProcessedBytes")]
        public long? ResyncProcessedBytes {get; set; }

        /// <summary>
        /// Gets or sets the resync total transferred bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncTotalTransferredBytes")]
        public long? ResyncTotalTransferredBytes {get; set; }

        /// <summary>
        /// Gets or sets the resync last 15 minutes transferred bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncLast15MinutesTransferredBytes")]
        public long? ResyncLast15MinutesTransferredBytes {get; set; }

        /// <summary>
        /// Gets or sets the last data transfer time in UTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncLastDataTransferTimeUTC")]
        public System.DateTime? ResyncLastDataTransferTimeUtc {get; set; }

        /// <summary>
        /// Gets or sets the resync start time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resyncStartTime")]
        public System.DateTime? ResyncStartTime {get; set; }

        /// <summary>
        /// Gets or sets the Progress Health.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "progressHealth")]
        public string ProgressHealth {get; set; }

        /// <summary>
        /// Gets or sets the Progress Status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "progressStatus")]
        public string ProgressStatus {get; set; }
    }
}