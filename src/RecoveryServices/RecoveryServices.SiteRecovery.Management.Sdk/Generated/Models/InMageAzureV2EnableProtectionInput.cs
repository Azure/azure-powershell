// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery.Models
{
    using System.Linq;

    /// <summary>
    /// VMware Azure specific enable protection input.
    /// </summary>
    [Newtonsoft.Json.JsonObject("InMageAzureV2")]
    public partial class InMageAzureV2EnableProtectionInput : EnableProtectionProviderSpecificInput
    {
        /// <summary>
        /// Initializes a new instance of the InMageAzureV2EnableProtectionInput class.
        /// </summary>
        public InMageAzureV2EnableProtectionInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InMageAzureV2EnableProtectionInput class.
        /// </summary>

        /// <param name="masterTargetId">The Master target Id.
        /// </param>

        /// <param name="processServerId">The Process Server Id.
        /// </param>

        /// <param name="storageAccountId">The storage account Id.
        /// </param>

        /// <param name="runAsAccountId">The CS account Id.
        /// </param>

        /// <param name="multiVMGroupId">The multi VM group Id.
        /// </param>

        /// <param name="multiVMGroupName">The multi VM group name.
        /// </param>

        /// <param name="disksToInclude">The disks to include list.
        /// </param>

        /// <param name="targetAzureNetworkId">The selected target Azure network Id.
        /// </param>

        /// <param name="targetAzureSubnetId">The selected target Azure subnet Id.
        /// </param>

        /// <param name="enableRdpOnTargetOption">The selected option to enable RDP\SSH on target VM after failover. String
        /// value of SrsDataContract.EnableRDPOnTargetOption enum.
        /// </param>

        /// <param name="targetAzureVMName">The target azure VM Name.
        /// </param>

        /// <param name="logStorageAccountId">The storage account to be used for logging during replication.
        /// </param>

        /// <param name="targetAzureV1ResourceGroupId">The Id of the target resource group (for classic deployment) in which the
        /// failover VM is to be created.
        /// </param>

        /// <param name="targetAzureV2ResourceGroupId">The Id of the target resource group (for resource manager deployment) in
        /// which the failover VM is to be created.
        /// </param>

        /// <param name="diskType">The DiskType.
        /// Possible values include: 'Standard_LRS', 'Premium_LRS', 'StandardSSD_LRS'</param>

        /// <param name="targetAvailabilitySetId">The target availability set ARM Id for resource manager deployment.
        /// </param>

        /// <param name="targetAvailabilityZone">The target availability zone.
        /// </param>

        /// <param name="targetProximityPlacementGroupId">The proximity placement group ARM Id.
        /// </param>

        /// <param name="licenseType">License type.
        /// Possible values include: 'NotSpecified', 'NoLicenseType', 'WindowsServer'</param>

        /// <param name="sqlServerLicenseType">The SQL Server license type.
        /// Possible values include: 'NotSpecified', 'NoLicenseType', 'PAYG', 'AHUB'</param>

        /// <param name="targetVMSize">The target VM size.
        /// </param>

        /// <param name="diskEncryptionSetId">The DiskEncryptionSet ARM Id.
        /// </param>

        /// <param name="targetVMTags">The target VM tags.
        /// </param>

        /// <param name="seedManagedDiskTags">The tags for the seed managed disks.
        /// </param>

        /// <param name="targetManagedDiskTags">The tags for the target managed disks.
        /// </param>

        /// <param name="targetNicTags">The tags for the target NICs.
        /// </param>
        public InMageAzureV2EnableProtectionInput(string masterTargetId = default(string), string processServerId = default(string), string storageAccountId = default(string), string runAsAccountId = default(string), string multiVMGroupId = default(string), string multiVMGroupName = default(string), System.Collections.Generic.IList<InMageAzureV2DiskInputDetails> disksToInclude = default(System.Collections.Generic.IList<InMageAzureV2DiskInputDetails>), string targetAzureNetworkId = default(string), string targetAzureSubnetId = default(string), string enableRdpOnTargetOption = default(string), string targetAzureVMName = default(string), string logStorageAccountId = default(string), string targetAzureV1ResourceGroupId = default(string), string targetAzureV2ResourceGroupId = default(string), string diskType = default(string), string targetAvailabilitySetId = default(string), string targetAvailabilityZone = default(string), string targetProximityPlacementGroupId = default(string), string licenseType = default(string), string sqlServerLicenseType = default(string), string targetVMSize = default(string), string diskEncryptionSetId = default(string), System.Collections.Generic.IDictionary<string, string> targetVMTags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> seedManagedDiskTags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> targetManagedDiskTags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> targetNicTags = default(System.Collections.Generic.IDictionary<string, string>))

        {
            this.MasterTargetId = masterTargetId;
            this.ProcessServerId = processServerId;
            this.StorageAccountId = storageAccountId;
            this.RunAsAccountId = runAsAccountId;
            this.MultiVMGroupId = multiVMGroupId;
            this.MultiVMGroupName = multiVMGroupName;
            this.DisksToInclude = disksToInclude;
            this.TargetAzureNetworkId = targetAzureNetworkId;
            this.TargetAzureSubnetId = targetAzureSubnetId;
            this.EnableRdpOnTargetOption = enableRdpOnTargetOption;
            this.TargetAzureVMName = targetAzureVMName;
            this.LogStorageAccountId = logStorageAccountId;
            this.TargetAzureV1ResourceGroupId = targetAzureV1ResourceGroupId;
            this.TargetAzureV2ResourceGroupId = targetAzureV2ResourceGroupId;
            this.DiskType = diskType;
            this.TargetAvailabilitySetId = targetAvailabilitySetId;
            this.TargetAvailabilityZone = targetAvailabilityZone;
            this.TargetProximityPlacementGroupId = targetProximityPlacementGroupId;
            this.LicenseType = licenseType;
            this.SqlServerLicenseType = sqlServerLicenseType;
            this.TargetVMSize = targetVMSize;
            this.DiskEncryptionSetId = diskEncryptionSetId;
            this.TargetVMTags = targetVMTags;
            this.SeedManagedDiskTags = seedManagedDiskTags;
            this.TargetManagedDiskTags = targetManagedDiskTags;
            this.TargetNicTags = targetNicTags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the Master target Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "masterTargetId")]
        public string MasterTargetId {get; set; }

        /// <summary>
        /// Gets or sets the Process Server Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "processServerId")]
        public string ProcessServerId {get; set; }

        /// <summary>
        /// Gets or sets the storage account Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageAccountId")]
        public string StorageAccountId {get; set; }

        /// <summary>
        /// Gets or sets the CS account Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "runAsAccountId")]
        public string RunAsAccountId {get; set; }

        /// <summary>
        /// Gets or sets the multi VM group Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "multiVmGroupId")]
        public string MultiVMGroupId {get; set; }

        /// <summary>
        /// Gets or sets the multi VM group name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "multiVmGroupName")]
        public string MultiVMGroupName {get; set; }

        /// <summary>
        /// Gets or sets the disks to include list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disksToInclude")]
        public System.Collections.Generic.IList<InMageAzureV2DiskInputDetails> DisksToInclude {get; set; }

        /// <summary>
        /// Gets or sets the selected target Azure network Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetAzureNetworkId")]
        public string TargetAzureNetworkId {get; set; }

        /// <summary>
        /// Gets or sets the selected target Azure subnet Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetAzureSubnetId")]
        public string TargetAzureSubnetId {get; set; }

        /// <summary>
        /// Gets or sets the selected option to enable RDP\SSH on target VM after
        /// failover. String value of SrsDataContract.EnableRDPOnTargetOption enum.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableRdpOnTargetOption")]
        public string EnableRdpOnTargetOption {get; set; }

        /// <summary>
        /// Gets or sets the target azure VM Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetAzureVmName")]
        public string TargetAzureVMName {get; set; }

        /// <summary>
        /// Gets or sets the storage account to be used for logging during replication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "logStorageAccountId")]
        public string LogStorageAccountId {get; set; }

        /// <summary>
        /// Gets or sets the Id of the target resource group (for classic deployment)
        /// in which the failover VM is to be created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetAzureV1ResourceGroupId")]
        public string TargetAzureV1ResourceGroupId {get; set; }

        /// <summary>
        /// Gets or sets the Id of the target resource group (for resource manager
        /// deployment) in which the failover VM is to be created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetAzureV2ResourceGroupId")]
        public string TargetAzureV2ResourceGroupId {get; set; }

        /// <summary>
        /// Gets or sets the DiskType. Possible values include: &#39;Standard_LRS&#39;, &#39;Premium_LRS&#39;, &#39;StandardSSD_LRS&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskType")]
        public string DiskType {get; set; }

        /// <summary>
        /// Gets or sets the target availability set ARM Id for resource manager
        /// deployment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetAvailabilitySetId")]
        public string TargetAvailabilitySetId {get; set; }

        /// <summary>
        /// Gets or sets the target availability zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetAvailabilityZone")]
        public string TargetAvailabilityZone {get; set; }

        /// <summary>
        /// Gets or sets the proximity placement group ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetProximityPlacementGroupId")]
        public string TargetProximityPlacementGroupId {get; set; }

        /// <summary>
        /// Gets or sets license type. Possible values include: &#39;NotSpecified&#39;, &#39;NoLicenseType&#39;, &#39;WindowsServer&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "licenseType")]
        public string LicenseType {get; set; }

        /// <summary>
        /// Gets or sets the SQL Server license type. Possible values include: &#39;NotSpecified&#39;, &#39;NoLicenseType&#39;, &#39;PAYG&#39;, &#39;AHUB&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sqlServerLicenseType")]
        public string SqlServerLicenseType {get; set; }

        /// <summary>
        /// Gets or sets the target VM size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmSize")]
        public string TargetVMSize {get; set; }

        /// <summary>
        /// Gets or sets the DiskEncryptionSet ARM Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskEncryptionSetId")]
        public string DiskEncryptionSetId {get; set; }

        /// <summary>
        /// Gets or sets the target VM tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetVmTags")]
        public System.Collections.Generic.IDictionary<string, string> TargetVMTags {get; set; }

        /// <summary>
        /// Gets or sets the tags for the seed managed disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "seedManagedDiskTags")]
        public System.Collections.Generic.IDictionary<string, string> SeedManagedDiskTags {get; set; }

        /// <summary>
        /// Gets or sets the tags for the target managed disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetManagedDiskTags")]
        public System.Collections.Generic.IDictionary<string, string> TargetManagedDiskTags {get; set; }

        /// <summary>
        /// Gets or sets the tags for the target NICs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetNicTags")]
        public System.Collections.Generic.IDictionary<string, string> TargetNicTags {get; set; }
    }
}