// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ReplicationProtectedItemsOperations.
    /// </summary>
    public static partial class ReplicationProtectedItemsOperationsExtensions
    {
            /// <summary>
            /// Gets the list of Replication protected items.
            /// </summary>
            /// <remarks>
            /// Gets the list of ASR replication protected items in the protection
            /// container.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            public static IPage<ReplicationProtectedItem> ListByReplicationProtectionContainers(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName)
            {
                return operations.ListByReplicationProtectionContainersAsync(fabricName, protectionContainerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of Replication protected items.
            /// </summary>
            /// <remarks>
            /// Gets the list of ASR replication protected items in the protection
            /// container.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ReplicationProtectedItem>> ListByReplicationProtectionContainersAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByReplicationProtectionContainersWithHttpMessagesAsync(fabricName, protectionContainerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the details of a Replication protected item.
            /// </summary>
            /// <remarks>
            /// Gets the details of an ASR replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric unique name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            public static ReplicationProtectedItem Get(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                return operations.GetAsync(fabricName, protectionContainerName, replicatedProtectedItemName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the details of a Replication protected item.
            /// </summary>
            /// <remarks>
            /// Gets the details of an ASR replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric unique name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> GetAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Enables protection.
            /// </summary>
            /// <remarks>
            /// The operation to create an ASR replication protected item (Enable
            /// replication).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// A name for the replication protected item.
            /// </param>
            /// <param name='properties'>
            /// Enable protection input properties.
            /// </param>
            public static ReplicationProtectedItem Create(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, EnableProtectionInputProperties properties = default(EnableProtectionInputProperties))
            {
                return operations.CreateAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Enables protection.
            /// </summary>
            /// <remarks>
            /// The operation to create an ASR replication protected item (Enable
            /// replication).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// A name for the replication protected item.
            /// </param>
            /// <param name='properties'>
            /// Enable protection input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> CreateAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, EnableProtectionInputProperties properties = default(EnableProtectionInputProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Purges protection.
            /// </summary>
            /// <remarks>
            /// The operation to delete or purge a replication protected item. This
            /// operation will force delete the replication protected item. Use the remove
            /// operation on replication protected item to perform a clean disable
            /// replication for the item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            public static void Purge(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                operations.PurgeAsync(fabricName, protectionContainerName, replicatedProtectedItemName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Purges protection.
            /// </summary>
            /// <remarks>
            /// The operation to delete or purge a replication protected item. This
            /// operation will force delete the replication protected item. Use the remove
            /// operation on replication protected item to perform a clean disable
            /// replication for the item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PurgeAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PurgeWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the replication protected item settings.
            /// </summary>
            /// <remarks>
            /// The operation to update the recovery settings of an ASR replication
            /// protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Update replication protected item properties.
            /// </param>
            public static ReplicationProtectedItem Update(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateReplicationProtectedItemInputProperties properties = default(UpdateReplicationProtectedItemInputProperties))
            {
                return operations.UpdateAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the replication protected item settings.
            /// </summary>
            /// <remarks>
            /// The operation to update the recovery settings of an ASR replication
            /// protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Update replication protected item properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> UpdateAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateReplicationProtectedItemInputProperties properties = default(UpdateReplicationProtectedItemInputProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add disk(s) for protection.
            /// </summary>
            /// <remarks>
            /// Operation to add disks(s) to the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Add disks input properties.
            /// </param>
            public static ReplicationProtectedItem AddDisks(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, AddDisksInputProperties properties = default(AddDisksInputProperties))
            {
                return operations.AddDisksAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add disk(s) for protection.
            /// </summary>
            /// <remarks>
            /// Operation to add disks(s) to the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Add disks input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> AddDisksAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, AddDisksInputProperties properties = default(AddDisksInputProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddDisksWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Change or apply recovery point.
            /// </summary>
            /// <remarks>
            /// The operation to change the recovery point of a failed over replication
            /// protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The ARM fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The replicated protected item name.
            /// </param>
            /// <param name='properties'>
            /// The input properties to apply recovery point.
            /// </param>
            public static ReplicationProtectedItem ApplyRecoveryPoint(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ApplyRecoveryPointInputProperties properties)
            {
                return operations.ApplyRecoveryPointAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Change or apply recovery point.
            /// </summary>
            /// <remarks>
            /// The operation to change the recovery point of a failed over replication
            /// protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The ARM fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The replicated protected item name.
            /// </param>
            /// <param name='properties'>
            /// The input properties to apply recovery point.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> ApplyRecoveryPointAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ApplyRecoveryPointInputProperties properties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApplyRecoveryPointWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute cancel failover.
            /// </summary>
            /// <remarks>
            /// Operation to cancel the failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            public static ReplicationProtectedItem FailoverCancel(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                return operations.FailoverCancelAsync(fabricName, protectionContainerName, replicatedProtectedItemName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute cancel failover.
            /// </summary>
            /// <remarks>
            /// Operation to cancel the failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> FailoverCancelAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FailoverCancelWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute commit failover.
            /// </summary>
            /// <remarks>
            /// Operation to commit the failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            public static ReplicationProtectedItem FailoverCommit(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                return operations.FailoverCommitAsync(fabricName, protectionContainerName, replicatedProtectedItemName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute commit failover.
            /// </summary>
            /// <remarks>
            /// Operation to commit the failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> FailoverCommitAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FailoverCommitWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute planned failover.
            /// </summary>
            /// <remarks>
            /// Operation to initiate a planned failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Planned failover input properties.
            /// </param>
            public static ReplicationProtectedItem PlannedFailover(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, PlannedFailoverInputProperties properties = default(PlannedFailoverInputProperties))
            {
                return operations.PlannedFailoverAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute planned failover.
            /// </summary>
            /// <remarks>
            /// Operation to initiate a planned failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Planned failover input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> PlannedFailoverAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, PlannedFailoverInputProperties properties = default(PlannedFailoverInputProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PlannedFailoverWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Disables protection.
            /// </summary>
            /// <remarks>
            /// The operation to disable replication on a replication protected item. This
            /// will also remove the item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Disable protection input properties.
            /// </param>
            public static void Delete(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, DisableProtectionInputProperties properties)
            {
                operations.DeleteAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disables protection.
            /// </summary>
            /// <remarks>
            /// The operation to disable replication on a replication protected item. This
            /// will also remove the item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Disable protection input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, DisableProtectionInputProperties properties, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes disk(s).
            /// </summary>
            /// <remarks>
            /// Operation to remove disk(s) from the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Remove disk input properties.
            /// </param>
            public static ReplicationProtectedItem RemoveDisks(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, RemoveDisksInputProperties properties = default(RemoveDisksInputProperties))
            {
                return operations.RemoveDisksAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes disk(s).
            /// </summary>
            /// <remarks>
            /// Operation to remove disk(s) from the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Remove disk input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> RemoveDisksAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, RemoveDisksInputProperties properties = default(RemoveDisksInputProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveDisksWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resynchronize or repair replication.
            /// </summary>
            /// <remarks>
            /// The operation to start resynchronize/repair replication for a replication
            /// protected item requiring resynchronization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the container.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The name of the replication protected item.
            /// </param>
            public static ReplicationProtectedItem RepairReplication(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                return operations.RepairReplicationAsync(fabricName, protectionContainerName, replicatedProtectedItemName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resynchronize or repair replication.
            /// </summary>
            /// <remarks>
            /// The operation to start resynchronize/repair replication for a replication
            /// protected item requiring resynchronization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the container.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The name of the replication protected item.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> RepairReplicationAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RepairReplicationWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute Reverse Replication\Reprotect.
            /// </summary>
            /// <remarks>
            /// Operation to reprotect or reverse replicate a failed over replication
            /// protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Reverse replication properties.
            /// </param>
            public static ReplicationProtectedItem Reprotect(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ReverseReplicationInputProperties properties = default(ReverseReplicationInputProperties))
            {
                return operations.ReprotectAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute Reverse Replication\Reprotect.
            /// </summary>
            /// <remarks>
            /// Operation to reprotect or reverse replicate a failed over replication
            /// protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Reverse replication properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> ReprotectAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ReverseReplicationInputProperties properties = default(ReverseReplicationInputProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReprotectWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resolve health errors.
            /// </summary>
            /// <remarks>
            /// Operation to resolve health issues of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Disable resolve health input properties.
            /// </param>
            public static ReplicationProtectedItem ResolveHealthErrors(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ResolveHealthInputProperties properties = default(ResolveHealthInputProperties))
            {
                return operations.ResolveHealthErrorsAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resolve health errors.
            /// </summary>
            /// <remarks>
            /// Operation to resolve health issues of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Disable resolve health input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> ResolveHealthErrorsAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ResolveHealthInputProperties properties = default(ResolveHealthInputProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResolveHealthErrorsWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute switch provider.
            /// </summary>
            /// <remarks>
            /// Operation to initiate a switch provider of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Switch provider input properties.
            /// </param>
            public static ReplicationProtectedItem SwitchProvider(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, SwitchProviderInputProperties properties = default(SwitchProviderInputProperties))
            {
                return operations.SwitchProviderAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute switch provider.
            /// </summary>
            /// <remarks>
            /// Operation to initiate a switch provider of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Switch provider input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> SwitchProviderAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, SwitchProviderInputProperties properties = default(SwitchProviderInputProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SwitchProviderWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute test failover.
            /// </summary>
            /// <remarks>
            /// Operation to perform a test failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Test failover input properties.
            /// </param>
            public static ReplicationProtectedItem TestFailover(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, TestFailoverInputProperties properties)
            {
                return operations.TestFailoverAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute test failover.
            /// </summary>
            /// <remarks>
            /// Operation to perform a test failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Test failover input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> TestFailoverAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, TestFailoverInputProperties properties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TestFailoverWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute test failover cleanup.
            /// </summary>
            /// <remarks>
            /// Operation to clean up the test failover of a replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Test failover cleanup input properties.
            /// </param>
            public static ReplicationProtectedItem TestFailoverCleanup(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, TestFailoverCleanupInputProperties properties)
            {
                return operations.TestFailoverCleanupAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute test failover cleanup.
            /// </summary>
            /// <remarks>
            /// Operation to clean up the test failover of a replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Test failover cleanup input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> TestFailoverCleanupAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, TestFailoverCleanupInputProperties properties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TestFailoverCleanupWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute unplanned failover.
            /// </summary>
            /// <remarks>
            /// Operation to initiate a failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Unplanned failover input properties.
            /// </param>
            public static ReplicationProtectedItem UnplannedFailover(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UnplannedFailoverInputProperties properties)
            {
                return operations.UnplannedFailoverAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute unplanned failover.
            /// </summary>
            /// <remarks>
            /// Operation to initiate a failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Unplanned failover input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> UnplannedFailoverAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UnplannedFailoverInputProperties properties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnplannedFailoverWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates appliance for replication protected Item.
            /// </summary>
            /// <remarks>
            /// The operation to update appliance of an ASR replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Update appliance replication protected item properties.
            /// </param>
            public static ReplicationProtectedItem UpdateAppliance(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateApplianceForReplicationProtectedItemInputProperties properties)
            {
                return operations.UpdateApplianceAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates appliance for replication protected Item.
            /// </summary>
            /// <remarks>
            /// The operation to update appliance of an ASR replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Update appliance replication protected item properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> UpdateApplianceAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateApplianceForReplicationProtectedItemInputProperties properties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateApplianceWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the mobility service on a protected item.
            /// </summary>
            /// <remarks>
            /// The operation to update(push update) the installed mobility service
            /// software on a replication protected item to the latest available version.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric containing the protected item.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the container containing the protected item.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The name of the protected item on which the agent is to be updated.
            /// </param>
            /// <param name='properties'>
            /// The properties of the update mobility service request.
            /// </param>
            public static ReplicationProtectedItem UpdateMobilityService(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateMobilityServiceRequestProperties properties = default(UpdateMobilityServiceRequestProperties))
            {
                return operations.UpdateMobilityServiceAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the mobility service on a protected item.
            /// </summary>
            /// <remarks>
            /// The operation to update(push update) the installed mobility service
            /// software on a replication protected item to the latest available version.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric containing the protected item.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the container containing the protected item.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The name of the protected item on which the agent is to be updated.
            /// </param>
            /// <param name='properties'>
            /// The properties of the update mobility service request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> UpdateMobilityServiceAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateMobilityServiceRequestProperties properties = default(UpdateMobilityServiceRequestProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateMobilityServiceWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of replication protected items.
            /// </summary>
            /// <remarks>
            /// Gets the list of ASR replication protected items in the vault.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='skipToken'>
            /// The pagination token. Possible values: "FabricId" or "FabricId_CloudId" or
            /// null.
            /// </param>
            public static IPage<ReplicationProtectedItem> List(this IReplicationProtectedItemsOperations operations, ODataQuery<ProtectedItemsQueryParameter> odataQuery = default(ODataQuery<ProtectedItemsQueryParameter>), string skipToken = default(string))
            {
                return operations.ListAsync(odataQuery, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of replication protected items.
            /// </summary>
            /// <remarks>
            /// Gets the list of ASR replication protected items in the vault.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='skipToken'>
            /// The pagination token. Possible values: "FabricId" or "FabricId_CloudId" or
            /// null.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ReplicationProtectedItem>> ListAsync(this IReplicationProtectedItemsOperations operations, ODataQuery<ProtectedItemsQueryParameter> odataQuery = default(ODataQuery<ProtectedItemsQueryParameter>), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(odataQuery, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Enables protection.
            /// </summary>
            /// <remarks>
            /// The operation to create an ASR replication protected item (Enable
            /// replication).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// A name for the replication protected item.
            /// </param>
            /// <param name='properties'>
            /// Enable protection input properties.
            /// </param>
            public static ReplicationProtectedItem BeginCreate(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, EnableProtectionInputProperties properties = default(EnableProtectionInputProperties))
            {
                return operations.BeginCreateAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Enables protection.
            /// </summary>
            /// <remarks>
            /// The operation to create an ASR replication protected item (Enable
            /// replication).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// A name for the replication protected item.
            /// </param>
            /// <param name='properties'>
            /// Enable protection input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> BeginCreateAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, EnableProtectionInputProperties properties = default(EnableProtectionInputProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Purges protection.
            /// </summary>
            /// <remarks>
            /// The operation to delete or purge a replication protected item. This
            /// operation will force delete the replication protected item. Use the remove
            /// operation on replication protected item to perform a clean disable
            /// replication for the item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            public static void BeginPurge(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                operations.BeginPurgeAsync(fabricName, protectionContainerName, replicatedProtectedItemName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Purges protection.
            /// </summary>
            /// <remarks>
            /// The operation to delete or purge a replication protected item. This
            /// operation will force delete the replication protected item. Use the remove
            /// operation on replication protected item to perform a clean disable
            /// replication for the item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginPurgeAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginPurgeWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the replication protected item settings.
            /// </summary>
            /// <remarks>
            /// The operation to update the recovery settings of an ASR replication
            /// protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Update replication protected item properties.
            /// </param>
            public static ReplicationProtectedItem BeginUpdate(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateReplicationProtectedItemInputProperties properties = default(UpdateReplicationProtectedItemInputProperties))
            {
                return operations.BeginUpdateAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the replication protected item settings.
            /// </summary>
            /// <remarks>
            /// The operation to update the recovery settings of an ASR replication
            /// protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Update replication protected item properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> BeginUpdateAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateReplicationProtectedItemInputProperties properties = default(UpdateReplicationProtectedItemInputProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add disk(s) for protection.
            /// </summary>
            /// <remarks>
            /// Operation to add disks(s) to the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Add disks input properties.
            /// </param>
            public static ReplicationProtectedItem BeginAddDisks(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, AddDisksInputProperties properties = default(AddDisksInputProperties))
            {
                return operations.BeginAddDisksAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add disk(s) for protection.
            /// </summary>
            /// <remarks>
            /// Operation to add disks(s) to the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Add disks input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> BeginAddDisksAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, AddDisksInputProperties properties = default(AddDisksInputProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginAddDisksWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Change or apply recovery point.
            /// </summary>
            /// <remarks>
            /// The operation to change the recovery point of a failed over replication
            /// protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The ARM fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The replicated protected item name.
            /// </param>
            /// <param name='properties'>
            /// The input properties to apply recovery point.
            /// </param>
            public static ReplicationProtectedItem BeginApplyRecoveryPoint(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ApplyRecoveryPointInputProperties properties)
            {
                return operations.BeginApplyRecoveryPointAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Change or apply recovery point.
            /// </summary>
            /// <remarks>
            /// The operation to change the recovery point of a failed over replication
            /// protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The ARM fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The replicated protected item name.
            /// </param>
            /// <param name='properties'>
            /// The input properties to apply recovery point.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> BeginApplyRecoveryPointAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ApplyRecoveryPointInputProperties properties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginApplyRecoveryPointWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute cancel failover.
            /// </summary>
            /// <remarks>
            /// Operation to cancel the failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            public static ReplicationProtectedItem BeginFailoverCancel(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                return operations.BeginFailoverCancelAsync(fabricName, protectionContainerName, replicatedProtectedItemName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute cancel failover.
            /// </summary>
            /// <remarks>
            /// Operation to cancel the failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> BeginFailoverCancelAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginFailoverCancelWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute commit failover.
            /// </summary>
            /// <remarks>
            /// Operation to commit the failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            public static ReplicationProtectedItem BeginFailoverCommit(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                return operations.BeginFailoverCommitAsync(fabricName, protectionContainerName, replicatedProtectedItemName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute commit failover.
            /// </summary>
            /// <remarks>
            /// Operation to commit the failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> BeginFailoverCommitAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginFailoverCommitWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute planned failover.
            /// </summary>
            /// <remarks>
            /// Operation to initiate a planned failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Planned failover input properties.
            /// </param>
            public static ReplicationProtectedItem BeginPlannedFailover(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, PlannedFailoverInputProperties properties = default(PlannedFailoverInputProperties))
            {
                return operations.BeginPlannedFailoverAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute planned failover.
            /// </summary>
            /// <remarks>
            /// Operation to initiate a planned failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Planned failover input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> BeginPlannedFailoverAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, PlannedFailoverInputProperties properties = default(PlannedFailoverInputProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPlannedFailoverWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Disables protection.
            /// </summary>
            /// <remarks>
            /// The operation to disable replication on a replication protected item. This
            /// will also remove the item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Disable protection input properties.
            /// </param>
            public static void BeginDelete(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, DisableProtectionInputProperties properties)
            {
                operations.BeginDeleteAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disables protection.
            /// </summary>
            /// <remarks>
            /// The operation to disable replication on a replication protected item. This
            /// will also remove the item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Disable protection input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, DisableProtectionInputProperties properties, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes disk(s).
            /// </summary>
            /// <remarks>
            /// Operation to remove disk(s) from the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Remove disk input properties.
            /// </param>
            public static ReplicationProtectedItem BeginRemoveDisks(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, RemoveDisksInputProperties properties = default(RemoveDisksInputProperties))
            {
                return operations.BeginRemoveDisksAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes disk(s).
            /// </summary>
            /// <remarks>
            /// Operation to remove disk(s) from the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Remove disk input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> BeginRemoveDisksAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, RemoveDisksInputProperties properties = default(RemoveDisksInputProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginRemoveDisksWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resynchronize or repair replication.
            /// </summary>
            /// <remarks>
            /// The operation to start resynchronize/repair replication for a replication
            /// protected item requiring resynchronization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the container.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The name of the replication protected item.
            /// </param>
            public static ReplicationProtectedItem BeginRepairReplication(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                return operations.BeginRepairReplicationAsync(fabricName, protectionContainerName, replicatedProtectedItemName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resynchronize or repair replication.
            /// </summary>
            /// <remarks>
            /// The operation to start resynchronize/repair replication for a replication
            /// protected item requiring resynchronization.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the container.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The name of the replication protected item.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> BeginRepairReplicationAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginRepairReplicationWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute Reverse Replication\Reprotect.
            /// </summary>
            /// <remarks>
            /// Operation to reprotect or reverse replicate a failed over replication
            /// protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Reverse replication properties.
            /// </param>
            public static ReplicationProtectedItem BeginReprotect(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ReverseReplicationInputProperties properties = default(ReverseReplicationInputProperties))
            {
                return operations.BeginReprotectAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute Reverse Replication\Reprotect.
            /// </summary>
            /// <remarks>
            /// Operation to reprotect or reverse replicate a failed over replication
            /// protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Reverse replication properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> BeginReprotectAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ReverseReplicationInputProperties properties = default(ReverseReplicationInputProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginReprotectWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resolve health errors.
            /// </summary>
            /// <remarks>
            /// Operation to resolve health issues of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Disable resolve health input properties.
            /// </param>
            public static ReplicationProtectedItem BeginResolveHealthErrors(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ResolveHealthInputProperties properties = default(ResolveHealthInputProperties))
            {
                return operations.BeginResolveHealthErrorsAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resolve health errors.
            /// </summary>
            /// <remarks>
            /// Operation to resolve health issues of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Disable resolve health input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> BeginResolveHealthErrorsAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ResolveHealthInputProperties properties = default(ResolveHealthInputProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginResolveHealthErrorsWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute switch provider.
            /// </summary>
            /// <remarks>
            /// Operation to initiate a switch provider of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Switch provider input properties.
            /// </param>
            public static ReplicationProtectedItem BeginSwitchProvider(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, SwitchProviderInputProperties properties = default(SwitchProviderInputProperties))
            {
                return operations.BeginSwitchProviderAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute switch provider.
            /// </summary>
            /// <remarks>
            /// Operation to initiate a switch provider of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Switch provider input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> BeginSwitchProviderAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, SwitchProviderInputProperties properties = default(SwitchProviderInputProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginSwitchProviderWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute test failover.
            /// </summary>
            /// <remarks>
            /// Operation to perform a test failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Test failover input properties.
            /// </param>
            public static ReplicationProtectedItem BeginTestFailover(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, TestFailoverInputProperties properties)
            {
                return operations.BeginTestFailoverAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute test failover.
            /// </summary>
            /// <remarks>
            /// Operation to perform a test failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Test failover input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> BeginTestFailoverAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, TestFailoverInputProperties properties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginTestFailoverWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute test failover cleanup.
            /// </summary>
            /// <remarks>
            /// Operation to clean up the test failover of a replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Test failover cleanup input properties.
            /// </param>
            public static ReplicationProtectedItem BeginTestFailoverCleanup(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, TestFailoverCleanupInputProperties properties)
            {
                return operations.BeginTestFailoverCleanupAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute test failover cleanup.
            /// </summary>
            /// <remarks>
            /// Operation to clean up the test failover of a replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Test failover cleanup input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> BeginTestFailoverCleanupAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, TestFailoverCleanupInputProperties properties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginTestFailoverCleanupWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute unplanned failover.
            /// </summary>
            /// <remarks>
            /// Operation to initiate a failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Unplanned failover input properties.
            /// </param>
            public static ReplicationProtectedItem BeginUnplannedFailover(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UnplannedFailoverInputProperties properties)
            {
                return operations.BeginUnplannedFailoverAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute unplanned failover.
            /// </summary>
            /// <remarks>
            /// Operation to initiate a failover of the replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Unplanned failover input properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> BeginUnplannedFailoverAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UnplannedFailoverInputProperties properties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUnplannedFailoverWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates appliance for replication protected Item.
            /// </summary>
            /// <remarks>
            /// The operation to update appliance of an ASR replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Update appliance replication protected item properties.
            /// </param>
            public static ReplicationProtectedItem BeginUpdateAppliance(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateApplianceForReplicationProtectedItemInputProperties properties)
            {
                return operations.BeginUpdateApplianceAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates appliance for replication protected Item.
            /// </summary>
            /// <remarks>
            /// The operation to update appliance of an ASR replication protected item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='properties'>
            /// Update appliance replication protected item properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> BeginUpdateApplianceAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateApplianceForReplicationProtectedItemInputProperties properties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateApplianceWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the mobility service on a protected item.
            /// </summary>
            /// <remarks>
            /// The operation to update(push update) the installed mobility service
            /// software on a replication protected item to the latest available version.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric containing the protected item.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the container containing the protected item.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The name of the protected item on which the agent is to be updated.
            /// </param>
            /// <param name='properties'>
            /// The properties of the update mobility service request.
            /// </param>
            public static ReplicationProtectedItem BeginUpdateMobilityService(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateMobilityServiceRequestProperties properties = default(UpdateMobilityServiceRequestProperties))
            {
                return operations.BeginUpdateMobilityServiceAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the mobility service on a protected item.
            /// </summary>
            /// <remarks>
            /// The operation to update(push update) the installed mobility service
            /// software on a replication protected item to the latest available version.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric containing the protected item.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the container containing the protected item.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The name of the protected item on which the agent is to be updated.
            /// </param>
            /// <param name='properties'>
            /// The properties of the update mobility service request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> BeginUpdateMobilityServiceAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateMobilityServiceRequestProperties properties = default(UpdateMobilityServiceRequestProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateMobilityServiceWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of Replication protected items.
            /// </summary>
            /// <remarks>
            /// Gets the list of ASR replication protected items in the protection
            /// container.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ReplicationProtectedItem> ListByReplicationProtectionContainersNext(this IReplicationProtectedItemsOperations operations, string nextPageLink)
            {
                return operations.ListByReplicationProtectionContainersNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of Replication protected items.
            /// </summary>
            /// <remarks>
            /// Gets the list of ASR replication protected items in the protection
            /// container.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ReplicationProtectedItem>> ListByReplicationProtectionContainersNextAsync(this IReplicationProtectedItemsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByReplicationProtectionContainersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of replication protected items.
            /// </summary>
            /// <remarks>
            /// Gets the list of ASR replication protected items in the vault.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ReplicationProtectedItem> ListNext(this IReplicationProtectedItemsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of replication protected items.
            /// </summary>
            /// <remarks>
            /// Gets the list of ASR replication protected items in the vault.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ReplicationProtectedItem>> ListNextAsync(this IReplicationProtectedItemsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
