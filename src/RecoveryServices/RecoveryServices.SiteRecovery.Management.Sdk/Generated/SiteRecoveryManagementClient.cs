// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.SiteRecovery
{
    using System.Linq;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    public partial class SiteRecoveryManagementClient : Microsoft.Rest.ServiceClient<SiteRecoveryManagementClient>, ISiteRecoveryManagementClient, IAzureClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }
        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; private set; }
        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; private set; }
        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        public Microsoft.Rest.ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// The API version to use for this operation.
        /// </summary>
        public string ApiVersion { get; private set; }

        /// <summary>
        /// The subscription Id.
        /// </summary>
        public string SubscriptionId { get; set;}

        /// <summary>
        /// The name of the resource group where the recovery services vault is present.
        /// </summary>
        public string ResourceGroupName { get; set;}

        /// <summary>
        /// The name of the recovery services vault.
        /// </summary>
        public string ResourceName { get; set;}

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set;}

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default
        /// value is 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set;}

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When 
        /// set to true a unique x-ms-client-request-id value is generated and 
        /// included in each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set;}

        /// <summary>
        /// Gets the IOperations
        /// </summary>
        public virtual IOperations Operations { get; private set; }
        /// <summary>
        /// Gets the IReplicationAlertSettingsOperations
        /// </summary>
        public virtual IReplicationAlertSettingsOperations ReplicationAlertSettings { get; private set; }
        /// <summary>
        /// Gets the IReplicationAppliancesOperations
        /// </summary>
        public virtual IReplicationAppliancesOperations ReplicationAppliances { get; private set; }
        /// <summary>
        /// Gets the IReplicationEligibilityResultsOperations
        /// </summary>
        public virtual IReplicationEligibilityResultsOperations ReplicationEligibilityResults { get; private set; }
        /// <summary>
        /// Gets the IReplicationEventsOperations
        /// </summary>
        public virtual IReplicationEventsOperations ReplicationEvents { get; private set; }
        /// <summary>
        /// Gets the IReplicationFabricsOperations
        /// </summary>
        public virtual IReplicationFabricsOperations ReplicationFabrics { get; private set; }
        /// <summary>
        /// Gets the IReplicationLogicalNetworksOperations
        /// </summary>
        public virtual IReplicationLogicalNetworksOperations ReplicationLogicalNetworks { get; private set; }
        /// <summary>
        /// Gets the IReplicationNetworksOperations
        /// </summary>
        public virtual IReplicationNetworksOperations ReplicationNetworks { get; private set; }
        /// <summary>
        /// Gets the IReplicationNetworkMappingsOperations
        /// </summary>
        public virtual IReplicationNetworkMappingsOperations ReplicationNetworkMappings { get; private set; }
        /// <summary>
        /// Gets the IReplicationProtectionContainersOperations
        /// </summary>
        public virtual IReplicationProtectionContainersOperations ReplicationProtectionContainers { get; private set; }
        /// <summary>
        /// Gets the IReplicationMigrationItemsOperations
        /// </summary>
        public virtual IReplicationMigrationItemsOperations ReplicationMigrationItems { get; private set; }
        /// <summary>
        /// Gets the IMigrationRecoveryPointsOperations
        /// </summary>
        public virtual IMigrationRecoveryPointsOperations MigrationRecoveryPoints { get; private set; }
        /// <summary>
        /// Gets the IReplicationProtectableItemsOperations
        /// </summary>
        public virtual IReplicationProtectableItemsOperations ReplicationProtectableItems { get; private set; }
        /// <summary>
        /// Gets the IReplicationProtectedItemsOperations
        /// </summary>
        public virtual IReplicationProtectedItemsOperations ReplicationProtectedItems { get; private set; }
        /// <summary>
        /// Gets the IRecoveryPointsOperations
        /// </summary>
        public virtual IRecoveryPointsOperations RecoveryPoints { get; private set; }
        /// <summary>
        /// Gets the ITargetComputeSizesOperations
        /// </summary>
        public virtual ITargetComputeSizesOperations TargetComputeSizes { get; private set; }
        /// <summary>
        /// Gets the IReplicationProtectionContainerMappingsOperations
        /// </summary>
        public virtual IReplicationProtectionContainerMappingsOperations ReplicationProtectionContainerMappings { get; private set; }
        /// <summary>
        /// Gets the IReplicationRecoveryServicesProvidersOperations
        /// </summary>
        public virtual IReplicationRecoveryServicesProvidersOperations ReplicationRecoveryServicesProviders { get; private set; }
        /// <summary>
        /// Gets the IReplicationStorageClassificationsOperations
        /// </summary>
        public virtual IReplicationStorageClassificationsOperations ReplicationStorageClassifications { get; private set; }
        /// <summary>
        /// Gets the IReplicationStorageClassificationMappingsOperations
        /// </summary>
        public virtual IReplicationStorageClassificationMappingsOperations ReplicationStorageClassificationMappings { get; private set; }
        /// <summary>
        /// Gets the IReplicationvCentersOperations
        /// </summary>
        public virtual IReplicationvCentersOperations ReplicationvCenters { get; private set; }
        /// <summary>
        /// Gets the IReplicationJobsOperations
        /// </summary>
        public virtual IReplicationJobsOperations ReplicationJobs { get; private set; }
        /// <summary>
        /// Gets the IReplicationPoliciesOperations
        /// </summary>
        public virtual IReplicationPoliciesOperations ReplicationPolicies { get; private set; }
        /// <summary>
        /// Gets the IReplicationProtectionIntentsOperations
        /// </summary>
        public virtual IReplicationProtectionIntentsOperations ReplicationProtectionIntents { get; private set; }
        /// <summary>
        /// Gets the IReplicationRecoveryPlansOperations
        /// </summary>
        public virtual IReplicationRecoveryPlansOperations ReplicationRecoveryPlans { get; private set; }
        /// <summary>
        /// Gets the ISupportedOperatingSystemsOperations
        /// </summary>
        public virtual ISupportedOperatingSystemsOperations SupportedOperatingSystems { get; private set; }
        /// <summary>
        /// Gets the IReplicationVaultHealthOperations
        /// </summary>
        public virtual IReplicationVaultHealthOperations ReplicationVaultHealth { get; private set; }
        /// <summary>
        /// Gets the IReplicationVaultSettingOperations
        /// </summary>
        public virtual IReplicationVaultSettingOperations ReplicationVaultSetting { get; private set; }
        /// <summary>
        /// Initializes a new instance of the SiteRecoveryManagementClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling SiteRecoveryManagementClient.Dispose(). False: will not dispose provided httpClient</param>
        protected SiteRecoveryManagementClient(System.Net.Http.HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the SiteRecoveryManagementClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SiteRecoveryManagementClient(params System.Net.Http.DelegatingHandler[] handlers) : base(handlers)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the SiteRecoveryManagementClient  class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SiteRecoveryManagementClient(System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the SiteRecoveryManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected SiteRecoveryManagementClient(System.Uri baseUri, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }
        /// <summary>
        /// Initializes a new instance of the SiteRecoveryManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected SiteRecoveryManagementClient(System.Uri baseUri, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
        
            this.BaseUri = baseUri;
        }
        /// <summary>
        /// Initializes a new instance of the SiteRecoveryManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SiteRecoveryManagementClient(Microsoft.Rest.ServiceClientCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the SiteRecoveryManagementClient class.
        /// </summary>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling SiteRecoveryManagementClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SiteRecoveryManagementClient(Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the SiteRecoveryManagementClient class.
        /// </summary>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SiteRecoveryManagementClient(Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the SiteRecoveryManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SiteRecoveryManagementClient(System.Uri baseUri, Microsoft.Rest.ServiceClientCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers) 
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the SiteRecoveryManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SiteRecoveryManagementClient(System.Uri baseUri, Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();

        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.Operations = new Operations(this);
            this.ReplicationAlertSettings = new ReplicationAlertSettingsOperations(this);
            this.ReplicationAppliances = new ReplicationAppliancesOperations(this);
            this.ReplicationEligibilityResults = new ReplicationEligibilityResultsOperations(this);
            this.ReplicationEvents = new ReplicationEventsOperations(this);
            this.ReplicationFabrics = new ReplicationFabricsOperations(this);
            this.ReplicationLogicalNetworks = new ReplicationLogicalNetworksOperations(this);
            this.ReplicationNetworks = new ReplicationNetworksOperations(this);
            this.ReplicationNetworkMappings = new ReplicationNetworkMappingsOperations(this);
            this.ReplicationProtectionContainers = new ReplicationProtectionContainersOperations(this);
            this.ReplicationMigrationItems = new ReplicationMigrationItemsOperations(this);
            this.MigrationRecoveryPoints = new MigrationRecoveryPointsOperations(this);
            this.ReplicationProtectableItems = new ReplicationProtectableItemsOperations(this);
            this.ReplicationProtectedItems = new ReplicationProtectedItemsOperations(this);
            this.RecoveryPoints = new RecoveryPointsOperations(this);
            this.TargetComputeSizes = new TargetComputeSizesOperations(this);
            this.ReplicationProtectionContainerMappings = new ReplicationProtectionContainerMappingsOperations(this);
            this.ReplicationRecoveryServicesProviders = new ReplicationRecoveryServicesProvidersOperations(this);
            this.ReplicationStorageClassifications = new ReplicationStorageClassificationsOperations(this);
            this.ReplicationStorageClassificationMappings = new ReplicationStorageClassificationMappingsOperations(this);
            this.ReplicationvCenters = new ReplicationvCentersOperations(this);
            this.ReplicationJobs = new ReplicationJobsOperations(this);
            this.ReplicationPolicies = new ReplicationPoliciesOperations(this);
            this.ReplicationProtectionIntents = new ReplicationProtectionIntentsOperations(this);
            this.ReplicationRecoveryPlans = new ReplicationRecoveryPlansOperations(this);
            this.SupportedOperatingSystems = new SupportedOperatingSystemsOperations(this);
            this.ReplicationVaultHealth = new ReplicationVaultHealthOperations(this);
            this.ReplicationVaultSetting = new ReplicationVaultSettingOperations(this);
            this.BaseUri = new System.Uri("https://management.azure.com");
            this.ApiVersion = "2023-02-01";
            this.AcceptLanguage = "en-US";
            this.LongRunningOperationRetryTimeout = 30;
            this.GenerateClientRequestId = true;
            SerializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<ApplianceSpecificDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<ApplianceSpecificDetails>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<EventProviderSpecificDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<EventProviderSpecificDetails>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<EventSpecificDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<EventSpecificDetails>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<FabricSpecificDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<FabricSpecificDetails>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<FabricSpecificCreationInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<FabricSpecificCreationInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<NetworkMappingFabricSpecificSettings>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<NetworkMappingFabricSpecificSettings>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<FabricSpecificCreateNetworkMappingInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<FabricSpecificCreateNetworkMappingInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<FabricSpecificUpdateNetworkMappingInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<FabricSpecificUpdateNetworkMappingInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<ReplicationProviderSpecificContainerCreationInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<ReplicationProviderSpecificContainerCreationInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<MigrationProviderSpecificSettings>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<MigrationProviderSpecificSettings>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<EnableMigrationProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<EnableMigrationProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<UpdateMigrationItemProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<UpdateMigrationItemProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<MigrateProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<MigrateProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<ResumeReplicationProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<ResumeReplicationProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<ResyncProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<ResyncProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<TestMigrateProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<TestMigrateProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<ConfigurationSettings>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<ConfigurationSettings>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<ReplicationProviderSpecificSettings>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<ReplicationProviderSpecificSettings>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<EnableProtectionProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<EnableProtectionProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<UpdateReplicationProtectedItemProviderInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<UpdateReplicationProtectedItemProviderInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<AddDisksProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<AddDisksProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<ApplyRecoveryPointProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<ApplyRecoveryPointProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<PlannedFailoverProviderSpecificFailoverInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<PlannedFailoverProviderSpecificFailoverInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<ProviderSpecificRecoveryPointDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<ProviderSpecificRecoveryPointDetails>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<DisableProtectionProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<DisableProtectionProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<RemoveDisksProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<RemoveDisksProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<ReverseReplicationProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<ReverseReplicationProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<SwitchProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<SwitchProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<TestFailoverProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<TestFailoverProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<UnplannedFailoverProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<UnplannedFailoverProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<UpdateApplianceForReplicationProtectedItemProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<UpdateApplianceForReplicationProtectedItemProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<ProtectionContainerMappingProviderSpecificDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<ProtectionContainerMappingProviderSpecificDetails>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<ReplicationProviderSpecificContainerMappingInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<ReplicationProviderSpecificContainerMappingInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<ReplicationProviderSpecificUpdateContainerMappingInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<ReplicationProviderSpecificUpdateContainerMappingInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<SwitchProtectionProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<SwitchProtectionProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<TaskTypeDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<TaskTypeDetails>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<GroupTaskDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<GroupTaskDetails>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<JobDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<JobDetails>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<PolicyProviderSpecificDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<PolicyProviderSpecificDetails>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<PolicyProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<PolicyProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<ReplicationProtectionIntentProviderSpecificSettings>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<ReplicationProtectionIntentProviderSpecificSettings>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<CreateProtectionIntentProviderSpecificDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<CreateProtectionIntentProviderSpecificDetails>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<RecoveryPlanActionDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<RecoveryPlanActionDetails>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<RecoveryPlanProviderSpecificDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<RecoveryPlanProviderSpecificDetails>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<RecoveryPlanProviderSpecificInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<RecoveryPlanProviderSpecificInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<RecoveryPlanProviderSpecificFailoverInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<RecoveryPlanProviderSpecificFailoverInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<ProtectionProfileCustomDetails>("resourceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<ProtectionProfileCustomDetails>("resourceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<StorageAccountCustomDetails>("resourceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<StorageAccountCustomDetails>("resourceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<RecoveryAvailabilitySetCustomDetails>("resourceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<RecoveryAvailabilitySetCustomDetails>("resourceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<RecoveryVirtualNetworkCustomDetails>("resourceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<RecoveryVirtualNetworkCustomDetails>("resourceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<RecoveryProximityPlacementGroupCustomDetails>("resourceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<RecoveryProximityPlacementGroupCustomDetails>("resourceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<RecoveryResourceGroupCustomDetails>("resourceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<RecoveryResourceGroupCustomDetails>("resourceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<JobTaskDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<JobTaskDetails>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<HyperVReplicaPolicyInput>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<HyperVReplicaPolicyInput>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<HyperVVirtualMachineDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<HyperVVirtualMachineDetails>("instanceType"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<RecoveryPlanGroupTaskDetails>("instanceType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<RecoveryPlanGroupTaskDetails>("instanceType"));
            CustomInitialize();
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Azure.CloudErrorJsonConverter());
        }
    }
}