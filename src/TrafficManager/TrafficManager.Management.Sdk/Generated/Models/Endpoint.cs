// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.TrafficManager.Models
{
    using System.Linq;

    /// <summary>
    /// Class representing a Traffic Manager endpoint.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Endpoint : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the Endpoint class.
        /// </summary>
        public Endpoint()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Endpoint class.
        /// </summary>

        /// <param name="id">Fully qualified resource Id for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles.
        /// </param>

        /// <param name="endpointStatus">The status of the endpoint. If the endpoint is Enabled, it is probed for
        /// endpoint health and is included in the traffic routing method.
        /// Possible values include: 'Enabled', 'Disabled'</param>

        /// <param name="alwaysServe">If Always Serve is enabled, probing for endpoint health will be disabled
        /// and endpoints will be included in the traffic routing method.
        /// Possible values include: 'Enabled', 'Disabled'</param>

        /// <param name="targetResourceId">The Azure Resource URI of the of the endpoint. Not applicable to endpoints
        /// of type &#39;ExternalEndpoints&#39;.
        /// </param>

        /// <param name="target">The fully-qualified DNS name or IP address of the endpoint. Traffic Manager
        /// returns this value in DNS responses to direct traffic to this endpoint.
        /// </param>

        /// <param name="weight">The weight of this endpoint when using the &#39;Weighted&#39; traffic routing
        /// method. Possible values are from 1 to 1000.
        /// </param>

        /// <param name="priority">The priority of this endpoint when using the &#39;Priority&#39; traffic routing
        /// method. Possible values are from 1 to 1000, lower values represent higher
        /// priority. This is an optional parameter.  If specified, it must be
        /// specified on all endpoints, and no two endpoints can share the same
        /// priority value.
        /// </param>

        /// <param name="endpointLocation">Specifies the location of the external or nested endpoints when using the
        /// &#39;Performance&#39; traffic routing method.
        /// </param>

        /// <param name="endpointMonitorStatus">The monitoring status of the endpoint.
        /// Possible values include: 'CheckingEndpoint', 'Online', 'Degraded',
        /// 'Disabled', 'Inactive', 'Stopped', 'Unmonitored'</param>

        /// <param name="minChildEndpoints">The minimum number of endpoints that must be available in the child profile
        /// in order for the parent profile to be considered available. Only applicable
        /// to endpoint of type &#39;NestedEndpoints&#39;.
        /// </param>

        /// <param name="minChildEndpointsIPv4">The minimum number of IPv4 (DNS record type A) endpoints that must be
        /// available in the child profile in order for the parent profile to be
        /// considered available. Only applicable to endpoint of type
        /// &#39;NestedEndpoints&#39;.
        /// </param>

        /// <param name="minChildEndpointsIPv6">The minimum number of IPv6 (DNS record type AAAA) endpoints that must be
        /// available in the child profile in order for the parent profile to be
        /// considered available. Only applicable to endpoint of type
        /// &#39;NestedEndpoints&#39;.
        /// </param>

        /// <param name="geoMapping">The list of countries/regions mapped to this endpoint when using the
        /// &#39;Geographic&#39; traffic routing method. Please consult Traffic Manager
        /// Geographic documentation for a full list of accepted values.
        /// </param>

        /// <param name="subnets">The list of subnets, IP addresses, and/or address ranges mapped to this
        /// endpoint when using the &#39;Subnet&#39; traffic routing method. An empty list will
        /// match all ranges not covered by other endpoints.
        /// </param>

        /// <param name="customHeaders">List of custom headers.
        /// </param>
        public Endpoint(string id = default(string), string name = default(string), string type = default(string), string endpointStatus = default(string), string alwaysServe = default(string), string targetResourceId = default(string), string target = default(string), long? weight = default(long?), long? priority = default(long?), string endpointLocation = default(string), string endpointMonitorStatus = default(string), long? minChildEndpoints = default(long?), long? minChildEndpointsIPv4 = default(long?), long? minChildEndpointsIPv6 = default(long?), System.Collections.Generic.IList<string> geoMapping = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<EndpointPropertiesSubnetsItem> subnets = default(System.Collections.Generic.IList<EndpointPropertiesSubnetsItem>), System.Collections.Generic.IList<EndpointPropertiesCustomHeadersItem> customHeaders = default(System.Collections.Generic.IList<EndpointPropertiesCustomHeadersItem>))

        : base(id, name, type)
        {
            this.EndpointStatus = endpointStatus;
            this.AlwaysServe = alwaysServe;
            this.TargetResourceId = targetResourceId;
            this.Target = target;
            this.Weight = weight;
            this.Priority = priority;
            this.EndpointLocation = endpointLocation;
            this.EndpointMonitorStatus = endpointMonitorStatus;
            this.MinChildEndpoints = minChildEndpoints;
            this.MinChildEndpointsIPv4 = minChildEndpointsIPv4;
            this.MinChildEndpointsIPv6 = minChildEndpointsIPv6;
            this.GeoMapping = geoMapping;
            this.Subnets = subnets;
            this.CustomHeaders = customHeaders;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the status of the endpoint. If the endpoint is Enabled, it is
        /// probed for endpoint health and is included in the traffic routing method. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.endpointStatus")]
        public string EndpointStatus {get; set; }

        /// <summary>
        /// Gets or sets if Always Serve is enabled, probing for endpoint health will
        /// be disabled and endpoints will be included in the traffic routing method. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.alwaysServe")]
        public string AlwaysServe {get; set; }

        /// <summary>
        /// Gets or sets the Azure Resource URI of the of the endpoint. Not applicable
        /// to endpoints of type &#39;ExternalEndpoints&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.targetResourceId")]
        public string TargetResourceId {get; set; }

        /// <summary>
        /// Gets or sets the fully-qualified DNS name or IP address of the endpoint.
        /// Traffic Manager returns this value in DNS responses to direct traffic to
        /// this endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.target")]
        public string Target {get; set; }

        /// <summary>
        /// Gets or sets the weight of this endpoint when using the &#39;Weighted&#39; traffic
        /// routing method. Possible values are from 1 to 1000.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.weight")]
        public long? Weight {get; set; }

        /// <summary>
        /// Gets or sets the priority of this endpoint when using the &#39;Priority&#39;
        /// traffic routing method. Possible values are from 1 to 1000, lower values
        /// represent higher priority. This is an optional parameter.  If specified, it
        /// must be specified on all endpoints, and no two endpoints can share the same
        /// priority value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.priority")]
        public long? Priority {get; set; }

        /// <summary>
        /// Gets or sets specifies the location of the external or nested endpoints
        /// when using the &#39;Performance&#39; traffic routing method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.endpointLocation")]
        public string EndpointLocation {get; set; }

        /// <summary>
        /// Gets or sets the monitoring status of the endpoint. Possible values include: &#39;CheckingEndpoint&#39;, &#39;Online&#39;, &#39;Degraded&#39;, &#39;Disabled&#39;, &#39;Inactive&#39;, &#39;Stopped&#39;, &#39;Unmonitored&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.endpointMonitorStatus")]
        public string EndpointMonitorStatus {get; set; }

        /// <summary>
        /// Gets or sets the minimum number of endpoints that must be available in the
        /// child profile in order for the parent profile to be considered available.
        /// Only applicable to endpoint of type &#39;NestedEndpoints&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.minChildEndpoints")]
        public long? MinChildEndpoints {get; set; }

        /// <summary>
        /// Gets or sets the minimum number of IPv4 (DNS record type A) endpoints that
        /// must be available in the child profile in order for the parent profile to
        /// be considered available. Only applicable to endpoint of type
        /// &#39;NestedEndpoints&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.minChildEndpointsIPv4")]
        public long? MinChildEndpointsIPv4 {get; set; }

        /// <summary>
        /// Gets or sets the minimum number of IPv6 (DNS record type AAAA) endpoints
        /// that must be available in the child profile in order for the parent profile
        /// to be considered available. Only applicable to endpoint of type
        /// &#39;NestedEndpoints&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.minChildEndpointsIPv6")]
        public long? MinChildEndpointsIPv6 {get; set; }

        /// <summary>
        /// Gets or sets the list of countries/regions mapped to this endpoint when
        /// using the &#39;Geographic&#39; traffic routing method. Please consult Traffic
        /// Manager Geographic documentation for a full list of accepted values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.geoMapping")]
        public System.Collections.Generic.IList<string> GeoMapping {get; set; }

        /// <summary>
        /// Gets or sets the list of subnets, IP addresses, and/or address ranges
        /// mapped to this endpoint when using the &#39;Subnet&#39; traffic routing method. An
        /// empty list will match all ranges not covered by other endpoints.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.subnets")]
        public System.Collections.Generic.IList<EndpointPropertiesSubnetsItem> Subnets {get; set; }

        /// <summary>
        /// Gets or sets list of custom headers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.customHeaders")]
        public System.Collections.Generic.IList<EndpointPropertiesCustomHeadersItem> CustomHeaders {get; set; }
    }
}