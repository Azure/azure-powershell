// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.TrafficManager
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for HeatMapOperations
    /// </summary>
    public static partial class HeatMapOperationsExtensions
    {
        /// <summary>
        /// Gets latest heatmap for Traffic Manager profile.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='profileName'>
        /// The name of the Traffic Manager profile.
        /// </param>
        /// <param name='topLeft'>
        /// The top left latitude,longitude pair of the rectangular viewport to query for.
        /// </param>
        /// <param name='botRight'>
        /// The bottom right latitude,longitude pair of the rectangular viewport to query for.
        /// </param>
        public static HeatMapModel Get(this IHeatMapOperations operations, string resourceGroupName, string profileName, System.Collections.Generic.IList<double?> topLeft = default(System.Collections.Generic.IList<double?>), System.Collections.Generic.IList<double?> botRight = default(System.Collections.Generic.IList<double?>))
        {
                return ((IHeatMapOperations)operations).GetAsync(resourceGroupName, profileName, topLeft, botRight).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets latest heatmap for Traffic Manager profile.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='profileName'>
        /// The name of the Traffic Manager profile.
        /// </param>
        /// <param name='topLeft'>
        /// The top left latitude,longitude pair of the rectangular viewport to query for.
        /// </param>
        /// <param name='botRight'>
        /// The bottom right latitude,longitude pair of the rectangular viewport to query for.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HeatMapModel> GetAsync(this IHeatMapOperations operations, string resourceGroupName, string profileName, System.Collections.Generic.IList<double?> topLeft = default(System.Collections.Generic.IList<double?>), System.Collections.Generic.IList<double?> botRight = default(System.Collections.Generic.IList<double?>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, profileName, topLeft, botRight, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
