// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20211030Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Extensions;

    /// <summary>Source SQL Connection</summary>
    public partial class SqlConnectionInformation :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20211030Preview.ISqlConnectionInformation,
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20211030Preview.ISqlConnectionInformationInternal
    {

        /// <summary>Backing field for <see cref="Authentication" /> property.</summary>
        private string _authentication;

        /// <summary>Authentication type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string Authentication { get => this._authentication; set => this._authentication = value; }

        /// <summary>Backing field for <see cref="DataSource" /> property.</summary>
        private string _dataSource;

        /// <summary>Data source.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string DataSource { get => this._dataSource; set => this._dataSource = value; }

        /// <summary>Backing field for <see cref="EncryptConnection" /> property.</summary>
        private bool? _encryptConnection;

        /// <summary>Whether to encrypt connection or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? EncryptConnection { get => this._encryptConnection; set => this._encryptConnection = value; }

        /// <summary>Backing field for <see cref="Password" /> property.</summary>
        private string _password;

        /// <summary>Password to connect to source SQL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string Password { get => this._password; set => this._password = value; }

        /// <summary>Backing field for <see cref="TrustServerCertificate" /> property.</summary>
        private bool? _trustServerCertificate;

        /// <summary>Whether to trust server certificate or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public bool? TrustServerCertificate { get => this._trustServerCertificate; set => this._trustServerCertificate = value; }

        /// <summary>Backing field for <see cref="UserName" /> property.</summary>
        private string _userName;

        /// <summary>User name to connect to source SQL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public string UserName { get => this._userName; set => this._userName = value; }

        /// <summary>Creates an new <see cref="SqlConnectionInformation" /> instance.</summary>
        public SqlConnectionInformation()
        {

        }
    }
    /// Source SQL Connection
    public partial interface ISqlConnectionInformation :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IJsonSerializable
    {
        /// <summary>Authentication type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Authentication type.",
        SerializedName = @"authentication",
        PossibleTypes = new [] { typeof(string) })]
        string Authentication { get; set; }
        /// <summary>Data source.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Data source.",
        SerializedName = @"dataSource",
        PossibleTypes = new [] { typeof(string) })]
        string DataSource { get; set; }
        /// <summary>Whether to encrypt connection or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to encrypt connection or not.",
        SerializedName = @"encryptConnection",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EncryptConnection { get; set; }
        /// <summary>Password to connect to source SQL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password to connect to source SQL.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string Password { get; set; }
        /// <summary>Whether to trust server certificate or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to trust server certificate or not.",
        SerializedName = @"trustServerCertificate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TrustServerCertificate { get; set; }
        /// <summary>User name to connect to source SQL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User name to connect to source SQL.",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        string UserName { get; set; }

    }
    /// Source SQL Connection
    internal partial interface ISqlConnectionInformationInternal

    {
        /// <summary>Authentication type.</summary>
        string Authentication { get; set; }
        /// <summary>Data source.</summary>
        string DataSource { get; set; }
        /// <summary>Whether to encrypt connection or not.</summary>
        bool? EncryptConnection { get; set; }
        /// <summary>Password to connect to source SQL.</summary>
        string Password { get; set; }
        /// <summary>Whether to trust server certificate or not.</summary>
        bool? TrustServerCertificate { get; set; }
        /// <summary>User name to connect to source SQL.</summary>
        string UserName { get; set; }

    }
}