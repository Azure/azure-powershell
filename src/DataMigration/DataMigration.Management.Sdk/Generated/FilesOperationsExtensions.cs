// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DataMigration
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for FilesOperations
    /// </summary>
    public static partial class FilesOperationsExtensions
    {
        /// <summary>
        /// The project resource is a nested resource representing a stored migration
        /// project. This method returns a list of files owned by a project resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProjectFile> List(this IFilesOperations operations, string groupName, string serviceName, string projectName)
        {
                return ((IFilesOperations)operations).ListAsync(groupName, serviceName, projectName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The project resource is a nested resource representing a stored migration
        /// project. This method returns a list of files owned by a project resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProjectFile>> ListAsync(this IFilesOperations operations, string groupName, string serviceName, string projectName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(groupName, serviceName, projectName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The files resource is a nested, proxy-only resource representing a file
        /// stored under the project resource. This method retrieves information about
        /// a file.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='fileName'>
        /// Name of the File
        /// </param>
        public static ProjectFile Get(this IFilesOperations operations, string groupName, string serviceName, string projectName, string fileName)
        {
                return ((IFilesOperations)operations).GetAsync(groupName, serviceName, projectName, fileName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The files resource is a nested, proxy-only resource representing a file
        /// stored under the project resource. This method retrieves information about
        /// a file.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='fileName'>
        /// Name of the File
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProjectFile> GetAsync(this IFilesOperations operations, string groupName, string serviceName, string projectName, string fileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(groupName, serviceName, projectName, fileName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The PUT method creates a new file or updates an existing one.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='fileName'>
        /// Name of the File
        /// </param>
        public static ProjectFile CreateOrUpdate(this IFilesOperations operations, string groupName, string serviceName, string projectName, string fileName, ProjectFile parameters)
        {
                return ((IFilesOperations)operations).CreateOrUpdateAsync(groupName, serviceName, projectName, fileName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The PUT method creates a new file or updates an existing one.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='fileName'>
        /// Name of the File
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProjectFile> CreateOrUpdateAsync(this IFilesOperations operations, string groupName, string serviceName, string projectName, string fileName, ProjectFile parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(groupName, serviceName, projectName, fileName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This method deletes a file.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='fileName'>
        /// Name of the File
        /// </param>
        public static void Delete(this IFilesOperations operations, string groupName, string serviceName, string projectName, string fileName)
        {
                ((IFilesOperations)operations).DeleteAsync(groupName, serviceName, projectName, fileName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This method deletes a file.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='fileName'>
        /// Name of the File
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IFilesOperations operations, string groupName, string serviceName, string projectName, string fileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(groupName, serviceName, projectName, fileName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// This method updates an existing file.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='fileName'>
        /// Name of the File
        /// </param>
        public static ProjectFile Update(this IFilesOperations operations, string groupName, string serviceName, string projectName, string fileName, ProjectFile parameters)
        {
                return ((IFilesOperations)operations).UpdateAsync(groupName, serviceName, projectName, fileName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This method updates an existing file.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='fileName'>
        /// Name of the File
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProjectFile> UpdateAsync(this IFilesOperations operations, string groupName, string serviceName, string projectName, string fileName, ProjectFile parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(groupName, serviceName, projectName, fileName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This method is used for requesting storage information using which contents
        /// of the file can be downloaded.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='fileName'>
        /// Name of the File
        /// </param>
        public static FileStorageInfo Read(this IFilesOperations operations, string groupName, string serviceName, string projectName, string fileName)
        {
                return ((IFilesOperations)operations).ReadAsync(groupName, serviceName, projectName, fileName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This method is used for requesting storage information using which contents
        /// of the file can be downloaded.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='fileName'>
        /// Name of the File
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FileStorageInfo> ReadAsync(this IFilesOperations operations, string groupName, string serviceName, string projectName, string fileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ReadWithHttpMessagesAsync(groupName, serviceName, projectName, fileName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This method is used for requesting information for reading and writing the
        /// file content.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='fileName'>
        /// Name of the File
        /// </param>
        public static FileStorageInfo ReadWrite(this IFilesOperations operations, string groupName, string serviceName, string projectName, string fileName)
        {
                return ((IFilesOperations)operations).ReadWriteAsync(groupName, serviceName, projectName, fileName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This method is used for requesting information for reading and writing the
        /// file content.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='fileName'>
        /// Name of the File
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<FileStorageInfo> ReadWriteAsync(this IFilesOperations operations, string groupName, string serviceName, string projectName, string fileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ReadWriteWithHttpMessagesAsync(groupName, serviceName, projectName, fileName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The project resource is a nested resource representing a stored migration
        /// project. This method returns a list of files owned by a project resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProjectFile> ListNext(this IFilesOperations operations, string nextPageLink)
        {
                return ((IFilesOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The project resource is a nested resource representing a stored migration
        /// project. This method returns a list of files owned by a project resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProjectFile>> ListNextAsync(this IFilesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
