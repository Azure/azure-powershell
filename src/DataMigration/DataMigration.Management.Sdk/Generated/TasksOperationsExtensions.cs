// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DataMigration
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for TasksOperations
    /// </summary>
    public static partial class TasksOperationsExtensions
    {
        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. This method returns a list of tasks owned by a
        /// service resource. Some tasks may have a status of Unknown, which indicates
        /// that an error occurred while querying the status of that task.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='taskType'>
        /// Filter tasks by task type
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProjectTask> List(this ITasksOperations operations, string groupName, string serviceName, string projectName, string taskType = default(string))
        {
                return ((ITasksOperations)operations).ListAsync(groupName, serviceName, projectName, taskType).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. This method returns a list of tasks owned by a
        /// service resource. Some tasks may have a status of Unknown, which indicates
        /// that an error occurred while querying the status of that task.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='taskType'>
        /// Filter tasks by task type
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProjectTask>> ListAsync(this ITasksOperations operations, string groupName, string serviceName, string projectName, string taskType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(groupName, serviceName, projectName, taskType, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The tasks resource is a nested, proxy-only resource representing work
        /// performed by a DMS instance. The PUT method creates a new task or updates
        /// an existing one, although since tasks have no mutable custom properties,
        /// there is little reason to update an existing one.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='taskName'>
        /// Name of the Task
        /// </param>
        public static ProjectTask CreateOrUpdate(this ITasksOperations operations, string groupName, string serviceName, string projectName, string taskName, ProjectTask parameters)
        {
                return ((ITasksOperations)operations).CreateOrUpdateAsync(groupName, serviceName, projectName, taskName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The tasks resource is a nested, proxy-only resource representing work
        /// performed by a DMS instance. The PUT method creates a new task or updates
        /// an existing one, although since tasks have no mutable custom properties,
        /// there is little reason to update an existing one.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='taskName'>
        /// Name of the Task
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProjectTask> CreateOrUpdateAsync(this ITasksOperations operations, string groupName, string serviceName, string projectName, string taskName, ProjectTask parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(groupName, serviceName, projectName, taskName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The tasks resource is a nested, proxy-only resource representing work
        /// performed by a DMS instance. The GET method retrieves information about a
        /// task.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='taskName'>
        /// Name of the Task
        /// </param>
        /// <param name='expand'>
        /// Expand the response
        /// </param>
        public static ProjectTask Get(this ITasksOperations operations, string groupName, string serviceName, string projectName, string taskName, string expand = default(string))
        {
                return ((ITasksOperations)operations).GetAsync(groupName, serviceName, projectName, taskName, expand).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The tasks resource is a nested, proxy-only resource representing work
        /// performed by a DMS instance. The GET method retrieves information about a
        /// task.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='taskName'>
        /// Name of the Task
        /// </param>
        /// <param name='expand'>
        /// Expand the response
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProjectTask> GetAsync(this ITasksOperations operations, string groupName, string serviceName, string projectName, string taskName, string expand = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(groupName, serviceName, projectName, taskName, expand, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The tasks resource is a nested, proxy-only resource representing work
        /// performed by a DMS instance. The DELETE method deletes a task, canceling it
        /// first if it&#39;s running.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='taskName'>
        /// Name of the Task
        /// </param>
        /// <param name='deleteRunningTasks'>
        /// Delete the resource even if it contains running tasks
        /// </param>
        public static void Delete(this ITasksOperations operations, string groupName, string serviceName, string projectName, string taskName, bool? deleteRunningTasks = default(bool?))
        {
                ((ITasksOperations)operations).DeleteAsync(groupName, serviceName, projectName, taskName, deleteRunningTasks).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The tasks resource is a nested, proxy-only resource representing work
        /// performed by a DMS instance. The DELETE method deletes a task, canceling it
        /// first if it&#39;s running.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='taskName'>
        /// Name of the Task
        /// </param>
        /// <param name='deleteRunningTasks'>
        /// Delete the resource even if it contains running tasks
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this ITasksOperations operations, string groupName, string serviceName, string projectName, string taskName, bool? deleteRunningTasks = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(groupName, serviceName, projectName, taskName, deleteRunningTasks, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The tasks resource is a nested, proxy-only resource representing work
        /// performed by a DMS instance. The PATCH method updates an existing task, but
        /// since tasks have no mutable custom properties, there is little reason to do
        /// so.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='taskName'>
        /// Name of the Task
        /// </param>
        public static ProjectTask Update(this ITasksOperations operations, string groupName, string serviceName, string projectName, string taskName, ProjectTask parameters)
        {
                return ((ITasksOperations)operations).UpdateAsync(groupName, serviceName, projectName, taskName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The tasks resource is a nested, proxy-only resource representing work
        /// performed by a DMS instance. The PATCH method updates an existing task, but
        /// since tasks have no mutable custom properties, there is little reason to do
        /// so.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='taskName'>
        /// Name of the Task
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProjectTask> UpdateAsync(this ITasksOperations operations, string groupName, string serviceName, string projectName, string taskName, ProjectTask parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(groupName, serviceName, projectName, taskName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The tasks resource is a nested, proxy-only resource representing work
        /// performed by a DMS instance. This method cancels a task if it&#39;s currently
        /// queued or running.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='taskName'>
        /// Name of the Task
        /// </param>
        public static ProjectTask Cancel(this ITasksOperations operations, string groupName, string serviceName, string projectName, string taskName)
        {
                return ((ITasksOperations)operations).CancelAsync(groupName, serviceName, projectName, taskName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The tasks resource is a nested, proxy-only resource representing work
        /// performed by a DMS instance. This method cancels a task if it&#39;s currently
        /// queued or running.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='taskName'>
        /// Name of the Task
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ProjectTask> CancelAsync(this ITasksOperations operations, string groupName, string serviceName, string projectName, string taskName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CancelWithHttpMessagesAsync(groupName, serviceName, projectName, taskName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The tasks resource is a nested, proxy-only resource representing work
        /// performed by a DMS instance. This method executes a command on a running
        /// task.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='taskName'>
        /// Name of the Task
        /// </param>
        public static CommandProperties Command(this ITasksOperations operations, string groupName, string serviceName, string projectName, string taskName, CommandProperties parameters)
        {
                return ((ITasksOperations)operations).CommandAsync(groupName, serviceName, projectName, taskName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The tasks resource is a nested, proxy-only resource representing work
        /// performed by a DMS instance. This method executes a command on a running
        /// task.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='taskName'>
        /// Name of the Task
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CommandProperties> CommandAsync(this ITasksOperations operations, string groupName, string serviceName, string projectName, string taskName, CommandProperties parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CommandWithHttpMessagesAsync(groupName, serviceName, projectName, taskName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. This method returns a list of tasks owned by a
        /// service resource. Some tasks may have a status of Unknown, which indicates
        /// that an error occurred while querying the status of that task.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ProjectTask> ListNext(this ITasksOperations operations, string nextPageLink)
        {
                return ((ITasksOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. This method returns a list of tasks owned by a
        /// service resource. Some tasks may have a status of Unknown, which indicates
        /// that an error occurred while querying the status of that task.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ProjectTask>> ListNextAsync(this ITasksOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
