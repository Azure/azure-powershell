// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DataMigration
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ServicesOperations
    /// </summary>
    public static partial class ServicesOperationsExtensions
    {
        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. The PUT method creates a new service or updates
        /// an existing one. When a service is updated, existing child resources (i.e.
        /// tasks) are unaffected. Services currently support a single kind, &#34;vm&#34;,
        /// which refers to a VM-based service, although other kinds may be added in
        /// the future. This method can change the kind, SKU, and network of the
        /// service, but if tasks are currently running (i.e. the service is busy),
        /// this will fail with 400 Bad Request (&#34;ServiceIsBusy&#34;). The provider will
        /// reply when successful with 200 OK or 201 Created. Long-running operations
        /// use the provisioningState property.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        public static DataMigrationService CreateOrUpdate(this IServicesOperations operations, string groupName, string serviceName, DataMigrationService parameters)
        {
                return ((IServicesOperations)operations).CreateOrUpdateAsync(groupName, serviceName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. The PUT method creates a new service or updates
        /// an existing one. When a service is updated, existing child resources (i.e.
        /// tasks) are unaffected. Services currently support a single kind, &#34;vm&#34;,
        /// which refers to a VM-based service, although other kinds may be added in
        /// the future. This method can change the kind, SKU, and network of the
        /// service, but if tasks are currently running (i.e. the service is busy),
        /// this will fail with 400 Bad Request (&#34;ServiceIsBusy&#34;). The provider will
        /// reply when successful with 200 OK or 201 Created. Long-running operations
        /// use the provisioningState property.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataMigrationService> CreateOrUpdateAsync(this IServicesOperations operations, string groupName, string serviceName, DataMigrationService parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(groupName, serviceName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. The GET method retrieves information about a
        /// service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        public static DataMigrationService Get(this IServicesOperations operations, string groupName, string serviceName)
        {
                return ((IServicesOperations)operations).GetAsync(groupName, serviceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. The GET method retrieves information about a
        /// service instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataMigrationService> GetAsync(this IServicesOperations operations, string groupName, string serviceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(groupName, serviceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. The DELETE method deletes a service. Any
        /// running tasks will be canceled.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='deleteRunningTasks'>
        /// Delete the resource even if it contains running tasks
        /// </param>
        public static void Delete(this IServicesOperations operations, string groupName, string serviceName, bool? deleteRunningTasks = default(bool?))
        {
                ((IServicesOperations)operations).DeleteAsync(groupName, serviceName, deleteRunningTasks).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. The DELETE method deletes a service. Any
        /// running tasks will be canceled.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='deleteRunningTasks'>
        /// Delete the resource even if it contains running tasks
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IServicesOperations operations, string groupName, string serviceName, bool? deleteRunningTasks = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(groupName, serviceName, deleteRunningTasks, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. The PATCH method updates an existing service.
        /// This method can change the kind, SKU, and network of the service, but if
        /// tasks are currently running (i.e. the service is busy), this will fail with
        /// 400 Bad Request (&#34;ServiceIsBusy&#34;).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        public static DataMigrationService Update(this IServicesOperations operations, string groupName, string serviceName, DataMigrationService parameters)
        {
                return ((IServicesOperations)operations).UpdateAsync(groupName, serviceName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. The PATCH method updates an existing service.
        /// This method can change the kind, SKU, and network of the service, but if
        /// tasks are currently running (i.e. the service is busy), this will fail with
        /// 400 Bad Request (&#34;ServiceIsBusy&#34;).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataMigrationService> UpdateAsync(this IServicesOperations operations, string groupName, string serviceName, DataMigrationService parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(groupName, serviceName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. This action performs a health check and returns
        /// the status of the service and virtual machine size.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        public static DataMigrationServiceStatusResponse CheckStatus(this IServicesOperations operations, string groupName, string serviceName)
        {
                return ((IServicesOperations)operations).CheckStatusAsync(groupName, serviceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. This action performs a health check and returns
        /// the status of the service and virtual machine size.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataMigrationServiceStatusResponse> CheckStatusAsync(this IServicesOperations operations, string groupName, string serviceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckStatusWithHttpMessagesAsync(groupName, serviceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. This action starts the service and the service
        /// can be used for data migration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        public static void Start(this IServicesOperations operations, string groupName, string serviceName)
        {
                ((IServicesOperations)operations).StartAsync(groupName, serviceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. This action starts the service and the service
        /// can be used for data migration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task StartAsync(this IServicesOperations operations, string groupName, string serviceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.StartWithHttpMessagesAsync(groupName, serviceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. This action stops the service and the service
        /// cannot be used for data migration. The service owner won&#39;t be billed when
        /// the service is stopped.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        public static void Stop(this IServicesOperations operations, string groupName, string serviceName)
        {
                ((IServicesOperations)operations).StopAsync(groupName, serviceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. This action stops the service and the service
        /// cannot be used for data migration. The service owner won&#39;t be billed when
        /// the service is stopped.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task StopAsync(this IServicesOperations operations, string groupName, string serviceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.StopWithHttpMessagesAsync(groupName, serviceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. The skus action returns the list of SKUs that a
        /// service resource can be updated to.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AvailableServiceSku> ListSkus(this IServicesOperations operations, string groupName, string serviceName)
        {
                return ((IServicesOperations)operations).ListSkusAsync(groupName, serviceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. The skus action returns the list of SKUs that a
        /// service resource can be updated to.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AvailableServiceSku>> ListSkusAsync(this IServicesOperations operations, string groupName, string serviceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSkusWithHttpMessagesAsync(groupName, serviceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This method checks whether a proposed nested resource name is valid and
        /// available.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        public static NameAvailabilityResponse CheckChildrenNameAvailability(this IServicesOperations operations, string groupName, string serviceName, NameAvailabilityRequest parameters)
        {
                return ((IServicesOperations)operations).CheckChildrenNameAvailabilityAsync(groupName, serviceName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This method checks whether a proposed nested resource name is valid and
        /// available.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<NameAvailabilityResponse> CheckChildrenNameAvailabilityAsync(this IServicesOperations operations, string groupName, string serviceName, NameAvailabilityRequest parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckChildrenNameAvailabilityWithHttpMessagesAsync(groupName, serviceName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The Services resource is the top-level resource that represents the
        /// Database Migration Service. This method returns a list of service resources
        /// in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DataMigrationService> ListByResourceGroup(this IServicesOperations operations, string groupName)
        {
                return ((IServicesOperations)operations).ListByResourceGroupAsync(groupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The Services resource is the top-level resource that represents the
        /// Database Migration Service. This method returns a list of service resources
        /// in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DataMigrationService>> ListByResourceGroupAsync(this IServicesOperations operations, string groupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(groupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. This method returns a list of service resources
        /// in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DataMigrationService> List(this IServicesOperations operations)
        {
                return ((IServicesOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. This method returns a list of service resources
        /// in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DataMigrationService>> ListAsync(this IServicesOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This method checks whether a proposed top-level resource name is valid and
        /// available.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The Azure region of the operation
        /// </param>
        public static NameAvailabilityResponse CheckNameAvailability(this IServicesOperations operations, string location, NameAvailabilityRequest parameters)
        {
                return ((IServicesOperations)operations).CheckNameAvailabilityAsync(location, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This method checks whether a proposed top-level resource name is valid and
        /// available.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The Azure region of the operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<NameAvailabilityResponse> CheckNameAvailabilityAsync(this IServicesOperations operations, string location, NameAvailabilityRequest parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(location, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. The PUT method creates a new service or updates
        /// an existing one. When a service is updated, existing child resources (i.e.
        /// tasks) are unaffected. Services currently support a single kind, &#34;vm&#34;,
        /// which refers to a VM-based service, although other kinds may be added in
        /// the future. This method can change the kind, SKU, and network of the
        /// service, but if tasks are currently running (i.e. the service is busy),
        /// this will fail with 400 Bad Request (&#34;ServiceIsBusy&#34;). The provider will
        /// reply when successful with 200 OK or 201 Created. Long-running operations
        /// use the provisioningState property.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        public static DataMigrationService BeginCreateOrUpdate(this IServicesOperations operations, string groupName, string serviceName, DataMigrationService parameters)
        {
                return ((IServicesOperations)operations).BeginCreateOrUpdateAsync(groupName, serviceName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. The PUT method creates a new service or updates
        /// an existing one. When a service is updated, existing child resources (i.e.
        /// tasks) are unaffected. Services currently support a single kind, &#34;vm&#34;,
        /// which refers to a VM-based service, although other kinds may be added in
        /// the future. This method can change the kind, SKU, and network of the
        /// service, but if tasks are currently running (i.e. the service is busy),
        /// this will fail with 400 Bad Request (&#34;ServiceIsBusy&#34;). The provider will
        /// reply when successful with 200 OK or 201 Created. Long-running operations
        /// use the provisioningState property.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataMigrationService> BeginCreateOrUpdateAsync(this IServicesOperations operations, string groupName, string serviceName, DataMigrationService parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(groupName, serviceName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. The DELETE method deletes a service. Any
        /// running tasks will be canceled.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='deleteRunningTasks'>
        /// Delete the resource even if it contains running tasks
        /// </param>
        public static void BeginDelete(this IServicesOperations operations, string groupName, string serviceName, bool? deleteRunningTasks = default(bool?))
        {
                ((IServicesOperations)operations).BeginDeleteAsync(groupName, serviceName, deleteRunningTasks).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. The DELETE method deletes a service. Any
        /// running tasks will be canceled.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='deleteRunningTasks'>
        /// Delete the resource even if it contains running tasks
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IServicesOperations operations, string groupName, string serviceName, bool? deleteRunningTasks = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(groupName, serviceName, deleteRunningTasks, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. The PATCH method updates an existing service.
        /// This method can change the kind, SKU, and network of the service, but if
        /// tasks are currently running (i.e. the service is busy), this will fail with
        /// 400 Bad Request (&#34;ServiceIsBusy&#34;).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        public static DataMigrationService BeginUpdate(this IServicesOperations operations, string groupName, string serviceName, DataMigrationService parameters)
        {
                return ((IServicesOperations)operations).BeginUpdateAsync(groupName, serviceName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. The PATCH method updates an existing service.
        /// This method can change the kind, SKU, and network of the service, but if
        /// tasks are currently running (i.e. the service is busy), this will fail with
        /// 400 Bad Request (&#34;ServiceIsBusy&#34;).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataMigrationService> BeginUpdateAsync(this IServicesOperations operations, string groupName, string serviceName, DataMigrationService parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(groupName, serviceName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. This action starts the service and the service
        /// can be used for data migration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        public static void BeginStart(this IServicesOperations operations, string groupName, string serviceName)
        {
                ((IServicesOperations)operations).BeginStartAsync(groupName, serviceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. This action starts the service and the service
        /// can be used for data migration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginStartAsync(this IServicesOperations operations, string groupName, string serviceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginStartWithHttpMessagesAsync(groupName, serviceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. This action stops the service and the service
        /// cannot be used for data migration. The service owner won&#39;t be billed when
        /// the service is stopped.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        public static void BeginStop(this IServicesOperations operations, string groupName, string serviceName)
        {
                ((IServicesOperations)operations).BeginStopAsync(groupName, serviceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. This action stops the service and the service
        /// cannot be used for data migration. The service owner won&#39;t be billed when
        /// the service is stopped.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginStopAsync(this IServicesOperations operations, string groupName, string serviceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginStopWithHttpMessagesAsync(groupName, serviceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. The skus action returns the list of SKUs that a
        /// service resource can be updated to.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AvailableServiceSku> ListSkusNext(this IServicesOperations operations, string nextPageLink)
        {
                return ((IServicesOperations)operations).ListSkusNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. The skus action returns the list of SKUs that a
        /// service resource can be updated to.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AvailableServiceSku>> ListSkusNextAsync(this IServicesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSkusNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The Services resource is the top-level resource that represents the
        /// Database Migration Service. This method returns a list of service resources
        /// in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DataMigrationService> ListByResourceGroupNext(this IServicesOperations operations, string nextPageLink)
        {
                return ((IServicesOperations)operations).ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The Services resource is the top-level resource that represents the
        /// Database Migration Service. This method returns a list of service resources
        /// in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DataMigrationService>> ListByResourceGroupNextAsync(this IServicesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. This method returns a list of service resources
        /// in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DataMigrationService> ListNext(this IServicesOperations operations, string nextPageLink)
        {
                return ((IServicesOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The services resource is the top-level resource that represents the
        /// Database Migration Service. This method returns a list of service resources
        /// in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DataMigrationService>> ListNextAsync(this IServicesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
