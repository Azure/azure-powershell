// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DataMigration
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ProjectsOperations
    /// </summary>
    public static partial class ProjectsOperationsExtensions
    {
        /// <summary>
        /// The project resource is a nested resource representing a stored migration
        /// project. This method returns a list of projects owned by a service
        /// resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Project> List(this IProjectsOperations operations, string groupName, string serviceName)
        {
                return ((IProjectsOperations)operations).ListAsync(groupName, serviceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The project resource is a nested resource representing a stored migration
        /// project. This method returns a list of projects owned by a service
        /// resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Project>> ListAsync(this IProjectsOperations operations, string groupName, string serviceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(groupName, serviceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The project resource is a nested resource representing a stored migration
        /// project. The PUT method creates a new project or updates an existing one.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        public static Project CreateOrUpdate(this IProjectsOperations operations, string groupName, string serviceName, string projectName, Project parameters)
        {
                return ((IProjectsOperations)operations).CreateOrUpdateAsync(groupName, serviceName, projectName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The project resource is a nested resource representing a stored migration
        /// project. The PUT method creates a new project or updates an existing one.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Project> CreateOrUpdateAsync(this IProjectsOperations operations, string groupName, string serviceName, string projectName, Project parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(groupName, serviceName, projectName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The project resource is a nested resource representing a stored migration
        /// project. The GET method retrieves information about a project.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        public static Project Get(this IProjectsOperations operations, string groupName, string serviceName, string projectName)
        {
                return ((IProjectsOperations)operations).GetAsync(groupName, serviceName, projectName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The project resource is a nested resource representing a stored migration
        /// project. The GET method retrieves information about a project.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Project> GetAsync(this IProjectsOperations operations, string groupName, string serviceName, string projectName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(groupName, serviceName, projectName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The project resource is a nested resource representing a stored migration
        /// project. The DELETE method deletes a project.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='deleteRunningTasks'>
        /// Delete the resource even if it contains running tasks
        /// </param>
        public static void Delete(this IProjectsOperations operations, string groupName, string serviceName, string projectName, bool? deleteRunningTasks = default(bool?))
        {
                ((IProjectsOperations)operations).DeleteAsync(groupName, serviceName, projectName, deleteRunningTasks).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The project resource is a nested resource representing a stored migration
        /// project. The DELETE method deletes a project.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='deleteRunningTasks'>
        /// Delete the resource even if it contains running tasks
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IProjectsOperations operations, string groupName, string serviceName, string projectName, bool? deleteRunningTasks = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(groupName, serviceName, projectName, deleteRunningTasks, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// The project resource is a nested resource representing a stored migration
        /// project. The PATCH method updates an existing project.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        public static Project Update(this IProjectsOperations operations, string groupName, string serviceName, string projectName, Project parameters)
        {
                return ((IProjectsOperations)operations).UpdateAsync(groupName, serviceName, projectName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The project resource is a nested resource representing a stored migration
        /// project. The PATCH method updates an existing project.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// Name of the resource group
        /// </param>
        /// <param name='serviceName'>
        /// Name of the service
        /// </param>
        /// <param name='projectName'>
        /// Name of the project
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Project> UpdateAsync(this IProjectsOperations operations, string groupName, string serviceName, string projectName, Project parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(groupName, serviceName, projectName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// The project resource is a nested resource representing a stored migration
        /// project. This method returns a list of projects owned by a service
        /// resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Project> ListNext(this IProjectsOperations operations, string nextPageLink)
        {
                return ((IProjectsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The project resource is a nested resource representing a stored migration
        /// project. This method returns a list of projects owned by a service
        /// resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Project>> ListNextAsync(this IProjectsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
