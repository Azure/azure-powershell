// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    [Newtonsoft.Json.JsonObject("DatabaseLevelOutput")]
    public partial class MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel : MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput
    {
        /// <summary>
        /// Initializes a new instance of the MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel class.
        /// </summary>
        public MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel class.
        /// </summary>

        /// <param name="id">Result identifier
        /// </param>

        /// <param name="databaseName">Name of the database
        /// </param>

        /// <param name="startedOn">Migration start time
        /// </param>

        /// <param name="endedOn">Migration end time
        /// </param>

        /// <param name="migrationState">Migration state that this database is in
        /// Possible values include: &#39;UNDEFINED&#39;, &#39;CONFIGURING&#39;, &#39;INITIALIAZING&#39;,
        /// &#39;STARTING&#39;, &#39;RUNNING&#39;, &#39;READY_TO_COMPLETE&#39;, &#39;COMPLETING&#39;, &#39;COMPLETE&#39;,
        /// &#39;CANCELLING&#39;, &#39;CANCELLED&#39;, &#39;FAILED&#39;</param>

        /// <param name="incomingChanges">Number of incoming changes
        /// </param>

        /// <param name="appliedChanges">Number of applied changes
        /// </param>

        /// <param name="cdcInsertCounter">Number of cdc inserts
        /// </param>

        /// <param name="cdcDeleteCounter">Number of cdc deletes
        /// </param>

        /// <param name="cdcUpdateCounter">Number of cdc updates
        /// </param>

        /// <param name="fullLoadCompletedTables">Number of tables completed in full load
        /// </param>

        /// <param name="fullLoadLoadingTables">Number of tables loading in full load
        /// </param>

        /// <param name="fullLoadQueuedTables">Number of tables queued in full load
        /// </param>

        /// <param name="fullLoadErroredTables">Number of tables errored in full load
        /// </param>

        /// <param name="initializationCompleted">Indicates if initial load (full load) has been completed
        /// </param>

        /// <param name="latency">CDC apply latency
        /// </param>
        public MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel(string id = default(string), string databaseName = default(string), System.DateTimeOffset? startedOn = default(System.DateTimeOffset?), System.DateTimeOffset? endedOn = default(System.DateTimeOffset?), string migrationState = default(string), long? incomingChanges = default(long?), long? appliedChanges = default(long?), long? cdcInsertCounter = default(long?), long? cdcDeleteCounter = default(long?), long? cdcUpdateCounter = default(long?), long? fullLoadCompletedTables = default(long?), long? fullLoadLoadingTables = default(long?), long? fullLoadQueuedTables = default(long?), long? fullLoadErroredTables = default(long?), bool? initializationCompleted = default(bool?), long? latency = default(long?))

        : base(id)
        {
            this.DatabaseName = databaseName;
            this.StartedOn = startedOn;
            this.EndedOn = endedOn;
            this.MigrationState = migrationState;
            this.IncomingChanges = incomingChanges;
            this.AppliedChanges = appliedChanges;
            this.CdcInsertCounter = cdcInsertCounter;
            this.CdcDeleteCounter = cdcDeleteCounter;
            this.CdcUpdateCounter = cdcUpdateCounter;
            this.FullLoadCompletedTables = fullLoadCompletedTables;
            this.FullLoadLoadingTables = fullLoadLoadingTables;
            this.FullLoadQueuedTables = fullLoadQueuedTables;
            this.FullLoadErroredTables = fullLoadErroredTables;
            this.InitializationCompleted = initializationCompleted;
            this.Latency = latency;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets name of the database
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName {get; private set; }

        /// <summary>
        /// Gets migration start time
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startedOn")]
        public System.DateTimeOffset? StartedOn {get; private set; }

        /// <summary>
        /// Gets migration end time
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endedOn")]
        public System.DateTimeOffset? EndedOn {get; private set; }

        /// <summary>
        /// Gets migration state that this database is in Possible values include: &#39;UNDEFINED&#39;, &#39;CONFIGURING&#39;, &#39;INITIALIAZING&#39;, &#39;STARTING&#39;, &#39;RUNNING&#39;, &#39;READY_TO_COMPLETE&#39;, &#39;COMPLETING&#39;, &#39;COMPLETE&#39;, &#39;CANCELLING&#39;, &#39;CANCELLED&#39;, &#39;FAILED&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "migrationState")]
        public string MigrationState {get; private set; }

        /// <summary>
        /// Gets number of incoming changes
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "incomingChanges")]
        public long? IncomingChanges {get; private set; }

        /// <summary>
        /// Gets number of applied changes
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "appliedChanges")]
        public long? AppliedChanges {get; private set; }

        /// <summary>
        /// Gets number of cdc inserts
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cdcInsertCounter")]
        public long? CdcInsertCounter {get; private set; }

        /// <summary>
        /// Gets number of cdc deletes
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cdcDeleteCounter")]
        public long? CdcDeleteCounter {get; private set; }

        /// <summary>
        /// Gets number of cdc updates
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cdcUpdateCounter")]
        public long? CdcUpdateCounter {get; private set; }

        /// <summary>
        /// Gets number of tables completed in full load
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fullLoadCompletedTables")]
        public long? FullLoadCompletedTables {get; private set; }

        /// <summary>
        /// Gets number of tables loading in full load
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fullLoadLoadingTables")]
        public long? FullLoadLoadingTables {get; private set; }

        /// <summary>
        /// Gets number of tables queued in full load
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fullLoadQueuedTables")]
        public long? FullLoadQueuedTables {get; private set; }

        /// <summary>
        /// Gets number of tables errored in full load
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fullLoadErroredTables")]
        public long? FullLoadErroredTables {get; private set; }

        /// <summary>
        /// Gets indicates if initial load (full load) has been completed
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "initializationCompleted")]
        public bool? InitializationCompleted {get; private set; }

        /// <summary>
        /// Gets cDC apply latency
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "latency")]
        public long? Latency {get; private set; }
    }
}