// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// A project resource
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Project : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the Project class.
        /// </summary>
        public Project()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Project class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="sourcePlatform">Source platform for the project
        /// Possible values include: &#39;SQL&#39;, &#39;MySQL&#39;, &#39;PostgreSql&#39;, &#39;MongoDb&#39;, &#39;Unknown&#39;</param>

        /// <param name="targetPlatform">Target platform for the project
        /// Possible values include: &#39;SQLDB&#39;, &#39;SQLMI&#39;, &#39;AzureDbForMySql&#39;,
        /// &#39;AzureDbForPostgreSql&#39;, &#39;MongoDb&#39;, &#39;Unknown&#39;</param>

        /// <param name="creationTime">UTC Date and time when project was created
        /// </param>

        /// <param name="sourceConnectionInfo">Information for connecting to source
        /// </param>

        /// <param name="targetConnectionInfo">Information for connecting to target
        /// </param>

        /// <param name="databasesInfo">List of DatabaseInfo
        /// </param>

        /// <param name="provisioningState">The project&#39;s provisioning state
        /// Possible values include: &#39;Deleting&#39;, &#39;Succeeded&#39;</param>
        public Project(string location, string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string sourcePlatform = default(string), string targetPlatform = default(string), System.DateTimeOffset? creationTime = default(System.DateTimeOffset?), ConnectionInfo sourceConnectionInfo = default(ConnectionInfo), ConnectionInfo targetConnectionInfo = default(ConnectionInfo), System.Collections.Generic.IList<DatabaseInfo> databasesInfo = default(System.Collections.Generic.IList<DatabaseInfo>), string provisioningState = default(string))

        : base(location, id, name, type, tags)
        {
            this.SourcePlatform = sourcePlatform;
            this.TargetPlatform = targetPlatform;
            this.CreationTime = creationTime;
            this.SourceConnectionInfo = sourceConnectionInfo;
            this.TargetConnectionInfo = targetConnectionInfo;
            this.DatabasesInfo = databasesInfo;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets source platform for the project Possible values include: &#39;SQL&#39;, &#39;MySQL&#39;, &#39;PostgreSql&#39;, &#39;MongoDb&#39;, &#39;Unknown&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sourcePlatform")]
        public string SourcePlatform {get; set; }

        /// <summary>
        /// Gets or sets target platform for the project Possible values include: &#39;SQLDB&#39;, &#39;SQLMI&#39;, &#39;AzureDbForMySql&#39;, &#39;AzureDbForPostgreSql&#39;, &#39;MongoDb&#39;, &#39;Unknown&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.targetPlatform")]
        public string TargetPlatform {get; set; }

        /// <summary>
        /// Gets uTC Date and time when project was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.creationTime")]
        public System.DateTimeOffset? CreationTime {get; private set; }

        /// <summary>
        /// Gets or sets information for connecting to source
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sourceConnectionInfo")]
        public ConnectionInfo SourceConnectionInfo {get; set; }

        /// <summary>
        /// Gets or sets information for connecting to target
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.targetConnectionInfo")]
        public ConnectionInfo TargetConnectionInfo {get; set; }

        /// <summary>
        /// Gets or sets list of DatabaseInfo
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.databasesInfo")]
        public System.Collections.Generic.IList<DatabaseInfo> DatabasesInfo {get; set; }

        /// <summary>
        /// Gets the project&#39;s provisioning state Possible values include: &#39;Deleting&#39;, &#39;Succeeded&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();




            if (this.DatabasesInfo != null)
            {
                foreach (var element in this.DatabasesInfo)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

        }
    }
}