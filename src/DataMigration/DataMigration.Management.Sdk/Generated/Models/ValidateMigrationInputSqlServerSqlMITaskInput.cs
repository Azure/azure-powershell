// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Input for task that validates migration input for SQL to Azure SQL Managed
    /// Instance
    /// </summary>
    public partial class ValidateMigrationInputSqlServerSqlMITaskInput
    {
        /// <summary>
        /// Initializes a new instance of the ValidateMigrationInputSqlServerSqlMITaskInput class.
        /// </summary>
        public ValidateMigrationInputSqlServerSqlMITaskInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ValidateMigrationInputSqlServerSqlMITaskInput class.
        /// </summary>

        /// <param name="sourceConnectionInfo">Information for connecting to source
        /// </param>

        /// <param name="targetConnectionInfo">Information for connecting to target
        /// </param>

        /// <param name="selectedDatabases">Databases to migrate
        /// </param>

        /// <param name="selectedLogins">Logins to migrate
        /// </param>

        /// <param name="backupFileShare">Backup file share information for all selected databases.
        /// </param>

        /// <param name="backupBlobShare">SAS URI of Azure Storage Account Container to be used for storing backup
        /// files.
        /// </param>

        /// <param name="backupMode">Backup Mode to specify whether to use existing backup or create new backup.
        /// Possible values include: &#39;CreateBackup&#39;, &#39;ExistingBackup&#39;</param>
        public ValidateMigrationInputSqlServerSqlMITaskInput(SqlConnectionInfo sourceConnectionInfo, SqlConnectionInfo targetConnectionInfo, System.Collections.Generic.IList<MigrateSqlServerSqlMIDatabaseInput> selectedDatabases, BlobShare backupBlobShare, System.Collections.Generic.IList<string> selectedLogins = default(System.Collections.Generic.IList<string>), FileShare backupFileShare = default(FileShare), string backupMode = default(string))

        {
            this.SourceConnectionInfo = sourceConnectionInfo;
            this.TargetConnectionInfo = targetConnectionInfo;
            this.SelectedDatabases = selectedDatabases;
            this.SelectedLogins = selectedLogins;
            this.BackupFileShare = backupFileShare;
            this.BackupBlobShare = backupBlobShare;
            this.BackupMode = backupMode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets information for connecting to source
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceConnectionInfo")]
        public SqlConnectionInfo SourceConnectionInfo {get; set; }

        /// <summary>
        /// Gets or sets information for connecting to target
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetConnectionInfo")]
        public SqlConnectionInfo TargetConnectionInfo {get; set; }

        /// <summary>
        /// Gets or sets databases to migrate
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "selectedDatabases")]
        public System.Collections.Generic.IList<MigrateSqlServerSqlMIDatabaseInput> SelectedDatabases {get; set; }

        /// <summary>
        /// Gets or sets logins to migrate
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "selectedLogins")]
        public System.Collections.Generic.IList<string> SelectedLogins {get; set; }

        /// <summary>
        /// Gets or sets backup file share information for all selected databases.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupFileShare")]
        public FileShare BackupFileShare {get; set; }

        /// <summary>
        /// Gets or sets sAS URI of Azure Storage Account Container to be used for
        /// storing backup files.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupBlobShare")]
        public BlobShare BackupBlobShare {get; set; }

        /// <summary>
        /// Gets or sets backup Mode to specify whether to use existing backup or
        /// create new backup. Possible values include: &#39;CreateBackup&#39;, &#39;ExistingBackup&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupMode")]
        public string BackupMode {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.SourceConnectionInfo == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SourceConnectionInfo");
            }
            if (this.TargetConnectionInfo == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TargetConnectionInfo");
            }
            if (this.SelectedDatabases == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SelectedDatabases");
            }
            if (this.BackupBlobShare == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "BackupBlobShare");
            }
            if (this.SourceConnectionInfo != null)
            {
                this.SourceConnectionInfo.Validate();
            }
            if (this.TargetConnectionInfo != null)
            {
                this.TargetConnectionInfo.Validate();
            }
            if (this.SelectedDatabases != null)
            {
                foreach (var element in this.SelectedDatabases)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

            if (this.BackupFileShare != null)
            {
                this.BackupFileShare.Validate();
            }
            if (this.BackupBlobShare != null)
            {
                this.BackupBlobShare.Validate();
            }

        }
    }
}