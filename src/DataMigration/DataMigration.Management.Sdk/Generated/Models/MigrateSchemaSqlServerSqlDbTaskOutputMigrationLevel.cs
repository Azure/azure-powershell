// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    [Newtonsoft.Json.JsonObject("MigrationLevelOutput")]
    public partial class MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel : MigrateSchemaSqlServerSqlDbTaskOutput
    {
        /// <summary>
        /// Initializes a new instance of the MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel class.
        /// </summary>
        public MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel class.
        /// </summary>

        /// <param name="id">Result identifier
        /// </param>

        /// <param name="state">Overall state of the schema migration
        /// Possible values include: &#39;None&#39;, &#39;InProgress&#39;, &#39;Failed&#39;, &#39;Warning&#39;,
        /// &#39;Completed&#39;, &#39;Skipped&#39;, &#39;Stopped&#39;</param>

        /// <param name="startedOn">Migration start time
        /// </param>

        /// <param name="endedOn">Migration end time
        /// </param>

        /// <param name="sourceServerVersion">Source server version
        /// </param>

        /// <param name="sourceServerBrandVersion">Source server brand version
        /// </param>

        /// <param name="targetServerVersion">Target server version
        /// </param>

        /// <param name="targetServerBrandVersion">Target server brand version
        /// </param>
        public MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel(string id = default(string), string state = default(string), System.DateTimeOffset? startedOn = default(System.DateTimeOffset?), System.DateTimeOffset? endedOn = default(System.DateTimeOffset?), string sourceServerVersion = default(string), string sourceServerBrandVersion = default(string), string targetServerVersion = default(string), string targetServerBrandVersion = default(string))

        : base(id)
        {
            this.State = state;
            this.StartedOn = startedOn;
            this.EndedOn = endedOn;
            this.SourceServerVersion = sourceServerVersion;
            this.SourceServerBrandVersion = sourceServerBrandVersion;
            this.TargetServerVersion = targetServerVersion;
            this.TargetServerBrandVersion = targetServerBrandVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets overall state of the schema migration Possible values include: &#39;None&#39;, &#39;InProgress&#39;, &#39;Failed&#39;, &#39;Warning&#39;, &#39;Completed&#39;, &#39;Skipped&#39;, &#39;Stopped&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; private set; }

        /// <summary>
        /// Gets migration start time
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startedOn")]
        public System.DateTimeOffset? StartedOn {get; private set; }

        /// <summary>
        /// Gets migration end time
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endedOn")]
        public System.DateTimeOffset? EndedOn {get; private set; }

        /// <summary>
        /// Gets source server version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceServerVersion")]
        public string SourceServerVersion {get; private set; }

        /// <summary>
        /// Gets source server brand version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceServerBrandVersion")]
        public string SourceServerBrandVersion {get; private set; }

        /// <summary>
        /// Gets target server version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetServerVersion")]
        public string TargetServerVersion {get; private set; }

        /// <summary>
        /// Gets target server brand version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetServerBrandVersion")]
        public string TargetServerBrandVersion {get; private set; }
    }
}