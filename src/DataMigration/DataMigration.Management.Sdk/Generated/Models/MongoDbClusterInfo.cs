// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Describes a MongoDB data source
    /// </summary>
    public partial class MongoDbClusterInfo
    {
        /// <summary>
        /// Initializes a new instance of the MongoDbClusterInfo class.
        /// </summary>
        public MongoDbClusterInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MongoDbClusterInfo class.
        /// </summary>

        /// <param name="databases">A list of non-system databases in the cluster
        /// </param>

        /// <param name="supportsSharding">Whether the cluster supports sharded collections
        /// </param>

        /// <param name="type">The type of data source
        /// Possible values include: &#39;BlobContainer&#39;, &#39;CosmosDb&#39;, &#39;MongoDb&#39;</param>

        /// <param name="version">The version of the data source in the form x.y.z (e.g. 3.6.7). Not used if
        /// Type is BlobContainer.
        /// </param>
        public MongoDbClusterInfo(System.Collections.Generic.IList<MongoDbDatabaseInfo> databases, bool supportsSharding, string type, string version)

        {
            this.Databases = databases;
            this.SupportsSharding = supportsSharding;
            this.Type = type;
            this.Version = version;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a list of non-system databases in the cluster
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databases")]
        public System.Collections.Generic.IList<MongoDbDatabaseInfo> Databases {get; set; }

        /// <summary>
        /// Gets or sets whether the cluster supports sharded collections
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supportsSharding")]
        public bool SupportsSharding {get; set; }

        /// <summary>
        /// Gets or sets the type of data source Possible values include: &#39;BlobContainer&#39;, &#39;CosmosDb&#39;, &#39;MongoDb&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; set; }

        /// <summary>
        /// Gets or sets the version of the data source in the form x.y.z (e.g. 3.6.7).
        /// Not used if Type is BlobContainer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "version")]
        public string Version {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Databases == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Databases");
            }
            if (this.Type == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Type");
            }
            if (this.Version == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Version");
            }
            if (this.Databases != null)
            {
                foreach (var element in this.Databases)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }


        }
    }
}