// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Input for the task that reads configuration from project artifacts
    /// </summary>
    public partial class GetProjectDetailsNonSqlTaskInput
    {
        /// <summary>
        /// Initializes a new instance of the GetProjectDetailsNonSqlTaskInput class.
        /// </summary>
        public GetProjectDetailsNonSqlTaskInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GetProjectDetailsNonSqlTaskInput class.
        /// </summary>

        /// <param name="projectName">Name of the migration project
        /// </param>

        /// <param name="projectLocation">A URL that points to the location to access project artifacts
        /// </param>
        public GetProjectDetailsNonSqlTaskInput(string projectName, string projectLocation)

        {
            this.ProjectName = projectName;
            this.ProjectLocation = projectLocation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of the migration project
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "projectName")]
        public string ProjectName {get; set; }

        /// <summary>
        /// Gets or sets a URL that points to the location to access project artifacts
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "projectLocation")]
        public string ProjectLocation {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ProjectName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ProjectName");
            }
            if (this.ProjectLocation == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ProjectLocation");
            }


        }
    }
}