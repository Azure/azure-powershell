// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Output of the task that gets TDE certificates in Base64 encoded format.
    /// </summary>
    public partial class GetTdeCertificatesSqlTaskOutput
    {
        /// <summary>
        /// Initializes a new instance of the GetTdeCertificatesSqlTaskOutput class.
        /// </summary>
        public GetTdeCertificatesSqlTaskOutput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GetTdeCertificatesSqlTaskOutput class.
        /// </summary>

        /// <param name="base64EncodedCertificates">Mapping from certificate name to base 64 encoded format.
        /// </param>

        /// <param name="validationErrors">Validation errors
        /// </param>
        public GetTdeCertificatesSqlTaskOutput(System.Collections.Generic.IDictionary<string, System.Collections.Generic.IList<string>> base64EncodedCertificates = default(System.Collections.Generic.IDictionary<string, System.Collections.Generic.IList<string>>), System.Collections.Generic.IList<ReportableException> validationErrors = default(System.Collections.Generic.IList<ReportableException>))

        {
            this.Base64EncodedCertificates = base64EncodedCertificates;
            this.ValidationErrors = validationErrors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets mapping from certificate name to base 64 encoded format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "base64EncodedCertificates")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IList<string>> Base64EncodedCertificates {get; private set; }

        /// <summary>
        /// Gets validation errors
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "validationErrors")]
        public System.Collections.Generic.IList<ReportableException> ValidationErrors {get; private set; }
    }
}