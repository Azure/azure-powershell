// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    [Newtonsoft.Json.JsonObject("MigrationLevelOutput")]
    public partial class MigrateSqlServerSqlMITaskOutputMigrationLevel : MigrateSqlServerSqlMITaskOutput
    {
        /// <summary>
        /// Initializes a new instance of the MigrateSqlServerSqlMITaskOutputMigrationLevel class.
        /// </summary>
        public MigrateSqlServerSqlMITaskOutputMigrationLevel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MigrateSqlServerSqlMITaskOutputMigrationLevel class.
        /// </summary>

        /// <param name="id">Result identifier
        /// </param>

        /// <param name="startedOn">Migration start time
        /// </param>

        /// <param name="endedOn">Migration end time
        /// </param>

        /// <param name="status">Current status of migration
        /// Possible values include: &#39;Default&#39;, &#39;Connecting&#39;,
        /// &#39;SourceAndTargetSelected&#39;, &#39;SelectLogins&#39;, &#39;Configured&#39;, &#39;Running&#39;,
        /// &#39;Error&#39;, &#39;Stopped&#39;, &#39;Completed&#39;, &#39;CompletedWithWarnings&#39;</param>

        /// <param name="state">Current state of migration
        /// Possible values include: &#39;None&#39;, &#39;InProgress&#39;, &#39;Failed&#39;, &#39;Warning&#39;,
        /// &#39;Completed&#39;, &#39;Skipped&#39;, &#39;Stopped&#39;</param>

        /// <param name="agentJobs">Selected agent jobs as a map from name to id
        /// </param>

        /// <param name="logins">Selected logins as a map from name to id
        /// </param>

        /// <param name="message">Migration progress message
        /// </param>

        /// <param name="serverRoleResults">Map of server role migration results.
        /// </param>

        /// <param name="orphanedUsersInfo">List of orphaned users.
        /// </param>

        /// <param name="databases">Selected databases as a map from database name to database id
        /// </param>

        /// <param name="sourceServerVersion">Source server version
        /// </param>

        /// <param name="sourceServerBrandVersion">Source server brand version
        /// </param>

        /// <param name="targetServerVersion">Target server version
        /// </param>

        /// <param name="targetServerBrandVersion">Target server brand version
        /// </param>

        /// <param name="exceptionsAndWarnings">Migration exceptions and warnings.
        /// </param>
        public MigrateSqlServerSqlMITaskOutputMigrationLevel(string id = default(string), System.DateTimeOffset? startedOn = default(System.DateTimeOffset?), System.DateTimeOffset? endedOn = default(System.DateTimeOffset?), string status = default(string), string state = default(string), System.Collections.Generic.IDictionary<string, string> agentJobs = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> logins = default(System.Collections.Generic.IDictionary<string, string>), string message = default(string), System.Collections.Generic.IDictionary<string, StartMigrationScenarioServerRoleResult> serverRoleResults = default(System.Collections.Generic.IDictionary<string, StartMigrationScenarioServerRoleResult>), System.Collections.Generic.IList<OrphanedUserInfo> orphanedUsersInfo = default(System.Collections.Generic.IList<OrphanedUserInfo>), System.Collections.Generic.IDictionary<string, string> databases = default(System.Collections.Generic.IDictionary<string, string>), string sourceServerVersion = default(string), string sourceServerBrandVersion = default(string), string targetServerVersion = default(string), string targetServerBrandVersion = default(string), System.Collections.Generic.IList<ReportableException> exceptionsAndWarnings = default(System.Collections.Generic.IList<ReportableException>))

        : base(id)
        {
            this.StartedOn = startedOn;
            this.EndedOn = endedOn;
            this.Status = status;
            this.State = state;
            this.AgentJobs = agentJobs;
            this.Logins = logins;
            this.Message = message;
            this.ServerRoleResults = serverRoleResults;
            this.OrphanedUsersInfo = orphanedUsersInfo;
            this.Databases = databases;
            this.SourceServerVersion = sourceServerVersion;
            this.SourceServerBrandVersion = sourceServerBrandVersion;
            this.TargetServerVersion = targetServerVersion;
            this.TargetServerBrandVersion = targetServerBrandVersion;
            this.ExceptionsAndWarnings = exceptionsAndWarnings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets migration start time
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startedOn")]
        public System.DateTimeOffset? StartedOn {get; private set; }

        /// <summary>
        /// Gets migration end time
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endedOn")]
        public System.DateTimeOffset? EndedOn {get; private set; }

        /// <summary>
        /// Gets current status of migration Possible values include: &#39;Default&#39;, &#39;Connecting&#39;, &#39;SourceAndTargetSelected&#39;, &#39;SelectLogins&#39;, &#39;Configured&#39;, &#39;Running&#39;, &#39;Error&#39;, &#39;Stopped&#39;, &#39;Completed&#39;, &#39;CompletedWithWarnings&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; private set; }

        /// <summary>
        /// Gets current state of migration Possible values include: &#39;None&#39;, &#39;InProgress&#39;, &#39;Failed&#39;, &#39;Warning&#39;, &#39;Completed&#39;, &#39;Skipped&#39;, &#39;Stopped&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; private set; }

        /// <summary>
        /// Gets selected agent jobs as a map from name to id
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentJobs")]
        public System.Collections.Generic.IDictionary<string, string> AgentJobs {get; private set; }

        /// <summary>
        /// Gets selected logins as a map from name to id
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "logins")]
        public System.Collections.Generic.IDictionary<string, string> Logins {get; private set; }

        /// <summary>
        /// Gets migration progress message
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "message")]
        public string Message {get; private set; }

        /// <summary>
        /// Gets map of server role migration results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverRoleResults")]
        public System.Collections.Generic.IDictionary<string, StartMigrationScenarioServerRoleResult> ServerRoleResults {get; private set; }

        /// <summary>
        /// Gets list of orphaned users.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "orphanedUsersInfo")]
        public System.Collections.Generic.IList<OrphanedUserInfo> OrphanedUsersInfo {get; private set; }

        /// <summary>
        /// Gets selected databases as a map from database name to database id
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databases")]
        public System.Collections.Generic.IDictionary<string, string> Databases {get; private set; }

        /// <summary>
        /// Gets source server version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceServerVersion")]
        public string SourceServerVersion {get; private set; }

        /// <summary>
        /// Gets source server brand version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceServerBrandVersion")]
        public string SourceServerBrandVersion {get; private set; }

        /// <summary>
        /// Gets target server version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetServerVersion")]
        public string TargetServerVersion {get; private set; }

        /// <summary>
        /// Gets target server brand version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetServerBrandVersion")]
        public string TargetServerBrandVersion {get; private set; }

        /// <summary>
        /// Gets migration exceptions and warnings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exceptionsAndWarnings")]
        public System.Collections.Generic.IList<ReportableException> ExceptionsAndWarnings {get; private set; }
    }
}