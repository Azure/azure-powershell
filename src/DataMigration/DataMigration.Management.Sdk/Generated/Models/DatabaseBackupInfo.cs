// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Information about backup files when existing backup mode is used.
    /// </summary>
    public partial class DatabaseBackupInfo
    {
        /// <summary>
        /// Initializes a new instance of the DatabaseBackupInfo class.
        /// </summary>
        public DatabaseBackupInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatabaseBackupInfo class.
        /// </summary>

        /// <param name="databaseName">Database name.
        /// </param>

        /// <param name="backupType">Backup Type.
        /// Possible values include: &#39;Database&#39;, &#39;TransactionLog&#39;, &#39;File&#39;,
        /// &#39;DifferentialDatabase&#39;, &#39;DifferentialFile&#39;, &#39;Partial&#39;,
        /// &#39;DifferentialPartial&#39;</param>

        /// <param name="backupFiles">The list of backup files for the current database.
        /// </param>

        /// <param name="position">Position of current database backup in the file.
        /// </param>

        /// <param name="isDamaged">Database was damaged when backed up, but the backup operation was requested
        /// to continue despite errors.
        /// </param>

        /// <param name="isCompressed">Whether the backup set is compressed
        /// </param>

        /// <param name="familyCount">Number of files in the backup set.
        /// </param>

        /// <param name="backupFinishDate">Date and time when the backup operation finished.
        /// </param>
        public DatabaseBackupInfo(string databaseName = default(string), string backupType = default(string), System.Collections.Generic.IList<string> backupFiles = default(System.Collections.Generic.IList<string>), int? position = default(int?), bool? isDamaged = default(bool?), bool? isCompressed = default(bool?), int? familyCount = default(int?), System.DateTimeOffset? backupFinishDate = default(System.DateTimeOffset?))

        {
            this.DatabaseName = databaseName;
            this.BackupType = backupType;
            this.BackupFiles = backupFiles;
            this.Position = position;
            this.IsDamaged = isDamaged;
            this.IsCompressed = isCompressed;
            this.FamilyCount = familyCount;
            this.BackupFinishDate = backupFinishDate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets database name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName {get; private set; }

        /// <summary>
        /// Gets backup Type. Possible values include: &#39;Database&#39;, &#39;TransactionLog&#39;, &#39;File&#39;, &#39;DifferentialDatabase&#39;, &#39;DifferentialFile&#39;, &#39;Partial&#39;, &#39;DifferentialPartial&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupType")]
        public string BackupType {get; private set; }

        /// <summary>
        /// Gets the list of backup files for the current database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupFiles")]
        public System.Collections.Generic.IList<string> BackupFiles {get; private set; }

        /// <summary>
        /// Gets position of current database backup in the file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "position")]
        public int? Position {get; private set; }

        /// <summary>
        /// Gets database was damaged when backed up, but the backup operation was
        /// requested to continue despite errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isDamaged")]
        public bool? IsDamaged {get; private set; }

        /// <summary>
        /// Gets whether the backup set is compressed
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isCompressed")]
        public bool? IsCompressed {get; private set; }

        /// <summary>
        /// Gets number of files in the backup set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "familyCount")]
        public int? FamilyCount {get; private set; }

        /// <summary>
        /// Gets date and time when the backup operation finished.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupFinishDate")]
        public System.DateTimeOffset? BackupFinishDate {get; private set; }
    }
}