// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Input for task that migrates SQL Server databases to Azure SQL Database
    /// Managed Instance online scenario.
    /// </summary>
    public partial class SqlServerSqlMISyncTaskInput
    {
        /// <summary>
        /// Initializes a new instance of the SqlServerSqlMISyncTaskInput class.
        /// </summary>
        public SqlServerSqlMISyncTaskInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SqlServerSqlMISyncTaskInput class.
        /// </summary>

        /// <param name="selectedDatabases">Databases to migrate
        /// </param>

        /// <param name="backupFileShare">Backup file share information for all selected databases.
        /// </param>

        /// <param name="storageResourceId">Fully qualified resourceId of storage
        /// </param>

        /// <param name="sourceConnectionInfo">Connection information for source SQL Server
        /// </param>

        /// <param name="targetConnectionInfo">Connection information for Azure SQL Database Managed Instance
        /// </param>

        /// <param name="azureApp">Azure Active Directory Application the DMS instance will use to connect to
        /// the target instance of Azure SQL Database Managed Instance and the Azure
        /// Storage Account
        /// </param>
        public SqlServerSqlMISyncTaskInput(System.Collections.Generic.IList<MigrateSqlServerSqlMIDatabaseInput> selectedDatabases, string storageResourceId, SqlConnectionInfo sourceConnectionInfo, MiSqlConnectionInfo targetConnectionInfo, AzureActiveDirectoryApp azureApp, FileShare backupFileShare = default(FileShare))

        {
            this.SelectedDatabases = selectedDatabases;
            this.BackupFileShare = backupFileShare;
            this.StorageResourceId = storageResourceId;
            this.SourceConnectionInfo = sourceConnectionInfo;
            this.TargetConnectionInfo = targetConnectionInfo;
            this.AzureApp = azureApp;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets databases to migrate
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "selectedDatabases")]
        public System.Collections.Generic.IList<MigrateSqlServerSqlMIDatabaseInput> SelectedDatabases {get; set; }

        /// <summary>
        /// Gets or sets backup file share information for all selected databases.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupFileShare")]
        public FileShare BackupFileShare {get; set; }

        /// <summary>
        /// Gets or sets fully qualified resourceId of storage
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageResourceId")]
        public string StorageResourceId {get; set; }

        /// <summary>
        /// Gets or sets connection information for source SQL Server
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceConnectionInfo")]
        public SqlConnectionInfo SourceConnectionInfo {get; set; }

        /// <summary>
        /// Gets or sets connection information for Azure SQL Database Managed Instance
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetConnectionInfo")]
        public MiSqlConnectionInfo TargetConnectionInfo {get; set; }

        /// <summary>
        /// Gets or sets azure Active Directory Application the DMS instance will use
        /// to connect to the target instance of Azure SQL Database Managed Instance
        /// and the Azure Storage Account
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azureApp")]
        public AzureActiveDirectoryApp AzureApp {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.SelectedDatabases == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SelectedDatabases");
            }
            if (this.StorageResourceId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "StorageResourceId");
            }
            if (this.SourceConnectionInfo == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SourceConnectionInfo");
            }
            if (this.TargetConnectionInfo == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TargetConnectionInfo");
            }
            if (this.AzureApp == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AzureApp");
            }
            if (this.SelectedDatabases != null)
            {
                foreach (var element in this.SelectedDatabases)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.BackupFileShare != null)
            {
                this.BackupFileShare.Validate();
            }

            if (this.SourceConnectionInfo != null)
            {
                this.SourceConnectionInfo.Validate();
            }
            if (this.TargetConnectionInfo != null)
            {
                this.TargetConnectionInfo.Validate();
            }
            if (this.AzureApp != null)
            {
                this.AzureApp.Validate();
            }
        }
    }
}