// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Input for the task that validates connection to SQL Server and also
    /// validates source server requirements
    /// </summary>
    public partial class ConnectToSourceSqlServerTaskInput
    {
        /// <summary>
        /// Initializes a new instance of the ConnectToSourceSqlServerTaskInput class.
        /// </summary>
        public ConnectToSourceSqlServerTaskInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectToSourceSqlServerTaskInput class.
        /// </summary>

        /// <param name="sourceConnectionInfo">Connection information for Source SQL Server
        /// </param>

        /// <param name="checkPermissionsGroup">Permission group for validations
        /// Possible values include: &#39;Default&#39;, &#39;MigrationFromSqlServerToAzureDB&#39;,
        /// &#39;MigrationFromSqlServerToAzureMI&#39;, &#39;MigrationFromMySQLToAzureDBForMySQL&#39;</param>

        /// <param name="collectLogins">Flag for whether to collect logins from source server.
        /// </param>

        /// <param name="collectAgentJobs">Flag for whether to collect agent jobs from source server.
        /// </param>

        /// <param name="collectTdeCertificateInfo">Flag for whether to collect TDE Certificate names from source server.
        /// </param>
        public ConnectToSourceSqlServerTaskInput(SqlConnectionInfo sourceConnectionInfo, ServerLevelPermissionsGroup? checkPermissionsGroup = default(ServerLevelPermissionsGroup?), bool? collectLogins = default(bool?), bool? collectAgentJobs = default(bool?), bool? collectTdeCertificateInfo = default(bool?))

        {
            this.SourceConnectionInfo = sourceConnectionInfo;
            this.CheckPermissionsGroup = checkPermissionsGroup;
            this.CollectLogins = collectLogins;
            this.CollectAgentJobs = collectAgentJobs;
            this.CollectTdeCertificateInfo = collectTdeCertificateInfo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets connection information for Source SQL Server
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceConnectionInfo")]
        public SqlConnectionInfo SourceConnectionInfo {get; set; }

        /// <summary>
        /// Gets or sets permission group for validations Possible values include: &#39;Default&#39;, &#39;MigrationFromSqlServerToAzureDB&#39;, &#39;MigrationFromSqlServerToAzureMI&#39;, &#39;MigrationFromMySQLToAzureDBForMySQL&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "checkPermissionsGroup")]
        public ServerLevelPermissionsGroup? CheckPermissionsGroup {get; set; }

        /// <summary>
        /// Gets or sets flag for whether to collect logins from source server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "collectLogins")]
        public bool? CollectLogins {get; set; }

        /// <summary>
        /// Gets or sets flag for whether to collect agent jobs from source server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "collectAgentJobs")]
        public bool? CollectAgentJobs {get; set; }

        /// <summary>
        /// Gets or sets flag for whether to collect TDE Certificate names from source
        /// server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "collectTdeCertificateInfo")]
        public bool? CollectTdeCertificateInfo {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.SourceConnectionInfo == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SourceConnectionInfo");
            }
            if (this.SourceConnectionInfo != null)
            {
                this.SourceConnectionInfo.Validate();
            }

        }
    }
}