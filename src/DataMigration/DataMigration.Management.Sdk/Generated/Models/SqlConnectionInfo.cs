// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Information for connecting to SQL database server
    /// </summary>
    [Newtonsoft.Json.JsonObject("SqlConnectionInfo")]
    public partial class SqlConnectionInfo : ConnectionInfo
    {
        /// <summary>
        /// Initializes a new instance of the SqlConnectionInfo class.
        /// </summary>
        public SqlConnectionInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SqlConnectionInfo class.
        /// </summary>

        /// <param name="userName">User name
        /// </param>

        /// <param name="password">Password credential.
        /// </param>

        /// <param name="dataSource">Data source in the format
        /// Protocol:MachineName\SQLServerInstanceName,PortNumber
        /// </param>

        /// <param name="authentication">Authentication type to use for connection
        /// Possible values include: &#39;None&#39;, &#39;WindowsAuthentication&#39;,
        /// &#39;SqlAuthentication&#39;, &#39;ActiveDirectoryIntegrated&#39;, &#39;ActiveDirectoryPassword&#39;</param>

        /// <param name="encryptConnection">Whether to encrypt the connection
        /// </param>

        /// <param name="additionalSettings">Additional connection settings
        /// </param>

        /// <param name="trustServerCertificate">Whether to trust the server certificate
        /// </param>

        /// <param name="platform">Server platform type for connection
        /// Possible values include: &#39;SqlOnPrem&#39;</param>
        public SqlConnectionInfo(string dataSource, string userName = default(string), string password = default(string), string authentication = default(string), bool? encryptConnection = default(bool?), string additionalSettings = default(string), bool? trustServerCertificate = default(bool?), string platform = default(string))

        : base(userName, password)
        {
            this.DataSource = dataSource;
            this.Authentication = authentication;
            this.EncryptConnection = encryptConnection;
            this.AdditionalSettings = additionalSettings;
            this.TrustServerCertificate = trustServerCertificate;
            this.Platform = platform;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets data source in the format
        /// Protocol:MachineName\SQLServerInstanceName,PortNumber
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataSource")]
        public string DataSource {get; set; }

        /// <summary>
        /// Gets or sets authentication type to use for connection Possible values include: &#39;None&#39;, &#39;WindowsAuthentication&#39;, &#39;SqlAuthentication&#39;, &#39;ActiveDirectoryIntegrated&#39;, &#39;ActiveDirectoryPassword&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authentication")]
        public string Authentication {get; set; }

        /// <summary>
        /// Gets or sets whether to encrypt the connection
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptConnection")]
        public bool? EncryptConnection {get; set; }

        /// <summary>
        /// Gets or sets additional connection settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "additionalSettings")]
        public string AdditionalSettings {get; set; }

        /// <summary>
        /// Gets or sets whether to trust the server certificate
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "trustServerCertificate")]
        public bool? TrustServerCertificate {get; set; }

        /// <summary>
        /// Gets or sets server platform type for connection Possible values include: &#39;SqlOnPrem&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "platform")]
        public string Platform {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DataSource == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DataSource");
            }




        }
    }
}