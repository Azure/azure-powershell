// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Base class for MongoDB migration outputs
    /// </summary>
    [Newtonsoft.Json.JsonObject("MongoDbProgress")]
    public partial class MongoDbProgress
    {
        /// <summary>
        /// Initializes a new instance of the MongoDbProgress class.
        /// </summary>
        public MongoDbProgress()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MongoDbProgress class.
        /// </summary>

        /// <param name="bytesCopied">The number of document bytes copied during the Copying stage
        /// </param>

        /// <param name="documentsCopied">The number of documents copied during the Copying stage
        /// </param>

        /// <param name="elapsedTime">The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan
        /// format)
        /// </param>

        /// <param name="errors">The errors and warnings that have occurred for the current object. The keys
        /// are the error codes.
        /// </param>

        /// <param name="eventsPending">The number of oplog events awaiting replay
        /// </param>

        /// <param name="eventsReplayed">The number of oplog events replayed so far
        /// </param>

        /// <param name="lastEventTime">The timestamp of the last oplog event received, or null if no oplog event
        /// has been received yet
        /// </param>

        /// <param name="lastReplayTime">The timestamp of the last oplog event replayed, or null if no oplog event
        /// has been replayed yet
        /// </param>

        /// <param name="name">The name of the progress object. For a collection, this is the unqualified
        /// collection name. For a database, this is the database name. For the overall
        /// migration, this is null.
        /// </param>

        /// <param name="qualifiedName">The qualified name of the progress object. For a collection, this is the
        /// database-qualified name. For a database, this is the database name. For the
        /// overall migration, this is null.
        /// </param>

        /// <param name="state">
        /// Possible values include: &#39;NotStarted&#39;, &#39;ValidatingInput&#39;, &#39;Initializing&#39;,
        /// &#39;Restarting&#39;, &#39;Copying&#39;, &#39;InitialReplay&#39;, &#39;Replaying&#39;, &#39;Finalizing&#39;,
        /// &#39;Complete&#39;, &#39;Canceled&#39;, &#39;Failed&#39;</param>

        /// <param name="totalBytes">The total number of document bytes on the source at the beginning of the
        /// Copying stage, or -1 if the total size was unknown
        /// </param>

        /// <param name="totalDocuments">The total number of documents on the source at the beginning of the Copying
        /// stage, or -1 if the total count was unknown
        /// </param>
        public MongoDbProgress(long bytesCopied, long documentsCopied, string elapsedTime, System.Collections.Generic.IDictionary<string, MongoDbError> errors, long eventsPending, long eventsReplayed, string state, long totalBytes, long totalDocuments, System.DateTimeOffset? lastEventTime = default(System.DateTimeOffset?), System.DateTimeOffset? lastReplayTime = default(System.DateTimeOffset?), string name = default(string), string qualifiedName = default(string))

        {
            this.BytesCopied = bytesCopied;
            this.DocumentsCopied = documentsCopied;
            this.ElapsedTime = elapsedTime;
            this.Errors = errors;
            this.EventsPending = eventsPending;
            this.EventsReplayed = eventsReplayed;
            this.LastEventTime = lastEventTime;
            this.LastReplayTime = lastReplayTime;
            this.Name = name;
            this.QualifiedName = qualifiedName;
            this.State = state;
            this.TotalBytes = totalBytes;
            this.TotalDocuments = totalDocuments;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the number of document bytes copied during the Copying stage
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "bytesCopied")]
        public long BytesCopied {get; set; }

        /// <summary>
        /// Gets or sets the number of documents copied during the Copying stage
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "documentsCopied")]
        public long DocumentsCopied {get; set; }

        /// <summary>
        /// Gets or sets the elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e.
        /// TimeSpan format)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "elapsedTime")]
        public string ElapsedTime {get; set; }

        /// <summary>
        /// Gets or sets the errors and warnings that have occurred for the current
        /// object. The keys are the error codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "errors")]
        public System.Collections.Generic.IDictionary<string, MongoDbError> Errors {get; set; }

        /// <summary>
        /// Gets or sets the number of oplog events awaiting replay
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "eventsPending")]
        public long EventsPending {get; set; }

        /// <summary>
        /// Gets or sets the number of oplog events replayed so far
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "eventsReplayed")]
        public long EventsReplayed {get; set; }

        /// <summary>
        /// Gets or sets the timestamp of the last oplog event received, or null if no
        /// oplog event has been received yet
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastEventTime")]
        public System.DateTimeOffset? LastEventTime {get; set; }

        /// <summary>
        /// Gets or sets the timestamp of the last oplog event replayed, or null if no
        /// oplog event has been replayed yet
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastReplayTime")]
        public System.DateTimeOffset? LastReplayTime {get; set; }

        /// <summary>
        /// Gets or sets the name of the progress object. For a collection, this is the
        /// unqualified collection name. For a database, this is the database name. For
        /// the overall migration, this is null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets the qualified name of the progress object. For a collection,
        /// this is the database-qualified name. For a database, this is the database
        /// name. For the overall migration, this is null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "qualifiedName")]
        public string QualifiedName {get; set; }

        /// <summary>
        /// Gets or sets Possible values include: &#39;NotStarted&#39;, &#39;ValidatingInput&#39;, &#39;Initializing&#39;, &#39;Restarting&#39;, &#39;Copying&#39;, &#39;InitialReplay&#39;, &#39;Replaying&#39;, &#39;Finalizing&#39;, &#39;Complete&#39;, &#39;Canceled&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; set; }

        /// <summary>
        /// Gets or sets the total number of document bytes on the source at the
        /// beginning of the Copying stage, or -1 if the total size was unknown
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalBytes")]
        public long TotalBytes {get; set; }

        /// <summary>
        /// Gets or sets the total number of documents on the source at the beginning
        /// of the Copying stage, or -1 if the total count was unknown
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalDocuments")]
        public long TotalDocuments {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ElapsedTime == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ElapsedTime");
            }
            if (this.Errors == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Errors");
            }
            if (this.State == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "State");
            }





        }
    }
}