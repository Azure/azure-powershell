// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Output for task that validates migration input for SQL to Azure SQL Managed
    /// Instance migrations
    /// </summary>
    public partial class ValidateMigrationInputSqlServerSqlMITaskOutput
    {
        /// <summary>
        /// Initializes a new instance of the ValidateMigrationInputSqlServerSqlMITaskOutput class.
        /// </summary>
        public ValidateMigrationInputSqlServerSqlMITaskOutput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ValidateMigrationInputSqlServerSqlMITaskOutput class.
        /// </summary>

        /// <param name="id">Result identifier
        /// </param>

        /// <param name="name">Name of database
        /// </param>

        /// <param name="restoreDatabaseNameErrors">Errors associated with the RestoreDatabaseName
        /// </param>

        /// <param name="backupFolderErrors">Errors associated with the BackupFolder path
        /// </param>

        /// <param name="backupShareCredentialsErrors">Errors associated with backup share user name and password credentials
        /// </param>

        /// <param name="backupStorageAccountErrors">Errors associated with the storage account provided.
        /// </param>

        /// <param name="existingBackupErrors">Errors associated with existing backup files.
        /// </param>

        /// <param name="databaseBackupInfo">Information about backup files when existing backup mode is used.
        /// </param>
        public ValidateMigrationInputSqlServerSqlMITaskOutput(string id = default(string), string name = default(string), System.Collections.Generic.IList<ReportableException> restoreDatabaseNameErrors = default(System.Collections.Generic.IList<ReportableException>), System.Collections.Generic.IList<ReportableException> backupFolderErrors = default(System.Collections.Generic.IList<ReportableException>), System.Collections.Generic.IList<ReportableException> backupShareCredentialsErrors = default(System.Collections.Generic.IList<ReportableException>), System.Collections.Generic.IList<ReportableException> backupStorageAccountErrors = default(System.Collections.Generic.IList<ReportableException>), System.Collections.Generic.IList<ReportableException> existingBackupErrors = default(System.Collections.Generic.IList<ReportableException>), DatabaseBackupInfo databaseBackupInfo = default(DatabaseBackupInfo))

        {
            this.Id = id;
            this.Name = name;
            this.RestoreDatabaseNameErrors = restoreDatabaseNameErrors;
            this.BackupFolderErrors = backupFolderErrors;
            this.BackupShareCredentialsErrors = backupShareCredentialsErrors;
            this.BackupStorageAccountErrors = backupStorageAccountErrors;
            this.ExistingBackupErrors = existingBackupErrors;
            this.DatabaseBackupInfo = databaseBackupInfo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets result identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; private set; }

        /// <summary>
        /// Gets name of database
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; private set; }

        /// <summary>
        /// Gets errors associated with the RestoreDatabaseName
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "restoreDatabaseNameErrors")]
        public System.Collections.Generic.IList<ReportableException> RestoreDatabaseNameErrors {get; private set; }

        /// <summary>
        /// Gets errors associated with the BackupFolder path
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupFolderErrors")]
        public System.Collections.Generic.IList<ReportableException> BackupFolderErrors {get; private set; }

        /// <summary>
        /// Gets errors associated with backup share user name and password credentials
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupShareCredentialsErrors")]
        public System.Collections.Generic.IList<ReportableException> BackupShareCredentialsErrors {get; private set; }

        /// <summary>
        /// Gets errors associated with the storage account provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupStorageAccountErrors")]
        public System.Collections.Generic.IList<ReportableException> BackupStorageAccountErrors {get; private set; }

        /// <summary>
        /// Gets errors associated with existing backup files.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "existingBackupErrors")]
        public System.Collections.Generic.IList<ReportableException> ExistingBackupErrors {get; private set; }

        /// <summary>
        /// Gets or sets information about backup files when existing backup mode is
        /// used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseBackupInfo")]
        public DatabaseBackupInfo DatabaseBackupInfo {get; set; }
    }
}