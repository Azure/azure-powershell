// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Description about the errors happen while performing migration validation
    /// </summary>
    public partial class ExecutionStatistics
    {
        /// <summary>
        /// Initializes a new instance of the ExecutionStatistics class.
        /// </summary>
        public ExecutionStatistics()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExecutionStatistics class.
        /// </summary>

        /// <param name="executionCount">No. of query executions
        /// </param>

        /// <param name="cpuTimeMS">CPU Time in millisecond(s) for the query execution
        /// </param>

        /// <param name="elapsedTimeMS">Time taken in millisecond(s) for executing the query
        /// </param>

        /// <param name="waitStats">Dictionary of sql query execution wait types and the respective statistics
        /// </param>

        /// <param name="hasErrors">Indicates whether the query resulted in an error
        /// </param>

        /// <param name="sqlErrors">List of sql Errors
        /// </param>
        public ExecutionStatistics(long? executionCount = default(long?), double? cpuTimeMS = default(double?), double? elapsedTimeMS = default(double?), System.Collections.Generic.IDictionary<string, WaitStatistics> waitStats = default(System.Collections.Generic.IDictionary<string, WaitStatistics>), bool? hasErrors = default(bool?), System.Collections.Generic.IList<string> sqlErrors = default(System.Collections.Generic.IList<string>))

        {
            this.ExecutionCount = executionCount;
            this.CpuTimeMS = cpuTimeMS;
            this.ElapsedTimeMS = elapsedTimeMS;
            this.WaitStats = waitStats;
            this.HasErrors = hasErrors;
            this.SqlErrors = sqlErrors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets no. of query executions
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "executionCount")]
        public long? ExecutionCount {get; set; }

        /// <summary>
        /// Gets or sets cPU Time in millisecond(s) for the query execution
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cpuTimeMs")]
        public double? CpuTimeMS {get; set; }

        /// <summary>
        /// Gets or sets time taken in millisecond(s) for executing the query
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "elapsedTimeMs")]
        public double? ElapsedTimeMS {get; set; }

        /// <summary>
        /// Gets or sets dictionary of sql query execution wait types and the
        /// respective statistics
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "waitStats")]
        public System.Collections.Generic.IDictionary<string, WaitStatistics> WaitStats {get; set; }

        /// <summary>
        /// Gets or sets indicates whether the query resulted in an error
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hasErrors")]
        public bool? HasErrors {get; set; }

        /// <summary>
        /// Gets or sets list of sql Errors
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sqlErrors")]
        public System.Collections.Generic.IList<string> SqlErrors {get; set; }
    }
}