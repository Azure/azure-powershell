// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    [Newtonsoft.Json.JsonObject("TableLevelOutput")]
    public partial class MigrateSqlServerSqlDbTaskOutputTableLevel : MigrateSqlServerSqlDbTaskOutput
    {
        /// <summary>
        /// Initializes a new instance of the MigrateSqlServerSqlDbTaskOutputTableLevel class.
        /// </summary>
        public MigrateSqlServerSqlDbTaskOutputTableLevel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MigrateSqlServerSqlDbTaskOutputTableLevel class.
        /// </summary>

        /// <param name="id">Result identifier
        /// </param>

        /// <param name="objectName">Name of the item
        /// </param>

        /// <param name="startedOn">Migration start time
        /// </param>

        /// <param name="endedOn">Migration end time
        /// </param>

        /// <param name="state">Current state of migration
        /// Possible values include: &#39;None&#39;, &#39;InProgress&#39;, &#39;Failed&#39;, &#39;Warning&#39;,
        /// &#39;Completed&#39;, &#39;Skipped&#39;, &#39;Stopped&#39;</param>

        /// <param name="statusMessage">Status message
        /// </param>

        /// <param name="itemsCount">Number of items
        /// </param>

        /// <param name="itemsCompletedCount">Number of successfully completed items
        /// </param>

        /// <param name="errorPrefix">Wildcard string prefix to use for querying all errors of the item
        /// </param>

        /// <param name="resultPrefix">Wildcard string prefix to use for querying all sub-tem results of the item
        /// </param>
        public MigrateSqlServerSqlDbTaskOutputTableLevel(string id = default(string), string objectName = default(string), System.DateTimeOffset? startedOn = default(System.DateTimeOffset?), System.DateTimeOffset? endedOn = default(System.DateTimeOffset?), string state = default(string), string statusMessage = default(string), long? itemsCount = default(long?), long? itemsCompletedCount = default(long?), string errorPrefix = default(string), string resultPrefix = default(string))

        : base(id)
        {
            this.ObjectName = objectName;
            this.StartedOn = startedOn;
            this.EndedOn = endedOn;
            this.State = state;
            this.StatusMessage = statusMessage;
            this.ItemsCount = itemsCount;
            this.ItemsCompletedCount = itemsCompletedCount;
            this.ErrorPrefix = errorPrefix;
            this.ResultPrefix = resultPrefix;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets name of the item
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "objectName")]
        public string ObjectName {get; private set; }

        /// <summary>
        /// Gets migration start time
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startedOn")]
        public System.DateTimeOffset? StartedOn {get; private set; }

        /// <summary>
        /// Gets migration end time
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endedOn")]
        public System.DateTimeOffset? EndedOn {get; private set; }

        /// <summary>
        /// Gets current state of migration Possible values include: &#39;None&#39;, &#39;InProgress&#39;, &#39;Failed&#39;, &#39;Warning&#39;, &#39;Completed&#39;, &#39;Skipped&#39;, &#39;Stopped&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; private set; }

        /// <summary>
        /// Gets status message
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "statusMessage")]
        public string StatusMessage {get; private set; }

        /// <summary>
        /// Gets number of items
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "itemsCount")]
        public long? ItemsCount {get; private set; }

        /// <summary>
        /// Gets number of successfully completed items
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "itemsCompletedCount")]
        public long? ItemsCompletedCount {get; private set; }

        /// <summary>
        /// Gets wildcard string prefix to use for querying all errors of the item
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "errorPrefix")]
        public string ErrorPrefix {get; private set; }

        /// <summary>
        /// Gets wildcard string prefix to use for querying all sub-tem results of the
        /// item
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resultPrefix")]
        public string ResultPrefix {get; private set; }
    }
}