// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Database specific information for MySQL to Azure Database for MySQL
    /// migration task inputs
    /// </summary>
    public partial class MigrateMySqlAzureDbForMySqlSyncDatabaseInput
    {
        /// <summary>
        /// Initializes a new instance of the MigrateMySqlAzureDbForMySqlSyncDatabaseInput class.
        /// </summary>
        public MigrateMySqlAzureDbForMySqlSyncDatabaseInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MigrateMySqlAzureDbForMySqlSyncDatabaseInput class.
        /// </summary>

        /// <param name="name">Name of the database
        /// </param>

        /// <param name="targetDatabaseName">Name of target database. Note: Target database will be truncated before
        /// starting migration.
        /// </param>

        /// <param name="migrationSetting">Migration settings which tune the migration behavior
        /// </param>

        /// <param name="sourceSetting">Source settings to tune source endpoint migration behavior
        /// </param>

        /// <param name="targetSetting">Target settings to tune target endpoint migration behavior
        /// </param>
        public MigrateMySqlAzureDbForMySqlSyncDatabaseInput(string name = default(string), string targetDatabaseName = default(string), System.Collections.Generic.IDictionary<string, string> migrationSetting = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> sourceSetting = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> targetSetting = default(System.Collections.Generic.IDictionary<string, string>))

        {
            this.Name = name;
            this.TargetDatabaseName = targetDatabaseName;
            this.MigrationSetting = migrationSetting;
            this.SourceSetting = sourceSetting;
            this.TargetSetting = targetSetting;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of the database
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets name of target database. Note: Target database will be
        /// truncated before starting migration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetDatabaseName")]
        public string TargetDatabaseName {get; set; }

        /// <summary>
        /// Gets or sets migration settings which tune the migration behavior
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "migrationSetting")]
        public System.Collections.Generic.IDictionary<string, string> MigrationSetting {get; set; }

        /// <summary>
        /// Gets or sets source settings to tune source endpoint migration behavior
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceSetting")]
        public System.Collections.Generic.IDictionary<string, string> SourceSetting {get; set; }

        /// <summary>
        /// Gets or sets target settings to tune target endpoint migration behavior
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetSetting")]
        public System.Collections.Generic.IDictionary<string, string> TargetSetting {get; set; }
    }
}