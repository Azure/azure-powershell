// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Database level output for the task that validates connection to SQL Server
    /// and also validates source server requirements
    /// </summary>
    [Newtonsoft.Json.JsonObject("DatabaseLevelOutput")]
    public partial class ConnectToSourceSqlServerTaskOutputDatabaseLevel : ConnectToSourceSqlServerTaskOutput
    {
        /// <summary>
        /// Initializes a new instance of the ConnectToSourceSqlServerTaskOutputDatabaseLevel class.
        /// </summary>
        public ConnectToSourceSqlServerTaskOutputDatabaseLevel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectToSourceSqlServerTaskOutputDatabaseLevel class.
        /// </summary>

        /// <param name="id">Result identifier
        /// </param>

        /// <param name="name">Database name
        /// </param>

        /// <param name="sizeMb">Size of the file in megabytes
        /// </param>

        /// <param name="databaseFiles">The list of database files
        /// </param>

        /// <param name="compatibilityLevel">SQL Server compatibility level of database
        /// Possible values include: &#39;CompatLevel80&#39;, &#39;CompatLevel90&#39;,
        /// &#39;CompatLevel100&#39;, &#39;CompatLevel110&#39;, &#39;CompatLevel120&#39;, &#39;CompatLevel130&#39;,
        /// &#39;CompatLevel140&#39;</param>

        /// <param name="databaseState">State of the database
        /// Possible values include: &#39;Online&#39;, &#39;Restoring&#39;, &#39;Recovering&#39;,
        /// &#39;RecoveryPending&#39;, &#39;Suspect&#39;, &#39;Emergency&#39;, &#39;Offline&#39;, &#39;Copying&#39;,
        /// &#39;OfflineSecondary&#39;</param>
        public ConnectToSourceSqlServerTaskOutputDatabaseLevel(string id = default(string), string name = default(string), double? sizeMb = default(double?), System.Collections.Generic.IList<DatabaseFileInfo> databaseFiles = default(System.Collections.Generic.IList<DatabaseFileInfo>), string compatibilityLevel = default(string), string databaseState = default(string))

        : base(id)
        {
            this.Name = name;
            this.SizeMb = sizeMb;
            this.DatabaseFiles = databaseFiles;
            this.CompatibilityLevel = compatibilityLevel;
            this.DatabaseState = databaseState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets database name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; private set; }

        /// <summary>
        /// Gets size of the file in megabytes
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sizeMB")]
        public double? SizeMb {get; private set; }

        /// <summary>
        /// Gets the list of database files
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseFiles")]
        public System.Collections.Generic.IList<DatabaseFileInfo> DatabaseFiles {get; private set; }

        /// <summary>
        /// Gets sQL Server compatibility level of database Possible values include: &#39;CompatLevel80&#39;, &#39;CompatLevel90&#39;, &#39;CompatLevel100&#39;, &#39;CompatLevel110&#39;, &#39;CompatLevel120&#39;, &#39;CompatLevel130&#39;, &#39;CompatLevel140&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "compatibilityLevel")]
        public string CompatibilityLevel {get; private set; }

        /// <summary>
        /// Gets state of the database Possible values include: &#39;Online&#39;, &#39;Restoring&#39;, &#39;Recovering&#39;, &#39;RecoveryPending&#39;, &#39;Suspect&#39;, &#39;Emergency&#39;, &#39;Offline&#39;, &#39;Copying&#39;, &#39;OfflineSecondary&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseState")]
        public string DatabaseState {get; private set; }
    }
}