// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Base class for non sql migration task input
    /// </summary>
    public partial class NonSqlMigrationTaskInput
    {
        /// <summary>
        /// Initializes a new instance of the NonSqlMigrationTaskInput class.
        /// </summary>
        public NonSqlMigrationTaskInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NonSqlMigrationTaskInput class.
        /// </summary>

        /// <param name="targetConnectionInfo">Information for connecting to target
        /// </param>

        /// <param name="targetDatabaseName">Target database name
        /// </param>

        /// <param name="projectName">Name of the migration project
        /// </param>

        /// <param name="projectLocation">A URL that points to the drop location to access project artifacts
        /// </param>

        /// <param name="selectedTables">Metadata of the tables selected for migration
        /// </param>
        public NonSqlMigrationTaskInput(SqlConnectionInfo targetConnectionInfo, string targetDatabaseName, string projectName, string projectLocation, System.Collections.Generic.IList<NonSqlDataMigrationTable> selectedTables)

        {
            this.TargetConnectionInfo = targetConnectionInfo;
            this.TargetDatabaseName = targetDatabaseName;
            this.ProjectName = projectName;
            this.ProjectLocation = projectLocation;
            this.SelectedTables = selectedTables;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets information for connecting to target
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetConnectionInfo")]
        public SqlConnectionInfo TargetConnectionInfo {get; set; }

        /// <summary>
        /// Gets or sets target database name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetDatabaseName")]
        public string TargetDatabaseName {get; set; }

        /// <summary>
        /// Gets or sets name of the migration project
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "projectName")]
        public string ProjectName {get; set; }

        /// <summary>
        /// Gets or sets a URL that points to the drop location to access project
        /// artifacts
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "projectLocation")]
        public string ProjectLocation {get; set; }

        /// <summary>
        /// Gets or sets metadata of the tables selected for migration
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "selectedTables")]
        public System.Collections.Generic.IList<NonSqlDataMigrationTable> SelectedTables {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.TargetConnectionInfo == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TargetConnectionInfo");
            }
            if (this.TargetDatabaseName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TargetDatabaseName");
            }
            if (this.ProjectName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ProjectName");
            }
            if (this.ProjectLocation == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ProjectLocation");
            }
            if (this.SelectedTables == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SelectedTables");
            }
            if (this.TargetConnectionInfo != null)
            {
                this.TargetConnectionInfo.Validate();
            }




        }
    }
}