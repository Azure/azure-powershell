// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Database specific information for SQL to Azure SQL DB Managed Instance
    /// migration task inputs
    /// </summary>
    public partial class MigrateSqlServerSqlMIDatabaseInput
    {
        /// <summary>
        /// Initializes a new instance of the MigrateSqlServerSqlMIDatabaseInput class.
        /// </summary>
        public MigrateSqlServerSqlMIDatabaseInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MigrateSqlServerSqlMIDatabaseInput class.
        /// </summary>

        /// <param name="name">Name of the database
        /// </param>

        /// <param name="restoreDatabaseName">Name of the database at destination
        /// </param>

        /// <param name="backupFileShare">Backup file share information for backing up this database.
        /// </param>

        /// <param name="backupFilePaths">The list of backup files to be used in case of existing backups.
        /// </param>
        public MigrateSqlServerSqlMIDatabaseInput(string name, string restoreDatabaseName, FileShare backupFileShare = default(FileShare), System.Collections.Generic.IList<string> backupFilePaths = default(System.Collections.Generic.IList<string>))

        {
            this.Name = name;
            this.RestoreDatabaseName = restoreDatabaseName;
            this.BackupFileShare = backupFileShare;
            this.BackupFilePaths = backupFilePaths;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of the database
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets name of the database at destination
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "restoreDatabaseName")]
        public string RestoreDatabaseName {get; set; }

        /// <summary>
        /// Gets or sets backup file share information for backing up this database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupFileShare")]
        public FileShare BackupFileShare {get; set; }

        /// <summary>
        /// Gets or sets the list of backup files to be used in case of existing
        /// backups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupFilePaths")]
        public System.Collections.Generic.IList<string> BackupFilePaths {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (this.RestoreDatabaseName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RestoreDatabaseName");
            }


            if (this.BackupFileShare != null)
            {
                this.BackupFileShare.Validate();
            }

        }
    }
}