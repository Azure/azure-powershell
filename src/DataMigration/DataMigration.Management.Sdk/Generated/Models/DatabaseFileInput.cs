// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Database file specific information for input
    /// </summary>
    public partial class DatabaseFileInput
    {
        /// <summary>
        /// Initializes a new instance of the DatabaseFileInput class.
        /// </summary>
        public DatabaseFileInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatabaseFileInput class.
        /// </summary>

        /// <param name="id">Unique identifier for database file
        /// </param>

        /// <param name="logicalName">Logical name of the file
        /// </param>

        /// <param name="physicalFullName">Operating-system full path of the file
        /// </param>

        /// <param name="restoreFullName">Suggested full path of the file for restoring
        /// </param>

        /// <param name="fileType">Database file type
        /// Possible values include: &#39;Rows&#39;, &#39;Log&#39;, &#39;Filestream&#39;, &#39;NotSupported&#39;,
        /// &#39;Fulltext&#39;</param>
        public DatabaseFileInput(string id = default(string), string logicalName = default(string), string physicalFullName = default(string), string restoreFullName = default(string), string fileType = default(string))

        {
            this.Id = id;
            this.LogicalName = logicalName;
            this.PhysicalFullName = physicalFullName;
            this.RestoreFullName = restoreFullName;
            this.FileType = fileType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets unique identifier for database file
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; set; }

        /// <summary>
        /// Gets or sets logical name of the file
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "logicalName")]
        public string LogicalName {get; set; }

        /// <summary>
        /// Gets or sets operating-system full path of the file
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "physicalFullName")]
        public string PhysicalFullName {get; set; }

        /// <summary>
        /// Gets or sets suggested full path of the file for restoring
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "restoreFullName")]
        public string RestoreFullName {get; set; }

        /// <summary>
        /// Gets or sets database file type Possible values include: &#39;Rows&#39;, &#39;Log&#39;, &#39;Filestream&#39;, &#39;NotSupported&#39;, &#39;Fulltext&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileType")]
        public string FileType {get; set; }
    }
}