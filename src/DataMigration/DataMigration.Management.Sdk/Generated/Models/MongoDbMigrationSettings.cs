// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Describes how a MongoDB data migration should be performed
    /// </summary>
    public partial class MongoDbMigrationSettings
    {
        /// <summary>
        /// Initializes a new instance of the MongoDbMigrationSettings class.
        /// </summary>
        public MongoDbMigrationSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MongoDbMigrationSettings class.
        /// </summary>

        /// <param name="boostRUs">The RU limit on a CosmosDB target that collections will be temporarily
        /// increased to (if lower) during the initial copy of a migration, from 10,000
        /// to 1,000,000, or 0 to use the default boost (which is generally the
        /// maximum), or null to not boost the RUs. This setting has no effect on
        /// non-CosmosDB targets.
        /// </param>

        /// <param name="databases">The databases on the source cluster to migrate to the target. The keys are
        /// the names of the databases.
        /// </param>

        /// <param name="replication">Describes how changes will be replicated from the source to the target. The
        /// default is OneTime.
        /// Possible values include: &#39;Disabled&#39;, &#39;OneTime&#39;, &#39;Continuous&#39;</param>

        /// <param name="source">Settings used to connect to the source cluster
        /// </param>

        /// <param name="target">Settings used to connect to the target cluster
        /// </param>

        /// <param name="throttling">Settings used to limit the resource usage of the migration
        /// </param>
        public MongoDbMigrationSettings(System.Collections.Generic.IDictionary<string, MongoDbDatabaseSettings> databases, MongoDbConnectionInfo source, MongoDbConnectionInfo target, int? boostRUs = default(int?), string replication = default(string), MongoDbThrottlingSettings throttling = default(MongoDbThrottlingSettings))

        {
            this.BoostRUs = boostRUs;
            this.Databases = databases;
            this.Replication = replication;
            this.Source = source;
            this.Target = target;
            this.Throttling = throttling;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the RU limit on a CosmosDB target that collections will be
        /// temporarily increased to (if lower) during the initial copy of a migration,
        /// from 10,000 to 1,000,000, or 0 to use the default boost (which is generally
        /// the maximum), or null to not boost the RUs. This setting has no effect on
        /// non-CosmosDB targets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "boostRUs")]
        public int? BoostRUs {get; set; }

        /// <summary>
        /// Gets or sets the databases on the source cluster to migrate to the target.
        /// The keys are the names of the databases.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databases")]
        public System.Collections.Generic.IDictionary<string, MongoDbDatabaseSettings> Databases {get; set; }

        /// <summary>
        /// Gets or sets describes how changes will be replicated from the source to
        /// the target. The default is OneTime. Possible values include: &#39;Disabled&#39;, &#39;OneTime&#39;, &#39;Continuous&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "replication")]
        public string Replication {get; set; }

        /// <summary>
        /// Gets or sets settings used to connect to the source cluster
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "source")]
        public MongoDbConnectionInfo Source {get; set; }

        /// <summary>
        /// Gets or sets settings used to connect to the target cluster
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "target")]
        public MongoDbConnectionInfo Target {get; set; }

        /// <summary>
        /// Gets or sets settings used to limit the resource usage of the migration
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "throttling")]
        public MongoDbThrottlingSettings Throttling {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Databases == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Databases");
            }
            if (this.Source == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Source");
            }
            if (this.Target == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Target");
            }
            if (this.Databases != null)
            {
                foreach (var valueElement in this.Databases.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }

            if (this.Source != null)
            {
                this.Source.Validate();
            }
            if (this.Target != null)
            {
                this.Target.Validate();
            }

        }
    }
}