// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Base class for all types of DMS task properties. If task is not supported
    /// by current client, this object is returned.
    /// </summary>
    [Newtonsoft.Json.JsonObject("ProjectTaskProperties")]
    public partial class ProjectTaskProperties
    {
        /// <summary>
        /// Initializes a new instance of the ProjectTaskProperties class.
        /// </summary>
        public ProjectTaskProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProjectTaskProperties class.
        /// </summary>

        /// <param name="errors">Array of errors. This is ignored if submitted.
        /// </param>

        /// <param name="state">The state of the task. This is ignored if submitted.
        /// Possible values include: &#39;Unknown&#39;, &#39;Queued&#39;, &#39;Running&#39;, &#39;Canceled&#39;,
        /// &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;FailedInputValidation&#39;, &#39;Faulted&#39;</param>

        /// <param name="commands">Array of command properties.
        /// </param>

        /// <param name="clientData">Key value pairs of client data to attach meta data information to task
        /// </param>
        public ProjectTaskProperties(System.Collections.Generic.IList<ODataError> errors = default(System.Collections.Generic.IList<ODataError>), string state = default(string), System.Collections.Generic.IList<CommandProperties> commands = default(System.Collections.Generic.IList<CommandProperties>), System.Collections.Generic.IDictionary<string, string> clientData = default(System.Collections.Generic.IDictionary<string, string>))

        {
            this.Errors = errors;
            this.State = state;
            this.Commands = commands;
            this.ClientData = clientData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets array of errors. This is ignored if submitted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "errors")]
        public System.Collections.Generic.IList<ODataError> Errors {get; private set; }

        /// <summary>
        /// Gets the state of the task. This is ignored if submitted. Possible values include: &#39;Unknown&#39;, &#39;Queued&#39;, &#39;Running&#39;, &#39;Canceled&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;FailedInputValidation&#39;, &#39;Faulted&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; private set; }

        /// <summary>
        /// Gets array of command properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "commands")]
        public System.Collections.Generic.IList<CommandProperties> Commands {get; private set; }

        /// <summary>
        /// Gets or sets key value pairs of client data to attach meta data information
        /// to task
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clientData")]
        public System.Collections.Generic.IDictionary<string, string> ClientData {get; set; }
    }
}