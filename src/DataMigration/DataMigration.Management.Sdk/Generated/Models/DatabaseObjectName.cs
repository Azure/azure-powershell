// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// A representation of the name of an object in a database
    /// </summary>
    public partial class DatabaseObjectName
    {
        /// <summary>
        /// Initializes a new instance of the DatabaseObjectName class.
        /// </summary>
        public DatabaseObjectName()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatabaseObjectName class.
        /// </summary>

        /// <param name="databaseName">The unescaped name of the database containing the object
        /// </param>

        /// <param name="objectName">The unescaped name of the object
        /// </param>

        /// <param name="schemaName">The unescaped name of the schema containing the object
        /// </param>

        /// <param name="objectType">Type of the object in the database
        /// Possible values include: &#39;StoredProcedures&#39;, &#39;Table&#39;, &#39;User&#39;, &#39;View&#39;,
        /// &#39;Function&#39;</param>
        public DatabaseObjectName(string databaseName = default(string), string objectName = default(string), string schemaName = default(string), string objectType = default(string))

        {
            this.DatabaseName = databaseName;
            this.ObjectName = objectName;
            this.SchemaName = schemaName;
            this.ObjectType = objectType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the unescaped name of the database containing the object
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName {get; private set; }

        /// <summary>
        /// Gets the unescaped name of the object
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "objectName")]
        public string ObjectName {get; private set; }

        /// <summary>
        /// Gets the unescaped name of the schema containing the object
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "schemaName")]
        public string SchemaName {get; private set; }

        /// <summary>
        /// Gets or sets type of the object in the database Possible values include: &#39;StoredProcedures&#39;, &#39;Table&#39;, &#39;User&#39;, &#39;View&#39;, &#39;Function&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "objectType")]
        public string ObjectType {get; set; }
    }
}