// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Task level output for the task that validates connection to SQL Server and
    /// also validates source server requirements
    /// </summary>
    [Newtonsoft.Json.JsonObject("TaskLevelOutput")]
    public partial class ConnectToSourceSqlServerTaskOutputTaskLevel : ConnectToSourceSqlServerTaskOutput
    {
        /// <summary>
        /// Initializes a new instance of the ConnectToSourceSqlServerTaskOutputTaskLevel class.
        /// </summary>
        public ConnectToSourceSqlServerTaskOutputTaskLevel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectToSourceSqlServerTaskOutputTaskLevel class.
        /// </summary>

        /// <param name="id">Result identifier
        /// </param>

        /// <param name="databases">Source databases as a map from database name to database id
        /// </param>

        /// <param name="logins">Source logins as a map from login name to login id.
        /// </param>

        /// <param name="agentJobs">Source agent jobs as a map from agent job name to id.
        /// </param>

        /// <param name="databaseTdeCertificateMapping">Mapping from database name to TDE certificate name, if applicable
        /// </param>

        /// <param name="sourceServerVersion">Source server version
        /// </param>

        /// <param name="sourceServerBrandVersion">Source server brand version
        /// </param>

        /// <param name="validationErrors">Validation errors
        /// </param>
        public ConnectToSourceSqlServerTaskOutputTaskLevel(string id = default(string), System.Collections.Generic.IDictionary<string, string> databases = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> logins = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> agentJobs = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> databaseTdeCertificateMapping = default(System.Collections.Generic.IDictionary<string, string>), string sourceServerVersion = default(string), string sourceServerBrandVersion = default(string), System.Collections.Generic.IList<ReportableException> validationErrors = default(System.Collections.Generic.IList<ReportableException>))

        : base(id)
        {
            this.Databases = databases;
            this.Logins = logins;
            this.AgentJobs = agentJobs;
            this.DatabaseTdeCertificateMapping = databaseTdeCertificateMapping;
            this.SourceServerVersion = sourceServerVersion;
            this.SourceServerBrandVersion = sourceServerBrandVersion;
            this.ValidationErrors = validationErrors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets source databases as a map from database name to database id
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databases")]
        public System.Collections.Generic.IDictionary<string, string> Databases {get; private set; }

        /// <summary>
        /// Gets source logins as a map from login name to login id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "logins")]
        public System.Collections.Generic.IDictionary<string, string> Logins {get; private set; }

        /// <summary>
        /// Gets source agent jobs as a map from agent job name to id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentJobs")]
        public System.Collections.Generic.IDictionary<string, string> AgentJobs {get; private set; }

        /// <summary>
        /// Gets mapping from database name to TDE certificate name, if applicable
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseTdeCertificateMapping")]
        public System.Collections.Generic.IDictionary<string, string> DatabaseTdeCertificateMapping {get; private set; }

        /// <summary>
        /// Gets source server version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceServerVersion")]
        public string SourceServerVersion {get; private set; }

        /// <summary>
        /// Gets source server brand version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceServerBrandVersion")]
        public string SourceServerBrandVersion {get; private set; }

        /// <summary>
        /// Gets validation errors
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "validationErrors")]
        public System.Collections.Generic.IList<ReportableException> ValidationErrors {get; private set; }
    }
}