// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using System.Linq;

    /// <summary>
    /// Summary of database results in the migration
    /// </summary>
    public partial class DatabaseSummaryResult : DataItemMigrationSummaryResult
    {
        /// <summary>
        /// Initializes a new instance of the DatabaseSummaryResult class.
        /// </summary>
        public DatabaseSummaryResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatabaseSummaryResult class.
        /// </summary>

        /// <param name="name">Name of the item
        /// </param>

        /// <param name="startedOn">Migration start time
        /// </param>

        /// <param name="endedOn">Migration end time
        /// </param>

        /// <param name="state">Current state of migration
        /// Possible values include: &#39;None&#39;, &#39;InProgress&#39;, &#39;Failed&#39;, &#39;Warning&#39;,
        /// &#39;Completed&#39;, &#39;Skipped&#39;, &#39;Stopped&#39;</param>

        /// <param name="statusMessage">Status message
        /// </param>

        /// <param name="itemsCount">Number of items
        /// </param>

        /// <param name="itemsCompletedCount">Number of successfully completed items
        /// </param>

        /// <param name="errorPrefix">Wildcard string prefix to use for querying all errors of the item
        /// </param>

        /// <param name="resultPrefix">Wildcard string prefix to use for querying all sub-tem results of the item
        /// </param>

        /// <param name="sizeMb">Size of the database in megabytes
        /// </param>
        public DatabaseSummaryResult(string name = default(string), System.DateTimeOffset? startedOn = default(System.DateTimeOffset?), System.DateTimeOffset? endedOn = default(System.DateTimeOffset?), string state = default(string), string statusMessage = default(string), long? itemsCount = default(long?), long? itemsCompletedCount = default(long?), string errorPrefix = default(string), string resultPrefix = default(string), double? sizeMb = default(double?))

        : base(name, startedOn, endedOn, state, statusMessage, itemsCount, itemsCompletedCount, errorPrefix, resultPrefix)
        {
            this.SizeMb = sizeMb;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets size of the database in megabytes
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sizeMB")]
        public double? SizeMb {get; private set; }
    }
}