// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Models.Api20230301
{
    using static Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Extensions;

    /// <summary>An Azure Prometheus alerting or recording rule.</summary>
    public partial class PrometheusRule
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Models.Api20230301.IPrometheusRule.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Models.Api20230301.IPrometheusRule.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Models.Api20230301.IPrometheusRule FromJson(Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonObject json ? new PrometheusRule(json) : null;
        }

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonObject into a new instance of <see cref="PrometheusRule" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal PrometheusRule(Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_resolveConfiguration = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonObject>("resolveConfiguration"), out var __jsonResolveConfiguration) ? Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Models.Api20230301.PrometheusRuleResolveConfiguration.FromJson(__jsonResolveConfiguration) : ResolveConfiguration;}
            {_record = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonString>("record"), out var __jsonRecord) ? (string)__jsonRecord : (string)Record;}
            {_alert = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonString>("alert"), out var __jsonAlert) ? (string)__jsonAlert : (string)Alert;}
            {_enabled = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonBoolean>("enabled"), out var __jsonEnabled) ? (bool?)__jsonEnabled : Enabled;}
            {_expression = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonString>("expression"), out var __jsonExpression) ? (string)__jsonExpression : (string)Expression;}
            {_label = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonObject>("labels"), out var __jsonLabels) ? Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Models.Api20230301.PrometheusRuleLabels.FromJson(__jsonLabels) : Label;}
            {_severity = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonNumber>("severity"), out var __jsonSeverity) ? (int?)__jsonSeverity : Severity;}
            {_for = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonString>("for"), out var __jsonFor) ? global::System.Xml.XmlConvert.ToTimeSpan( __jsonFor ) : For;}
            {_annotation = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonObject>("annotations"), out var __jsonAnnotations) ? Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Models.Api20230301.PrometheusRuleAnnotations.FromJson(__jsonAnnotations) : Annotation;}
            {_action = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonArray>("actions"), out var __jsonActions) ? If( __jsonActions as Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Models.Api20230301.IPrometheusRuleGroupAction[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__v, (__u)=>(Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Models.Api20230301.IPrometheusRuleGroupAction) (Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Models.Api20230301.PrometheusRuleGroupAction.FromJson(__u) )) ))() : null : Action;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Serializes this instance of <see cref="PrometheusRule" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="PrometheusRule" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != this._resolveConfiguration ? (Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonNode) this._resolveConfiguration.ToJson(null,serializationMode) : null, "resolveConfiguration" ,container.Add );
            AddIf( null != (((object)this._record)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonString(this._record.ToString()) : null, "record" ,container.Add );
            AddIf( null != (((object)this._alert)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonString(this._alert.ToString()) : null, "alert" ,container.Add );
            AddIf( null != this._enabled ? (Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonBoolean((bool)this._enabled) : null, "enabled" ,container.Add );
            AddIf( null != (((object)this._expression)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonString(this._expression.ToString()) : null, "expression" ,container.Add );
            AddIf( null != this._label ? (Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonNode) this._label.ToJson(null,serializationMode) : null, "labels" ,container.Add );
            AddIf( null != this._severity ? (Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonNumber((int)this._severity) : null, "severity" ,container.Add );
            AddIf( (Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonNode)(null != this._for ? new Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonString(global::System.Xml.XmlConvert.ToString((global::System.TimeSpan)this._for)): null), "for" ,container.Add );
            AddIf( null != this._annotation ? (Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.JsonNode) this._annotation.ToJson(null,serializationMode) : null, "annotations" ,container.Add );
            if (null != this._action)
            {
                var __w = new Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Json.XNodeArray();
                foreach( var __x in this._action )
                {
                    AddIf(__x?.ToJson(null, serializationMode) ,__w.Add);
                }
                container.Add("actions",__w);
            }
            AfterToJson(ref container);
            return container;
        }
    }
}