// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.AlertsManagement.Models
{
    using System.Linq;

    /// <summary>
    /// This object contains consistent fields across different monitor services.
    /// </summary>
    public partial class Essentials
    {
        /// <summary>
        /// Initializes a new instance of the Essentials class.
        /// </summary>
        public Essentials()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Essentials class.
        /// </summary>

        /// <param name="severity">Severity of alert Sev0 being highest and Sev4 being lowest.
        /// Possible values include: 'Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4'</param>

        /// <param name="signalType">The type of signal the alert is based on, which could be metrics, logs or
        /// activity logs.
        /// Possible values include: 'Metric', 'Log', 'Unknown'</param>

        /// <param name="alertState">Alert object state, which can be modified by the user.
        /// Possible values include: 'New', 'Acknowledged', 'Closed'</param>

        /// <param name="monitorCondition">Condition of the rule at the monitor service. It represents whether the
        /// underlying conditions have crossed the defined alert rule thresholds.
        /// Possible values include: 'Fired', 'Resolved'</param>

        /// <param name="targetResource">Target ARM resource, on which alert got created.
        /// </param>

        /// <param name="targetResourceName">Name of the target ARM resource name, on which alert got created.
        /// </param>

        /// <param name="targetResourceGroup">Resource group of target ARM resource, on which alert got created.
        /// </param>

        /// <param name="targetResourceType">Resource type of target ARM resource, on which alert got created.
        /// </param>

        /// <param name="monitorService">Monitor service on which the rule(monitor) is set.
        /// Possible values include: 'Application Insights', 'ActivityLog
        /// Administrative', 'ActivityLog Security', 'ActivityLog Recommendation',
        /// 'ActivityLog Policy', 'ActivityLog Autoscale', 'Log Analytics', 'Nagios',
        /// 'Platform', 'SCOM', 'ServiceHealth', 'SmartDetector', 'VM Insights',
        /// 'Zabbix'</param>

        /// <param name="alertRule">Rule(monitor) which fired alert instance. Depending on the monitor service,
        /// this would be ARM id or name of the rule.
        /// </param>

        /// <param name="sourceCreatedId">Unique Id created by monitor service for each alert instance. This could be
        /// used to track the issue at the monitor service, in case of Nagios, Zabbix,
        /// SCOM etc.
        /// </param>

        /// <param name="smartGroupId">Unique Id of the smart group
        /// </param>

        /// <param name="smartGroupingReason">Verbose reason describing the reason why this alert instance is added to a
        /// smart group
        /// </param>

        /// <param name="startDateTime">Creation time(ISO-8601 format) of alert instance.
        /// </param>

        /// <param name="lastModifiedDateTime">Last modification time(ISO-8601 format) of alert instance.
        /// </param>

        /// <param name="monitorConditionResolvedDateTime">Resolved time(ISO-8601 format) of alert instance. This will be updated when
        /// monitor service resolves the alert instance because the rule condition is
        /// no longer met.
        /// </param>

        /// <param name="lastModifiedUserName">User who last modified the alert, in case of monitor service updates user
        /// would be &#39;system&#39;, otherwise name of the user.
        /// </param>

        /// <param name="actionStatus">Action status
        /// </param>

        /// <param name="description">Alert description.
        /// </param>
        public Essentials(string severity = default(string), string signalType = default(string), string alertState = default(string), string monitorCondition = default(string), string targetResource = default(string), string targetResourceName = default(string), string targetResourceGroup = default(string), string targetResourceType = default(string), string monitorService = default(string), string alertRule = default(string), string sourceCreatedId = default(string), string smartGroupId = default(string), string smartGroupingReason = default(string), System.DateTime? startDateTime = default(System.DateTime?), System.DateTime? lastModifiedDateTime = default(System.DateTime?), System.DateTime? monitorConditionResolvedDateTime = default(System.DateTime?), string lastModifiedUserName = default(string), ActionStatus actionStatus = default(ActionStatus), string description = default(string))

        {
            this.Severity = severity;
            this.SignalType = signalType;
            this.AlertState = alertState;
            this.MonitorCondition = monitorCondition;
            this.TargetResource = targetResource;
            this.TargetResourceName = targetResourceName;
            this.TargetResourceGroup = targetResourceGroup;
            this.TargetResourceType = targetResourceType;
            this.MonitorService = monitorService;
            this.AlertRule = alertRule;
            this.SourceCreatedId = sourceCreatedId;
            this.SmartGroupId = smartGroupId;
            this.SmartGroupingReason = smartGroupingReason;
            this.StartDateTime = startDateTime;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.MonitorConditionResolvedDateTime = monitorConditionResolvedDateTime;
            this.LastModifiedUserName = lastModifiedUserName;
            this.ActionStatus = actionStatus;
            this.Description = description;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets severity of alert Sev0 being highest and Sev4 being lowest. Possible values include: &#39;Sev0&#39;, &#39;Sev1&#39;, &#39;Sev2&#39;, &#39;Sev3&#39;, &#39;Sev4&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "severity")]
        public string Severity {get; private set; }

        /// <summary>
        /// Gets the type of signal the alert is based on, which could be metrics, logs
        /// or activity logs. Possible values include: &#39;Metric&#39;, &#39;Log&#39;, &#39;Unknown&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "signalType")]
        public string SignalType {get; private set; }

        /// <summary>
        /// Gets alert object state, which can be modified by the user. Possible values include: &#39;New&#39;, &#39;Acknowledged&#39;, &#39;Closed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "alertState")]
        public string AlertState {get; private set; }

        /// <summary>
        /// Gets condition of the rule at the monitor service. It represents whether
        /// the underlying conditions have crossed the defined alert rule thresholds. Possible values include: &#39;Fired&#39;, &#39;Resolved&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "monitorCondition")]
        public string MonitorCondition {get; private set; }

        /// <summary>
        /// Gets or sets target ARM resource, on which alert got created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetResource")]
        public string TargetResource {get; set; }

        /// <summary>
        /// Gets or sets name of the target ARM resource name, on which alert got
        /// created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetResourceName")]
        public string TargetResourceName {get; set; }

        /// <summary>
        /// Gets or sets resource group of target ARM resource, on which alert got
        /// created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetResourceGroup")]
        public string TargetResourceGroup {get; set; }

        /// <summary>
        /// Gets or sets resource type of target ARM resource, on which alert got
        /// created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetResourceType")]
        public string TargetResourceType {get; set; }

        /// <summary>
        /// Gets monitor service on which the rule(monitor) is set. Possible values include: &#39;Application Insights&#39;, &#39;ActivityLog Administrative&#39;, &#39;ActivityLog Security&#39;, &#39;ActivityLog Recommendation&#39;, &#39;ActivityLog Policy&#39;, &#39;ActivityLog Autoscale&#39;, &#39;Log Analytics&#39;, &#39;Nagios&#39;, &#39;Platform&#39;, &#39;SCOM&#39;, &#39;ServiceHealth&#39;, &#39;SmartDetector&#39;, &#39;VM Insights&#39;, &#39;Zabbix&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "monitorService")]
        public string MonitorService {get; private set; }

        /// <summary>
        /// Gets rule(monitor) which fired alert instance. Depending on the monitor
        /// service,  this would be ARM id or name of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "alertRule")]
        public string AlertRule {get; private set; }

        /// <summary>
        /// Gets unique Id created by monitor service for each alert instance. This
        /// could be used to track the issue at the monitor service, in case of Nagios,
        /// Zabbix, SCOM etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceCreatedId")]
        public string SourceCreatedId {get; private set; }

        /// <summary>
        /// Gets unique Id of the smart group
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "smartGroupId")]
        public string SmartGroupId {get; private set; }

        /// <summary>
        /// Gets verbose reason describing the reason why this alert instance is added
        /// to a smart group
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "smartGroupingReason")]
        public string SmartGroupingReason {get; private set; }

        /// <summary>
        /// Gets creation time(ISO-8601 format) of alert instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startDateTime")]
        public System.DateTime? StartDateTime {get; private set; }

        /// <summary>
        /// Gets last modification time(ISO-8601 format) of alert instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastModifiedDateTime")]
        public System.DateTime? LastModifiedDateTime {get; private set; }

        /// <summary>
        /// Gets resolved time(ISO-8601 format) of alert instance. This will be updated
        /// when monitor service resolves the alert instance because the rule condition
        /// is no longer met.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "monitorConditionResolvedDateTime")]
        public System.DateTime? MonitorConditionResolvedDateTime {get; private set; }

        /// <summary>
        /// Gets user who last modified the alert, in case of monitor service updates
        /// user would be &#39;system&#39;, otherwise name of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastModifiedUserName")]
        public string LastModifiedUserName {get; private set; }

        /// <summary>
        /// Gets or sets action status
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "actionStatus")]
        public ActionStatus ActionStatus {get; set; }

        /// <summary>
        /// Gets or sets alert description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }
    }
}