// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.AlertsManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Scheduling configuration for a given alert processing rule.
    /// </summary>
    public partial class Schedule
    {
        /// <summary>
        /// Initializes a new instance of the Schedule class.
        /// </summary>
        public Schedule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Schedule class.
        /// </summary>

        /// <param name="effectiveFrom">Scheduling effective from time. Date-Time in ISO-8601 format without
        /// timezone suffix.
        /// </param>

        /// <param name="effectiveUntil">Scheduling effective until time. Date-Time in ISO-8601 format without
        /// timezone suffix.
        /// </param>

        /// <param name="timeZone">Scheduling time zone.
        /// </param>

        /// <param name="recurrences">List of recurrences.
        /// </param>
        public Schedule(string effectiveFrom = default(string), string effectiveUntil = default(string), string timeZone = default(string), System.Collections.Generic.IList<Recurrence> recurrences = default(System.Collections.Generic.IList<Recurrence>))

        {
            this.EffectiveFrom = effectiveFrom;
            this.EffectiveUntil = effectiveUntil;
            this.TimeZone = timeZone;
            this.Recurrences = recurrences;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets scheduling effective from time. Date-Time in ISO-8601 format
        /// without timezone suffix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "effectiveFrom")]
        public string EffectiveFrom {get; set; }

        /// <summary>
        /// Gets or sets scheduling effective until time. Date-Time in ISO-8601 format
        /// without timezone suffix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "effectiveUntil")]
        public string EffectiveUntil {get; set; }

        /// <summary>
        /// Gets or sets scheduling time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeZone")]
        public string TimeZone {get; set; }

        /// <summary>
        /// Gets or sets list of recurrences.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recurrences")]
        public System.Collections.Generic.IList<Recurrence> Recurrences {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.EffectiveFrom != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.EffectiveFrom, "^(?:(\\d{4}-\\d{2}-\\d{2})T(\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?))$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "EffectiveFrom", "^(?:(\\d{4}-\\d{2}-\\d{2})T(\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?))$");
                }
            }
            if (this.EffectiveUntil != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.EffectiveUntil, "^(?:(\\d{4}-\\d{2}-\\d{2})T(\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?))$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "EffectiveUntil", "^(?:(\\d{4}-\\d{2}-\\d{2})T(\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?))$");
                }
            }


        }
    }
}