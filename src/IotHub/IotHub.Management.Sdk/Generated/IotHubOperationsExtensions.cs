// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.IotHub
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for IotHubOperations
    /// </summary>
    public static partial class IotHubOperationsExtensions
    {
        /// <summary>
        /// Manually initiate a failover for the IoT Hub to its secondary region. To
        /// learn more, see https://aka.ms/manualfailover
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='iotHubName'>
        /// Name of the IoT hub to failover
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group containing the IoT hub resource
        /// </param>
        public static void ManualFailover(this IIotHubOperations operations, string iotHubName, string resourceGroupName, FailoverInput failoverInput)
        {
                ((IIotHubOperations)operations).ManualFailoverAsync(iotHubName, resourceGroupName, failoverInput).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Manually initiate a failover for the IoT Hub to its secondary region. To
        /// learn more, see https://aka.ms/manualfailover
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='iotHubName'>
        /// Name of the IoT hub to failover
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group containing the IoT hub resource
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ManualFailoverAsync(this IIotHubOperations operations, string iotHubName, string resourceGroupName, FailoverInput failoverInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.ManualFailoverWithHttpMessagesAsync(iotHubName, resourceGroupName, failoverInput, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Manually initiate a failover for the IoT Hub to its secondary region. To
        /// learn more, see https://aka.ms/manualfailover
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='iotHubName'>
        /// Name of the IoT hub to failover
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group containing the IoT hub resource
        /// </param>
        public static void BeginManualFailover(this IIotHubOperations operations, string iotHubName, string resourceGroupName, FailoverInput failoverInput)
        {
                ((IIotHubOperations)operations).BeginManualFailoverAsync(iotHubName, resourceGroupName, failoverInput).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Manually initiate a failover for the IoT Hub to its secondary region. To
        /// learn more, see https://aka.ms/manualfailover
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='iotHubName'>
        /// Name of the IoT hub to failover
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group containing the IoT hub resource
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginManualFailoverAsync(this IIotHubOperations operations, string iotHubName, string resourceGroupName, FailoverInput failoverInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginManualFailoverWithHttpMessagesAsync(iotHubName, resourceGroupName, failoverInput, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
    }
}
