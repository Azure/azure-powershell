// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.IotHub.Models
{
    using System.Linq;

    /// <summary>
    /// The properties related to service bus topic endpoint types.
    /// </summary>
    public partial class RoutingServiceBusTopicEndpointProperties
    {
        /// <summary>
        /// Initializes a new instance of the RoutingServiceBusTopicEndpointProperties class.
        /// </summary>
        public RoutingServiceBusTopicEndpointProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RoutingServiceBusTopicEndpointProperties class.
        /// </summary>

        /// <param name="id">Id of the service bus topic endpoint
        /// </param>

        /// <param name="connectionString">The connection string of the service bus topic endpoint.
        /// </param>

        /// <param name="endpointUri">The url of the service bus topic endpoint. It must include the protocol
        /// sb://
        /// </param>

        /// <param name="entityPath">Queue name on the service bus topic
        /// </param>

        /// <param name="authenticationType">Method used to authenticate against the service bus topic endpoint
        /// Possible values include: &#39;keyBased&#39;, &#39;identityBased&#39;</param>

        /// <param name="identity">Managed identity properties of routing service bus topic endpoint.
        /// </param>

        /// <param name="name">The name that identifies this endpoint. The name can only include
        /// alphanumeric characters, periods, underscores, hyphens and has a maximum
        /// length of 64 characters. The following names are reserved:  events,
        /// fileNotifications, $default. Endpoint names must be unique across endpoint
        /// types.  The name need not be the same as the actual topic name.
        /// </param>

        /// <param name="subscriptionId">The subscription identifier of the service bus topic endpoint.
        /// </param>

        /// <param name="resourceGroup">The name of the resource group of the service bus topic endpoint.
        /// </param>
        public RoutingServiceBusTopicEndpointProperties(string name, string id = default(string), string connectionString = default(string), string endpointUri = default(string), string entityPath = default(string), string authenticationType = default(string), ManagedIdentity identity = default(ManagedIdentity), string subscriptionId = default(string), string resourceGroup = default(string))

        {
            this.Id = id;
            this.ConnectionString = connectionString;
            this.EndpointUri = endpointUri;
            this.EntityPath = entityPath;
            this.AuthenticationType = authenticationType;
            this.Identity = identity;
            this.Name = name;
            this.SubscriptionId = subscriptionId;
            this.ResourceGroup = resourceGroup;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets id of the service bus topic endpoint
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; set; }

        /// <summary>
        /// Gets or sets the connection string of the service bus topic endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionString")]
        public string ConnectionString {get; set; }

        /// <summary>
        /// Gets or sets the url of the service bus topic endpoint. It must include the
        /// protocol sb://
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endpointUri")]
        public string EndpointUri {get; set; }

        /// <summary>
        /// Gets or sets queue name on the service bus topic
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "entityPath")]
        public string EntityPath {get; set; }

        /// <summary>
        /// Gets or sets method used to authenticate against the service bus topic
        /// endpoint Possible values include: &#39;keyBased&#39;, &#39;identityBased&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authenticationType")]
        public string AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets managed identity properties of routing service bus topic
        /// endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public ManagedIdentity Identity {get; set; }

        /// <summary>
        /// Gets or sets the name that identifies this endpoint. The name can only
        /// include alphanumeric characters, periods, underscores, hyphens and has a
        /// maximum length of 64 characters. The following names are reserved:  events,
        /// fileNotifications, $default. Endpoint names must be unique across endpoint
        /// types.  The name need not be the same as the actual topic name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets the subscription identifier of the service bus topic endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subscriptionId")]
        public string SubscriptionId {get; set; }

        /// <summary>
        /// Gets or sets the name of the resource group of the service bus topic
        /// endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceGroup")]
        public string ResourceGroup {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }






            if (this.Name != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.Name, "^[A-Za-z0-9-._]{1,64}$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "Name", "^[A-Za-z0-9-._]{1,64}$");
                }
            }


        }
    }
}