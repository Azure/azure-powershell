// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.IotHub.Models
{
    using System.Linq;

    /// <summary>
    /// The properties of an IoT hub.
    /// </summary>
    public partial class IotHubProperties
    {
        /// <summary>
        /// Initializes a new instance of the IotHubProperties class.
        /// </summary>
        public IotHubProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IotHubProperties class.
        /// </summary>

        /// <param name="authorizationPolicies">The shared access policies you can use to secure a connection to the IoT
        /// hub.
        /// </param>

        /// <param name="disableLocalAuth">If true, SAS tokens with Iot hub scoped SAS keys cannot be used for
        /// authentication.
        /// </param>

        /// <param name="disableDeviceSas">If true, all device(including Edge devices but excluding modules) scoped
        /// SAS keys cannot be used for authentication.
        /// </param>

        /// <param name="disableModuleSas">If true, all module scoped SAS keys cannot be used for authentication.
        /// </param>

        /// <param name="restrictOutboundNetworkAccess">If true, egress from IotHub will be restricted to only the allowed FQDNs
        /// that are configured via allowedFqdnList.
        /// </param>

        /// <param name="allowedFqdnList">List of allowed FQDNs(Fully Qualified Domain Name) for egress from Iot Hub.
        /// </param>

        /// <param name="publicNetworkAccess">Whether requests from Public Network are allowed
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="ipFilterRules">The IP filter rules.
        /// </param>

        /// <param name="networkRuleSets">Network Rule Set Properties of IotHub
        /// </param>

        /// <param name="minTlsVersion">Specifies the minimum TLS version to support for this hub. Can be set to
        /// &#34;1.2&#34; to have clients that use a TLS version below 1.2 to be rejected.
        /// </param>

        /// <param name="privateEndpointConnections">Private endpoint connections created on this IotHub
        /// </param>

        /// <param name="provisioningState">The provisioning state.
        /// </param>

        /// <param name="state">The hub state.
        /// </param>

        /// <param name="hostName">The name of the host.
        /// </param>

        /// <param name="eventHubEndpoints">The Event Hub-compatible endpoint properties. The only possible keys to
        /// this dictionary is events. This key has to be present in the dictionary
        /// while making create or update calls for the IoT hub.
        /// </param>

        /// <param name="routing">The routing related properties of the IoT hub. See:
        /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging
        /// </param>

        /// <param name="storageEndpoints">The list of Azure Storage endpoints where you can upload files. Currently
        /// you can configure only one Azure Storage account and that MUST have its key
        /// as $default. Specifying more than one storage account causes an error to be
        /// thrown. Not specifying a value for this property when the
        /// enableFileUploadNotifications property is set to True, causes an error to
        /// be thrown.
        /// </param>

        /// <param name="messagingEndpoints">The messaging endpoint properties for the file upload notification queue.
        /// </param>

        /// <param name="enableFileUploadNotifications">If True, file upload notifications are enabled.
        /// </param>

        /// <param name="cloudToDevice">The IoT hub cloud-to-device messaging properties.
        /// </param>

        /// <param name="comments">IoT hub comments.
        /// </param>

        /// <param name="features">The capabilities and features enabled for the IoT hub.
        /// Possible values include: &#39;None&#39;, &#39;DeviceManagement&#39;</param>

        /// <param name="locations">Primary and secondary location for iot hub
        /// </param>

        /// <param name="enableDataResidency">This property when set to true, will enable data residency, thus, disabling
        /// disaster recovery.
        /// </param>
        public IotHubProperties(System.Collections.Generic.IList<SharedAccessSignatureAuthorizationRule> authorizationPolicies = default(System.Collections.Generic.IList<SharedAccessSignatureAuthorizationRule>), bool? disableLocalAuth = default(bool?), bool? disableDeviceSas = default(bool?), bool? disableModuleSas = default(bool?), bool? restrictOutboundNetworkAccess = default(bool?), System.Collections.Generic.IList<string> allowedFqdnList = default(System.Collections.Generic.IList<string>), string publicNetworkAccess = default(string), System.Collections.Generic.IList<IpFilterRule> ipFilterRules = default(System.Collections.Generic.IList<IpFilterRule>), NetworkRuleSetProperties networkRuleSets = default(NetworkRuleSetProperties), string minTlsVersion = default(string), System.Collections.Generic.IList<PrivateEndpointConnection> privateEndpointConnections = default(System.Collections.Generic.IList<PrivateEndpointConnection>), string provisioningState = default(string), string state = default(string), string hostName = default(string), System.Collections.Generic.IDictionary<string, EventHubProperties> eventHubEndpoints = default(System.Collections.Generic.IDictionary<string, EventHubProperties>), RoutingProperties routing = default(RoutingProperties), System.Collections.Generic.IDictionary<string, StorageEndpointProperties> storageEndpoints = default(System.Collections.Generic.IDictionary<string, StorageEndpointProperties>), System.Collections.Generic.IDictionary<string, MessagingEndpointProperties> messagingEndpoints = default(System.Collections.Generic.IDictionary<string, MessagingEndpointProperties>), bool? enableFileUploadNotifications = default(bool?), CloudToDeviceProperties cloudToDevice = default(CloudToDeviceProperties), string comments = default(string), string features = default(string), System.Collections.Generic.IList<IotHubLocationDescription> locations = default(System.Collections.Generic.IList<IotHubLocationDescription>), bool? enableDataResidency = default(bool?))

        {
            this.AuthorizationPolicies = authorizationPolicies;
            this.DisableLocalAuth = disableLocalAuth;
            this.DisableDeviceSas = disableDeviceSas;
            this.DisableModuleSas = disableModuleSas;
            this.RestrictOutboundNetworkAccess = restrictOutboundNetworkAccess;
            this.AllowedFqdnList = allowedFqdnList;
            this.PublicNetworkAccess = publicNetworkAccess;
            this.IPFilterRules = ipFilterRules;
            this.NetworkRuleSets = networkRuleSets;
            this.MinTlsVersion = minTlsVersion;
            this.PrivateEndpointConnections = privateEndpointConnections;
            this.ProvisioningState = provisioningState;
            this.State = state;
            this.HostName = hostName;
            this.EventHubEndpoints = eventHubEndpoints;
            this.Routing = routing;
            this.StorageEndpoints = storageEndpoints;
            this.MessagingEndpoints = messagingEndpoints;
            this.EnableFileUploadNotifications = enableFileUploadNotifications;
            this.CloudToDevice = cloudToDevice;
            this.Comments = comments;
            this.Features = features;
            this.Locations = locations;
            this.EnableDataResidency = enableDataResidency;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the shared access policies you can use to secure a connection
        /// to the IoT hub.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authorizationPolicies")]
        public System.Collections.Generic.IList<SharedAccessSignatureAuthorizationRule> AuthorizationPolicies {get; set; }

        /// <summary>
        /// Gets or sets if true, SAS tokens with Iot hub scoped SAS keys cannot be
        /// used for authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disableLocalAuth")]
        public bool? DisableLocalAuth {get; set; }

        /// <summary>
        /// Gets or sets if true, all device(including Edge devices but excluding
        /// modules) scoped SAS keys cannot be used for authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disableDeviceSAS")]
        public bool? DisableDeviceSas {get; set; }

        /// <summary>
        /// Gets or sets if true, all module scoped SAS keys cannot be used for
        /// authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disableModuleSAS")]
        public bool? DisableModuleSas {get; set; }

        /// <summary>
        /// Gets or sets if true, egress from IotHub will be restricted to only the
        /// allowed FQDNs that are configured via allowedFqdnList.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "restrictOutboundNetworkAccess")]
        public bool? RestrictOutboundNetworkAccess {get; set; }

        /// <summary>
        /// Gets or sets list of allowed FQDNs(Fully Qualified Domain Name) for egress
        /// from Iot Hub.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowedFqdnList")]
        public System.Collections.Generic.IList<string> AllowedFqdnList {get; set; }

        /// <summary>
        /// Gets or sets whether requests from Public Network are allowed Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publicNetworkAccess")]
        public string PublicNetworkAccess {get; set; }

        /// <summary>
        /// Gets or sets the IP filter rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipFilterRules")]
        public System.Collections.Generic.IList<IpFilterRule> IPFilterRules {get; set; }

        /// <summary>
        /// Gets or sets network Rule Set Properties of IotHub
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkRuleSets")]
        public NetworkRuleSetProperties NetworkRuleSets {get; set; }

        /// <summary>
        /// Gets or sets specifies the minimum TLS version to support for this hub. Can
        /// be set to &#34;1.2&#34; to have clients that use a TLS version below 1.2 to be
        /// rejected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minTlsVersion")]
        public string MinTlsVersion {get; set; }

        /// <summary>
        /// Gets or sets private endpoint connections created on this IotHub
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateEndpointConnections")]
        public System.Collections.Generic.IList<PrivateEndpointConnection> PrivateEndpointConnections {get; set; }

        /// <summary>
        /// Gets the provisioning state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets the hub state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; private set; }

        /// <summary>
        /// Gets the name of the host.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostName")]
        public string HostName {get; private set; }

        /// <summary>
        /// Gets or sets the Event Hub-compatible endpoint properties. The only
        /// possible keys to this dictionary is events. This key has to be present in
        /// the dictionary while making create or update calls for the IoT hub.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "eventHubEndpoints")]
        public System.Collections.Generic.IDictionary<string, EventHubProperties> EventHubEndpoints {get; set; }

        /// <summary>
        /// Gets or sets the routing related properties of the IoT hub. See:
        /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "routing")]
        public RoutingProperties Routing {get; set; }

        /// <summary>
        /// Gets or sets the list of Azure Storage endpoints where you can upload
        /// files. Currently you can configure only one Azure Storage account and that
        /// MUST have its key as $default. Specifying more than one storage account
        /// causes an error to be thrown. Not specifying a value for this property when
        /// the enableFileUploadNotifications property is set to True, causes an error
        /// to be thrown.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageEndpoints")]
        public System.Collections.Generic.IDictionary<string, StorageEndpointProperties> StorageEndpoints {get; set; }

        /// <summary>
        /// Gets or sets the messaging endpoint properties for the file upload
        /// notification queue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "messagingEndpoints")]
        public System.Collections.Generic.IDictionary<string, MessagingEndpointProperties> MessagingEndpoints {get; set; }

        /// <summary>
        /// Gets or sets if True, file upload notifications are enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableFileUploadNotifications")]
        public bool? EnableFileUploadNotifications {get; set; }

        /// <summary>
        /// Gets or sets the IoT hub cloud-to-device messaging properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cloudToDevice")]
        public CloudToDeviceProperties CloudToDevice {get; set; }

        /// <summary>
        /// Gets or sets ioT hub comments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "comments")]
        public string Comments {get; set; }

        /// <summary>
        /// Gets or sets the capabilities and features enabled for the IoT hub. Possible values include: &#39;None&#39;, &#39;DeviceManagement&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "features")]
        public string Features {get; set; }

        /// <summary>
        /// Gets primary and secondary location for iot hub
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "locations")]
        public System.Collections.Generic.IList<IotHubLocationDescription> Locations {get; private set; }

        /// <summary>
        /// Gets or sets this property when set to true, will enable data residency,
        /// thus, disabling disaster recovery.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableDataResidency")]
        public bool? EnableDataResidency {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.AuthorizationPolicies != null)
            {
                foreach (var element in this.AuthorizationPolicies)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }


            if (this.IPFilterRules != null)
            {
                foreach (var element in this.IPFilterRules)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.NetworkRuleSets != null)
            {
                this.NetworkRuleSets.Validate();
            }

            if (this.PrivateEndpointConnections != null)
            {
                foreach (var element in this.PrivateEndpointConnections)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }




            if (this.Routing != null)
            {
                this.Routing.Validate();
            }
            if (this.StorageEndpoints != null)
            {
                foreach (var valueElement in this.StorageEndpoints.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (this.MessagingEndpoints != null)
            {
                foreach (var valueElement in this.MessagingEndpoints.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (this.CloudToDevice != null)
            {
                this.CloudToDevice.Validate();
            }



        }
    }
}