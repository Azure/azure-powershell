// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.IotHub.Models
{
    using System.Linq;

    /// <summary>
    /// The description of an X509 CA Certificate.
    /// </summary>
    public partial class CertificateProperties
    {
        /// <summary>
        /// Initializes a new instance of the CertificateProperties class.
        /// </summary>
        public CertificateProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CertificateProperties class.
        /// </summary>

        /// <param name="subject">The certificate&#39;s subject name.
        /// </param>

        /// <param name="expiry">The certificate&#39;s expiration date and time.
        /// </param>

        /// <param name="thumbprint">The certificate&#39;s thumbprint.
        /// </param>

        /// <param name="isVerified">Determines whether certificate has been verified.
        /// </param>

        /// <param name="created">The certificate&#39;s create date and time.
        /// </param>

        /// <param name="updated">The certificate&#39;s last update date and time.
        /// </param>

        /// <param name="certificate">The certificate content
        /// </param>
        public CertificateProperties(string subject = default(string), System.DateTimeOffset? expiry = default(System.DateTimeOffset?), string thumbprint = default(string), bool? isVerified = default(bool?), System.DateTimeOffset? created = default(System.DateTimeOffset?), System.DateTimeOffset? updated = default(System.DateTimeOffset?), string certificate = default(string))

        {
            this.Subject = subject;
            this.Expiry = expiry;
            this.Thumbprint = thumbprint;
            this.IsVerified = isVerified;
            this.Created = created;
            this.Updated = updated;
            this.Certificate = certificate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the certificate&#39;s subject name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subject")]
        public string Subject {get; private set; }

        /// <summary>
        /// Gets the certificate&#39;s expiration date and time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "expiry")]
        public System.DateTimeOffset? Expiry {get; private set; }

        /// <summary>
        /// Gets the certificate&#39;s thumbprint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "thumbprint")]
        public string Thumbprint {get; private set; }

        /// <summary>
        /// Gets or sets determines whether certificate has been verified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isVerified")]
        public bool? IsVerified {get; set; }

        /// <summary>
        /// Gets the certificate&#39;s create date and time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "created")]
        public System.DateTimeOffset? Created {get; private set; }

        /// <summary>
        /// Gets the certificate&#39;s last update date and time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "updated")]
        public System.DateTimeOffset? Updated {get; private set; }

        /// <summary>
        /// Gets or sets the certificate content
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "certificate")]
        public string Certificate {get; set; }
    }
}