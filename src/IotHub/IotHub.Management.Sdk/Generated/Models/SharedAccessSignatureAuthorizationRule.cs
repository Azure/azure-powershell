// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.IotHub.Models
{
    using System.Linq;

    /// <summary>
    /// The properties of an IoT hub shared access policy.
    /// </summary>
    public partial class SharedAccessSignatureAuthorizationRule
    {
        /// <summary>
        /// Initializes a new instance of the SharedAccessSignatureAuthorizationRule class.
        /// </summary>
        public SharedAccessSignatureAuthorizationRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SharedAccessSignatureAuthorizationRule class.
        /// </summary>

        /// <param name="keyName">The name of the shared access policy.
        /// </param>

        /// <param name="primaryKey">The primary key.
        /// </param>

        /// <param name="secondaryKey">The secondary key.
        /// </param>

        /// <param name="rights">The permissions assigned to the shared access policy.
        /// Possible values include: &#39;RegistryRead&#39;, &#39;RegistryWrite&#39;, &#39;ServiceConnect&#39;,
        /// &#39;DeviceConnect&#39;, &#39;RegistryRead, RegistryWrite&#39;, &#39;RegistryRead,
        /// ServiceConnect&#39;, &#39;RegistryRead, DeviceConnect&#39;, &#39;RegistryWrite,
        /// ServiceConnect&#39;, &#39;RegistryWrite, DeviceConnect&#39;, &#39;ServiceConnect,
        /// DeviceConnect&#39;, &#39;RegistryRead, RegistryWrite, ServiceConnect&#39;,
        /// &#39;RegistryRead, RegistryWrite, DeviceConnect&#39;, &#39;RegistryRead,
        /// ServiceConnect, DeviceConnect&#39;, &#39;RegistryWrite, ServiceConnect,
        /// DeviceConnect&#39;, &#39;RegistryRead, RegistryWrite, ServiceConnect,
        /// DeviceConnect&#39;</param>
        public SharedAccessSignatureAuthorizationRule(string keyName, AccessRights rights, string primaryKey = default(string), string secondaryKey = default(string))

        {
            this.KeyName = keyName;
            this.PrimaryKey = primaryKey;
            this.SecondaryKey = secondaryKey;
            this.Rights = rights;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the shared access policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keyName")]
        public string KeyName {get; set; }

        /// <summary>
        /// Gets or sets the primary key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryKey")]
        public string PrimaryKey {get; set; }

        /// <summary>
        /// Gets or sets the secondary key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "secondaryKey")]
        public string SecondaryKey {get; set; }

        /// <summary>
        /// Gets or sets the permissions assigned to the shared access policy. Possible values include: &#39;RegistryRead&#39;, &#39;RegistryWrite&#39;, &#39;ServiceConnect&#39;, &#39;DeviceConnect&#39;, &#39;RegistryRead, RegistryWrite&#39;, &#39;RegistryRead, ServiceConnect&#39;, &#39;RegistryRead, DeviceConnect&#39;, &#39;RegistryWrite, ServiceConnect&#39;, &#39;RegistryWrite, DeviceConnect&#39;, &#39;ServiceConnect, DeviceConnect&#39;, &#39;RegistryRead, RegistryWrite, ServiceConnect&#39;, &#39;RegistryRead, RegistryWrite, DeviceConnect&#39;, &#39;RegistryRead, ServiceConnect, DeviceConnect&#39;, &#39;RegistryWrite, ServiceConnect, DeviceConnect&#39;, &#39;RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rights")]
        public AccessRights Rights {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.KeyName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "KeyName");
            }




        }
    }
}