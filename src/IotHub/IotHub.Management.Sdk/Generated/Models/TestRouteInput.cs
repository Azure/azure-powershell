// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.IotHub.Models
{
    using System.Linq;

    /// <summary>
    /// Input for testing route
    /// </summary>
    public partial class TestRouteInput
    {
        /// <summary>
        /// Initializes a new instance of the TestRouteInput class.
        /// </summary>
        public TestRouteInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TestRouteInput class.
        /// </summary>

        /// <param name="message">Routing message
        /// </param>

        /// <param name="route">Route properties
        /// </param>

        /// <param name="twin">Routing Twin Reference
        /// </param>
        public TestRouteInput(RouteProperties route, RoutingMessage message = default(RoutingMessage), RoutingTwin twin = default(RoutingTwin))

        {
            this.Message = message;
            this.Route = route;
            this.Twin = twin;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets routing message
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "message")]
        public RoutingMessage Message {get; set; }

        /// <summary>
        /// Gets or sets route properties
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "route")]
        public RouteProperties Route {get; set; }

        /// <summary>
        /// Gets or sets routing Twin Reference
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "twin")]
        public RoutingTwin Twin {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Route == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Route");
            }

            if (this.Route != null)
            {
                this.Route.Validate();
            }

        }
    }
}