// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.IotHub.Models
{
    using System.Linq;

    /// <summary>
    /// The properties related to a storage container endpoint.
    /// </summary>
    public partial class RoutingStorageContainerProperties
    {
        /// <summary>
        /// Initializes a new instance of the RoutingStorageContainerProperties class.
        /// </summary>
        public RoutingStorageContainerProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RoutingStorageContainerProperties class.
        /// </summary>

        /// <param name="id">Id of the storage container endpoint
        /// </param>

        /// <param name="connectionString">The connection string of the storage account.
        /// </param>

        /// <param name="endpointUri">The url of the storage endpoint. It must include the protocol https://
        /// </param>

        /// <param name="authenticationType">Method used to authenticate against the storage endpoint
        /// Possible values include: &#39;keyBased&#39;, &#39;identityBased&#39;</param>

        /// <param name="identity">Managed identity properties of routing storage endpoint.
        /// </param>

        /// <param name="name">The name that identifies this endpoint. The name can only include
        /// alphanumeric characters, periods, underscores, hyphens and has a maximum
        /// length of 64 characters. The following names are reserved:  events,
        /// fileNotifications, $default. Endpoint names must be unique across endpoint
        /// types.
        /// </param>

        /// <param name="subscriptionId">The subscription identifier of the storage account.
        /// </param>

        /// <param name="resourceGroup">The name of the resource group of the storage account.
        /// </param>

        /// <param name="containerName">The name of storage container in the storage account.
        /// </param>

        /// <param name="fileNameFormat">File name format for the blob. Default format is
        /// {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All parameters are
        /// mandatory but can be reordered.
        /// </param>

        /// <param name="batchFrequencyInSeconds">Time interval at which blobs are written to storage. Value should be
        /// between 60 and 720 seconds. Default value is 300 seconds.
        /// </param>

        /// <param name="maxChunkSizeInBytes">Maximum number of bytes for each blob written to storage. Value should be
        /// between 10485760(10MB) and 524288000(500MB). Default value is
        /// 314572800(300MB).
        /// </param>

        /// <param name="encoding">Encoding that is used to serialize messages to blobs. Supported values are
        /// &#39;avro&#39;, &#39;avrodeflate&#39;, and &#39;JSON&#39;. Default value is &#39;avro&#39;.
        /// Possible values include: &#39;Avro&#39;, &#39;AvroDeflate&#39;, &#39;JSON&#39;</param>
        public RoutingStorageContainerProperties(string name, string containerName, string id = default(string), string connectionString = default(string), string endpointUri = default(string), string authenticationType = default(string), ManagedIdentity identity = default(ManagedIdentity), string subscriptionId = default(string), string resourceGroup = default(string), string fileNameFormat = default(string), int? batchFrequencyInSeconds = default(int?), int? maxChunkSizeInBytes = default(int?), string encoding = default(string))

        {
            this.Id = id;
            this.ConnectionString = connectionString;
            this.EndpointUri = endpointUri;
            this.AuthenticationType = authenticationType;
            this.Identity = identity;
            this.Name = name;
            this.SubscriptionId = subscriptionId;
            this.ResourceGroup = resourceGroup;
            this.ContainerName = containerName;
            this.FileNameFormat = fileNameFormat;
            this.BatchFrequencyInSeconds = batchFrequencyInSeconds;
            this.MaxChunkSizeInBytes = maxChunkSizeInBytes;
            this.Encoding = encoding;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets id of the storage container endpoint
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; set; }

        /// <summary>
        /// Gets or sets the connection string of the storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionString")]
        public string ConnectionString {get; set; }

        /// <summary>
        /// Gets or sets the url of the storage endpoint. It must include the protocol
        /// https://
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endpointUri")]
        public string EndpointUri {get; set; }

        /// <summary>
        /// Gets or sets method used to authenticate against the storage endpoint Possible values include: &#39;keyBased&#39;, &#39;identityBased&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authenticationType")]
        public string AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets managed identity properties of routing storage endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public ManagedIdentity Identity {get; set; }

        /// <summary>
        /// Gets or sets the name that identifies this endpoint. The name can only
        /// include alphanumeric characters, periods, underscores, hyphens and has a
        /// maximum length of 64 characters. The following names are reserved:  events,
        /// fileNotifications, $default. Endpoint names must be unique across endpoint
        /// types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets the subscription identifier of the storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subscriptionId")]
        public string SubscriptionId {get; set; }

        /// <summary>
        /// Gets or sets the name of the resource group of the storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceGroup")]
        public string ResourceGroup {get; set; }

        /// <summary>
        /// Gets or sets the name of storage container in the storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "containerName")]
        public string ContainerName {get; set; }

        /// <summary>
        /// Gets or sets file name format for the blob. Default format is
        /// {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All parameters are
        /// mandatory but can be reordered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileNameFormat")]
        public string FileNameFormat {get; set; }

        /// <summary>
        /// Gets or sets time interval at which blobs are written to storage. Value
        /// should be between 60 and 720 seconds. Default value is 300 seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "batchFrequencyInSeconds")]
        public int? BatchFrequencyInSeconds {get; set; }

        /// <summary>
        /// Gets or sets maximum number of bytes for each blob written to storage.
        /// Value should be between 10485760(10MB) and 524288000(500MB). Default value
        /// is 314572800(300MB).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxChunkSizeInBytes")]
        public int? MaxChunkSizeInBytes {get; set; }

        /// <summary>
        /// Gets or sets encoding that is used to serialize messages to blobs.
        /// Supported values are &#39;avro&#39;, &#39;avrodeflate&#39;, and &#39;JSON&#39;. Default value is
        /// &#39;avro&#39;. Possible values include: &#39;Avro&#39;, &#39;AvroDeflate&#39;, &#39;JSON&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encoding")]
        public string Encoding {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (this.ContainerName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ContainerName");
            }





            if (this.Name != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.Name, "^[A-Za-z0-9-._]{1,64}$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "Name", "^[A-Za-z0-9-._]{1,64}$");
                }
            }




            if (this.BatchFrequencyInSeconds != null)
            {
                if (this.BatchFrequencyInSeconds > 720)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "BatchFrequencyInSeconds", 720);
                }
                if (this.BatchFrequencyInSeconds < 60)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "BatchFrequencyInSeconds", 60);
                }
            }
            if (this.MaxChunkSizeInBytes != null)
            {
                if (this.MaxChunkSizeInBytes > 524288000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "MaxChunkSizeInBytes", 524288000);
                }
                if (this.MaxChunkSizeInBytes < 10485760)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MaxChunkSizeInBytes", 10485760);
                }
            }

        }
    }
}