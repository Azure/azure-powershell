// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.IotHub
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for PrivateEndpointConnectionsOperations
    /// </summary>
    public static partial class PrivateEndpointConnectionsOperationsExtensions
    {
        /// <summary>
        /// List private endpoint connection properties
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        public static System.Collections.Generic.IList<PrivateEndpointConnection> List(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string resourceName)
        {
                return ((IPrivateEndpointConnectionsOperations)operations).ListAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List private endpoint connection properties
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<PrivateEndpointConnection>> ListAsync(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get private endpoint connection properties
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection
        /// </param>
        public static PrivateEndpointConnection Get(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string resourceName, string privateEndpointConnectionName)
        {
                return ((IPrivateEndpointConnectionsOperations)operations).GetAsync(resourceGroupName, resourceName, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get private endpoint connection properties
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateEndpointConnection> GetAsync(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string resourceName, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update the status of a private endpoint connection with the specified name
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection
        /// </param>
        public static PrivateEndpointConnection Update(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string resourceName, string privateEndpointConnectionName, PrivateEndpointConnection privateEndpointConnection)
        {
                return ((IPrivateEndpointConnectionsOperations)operations).UpdateAsync(resourceGroupName, resourceName, privateEndpointConnectionName, privateEndpointConnection).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update the status of a private endpoint connection with the specified name
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateEndpointConnection> UpdateAsync(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string resourceName, string privateEndpointConnectionName, PrivateEndpointConnection privateEndpointConnection, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, resourceName, privateEndpointConnectionName, privateEndpointConnection, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete private endpoint connection with the specified name
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection
        /// </param>
        public static PrivateEndpointConnection Delete(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string resourceName, string privateEndpointConnectionName)
        {
                return ((IPrivateEndpointConnectionsOperations)operations).DeleteAsync(resourceGroupName, resourceName, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete private endpoint connection with the specified name
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateEndpointConnection> DeleteAsync(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string resourceName, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update the status of a private endpoint connection with the specified name
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection
        /// </param>
        public static PrivateEndpointConnection BeginUpdate(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string resourceName, string privateEndpointConnectionName, PrivateEndpointConnection privateEndpointConnection)
        {
                return ((IPrivateEndpointConnectionsOperations)operations).BeginUpdateAsync(resourceGroupName, resourceName, privateEndpointConnectionName, privateEndpointConnection).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update the status of a private endpoint connection with the specified name
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateEndpointConnection> BeginUpdateAsync(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string resourceName, string privateEndpointConnectionName, PrivateEndpointConnection privateEndpointConnection, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, privateEndpointConnectionName, privateEndpointConnection, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete private endpoint connection with the specified name
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection
        /// </param>
        public static PrivateEndpointConnection BeginDelete(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string resourceName, string privateEndpointConnectionName)
        {
                return ((IPrivateEndpointConnectionsOperations)operations).BeginDeleteAsync(resourceGroupName, resourceName, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete private endpoint connection with the specified name
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateEndpointConnection> BeginDeleteAsync(this IPrivateEndpointConnectionsOperations operations, string resourceGroupName, string resourceName, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, resourceName, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
