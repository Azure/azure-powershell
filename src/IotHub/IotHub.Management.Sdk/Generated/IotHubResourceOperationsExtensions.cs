// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.IotHub
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for IotHubResourceOperations
    /// </summary>
    public static partial class IotHubResourceOperationsExtensions
    {
        /// <summary>
        /// Get the non-security related metadata of an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        public static IotHubDescription Get(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName)
        {
                return ((IIotHubResourceOperations)operations).GetAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the non-security related metadata of an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IotHubDescription> GetAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update the metadata of an Iot hub. The usual pattern to modify a
        /// property is to retrieve the IoT hub metadata and security metadata, and
        /// then combine them with the modified values in a new body to update the IoT
        /// hub. If certain properties are missing in the JSON, updating IoT Hub may
        /// cause these values to fallback to default, which may lead to unexpected
        /// behavior.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the IoT Hub. Do not specify for creating a brand new IoT Hub.
        /// Required to update an existing IoT Hub.
        /// </param>
        public static IotHubDescription CreateOrUpdate(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, IotHubDescription iotHubDescription, string ifMatch = default(string))
        {
                return ((IIotHubResourceOperations)operations).CreateOrUpdateAsync(resourceGroupName, resourceName, iotHubDescription, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update the metadata of an Iot hub. The usual pattern to modify a
        /// property is to retrieve the IoT hub metadata and security metadata, and
        /// then combine them with the modified values in a new body to update the IoT
        /// hub. If certain properties are missing in the JSON, updating IoT Hub may
        /// cause these values to fallback to default, which may lead to unexpected
        /// behavior.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the IoT Hub. Do not specify for creating a brand new IoT Hub.
        /// Required to update an existing IoT Hub.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IotHubDescription> CreateOrUpdateAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, IotHubDescription iotHubDescription, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, iotHubDescription, ifMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update an existing IoT Hub tags. to update other fields use the
        /// CreateOrUpdate method
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='resourceName'>
        /// Name of iot hub to update.
        /// </param>
        public static IotHubDescription Update(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, TagsResource iotHubTags)
        {
                return ((IIotHubResourceOperations)operations).UpdateAsync(resourceGroupName, resourceName, iotHubTags).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update an existing IoT Hub tags. to update other fields use the
        /// CreateOrUpdate method
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='resourceName'>
        /// Name of iot hub to update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IotHubDescription> UpdateAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, TagsResource iotHubTags, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, resourceName, iotHubTags, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        public static object Delete(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName)
        {
                return ((IIotHubResourceOperations)operations).DeleteAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> DeleteAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all the IoT hubs in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IotHubDescription> ListBySubscription(this IIotHubResourceOperations operations)
        {
                return ((IIotHubResourceOperations)operations).ListBySubscriptionAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all the IoT hubs in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IotHubDescription>> ListBySubscriptionAsync(this IIotHubResourceOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all the IoT hubs in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IotHubDescription> ListByResourceGroup(this IIotHubResourceOperations operations, string resourceGroupName)
        {
                return ((IIotHubResourceOperations)operations).ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all the IoT hubs in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IotHubDescription>> ListByResourceGroupAsync(this IIotHubResourceOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get the statistics from an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        public static RegistryStatistics GetStats(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName)
        {
                return ((IIotHubResourceOperations)operations).GetStatsAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the statistics from an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RegistryStatistics> GetStatsAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetStatsWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get the list of valid SKUs for an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IotHubSkuDescription> GetValidSkus(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName)
        {
                return ((IIotHubResourceOperations)operations).GetValidSkusAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the list of valid SKUs for an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IotHubSkuDescription>> GetValidSkusAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetValidSkusWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a list of the consumer groups in the Event Hub-compatible
        /// device-to-cloud endpoint in an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='eventHubEndpointName'>
        /// The name of the Event Hub-compatible endpoint.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<EventHubConsumerGroupInfo> ListEventHubConsumerGroups(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName)
        {
                return ((IIotHubResourceOperations)operations).ListEventHubConsumerGroupsAsync(resourceGroupName, resourceName, eventHubEndpointName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of the consumer groups in the Event Hub-compatible
        /// device-to-cloud endpoint in an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='eventHubEndpointName'>
        /// The name of the Event Hub-compatible endpoint.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<EventHubConsumerGroupInfo>> ListEventHubConsumerGroupsAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListEventHubConsumerGroupsWithHttpMessagesAsync(resourceGroupName, resourceName, eventHubEndpointName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a consumer group from the Event Hub-compatible device-to-cloud endpoint
        /// for an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='eventHubEndpointName'>
        /// The name of the Event Hub-compatible endpoint in the IoT hub.
        /// </param>
        /// <param name='name'>
        /// The name of the consumer group to retrieve.
        /// </param>
        public static EventHubConsumerGroupInfo GetEventHubConsumerGroup(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name)
        {
                return ((IIotHubResourceOperations)operations).GetEventHubConsumerGroupAsync(resourceGroupName, resourceName, eventHubEndpointName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a consumer group from the Event Hub-compatible device-to-cloud endpoint
        /// for an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='eventHubEndpointName'>
        /// The name of the Event Hub-compatible endpoint in the IoT hub.
        /// </param>
        /// <param name='name'>
        /// The name of the consumer group to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<EventHubConsumerGroupInfo> GetEventHubConsumerGroupAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetEventHubConsumerGroupWithHttpMessagesAsync(resourceGroupName, resourceName, eventHubEndpointName, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='eventHubEndpointName'>
        /// The name of the Event Hub-compatible endpoint in the IoT hub.
        /// </param>
        /// <param name='name'>
        /// The name of the consumer group to add.
        /// </param>
        public static EventHubConsumerGroupInfo CreateEventHubConsumerGroup(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name, EventHubConsumerGroupBodyDescription consumerGroupBody)
        {
                return ((IIotHubResourceOperations)operations).CreateEventHubConsumerGroupAsync(resourceGroupName, resourceName, eventHubEndpointName, name, consumerGroupBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='eventHubEndpointName'>
        /// The name of the Event Hub-compatible endpoint in the IoT hub.
        /// </param>
        /// <param name='name'>
        /// The name of the consumer group to add.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<EventHubConsumerGroupInfo> CreateEventHubConsumerGroupAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name, EventHubConsumerGroupBodyDescription consumerGroupBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateEventHubConsumerGroupWithHttpMessagesAsync(resourceGroupName, resourceName, eventHubEndpointName, name, consumerGroupBody, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a consumer group from an Event Hub-compatible endpoint in an IoT
        /// hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='eventHubEndpointName'>
        /// The name of the Event Hub-compatible endpoint in the IoT hub.
        /// </param>
        /// <param name='name'>
        /// The name of the consumer group to delete.
        /// </param>
        public static void DeleteEventHubConsumerGroup(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name)
        {
                ((IIotHubResourceOperations)operations).DeleteEventHubConsumerGroupAsync(resourceGroupName, resourceName, eventHubEndpointName, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a consumer group from an Event Hub-compatible endpoint in an IoT
        /// hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='eventHubEndpointName'>
        /// The name of the Event Hub-compatible endpoint in the IoT hub.
        /// </param>
        /// <param name='name'>
        /// The name of the consumer group to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteEventHubConsumerGroupAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string eventHubEndpointName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteEventHubConsumerGroupWithHttpMessagesAsync(resourceGroupName, resourceName, eventHubEndpointName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Get a list of all the jobs in an IoT hub. For more information, see:
        /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<JobResponse> ListJobs(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName)
        {
                return ((IIotHubResourceOperations)operations).ListJobsAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of all the jobs in an IoT hub. For more information, see:
        /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<JobResponse>> ListJobsAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListJobsWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get the details of a job from an IoT hub. For more information, see:
        /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        public static JobResponse GetJob(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string jobId)
        {
                return ((IIotHubResourceOperations)operations).GetJobAsync(resourceGroupName, resourceName, jobId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the details of a job from an IoT hub. For more information, see:
        /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<JobResponse> GetJobAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string jobId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetJobWithHttpMessagesAsync(resourceGroupName, resourceName, jobId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get the quota metrics for an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IotHubQuotaMetricInfo> GetQuotaMetrics(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName)
        {
                return ((IIotHubResourceOperations)operations).GetQuotaMetricsAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the quota metrics for an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IotHubQuotaMetricInfo>> GetQuotaMetricsAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetQuotaMetricsWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get the health for routing endpoints.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// 
        /// </param>
        /// <param name='iotHubName'>
        /// 
        /// </param>
        public static Microsoft.Rest.Azure.IPage<EndpointHealthData> GetEndpointHealth(this IIotHubResourceOperations operations, string resourceGroupName, string iotHubName)
        {
                return ((IIotHubResourceOperations)operations).GetEndpointHealthAsync(resourceGroupName, iotHubName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the health for routing endpoints.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// 
        /// </param>
        /// <param name='iotHubName'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<EndpointHealthData>> GetEndpointHealthAsync(this IIotHubResourceOperations operations, string resourceGroupName, string iotHubName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetEndpointHealthWithHttpMessagesAsync(resourceGroupName, iotHubName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Check if an IoT hub name is available.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static IotHubNameAvailabilityInfo CheckNameAvailability(this IIotHubResourceOperations operations, OperationInputs operationInputs)
        {
                return ((IIotHubResourceOperations)operations).CheckNameAvailabilityAsync(operationInputs).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Check if an IoT hub name is available.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IotHubNameAvailabilityInfo> CheckNameAvailabilityAsync(this IIotHubResourceOperations operations, OperationInputs operationInputs, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(operationInputs, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Test all routes configured in this Iot Hub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='iotHubName'>
        /// IotHub to be tested
        /// </param>
        /// <param name='resourceGroupName'>
        /// resource group which Iot Hub belongs to
        /// </param>
        public static TestAllRoutesResult TestAllRoutes(this IIotHubResourceOperations operations, string iotHubName, string resourceGroupName, TestAllRoutesInput input)
        {
                return ((IIotHubResourceOperations)operations).TestAllRoutesAsync(iotHubName, resourceGroupName, input).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Test all routes configured in this Iot Hub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='iotHubName'>
        /// IotHub to be tested
        /// </param>
        /// <param name='resourceGroupName'>
        /// resource group which Iot Hub belongs to
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TestAllRoutesResult> TestAllRoutesAsync(this IIotHubResourceOperations operations, string iotHubName, string resourceGroupName, TestAllRoutesInput input, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.TestAllRoutesWithHttpMessagesAsync(iotHubName, resourceGroupName, input, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Test the new route for this Iot Hub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='iotHubName'>
        /// IotHub to be tested
        /// </param>
        /// <param name='resourceGroupName'>
        /// resource group which Iot Hub belongs to
        /// </param>
        public static TestRouteResult TestRoute(this IIotHubResourceOperations operations, string iotHubName, string resourceGroupName, TestRouteInput input)
        {
                return ((IIotHubResourceOperations)operations).TestRouteAsync(iotHubName, resourceGroupName, input).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Test the new route for this Iot Hub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='iotHubName'>
        /// IotHub to be tested
        /// </param>
        /// <param name='resourceGroupName'>
        /// resource group which Iot Hub belongs to
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TestRouteResult> TestRouteAsync(this IIotHubResourceOperations operations, string iotHubName, string resourceGroupName, TestRouteInput input, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.TestRouteWithHttpMessagesAsync(iotHubName, resourceGroupName, input, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get the security metadata for an IoT hub. For more information, see:
        /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SharedAccessSignatureAuthorizationRule> ListKeys(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName)
        {
                return ((IIotHubResourceOperations)operations).ListKeysAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the security metadata for an IoT hub. For more information, see:
        /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SharedAccessSignatureAuthorizationRule>> ListKeysAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListKeysWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a shared access policy by name from an IoT hub. For more information,
        /// see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='keyName'>
        /// The name of the shared access policy.
        /// </param>
        public static SharedAccessSignatureAuthorizationRule GetKeysForKeyName(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string keyName)
        {
                return ((IIotHubResourceOperations)operations).GetKeysForKeyNameAsync(resourceGroupName, resourceName, keyName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a shared access policy by name from an IoT hub. For more information,
        /// see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='keyName'>
        /// The name of the shared access policy.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SharedAccessSignatureAuthorizationRule> GetKeysForKeyNameAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, string keyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetKeysForKeyNameWithHttpMessagesAsync(resourceGroupName, resourceName, keyName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Exports all the device identities in the IoT hub identity registry to an
        /// Azure Storage blob container. For more information, see:
        /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        public static JobResponse ExportDevices(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, ExportDevicesRequest exportDevicesParameters)
        {
                return ((IIotHubResourceOperations)operations).ExportDevicesAsync(resourceGroupName, resourceName, exportDevicesParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Exports all the device identities in the IoT hub identity registry to an
        /// Azure Storage blob container. For more information, see:
        /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<JobResponse> ExportDevicesAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, ExportDevicesRequest exportDevicesParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ExportDevicesWithHttpMessagesAsync(resourceGroupName, resourceName, exportDevicesParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Import, update, or delete device identities in the IoT hub identity
        /// registry from a blob. For more information, see:
        /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        public static JobResponse ImportDevices(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, ImportDevicesRequest importDevicesParameters)
        {
                return ((IIotHubResourceOperations)operations).ImportDevicesAsync(resourceGroupName, resourceName, importDevicesParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Import, update, or delete device identities in the IoT hub identity
        /// registry from a blob. For more information, see:
        /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<JobResponse> ImportDevicesAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, ImportDevicesRequest importDevicesParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ImportDevicesWithHttpMessagesAsync(resourceGroupName, resourceName, importDevicesParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update the metadata of an Iot hub. The usual pattern to modify a
        /// property is to retrieve the IoT hub metadata and security metadata, and
        /// then combine them with the modified values in a new body to update the IoT
        /// hub. If certain properties are missing in the JSON, updating IoT Hub may
        /// cause these values to fallback to default, which may lead to unexpected
        /// behavior.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the IoT Hub. Do not specify for creating a brand new IoT Hub.
        /// Required to update an existing IoT Hub.
        /// </param>
        public static IotHubDescription BeginCreateOrUpdate(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, IotHubDescription iotHubDescription, string ifMatch = default(string))
        {
                return ((IIotHubResourceOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, resourceName, iotHubDescription, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update the metadata of an Iot hub. The usual pattern to modify a
        /// property is to retrieve the IoT hub metadata and security metadata, and
        /// then combine them with the modified values in a new body to update the IoT
        /// hub. If certain properties are missing in the JSON, updating IoT Hub may
        /// cause these values to fallback to default, which may lead to unexpected
        /// behavior.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='ifMatch'>
        /// ETag of the IoT Hub. Do not specify for creating a brand new IoT Hub.
        /// Required to update an existing IoT Hub.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IotHubDescription> BeginCreateOrUpdateAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, IotHubDescription iotHubDescription, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, iotHubDescription, ifMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update an existing IoT Hub tags. to update other fields use the
        /// CreateOrUpdate method
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='resourceName'>
        /// Name of iot hub to update.
        /// </param>
        public static IotHubDescription BeginUpdate(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, TagsResource iotHubTags)
        {
                return ((IIotHubResourceOperations)operations).BeginUpdateAsync(resourceGroupName, resourceName, iotHubTags).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update an existing IoT Hub tags. to update other fields use the
        /// CreateOrUpdate method
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Resource group identifier.
        /// </param>
        /// <param name='resourceName'>
        /// Name of iot hub to update.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IotHubDescription> BeginUpdateAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, TagsResource iotHubTags, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, iotHubTags, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        public static object BeginDelete(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName)
        {
                return ((IIotHubResourceOperations)operations).BeginDeleteAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the IoT hub.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the IoT hub.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> BeginDeleteAsync(this IIotHubResourceOperations operations, string resourceGroupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all the IoT hubs in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IotHubDescription> ListBySubscriptionNext(this IIotHubResourceOperations operations, string nextPageLink)
        {
                return ((IIotHubResourceOperations)operations).ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all the IoT hubs in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IotHubDescription>> ListBySubscriptionNextAsync(this IIotHubResourceOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all the IoT hubs in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IotHubDescription> ListByResourceGroupNext(this IIotHubResourceOperations operations, string nextPageLink)
        {
                return ((IIotHubResourceOperations)operations).ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all the IoT hubs in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IotHubDescription>> ListByResourceGroupNextAsync(this IIotHubResourceOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get the list of valid SKUs for an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IotHubSkuDescription> GetValidSkusNext(this IIotHubResourceOperations operations, string nextPageLink)
        {
                return ((IIotHubResourceOperations)operations).GetValidSkusNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the list of valid SKUs for an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IotHubSkuDescription>> GetValidSkusNextAsync(this IIotHubResourceOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetValidSkusNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a list of the consumer groups in the Event Hub-compatible
        /// device-to-cloud endpoint in an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<EventHubConsumerGroupInfo> ListEventHubConsumerGroupsNext(this IIotHubResourceOperations operations, string nextPageLink)
        {
                return ((IIotHubResourceOperations)operations).ListEventHubConsumerGroupsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of the consumer groups in the Event Hub-compatible
        /// device-to-cloud endpoint in an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<EventHubConsumerGroupInfo>> ListEventHubConsumerGroupsNextAsync(this IIotHubResourceOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListEventHubConsumerGroupsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a list of all the jobs in an IoT hub. For more information, see:
        /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<JobResponse> ListJobsNext(this IIotHubResourceOperations operations, string nextPageLink)
        {
                return ((IIotHubResourceOperations)operations).ListJobsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a list of all the jobs in an IoT hub. For more information, see:
        /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<JobResponse>> ListJobsNextAsync(this IIotHubResourceOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListJobsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get the quota metrics for an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IotHubQuotaMetricInfo> GetQuotaMetricsNext(this IIotHubResourceOperations operations, string nextPageLink)
        {
                return ((IIotHubResourceOperations)operations).GetQuotaMetricsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the quota metrics for an IoT hub.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IotHubQuotaMetricInfo>> GetQuotaMetricsNextAsync(this IIotHubResourceOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetQuotaMetricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get the health for routing endpoints.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<EndpointHealthData> GetEndpointHealthNext(this IIotHubResourceOperations operations, string nextPageLink)
        {
                return ((IIotHubResourceOperations)operations).GetEndpointHealthNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the health for routing endpoints.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<EndpointHealthData>> GetEndpointHealthNextAsync(this IIotHubResourceOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetEndpointHealthNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get the security metadata for an IoT hub. For more information, see:
        /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SharedAccessSignatureAuthorizationRule> ListKeysNext(this IIotHubResourceOperations operations, string nextPageLink)
        {
                return ((IIotHubResourceOperations)operations).ListKeysNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the security metadata for an IoT hub. For more information, see:
        /// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SharedAccessSignatureAuthorizationRule>> ListKeysNextAsync(this IIotHubResourceOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListKeysNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
