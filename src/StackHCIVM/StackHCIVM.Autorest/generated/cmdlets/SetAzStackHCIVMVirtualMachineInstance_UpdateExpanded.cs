// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Extensions;
    using Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.PowerShell;
    using Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Cmdlets;
    using System;

    /// <summary>
    /// The operation to create or update a virtual machine instance. Please note some properties can be set only during virtual
    /// machine instance creation.
    /// </summary>
    /// <remarks>
    /// [OpenAPI] CreateOrUpdate=>PUT:"/{resourceUri}/providers/Microsoft.AzureStackHCI/virtualMachineInstances/default"
    /// </remarks>
    [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.InternalExport]
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.Set, @"AzStackHCIVMVirtualMachineInstance_UpdateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IVirtualMachineInstance))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Description(@"The operation to create or update a virtual machine instance. Please note some properties can be set only during virtual machine instance creation.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Generated]
    [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.HttpPath(Path = "/{resourceUri}/providers/Microsoft.AzureStackHCI/virtualMachineInstances/default", ApiVersion = "2024-01-01")]
    public partial class SetAzStackHCIVMVirtualMachineInstance_UpdateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener,
        Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IContext
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>A dictionary to carry over additional data for pipeline.</summary>
        private global::System.Collections.Generic.Dictionary<global::System.String,global::System.Object> _extensibleParameters = new System.Collections.Generic.Dictionary<string, object>();

        /// <summary>A buffer to record first returned object in response.</summary>
        private object _firstResponse = null;

        /// <summary>
        /// A flag to tell whether it is the first returned object in a call. Zero means no response yet. One means 1 returned object.
        /// Two means multiple returned objects in response.
        /// </summary>
        private int _responseSize = 0;

        /// <summary>The virtual machine instance resource definition.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IVirtualMachineInstance _virtualMachineInstanceBody = new Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.VirtualMachineInstance();

        /// <summary>when specified, runs this cmdlet as a PowerShell job</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command as a job")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter AsJob { get; set; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>Accessor for cancellationTokenSource.</summary>
        public global::System.Threading.CancellationTokenSource CancellationTokenSource { get => _cancellationTokenSource ; set { _cancellationTokenSource = value; } }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.StackHcivm Client => Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Module.Instance.ClientAPI;

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>
        /// Defines the amount of extra memory that should be reserved for a virtual machine instance at runtime, as a percentage
        /// of the total memory that the virtual machine instance is thought to need. This only applies to virtual systems with dynamic
        /// memory enabled. This property can be in the range of 5 to 2000.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Defines the amount of extra memory that should be reserved for a virtual machine instance at runtime, as a percentage of the total memory that the virtual machine instance is thought to need. This only applies to virtual systems with dynamic memory enabled. This property can be in the range of 5 to 2000.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Defines the amount of extra memory that should be reserved for a virtual machine instance at runtime, as a percentage of the total memory that the virtual machine instance is thought to need. This only applies to virtual systems with dynamic memory enabled. This property can be in the range of 5 to 2000.",
        SerializedName = @"targetMemoryBuffer",
        PossibleTypes = new [] { typeof(int) })]
        public int DynamicMemoryConfigTargetMemoryBuffer { get => _virtualMachineInstanceBody.DynamicMemoryConfigTargetMemoryBuffer ?? default(int); set => _virtualMachineInstanceBody.DynamicMemoryConfigTargetMemoryBuffer = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"maximumMemoryMB",
        PossibleTypes = new [] { typeof(long) })]
        public long DynamicMemoryMaximumMemoryInMb { get => _virtualMachineInstanceBody.DynamicMemoryConfigMaximumMemoryMb ?? default(long); set => _virtualMachineInstanceBody.DynamicMemoryConfigMaximumMemoryMb = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"minimumMemoryMB",
        PossibleTypes = new [] { typeof(long) })]
        public long DynamicMemoryMinimumMemoryInMb { get => _virtualMachineInstanceBody.DynamicMemoryConfigMinimumMemoryMb ?? default(long); set => _virtualMachineInstanceBody.DynamicMemoryConfigMinimumMemoryMb = value; }

        /// <summary>The name of the extended location.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The name of the extended location.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the extended location.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        public string ExtendedLocationName { get => _virtualMachineInstanceBody.ExtendedLocationName ?? null; set => _virtualMachineInstanceBody.ExtendedLocationName = value; }

        /// <summary>The type of the extended location.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The type of the extended location.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of the extended location.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PSArgumentCompleterAttribute("CustomLocation")]
        public string ExtendedLocationType { get => _virtualMachineInstanceBody.ExtendedLocationType ?? null; set => _virtualMachineInstanceBody.ExtendedLocationType = value; }

        /// <summary>Accessor for extensibleParameters.</summary>
        public global::System.Collections.Generic.IDictionary<global::System.String,global::System.Object> ExtensibleParameters { get => _extensibleParameters ; }

        /// <summary>RAM in MB for the virtual machine instance</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "RAM in MB for the virtual machine instance")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"RAM in MB for the virtual machine instance",
        SerializedName = @"memoryMB",
        PossibleTypes = new [] { typeof(long) })]
        public long HardwareProfileMemoryMb { get => _virtualMachineInstanceBody.HardwareProfileMemoryMb ?? default(long); set => _virtualMachineInstanceBody.HardwareProfileMemoryMb = value; }

        /// <summary>number of processors for the virtual machine instance</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "number of processors for the virtual machine instance")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"number of processors for the virtual machine instance",
        SerializedName = @"processors",
        PossibleTypes = new [] { typeof(int) })]
        public int HardwareProfileProcessor { get => _virtualMachineInstanceBody.HardwareProfileProcessor ?? default(int); set => _virtualMachineInstanceBody.HardwareProfileProcessor = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"vmSize",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PSArgumentCompleterAttribute("Default", "Standard_A2_v2", "Standard_A4_v2", "Standard_D2s_v3", "Standard_D4s_v3", "Standard_D8s_v3", "Standard_D16s_v3", "Standard_D32s_v3", "Standard_DS2_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_DS5_v2", "Standard_DS13_v2", "Standard_K8S_v1", "Standard_K8S2_v1", "Standard_K8S3_v1", "Standard_K8S4_v1", "Standard_NK6", "Standard_NK12", "Standard_NV6", "Standard_NV12", "Standard_K8S5_v1", "Custom")]
        public string HardwareProfileVMSize { get => _virtualMachineInstanceBody.HardwareProfileVMSize ?? null; set => _virtualMachineInstanceBody.HardwareProfileVMSize = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>The HTTP proxy server endpoint to use.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The HTTP proxy server endpoint to use.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The HTTP proxy server endpoint to use.",
        SerializedName = @"httpProxy",
        PossibleTypes = new [] { typeof(string) })]
        public string HttpProxyConfigHttpProxy { get => _virtualMachineInstanceBody.HttpProxyConfigHttpProxy ?? null; set => _virtualMachineInstanceBody.HttpProxyConfigHttpProxy = value; }

        /// <summary>The HTTPS proxy server endpoint to use.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The HTTPS proxy server endpoint to use.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The HTTPS proxy server endpoint to use.",
        SerializedName = @"httpsProxy",
        PossibleTypes = new [] { typeof(string) })]
        public string HttpProxyConfigHttpsProxy { get => _virtualMachineInstanceBody.HttpProxyConfigHttpsProxy ?? null; set => _virtualMachineInstanceBody.HttpProxyConfigHttpsProxy = value; }

        /// <summary>The endpoints that should not go through proxy.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The endpoints that should not go through proxy.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The endpoints that should not go through proxy.",
        SerializedName = @"noProxy",
        PossibleTypes = new [] { typeof(string) })]
        public string[] HttpProxyConfigNoProxy { get => _virtualMachineInstanceBody.HttpProxyConfigNoProxy?.ToArray() ?? null /* fixedArrayOf */; set => _virtualMachineInstanceBody.HttpProxyConfigNoProxy = (value != null ? new System.Collections.Generic.List<string>(value) : null); }

        /// <summary>Alternative CA cert to use for connecting to proxy servers.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Alternative CA cert to use for connecting to proxy servers.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Alternative CA cert to use for connecting to proxy servers.",
        SerializedName = @"trustedCa",
        PossibleTypes = new [] { typeof(string) })]
        public string HttpProxyConfigTrustedCa { get => _virtualMachineInstanceBody.HttpProxyConfigTrustedCa ?? null; set => _virtualMachineInstanceBody.HttpProxyConfigTrustedCa = value; }

        /// <summary>The identity type.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The identity type.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity type.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PSArgumentCompleterAttribute("SystemAssigned")]
        public string IdentityType { get => _virtualMachineInstanceBody.IdentityType ?? null; set => _virtualMachineInstanceBody.IdentityType = value; }

        /// <summary>Resource ID of the image</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource ID of the image")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource ID of the image",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        public string ImageReferenceId { get => _virtualMachineInstanceBody.ImageReferenceId ?? null; set => _virtualMachineInstanceBody.ImageReferenceId = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// DisablePasswordAuthentication - whether password authentication should be disabled
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "DisablePasswordAuthentication - whether password authentication should be disabled")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"DisablePasswordAuthentication - whether password authentication should be disabled",
        SerializedName = @"disablePasswordAuthentication",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter LinuxConfigurationDisablePasswordAuthentication { get => _virtualMachineInstanceBody.LinuxConfigurationDisablePasswordAuthentication ?? default(global::System.Management.Automation.SwitchParameter); set => _virtualMachineInstanceBody.LinuxConfigurationDisablePasswordAuthentication = value; }

        /// <summary>
        /// Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine instance creation
        /// process.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine instance creation process.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine instance creation process.",
        SerializedName = @"provisionVMAgent",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter LinuxConfigurationProvisionVMAgent { get => _virtualMachineInstanceBody.LinuxConfigurationProvisionVMAgent ?? default(global::System.Management.Automation.SwitchParameter); set => _virtualMachineInstanceBody.LinuxConfigurationProvisionVMAgent = value; }

        /// <summary>
        /// Used to indicate whether the VM Config Agent should be installed during the virtual machine creation process.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Used to indicate whether the VM Config Agent should be installed during the virtual machine creation process.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Used to indicate whether the VM Config Agent should be installed during the virtual machine creation process.",
        SerializedName = @"provisionVMConfigAgent",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter LinuxConfigurationProvisionVMConfigAgent { get => _virtualMachineInstanceBody.LinuxConfigurationProvisionVMConfigAgent ?? default(global::System.Management.Automation.SwitchParameter); set => _virtualMachineInstanceBody.LinuxConfigurationProvisionVMConfigAgent = value; }

        /// <summary>The list of SSH public keys used to authenticate with linux based VMs.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of SSH public keys used to authenticate with linux based VMs.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of SSH public keys used to authenticate with linux based VMs.",
        SerializedName = @"publicKeys",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.ISshPublicKey) })]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.ISshPublicKey[] LinuxConfigurationSshPublicKey { get => _virtualMachineInstanceBody.LinuxConfigurationSshPublicKey?.ToArray() ?? null /* fixedArrayOf */; set => _virtualMachineInstanceBody.LinuxConfigurationSshPublicKey = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.ISshPublicKey>(value) : null); }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>
        /// NetworkInterfaces - list of network interfaces to be attached to the virtual machine instance
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "NetworkInterfaces - list of network interfaces to be attached to the virtual machine instance")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"NetworkInterfaces - list of network interfaces to be attached to the virtual machine instance",
        SerializedName = @"networkInterfaces",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IVirtualMachineInstancePropertiesNetworkProfileNetworkInterfacesItem) })]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IVirtualMachineInstancePropertiesNetworkProfileNetworkInterfacesItem[] NetworkProfileNetworkInterface { get => _virtualMachineInstanceBody.NetworkProfileNetworkInterface?.ToArray() ?? null /* fixedArrayOf */; set => _virtualMachineInstanceBody.NetworkProfileNetworkInterface = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IVirtualMachineInstancePropertiesNetworkProfileNetworkInterfacesItem>(value) : null); }

        /// <summary>
        /// when specified, will make the remote call, and return an AsyncOperationResponse, letting the remote operation continue
        /// asynchronously.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command asynchronously")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter NoWait { get; set; }

        /// <summary>Resource ID of the OS disk</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource ID of the OS disk")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource ID of the OS disk",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        public string OSDiskId { get => _virtualMachineInstanceBody.OSDiskId ?? null; set => _virtualMachineInstanceBody.OSDiskId = value; }

        /// <summary>
        /// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or
        /// a specialized VHD. Possible values are: **Windows,** **Linux.**
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**",
        SerializedName = @"osType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PSArgumentCompleterAttribute("Windows", "Linux")]
        public string OSDiskOstype { get => _virtualMachineInstanceBody.OSDiskOstype ?? null; set => _virtualMachineInstanceBody.OSDiskOstype = value; }

        /// <summary>AdminPassword - admin password</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "AdminPassword - admin password")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AdminPassword - admin password",
        SerializedName = @"adminPassword",
        PossibleTypes = new [] { typeof(string) })]
        public string OSProfileAdminPassword { get => _virtualMachineInstanceBody.OSProfileAdminPassword ?? null; set => _virtualMachineInstanceBody.OSProfileAdminPassword = value; }

        /// <summary>AdminUsername - admin username</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "AdminUsername - admin username")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AdminUsername - admin username",
        SerializedName = @"adminUsername",
        PossibleTypes = new [] { typeof(string) })]
        public string OSProfileAdminUsername { get => _virtualMachineInstanceBody.OSProfileAdminUsername ?? null; set => _virtualMachineInstanceBody.OSProfileAdminUsername = value; }

        /// <summary>ComputerName - name of the compute</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "ComputerName - name of the compute")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ComputerName - name of the compute",
        SerializedName = @"computerName",
        PossibleTypes = new [] { typeof(string) })]
        public string OSProfileComputerName { get => _virtualMachineInstanceBody.OSProfileComputerName ?? null; set => _virtualMachineInstanceBody.OSProfileComputerName = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Unique identifier defined by ARC to identify the guest of the VM.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Unique identifier defined by ARC to identify the guest of the VM.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Unique identifier defined by ARC to identify the guest of the VM.",
        SerializedName = @"resourceUid",
        PossibleTypes = new [] { typeof(string) })]
        public string ResourceUid { get => _virtualMachineInstanceBody.ResourceUid ?? null; set => _virtualMachineInstanceBody.ResourceUid = value; }

        /// <summary>Backing field for <see cref="ResourceUri" /> property.</summary>
        private string _resourceUri;

        /// <summary>
        /// The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource to be extended.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource to be extended.")]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource to be extended.",
        SerializedName = @"resourceUri",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Path)]
        public string ResourceUri { get => this._resourceUri; set => this._resourceUri = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"enableTPM",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter SecurityProfileEnableTpm { get => _virtualMachineInstanceBody.SecurityProfileEnableTpm ?? default(global::System.Management.Automation.SwitchParameter); set => _virtualMachineInstanceBody.SecurityProfileEnableTpm = value; }

        /// <summary>
        /// Specifies the SecurityType of the virtual machine. EnableTPM and SecureBootEnabled must be set to true for SecurityType
        /// to function.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Specifies the SecurityType of the virtual machine. EnableTPM and SecureBootEnabled must be set to true for SecurityType to function.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the SecurityType of the virtual machine. EnableTPM and SecureBootEnabled must be set to true for SecurityType to function.",
        SerializedName = @"securityType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PSArgumentCompleterAttribute("TrustedLaunch", "ConfidentialVM")]
        public string SecurityProfileSecurityType { get => _virtualMachineInstanceBody.SecurityProfileSecurityType ?? null; set => _virtualMachineInstanceBody.SecurityProfileSecurityType = value; }

        /// <summary>adds data disks to the virtual machine instance</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "adds data disks to the virtual machine instance")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"adds data disks to the virtual machine instance",
        SerializedName = @"dataDisks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IVirtualMachineInstancePropertiesStorageProfileDataDisksItem) })]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IVirtualMachineInstancePropertiesStorageProfileDataDisksItem[] StorageProfileDataDisk { get => _virtualMachineInstanceBody.StorageProfileDataDisk?.ToArray() ?? null /* fixedArrayOf */; set => _virtualMachineInstanceBody.StorageProfileDataDisk = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IVirtualMachineInstancePropertiesStorageProfileDataDisksItem>(value) : null); }

        /// <summary>Id of the storage container that hosts the VM configuration file</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Id of the storage container that hosts the VM configuration file")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Id of the storage container that hosts the VM configuration file",
        SerializedName = @"vmConfigStoragePathId",
        PossibleTypes = new [] { typeof(string) })]
        public string StorageProfileVMConfigStoragePathId { get => _virtualMachineInstanceBody.StorageProfileVMConfigStoragePathId ?? null; set => _virtualMachineInstanceBody.StorageProfileVMConfigStoragePathId = value; }

        /// <summary>
        /// Specifies whether secure boot should be enabled on the virtual machine instance.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Specifies whether secure boot should be enabled on the virtual machine instance.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether secure boot should be enabled on the virtual machine instance.",
        SerializedName = @"secureBootEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter UefiSettingSecureBootEnabled { get => _virtualMachineInstanceBody.UefiSettingSecureBootEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _virtualMachineInstanceBody.UefiSettingSecureBootEnabled = value; }

        /// <summary>Whether to EnableAutomaticUpdates on the machine</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether to EnableAutomaticUpdates on the machine")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to EnableAutomaticUpdates on the machine",
        SerializedName = @"enableAutomaticUpdates",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter WindowConfigurationEnableAutomaticUpdate { get => _virtualMachineInstanceBody.WindowConfigurationEnableAutomaticUpdate ?? default(global::System.Management.Automation.SwitchParameter); set => _virtualMachineInstanceBody.WindowConfigurationEnableAutomaticUpdate = value; }

        /// <summary>
        /// Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine instance creation
        /// process.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine instance creation process.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine instance creation process.",
        SerializedName = @"provisionVMAgent",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter WindowConfigurationProvisionVMAgent { get => _virtualMachineInstanceBody.WindowConfigurationProvisionVMAgent ?? default(global::System.Management.Automation.SwitchParameter); set => _virtualMachineInstanceBody.WindowConfigurationProvisionVMAgent = value; }

        /// <summary>
        /// Used to indicate whether the VM Config Agent should be installed during the virtual machine creation process.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Used to indicate whether the VM Config Agent should be installed during the virtual machine creation process.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Used to indicate whether the VM Config Agent should be installed during the virtual machine creation process.",
        SerializedName = @"provisionVMConfigAgent",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter WindowConfigurationProvisionVMConfigAgent { get => _virtualMachineInstanceBody.WindowConfigurationProvisionVMConfigAgent ?? default(global::System.Management.Automation.SwitchParameter); set => _virtualMachineInstanceBody.WindowConfigurationProvisionVMConfigAgent = value; }

        /// <summary>TimeZone for the virtual machine instance</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "TimeZone for the virtual machine instance")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"TimeZone for the virtual machine instance",
        SerializedName = @"timeZone",
        PossibleTypes = new [] { typeof(string) })]
        public string WindowConfigurationTimeZone { get => _virtualMachineInstanceBody.WindowConfigurationTimeZone ?? null; set => _virtualMachineInstanceBody.WindowConfigurationTimeZone = value; }

        /// <summary>The list of SSH public keys used to authenticate with linux based VMs.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of SSH public keys used to authenticate with linux based VMs.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of SSH public keys used to authenticate with linux based VMs.",
        SerializedName = @"publicKeys",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.ISshPublicKey) })]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.ISshPublicKey[] WindowsConfigurationSshPublicKey { get => _virtualMachineInstanceBody.WindowsConfigurationSshPublicKey?.ToArray() ?? null /* fixedArrayOf */; set => _virtualMachineInstanceBody.WindowsConfigurationSshPublicKey = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.ISshPublicKey>(value) : null); }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IErrorResponse</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IVirtualMachineInstance">Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IVirtualMachineInstance</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IVirtualMachineInstance> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Creates a duplicate instance of this cmdlet (via JSON serialization).</summary>
        /// <returns>a duplicate instance of SetAzStackHCIVMVirtualMachineInstance_UpdateExpanded</returns>
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Cmdlets.SetAzStackHCIVMVirtualMachineInstance_UpdateExpanded Clone()
        {
            var clone = new SetAzStackHCIVMVirtualMachineInstance_UpdateExpanded();
            clone.__correlationId = this.__correlationId;
            clone.__processRecordId = this.__processRecordId;
            clone.DefaultProfile = this.DefaultProfile;
            clone.InvocationInformation = this.InvocationInformation;
            clone.Proxy = this.Proxy;
            clone.Pipeline = this.Pipeline;
            clone.AsJob = this.AsJob;
            clone.Break = this.Break;
            clone.ProxyCredential = this.ProxyCredential;
            clone.ProxyUseDefaultCredentials = this.ProxyUseDefaultCredentials;
            clone.HttpPipelinePrepend = this.HttpPipelinePrepend;
            clone.HttpPipelineAppend = this.HttpPipelineAppend;
            clone._virtualMachineInstanceBody = this._virtualMachineInstanceBody;
            clone.ResourceUri = this.ResourceUri;
            return clone;
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            if (1 ==_responseSize)
            {
                // Flush buffer
                WriteObject(_firstResponse);
            }
            var telemetryInfo = Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Module.Instance.GetTelemetryInfo?.Invoke(__correlationId);
            if (telemetryInfo != null)
            {
                telemetryInfo.TryGetValue("ShowSecretsWarning", out var showSecretsWarning);
                telemetryInfo.TryGetValue("SanitizedProperties", out var sanitizedProperties);
                telemetryInfo.TryGetValue("InvocationName", out var invocationName);
                if (showSecretsWarning == "true")
                {
                    if (string.IsNullOrEmpty(sanitizedProperties))
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing secrets. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                    else
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing the following secrets: {sanitizedProperties}. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                }
            }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Events.Information:
                    {
                        // When an operation supports asjob, Information messages must go thru verbose.
                        WriteVerbose($"INFORMATION: {(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Events.Progress:
                    {
                        var data = messageData();
                        int progress = (int)data.Value;
                        string activityMessage, statusDescription;
                        global::System.Management.Automation.ProgressRecordType recordType;
                        if (progress < 100)
                        {
                            activityMessage = "In progress";
                            statusDescription = "Checking operation status";
                            recordType = System.Management.Automation.ProgressRecordType.Processing;
                        }
                        else
                        {
                            activityMessage = "Completed";
                            statusDescription = "Completed";
                            recordType = System.Management.Automation.ProgressRecordType.Completed;
                        }
                        WriteProgress(new global::System.Management.Automation.ProgressRecord(1, activityMessage, statusDescription)
                        {
                            PercentComplete = progress,
                        RecordType = recordType
                        });
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Events.DelayBeforePolling:
                    {
                        var data = messageData();
                        if (true == MyInvocation?.BoundParameters?.ContainsKey("NoWait"))
                        {
                            if (data.ResponseMessage is System.Net.Http.HttpResponseMessage response)
                            {
                                var asyncOperation = response.GetFirstHeader(@"Azure-AsyncOperation");
                                var location = response.GetFirstHeader(@"Location");
                                var uri = global::System.String.IsNullOrEmpty(asyncOperation) ? global::System.String.IsNullOrEmpty(location) ? response.RequestMessage.RequestUri.AbsoluteUri : location : asyncOperation;
                                WriteObject(new Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.PowerShell.AsyncOperationResponse { Target = uri });
                                // do nothing more.
                                data.Cancel();
                                return;
                            }
                        }
                        else
                        {
                            if (data.ResponseMessage is System.Net.Http.HttpResponseMessage response)
                            {
                                int delay = (int)(response.Headers.RetryAfter?.Delta?.TotalSeconds ?? 30);
                                WriteDebug($"Delaying {delay} seconds before polling.");
                                for (var now = 0; now < delay; ++now)
                                {
                                    WriteProgress(new global::System.Management.Automation.ProgressRecord(1, "In progress", "Checking operation status")
                                    {
                                        PercentComplete = now * 100 / delay
                                    });
                                    await global::System.Threading.Tasks.Task.Delay(1000, token);
                                }
                            }
                        }
                        break;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Module.Instance.Signal(id, token, messageData, (i, t, m) => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Signal(i, t, () => Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.EventDataConverter.ConvertFrom(m()) as Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.EventData), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'VirtualMachineInstancesCreateOrUpdate' operation"))
                {
                    if (true == MyInvocation?.BoundParameters?.ContainsKey("AsJob"))
                    {
                        var instance = this.Clone();
                        var job = new Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.PowerShell.AsyncJob(instance, this.MyInvocation.Line, this.MyInvocation.MyCommand.Name, this._cancellationTokenSource.Token, this._cancellationTokenSource.Cancel);
                        JobRepository.Add(job);
                        var task = instance.ProcessRecordAsync();
                        job.Monitor(task);
                        WriteObject(job);
                    }
                    else
                    {
                        using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Token) )
                        {
                            asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Token);
                        }
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName, this.ExtensibleParameters);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.VirtualMachineInstancesCreateOrUpdate(ResourceUri, _virtualMachineInstanceBody, onOk, onDefault, this, Pipeline, Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.SerializationMode.IncludeCreate);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { ResourceUri=ResourceUri})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SetAzStackHCIVMVirtualMachineInstance_UpdateExpanded" /> cmdlet class.
        /// </summary>
        public SetAzStackHCIVMVirtualMachineInstance_UpdateExpanded()
        {

        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <param name="sendToPipeline"></param>
        new protected void WriteObject(object sendToPipeline)
        {
            Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline);
        }

        /// <param name="sendToPipeline"></param>
        /// <param name="enumerateCollection"></param>
        new protected void WriteObject(object sendToPipeline, bool enumerateCollection)
        {
            Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline, enumerateCollection);
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IErrorResponse</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IVirtualMachineInstance">Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IVirtualMachineInstance</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IVirtualMachineInstance> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IVirtualMachineInstance
                var result = (await response);
                if (null != result)
                {
                    if (0 == _responseSize)
                    {
                        _firstResponse = result;
                        _responseSize = 1;
                    }
                    else
                    {
                        if (1 ==_responseSize)
                        {
                            // Flush buffer
                            WriteObject(_firstResponse.AddMultipleTypeNameIntoPSObject());
                        }
                        WriteObject(result.AddMultipleTypeNameIntoPSObject());
                        _responseSize = 2;
                    }
                }
            }
        }
    }
}