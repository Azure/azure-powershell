// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Extensions;

    /// <summary>
    /// The catalog's properties for partial update. Properties not provided in the update request will not be changed.
    /// </summary>
    public partial class CatalogUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdate,
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdateInternal
    {

        /// <summary>Git branch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string AdoGitBranch { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGitBranch; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGitBranch = value ?? null; }

        /// <summary>The folder where the catalog items can be found inside the repository.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string AdoGitPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGitPath; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGitPath = value ?? null; }

        /// <summary>
        /// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string AdoGitSecretIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGitSecretIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGitSecretIdentifier = value ?? null; }

        /// <summary>Git URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string AdoGitUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGitUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGitUri = value ?? null; }

        /// <summary>Git branch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string GitHubBranch { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHubBranch; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHubBranch = value ?? null; }

        /// <summary>The folder where the catalog items can be found inside the repository.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string GitHubPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHubPath; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHubPath = value ?? null; }

        /// <summary>
        /// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string GitHubSecretIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHubSecretIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHubSecretIdentifier = value ?? null; }

        /// <summary>Git URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string GitHubUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHubUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHubUri = value ?? null; }

        /// <summary>Internal Acessors for AdoGit</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.IGitCatalog Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdateInternal.AdoGit { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGit; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGit = value; }

        /// <summary>Internal Acessors for GitHub</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.IGitCatalog Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdateInternal.GitHub { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHub; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHub = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdateProperties Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdateInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.CatalogUpdateProperties()); set { {_property = value;} } }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdateProperties _property;

        /// <summary>Catalog properties for update.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdateProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.CatalogUpdateProperties()); set => this._property = value; }

        /// <summary>Indicates the type of sync that is configured for the catalog.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncType? SyncType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).SyncType; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).SyncType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncType)""); }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdateTags _tag;

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdateTags Tag { get => (this._tag = this._tag ?? new Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.CatalogUpdateTags()); set => this._tag = value; }

        /// <summary>Creates an new <see cref="CatalogUpdate" /> instance.</summary>
        public CatalogUpdate()
        {

        }
    }
    /// The catalog's properties for partial update. Properties not provided in the update request will not be changed.
    public partial interface ICatalogUpdate :
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.IJsonSerializable
    {
        /// <summary>Git branch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Git branch.",
        SerializedName = @"branch",
        PossibleTypes = new [] { typeof(string) })]
        string AdoGitBranch { get; set; }
        /// <summary>The folder where the catalog items can be found inside the repository.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The folder where the catalog items can be found inside the repository.",
        SerializedName = @"path",
        PossibleTypes = new [] { typeof(string) })]
        string AdoGitPath { get; set; }
        /// <summary>
        /// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A reference to the Key Vault secret containing a security token to authenticate to a Git repository.",
        SerializedName = @"secretIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string AdoGitSecretIdentifier { get; set; }
        /// <summary>Git URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Git URI.",
        SerializedName = @"uri",
        PossibleTypes = new [] { typeof(string) })]
        string AdoGitUri { get; set; }
        /// <summary>Git branch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Git branch.",
        SerializedName = @"branch",
        PossibleTypes = new [] { typeof(string) })]
        string GitHubBranch { get; set; }
        /// <summary>The folder where the catalog items can be found inside the repository.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The folder where the catalog items can be found inside the repository.",
        SerializedName = @"path",
        PossibleTypes = new [] { typeof(string) })]
        string GitHubPath { get; set; }
        /// <summary>
        /// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A reference to the Key Vault secret containing a security token to authenticate to a Git repository.",
        SerializedName = @"secretIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string GitHubSecretIdentifier { get; set; }
        /// <summary>Git URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Git URI.",
        SerializedName = @"uri",
        PossibleTypes = new [] { typeof(string) })]
        string GitHubUri { get; set; }
        /// <summary>Indicates the type of sync that is configured for the catalog.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates the type of sync that is configured for the catalog.",
        SerializedName = @"syncType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncType? SyncType { get; set; }
        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource tags.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdateTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdateTags Tag { get; set; }

    }
    /// The catalog's properties for partial update. Properties not provided in the update request will not be changed.
    internal partial interface ICatalogUpdateInternal

    {
        /// <summary>Properties for an Azure DevOps catalog type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.IGitCatalog AdoGit { get; set; }
        /// <summary>Git branch.</summary>
        string AdoGitBranch { get; set; }
        /// <summary>The folder where the catalog items can be found inside the repository.</summary>
        string AdoGitPath { get; set; }
        /// <summary>
        /// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        /// </summary>
        string AdoGitSecretIdentifier { get; set; }
        /// <summary>Git URI.</summary>
        string AdoGitUri { get; set; }
        /// <summary>Properties for a GitHub catalog type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.IGitCatalog GitHub { get; set; }
        /// <summary>Git branch.</summary>
        string GitHubBranch { get; set; }
        /// <summary>The folder where the catalog items can be found inside the repository.</summary>
        string GitHubPath { get; set; }
        /// <summary>
        /// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        /// </summary>
        string GitHubSecretIdentifier { get; set; }
        /// <summary>Git URI.</summary>
        string GitHubUri { get; set; }
        /// <summary>Catalog properties for update.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdateProperties Property { get; set; }
        /// <summary>Indicates the type of sync that is configured for the catalog.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncType? SyncType { get; set; }
        /// <summary>Resource tags.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdateTags Tag { get; set; }

    }
}