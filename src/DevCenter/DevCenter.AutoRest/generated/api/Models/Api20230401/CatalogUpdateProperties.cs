// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Extensions;

    /// <summary>
    /// Properties of a catalog. These properties can be updated after the resource has been created.
    /// </summary>
    public partial class CatalogUpdateProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.ICatalogUpdateProperties,
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.ICatalogUpdatePropertiesInternal
    {

        /// <summary>Backing field for <see cref="AdoGit" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalog _adoGit;

        /// <summary>Properties for an Azure DevOps catalog type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalog AdoGit { get => (this._adoGit = this._adoGit ?? new Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.GitCatalog()); set => this._adoGit = value; }

        /// <summary>Git branch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string AdoGitBranch { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalogInternal)AdoGit).Branch; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalogInternal)AdoGit).Branch = value ?? null; }

        /// <summary>The folder where the catalog items can be found inside the repository.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string AdoGitPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalogInternal)AdoGit).Path; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalogInternal)AdoGit).Path = value ?? null; }

        /// <summary>
        /// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string AdoGitSecretIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalogInternal)AdoGit).SecretIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalogInternal)AdoGit).SecretIdentifier = value ?? null; }

        /// <summary>Git URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string AdoGitUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalogInternal)AdoGit).Uri; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalogInternal)AdoGit).Uri = value ?? null; }

        /// <summary>Backing field for <see cref="GitHub" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalog _gitHub;

        /// <summary>Properties for a GitHub catalog type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalog GitHub { get => (this._gitHub = this._gitHub ?? new Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.GitCatalog()); set => this._gitHub = value; }

        /// <summary>Git branch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string GitHubBranch { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalogInternal)GitHub).Branch; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalogInternal)GitHub).Branch = value ?? null; }

        /// <summary>The folder where the catalog items can be found inside the repository.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string GitHubPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalogInternal)GitHub).Path; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalogInternal)GitHub).Path = value ?? null; }

        /// <summary>
        /// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string GitHubSecretIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalogInternal)GitHub).SecretIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalogInternal)GitHub).SecretIdentifier = value ?? null; }

        /// <summary>Git URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string GitHubUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalogInternal)GitHub).Uri; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalogInternal)GitHub).Uri = value ?? null; }

        /// <summary>Internal Acessors for AdoGit</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalog Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.ICatalogUpdatePropertiesInternal.AdoGit { get => (this._adoGit = this._adoGit ?? new Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.GitCatalog()); set { {_adoGit = value;} } }

        /// <summary>Internal Acessors for GitHub</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalog Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.ICatalogUpdatePropertiesInternal.GitHub { get => (this._gitHub = this._gitHub ?? new Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.GitCatalog()); set { {_gitHub = value;} } }

        /// <summary>Creates an new <see cref="CatalogUpdateProperties" /> instance.</summary>
        public CatalogUpdateProperties()
        {

        }
    }
    /// Properties of a catalog. These properties can be updated after the resource has been created.
    public partial interface ICatalogUpdateProperties :
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.IJsonSerializable
    {
        /// <summary>Git branch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Git branch.",
        SerializedName = @"branch",
        PossibleTypes = new [] { typeof(string) })]
        string AdoGitBranch { get; set; }
        /// <summary>The folder where the catalog items can be found inside the repository.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The folder where the catalog items can be found inside the repository.",
        SerializedName = @"path",
        PossibleTypes = new [] { typeof(string) })]
        string AdoGitPath { get; set; }
        /// <summary>
        /// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A reference to the Key Vault secret containing a security token to authenticate to a Git repository.",
        SerializedName = @"secretIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string AdoGitSecretIdentifier { get; set; }
        /// <summary>Git URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Git URI.",
        SerializedName = @"uri",
        PossibleTypes = new [] { typeof(string) })]
        string AdoGitUri { get; set; }
        /// <summary>Git branch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Git branch.",
        SerializedName = @"branch",
        PossibleTypes = new [] { typeof(string) })]
        string GitHubBranch { get; set; }
        /// <summary>The folder where the catalog items can be found inside the repository.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The folder where the catalog items can be found inside the repository.",
        SerializedName = @"path",
        PossibleTypes = new [] { typeof(string) })]
        string GitHubPath { get; set; }
        /// <summary>
        /// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A reference to the Key Vault secret containing a security token to authenticate to a Git repository.",
        SerializedName = @"secretIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string GitHubSecretIdentifier { get; set; }
        /// <summary>Git URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Git URI.",
        SerializedName = @"uri",
        PossibleTypes = new [] { typeof(string) })]
        string GitHubUri { get; set; }

    }
    /// Properties of a catalog. These properties can be updated after the resource has been created.
    internal partial interface ICatalogUpdatePropertiesInternal

    {
        /// <summary>Properties for an Azure DevOps catalog type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalog AdoGit { get; set; }
        /// <summary>Git branch.</summary>
        string AdoGitBranch { get; set; }
        /// <summary>The folder where the catalog items can be found inside the repository.</summary>
        string AdoGitPath { get; set; }
        /// <summary>
        /// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        /// </summary>
        string AdoGitSecretIdentifier { get; set; }
        /// <summary>Git URI.</summary>
        string AdoGitUri { get; set; }
        /// <summary>Properties for a GitHub catalog type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20230401.IGitCatalog GitHub { get; set; }
        /// <summary>Git branch.</summary>
        string GitHubBranch { get; set; }
        /// <summary>The folder where the catalog items can be found inside the repository.</summary>
        string GitHubPath { get; set; }
        /// <summary>
        /// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        /// </summary>
        string GitHubSecretIdentifier { get; set; }
        /// <summary>Git URI.</summary>
        string GitHubUri { get; set; }

    }
}