
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates or updates a machine pool
.Description
Creates or updates a machine pool
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.IDevCenterIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20250401Preview.IPool
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IDevCenterIdentity>: Identity Parameter
  [AttachedNetworkConnectionName <String>]: The name of the attached NetworkConnection.
  [BuildName <String>]: The ID of the Image Definition Build.
  [CatalogName <String>]: The name of the Catalog.
  [DevBoxDefinitionName <String>]: The name of the Dev Box definition.
  [DevCenterName <String>]: The name of the devcenter.
  [EncryptionSetName <String>]: The name of the devcenter encryption set.
  [EnvironmentDefinitionName <String>]: The name of the Environment Definition.
  [EnvironmentTypeName <String>]: The name of the environment type.
  [GalleryName <String>]: The name of the gallery.
  [Id <String>]: Resource identity path
  [ImageDefinitionName <String>]: The name of the Image Definition.
  [ImageName <String>]: The name of the image.
  [Location <String>]: The Azure region
  [NetworkConnectionName <String>]: Name of the Network Connection that can be applied to a Pool.
  [OperationId <String>]: The ID of an ongoing async operation
  [PoolName <String>]: Name of the pool.
  [ProjectName <String>]: The name of the project.
  [ProjectPolicyName <String>]: The name of the project policy.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [ScheduleName <String>]: The name of the schedule that uniquely identifies it.
  [SubscriptionId <String>]: The ID of the target subscription.
  [TaskName <String>]: The name of the Task.
  [VersionName <String>]: The version of the image.
.Link
https://learn.microsoft.com/powershell/module/az.devcenter/new-azdevcenteradminpool
#>
function New-AzDevCenterAdminPool {
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20250401Preview.IPool])]
    [CmdletBinding(DefaultParameterSetName = 'CreateExpanded', PositionalBinding = $false, SupportsShouldProcess, ConfirmImpact = 'Medium')]
    param(
        [Parameter(ParameterSetName = 'CreateExpanded', Mandatory)]
        [Alias('PoolName')]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Path')]
        [System.String]
        # Name of the pool.
        ${Name},

        [Parameter(ParameterSetName = 'CreateExpanded', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Path')]
        [System.String]
        # The name of the project.
        ${ProjectName},

        [Parameter(ParameterSetName = 'CreateExpanded', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Path')]
        [System.String]
        # The name of the resource group.
        # The name is case insensitive.
        ${ResourceGroupName},

        [Parameter(ParameterSetName = 'CreateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.DefaultInfo(Script = '(Get-AzContext).Subscription.Id')]
        [System.String]
        # The ID of the target subscription.
        ${SubscriptionId},

        [Parameter(ParameterSetName = 'CreateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.IDevCenterIdentity]
        # Identity Parameter
        # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
        ${InputObject},

        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [System.String]
        # The geo-location where the resource lives
        ${Location},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.AutoStartEnableStatus])]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.AutoStartEnableStatus]
        # Enables or disables whether the Dev Box should be automatically started at commencement of active hours.
        ${ActiveHourConfigurationAutoStartEnableStatus},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [System.Int32]
        # The default end time of the active hours
        ${ActiveHourConfigurationDefaultEndTimeHour},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [System.Int32]
        # The default start time of the active hours.
        ${ActiveHourConfigurationDefaultStartTimeHour},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [System.String]
        # The default IANA timezone id of the active hours.
        ${ActiveHourConfigurationDefaultTimeZone},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.KeepAwakeEnableStatus])]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.KeepAwakeEnableStatus]
        # Enables or disables whether the Dev Box should be kept awake during active hours.
        ${ActiveHourConfigurationKeepAwakeEnableStatus},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [System.String]
        # Name of a Dev Box definition in parent Project of this Pool.
        # Will be ignored if devBoxDefinitionType is Value.
        ${DevBoxDefinitionName},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.PoolDevBoxDefinitionType])]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.PoolDevBoxDefinitionType]
        # Indicates if the pool is created from an existing Dev Box Definition or if one is provided directly.
        ${DevBoxDefinitionType},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.DevBoxTunnelEnableStatus])]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.DevBoxTunnelEnableStatus]
        # Indicates whether Dev Box Tunnel is enabled for a the pool.
        ${DevBoxTunnelEnableStatus},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [System.String]
        # The display name of the pool.
        ${DisplayName},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [System.String]
        # Image ID, or Image version ID.
        # When Image ID is provided, its latest version will be used.
        ${ImageReferenceId},

        [Parameter(Mandatory)]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.LocalAdminStatus])]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.LocalAdminStatus]
        # Indicates whether owners of Dev Boxes in this pool are added as local administrators on the Dev Box.
        ${LocalAdministrator},

        [Parameter()]
        [AllowEmptyCollection()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [System.String[]]
        # The regions of the managed virtual network (required when managedNetworkType is Managed).
        ${ManagedVirtualNetworkRegion},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [System.String]
        # Name of a Network Connection in parent Project of this Pool
        ${NetworkConnectionName},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.SingleSignOnStatus])]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.SingleSignOnStatus]
        # Indicates whether Dev Boxes in this pool are created with single sign on enabled.
        # The also requires that single sign on be enabled on the tenant.
        ${SingleSignOnStatus},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [System.Int32]
        # If the SKU supports scale out/in then the capacity integer should be included.
        # If scale out/in is not possible for the resource this may be omitted.
        ${SkuCapacity},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [System.String]
        # If the service has different generations of hardware, for the same SKU, then that can be captured here.
        ${SkuFamily},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [System.String]
        # The name of the SKU.
        # E.g.
        # P3.
        # It is typically a letter+number code
        ${SkuName},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [System.String]
        # The SKU size.
        # When the name field is the combination of tier and some other value, this would be the standalone code.
        ${SkuSize},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.SkuTier])]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.SkuTier]
        # This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        ${SkuTier},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [System.Int32]
        # The specified time in minutes to wait before stopping a Dev Box once disconnect is detected.
        ${StopOnDisconnectGracePeriodMinute},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.StopOnDisconnectEnableStatus])]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.StopOnDisconnectEnableStatus]
        # Whether the feature to stop the Dev Box on disconnect once the grace period has lapsed is enabled.
        ${StopOnDisconnectStatus},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [System.Int32]
        # The specified time in minutes to wait before stopping a Dev Box if no connection is made.
        ${StopOnNoConnectGracePeriodMinute},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.StopOnNoConnectEnableStatus])]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.StopOnNoConnectEnableStatus]
        # Enables the feature to stop a started Dev Box when it has not been connected to, once the grace period has lapsed.
        ${StopOnNoConnectStatus},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(PossibleTypes = ([Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api50.ITrackedResourceTags]))]
        [System.Collections.Hashtable]
        # Resource tags.
        ${Tag},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.VirtualNetworkType])]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.VirtualNetworkType]
        # Indicates whether the pool uses a Virtual Network managed by Microsoft or a customer provided network.
        ${VirtualNetworkType},

        [Parameter()]
        [Alias('AzureRMContext', 'AzureCredential')]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Azure')]
        [System.Management.Automation.PSObject]
        # The DefaultProfile parameter is not functional.
        # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
        ${DefaultProfile},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command as a job
        ${AsJob},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Wait for .NET debugger to attach
        ${Break},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be appended to the front of the pipeline
        ${HttpPipelineAppend},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be prepended to the front of the pipeline
        ${HttpPipelinePrepend},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command asynchronously
        ${NoWait},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Runtime')]
        [System.Uri]
        # The URI for the proxy server to use
        ${Proxy},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Runtime')]
        [System.Management.Automation.PSCredential]
        # Credentials for a proxy server to use for the remote call
        ${ProxyCredential},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Use the default credentials for the proxy
        ${ProxyUseDefaultCredentials}
    )

    
    process {
        # Call the validation function before creating the pool
        ValidatePoolCreate `
            -VirtualNetworkType $PSBoundParameters['VirtualNetworkType'] `
            -NetworkConnectionName $PSBoundParameters['NetworkConnectionName'] `
            -ManagedVirtualNetworkRegion $PSBoundParameters['ManagedVirtualNetworkRegion'] `
            -DevBoxDefinitionImageReference $PSBoundParameters['ImageReferenceId'] `
            -DevBoxDefinitionSku $PSBoundParameters['SkuName'] `
            -DevBoxDefinitionType $PSBoundParameters['DevBoxDefinitionType'] `
            -DevBoxDefinitionName $PSBoundParameters['DevBoxDefinitionName']
        
        # If VirtualNetworkType is Managed and NetworkConnectionName is not set, set it to "managedNetwork"
        if (
            $PSBoundParameters['VirtualNetworkType'] -eq "Managed" -and
        (-not $PSBoundParameters.ContainsKey('NetworkConnectionName') -or [string]::IsNullOrWhiteSpace($PSBoundParameters['NetworkConnectionName']))
        ) {
            $PSBoundParameters['NetworkConnectionName'] = "managedNetwork"
        }

        # If DevBoxDefinitionType is Value and DevBoxDefinitionImageReference (id) is set, set DevBoxDefinitionName
        if (
            $PSBoundParameters['DevBoxDefinitionType'] -eq "Value" -and
            $PSBoundParameters.ContainsKey('ImageReferenceId') -and
            -not [string]::IsNullOrWhiteSpace($PSBoundParameters['ImageReferenceId'])
        ) {
            $id = $PSBoundParameters['ImageReferenceId'].TrimEnd('/')
            $name = $id.Split('/')[-1]
            $PSBoundParameters['DevBoxDefinitionName'] = $name
        }    

        Az.DevCenter.internal\New-AzDevCenterAdminPool @PSBoundParameters
    }
}
    