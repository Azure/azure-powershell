// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20210301
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Extensions;

    /// <summary>Copy progress.</summary>
    public partial class CopyProgress :
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20210301.ICopyProgress,
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20210301.ICopyProgressInternal
    {

        /// <summary>Backing field for <see cref="AccountId" /> property.</summary>
        private string _accountId;

        /// <summary>Id of the account where the data needs to be uploaded.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Owned)]
        public string AccountId { get => this._accountId; }

        /// <summary>Backing field for <see cref="BytesProcessed" /> property.</summary>
        private long? _bytesProcessed;

        /// <summary>To indicate bytes transferred.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Owned)]
        public long? BytesProcessed { get => this._bytesProcessed; }

        /// <summary>Backing field for <see cref="DataAccountType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType? _dataAccountType;

        /// <summary>Data Account Type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType? DataAccountType { get => this._dataAccountType; }

        /// <summary>Backing field for <see cref="DirectoriesErroredOut" /> property.</summary>
        private long? _directoriesErroredOut;

        /// <summary>To indicate directories errored out in the job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Owned)]
        public long? DirectoriesErroredOut { get => this._directoriesErroredOut; }

        /// <summary>Backing field for <see cref="FilesErroredOut" /> property.</summary>
        private long? _filesErroredOut;

        /// <summary>Number of files which could not be copied</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Owned)]
        public long? FilesErroredOut { get => this._filesErroredOut; }

        /// <summary>Backing field for <see cref="FilesProcessed" /> property.</summary>
        private long? _filesProcessed;

        /// <summary>Number of files processed</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Owned)]
        public long? FilesProcessed { get => this._filesProcessed; }

        /// <summary>Backing field for <see cref="InvalidDirectoriesProcessed" /> property.</summary>
        private long? _invalidDirectoriesProcessed;

        /// <summary>To indicate directories renamed</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Owned)]
        public long? InvalidDirectoriesProcessed { get => this._invalidDirectoriesProcessed; }

        /// <summary>Backing field for <see cref="InvalidFileBytesUploaded" /> property.</summary>
        private long? _invalidFileBytesUploaded;

        /// <summary>
        /// Total amount of data not adhering to azure naming conventions which were processed by automatic renaming
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Owned)]
        public long? InvalidFileBytesUploaded { get => this._invalidFileBytesUploaded; }

        /// <summary>Backing field for <see cref="InvalidFilesProcessed" /> property.</summary>
        private long? _invalidFilesProcessed;

        /// <summary>
        /// Number of files not adhering to azure naming conventions which were processed by automatic renaming
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Owned)]
        public long? InvalidFilesProcessed { get => this._invalidFilesProcessed; }

        /// <summary>Backing field for <see cref="IsEnumerationInProgress" /> property.</summary>
        private bool? _isEnumerationInProgress;

        /// <summary>
        /// To indicate if enumeration of data is in progress.
        /// Until this is true, the TotalBytesToProcess may not be valid.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Owned)]
        public bool? IsEnumerationInProgress { get => this._isEnumerationInProgress; }

        /// <summary>Internal Acessors for AccountId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20210301.ICopyProgressInternal.AccountId { get => this._accountId; set { {_accountId = value;} } }

        /// <summary>Internal Acessors for BytesProcessed</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20210301.ICopyProgressInternal.BytesProcessed { get => this._bytesProcessed; set { {_bytesProcessed = value;} } }

        /// <summary>Internal Acessors for DataAccountType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType? Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20210301.ICopyProgressInternal.DataAccountType { get => this._dataAccountType; set { {_dataAccountType = value;} } }

        /// <summary>Internal Acessors for DirectoriesErroredOut</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20210301.ICopyProgressInternal.DirectoriesErroredOut { get => this._directoriesErroredOut; set { {_directoriesErroredOut = value;} } }

        /// <summary>Internal Acessors for FilesErroredOut</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20210301.ICopyProgressInternal.FilesErroredOut { get => this._filesErroredOut; set { {_filesErroredOut = value;} } }

        /// <summary>Internal Acessors for FilesProcessed</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20210301.ICopyProgressInternal.FilesProcessed { get => this._filesProcessed; set { {_filesProcessed = value;} } }

        /// <summary>Internal Acessors for InvalidDirectoriesProcessed</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20210301.ICopyProgressInternal.InvalidDirectoriesProcessed { get => this._invalidDirectoriesProcessed; set { {_invalidDirectoriesProcessed = value;} } }

        /// <summary>Internal Acessors for InvalidFileBytesUploaded</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20210301.ICopyProgressInternal.InvalidFileBytesUploaded { get => this._invalidFileBytesUploaded; set { {_invalidFileBytesUploaded = value;} } }

        /// <summary>Internal Acessors for InvalidFilesProcessed</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20210301.ICopyProgressInternal.InvalidFilesProcessed { get => this._invalidFilesProcessed; set { {_invalidFilesProcessed = value;} } }

        /// <summary>Internal Acessors for IsEnumerationInProgress</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20210301.ICopyProgressInternal.IsEnumerationInProgress { get => this._isEnumerationInProgress; set { {_isEnumerationInProgress = value;} } }

        /// <summary>Internal Acessors for RenamedContainerCount</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20210301.ICopyProgressInternal.RenamedContainerCount { get => this._renamedContainerCount; set { {_renamedContainerCount = value;} } }

        /// <summary>Internal Acessors for StorageAccountName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20210301.ICopyProgressInternal.StorageAccountName { get => this._storageAccountName; set { {_storageAccountName = value;} } }

        /// <summary>Internal Acessors for TotalBytesToProcess</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20210301.ICopyProgressInternal.TotalBytesToProcess { get => this._totalBytesToProcess; set { {_totalBytesToProcess = value;} } }

        /// <summary>Internal Acessors for TotalFilesToProcess</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20210301.ICopyProgressInternal.TotalFilesToProcess { get => this._totalFilesToProcess; set { {_totalFilesToProcess = value;} } }

        /// <summary>Internal Acessors for TransferType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.TransferType? Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.Api20210301.ICopyProgressInternal.TransferType { get => this._transferType; set { {_transferType = value;} } }

        /// <summary>Backing field for <see cref="RenamedContainerCount" /> property.</summary>
        private long? _renamedContainerCount;

        /// <summary>
        /// Number of folders not adhering to azure naming conventions which were processed by automatic renaming
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Owned)]
        public long? RenamedContainerCount { get => this._renamedContainerCount; }

        /// <summary>Backing field for <see cref="StorageAccountName" /> property.</summary>
        private string _storageAccountName;

        /// <summary>
        /// Name of the storage account. This will be empty for data account types other than storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Owned)]
        public string StorageAccountName { get => this._storageAccountName; }

        /// <summary>Backing field for <see cref="TotalBytesToProcess" /> property.</summary>
        private long? _totalBytesToProcess;

        /// <summary>Total amount of data to be processed by the job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Owned)]
        public long? TotalBytesToProcess { get => this._totalBytesToProcess; }

        /// <summary>Backing field for <see cref="TotalFilesToProcess" /> property.</summary>
        private long? _totalFilesToProcess;

        /// <summary>Total files to process</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Owned)]
        public long? TotalFilesToProcess { get => this._totalFilesToProcess; }

        /// <summary>Backing field for <see cref="TransferType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.TransferType? _transferType;

        /// <summary>Transfer type of data</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataBox.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.TransferType? TransferType { get => this._transferType; }

        /// <summary>Creates an new <see cref="CopyProgress" /> instance.</summary>
        public CopyProgress()
        {

        }
    }
    /// Copy progress.
    public partial interface ICopyProgress :
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.IJsonSerializable
    {
        /// <summary>Id of the account where the data needs to be uploaded.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Id of the account where the data needs to be uploaded.",
        SerializedName = @"accountId",
        PossibleTypes = new [] { typeof(string) })]
        string AccountId { get;  }
        /// <summary>To indicate bytes transferred.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"To indicate bytes transferred.",
        SerializedName = @"bytesProcessed",
        PossibleTypes = new [] { typeof(long) })]
        long? BytesProcessed { get;  }
        /// <summary>Data Account Type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Data Account Type.",
        SerializedName = @"dataAccountType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType? DataAccountType { get;  }
        /// <summary>To indicate directories errored out in the job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"To indicate directories errored out in the job.",
        SerializedName = @"directoriesErroredOut",
        PossibleTypes = new [] { typeof(long) })]
        long? DirectoriesErroredOut { get;  }
        /// <summary>Number of files which could not be copied</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Number of files which could not be copied",
        SerializedName = @"filesErroredOut",
        PossibleTypes = new [] { typeof(long) })]
        long? FilesErroredOut { get;  }
        /// <summary>Number of files processed</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Number of files processed",
        SerializedName = @"filesProcessed",
        PossibleTypes = new [] { typeof(long) })]
        long? FilesProcessed { get;  }
        /// <summary>To indicate directories renamed</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"To indicate directories renamed",
        SerializedName = @"invalidDirectoriesProcessed",
        PossibleTypes = new [] { typeof(long) })]
        long? InvalidDirectoriesProcessed { get;  }
        /// <summary>
        /// Total amount of data not adhering to azure naming conventions which were processed by automatic renaming
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Total amount of data not adhering to azure naming conventions which were processed by automatic renaming",
        SerializedName = @"invalidFileBytesUploaded",
        PossibleTypes = new [] { typeof(long) })]
        long? InvalidFileBytesUploaded { get;  }
        /// <summary>
        /// Number of files not adhering to azure naming conventions which were processed by automatic renaming
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Number of files not adhering to azure naming conventions which were processed by automatic renaming",
        SerializedName = @"invalidFilesProcessed",
        PossibleTypes = new [] { typeof(long) })]
        long? InvalidFilesProcessed { get;  }
        /// <summary>
        /// To indicate if enumeration of data is in progress.
        /// Until this is true, the TotalBytesToProcess may not be valid.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"To indicate if enumeration of data is in progress.
        Until this is true, the TotalBytesToProcess may not be valid.",
        SerializedName = @"isEnumerationInProgress",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsEnumerationInProgress { get;  }
        /// <summary>
        /// Number of folders not adhering to azure naming conventions which were processed by automatic renaming
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Number of folders not adhering to azure naming conventions which were processed by automatic renaming",
        SerializedName = @"renamedContainerCount",
        PossibleTypes = new [] { typeof(long) })]
        long? RenamedContainerCount { get;  }
        /// <summary>
        /// Name of the storage account. This will be empty for data account types other than storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Name of the storage account. This will be empty for data account types other than storage account.",
        SerializedName = @"storageAccountName",
        PossibleTypes = new [] { typeof(string) })]
        string StorageAccountName { get;  }
        /// <summary>Total amount of data to be processed by the job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Total amount of data to be processed by the job.",
        SerializedName = @"totalBytesToProcess",
        PossibleTypes = new [] { typeof(long) })]
        long? TotalBytesToProcess { get;  }
        /// <summary>Total files to process</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Total files to process",
        SerializedName = @"totalFilesToProcess",
        PossibleTypes = new [] { typeof(long) })]
        long? TotalFilesToProcess { get;  }
        /// <summary>Transfer type of data</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Transfer type of data",
        SerializedName = @"transferType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.TransferType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.TransferType? TransferType { get;  }

    }
    /// Copy progress.
    internal partial interface ICopyProgressInternal

    {
        /// <summary>Id of the account where the data needs to be uploaded.</summary>
        string AccountId { get; set; }
        /// <summary>To indicate bytes transferred.</summary>
        long? BytesProcessed { get; set; }
        /// <summary>Data Account Type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.DataAccountType? DataAccountType { get; set; }
        /// <summary>To indicate directories errored out in the job.</summary>
        long? DirectoriesErroredOut { get; set; }
        /// <summary>Number of files which could not be copied</summary>
        long? FilesErroredOut { get; set; }
        /// <summary>Number of files processed</summary>
        long? FilesProcessed { get; set; }
        /// <summary>To indicate directories renamed</summary>
        long? InvalidDirectoriesProcessed { get; set; }
        /// <summary>
        /// Total amount of data not adhering to azure naming conventions which were processed by automatic renaming
        /// </summary>
        long? InvalidFileBytesUploaded { get; set; }
        /// <summary>
        /// Number of files not adhering to azure naming conventions which were processed by automatic renaming
        /// </summary>
        long? InvalidFilesProcessed { get; set; }
        /// <summary>
        /// To indicate if enumeration of data is in progress.
        /// Until this is true, the TotalBytesToProcess may not be valid.
        /// </summary>
        bool? IsEnumerationInProgress { get; set; }
        /// <summary>
        /// Number of folders not adhering to azure naming conventions which were processed by automatic renaming
        /// </summary>
        long? RenamedContainerCount { get; set; }
        /// <summary>
        /// Name of the storage account. This will be empty for data account types other than storage account.
        /// </summary>
        string StorageAccountName { get; set; }
        /// <summary>Total amount of data to be processed by the job.</summary>
        long? TotalBytesToProcess { get; set; }
        /// <summary>Total files to process</summary>
        long? TotalFilesToProcess { get; set; }
        /// <summary>Transfer type of data</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataBox.Support.TransferType? TransferType { get; set; }

    }
}