
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for DataBoxCustomerDiskJobDetails.
.Description
Create an in-memory object for DataBoxCustomerDiskJobDetails.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.DataBoxCustomerDiskJobDetails
.Link
https://learn.microsoft.com/powershell/module/Az.DataBox/new-azdataboxcustomerdiskjobdetailsobject
#>
function New-AzDataBoxCustomerDiskJobDetailsObject {
    [Microsoft.Azure.PowerShell.Cmdlets.DataBox.ModelCmdletAttribute()]
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.DataBoxCustomerDiskJobDetails')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="Flag to indicate if disk manifest should be backed-up in the Storage Account.")]
        [bool]
        $EnableManifestBackup,
        [Parameter(HelpMessage="Contains the map of disk serial number to the disk details for import jobs.")]
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.IDataBoxCustomerDiskJobDetailsImportDiskDetailsCollection]
        $ImportDiskDetailsCollection,
        [Parameter(HelpMessage="Carrier Account Number of customer for customer disk.")]
        [string]
        $ReturnToCustomerPackageDetailCarrierAccountNumber,
        [Parameter(HelpMessage="Name of the carrier.")]
        [string]
        $ReturnToCustomerPackageDetailCarrierName,
        [Parameter(HelpMessage="Tracking Id of shipment.")]
        [string]
        $ReturnToCustomerPackageDetailTrackingId,
        [Parameter(Mandatory, HelpMessage="Contact details for notification and shipping.")]
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.IContactDetails]
        $ContactDetail,
        [Parameter(HelpMessage="Details of the data to be exported from azure.")]
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.IDataExportDetails[]]
        $DataExportDetail,
        [Parameter(HelpMessage="Details of the data to be imported into azure.")]
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.IDataImportDetails[]]
        $DataImportDetail,
        [Parameter(HelpMessage="The expected size of the data, which needs to be transferred in this job, in terabytes.")]
        [int]
        $ExpectedDataSizeInTeraByte,
        [Parameter(HelpMessage="Details about which key encryption type is being used.")]
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.IKeyEncryptionKey]
        $KeyEncryptionKey,
        [Parameter(HelpMessage="Preferences for the order.")]
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.IPreferences]
        $Preference,
        [Parameter(HelpMessage="Optional Reverse Shipping details for order.")]
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.IReverseShippingDetails]
        $ReverseShippingDetail,
        [Parameter(HelpMessage="Shipping address of the customer.")]
        [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.IShippingAddress]
        $ShippingAddress
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.DataBox.Models.DataBoxCustomerDiskJobDetails]::New()

        if ($PSBoundParameters.ContainsKey('EnableManifestBackup')) {
            $Object.EnableManifestBackup = $EnableManifestBackup
        }
        if ($PSBoundParameters.ContainsKey('ImportDiskDetailsCollection')) {
            $Object.ImportDiskDetailsCollection = $ImportDiskDetailsCollection
        }
        if ($PSBoundParameters.ContainsKey('ReturnToCustomerPackageDetailCarrierAccountNumber')) {
            $Object.ReturnToCustomerPackageDetailCarrierAccountNumber = $ReturnToCustomerPackageDetailCarrierAccountNumber
        }
        if ($PSBoundParameters.ContainsKey('ReturnToCustomerPackageDetailCarrierName')) {
            $Object.ReturnToCustomerPackageDetailCarrierName = $ReturnToCustomerPackageDetailCarrierName
        }
        if ($PSBoundParameters.ContainsKey('ReturnToCustomerPackageDetailTrackingId')) {
            $Object.ReturnToCustomerPackageDetailTrackingId = $ReturnToCustomerPackageDetailTrackingId
        }
        if ($PSBoundParameters.ContainsKey('ContactDetail')) {
            $Object.ContactDetail = $ContactDetail
        }
        if ($PSBoundParameters.ContainsKey('DataExportDetail')) {
            $Object.DataExportDetail = $DataExportDetail
        }
        if ($PSBoundParameters.ContainsKey('DataImportDetail')) {
            $Object.DataImportDetail = $DataImportDetail
        }
        if ($PSBoundParameters.ContainsKey('ExpectedDataSizeInTeraByte')) {
            $Object.ExpectedDataSizeInTeraByte = $ExpectedDataSizeInTeraByte
        }
        if ($PSBoundParameters.ContainsKey('KeyEncryptionKey')) {
            $Object.KeyEncryptionKey = $KeyEncryptionKey
        }
        if ($PSBoundParameters.ContainsKey('Preference')) {
            $Object.Preference = $Preference
        }
        if ($PSBoundParameters.ContainsKey('ReverseShippingDetail')) {
            $Object.ReverseShippingDetail = $ReverseShippingDetail
        }
        if ($PSBoundParameters.ContainsKey('ShippingAddress')) {
            $Object.ShippingAddress = $ShippingAddress
        }
        return $Object
    }
}

