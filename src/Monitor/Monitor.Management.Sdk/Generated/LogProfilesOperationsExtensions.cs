// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Monitor
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for LogProfilesOperations
    /// </summary>
    public static partial class LogProfilesOperationsExtensions
    {
        /// <summary>
        /// Deletes the log profile.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='logProfileName'>
        /// The name of the log profile.
        /// </param>
        public static void Delete(this ILogProfilesOperations operations, string logProfileName)
        {
                ((ILogProfilesOperations)operations).DeleteAsync(logProfileName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the log profile.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='logProfileName'>
        /// The name of the log profile.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this ILogProfilesOperations operations, string logProfileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(logProfileName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets the log profile.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='logProfileName'>
        /// The name of the log profile.
        /// </param>
        public static LogProfileResource Get(this ILogProfilesOperations operations, string logProfileName)
        {
                return ((ILogProfilesOperations)operations).GetAsync(logProfileName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the log profile.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='logProfileName'>
        /// The name of the log profile.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<LogProfileResource> GetAsync(this ILogProfilesOperations operations, string logProfileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(logProfileName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update a log profile in Azure Monitoring REST API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='logProfileName'>
        /// The name of the log profile.
        /// </param>
        public static LogProfileResource CreateOrUpdate(this ILogProfilesOperations operations, string logProfileName, LogProfileResource parameters)
        {
                return ((ILogProfilesOperations)operations).CreateOrUpdateAsync(logProfileName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a log profile in Azure Monitoring REST API.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='logProfileName'>
        /// The name of the log profile.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<LogProfileResource> CreateOrUpdateAsync(this ILogProfilesOperations operations, string logProfileName, LogProfileResource parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(logProfileName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates an existing LogProfilesResource. To update other fields use the
        /// CreateOrUpdate method.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='logProfileName'>
        /// The name of the log profile.
        /// </param>
        public static LogProfileResource Update(this ILogProfilesOperations operations, string logProfileName, LogProfileResourcePatch logProfilesResource)
        {
                return ((ILogProfilesOperations)operations).UpdateAsync(logProfileName, logProfilesResource).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates an existing LogProfilesResource. To update other fields use the
        /// CreateOrUpdate method.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='logProfileName'>
        /// The name of the log profile.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<LogProfileResource> UpdateAsync(this ILogProfilesOperations operations, string logProfileName, LogProfileResourcePatch logProfilesResource, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(logProfileName, logProfilesResource, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List the log profiles.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static System.Collections.Generic.IEnumerable<LogProfileResource> List(this ILogProfilesOperations operations)
        {
                return ((ILogProfilesOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// List the log profiles.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LogProfileResource>> ListAsync(this ILogProfilesOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
