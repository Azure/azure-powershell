// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Monitor.Models
{
    using System.Linq;

    /// <summary>
    /// The types of conditions for a multi resource alert.
    /// </summary>
    [Newtonsoft.Json.JsonObject("MultiMetricCriteria")]
    public partial class MultiMetricCriteria
    {
        /// <summary>
        /// Initializes a new instance of the MultiMetricCriteria class.
        /// </summary>
        public MultiMetricCriteria()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MultiMetricCriteria class.
        /// </summary>

        /// <param name="additionalProperties">The types of conditions for a multi resource alert.
        /// </param>

        /// <param name="name">Name of the criteria.
        /// </param>

        /// <param name="metricName">Name of the metric.
        /// </param>

        /// <param name="metricNamespace">Namespace of the metric.
        /// </param>

        /// <param name="timeAggregation">the criteria time aggregation types.
        /// Possible values include: &#39;Average&#39;, &#39;Count&#39;, &#39;Minimum&#39;, &#39;Maximum&#39;, &#39;Total&#39;</param>

        /// <param name="dimensions">List of dimension conditions.
        /// </param>

        /// <param name="skipMetricValidation">Allows creating an alert rule on a custom metric that isn&#39;t yet emitted, by
        /// causing the metric validation to be skipped.
        /// </param>
        public MultiMetricCriteria(string name, string metricName, string timeAggregation, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string metricNamespace = default(string), System.Collections.Generic.IList<MetricDimension> dimensions = default(System.Collections.Generic.IList<MetricDimension>), bool? skipMetricValidation = default(bool?))

        {
            this.AdditionalProperties = additionalProperties;
            this.Name = name;
            this.MetricName = metricName;
            this.MetricNamespace = metricNamespace;
            this.TimeAggregation = timeAggregation;
            this.Dimensions = dimensions;
            this.SkipMetricValidation = skipMetricValidation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the types of conditions for a multi resource alert.
        /// </summary>
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {get; set; }

        /// <summary>
        /// Gets or sets name of the criteria.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets name of the metric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metricName")]
        public string MetricName {get; set; }

        /// <summary>
        /// Gets or sets namespace of the metric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metricNamespace")]
        public string MetricNamespace {get; set; }

        /// <summary>
        /// Gets or sets the criteria time aggregation types. Possible values include: &#39;Average&#39;, &#39;Count&#39;, &#39;Minimum&#39;, &#39;Maximum&#39;, &#39;Total&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeAggregation")]
        public string TimeAggregation {get; set; }

        /// <summary>
        /// Gets or sets list of dimension conditions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dimensions")]
        public System.Collections.Generic.IList<MetricDimension> Dimensions {get; set; }

        /// <summary>
        /// Gets or sets allows creating an alert rule on a custom metric that isn&#39;t
        /// yet emitted, by causing the metric validation to be skipped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "skipMetricValidation")]
        public bool? SkipMetricValidation {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (this.MetricName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MetricName");
            }
            if (this.TimeAggregation == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TimeAggregation");
            }





            if (this.Dimensions != null)
            {
                foreach (var element in this.Dimensions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}