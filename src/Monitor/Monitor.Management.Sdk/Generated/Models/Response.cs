// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Monitor.Models
{
    using System.Linq;

    /// <summary>
    /// The response to a metrics query.
    /// </summary>
    public partial class Response
    {
        /// <summary>
        /// Initializes a new instance of the Response class.
        /// </summary>
        public Response()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Response class.
        /// </summary>

        /// <param name="cost">The integer value representing the relative cost of the query.
        /// </param>

        /// <param name="timespan">The timespan for which the data was retrieved. Its value consists of two
        /// datetimes concatenated, separated by &#39;/&#39;.  This may be adjusted in the
        /// future and returned back from what was originally requested.
        /// </param>

        /// <param name="interval">The interval (window size) for which the metric data was returned in.  This
        /// may be adjusted in the future and returned back from what was originally
        /// requested.  This is not present if a metadata request was made.
        /// </param>

        /// <param name="namespaceProperty">The namespace of the metrics being queried
        /// </param>

        /// <param name="resourceregion">The region of the resource being queried for metrics.
        /// </param>

        /// <param name="value">the value of the collection.
        /// </param>
        public Response(string timespan, System.Collections.Generic.IList<Metric> value, int? cost = default(int?), System.TimeSpan? interval = default(System.TimeSpan?), string namespaceProperty = default(string), string resourceregion = default(string))

        {
            this.Cost = cost;
            this.Timespan = timespan;
            this.Interval = interval;
            this.NamespaceProperty = namespaceProperty;
            this.Resourceregion = resourceregion;
            this.Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the integer value representing the relative cost of the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cost")]
        public int? Cost {get; set; }

        /// <summary>
        /// Gets or sets the timespan for which the data was retrieved. Its value
        /// consists of two datetimes concatenated, separated by &#39;/&#39;.  This may be
        /// adjusted in the future and returned back from what was originally
        /// requested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timespan")]
        public string Timespan {get; set; }

        /// <summary>
        /// Gets or sets the interval (window size) for which the metric data was
        /// returned in.  This may be adjusted in the future and returned back from
        /// what was originally requested.  This is not present if a metadata request
        /// was made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "interval")]
        public System.TimeSpan? Interval {get; set; }

        /// <summary>
        /// Gets or sets the namespace of the metrics being queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "namespace")]
        public string NamespaceProperty {get; set; }

        /// <summary>
        /// Gets or sets the region of the resource being queried for metrics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceregion")]
        public string Resourceregion {get; set; }

        /// <summary>
        /// Gets or sets the value of the collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "value")]
        public System.Collections.Generic.IList<Metric> Value {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Timespan == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Timespan");
            }
            if (this.Value == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Value");
            }
            if (this.Cost != null)
            {
                if (this.Cost < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Cost", 0);
                }
            }



            if (this.Value != null)
            {
                foreach (var element in this.Value)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}