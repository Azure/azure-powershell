// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Monitor.Models
{
    using System.Linq;

    /// <summary>
    /// Criterion for dynamic threshold.
    /// </summary>
    [Newtonsoft.Json.JsonObject("DynamicThresholdCriterion")]
    public partial class DynamicMetricCriteria : MultiMetricCriteria
    {
        /// <summary>
        /// Initializes a new instance of the DynamicMetricCriteria class.
        /// </summary>
        public DynamicMetricCriteria()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DynamicMetricCriteria class.
        /// </summary>

        /// <param name="additionalProperties">The types of conditions for a multi resource alert.
        /// </param>

        /// <param name="name">Name of the criteria.
        /// </param>

        /// <param name="metricName">Name of the metric.
        /// </param>

        /// <param name="metricNamespace">Namespace of the metric.
        /// </param>

        /// <param name="timeAggregation">the criteria time aggregation types.
        /// Possible values include: &#39;Average&#39;, &#39;Count&#39;, &#39;Minimum&#39;, &#39;Maximum&#39;, &#39;Total&#39;</param>

        /// <param name="dimensions">List of dimension conditions.
        /// </param>

        /// <param name="skipMetricValidation">Allows creating an alert rule on a custom metric that isn&#39;t yet emitted, by
        /// causing the metric validation to be skipped.
        /// </param>

        /// <param name="operatorProperty">The operator used to compare the metric value against the threshold.
        /// Possible values include: &#39;GreaterThan&#39;, &#39;LessThan&#39;, &#39;GreaterOrLessThan&#39;</param>

        /// <param name="alertSensitivity">The extent of deviation required to trigger an alert. This will affect how
        /// tight the threshold is to the metric series pattern.
        /// Possible values include: &#39;Low&#39;, &#39;Medium&#39;, &#39;High&#39;</param>

        /// <param name="failingPeriods">The minimum number of violations required within the selected lookback time
        /// window required to raise an alert.
        /// </param>

        /// <param name="ignoreDataBefore">Use this option to set the date from which to start learning the metric
        /// historical data and calculate the dynamic thresholds (in ISO8601 format)
        /// </param>
        public DynamicMetricCriteria(string name, string metricName, string timeAggregation, string operatorProperty, string alertSensitivity, DynamicThresholdFailingPeriods failingPeriods, System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string metricNamespace = default(string), System.Collections.Generic.IList<MetricDimension> dimensions = default(System.Collections.Generic.IList<MetricDimension>), bool? skipMetricValidation = default(bool?), System.DateTime? ignoreDataBefore = default(System.DateTime?))

        : base(name, metricName, timeAggregation, additionalProperties, metricNamespace, dimensions, skipMetricValidation)
        {
            this.OperatorProperty = operatorProperty;
            this.AlertSensitivity = alertSensitivity;
            this.FailingPeriods = failingPeriods;
            this.IgnoreDataBefore = ignoreDataBefore;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the operator used to compare the metric value against the
        /// threshold. Possible values include: &#39;GreaterThan&#39;, &#39;LessThan&#39;, &#39;GreaterOrLessThan&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operator")]
        public string OperatorProperty {get; set; }

        /// <summary>
        /// Gets or sets the extent of deviation required to trigger an alert. This
        /// will affect how tight the threshold is to the metric series pattern. Possible values include: &#39;Low&#39;, &#39;Medium&#39;, &#39;High&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "alertSensitivity")]
        public string AlertSensitivity {get; set; }

        /// <summary>
        /// Gets or sets the minimum number of violations required within the selected
        /// lookback time window required to raise an alert.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failingPeriods")]
        public DynamicThresholdFailingPeriods FailingPeriods {get; set; }

        /// <summary>
        /// Gets or sets use this option to set the date from which to start learning
        /// the metric historical data and calculate the dynamic thresholds (in ISO8601
        /// format)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ignoreDataBefore")]
        public System.DateTime? IgnoreDataBefore {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.OperatorProperty == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "OperatorProperty");
            }
            if (this.AlertSensitivity == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AlertSensitivity");
            }
            if (this.FailingPeriods == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "FailingPeriods");
            }


            if (this.FailingPeriods != null)
            {
                this.FailingPeriods.Validate();
            }
        }
    }
}