// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Monitor.Models
{

    /// <summary>
    /// Defines values for ConditionOperator.
    /// </summary>


    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ConditionOperator
    {
        [System.Runtime.Serialization.EnumMember(Value = "GreaterThan")]
        GreaterThan,
        [System.Runtime.Serialization.EnumMember(Value = "GreaterThanOrEqual")]
        GreaterThanOrEqual,
        [System.Runtime.Serialization.EnumMember(Value = "LessThan")]
        LessThan,
        [System.Runtime.Serialization.EnumMember(Value = "LessThanOrEqual")]
        LessThanOrEqual
    }
    internal static class ConditionOperatorEnumExtension
    {
        internal static string ToSerializedValue(this ConditionOperator? value)
        {
            return value == null ? null : ((ConditionOperator)value).ToSerializedValue();
        }
        internal static string ToSerializedValue(this ConditionOperator value)
        {
            switch( value )
            {
                case ConditionOperator.GreaterThan:
                    return "GreaterThan";
                case ConditionOperator.GreaterThanOrEqual:
                    return "GreaterThanOrEqual";
                case ConditionOperator.LessThan:
                    return "LessThan";
                case ConditionOperator.LessThanOrEqual:
                    return "LessThanOrEqual";
            }
            return null;
        }
        internal static ConditionOperator? ParseConditionOperator(this string value)
        {
            switch( value )
            {
                case "GreaterThan":
                    return ConditionOperator.GreaterThan;
                case "GreaterThanOrEqual":
                    return ConditionOperator.GreaterThanOrEqual;
                case "LessThan":
                    return ConditionOperator.LessThan;
                case "LessThanOrEqual":
                    return ConditionOperator.LessThanOrEqual;
            }
            return null;
        }
    }
}