// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Monitor.Models
{
    using System.Linq;

    /// <summary>
    /// The trigger that results in a scaling action.
    /// </summary>
    public partial class MetricTrigger
    {
        /// <summary>
        /// Initializes a new instance of the MetricTrigger class.
        /// </summary>
        public MetricTrigger()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MetricTrigger class.
        /// </summary>

        /// <param name="metricName">the name of the metric that defines what the rule monitors.
        /// </param>

        /// <param name="metricNamespace">the namespace of the metric that defines what the rule monitors.
        /// </param>

        /// <param name="metricResourceUri">the resource identifier of the resource the rule monitors.
        /// </param>

        /// <param name="metricResourceLocation">the location of the resource the rule monitors.
        /// </param>

        /// <param name="timeGrain">the granularity of metrics the rule monitors. Must be one of the predefined
        /// values returned from metric definitions for the metric. Must be between 12
        /// hours and 1 minute.
        /// </param>

        /// <param name="statistic">the metric statistic type. How the metrics from multiple instances are
        /// combined.
        /// Possible values include: &#39;Average&#39;, &#39;Min&#39;, &#39;Max&#39;, &#39;Sum&#39;, &#39;Count&#39;</param>

        /// <param name="timeWindow">the range of time in which instance data is collected. This value must be
        /// greater than the delay in metric collection, which can vary from
        /// resource-to-resource. Must be between 12 hours and 5 minutes.
        /// </param>

        /// <param name="timeAggregation">time aggregation type. How the data that is collected should be combined
        /// over time. The default value is Average.
        /// Possible values include: &#39;Average&#39;, &#39;Minimum&#39;, &#39;Maximum&#39;, &#39;Total&#39;, &#39;Count&#39;,
        /// &#39;Last&#39;</param>

        /// <param name="operatorProperty">the operator that is used to compare the metric data and the threshold.
        /// Possible values include: &#39;Equals&#39;, &#39;NotEquals&#39;, &#39;GreaterThan&#39;,
        /// &#39;GreaterThanOrEqual&#39;, &#39;LessThan&#39;, &#39;LessThanOrEqual&#39;</param>

        /// <param name="threshold">the threshold of the metric that triggers the scale action.
        /// </param>

        /// <param name="dimensions">List of dimension conditions. For example:
        /// [{&#34;DimensionName&#34;:&#34;AppName&#34;,&#34;Operator&#34;:&#34;Equals&#34;,&#34;Values&#34;:[&#34;App1&#34;]},{&#34;DimensionName&#34;:&#34;Deployment&#34;,&#34;Operator&#34;:&#34;Equals&#34;,&#34;Values&#34;:[&#34;default&#34;]}].
        /// </param>

        /// <param name="dividePerInstance">a value indicating whether metric should divide per instance.
        /// </param>
        public MetricTrigger(string metricName, string metricResourceUri, System.TimeSpan timeGrain, MetricStatisticType statistic, System.TimeSpan timeWindow, TimeAggregationType timeAggregation, ComparisonOperationType operatorProperty, double threshold, string metricNamespace = default(string), string metricResourceLocation = default(string), System.Collections.Generic.IList<ScaleRuleMetricDimension> dimensions = default(System.Collections.Generic.IList<ScaleRuleMetricDimension>), bool? dividePerInstance = default(bool?))

        {
            this.MetricName = metricName;
            this.MetricNamespace = metricNamespace;
            this.MetricResourceUri = metricResourceUri;
            this.MetricResourceLocation = metricResourceLocation;
            this.TimeGrain = timeGrain;
            this.Statistic = statistic;
            this.TimeWindow = timeWindow;
            this.TimeAggregation = timeAggregation;
            this.OperatorProperty = operatorProperty;
            this.Threshold = threshold;
            this.Dimensions = dimensions;
            this.DividePerInstance = dividePerInstance;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the metric that defines what the rule monitors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metricName")]
        public string MetricName {get; set; }

        /// <summary>
        /// Gets or sets the namespace of the metric that defines what the rule
        /// monitors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metricNamespace")]
        public string MetricNamespace {get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the resource the rule monitors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metricResourceUri")]
        public string MetricResourceUri {get; set; }

        /// <summary>
        /// Gets or sets the location of the resource the rule monitors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metricResourceLocation")]
        public string MetricResourceLocation {get; set; }

        /// <summary>
        /// Gets or sets the granularity of metrics the rule monitors. Must be one of
        /// the predefined values returned from metric definitions for the metric. Must
        /// be between 12 hours and 1 minute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeGrain")]
        public System.TimeSpan TimeGrain {get; set; }

        /// <summary>
        /// Gets or sets the metric statistic type. How the metrics from multiple
        /// instances are combined. Possible values include: &#39;Average&#39;, &#39;Min&#39;, &#39;Max&#39;, &#39;Sum&#39;, &#39;Count&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "statistic")]
        public MetricStatisticType Statistic {get; set; }

        /// <summary>
        /// Gets or sets the range of time in which instance data is collected. This
        /// value must be greater than the delay in metric collection, which can vary
        /// from resource-to-resource. Must be between 12 hours and 5 minutes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeWindow")]
        public System.TimeSpan TimeWindow {get; set; }

        /// <summary>
        /// Gets or sets time aggregation type. How the data that is collected should
        /// be combined over time. The default value is Average. Possible values include: &#39;Average&#39;, &#39;Minimum&#39;, &#39;Maximum&#39;, &#39;Total&#39;, &#39;Count&#39;, &#39;Last&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeAggregation")]
        public TimeAggregationType TimeAggregation {get; set; }

        /// <summary>
        /// Gets or sets the operator that is used to compare the metric data and the
        /// threshold. Possible values include: &#39;Equals&#39;, &#39;NotEquals&#39;, &#39;GreaterThan&#39;, &#39;GreaterThanOrEqual&#39;, &#39;LessThan&#39;, &#39;LessThanOrEqual&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operator")]
        public ComparisonOperationType OperatorProperty {get; set; }

        /// <summary>
        /// Gets or sets the threshold of the metric that triggers the scale action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "threshold")]
        public double Threshold {get; set; }

        /// <summary>
        /// Gets or sets list of dimension conditions. For example:
        /// [{&#34;DimensionName&#34;:&#34;AppName&#34;,&#34;Operator&#34;:&#34;Equals&#34;,&#34;Values&#34;:[&#34;App1&#34;]},{&#34;DimensionName&#34;:&#34;Deployment&#34;,&#34;Operator&#34;:&#34;Equals&#34;,&#34;Values&#34;:[&#34;default&#34;]}].
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dimensions")]
        public System.Collections.Generic.IList<ScaleRuleMetricDimension> Dimensions {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether metric should divide per instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dividePerInstance")]
        public bool? DividePerInstance {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.MetricName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MetricName");
            }
            if (this.MetricResourceUri == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MetricResourceUri");
            }







            if (this.Dimensions != null)
            {
                foreach (var element in this.Dimensions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}