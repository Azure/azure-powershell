// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Monitor.Models
{

    /// <summary>
    /// Defines values for TimeAggregationOperator.
    /// </summary>


    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum TimeAggregationOperator
    {
        [System.Runtime.Serialization.EnumMember(Value = "Average")]
        Average,
        [System.Runtime.Serialization.EnumMember(Value = "Minimum")]
        Minimum,
        [System.Runtime.Serialization.EnumMember(Value = "Maximum")]
        Maximum,
        [System.Runtime.Serialization.EnumMember(Value = "Total")]
        Total,
        [System.Runtime.Serialization.EnumMember(Value = "Last")]
        Last
    }
    internal static class TimeAggregationOperatorEnumExtension
    {
        internal static string ToSerializedValue(this TimeAggregationOperator? value)
        {
            return value == null ? null : ((TimeAggregationOperator)value).ToSerializedValue();
        }
        internal static string ToSerializedValue(this TimeAggregationOperator value)
        {
            switch( value )
            {
                case TimeAggregationOperator.Average:
                    return "Average";
                case TimeAggregationOperator.Minimum:
                    return "Minimum";
                case TimeAggregationOperator.Maximum:
                    return "Maximum";
                case TimeAggregationOperator.Total:
                    return "Total";
                case TimeAggregationOperator.Last:
                    return "Last";
            }
            return null;
        }
        internal static TimeAggregationOperator? ParseTimeAggregationOperator(this string value)
        {
            switch( value )
            {
                case "Average":
                    return TimeAggregationOperator.Average;
                case "Minimum":
                    return TimeAggregationOperator.Minimum;
                case "Maximum":
                    return TimeAggregationOperator.Maximum;
                case "Total":
                    return TimeAggregationOperator.Total;
                case "Last":
                    return TimeAggregationOperator.Last;
            }
            return null;
        }
    }
}