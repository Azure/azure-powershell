// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Monitor.Models
{
    using System.Linq;

    /// <summary>
    /// The result data of a query.
    /// </summary>
    public partial class Metric
    {
        /// <summary>
        /// Initializes a new instance of the Metric class.
        /// </summary>
        public Metric()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Metric class.
        /// </summary>

        /// <param name="id">the metric Id.
        /// </param>

        /// <param name="type">the resource type of the metric resource.
        /// </param>

        /// <param name="name">the name and the display name of the metric, i.e. it is localizable string.
        /// </param>

        /// <param name="displayDescription">Detailed description of this metric.
        /// </param>

        /// <param name="errorCode">&#39;Success&#39; or the error details on query failures for this metric.
        /// </param>

        /// <param name="errorMessage">Error message encountered querying this specific metric.
        /// </param>

        /// <param name="unit">The unit of the metric.
        /// Possible values include: &#39;Count&#39;, &#39;Bytes&#39;, &#39;Seconds&#39;, &#39;CountPerSecond&#39;,
        /// &#39;BytesPerSecond&#39;, &#39;Percent&#39;, &#39;MilliSeconds&#39;, &#39;ByteSeconds&#39;, &#39;Unspecified&#39;,
        /// &#39;Cores&#39;, &#39;MilliCores&#39;, &#39;NanoCores&#39;, &#39;BitsPerSecond&#39;</param>

        /// <param name="timeseries">the time series returned when a data query is performed.
        /// </param>
        public Metric(string id, string type, LocalizableString name, string unit, System.Collections.Generic.IList<TimeSeriesElement> timeseries, string displayDescription = default(string), string errorCode = default(string), string errorMessage = default(string))

        {
            this.Id = id;
            this.Type = type;
            this.Name = name;
            this.DisplayDescription = displayDescription;
            this.ErrorCode = errorCode;
            this.ErrorMessage = errorMessage;
            this.Unit = unit;
            this.Timeseries = timeseries;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the metric Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; set; }

        /// <summary>
        /// Gets or sets the resource type of the metric resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; set; }

        /// <summary>
        /// Gets or sets the name and the display name of the metric, i.e. it is
        /// localizable string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public LocalizableString Name {get; set; }

        /// <summary>
        /// Gets or sets detailed description of this metric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "displayDescription")]
        public string DisplayDescription {get; set; }

        /// <summary>
        /// Gets or sets &#39;Success&#39; or the error details on query failures for this
        /// metric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "errorCode")]
        public string ErrorCode {get; set; }

        /// <summary>
        /// Gets or sets error message encountered querying this specific metric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "errorMessage")]
        public string ErrorMessage {get; set; }

        /// <summary>
        /// Gets or sets the unit of the metric. Possible values include: &#39;Count&#39;, &#39;Bytes&#39;, &#39;Seconds&#39;, &#39;CountPerSecond&#39;, &#39;BytesPerSecond&#39;, &#39;Percent&#39;, &#39;MilliSeconds&#39;, &#39;ByteSeconds&#39;, &#39;Unspecified&#39;, &#39;Cores&#39;, &#39;MilliCores&#39;, &#39;NanoCores&#39;, &#39;BitsPerSecond&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "unit")]
        public string Unit {get; set; }

        /// <summary>
        /// Gets or sets the time series returned when a data query is performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeseries")]
        public System.Collections.Generic.IList<TimeSeriesElement> Timeseries {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Id == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Id");
            }
            if (this.Type == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Type");
            }
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (this.Unit == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Unit");
            }
            if (this.Timeseries == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Timeseries");
            }


            if (this.Name != null)
            {
                this.Name.Validate();
            }





        }
    }
}