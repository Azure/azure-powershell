// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Monitor.Models
{
    using System.Linq;

    /// <summary>
    /// Criterion to filter metrics.
    /// </summary>
    [Newtonsoft.Json.JsonObject("StaticThresholdCriterion")]
    public partial class MetricCriteria : MultiMetricCriteria
    {
        /// <summary>
        /// Initializes a new instance of the MetricCriteria class.
        /// </summary>
        public MetricCriteria()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MetricCriteria class.
        /// </summary>

        /// <param name="name">Name of the criteria.
        /// </param>

        /// <param name="metricName">Name of the metric.
        /// </param>

        /// <param name="metricNamespace">Namespace of the metric.
        /// </param>

        /// <param name="timeAggregation">the criteria time aggregation types.
        /// Possible values include: &#39;Average&#39;, &#39;Count&#39;, &#39;Minimum&#39;, &#39;Maximum&#39;, &#39;Total&#39;</param>

        /// <param name="dimensions">List of dimension conditions.
        /// </param>

        /// <param name="skipMetricValidation">Allows creating an alert rule on a custom metric that isn&#39;t yet emitted, by
        /// causing the metric validation to be skipped.
        /// </param>

        /// <param name="operatorProperty">the criteria operator.
        /// Possible values include: &#39;Equals&#39;, &#39;GreaterThan&#39;, &#39;GreaterThanOrEqual&#39;,
        /// &#39;LessThan&#39;, &#39;LessThanOrEqual&#39;</param>

        /// <param name="threshold">the criteria threshold value that activates the alert.
        /// </param>
        public MetricCriteria(string name, string metricName, string timeAggregation, string operatorProperty, double threshold, string metricNamespace = default(string), System.Collections.Generic.IList<MetricDimension> dimensions = default(System.Collections.Generic.IList<MetricDimension>), bool? skipMetricValidation = default(bool?))

        : base(name, metricName, timeAggregation, metricNamespace, dimensions, skipMetricValidation)
        {
            this.OperatorProperty = operatorProperty;
            this.Threshold = threshold;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the criteria operator. Possible values include: &#39;Equals&#39;, &#39;GreaterThan&#39;, &#39;GreaterThanOrEqual&#39;, &#39;LessThan&#39;, &#39;LessThanOrEqual&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operator")]
        public string OperatorProperty {get; set; }

        /// <summary>
        /// Gets or sets the criteria threshold value that activates the alert.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "threshold")]
        public double Threshold {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.OperatorProperty == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "OperatorProperty");
            }

        }
    }
}