// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Monitor.Models
{
    using System.Linq;

    /// <summary>
    /// Metric definition class specifies the metadata for a metric.
    /// </summary>
    public partial class MetricDefinition
    {
        /// <summary>
        /// Initializes a new instance of the MetricDefinition class.
        /// </summary>
        public MetricDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MetricDefinition class.
        /// </summary>

        /// <param name="isDimensionRequired">Flag to indicate whether the dimension is required.
        /// </param>

        /// <param name="resourceId">the resource identifier of the resource that emitted the metric.
        /// </param>

        /// <param name="namespaceProperty">the namespace the metric belongs to.
        /// </param>

        /// <param name="name">the name and the display name of the metric, i.e. it is a localizable
        /// string.
        /// </param>

        /// <param name="displayDescription">Detailed description of this metric.
        /// </param>

        /// <param name="category">Custom category name for this metric.
        /// </param>

        /// <param name="metricClass">The class of the metric.
        /// Possible values include: &#39;Availability&#39;, &#39;Transactions&#39;, &#39;Errors&#39;,
        /// &#39;Latency&#39;, &#39;Saturation&#39;</param>

        /// <param name="unit">The unit of the metric.
        /// Possible values include: &#39;Count&#39;, &#39;Bytes&#39;, &#39;Seconds&#39;, &#39;CountPerSecond&#39;,
        /// &#39;BytesPerSecond&#39;, &#39;Percent&#39;, &#39;MilliSeconds&#39;, &#39;ByteSeconds&#39;, &#39;Unspecified&#39;,
        /// &#39;Cores&#39;, &#39;MilliCores&#39;, &#39;NanoCores&#39;, &#39;BitsPerSecond&#39;</param>

        /// <param name="primaryAggregationType">the primary aggregation type value defining how to use the values for
        /// display.
        /// Possible values include: &#39;None&#39;, &#39;Average&#39;, &#39;Count&#39;, &#39;Minimum&#39;, &#39;Maximum&#39;,
        /// &#39;Total&#39;</param>

        /// <param name="supportedAggregationTypes">the collection of what aggregation types are supported.
        /// </param>

        /// <param name="metricAvailabilities">the collection of what aggregation intervals are available to be queried.
        /// </param>

        /// <param name="id">the resource identifier of the metric definition.
        /// </param>

        /// <param name="dimensions">the name and the display name of the dimension, i.e. it is a localizable
        /// string.
        /// </param>
        public MetricDefinition(bool? isDimensionRequired = default(bool?), string resourceId = default(string), string namespaceProperty = default(string), LocalizableString name = default(LocalizableString), string displayDescription = default(string), string category = default(string), string metricClass = default(string), string unit = default(string), AggregationType? primaryAggregationType = default(AggregationType?), System.Collections.Generic.IList<AggregationType?> supportedAggregationTypes = default(System.Collections.Generic.IList<AggregationType?>), System.Collections.Generic.IList<MetricAvailability> metricAvailabilities = default(System.Collections.Generic.IList<MetricAvailability>), string id = default(string), System.Collections.Generic.IList<LocalizableString> dimensions = default(System.Collections.Generic.IList<LocalizableString>))

        {
            this.IsDimensionRequired = isDimensionRequired;
            this.ResourceId = resourceId;
            this.NamespaceProperty = namespaceProperty;
            this.Name = name;
            this.DisplayDescription = displayDescription;
            this.Category = category;
            this.MetricClass = metricClass;
            this.Unit = unit;
            this.PrimaryAggregationType = primaryAggregationType;
            this.SupportedAggregationTypes = supportedAggregationTypes;
            this.MetricAvailabilities = metricAvailabilities;
            this.Id = id;
            this.Dimensions = dimensions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets flag to indicate whether the dimension is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isDimensionRequired")]
        public bool? IsDimensionRequired {get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the resource that emitted the
        /// metric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceId")]
        public string ResourceId {get; set; }

        /// <summary>
        /// Gets or sets the namespace the metric belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "namespace")]
        public string NamespaceProperty {get; set; }

        /// <summary>
        /// Gets or sets the name and the display name of the metric, i.e. it is a
        /// localizable string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public LocalizableString Name {get; set; }

        /// <summary>
        /// Gets or sets detailed description of this metric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "displayDescription")]
        public string DisplayDescription {get; set; }

        /// <summary>
        /// Gets or sets custom category name for this metric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "category")]
        public string Category {get; set; }

        /// <summary>
        /// Gets or sets the class of the metric. Possible values include: &#39;Availability&#39;, &#39;Transactions&#39;, &#39;Errors&#39;, &#39;Latency&#39;, &#39;Saturation&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metricClass")]
        public string MetricClass {get; set; }

        /// <summary>
        /// Gets or sets the unit of the metric. Possible values include: &#39;Count&#39;, &#39;Bytes&#39;, &#39;Seconds&#39;, &#39;CountPerSecond&#39;, &#39;BytesPerSecond&#39;, &#39;Percent&#39;, &#39;MilliSeconds&#39;, &#39;ByteSeconds&#39;, &#39;Unspecified&#39;, &#39;Cores&#39;, &#39;MilliCores&#39;, &#39;NanoCores&#39;, &#39;BitsPerSecond&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "unit")]
        public string Unit {get; set; }

        /// <summary>
        /// Gets or sets the primary aggregation type value defining how to use the
        /// values for display. Possible values include: &#39;None&#39;, &#39;Average&#39;, &#39;Count&#39;, &#39;Minimum&#39;, &#39;Maximum&#39;, &#39;Total&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryAggregationType")]
        public AggregationType? PrimaryAggregationType {get; set; }

        /// <summary>
        /// Gets or sets the collection of what aggregation types are supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supportedAggregationTypes")]
        public System.Collections.Generic.IList<AggregationType?> SupportedAggregationTypes {get; set; }

        /// <summary>
        /// Gets or sets the collection of what aggregation intervals are available to
        /// be queried.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metricAvailabilities")]
        public System.Collections.Generic.IList<MetricAvailability> MetricAvailabilities {get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the metric definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; set; }

        /// <summary>
        /// Gets or sets the name and the display name of the dimension, i.e. it is a
        /// localizable string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dimensions")]
        public System.Collections.Generic.IList<LocalizableString> Dimensions {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.Name != null)
            {
                this.Name.Validate();
            }








            if (this.Dimensions != null)
            {
                foreach (var element in this.Dimensions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}