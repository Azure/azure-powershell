// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Monitor.Models
{
    using System.Linq;

    /// <summary>
    /// The autoscale setting object for patch operations.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class AutoscaleSettingResourcePatch
    {
        /// <summary>
        /// Initializes a new instance of the AutoscaleSettingResourcePatch class.
        /// </summary>
        public AutoscaleSettingResourcePatch()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AutoscaleSettingResourcePatch class.
        /// </summary>

        /// <param name="tags">Resource tags
        /// </param>

        /// <param name="profiles">the collection of automatic scaling profiles that specify different scaling
        /// parameters for different time periods. A maximum of 20 profiles can be
        /// specified.
        /// </param>

        /// <param name="notifications">the collection of notifications.
        /// </param>

        /// <param name="enabled">the enabled flag. Specifies whether automatic scaling is enabled for the
        /// resource. The default value is &#39;true&#39;.
        /// </param>

        /// <param name="name">the name of the autoscale setting.
        /// </param>

        /// <param name="targetResourceUri">the resource identifier of the resource that the autoscale setting should
        /// be added to.
        /// </param>

        /// <param name="targetResourceLocation">the location of the resource that the autoscale setting should be added to.
        /// </param>
        public AutoscaleSettingResourcePatch(System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IList<AutoscaleProfile> profiles = default(System.Collections.Generic.IList<AutoscaleProfile>), System.Collections.Generic.IList<AutoscaleNotification> notifications = default(System.Collections.Generic.IList<AutoscaleNotification>), bool? enabled = default(bool?), string name = default(string), string targetResourceUri = default(string), string targetResourceLocation = default(string))

        {
            this.Tags = tags;
            this.Profiles = profiles;
            this.Notifications = notifications;
            this.Enabled = enabled;
            this.Name = name;
            this.TargetResourceUri = targetResourceUri;
            this.TargetResourceLocation = targetResourceLocation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets resource tags
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets or sets the collection of automatic scaling profiles that specify
        /// different scaling parameters for different time periods. A maximum of 20
        /// profiles can be specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.profiles")]
        public System.Collections.Generic.IList<AutoscaleProfile> Profiles {get; set; }

        /// <summary>
        /// Gets or sets the collection of notifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.notifications")]
        public System.Collections.Generic.IList<AutoscaleNotification> Notifications {get; set; }

        /// <summary>
        /// Gets or sets the enabled flag. Specifies whether automatic scaling is
        /// enabled for the resource. The default value is &#39;true&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enabled")]
        public bool? Enabled {get; set; }

        /// <summary>
        /// Gets or sets the name of the autoscale setting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the resource that the autoscale
        /// setting should be added to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.targetResourceUri")]
        public string TargetResourceUri {get; set; }

        /// <summary>
        /// Gets or sets the location of the resource that the autoscale setting should
        /// be added to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.targetResourceLocation")]
        public string TargetResourceLocation {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.Profiles != null)
            {
                if (this.Profiles.Count > 20)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxItems, "Profiles", 20);
                }
                foreach (var element in this.Profiles)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }




        }
    }
}