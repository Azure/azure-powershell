// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Monitor.Models
{
    using System.Linq;

    /// <summary>
    /// The baseline values for a single time series.
    /// </summary>
    public partial class TimeSeriesBaseline
    {
        /// <summary>
        /// Initializes a new instance of the TimeSeriesBaseline class.
        /// </summary>
        public TimeSeriesBaseline()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TimeSeriesBaseline class.
        /// </summary>

        /// <param name="aggregation">The aggregation type of the metric.
        /// </param>

        /// <param name="dimensions">The dimensions of this time series.
        /// </param>

        /// <param name="timestamps">The list of timestamps of the baselines.
        /// </param>

        /// <param name="data">The baseline values for each sensitivity.
        /// </param>

        /// <param name="metadataValues">The baseline metadata values.
        /// </param>
        public TimeSeriesBaseline(string aggregation, System.Collections.Generic.IList<System.DateTime?> timestamps, System.Collections.Generic.IList<SingleBaseline> data, System.Collections.Generic.IList<MetricSingleDimension> dimensions = default(System.Collections.Generic.IList<MetricSingleDimension>), System.Collections.Generic.IList<BaselineMetadata> metadataValues = default(System.Collections.Generic.IList<BaselineMetadata>))

        {
            this.Aggregation = aggregation;
            this.Dimensions = dimensions;
            this.Timestamps = timestamps;
            this.Data = data;
            this.MetadataValues = metadataValues;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the aggregation type of the metric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "aggregation")]
        public string Aggregation {get; set; }

        /// <summary>
        /// Gets or sets the dimensions of this time series.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dimensions")]
        public System.Collections.Generic.IList<MetricSingleDimension> Dimensions {get; set; }

        /// <summary>
        /// Gets or sets the list of timestamps of the baselines.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timestamps")]
        public System.Collections.Generic.IList<System.DateTime?> Timestamps {get; set; }

        /// <summary>
        /// Gets or sets the baseline values for each sensitivity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "data")]
        public System.Collections.Generic.IList<SingleBaseline> Data {get; set; }

        /// <summary>
        /// Gets or sets the baseline metadata values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metadataValues")]
        public System.Collections.Generic.IList<BaselineMetadata> MetadataValues {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Aggregation == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Aggregation");
            }
            if (this.Timestamps == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Timestamps");
            }
            if (this.Data == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Data");
            }

            if (this.Dimensions != null)
            {
                foreach (var element in this.Dimensions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

            if (this.Data != null)
            {
                foreach (var element in this.Data)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.MetadataValues != null)
            {
                foreach (var element in this.MetadataValues)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}