// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Monitor.Models
{
    using System.Linq;

    /// <summary>
    /// The Azure event log entries are of type EventData
    /// </summary>
    public partial class EventData
    {
        /// <summary>
        /// Initializes a new instance of the EventData class.
        /// </summary>
        public EventData()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EventData class.
        /// </summary>

        /// <param name="authorization">The sender authorization information.
        /// </param>

        /// <param name="claims">key value pairs to identify ARM permissions.
        /// </param>

        /// <param name="caller">the email address of the user who has performed the operation, the UPN
        /// claim or SPN claim based on availability.
        /// </param>

        /// <param name="description">the description of the event.
        /// </param>

        /// <param name="id">the Id of this event as required by ARM for RBAC. It contains the
        /// EventDataID and a timestamp information.
        /// </param>

        /// <param name="eventDataId">the event data Id. This is a unique identifier for an event.
        /// </param>

        /// <param name="correlationId">the correlation Id, usually a GUID in the string format. The correlation Id
        /// is shared among the events that belong to the same uber operation.
        /// </param>

        /// <param name="eventName">the event name. This value should not be confused with OperationName. For
        /// practical purposes, OperationName might be more appealing to end users.
        /// </param>

        /// <param name="category">the event category.
        /// </param>

        /// <param name="httpRequest">the HTTP request info. Usually includes the &#39;clientRequestId&#39;,
        /// &#39;clientIpAddress&#39; (IP address of the user who initiated the event) and
        /// &#39;method&#39; (HTTP method e.g. PUT).
        /// </param>

        /// <param name="level">the event level
        /// Possible values include: &#39;Critical&#39;, &#39;Error&#39;, &#39;Warning&#39;, &#39;Informational&#39;,
        /// &#39;Verbose&#39;</param>

        /// <param name="resourceGroupName">the resource group name of the impacted resource.
        /// </param>

        /// <param name="resourceProviderName">the resource provider name of the impacted resource.
        /// </param>

        /// <param name="resourceId">the resource uri that uniquely identifies the resource that caused this
        /// event.
        /// </param>

        /// <param name="resourceType">the resource type
        /// </param>

        /// <param name="operationId">It is usually a GUID shared among the events corresponding to single
        /// operation. This value should not be confused with EventName.
        /// </param>

        /// <param name="operationName">the operation name.
        /// </param>

        /// <param name="properties">the set of &lt;Key, Value&gt; pairs (usually a Dictionary&lt;String, String&gt;) that
        /// includes details about the event.
        /// </param>

        /// <param name="status">a string describing the status of the operation. Some typical values are:
        /// Started, In progress, Succeeded, Failed, Resolved.
        /// </param>

        /// <param name="subStatus">the event sub status. Most of the time, when included, this captures the
        /// HTTP status code of the REST call. Common values are: OK (HTTP Status Code:
        /// 200), Created (HTTP Status Code: 201), Accepted (HTTP Status Code: 202), No
        /// Content (HTTP Status Code: 204), Bad Request(HTTP Status Code: 400), Not
        /// Found (HTTP Status Code: 404), Conflict (HTTP Status Code: 409), Internal
        /// Server Error (HTTP Status Code: 500), Service Unavailable (HTTP Status
        /// Code:503), Gateway Timeout (HTTP Status Code: 504)
        /// </param>

        /// <param name="eventTimestamp">the timestamp of when the event was generated by the Azure service
        /// processing the request corresponding the event. It in ISO 8601 format.
        /// </param>

        /// <param name="submissionTimestamp">the timestamp of when the event became available for querying via this API.
        /// It is in ISO 8601 format. This value should not be confused eventTimestamp.
        /// As there might be a delay between the occurrence time of the event, and the
        /// time that the event is submitted to the Azure logging infrastructure.
        /// </param>

        /// <param name="subscriptionId">the Azure subscription Id usually a GUID.
        /// </param>

        /// <param name="tenantId">the Azure tenant Id
        /// </param>
        public EventData(SenderAuthorization authorization = default(SenderAuthorization), System.Collections.Generic.IDictionary<string, string> claims = default(System.Collections.Generic.IDictionary<string, string>), string caller = default(string), string description = default(string), string id = default(string), string eventDataId = default(string), string correlationId = default(string), LocalizableString eventName = default(LocalizableString), LocalizableString category = default(LocalizableString), HttpRequestInfo httpRequest = default(HttpRequestInfo), EventLevel? level = default(EventLevel?), string resourceGroupName = default(string), LocalizableString resourceProviderName = default(LocalizableString), string resourceId = default(string), LocalizableString resourceType = default(LocalizableString), string operationId = default(string), LocalizableString operationName = default(LocalizableString), System.Collections.Generic.IDictionary<string, string> properties = default(System.Collections.Generic.IDictionary<string, string>), LocalizableString status = default(LocalizableString), LocalizableString subStatus = default(LocalizableString), System.DateTime? eventTimestamp = default(System.DateTime?), System.DateTime? submissionTimestamp = default(System.DateTime?), string subscriptionId = default(string), string tenantId = default(string))

        {
            this.Authorization = authorization;
            this.Claims = claims;
            this.Caller = caller;
            this.Description = description;
            this.Id = id;
            this.EventDataId = eventDataId;
            this.CorrelationId = correlationId;
            this.EventName = eventName;
            this.Category = category;
            this.HttpRequest = httpRequest;
            this.Level = level;
            this.ResourceGroupName = resourceGroupName;
            this.ResourceProviderName = resourceProviderName;
            this.ResourceId = resourceId;
            this.ResourceType = resourceType;
            this.OperationId = operationId;
            this.OperationName = operationName;
            this.Properties = properties;
            this.Status = status;
            this.SubStatus = subStatus;
            this.EventTimestamp = eventTimestamp;
            this.SubmissionTimestamp = submissionTimestamp;
            this.SubscriptionId = subscriptionId;
            this.TenantId = tenantId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the sender authorization information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authorization")]
        public SenderAuthorization Authorization {get; private set; }

        /// <summary>
        /// Gets key value pairs to identify ARM permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "claims")]
        public System.Collections.Generic.IDictionary<string, string> Claims {get; private set; }

        /// <summary>
        /// Gets the email address of the user who has performed the operation, the UPN
        /// claim or SPN claim based on availability.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "caller")]
        public string Caller {get; private set; }

        /// <summary>
        /// Gets the description of the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; private set; }

        /// <summary>
        /// Gets the Id of this event as required by ARM for RBAC. It contains the
        /// EventDataID and a timestamp information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; private set; }

        /// <summary>
        /// Gets the event data Id. This is a unique identifier for an event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "eventDataId")]
        public string EventDataId {get; private set; }

        /// <summary>
        /// Gets the correlation Id, usually a GUID in the string format. The
        /// correlation Id is shared among the events that belong to the same uber
        /// operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "correlationId")]
        public string CorrelationId {get; private set; }

        /// <summary>
        /// Gets the event name. This value should not be confused with OperationName.
        /// For practical purposes, OperationName might be more appealing to end users.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "eventName")]
        public LocalizableString EventName {get; private set; }

        /// <summary>
        /// Gets the event category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "category")]
        public LocalizableString Category {get; private set; }

        /// <summary>
        /// Gets the HTTP request info. Usually includes the &#39;clientRequestId&#39;,
        /// &#39;clientIpAddress&#39; (IP address of the user who initiated the event) and
        /// &#39;method&#39; (HTTP method e.g. PUT).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "httpRequest")]
        public HttpRequestInfo HttpRequest {get; private set; }

        /// <summary>
        /// Gets the event level Possible values include: &#39;Critical&#39;, &#39;Error&#39;, &#39;Warning&#39;, &#39;Informational&#39;, &#39;Verbose&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "level")]
        public EventLevel? Level {get; private set; }

        /// <summary>
        /// Gets the resource group name of the impacted resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceGroupName")]
        public string ResourceGroupName {get; private set; }

        /// <summary>
        /// Gets the resource provider name of the impacted resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceProviderName")]
        public LocalizableString ResourceProviderName {get; private set; }

        /// <summary>
        /// Gets the resource uri that uniquely identifies the resource that caused
        /// this event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceId")]
        public string ResourceId {get; private set; }

        /// <summary>
        /// Gets the resource type
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceType")]
        public LocalizableString ResourceType {get; private set; }

        /// <summary>
        /// Gets it is usually a GUID shared among the events corresponding to single
        /// operation. This value should not be confused with EventName.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operationId")]
        public string OperationId {get; private set; }

        /// <summary>
        /// Gets the operation name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operationName")]
        public LocalizableString OperationName {get; private set; }

        /// <summary>
        /// Gets the set of &lt;Key, Value&gt; pairs (usually a Dictionary&lt;String, String&gt;)
        /// that includes details about the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties")]
        public System.Collections.Generic.IDictionary<string, string> Properties {get; private set; }

        /// <summary>
        /// Gets a string describing the status of the operation. Some typical values
        /// are: Started, In progress, Succeeded, Failed, Resolved.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public LocalizableString Status {get; private set; }

        /// <summary>
        /// Gets the event sub status. Most of the time, when included, this captures
        /// the HTTP status code of the REST call. Common values are: OK (HTTP Status
        /// Code: 200), Created (HTTP Status Code: 201), Accepted (HTTP Status Code:
        /// 202), No Content (HTTP Status Code: 204), Bad Request(HTTP Status Code:
        /// 400), Not Found (HTTP Status Code: 404), Conflict (HTTP Status Code: 409),
        /// Internal Server Error (HTTP Status Code: 500), Service Unavailable (HTTP
        /// Status Code:503), Gateway Timeout (HTTP Status Code: 504)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subStatus")]
        public LocalizableString SubStatus {get; private set; }

        /// <summary>
        /// Gets the timestamp of when the event was generated by the Azure service
        /// processing the request corresponding the event. It in ISO 8601 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "eventTimestamp")]
        public System.DateTime? EventTimestamp {get; private set; }

        /// <summary>
        /// Gets the timestamp of when the event became available for querying via this
        /// API. It is in ISO 8601 format. This value should not be confused
        /// eventTimestamp. As there might be a delay between the occurrence time of
        /// the event, and the time that the event is submitted to the Azure logging
        /// infrastructure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "submissionTimestamp")]
        public System.DateTime? SubmissionTimestamp {get; private set; }

        /// <summary>
        /// Gets the Azure subscription Id usually a GUID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subscriptionId")]
        public string SubscriptionId {get; private set; }

        /// <summary>
        /// Gets the Azure tenant Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tenantId")]
        public string TenantId {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {







            if (this.EventName != null)
            {
                this.EventName.Validate();
            }
            if (this.Category != null)
            {
                this.Category.Validate();
            }



            if (this.ResourceProviderName != null)
            {
                this.ResourceProviderName.Validate();
            }

            if (this.ResourceType != null)
            {
                this.ResourceType.Validate();
            }

            if (this.OperationName != null)
            {
                this.OperationName.Validate();
            }

            if (this.Status != null)
            {
                this.Status.Validate();
            }
            if (this.SubStatus != null)
            {
                this.SubStatus.Validate();
            }


        }
    }
}