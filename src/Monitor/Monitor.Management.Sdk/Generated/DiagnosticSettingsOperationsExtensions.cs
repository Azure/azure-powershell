// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Monitor
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DiagnosticSettingsOperations
    /// </summary>
    public static partial class DiagnosticSettingsOperationsExtensions
    {
        /// <summary>
        /// Gets the active diagnostic settings for the specified resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceUri'>
        /// The identifier of the resource.
        /// </param>
        /// <param name='name'>
        /// The name of the diagnostic setting.
        /// </param>
        public static DiagnosticSettingsResource Get(this IDiagnosticSettingsOperations operations, string resourceUri, string name)
        {
                return ((IDiagnosticSettingsOperations)operations).GetAsync(resourceUri, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the active diagnostic settings for the specified resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceUri'>
        /// The identifier of the resource.
        /// </param>
        /// <param name='name'>
        /// The name of the diagnostic setting.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DiagnosticSettingsResource> GetAsync(this IDiagnosticSettingsOperations operations, string resourceUri, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceUri, name, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates diagnostic settings for the specified resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceUri'>
        /// The identifier of the resource.
        /// </param>
        /// <param name='name'>
        /// The name of the diagnostic setting.
        /// </param>
        public static DiagnosticSettingsResource CreateOrUpdate(this IDiagnosticSettingsOperations operations, string resourceUri, string name, DiagnosticSettingsResource parameters)
        {
                return ((IDiagnosticSettingsOperations)operations).CreateOrUpdateAsync(resourceUri, name, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates diagnostic settings for the specified resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceUri'>
        /// The identifier of the resource.
        /// </param>
        /// <param name='name'>
        /// The name of the diagnostic setting.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DiagnosticSettingsResource> CreateOrUpdateAsync(this IDiagnosticSettingsOperations operations, string resourceUri, string name, DiagnosticSettingsResource parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceUri, name, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes existing diagnostic settings for the specified resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceUri'>
        /// The identifier of the resource.
        /// </param>
        /// <param name='name'>
        /// The name of the diagnostic setting.
        /// </param>
        public static void Delete(this IDiagnosticSettingsOperations operations, string resourceUri, string name)
        {
                ((IDiagnosticSettingsOperations)operations).DeleteAsync(resourceUri, name).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes existing diagnostic settings for the specified resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceUri'>
        /// The identifier of the resource.
        /// </param>
        /// <param name='name'>
        /// The name of the diagnostic setting.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IDiagnosticSettingsOperations operations, string resourceUri, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceUri, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets the active diagnostic settings list for the specified resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceUri'>
        /// The identifier of the resource.
        /// </param>
        public static DiagnosticSettingsResourceCollection List(this IDiagnosticSettingsOperations operations, string resourceUri)
        {
                return ((IDiagnosticSettingsOperations)operations).ListAsync(resourceUri).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the active diagnostic settings list for the specified resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceUri'>
        /// The identifier of the resource.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DiagnosticSettingsResourceCollection> ListAsync(this IDiagnosticSettingsOperations operations, string resourceUri, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceUri, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
