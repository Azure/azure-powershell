// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Metric.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Extensions;

    /// <summary>
    /// Query parameters can also be specified in the body, specifying the same parameter in both the body and query parameters
    /// will result in an error.
    /// </summary>
    public partial class SubscriptionScopeMetricsRequestBodyParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.ISubscriptionScopeMetricsRequestBodyParameters,
        Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.ISubscriptionScopeMetricsRequestBodyParametersInternal
    {

        /// <summary>Backing field for <see cref="Aggregation" /> property.</summary>
        private string _aggregation;

        /// <summary>The list of aggregation types (comma separated) to retrieve.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Origin(Microsoft.Azure.PowerShell.Cmdlets.Metric.PropertyOrigin.Owned)]
        public string Aggregation { get => this._aggregation; set => this._aggregation = value; }

        /// <summary>Backing field for <see cref="AutoAdjustTimegrain" /> property.</summary>
        private bool? _autoAdjustTimegrain;

        /// <summary>
        /// When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the
        /// closest supported timespan. When set to false, an error is returned for invalid timespan parameters. Defaults to false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Origin(Microsoft.Azure.PowerShell.Cmdlets.Metric.PropertyOrigin.Owned)]
        public bool? AutoAdjustTimegrain { get => this._autoAdjustTimegrain; set => this._autoAdjustTimegrain = value; }

        /// <summary>Backing field for <see cref="Filter" /> property.</summary>
        private string _filter;

        /// <summary>
        /// The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>-
        /// Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>-
        /// Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical
        /// or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A
        /// eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and
        /// C eq ‘*’**.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Origin(Microsoft.Azure.PowerShell.Cmdlets.Metric.PropertyOrigin.Owned)]
        public string Filter { get => this._filter; set => this._filter = value; }

        /// <summary>Backing field for <see cref="Interval" /> property.</summary>
        private string _interval;

        /// <summary>
        /// The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special case for 'FULL' value
        /// that returns single datapoint for entire time span requested.
        /// *Examples: PT15M, PT1H, P1D, FULL*
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Origin(Microsoft.Azure.PowerShell.Cmdlets.Metric.PropertyOrigin.Owned)]
        public string Interval { get => this._interval; set => this._interval = value; }

        /// <summary>Backing field for <see cref="MetricName" /> property.</summary>
        private string _metricName;

        /// <summary>The names of the metrics (comma separated) to retrieve.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Origin(Microsoft.Azure.PowerShell.Cmdlets.Metric.PropertyOrigin.Owned)]
        public string MetricName { get => this._metricName; set => this._metricName = value; }

        /// <summary>Backing field for <see cref="MetricNamespace" /> property.</summary>
        private string _metricNamespace;

        /// <summary>Metric namespace where the metrics you want reside.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Origin(Microsoft.Azure.PowerShell.Cmdlets.Metric.PropertyOrigin.Owned)]
        public string MetricNamespace { get => this._metricNamespace; set => this._metricNamespace = value; }

        /// <summary>Backing field for <see cref="OrderBy" /> property.</summary>
        private string _orderBy;

        /// <summary>
        /// The aggregation to use for sorting results and the direction of the sort.
        /// Only one order can be specified.
        /// Examples: sum asc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Origin(Microsoft.Azure.PowerShell.Cmdlets.Metric.PropertyOrigin.Owned)]
        public string OrderBy { get => this._orderBy; set => this._orderBy = value; }

        /// <summary>Backing field for <see cref="ResultType" /> property.</summary>
        private string _resultType;

        /// <summary>
        /// Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Origin(Microsoft.Azure.PowerShell.Cmdlets.Metric.PropertyOrigin.Owned)]
        public string ResultType { get => this._resultType; set => this._resultType = value; }

        /// <summary>Backing field for <see cref="RollUpBy" /> property.</summary>
        private string _rollUpBy;

        /// <summary>
        /// Dimension name(s) to rollup results by. For example if you only want to see metric values with a filter like 'City eq
        /// Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify 'RollUpBy=City' to see
        /// the results for Seattle and Tacoma rolled up into one timeseries.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Origin(Microsoft.Azure.PowerShell.Cmdlets.Metric.PropertyOrigin.Owned)]
        public string RollUpBy { get => this._rollUpBy; set => this._rollUpBy = value; }

        /// <summary>Backing field for <see cref="Timespan" /> property.</summary>
        private string _timespan;

        /// <summary>
        /// The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Origin(Microsoft.Azure.PowerShell.Cmdlets.Metric.PropertyOrigin.Owned)]
        public string Timespan { get => this._timespan; set => this._timespan = value; }

        /// <summary>Backing field for <see cref="Top" /> property.</summary>
        private int? _top;

        /// <summary>
        /// The maximum number of records to retrieve.
        /// Valid only if $filter is specified.
        /// Defaults to 10.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Origin(Microsoft.Azure.PowerShell.Cmdlets.Metric.PropertyOrigin.Owned)]
        public int? Top { get => this._top; set => this._top = value; }

        /// <summary>Backing field for <see cref="ValidateDimension" /> property.</summary>
        private bool? _validateDimension;

        /// <summary>
        /// When set to false, invalid filter parameter values will be ignored. When set to true, an error is returned for invalid
        /// filter parameters. Defaults to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Origin(Microsoft.Azure.PowerShell.Cmdlets.Metric.PropertyOrigin.Owned)]
        public bool? ValidateDimension { get => this._validateDimension; set => this._validateDimension = value; }

        /// <summary>
        /// Creates an new <see cref="SubscriptionScopeMetricsRequestBodyParameters" /> instance.
        /// </summary>
        public SubscriptionScopeMetricsRequestBodyParameters()
        {

        }
    }
    /// Query parameters can also be specified in the body, specifying the same parameter in both the body and query parameters
    /// will result in an error.
    public partial interface ISubscriptionScopeMetricsRequestBodyParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IJsonSerializable
    {
        /// <summary>The list of aggregation types (comma separated) to retrieve.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The list of aggregation types (comma separated) to retrieve.",
        SerializedName = @"aggregation",
        PossibleTypes = new [] { typeof(string) })]
        string Aggregation { get; set; }
        /// <summary>
        /// When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the
        /// closest supported timespan. When set to false, an error is returned for invalid timespan parameters. Defaults to false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the closest supported timespan. When set to false, an error is returned for invalid timespan parameters. Defaults to false.",
        SerializedName = @"autoAdjustTimegrain",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoAdjustTimegrain { get; set; }
        /// <summary>
        /// The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>-
        /// Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>-
        /// Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical
        /// or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A
        /// eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and
        /// C eq ‘*’**.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.",
        SerializedName = @"filter",
        PossibleTypes = new [] { typeof(string) })]
        string Filter { get; set; }
        /// <summary>
        /// The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special case for 'FULL' value
        /// that returns single datapoint for entire time span requested.
        /// *Examples: PT15M, PT1H, P1D, FULL*
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special case for 'FULL' value that returns single datapoint for entire time span requested.
        *Examples: PT15M, PT1H, P1D, FULL*",
        SerializedName = @"interval",
        PossibleTypes = new [] { typeof(string) })]
        string Interval { get; set; }
        /// <summary>The names of the metrics (comma separated) to retrieve.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The names of the metrics (comma separated) to retrieve.",
        SerializedName = @"metricNames",
        PossibleTypes = new [] { typeof(string) })]
        string MetricName { get; set; }
        /// <summary>Metric namespace where the metrics you want reside.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Metric namespace where the metrics you want reside.",
        SerializedName = @"metricNamespace",
        PossibleTypes = new [] { typeof(string) })]
        string MetricNamespace { get; set; }
        /// <summary>
        /// The aggregation to use for sorting results and the direction of the sort.
        /// Only one order can be specified.
        /// Examples: sum asc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The aggregation to use for sorting results and the direction of the sort.
        Only one order can be specified.
        Examples: sum asc.",
        SerializedName = @"orderBy",
        PossibleTypes = new [] { typeof(string) })]
        string OrderBy { get; set; }
        /// <summary>
        /// Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.",
        SerializedName = @"resultType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.PSArgumentCompleterAttribute("Data", "Metadata")]
        string ResultType { get; set; }
        /// <summary>
        /// Dimension name(s) to rollup results by. For example if you only want to see metric values with a filter like 'City eq
        /// Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify 'RollUpBy=City' to see
        /// the results for Seattle and Tacoma rolled up into one timeseries.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Dimension name(s) to rollup results by. For example if you only want to see metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.",
        SerializedName = @"rollUpBy",
        PossibleTypes = new [] { typeof(string) })]
        string RollUpBy { get; set; }
        /// <summary>
        /// The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.",
        SerializedName = @"timespan",
        PossibleTypes = new [] { typeof(string) })]
        string Timespan { get; set; }
        /// <summary>
        /// The maximum number of records to retrieve.
        /// Valid only if $filter is specified.
        /// Defaults to 10.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum number of records to retrieve.
        Valid only if $filter is specified.
        Defaults to 10.",
        SerializedName = @"top",
        PossibleTypes = new [] { typeof(int) })]
        int? Top { get; set; }
        /// <summary>
        /// When set to false, invalid filter parameter values will be ignored. When set to true, an error is returned for invalid
        /// filter parameters. Defaults to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"When set to false, invalid filter parameter values will be ignored. When set to true, an error is returned for invalid filter parameters. Defaults to true.",
        SerializedName = @"validateDimensions",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ValidateDimension { get; set; }

    }
    /// Query parameters can also be specified in the body, specifying the same parameter in both the body and query parameters
    /// will result in an error.
    internal partial interface ISubscriptionScopeMetricsRequestBodyParametersInternal

    {
        /// <summary>The list of aggregation types (comma separated) to retrieve.</summary>
        string Aggregation { get; set; }
        /// <summary>
        /// When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the
        /// closest supported timespan. When set to false, an error is returned for invalid timespan parameters. Defaults to false.
        /// </summary>
        bool? AutoAdjustTimegrain { get; set; }
        /// <summary>
        /// The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>-
        /// Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>-
        /// Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical
        /// or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A
        /// eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and
        /// C eq ‘*’**.
        /// </summary>
        string Filter { get; set; }
        /// <summary>
        /// The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special case for 'FULL' value
        /// that returns single datapoint for entire time span requested.
        /// *Examples: PT15M, PT1H, P1D, FULL*
        /// </summary>
        string Interval { get; set; }
        /// <summary>The names of the metrics (comma separated) to retrieve.</summary>
        string MetricName { get; set; }
        /// <summary>Metric namespace where the metrics you want reside.</summary>
        string MetricNamespace { get; set; }
        /// <summary>
        /// The aggregation to use for sorting results and the direction of the sort.
        /// Only one order can be specified.
        /// Examples: sum asc.
        /// </summary>
        string OrderBy { get; set; }
        /// <summary>
        /// Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.PSArgumentCompleterAttribute("Data", "Metadata")]
        string ResultType { get; set; }
        /// <summary>
        /// Dimension name(s) to rollup results by. For example if you only want to see metric values with a filter like 'City eq
        /// Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify 'RollUpBy=City' to see
        /// the results for Seattle and Tacoma rolled up into one timeseries.
        /// </summary>
        string RollUpBy { get; set; }
        /// <summary>
        /// The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.
        /// </summary>
        string Timespan { get; set; }
        /// <summary>
        /// The maximum number of records to retrieve.
        /// Valid only if $filter is specified.
        /// Defaults to 10.
        /// </summary>
        int? Top { get; set; }
        /// <summary>
        /// When set to false, invalid filter parameter values will be ignored. When set to true, an error is returned for invalid
        /// filter parameters. Defaults to true.
        /// </summary>
        bool? ValidateDimension { get; set; }

    }
}