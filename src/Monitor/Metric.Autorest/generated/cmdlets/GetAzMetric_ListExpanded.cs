// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Metric.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Extensions;
    using Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.PowerShell;
    using Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Cmdlets;
    using System;

    /// <summary>
    /// **Lists the metric data for a subscription**. Parameters can be specified on either query params or the body.
    /// </summary>
    /// <remarks>
    /// [OpenAPI] ListAtSubscriptionScopePost=>POST:"/subscriptions/{subscriptionId}/providers/Microsoft.Insights/metrics"
    /// </remarks>
    [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.InternalExport]
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.Get, @"AzMetric_ListExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IResponse))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Description(@"**Lists the metric data for a subscription**. Parameters can be specified on either query params or the body.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Generated]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.HttpPath(Path = "/subscriptions/{subscriptionId}/providers/Microsoft.Insights/metrics", ApiVersion = "2023-10-01")]
    public partial class GetAzMetric_ListExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener,
        Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IContext
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// Query parameters can also be specified in the body, specifying the same parameter in both the body and query parameters
        /// will result in an error.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.ISubscriptionScopeMetricsRequestBodyParameters _body = new Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.SubscriptionScopeMetricsRequestBodyParameters();

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>A dictionary to carry over additional data for pipeline.</summary>
        private global::System.Collections.Generic.Dictionary<global::System.String,global::System.Object> _extensibleParameters = new System.Collections.Generic.Dictionary<string, object>();

        /// <summary>A buffer to record first returned object in response.</summary>
        private object _firstResponse = null;

        /// <summary>
        /// A flag to tell whether it is the first returned object in a call. Zero means no response yet. One means 1 returned object.
        /// Two means multiple returned objects in response.
        /// </summary>
        private int _responseSize = 0;

        /// <summary>The list of aggregation types (comma separated) to retrieve.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of aggregation types (comma separated) to retrieve.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of aggregation types (comma separated) to retrieve.",
        SerializedName = @"aggregation",
        PossibleTypes = new [] { typeof(string) })]
        [global::System.Management.Automation.Alias("AggregationType")]
        public string Aggregation { get => _body.Aggregation ?? null; set => _body.Aggregation = value; }

        /// <summary>
        /// When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the
        /// closest supported timespan. When set to false, an error is returned for invalid timespan parameters. Defaults to false.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the closest supported timespan. When set to false, an error is returned for invalid timespan parameters. Defaults to false.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the closest supported timespan. When set to false, an error is returned for invalid timespan parameters. Defaults to false.",
        SerializedName = @"autoAdjustTimegrain",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter AutoAdjustTimegrain { get => _body.AutoAdjustTimegrain ?? default(global::System.Management.Automation.SwitchParameter); set => _body.AutoAdjustTimegrain = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>Accessor for cancellationTokenSource.</summary>
        public global::System.Threading.CancellationTokenSource CancellationTokenSource { get => _cancellationTokenSource ; set { _cancellationTokenSource = value; } }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Metric.Metric Client => Microsoft.Azure.PowerShell.Cmdlets.Metric.Module.Instance.ClientAPI;

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>Accessor for extensibleParameters.</summary>
        public global::System.Collections.Generic.IDictionary<global::System.String,global::System.Object> ExtensibleParameters { get => _extensibleParameters ; }

        /// <summary>
        /// The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>-
        /// Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>-
        /// Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical
        /// or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A
        /// eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and
        /// C eq ‘*’**.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.",
        SerializedName = @"filter",
        PossibleTypes = new [] { typeof(string) })]
        [global::System.Management.Automation.Alias("MetricFilter")]
        public string Filter { get => _body.Filter ?? null; set => _body.Filter = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>
        /// The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special case for 'FULL' value
        /// that returns single datapoint for entire time span requested.*Examples: PT15M, PT1H, P1D, FULL*
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special case for 'FULL' value that returns single datapoint for entire time span requested.*Examples: PT15M, PT1H, P1D, FULL*")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special case for 'FULL' value that returns single datapoint for entire time span requested.*Examples: PT15M, PT1H, P1D, FULL*",
        SerializedName = @"interval",
        PossibleTypes = new [] { typeof(string) })]
        [global::System.Management.Automation.Alias("TimeGrain")]
        public string Interval { get => _body.Interval ?? null; set => _body.Interval = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>The names of the metrics (comma separated) to retrieve.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The names of the metrics (comma separated) to retrieve.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The names of the metrics (comma separated) to retrieve.",
        SerializedName = @"metricNames",
        PossibleTypes = new [] { typeof(string) })]
        public string MetricName { get => _body.MetricName ?? null; set => _body.MetricName = value; }

        /// <summary>Metric namespace where the metrics you want reside.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Metric namespace where the metrics you want reside.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Metric namespace where the metrics you want reside.",
        SerializedName = @"metricNamespace",
        PossibleTypes = new [] { typeof(string) })]
        public string MetricNamespace { get => _body.MetricNamespace ?? null; set => _body.MetricNamespace = value; }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>
        /// The aggregation to use for sorting results and the direction of the sort.Only one order can be specified.Examples: sum
        /// asc.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The aggregation to use for sorting results and the direction of the sort.Only one order can be specified.Examples: sum asc.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The aggregation to use for sorting results and the direction of the sort.Only one order can be specified.Examples: sum asc.",
        SerializedName = @"orderBy",
        PossibleTypes = new [] { typeof(string) })]
        public string OrderBy { get => _body.OrderBy ?? null; set => _body.OrderBy = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Backing field for <see cref="Region" /> property.</summary>
        private string _region;

        /// <summary>The region where the metrics you want reside.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The region where the metrics you want reside.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The region where the metrics you want reside.",
        SerializedName = @"region",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Query)]
        public string Region { get => this._region; set => this._region = value; }

        /// <summary>
        /// Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.",
        SerializedName = @"resultType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.PSArgumentCompleterAttribute("Data", "Metadata")]
        public string ResultType { get => _body.ResultType ?? null; set => _body.ResultType = value; }

        /// <summary>
        /// Dimension name(s) to rollup results by. For example if you only want to see metric values with a filter like 'City eq
        /// Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify 'RollUpBy=City' to see
        /// the results for Seattle and Tacoma rolled up into one timeseries.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Dimension name(s) to rollup results by. For example if you only want to see metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Dimension name(s) to rollup results by. For example if you only want to see metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.",
        SerializedName = @"rollUpBy",
        PossibleTypes = new [] { typeof(string) })]
        public string RollUpBy { get => _body.RollUpBy ?? null; set => _body.RollUpBy = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string[] _subscriptionId;

        /// <summary>The ID of the target subscription.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The ID of the target subscription.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The ID of the target subscription.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"(Get-AzContext).Subscription.Id",
        SetCondition = @"")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Path)]
        public string[] SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>
        /// The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.",
        SerializedName = @"timespan",
        PossibleTypes = new [] { typeof(string) })]
        public string Timespan { get => _body.Timespan ?? null; set => _body.Timespan = value; }

        /// <summary>
        /// The maximum number of records to retrieve.Valid only if $filter is specified.Defaults to 10.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The maximum number of records to retrieve.Valid only if $filter is specified.Defaults to 10.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum number of records to retrieve.Valid only if $filter is specified.Defaults to 10.",
        SerializedName = @"top",
        PossibleTypes = new [] { typeof(int) })]
        public int Top { get => _body.Top ?? default(int); set => _body.Top = value; }

        /// <summary>
        /// When set to false, invalid filter parameter values will be ignored. When set to true, an error is returned for invalid
        /// filter parameters. Defaults to true.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "When set to false, invalid filter parameter values will be ignored. When set to true, an error is returned for invalid filter parameters. Defaults to true.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When set to false, invalid filter parameter values will be ignored. When set to true, an error is returned for invalid filter parameters. Defaults to true.",
        SerializedName = @"validateDimensions",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter ValidateDimension { get => _body.ValidateDimension ?? default(global::System.Management.Automation.SwitchParameter); set => _body.ValidateDimension = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IErrorContract">Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IErrorContract</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IErrorContract> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IResponse">Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IResponse</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.Metric.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            if (1 ==_responseSize)
            {
                // Flush buffer
                WriteObject(_firstResponse);
            }
            var telemetryInfo = Microsoft.Azure.PowerShell.Cmdlets.Metric.Module.Instance.GetTelemetryInfo?.Invoke(__correlationId);
            if (telemetryInfo != null)
            {
                telemetryInfo.TryGetValue("ShowSecretsWarning", out var showSecretsWarning);
                telemetryInfo.TryGetValue("SanitizedProperties", out var sanitizedProperties);
                telemetryInfo.TryGetValue("InvocationName", out var invocationName);
                if (showSecretsWarning == "true")
                {
                    if (string.IsNullOrEmpty(sanitizedProperties))
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing secrets. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                    else
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing the following secrets: {sanitizedProperties}. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                }
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetAzMetric_ListExpanded" /> cmdlet class.
        /// </summary>
        public GetAzMetric_ListExpanded()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.Progress:
                    {
                        var data = messageData();
                        int progress = (int)data.Value;
                        string activityMessage, statusDescription;
                        global::System.Management.Automation.ProgressRecordType recordType;
                        if (progress < 100)
                        {
                            activityMessage = "In progress";
                            statusDescription = "Checking operation status";
                            recordType = System.Management.Automation.ProgressRecordType.Processing;
                        }
                        else
                        {
                            activityMessage = "Completed";
                            statusDescription = "Completed";
                            recordType = System.Management.Automation.ProgressRecordType.Completed;
                        }
                        WriteProgress(new global::System.Management.Automation.ProgressRecord(1, activityMessage, statusDescription)
                        {
                            PercentComplete = progress,
                        RecordType = recordType
                        });
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.Metric.Module.Instance.Signal(id, token, messageData, (i, t, m) => ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(i, t, () => Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.EventDataConverter.ConvertFrom(m()) as Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.EventData), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'MetricsListAtSubscriptionScopePost' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.Metric.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName, this.ExtensibleParameters);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    foreach( var SubscriptionId in this.SubscriptionId )
                    {
                        await ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                        await this.Client.MetricsListAtSubscriptionScopePost(SubscriptionId, Region, _body, onOk, onDefault, this, Pipeline);
                        await ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId,Region=Region})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <param name="sendToPipeline"></param>
        new protected void WriteObject(object sendToPipeline)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Metric.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline);
        }

        /// <param name="sendToPipeline"></param>
        /// <param name="enumerateCollection"></param>
        new protected void WriteObject(object sendToPipeline, bool enumerateCollection)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Metric.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline, enumerateCollection);
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IErrorContract">Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IErrorContract</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IErrorContract> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IErrorContract>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IResponse">Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IResponse</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IResponse
                var result = (await response);
                if (null != result)
                {
                    if (0 == _responseSize)
                    {
                        _firstResponse = result;
                        _responseSize = 1;
                    }
                    else
                    {
                        if (1 ==_responseSize)
                        {
                            // Flush buffer
                            WriteObject(_firstResponse.AddMultipleTypeNameIntoPSObject());
                        }
                        WriteObject(result.AddMultipleTypeNameIntoPSObject());
                        _responseSize = 2;
                    }
                }
            }
        }
    }
}