
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates a metric dimension filter that can be used to query metrics.
.Description
Creates a metric dimension filter that can be used to query metrics.
.Example
New-AzMetricFilter -Dimension City -Operator eq -Value "Seattle","New York"

.Outputs
System.String
.Link
https://learn.microsoft.com/powershell/module/az.monitor/new-azmetricfilter
#>
function New-AzMetricFilter {
[OutputType('System.String')]
[CmdletBinding(PositionalBinding=$false)]
Param(
        # <summary>
        # Gets or sets the Dimension
        # </summary>
        [Parameter(HelpMessage="The dimension name")]
        [string]
        ${Dimension},

        # <summary>
        # Gets or sets the Operator
        # </summary>
        [Parameter(HelpMessage="The operator")]
        [string]
        ${Operator},

        # <summary>
        # Gets or sets the values list of the dimension. A comma-separated list of values for the dimension.
        # </summary>
        [Parameter(HelpMessage="The list of values for the dimension")]
        [string[]]
        ${Value}
    )
    
    # Process the general parameters (i.e. defined in this class) and the particular parameters (i.e. the parameters added by the descendants of this class).
    process {
        $buffer = [System.Text.StringBuilder]::new()
        $metricFilter = ''
        for ($index = 0; $index -lt $Value.count; )
        {
            $string = "'"+ $Value[$index] + "'"
            $metricFilter += $Dimension +' '+$Operator+' '+$string
            $index++
            if ($index -lt $Value.Count) {
                $metricFilter += ' or '
            }
        }
        [void]$buffer.Append($metricFilter)

        return $buffer.ToString().Trim()
    }
}