
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
**Lists the metric values for a resource**.
.Description
**Lists the metric values for a resource**.
.Example
Get-AzMetric -Region eastus -Aggregation count -AutoAdjustTimegrain -Filter "LUN eq '0' and Microsoft.ResourceId eq '*'" -Interval "PT6H" -MetricName "Data Disk Max Burst IOPS" -MetricNamespace "microsoft.compute/virtualmachines" -Orderby "count desc" -Rollupby "LUN" -Timespan "2023-12-08T19:00:00Z/2023-12-12T01:00:00Z" -Top 10
.Example
Get-AzMetric -ResourceUri /subscriptions/9e223dbe-3399-4e19-88eb-0975f02ac87f/resourceGroups/joyer-test/providers/Microsoft.Storage/storageAccounts/storagetasktest202402281/blobServices/default -Aggregation "average,minimum,maximum" -AutoAdjustTimegrain -Filter "Tier eq '*'" -Interval "PT6H" -MetricName "BlobCount,BlobCapacity" -MetricNamespace "Microsoft.Storage/storageAccounts/blobServices" -Orderby "average asc" -Timespan "2024-03-10T09:00:00Z/2024-03-10T14:00:00Z" -Top 1

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IResponse
.Link
https://learn.microsoft.com/powershell/module/az.monitor/get-azmetric
#>
function Get-AzMetric {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IResponse])]
[CmdletBinding(DefaultParameterSetName='List2', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='List2', Mandatory)]
    [Alias('ResourceId')]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Path')]
    [System.String]
    # The identifier of the resource.
    ${ResourceUri},

    [Parameter(ParameterSetName='ListExpanded')]
    [Parameter(ParameterSetName='ListViaJsonFilePath')]
    [Parameter(ParameterSetName='ListViaJsonString')]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String[]]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(ParameterSetName='List2')]
    [Parameter(ParameterSetName='ListExpanded')]
    [Alias('AggregationType')]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Query')]
    [System.String]
    # The list of aggregation types (comma separated) to retrieve.
    # *Examples: average, minimum, maximum*
    ${Aggregation},

    [Parameter(ParameterSetName='List2')]
    [Parameter(ParameterSetName='ListExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Query')]
    [System.Management.Automation.SwitchParameter]
    # When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the closest supported timespan.
    # When set to false, an error is returned for invalid timespan parameters.
    # Defaults to false.
    ${AutoAdjustTimegrain},

    [Parameter(ParameterSetName='List2')]
    [Parameter(ParameterSetName='ListExpanded')]
    [Alias('MetricFilter')]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Query')]
    [System.String]
    # The **$filter** is used to reduce the set of metric data returned.
    # Example:
    # Metric contains metadata A, B and C.
    # - Return all time series of C where A = a1 and B = b1 or b2
    # **$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**
    # - Invalid variant:
    # **$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**
    # This is invalid because the logical or operator cannot separate two different metadata names.
    # - Return all time series where A = a1, B = b1 and C = c1:
    # **$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**
    # - Return all time series where A = a1
    # **$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.
    ${Filter},

    [Parameter(ParameterSetName='List2')]
    [Parameter(ParameterSetName='ListExpanded')]
    [Alias('TimeGrain')]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Query')]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.DefaultInfo(Script = 'PT1M')]
    [System.String]
    # The interval (i.e.
    # timegrain) of the query in ISO 8601 duration format.
    # Defaults to PT1M.
    # Special case for 'FULL' value that returns single datapoint for entire time span requested.
    # *Examples: PT15M, PT1H, P1D, FULL*
    ${Interval},

    [Parameter(ParameterSetName='List2')]
    [Parameter(ParameterSetName='ListExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Query')]
    [System.String]
    # The names of the metrics (comma separated) to retrieve.
    ${MetricName},

    [Parameter(ParameterSetName='List2')]
    [Parameter(ParameterSetName='ListExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Query')]
    [System.String]
    # Metric namespace where the metrics you want reside.
    ${MetricNamespace},

    [Parameter(ParameterSetName='List2')]
    [Parameter(ParameterSetName='ListExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Query')]
    [System.String]
    # The aggregation to use for sorting results and the direction of the sort.
    # Only one order can be specified.
    # *Examples: sum asc*
    ${OrderBy},

    [Parameter(ParameterSetName='List2')]
    [Parameter(ParameterSetName='ListExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.PSArgumentCompleterAttribute("Data", "Metadata")]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Query')]
    [System.String]
    # Reduces the set of data collected.
    # The syntax allowed depends on the operation.
    # See the operation's description for details.
    ${ResultType},

    [Parameter(ParameterSetName='List2')]
    [Parameter(ParameterSetName='ListExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Query')]
    [System.String]
    # Dimension name(s) to rollup results by.
    # For example if you only want to see metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.
    ${RollUpBy},

    [Parameter(ParameterSetName='List2')]
    [Parameter(ParameterSetName='ListExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Query')]
    [System.DateTime]
    # Specifies the start time of the query in local time.
    # The default is the current local time minus one hour.
    ${StartTime},

    [Parameter(ParameterSetName='List2')]
    [Parameter(ParameterSetName='ListExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Query')]
    # [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.DefaultInfo(Script = 'DateTime.UtcNow')]
    [System.DateTime]
    # Specifies the end time of the query in local time.
    # The default is the current time.
    ${EndTime},

    [Parameter(ParameterSetName='List2')]
    [Parameter(ParameterSetName='ListExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Query')]
    [System.Int32]
    # The maximum number of records to retrieve per resource ID in the request.
    # Valid only if filter is specified.
    # Defaults to 10.
    ${Top},

    [Parameter(ParameterSetName='List2')]
    [Parameter(ParameterSetName='ListExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Query')]
    [System.Management.Automation.SwitchParameter]
    # When set to false, invalid filter parameter values will be ignored.
    # When set to true, an error is returned for invalid filter parameters.
    # Defaults to true.
    ${ValidateDimension},

    [Parameter(ParameterSetName='ListExpanded', Mandatory)]
    [Parameter(ParameterSetName='ListViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='ListViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Query')]
    [System.String]
    # The region where the metrics you want reside.
    ${Region},

    [Parameter(ParameterSetName='ListViaJsonFilePath', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Body')]
    [System.String]
    # Path of Json file supplied to the List operation
    ${JsonFilePath},

    [Parameter(ParameterSetName='ListViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Body')]
    [System.String]
    # Json string supplied to the List operation
    ${JsonString},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Metric.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

process {
    # EndTime defaults to Now
    if ($PSBoundParameters.ContainsKey("EndTime")) {
        $EndTimeString = $EndTime.ToUniversalTime().ToString("O")
        $defaultStartTime = $EndTime.ToUniversalTime().AddHours(-1)
    } else {
        # default value of end time on server
        $EndTimeString = [DateTime]::UtcNow.ToString("O")
        $defaultStartTime = [DateTime]::UtcNow.AddHours(-1)
    }
    # StartTime defaults to EndTime - DefaultTimeRange  (NOTE: EndTime defaults to Now)
    if ($PSBoundParameters.ContainsKey("StartTime")) {
        $StartTimeString = $StartTime.ToUniversalTime().ToString("O")
    }
    else {
        # default value of start time on server
        $StartTimeString = $defaultStartTime.ToString("O")
    }
    $null = $PSBoundParameters.Remove("StartTime")
    $null = $PSBoundParameters.Remove("EndTime")
    # The timespan of the query.
    # It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.
    $Timespan = $StartTimeString+'/'+$EndTimeString
    $null = $PSBoundParameters.Add("Timespan", $Timespan)
    
    Az.Metric.internal\Get-AzMetric @PSBoundParameters
}
}
