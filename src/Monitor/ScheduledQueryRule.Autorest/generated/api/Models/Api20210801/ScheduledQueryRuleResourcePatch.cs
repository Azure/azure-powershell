// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Extensions;

    /// <summary>The scheduled query rule resource for patch operations.</summary>
    public partial class ScheduledQueryRuleResourcePatch :
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourcePatch,
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourcePatchInternal
    {

        /// <summary>The properties of an alert payload.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActionsCustomProperties ActionCustomProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).ActionCustomProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).ActionCustomProperty = value ?? null /* model class */; }

        /// <summary>Action Group resource Ids to invoke when the alert fires.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public string[] ActionGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).ActionGroup; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).ActionGroup = value ?? null /* arrayOf */; }

        /// <summary>
        /// The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only
        /// for rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public bool? AutoMitigate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).AutoMitigate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).AutoMitigate = value ?? default(bool); }

        /// <summary>
        /// The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is
        /// false. Relevant only for rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public bool? CheckWorkspaceAlertsStorageConfigured { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).CheckWorkspaceAlertsStorageConfigured; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).CheckWorkspaceAlertsStorageConfigured = value ?? default(bool); }

        /// <summary>The api-version used when creating this alert rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public string CreatedWithApiVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).CreatedWithApiVersion; }

        /// <summary>A list of conditions to evaluate against the specified scopes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.ICondition[] CriterionAllOf { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).CriterionAllOf; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).CriterionAllOf = value ?? null /* arrayOf */; }

        /// <summary>The description of the scheduled query rule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public string Description { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Description; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Description = value ?? null; }

        /// <summary>The display name of the alert rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public string DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).DisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).DisplayName = value ?? null; }

        /// <summary>
        /// The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public bool? Enabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Enabled = value ?? default(bool); }

        /// <summary>
        /// How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for
        /// rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? EvaluationFrequency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).EvaluationFrequency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).EvaluationFrequency = value ?? default(global::System.TimeSpan); }

        /// <summary>True if alert rule is legacy Log Analytic rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public bool? IsLegacyLogAnalyticsRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).IsLegacyLogAnalyticsRule; }

        /// <summary>
        /// The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage.
        /// The default is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public bool? IsWorkspaceAlertsStorageConfigured { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).IsWorkspaceAlertsStorageConfigured; }

        /// <summary>Internal Acessors for Action</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActions Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourcePatchInternal.Action { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Action; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Action = value; }

        /// <summary>Internal Acessors for CreatedWithApiVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourcePatchInternal.CreatedWithApiVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).CreatedWithApiVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).CreatedWithApiVersion = value; }

        /// <summary>Internal Acessors for Criterion</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleCriteria Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourcePatchInternal.Criterion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Criterion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Criterion = value; }

        /// <summary>Internal Acessors for IsLegacyLogAnalyticsRule</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourcePatchInternal.IsLegacyLogAnalyticsRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).IsLegacyLogAnalyticsRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).IsLegacyLogAnalyticsRule = value; }

        /// <summary>Internal Acessors for IsWorkspaceAlertsStorageConfigured</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourcePatchInternal.IsWorkspaceAlertsStorageConfigured { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).IsWorkspaceAlertsStorageConfigured; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).IsWorkspaceAlertsStorageConfigured = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleProperties Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourcePatchInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.ScheduledQueryRuleProperties()); set { {_property = value;} } }

        /// <summary>
        /// Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules
        /// of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? MuteActionsDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).MuteActionsDuration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).MuteActionsDuration = value ?? default(global::System.TimeSpan); }

        /// <summary>
        /// If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? OverrideQueryTimeRange { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).OverrideQueryTimeRange; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).OverrideQueryTimeRange = value ?? default(global::System.TimeSpan); }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleProperties _property;

        /// <summary>The scheduled query rule properties of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.ScheduledQueryRuleProperties()); set => this._property = value; }

        /// <summary>The list of resource id's that this scheduled query rule is scoped to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public string[] Scope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Scope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Scope = value ?? null /* arrayOf */; }

        /// <summary>
        /// Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules
        /// of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public long? Severity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Severity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Severity = value ?? default(long); }

        /// <summary>
        /// The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public bool? SkipQueryValidation { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).SkipQueryValidation; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).SkipQueryValidation = value ?? default(bool); }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourcePatchTags _tag;

        /// <summary>Resource tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourcePatchTags Tag { get => (this._tag = this._tag ?? new Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.ScheduledQueryRuleResourcePatchTags()); set => this._tag = value; }

        /// <summary>
        /// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource
        /// group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual
        /// machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public string[] TargetResourceType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).TargetResourceType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).TargetResourceType = value ?? null /* arrayOf */; }

        /// <summary>
        /// The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required
        /// only for rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? WindowSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).WindowSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).WindowSize = value ?? default(global::System.TimeSpan); }

        /// <summary>Creates an new <see cref="ScheduledQueryRuleResourcePatch" /> instance.</summary>
        public ScheduledQueryRuleResourcePatch()
        {

        }
    }
    /// The scheduled query rule resource for patch operations.
    public partial interface IScheduledQueryRuleResourcePatch :
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.IJsonSerializable
    {
        /// <summary>The properties of an alert payload.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The properties of an alert payload.",
        SerializedName = @"customProperties",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActionsCustomProperties) })]
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActionsCustomProperties ActionCustomProperty { get; set; }
        /// <summary>Action Group resource Ids to invoke when the alert fires.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Action Group resource Ids to invoke when the alert fires.",
        SerializedName = @"actionGroups",
        PossibleTypes = new [] { typeof(string) })]
        string[] ActionGroup { get; set; }
        /// <summary>
        /// The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only
        /// for rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only for rules of the kind LogAlert.",
        SerializedName = @"autoMitigate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoMitigate { get; set; }
        /// <summary>
        /// The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is
        /// false. Relevant only for rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is false. Relevant only for rules of the kind LogAlert.",
        SerializedName = @"checkWorkspaceAlertsStorageConfigured",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CheckWorkspaceAlertsStorageConfigured { get; set; }
        /// <summary>The api-version used when creating this alert rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The api-version used when creating this alert rule",
        SerializedName = @"createdWithApiVersion",
        PossibleTypes = new [] { typeof(string) })]
        string CreatedWithApiVersion { get;  }
        /// <summary>A list of conditions to evaluate against the specified scopes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of conditions to evaluate against the specified scopes",
        SerializedName = @"allOf",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.ICondition) })]
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.ICondition[] CriterionAllOf { get; set; }
        /// <summary>The description of the scheduled query rule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The description of the scheduled query rule.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>The display name of the alert rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The display name of the alert rule",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>
        /// The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The flag which indicates whether this scheduled query rule is enabled. Value should be true or false",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Enabled { get; set; }
        /// <summary>
        /// How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for
        /// rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for rules of the kind LogAlert.",
        SerializedName = @"evaluationFrequency",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? EvaluationFrequency { get; set; }
        /// <summary>True if alert rule is legacy Log Analytic rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"True if alert rule is legacy Log Analytic rule",
        SerializedName = @"isLegacyLogAnalyticsRule",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsLegacyLogAnalyticsRule { get;  }
        /// <summary>
        /// The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage.
        /// The default is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage. The default is false.",
        SerializedName = @"isWorkspaceAlertsStorageConfigured",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsWorkspaceAlertsStorageConfigured { get;  }
        /// <summary>
        /// Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules
        /// of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules of the kind LogAlert.",
        SerializedName = @"muteActionsDuration",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? MuteActionsDuration { get; set; }
        /// <summary>
        /// If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for rules of the kind LogAlert.",
        SerializedName = @"overrideQueryTimeRange",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? OverrideQueryTimeRange { get; set; }
        /// <summary>The list of resource id's that this scheduled query rule is scoped to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of resource id's that this scheduled query rule is scoped to.",
        SerializedName = @"scopes",
        PossibleTypes = new [] { typeof(string) })]
        string[] Scope { get; set; }
        /// <summary>
        /// Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules
        /// of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules of the kind LogAlert.",
        SerializedName = @"severity",
        PossibleTypes = new [] { typeof(long) })]
        long? Severity { get; set; }
        /// <summary>
        /// The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for rules of the kind LogAlert.",
        SerializedName = @"skipQueryValidation",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SkipQueryValidation { get; set; }
        /// <summary>Resource tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource tags",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourcePatchTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourcePatchTags Tag { get; set; }
        /// <summary>
        /// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource
        /// group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual
        /// machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert",
        SerializedName = @"targetResourceTypes",
        PossibleTypes = new [] { typeof(string) })]
        string[] TargetResourceType { get; set; }
        /// <summary>
        /// The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required
        /// only for rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required only for rules of the kind LogAlert.",
        SerializedName = @"windowSize",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? WindowSize { get; set; }

    }
    /// The scheduled query rule resource for patch operations.
    internal partial interface IScheduledQueryRuleResourcePatchInternal

    {
        /// <summary>Actions to invoke when the alert fires.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActions Action { get; set; }
        /// <summary>The properties of an alert payload.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActionsCustomProperties ActionCustomProperty { get; set; }
        /// <summary>Action Group resource Ids to invoke when the alert fires.</summary>
        string[] ActionGroup { get; set; }
        /// <summary>
        /// The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only
        /// for rules of the kind LogAlert.
        /// </summary>
        bool? AutoMitigate { get; set; }
        /// <summary>
        /// The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is
        /// false. Relevant only for rules of the kind LogAlert.
        /// </summary>
        bool? CheckWorkspaceAlertsStorageConfigured { get; set; }
        /// <summary>The api-version used when creating this alert rule</summary>
        string CreatedWithApiVersion { get; set; }
        /// <summary>The rule criteria that defines the conditions of the scheduled query rule.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleCriteria Criterion { get; set; }
        /// <summary>A list of conditions to evaluate against the specified scopes</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.ICondition[] CriterionAllOf { get; set; }
        /// <summary>The description of the scheduled query rule.</summary>
        string Description { get; set; }
        /// <summary>The display name of the alert rule</summary>
        string DisplayName { get; set; }
        /// <summary>
        /// The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
        /// </summary>
        bool? Enabled { get; set; }
        /// <summary>
        /// How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for
        /// rules of the kind LogAlert.
        /// </summary>
        global::System.TimeSpan? EvaluationFrequency { get; set; }
        /// <summary>True if alert rule is legacy Log Analytic rule</summary>
        bool? IsLegacyLogAnalyticsRule { get; set; }
        /// <summary>
        /// The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage.
        /// The default is false.
        /// </summary>
        bool? IsWorkspaceAlertsStorageConfigured { get; set; }
        /// <summary>
        /// Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules
        /// of the kind LogAlert.
        /// </summary>
        global::System.TimeSpan? MuteActionsDuration { get; set; }
        /// <summary>
        /// If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        global::System.TimeSpan? OverrideQueryTimeRange { get; set; }
        /// <summary>The scheduled query rule properties of the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleProperties Property { get; set; }
        /// <summary>The list of resource id's that this scheduled query rule is scoped to.</summary>
        string[] Scope { get; set; }
        /// <summary>
        /// Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules
        /// of the kind LogAlert.
        /// </summary>
        long? Severity { get; set; }
        /// <summary>
        /// The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        bool? SkipQueryValidation { get; set; }
        /// <summary>Resource tags</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourcePatchTags Tag { get; set; }
        /// <summary>
        /// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource
        /// group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual
        /// machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert
        /// </summary>
        string[] TargetResourceType { get; set; }
        /// <summary>
        /// The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required
        /// only for rules of the kind LogAlert.
        /// </summary>
        global::System.TimeSpan? WindowSize { get; set; }

    }
}