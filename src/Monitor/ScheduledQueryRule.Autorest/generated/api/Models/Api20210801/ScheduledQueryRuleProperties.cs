// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Extensions;

    /// <summary>scheduled query rule Definition</summary>
    public partial class ScheduledQueryRuleProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal
    {

        /// <summary>Backing field for <see cref="Action" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActions _action;

        /// <summary>Actions to invoke when the alert fires.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActions Action { get => (this._action = this._action ?? new Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.Actions()); set => this._action = value; }

        /// <summary>The properties of an alert payload.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActionsCustomProperties ActionCustomProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActionsInternal)Action).CustomProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActionsInternal)Action).CustomProperty = value ?? null /* model class */; }

        /// <summary>Action Group resource Ids to invoke when the alert fires.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public string[] ActionGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActionsInternal)Action).ActionGroup; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActionsInternal)Action).ActionGroup = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="AutoMitigate" /> property.</summary>
        private bool? _autoMitigate;

        /// <summary>
        /// The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only
        /// for rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        public bool? AutoMitigate { get => this._autoMitigate; set => this._autoMitigate = value; }

        /// <summary>
        /// Backing field for <see cref="CheckWorkspaceAlertsStorageConfigured" /> property.
        /// </summary>
        private bool? _checkWorkspaceAlertsStorageConfigured;

        /// <summary>
        /// The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is
        /// false. Relevant only for rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        public bool? CheckWorkspaceAlertsStorageConfigured { get => this._checkWorkspaceAlertsStorageConfigured; set => this._checkWorkspaceAlertsStorageConfigured = value; }

        /// <summary>Backing field for <see cref="CreatedWithApiVersion" /> property.</summary>
        private string _createdWithApiVersion;

        /// <summary>The api-version used when creating this alert rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        public string CreatedWithApiVersion { get => this._createdWithApiVersion; }

        /// <summary>Backing field for <see cref="Criterion" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleCriteria _criterion;

        /// <summary>The rule criteria that defines the conditions of the scheduled query rule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleCriteria Criterion { get => (this._criterion = this._criterion ?? new Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.ScheduledQueryRuleCriteria()); set => this._criterion = value; }

        /// <summary>A list of conditions to evaluate against the specified scopes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.ICondition[] CriterionAllOf { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleCriteriaInternal)Criterion).AllOf; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleCriteriaInternal)Criterion).AllOf = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Description" /> property.</summary>
        private string _description;

        /// <summary>The description of the scheduled query rule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        public string Description { get => this._description; set => this._description = value; }

        /// <summary>Backing field for <see cref="DisplayName" /> property.</summary>
        private string _displayName;

        /// <summary>The display name of the alert rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        public string DisplayName { get => this._displayName; set => this._displayName = value; }

        /// <summary>Backing field for <see cref="Enabled" /> property.</summary>
        private bool? _enabled;

        /// <summary>
        /// The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        public bool? Enabled { get => this._enabled; set => this._enabled = value; }

        /// <summary>Backing field for <see cref="EvaluationFrequency" /> property.</summary>
        private global::System.TimeSpan? _evaluationFrequency;

        /// <summary>
        /// How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for
        /// rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        public global::System.TimeSpan? EvaluationFrequency { get => this._evaluationFrequency; set => this._evaluationFrequency = value; }

        /// <summary>Backing field for <see cref="IsLegacyLogAnalyticsRule" /> property.</summary>
        private bool? _isLegacyLogAnalyticsRule;

        /// <summary>True if alert rule is legacy Log Analytic rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        public bool? IsLegacyLogAnalyticsRule { get => this._isLegacyLogAnalyticsRule; }

        /// <summary>Backing field for <see cref="IsWorkspaceAlertsStorageConfigured" /> property.</summary>
        private bool? _isWorkspaceAlertsStorageConfigured;

        /// <summary>
        /// The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage.
        /// The default is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        public bool? IsWorkspaceAlertsStorageConfigured { get => this._isWorkspaceAlertsStorageConfigured; }

        /// <summary>Internal Acessors for Action</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActions Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal.Action { get => (this._action = this._action ?? new Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.Actions()); set { {_action = value;} } }

        /// <summary>Internal Acessors for CreatedWithApiVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal.CreatedWithApiVersion { get => this._createdWithApiVersion; set { {_createdWithApiVersion = value;} } }

        /// <summary>Internal Acessors for Criterion</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleCriteria Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal.Criterion { get => (this._criterion = this._criterion ?? new Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.ScheduledQueryRuleCriteria()); set { {_criterion = value;} } }

        /// <summary>Internal Acessors for IsLegacyLogAnalyticsRule</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal.IsLegacyLogAnalyticsRule { get => this._isLegacyLogAnalyticsRule; set { {_isLegacyLogAnalyticsRule = value;} } }

        /// <summary>Internal Acessors for IsWorkspaceAlertsStorageConfigured</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal.IsWorkspaceAlertsStorageConfigured { get => this._isWorkspaceAlertsStorageConfigured; set { {_isWorkspaceAlertsStorageConfigured = value;} } }

        /// <summary>Backing field for <see cref="MuteActionsDuration" /> property.</summary>
        private global::System.TimeSpan? _muteActionsDuration;

        /// <summary>
        /// Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules
        /// of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        public global::System.TimeSpan? MuteActionsDuration { get => this._muteActionsDuration; set => this._muteActionsDuration = value; }

        /// <summary>Backing field for <see cref="OverrideQueryTimeRange" /> property.</summary>
        private global::System.TimeSpan? _overrideQueryTimeRange;

        /// <summary>
        /// If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        public global::System.TimeSpan? OverrideQueryTimeRange { get => this._overrideQueryTimeRange; set => this._overrideQueryTimeRange = value; }

        /// <summary>Backing field for <see cref="Scope" /> property.</summary>
        private string[] _scope;

        /// <summary>The list of resource id's that this scheduled query rule is scoped to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        public string[] Scope { get => this._scope; set => this._scope = value; }

        /// <summary>Backing field for <see cref="Severity" /> property.</summary>
        private long? _severity;

        /// <summary>
        /// Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules
        /// of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        public long? Severity { get => this._severity; set => this._severity = value; }

        /// <summary>Backing field for <see cref="SkipQueryValidation" /> property.</summary>
        private bool? _skipQueryValidation;

        /// <summary>
        /// The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        public bool? SkipQueryValidation { get => this._skipQueryValidation; set => this._skipQueryValidation = value; }

        /// <summary>Backing field for <see cref="TargetResourceType" /> property.</summary>
        private string[] _targetResourceType;

        /// <summary>
        /// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource
        /// group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual
        /// machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        public string[] TargetResourceType { get => this._targetResourceType; set => this._targetResourceType = value; }

        /// <summary>Backing field for <see cref="WindowSize" /> property.</summary>
        private global::System.TimeSpan? _windowSize;

        /// <summary>
        /// The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required
        /// only for rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        public global::System.TimeSpan? WindowSize { get => this._windowSize; set => this._windowSize = value; }

        /// <summary>Creates an new <see cref="ScheduledQueryRuleProperties" /> instance.</summary>
        public ScheduledQueryRuleProperties()
        {

        }
    }
    /// scheduled query rule Definition
    public partial interface IScheduledQueryRuleProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.IJsonSerializable
    {
        /// <summary>The properties of an alert payload.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The properties of an alert payload.",
        SerializedName = @"customProperties",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActionsCustomProperties) })]
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActionsCustomProperties ActionCustomProperty { get; set; }
        /// <summary>Action Group resource Ids to invoke when the alert fires.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Action Group resource Ids to invoke when the alert fires.",
        SerializedName = @"actionGroups",
        PossibleTypes = new [] { typeof(string) })]
        string[] ActionGroup { get; set; }
        /// <summary>
        /// The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only
        /// for rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only for rules of the kind LogAlert.",
        SerializedName = @"autoMitigate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoMitigate { get; set; }
        /// <summary>
        /// The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is
        /// false. Relevant only for rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is false. Relevant only for rules of the kind LogAlert.",
        SerializedName = @"checkWorkspaceAlertsStorageConfigured",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CheckWorkspaceAlertsStorageConfigured { get; set; }
        /// <summary>The api-version used when creating this alert rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The api-version used when creating this alert rule",
        SerializedName = @"createdWithApiVersion",
        PossibleTypes = new [] { typeof(string) })]
        string CreatedWithApiVersion { get;  }
        /// <summary>A list of conditions to evaluate against the specified scopes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of conditions to evaluate against the specified scopes",
        SerializedName = @"allOf",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.ICondition) })]
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.ICondition[] CriterionAllOf { get; set; }
        /// <summary>The description of the scheduled query rule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The description of the scheduled query rule.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>The display name of the alert rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The display name of the alert rule",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>
        /// The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The flag which indicates whether this scheduled query rule is enabled. Value should be true or false",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Enabled { get; set; }
        /// <summary>
        /// How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for
        /// rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for rules of the kind LogAlert.",
        SerializedName = @"evaluationFrequency",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? EvaluationFrequency { get; set; }
        /// <summary>True if alert rule is legacy Log Analytic rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"True if alert rule is legacy Log Analytic rule",
        SerializedName = @"isLegacyLogAnalyticsRule",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsLegacyLogAnalyticsRule { get;  }
        /// <summary>
        /// The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage.
        /// The default is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage. The default is false.",
        SerializedName = @"isWorkspaceAlertsStorageConfigured",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsWorkspaceAlertsStorageConfigured { get;  }
        /// <summary>
        /// Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules
        /// of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules of the kind LogAlert.",
        SerializedName = @"muteActionsDuration",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? MuteActionsDuration { get; set; }
        /// <summary>
        /// If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for rules of the kind LogAlert.",
        SerializedName = @"overrideQueryTimeRange",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? OverrideQueryTimeRange { get; set; }
        /// <summary>The list of resource id's that this scheduled query rule is scoped to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of resource id's that this scheduled query rule is scoped to.",
        SerializedName = @"scopes",
        PossibleTypes = new [] { typeof(string) })]
        string[] Scope { get; set; }
        /// <summary>
        /// Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules
        /// of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules of the kind LogAlert.",
        SerializedName = @"severity",
        PossibleTypes = new [] { typeof(long) })]
        long? Severity { get; set; }
        /// <summary>
        /// The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for rules of the kind LogAlert.",
        SerializedName = @"skipQueryValidation",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SkipQueryValidation { get; set; }
        /// <summary>
        /// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource
        /// group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual
        /// machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert",
        SerializedName = @"targetResourceTypes",
        PossibleTypes = new [] { typeof(string) })]
        string[] TargetResourceType { get; set; }
        /// <summary>
        /// The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required
        /// only for rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required only for rules of the kind LogAlert.",
        SerializedName = @"windowSize",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? WindowSize { get; set; }

    }
    /// scheduled query rule Definition
    internal partial interface IScheduledQueryRulePropertiesInternal

    {
        /// <summary>Actions to invoke when the alert fires.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActions Action { get; set; }
        /// <summary>The properties of an alert payload.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActionsCustomProperties ActionCustomProperty { get; set; }
        /// <summary>Action Group resource Ids to invoke when the alert fires.</summary>
        string[] ActionGroup { get; set; }
        /// <summary>
        /// The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only
        /// for rules of the kind LogAlert.
        /// </summary>
        bool? AutoMitigate { get; set; }
        /// <summary>
        /// The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is
        /// false. Relevant only for rules of the kind LogAlert.
        /// </summary>
        bool? CheckWorkspaceAlertsStorageConfigured { get; set; }
        /// <summary>The api-version used when creating this alert rule</summary>
        string CreatedWithApiVersion { get; set; }
        /// <summary>The rule criteria that defines the conditions of the scheduled query rule.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleCriteria Criterion { get; set; }
        /// <summary>A list of conditions to evaluate against the specified scopes</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.ICondition[] CriterionAllOf { get; set; }
        /// <summary>The description of the scheduled query rule.</summary>
        string Description { get; set; }
        /// <summary>The display name of the alert rule</summary>
        string DisplayName { get; set; }
        /// <summary>
        /// The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
        /// </summary>
        bool? Enabled { get; set; }
        /// <summary>
        /// How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for
        /// rules of the kind LogAlert.
        /// </summary>
        global::System.TimeSpan? EvaluationFrequency { get; set; }
        /// <summary>True if alert rule is legacy Log Analytic rule</summary>
        bool? IsLegacyLogAnalyticsRule { get; set; }
        /// <summary>
        /// The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage.
        /// The default is false.
        /// </summary>
        bool? IsWorkspaceAlertsStorageConfigured { get; set; }
        /// <summary>
        /// Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules
        /// of the kind LogAlert.
        /// </summary>
        global::System.TimeSpan? MuteActionsDuration { get; set; }
        /// <summary>
        /// If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        global::System.TimeSpan? OverrideQueryTimeRange { get; set; }
        /// <summary>The list of resource id's that this scheduled query rule is scoped to.</summary>
        string[] Scope { get; set; }
        /// <summary>
        /// Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules
        /// of the kind LogAlert.
        /// </summary>
        long? Severity { get; set; }
        /// <summary>
        /// The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        bool? SkipQueryValidation { get; set; }
        /// <summary>
        /// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource
        /// group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual
        /// machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert
        /// </summary>
        string[] TargetResourceType { get; set; }
        /// <summary>
        /// The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required
        /// only for rules of the kind LogAlert.
        /// </summary>
        global::System.TimeSpan? WindowSize { get; set; }

    }
}