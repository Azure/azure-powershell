
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for Condition.
.Description
Create an in-memory object for Condition.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.Condition
.Link
https://learn.microsoft.com/powershell/module/Az.Monitor/new-AzScheduledQueryRuleConditionObject
#>
function New-AzScheduledQueryRuleConditionObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.Condition')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="List of Dimensions conditions.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IDimension[]]
        $Dimension,
        [Parameter(HelpMessage="The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1.")]
        [long]
        $FailingPeriodMinFailingPeriodsToAlert,
        [Parameter(HelpMessage="The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1.")]
        [long]
        $FailingPeriodNumberOfEvaluationPeriod,
        [Parameter(HelpMessage="The column containing the metric measure number. Relevant only for rules of the kind LogAlert.")]
        [string]
        $MetricMeasureColumn,
        [Parameter(HelpMessage="The name of the metric to be sent. Relevant and required only for rules of the kind LogToMetric.")]
        [string]
        $MetricName,
        [Parameter(HelpMessage="The criteria operator. Relevant and required only for rules of the kind LogAlert.")]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Support.ConditionOperator])]
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Support.ConditionOperator]
        $Operator,
        [Parameter(HelpMessage="Log query alert.")]
        [string]
        $Query,
        [Parameter(HelpMessage="The column containing the resource id. The content of the column must be a uri formatted as resource id. Relevant only for rules of the kind LogAlert.")]
        [string]
        $ResourceIdColumn,
        [Parameter(HelpMessage="the criteria threshold value that activates the alert. Relevant and required only for rules of the kind LogAlert.")]
        [double]
        $Threshold,
        [Parameter(HelpMessage="Aggregation type. Relevant and required only for rules of the kind LogAlert.")]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Support.TimeAggregation])]
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Support.TimeAggregation]
        $TimeAggregation
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.Condition]::New()

        if ($PSBoundParameters.ContainsKey('Dimension')) {
            $Object.Dimension = $Dimension
        }
        if ($PSBoundParameters.ContainsKey('FailingPeriodMinFailingPeriodsToAlert')) {
            $Object.FailingPeriodMinFailingPeriodsToAlert = $FailingPeriodMinFailingPeriodsToAlert
        }
        if ($PSBoundParameters.ContainsKey('FailingPeriodNumberOfEvaluationPeriod')) {
            $Object.FailingPeriodNumberOfEvaluationPeriod = $FailingPeriodNumberOfEvaluationPeriod
        }
        if ($PSBoundParameters.ContainsKey('MetricMeasureColumn')) {
            $Object.MetricMeasureColumn = $MetricMeasureColumn
        }
        if ($PSBoundParameters.ContainsKey('MetricName')) {
            $Object.MetricName = $MetricName
        }
        if ($PSBoundParameters.ContainsKey('Operator')) {
            $Object.Operator = $Operator
        }
        if ($PSBoundParameters.ContainsKey('Query')) {
            $Object.Query = $Query
        }
        if ($PSBoundParameters.ContainsKey('ResourceIdColumn')) {
            $Object.ResourceIdColumn = $ResourceIdColumn
        }
        if ($PSBoundParameters.ContainsKey('Threshold')) {
            $Object.Threshold = $Threshold
        }
        if ($PSBoundParameters.ContainsKey('TimeAggregation')) {
            $Object.TimeAggregation = $TimeAggregation
        }
        return $Object
    }
}

