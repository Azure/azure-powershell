// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using static Microsoft.Azure.PowerShell.Cmdlets.Monitor.Runtime.Extensions;
using global::System.Linq;

namespace Microsoft.Azure.PowerShell.Cmdlets.Monitor
{
    //Need to have an instance of ProxyClient in Module.cs, See "ClientAPI"
    public class ProxyClientAPI 
    {
        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.Monitor _clientAPI;

        public ProxyClientAPI (Microsoft.Azure.PowerShell.Cmdlets.Monitor.Monitor clientAPI)
        {
            _clientAPI = clientAPI;
        }
        private const string _subscriptionId = "default";
        public async global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20201001.IActivityLogAlertResource> ActivityLogAlertsGetAsync(string viaIdentity) 
        {
            using( NoSynchronizationContext )
            using (var listener = Microsoft.Azure.PowerShell.Cmdlets.Monitor.Runtime.ProxyEventListener<Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20201001.IActivityLogAlertResource>.CreateProxyEventListener())
            {
                await listener.GetAsync(viaIdentity, _clientAPI.ActivityLogAlertsGetViaIdentity);
                return listener.GetResult;
            }
        }

        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20201001.IActivityLogAlertResource ActivityLogAlertsGet(string viaIdentity)
        {
            return ActivityLogAlertsGetAsync(viaIdentity).GetAwaiter().GetResult();
        }

        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20201001.IActivityLogAlertResource ActivityLogAlertsGet(string resourceGroupName, string activityLogAlertName, string subscription = _subscriptionId)
        {
            string viaIdentity = global::System.Text.RegularExpressions.Regex.Replace(
                                "/subscriptions/"
                                + global::System.Uri.EscapeDataString(subscription)
                                + "/resourceGroups/"
                                + global::System.Uri.EscapeDataString(resourceGroupName)
                                + "/providers/Microsoft.Insights/activityLogAlerts/"
                                + global::System.Uri.EscapeDataString(activityLogAlertName)
                                ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2");
            return ActivityLogAlertsGet(viaIdentity);
        }

        private string GetSubscription()
        {
            using(global::System.Management.Automation.PowerShell pwsh = global::System.Management.Automation.PowerShell.Create(global::System.Management.Automation.RunspaceMode.CurrentRunspace)) {
                return pwsh.AddCommand("(Get-AzContext).Subscription.Id").Invoke<global::System.String>().FirstOrDefault();
            }
        }
    }
}