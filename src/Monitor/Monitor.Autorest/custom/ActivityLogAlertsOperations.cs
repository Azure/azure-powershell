// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using static Microsoft.Azure.PowerShell.Cmdlets.Monitor.Runtime.Extensions;
using global::System.Linq;

namespace Microsoft.Azure.PowerShell.Cmdlets.Monitor
{
    using OnDefault = global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20201001.IErrorResponse>, global::System.Threading.Tasks.Task>;
    using OnOkGet = global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20201001.IActivityLogAlertResource>, global::System.Threading.Tasks.Task>;

    public class ActivityLogAlertsOperations
    {
        private Microsoft.Azure.PowerShell.Cmdlets.Monitor.ProxyClient _client;

        internal ActivityLogAlertsOperations (Microsoft.Azure.PowerShell.Cmdlets.Monitor.ProxyClient client) {
            _client = client;
        }

        internal async global::System.Threading.Tasks.Task GetMethod(params object[] parameters)
        {
            string identity = (string) parameters[0];
            OnOkGet onOK = (OnOkGet) parameters[1];
            OnDefault onDefault = (OnDefault) parameters[2]; 
            Microsoft.Azure.PowerShell.Cmdlets.Monitor.Runtime.IEventListener eventListener = Microsoft.Azure.PowerShell.Cmdlets.Monitor.Runtime.ProxyEventListener.CreateProxyEventListener(_client.Cmdlet);
            Microsoft.Azure.PowerShell.Cmdlets.Monitor.Runtime.ISendAsync sender = Microsoft.Azure.PowerShell.Cmdlets.Monitor.Module.Instance.CreateProxyPipeline();
            using(NoSynchronizationContext)
            {
                await Microsoft.Azure.PowerShell.Cmdlets.Monitor.Module.Instance.ClientAPI.ActivityLogAlertsGetViaIdentity(identity, onOK, onDefault, eventListener, sender);
            }
        }

        internal async global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20201001.IActivityLogAlertResource> GetAsync(string viaIdentity)
        {
            using(NoSynchronizationContext)
            using(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Operation<Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20201001.IActivityLogAlertResource> op = new Microsoft.Azure.PowerShell.Cmdlets.Monitor.Operation<Microsoft.Azure.PowerShell.Cmdlets.Monitor.Models.Api20201001.IActivityLogAlertResource>())
            {
                OnOkGet onOk = op.onOk;
                OnDefault onDefault = op.onDefault;
                await op.Execute(GetMethod, new object[]{viaIdentity, onOk, onDefault});
                return op.Result;
            }
        }

        public async global::System.Threading.Tasks.Task<Azure.PowerShell.Cmdlets.Monitor.Models.Api20201001.IActivityLogAlertResource> GetAsync(string resourceGroupName, string activityLogAlertName)
        {
            string viaIdentity = global::System.Text.RegularExpressions.Regex.Replace(
                                "/subscriptions/"
                                + global::System.Uri.EscapeDataString(_client.SubscriptionId)
                                + "/resourceGroups/"
                                + global::System.Uri.EscapeDataString(resourceGroupName)
                                + "/providers/Microsoft.Insights/activityLogAlerts/"
                                + global::System.Uri.EscapeDataString(activityLogAlertName)
                                ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2");
            using(NoSynchronizationContext)
            {
                return await GetAsync(viaIdentity);
            }
        }

        public Azure.PowerShell.Cmdlets.Monitor.Models.Api20201001.IActivityLogAlertResource Get(string resourceGroupName, string activityLogAlertName)
        {
            return GetAsync(resourceGroupName, activityLogAlertName).GetAwaiter().GetResult();
        }
    }
}