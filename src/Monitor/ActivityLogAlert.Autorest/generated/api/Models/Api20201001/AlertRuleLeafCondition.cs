// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Monitor.ActivityLogAlert.Models.Api20201001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Monitor.ActivityLogAlert.Runtime.Extensions;

    /// <summary>
    /// An Activity Log Alert rule condition that is met by comparing the field and value of an Activity Log event.
    /// This condition must contain 'field' and either 'equals' or 'containsAny'.
    /// </summary>
    public partial class AlertRuleLeafCondition :
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ActivityLogAlert.Models.Api20201001.IAlertRuleLeafCondition,
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ActivityLogAlert.Models.Api20201001.IAlertRuleLeafConditionInternal
    {

        /// <summary>Backing field for <see cref="ContainsAny" /> property.</summary>
        private string[] _containsAny;

        /// <summary>
        /// The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition
        /// is met.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ActivityLogAlert.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ActivityLogAlert.PropertyOrigin.Owned)]
        public string[] ContainsAny { get => this._containsAny; set => this._containsAny = value; }

        /// <summary>Backing field for <see cref="Equal" /> property.</summary>
        private string _equal;

        /// <summary>
        /// The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ActivityLogAlert.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ActivityLogAlert.PropertyOrigin.Owned)]
        public string Equal { get => this._equal; set => this._equal = value; }

        /// <summary>Backing field for <see cref="Field" /> property.</summary>
        private string _field;

        /// <summary>
        /// The name of the Activity Log event's field that this condition will examine.
        /// The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName',
        /// 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ActivityLogAlert.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ActivityLogAlert.PropertyOrigin.Owned)]
        public string Field { get => this._field; set => this._field = value; }

        /// <summary>Creates an new <see cref="AlertRuleLeafCondition" /> instance.</summary>
        public AlertRuleLeafCondition()
        {

        }
    }
    /// An Activity Log Alert rule condition that is met by comparing the field and value of an Activity Log event.
    /// This condition must contain 'field' and either 'equals' or 'containsAny'.
    public partial interface IAlertRuleLeafCondition :
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ActivityLogAlert.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition
        /// is met.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ActivityLogAlert.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met.",
        SerializedName = @"containsAny",
        PossibleTypes = new [] { typeof(string) })]
        string[] ContainsAny { get; set; }
        /// <summary>
        /// The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ActivityLogAlert.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met.",
        SerializedName = @"equals",
        PossibleTypes = new [] { typeof(string) })]
        string Equal { get; set; }
        /// <summary>
        /// The name of the Activity Log event's field that this condition will examine.
        /// The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName',
        /// 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ActivityLogAlert.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the Activity Log event's field that this condition will examine.
        The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.",
        SerializedName = @"field",
        PossibleTypes = new [] { typeof(string) })]
        string Field { get; set; }

    }
    /// An Activity Log Alert rule condition that is met by comparing the field and value of an Activity Log event.
    /// This condition must contain 'field' and either 'equals' or 'containsAny'.
    internal partial interface IAlertRuleLeafConditionInternal

    {
        /// <summary>
        /// The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition
        /// is met.
        /// </summary>
        string[] ContainsAny { get; set; }
        /// <summary>
        /// The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met.
        /// </summary>
        string Equal { get; set; }
        /// <summary>
        /// The name of the Activity Log event's field that this condition will examine.
        /// The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName',
        /// 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.
        /// </summary>
        string Field { get; set; }

    }
}