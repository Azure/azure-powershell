// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Extensions;

    /// <summary>outlookGeoCoordinates</summary>
    public partial class MicrosoftGraphOutlookGeoCoordinates :
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphOutlookGeoCoordinates,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphOutlookGeoCoordinatesInternal
    {

        /// <summary>Backing field for <see cref="Accuracy" /> property.</summary>
        private double? _accuracy;

        /// <summary>
        /// The accuracy of the latitude and longitude. As an example, the accuracy can be measured in meters, such as the latitude
        /// and longitude are accurate to within 50 meters.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public double? Accuracy { get => this._accuracy; set => this._accuracy = value; }

        /// <summary>Backing field for <see cref="Altitude" /> property.</summary>
        private double? _altitude;

        /// <summary>The altitude of the location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public double? Altitude { get => this._altitude; set => this._altitude = value; }

        /// <summary>Backing field for <see cref="AltitudeAccuracy" /> property.</summary>
        private double? _altitudeAccuracy;

        /// <summary>The accuracy of the altitude.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public double? AltitudeAccuracy { get => this._altitudeAccuracy; set => this._altitudeAccuracy = value; }

        /// <summary>Backing field for <see cref="Latitude" /> property.</summary>
        private double? _latitude;

        /// <summary>The latitude of the location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public double? Latitude { get => this._latitude; set => this._latitude = value; }

        /// <summary>Backing field for <see cref="Longitude" /> property.</summary>
        private double? _longitude;

        /// <summary>The longitude of the location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public double? Longitude { get => this._longitude; set => this._longitude = value; }

        /// <summary>Creates an new <see cref="MicrosoftGraphOutlookGeoCoordinates" /> instance.</summary>
        public MicrosoftGraphOutlookGeoCoordinates()
        {

        }
    }
    /// outlookGeoCoordinates
    public partial interface IMicrosoftGraphOutlookGeoCoordinates :
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IAssociativeArray<global::System.Object>
    {
        /// <summary>
        /// The accuracy of the latitude and longitude. As an example, the accuracy can be measured in meters, such as the latitude
        /// and longitude are accurate to within 50 meters.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The accuracy of the latitude and longitude. As an example, the accuracy can be measured in meters, such as the latitude and longitude are accurate to within 50 meters.",
        SerializedName = @"accuracy",
        PossibleTypes = new [] { typeof(double) })]
        double? Accuracy { get; set; }
        /// <summary>The altitude of the location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The altitude of the location.",
        SerializedName = @"altitude",
        PossibleTypes = new [] { typeof(double) })]
        double? Altitude { get; set; }
        /// <summary>The accuracy of the altitude.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The accuracy of the altitude.",
        SerializedName = @"altitudeAccuracy",
        PossibleTypes = new [] { typeof(double) })]
        double? AltitudeAccuracy { get; set; }
        /// <summary>The latitude of the location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The latitude of the location.",
        SerializedName = @"latitude",
        PossibleTypes = new [] { typeof(double) })]
        double? Latitude { get; set; }
        /// <summary>The longitude of the location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The longitude of the location.",
        SerializedName = @"longitude",
        PossibleTypes = new [] { typeof(double) })]
        double? Longitude { get; set; }

    }
    /// outlookGeoCoordinates
    internal partial interface IMicrosoftGraphOutlookGeoCoordinatesInternal

    {
        /// <summary>
        /// The accuracy of the latitude and longitude. As an example, the accuracy can be measured in meters, such as the latitude
        /// and longitude are accurate to within 50 meters.
        /// </summary>
        double? Accuracy { get; set; }
        /// <summary>The altitude of the location.</summary>
        double? Altitude { get; set; }
        /// <summary>The accuracy of the altitude.</summary>
        double? AltitudeAccuracy { get; set; }
        /// <summary>The latitude of the location.</summary>
        double? Latitude { get; set; }
        /// <summary>The longitude of the location.</summary>
        double? Longitude { get; set; }

    }
}