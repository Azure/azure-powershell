// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Extensions;

    /// <summary>oAuth2PermissionGrant</summary>
    public partial class MicrosoftGraphOAuth2PermissionGrant :
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphOAuth2PermissionGrant,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphOAuth2PermissionGrantInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntity"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntity __microsoftGraphEntity = new Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.MicrosoftGraphEntity();

        /// <summary>Backing field for <see cref="ClientId" /> property.</summary>
        private string _clientId;

        /// <summary>
        /// The id of the client service principal for the application which is authorized to act on behalf of a signed-in user when
        /// accessing an API. Required. Supports $filter (eq only).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public string ClientId { get => this._clientId; set => this._clientId = value; }

        /// <summary>Backing field for <see cref="ConsentType" /> property.</summary>
        private string _consentType;

        /// <summary>
        /// Indicates whether authorization is granted for the client application to impersonate all users or only a specific user.
        /// AllPrincipals indicates authorization to impersonate all users. Principal indicates authorization to impersonate a specific
        /// user. Consent on behalf of all users can be granted by an administrator. Non-admin users may be authorized to consent
        /// on behalf of themselves in some cases, for some delegated permissions. Required. Supports $filter (eq only).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public string ConsentType { get => this._consentType; set => this._consentType = value; }

        /// <summary>Read-only.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntityInternal)__microsoftGraphEntity).Id; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntityInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntityInternal)__microsoftGraphEntity).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntityInternal)__microsoftGraphEntity).Id = value; }

        /// <summary>Backing field for <see cref="PrincipalId" /> property.</summary>
        private string _principalId;

        /// <summary>
        /// The id of the user on behalf of whom the client is authorized to access the resource, when consentType is Principal. If
        /// consentType is AllPrincipals this value is null. Required when consentType is Principal.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public string PrincipalId { get => this._principalId; set => this._principalId = value; }

        /// <summary>Backing field for <see cref="ResourceId" /> property.</summary>
        private string _resourceId;

        /// <summary>
        /// The id of the resource service principal to which access is authorized. This identifies the API which the client is authorized
        /// to attempt to call on behalf of a signed-in user.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public string ResourceId { get => this._resourceId; set => this._resourceId = value; }

        /// <summary>Backing field for <see cref="Scope" /> property.</summary>
        private string _scope;

        /// <summary>
        /// A space-separated list of the claim values for delegated permissions which should be included in access tokens for the
        /// resource application (the API). For example, openid User.Read GroupMember.Read.All. Each claim value should match the
        /// value field of one of the delegated permissions defined by the API, listed in the publishedPermissionScopes property of
        /// the resource service principal.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public string Scope { get => this._scope; set => this._scope = value; }

        /// <summary>Creates an new <see cref="MicrosoftGraphOAuth2PermissionGrant" /> instance.</summary>
        public MicrosoftGraphOAuth2PermissionGrant()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__microsoftGraphEntity), __microsoftGraphEntity);
            await eventListener.AssertObjectIsValid(nameof(__microsoftGraphEntity), __microsoftGraphEntity);
        }
    }
    /// oAuth2PermissionGrant
    public partial interface IMicrosoftGraphOAuth2PermissionGrant :
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntity,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IAssociativeArray<global::System.Object>
    {
        /// <summary>
        /// The id of the client service principal for the application which is authorized to act on behalf of a signed-in user when
        /// accessing an API. Required. Supports $filter (eq only).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The id of the client service principal for the application which is authorized to act on behalf of a signed-in user when accessing an API. Required. Supports $filter (eq only).",
        SerializedName = @"clientId",
        PossibleTypes = new [] { typeof(string) })]
        string ClientId { get; set; }
        /// <summary>
        /// Indicates whether authorization is granted for the client application to impersonate all users or only a specific user.
        /// AllPrincipals indicates authorization to impersonate all users. Principal indicates authorization to impersonate a specific
        /// user. Consent on behalf of all users can be granted by an administrator. Non-admin users may be authorized to consent
        /// on behalf of themselves in some cases, for some delegated permissions. Required. Supports $filter (eq only).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether authorization is granted for the client application to impersonate all users or only a specific user. AllPrincipals indicates authorization to impersonate all users. Principal indicates authorization to impersonate a specific user. Consent on behalf of all users can be granted by an administrator. Non-admin users may be authorized to consent on behalf of themselves in some cases, for some delegated permissions. Required. Supports $filter (eq only).",
        SerializedName = @"consentType",
        PossibleTypes = new [] { typeof(string) })]
        string ConsentType { get; set; }
        /// <summary>
        /// The id of the user on behalf of whom the client is authorized to access the resource, when consentType is Principal. If
        /// consentType is AllPrincipals this value is null. Required when consentType is Principal.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The id of the user on behalf of whom the client is authorized to access the resource, when consentType is Principal. If consentType is AllPrincipals this value is null. Required when consentType is Principal.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string PrincipalId { get; set; }
        /// <summary>
        /// The id of the resource service principal to which access is authorized. This identifies the API which the client is authorized
        /// to attempt to call on behalf of a signed-in user.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The id of the resource service principal to which access is authorized. This identifies the API which the client is authorized to attempt to call on behalf of a signed-in user.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceId { get; set; }
        /// <summary>
        /// A space-separated list of the claim values for delegated permissions which should be included in access tokens for the
        /// resource application (the API). For example, openid User.Read GroupMember.Read.All. Each claim value should match the
        /// value field of one of the delegated permissions defined by the API, listed in the publishedPermissionScopes property of
        /// the resource service principal.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A space-separated list of the claim values for delegated permissions which should be included in access tokens for the resource application (the API). For example, openid User.Read GroupMember.Read.All. Each claim value should match the value field of one of the delegated permissions defined by the API, listed in the publishedPermissionScopes property of the resource service principal.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        string Scope { get; set; }

    }
    /// oAuth2PermissionGrant
    internal partial interface IMicrosoftGraphOAuth2PermissionGrantInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntityInternal
    {
        /// <summary>
        /// The id of the client service principal for the application which is authorized to act on behalf of a signed-in user when
        /// accessing an API. Required. Supports $filter (eq only).
        /// </summary>
        string ClientId { get; set; }
        /// <summary>
        /// Indicates whether authorization is granted for the client application to impersonate all users or only a specific user.
        /// AllPrincipals indicates authorization to impersonate all users. Principal indicates authorization to impersonate a specific
        /// user. Consent on behalf of all users can be granted by an administrator. Non-admin users may be authorized to consent
        /// on behalf of themselves in some cases, for some delegated permissions. Required. Supports $filter (eq only).
        /// </summary>
        string ConsentType { get; set; }
        /// <summary>
        /// The id of the user on behalf of whom the client is authorized to access the resource, when consentType is Principal. If
        /// consentType is AllPrincipals this value is null. Required when consentType is Principal.
        /// </summary>
        string PrincipalId { get; set; }
        /// <summary>
        /// The id of the resource service principal to which access is authorized. This identifies the API which the client is authorized
        /// to attempt to call on behalf of a signed-in user.
        /// </summary>
        string ResourceId { get; set; }
        /// <summary>
        /// A space-separated list of the claim values for delegated permissions which should be included in access tokens for the
        /// resource application (the API). For example, openid User.Read GroupMember.Read.All. Each claim value should match the
        /// value field of one of the delegated permissions defined by the API, listed in the publishedPermissionScopes property of
        /// the resource service principal.
        /// </summary>
        string Scope { get; set; }

    }
}