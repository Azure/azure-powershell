// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Extensions;

    /// <summary>chatMessageAttachment</summary>
    public partial class MicrosoftGraphChatMessageAttachment :
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphChatMessageAttachment,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphChatMessageAttachmentInternal
    {

        /// <summary>Backing field for <see cref="Content" /> property.</summary>
        private string _content;

        /// <summary>
        /// The content of the attachment. If the attachment is a rich card, set the property to the rich card object. This property
        /// and contentUrl are mutually exclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public string Content { get => this._content; set => this._content = value; }

        /// <summary>Backing field for <see cref="ContentType" /> property.</summary>
        private string _contentType;

        /// <summary>
        /// The media type of the content attachment. It can have the following values: reference: Attachment is a link to another
        /// file. Populate the contentURL with the link to the object.Any contentTypes supported by the Bot Framework's Attachment
        /// objectapplication/vnd.microsoft.card.codesnippet: A code snippet. application/vnd.microsoft.card.announcement: An announcement
        /// header.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public string ContentType { get => this._contentType; set => this._contentType = value; }

        /// <summary>Backing field for <see cref="ContentUrl" /> property.</summary>
        private string _contentUrl;

        /// <summary>
        /// URL for the content of the attachment. Supported protocols: http, https, file and data.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public string ContentUrl { get => this._contentUrl; set => this._contentUrl = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>Read-only. Unique id of the attachment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public string Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Name of the attachment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="ThumbnailUrl" /> property.</summary>
        private string _thumbnailUrl;

        /// <summary>
        /// URL to a thumbnail image that the channel can use if it supports using an alternative, smaller form of content or contentUrl.
        /// For example, if you set contentType to application/word and set contentUrl to the location of the Word document, you might
        /// include a thumbnail image that represents the document. The channel could display the thumbnail image instead of the document.
        /// When the user clicks the image, the channel would open the document.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public string ThumbnailUrl { get => this._thumbnailUrl; set => this._thumbnailUrl = value; }

        /// <summary>Creates an new <see cref="MicrosoftGraphChatMessageAttachment" /> instance.</summary>
        public MicrosoftGraphChatMessageAttachment()
        {

        }
    }
    /// chatMessageAttachment
    public partial interface IMicrosoftGraphChatMessageAttachment :
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IAssociativeArray<global::System.Object>
    {
        /// <summary>
        /// The content of the attachment. If the attachment is a rich card, set the property to the rich card object. This property
        /// and contentUrl are mutually exclusive.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The content of the attachment. If the attachment is a rich card, set the property to the rich card object. This property and contentUrl are mutually exclusive.",
        SerializedName = @"content",
        PossibleTypes = new [] { typeof(string) })]
        string Content { get; set; }
        /// <summary>
        /// The media type of the content attachment. It can have the following values: reference: Attachment is a link to another
        /// file. Populate the contentURL with the link to the object.Any contentTypes supported by the Bot Framework's Attachment
        /// objectapplication/vnd.microsoft.card.codesnippet: A code snippet. application/vnd.microsoft.card.announcement: An announcement
        /// header.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The media type of the content attachment. It can have the following values: reference: Attachment is a link to another file. Populate the contentURL with the link to the object.Any contentTypes supported by the Bot Framework's Attachment objectapplication/vnd.microsoft.card.codesnippet: A code snippet. application/vnd.microsoft.card.announcement: An announcement header.",
        SerializedName = @"contentType",
        PossibleTypes = new [] { typeof(string) })]
        string ContentType { get; set; }
        /// <summary>
        /// URL for the content of the attachment. Supported protocols: http, https, file and data.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"URL for the content of the attachment. Supported protocols: http, https, file and data.",
        SerializedName = @"contentUrl",
        PossibleTypes = new [] { typeof(string) })]
        string ContentUrl { get; set; }
        /// <summary>Read-only. Unique id of the attachment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Read-only. Unique id of the attachment.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get; set; }
        /// <summary>Name of the attachment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the attachment.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>
        /// URL to a thumbnail image that the channel can use if it supports using an alternative, smaller form of content or contentUrl.
        /// For example, if you set contentType to application/word and set contentUrl to the location of the Word document, you might
        /// include a thumbnail image that represents the document. The channel could display the thumbnail image instead of the document.
        /// When the user clicks the image, the channel would open the document.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"URL to a thumbnail image that the channel can use if it supports using an alternative, smaller form of content or contentUrl. For example, if you set contentType to application/word and set contentUrl to the location of the Word document, you might include a thumbnail image that represents the document. The channel could display the thumbnail image instead of the document. When the user clicks the image, the channel would open the document.",
        SerializedName = @"thumbnailUrl",
        PossibleTypes = new [] { typeof(string) })]
        string ThumbnailUrl { get; set; }

    }
    /// chatMessageAttachment
    internal partial interface IMicrosoftGraphChatMessageAttachmentInternal

    {
        /// <summary>
        /// The content of the attachment. If the attachment is a rich card, set the property to the rich card object. This property
        /// and contentUrl are mutually exclusive.
        /// </summary>
        string Content { get; set; }
        /// <summary>
        /// The media type of the content attachment. It can have the following values: reference: Attachment is a link to another
        /// file. Populate the contentURL with the link to the object.Any contentTypes supported by the Bot Framework's Attachment
        /// objectapplication/vnd.microsoft.card.codesnippet: A code snippet. application/vnd.microsoft.card.announcement: An announcement
        /// header.
        /// </summary>
        string ContentType { get; set; }
        /// <summary>
        /// URL for the content of the attachment. Supported protocols: http, https, file and data.
        /// </summary>
        string ContentUrl { get; set; }
        /// <summary>Read-only. Unique id of the attachment.</summary>
        string Id { get; set; }
        /// <summary>Name of the attachment.</summary>
        string Name { get; set; }
        /// <summary>
        /// URL to a thumbnail image that the channel can use if it supports using an alternative, smaller form of content or contentUrl.
        /// For example, if you set contentType to application/word and set contentUrl to the location of the Word document, you might
        /// include a thumbnail image that represents the document. The channel could display the thumbnail image instead of the document.
        /// When the user clicks the image, the channel would open the document.
        /// </summary>
        string ThumbnailUrl { get; set; }

    }
}