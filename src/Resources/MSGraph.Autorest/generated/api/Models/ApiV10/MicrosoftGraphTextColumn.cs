// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Extensions;

    /// <summary>textColumn</summary>
    public partial class MicrosoftGraphTextColumn :
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphTextColumn,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphTextColumnInternal
    {

        /// <summary>Backing field for <see cref="AllowMultipleLine" /> property.</summary>
        private bool? _allowMultipleLine;

        /// <summary>Whether to allow multiple lines of text.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public bool? AllowMultipleLine { get => this._allowMultipleLine; set => this._allowMultipleLine = value; }

        /// <summary>Backing field for <see cref="AppendChangesToExistingText" /> property.</summary>
        private bool? _appendChangesToExistingText;

        /// <summary>Whether updates to this column should replace existing text, or append to it.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public bool? AppendChangesToExistingText { get => this._appendChangesToExistingText; set => this._appendChangesToExistingText = value; }

        /// <summary>Backing field for <see cref="LinesForEditing" /> property.</summary>
        private int? _linesForEditing;

        /// <summary>The size of the text box.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public int? LinesForEditing { get => this._linesForEditing; set => this._linesForEditing = value; }

        /// <summary>Backing field for <see cref="MaxLength" /> property.</summary>
        private int? _maxLength;

        /// <summary>The maximum number of characters for the value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public int? MaxLength { get => this._maxLength; set => this._maxLength = value; }

        /// <summary>Backing field for <see cref="TextType" /> property.</summary>
        private string _textType;

        /// <summary>The type of text being stored. Must be one of plain or richText</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public string TextType { get => this._textType; set => this._textType = value; }

        /// <summary>Creates an new <see cref="MicrosoftGraphTextColumn" /> instance.</summary>
        public MicrosoftGraphTextColumn()
        {

        }
    }
    /// textColumn
    public partial interface IMicrosoftGraphTextColumn :
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IAssociativeArray<global::System.Object>
    {
        /// <summary>Whether to allow multiple lines of text.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to allow multiple lines of text.",
        SerializedName = @"allowMultipleLines",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowMultipleLine { get; set; }
        /// <summary>Whether updates to this column should replace existing text, or append to it.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether updates to this column should replace existing text, or append to it.",
        SerializedName = @"appendChangesToExistingText",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AppendChangesToExistingText { get; set; }
        /// <summary>The size of the text box.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The size of the text box.",
        SerializedName = @"linesForEditing",
        PossibleTypes = new [] { typeof(int) })]
        int? LinesForEditing { get; set; }
        /// <summary>The maximum number of characters for the value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum number of characters for the value.",
        SerializedName = @"maxLength",
        PossibleTypes = new [] { typeof(int) })]
        int? MaxLength { get; set; }
        /// <summary>The type of text being stored. Must be one of plain or richText</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of text being stored. Must be one of plain or richText",
        SerializedName = @"textType",
        PossibleTypes = new [] { typeof(string) })]
        string TextType { get; set; }

    }
    /// textColumn
    internal partial interface IMicrosoftGraphTextColumnInternal

    {
        /// <summary>Whether to allow multiple lines of text.</summary>
        bool? AllowMultipleLine { get; set; }
        /// <summary>Whether updates to this column should replace existing text, or append to it.</summary>
        bool? AppendChangesToExistingText { get; set; }
        /// <summary>The size of the text box.</summary>
        int? LinesForEditing { get; set; }
        /// <summary>The maximum number of characters for the value.</summary>
        int? MaxLength { get; set; }
        /// <summary>The type of text being stored. Must be one of plain or richText</summary>
        string TextType { get; set; }

    }
}