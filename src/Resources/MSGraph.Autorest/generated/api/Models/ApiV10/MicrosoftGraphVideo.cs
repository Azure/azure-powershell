// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Extensions;

    /// <summary>video</summary>
    public partial class MicrosoftGraphVideo :
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphVideo,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphVideoInternal
    {

        /// <summary>Backing field for <see cref="AudioBitsPerSample" /> property.</summary>
        private int? _audioBitsPerSample;

        /// <summary>Number of audio bits per sample.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public int? AudioBitsPerSample { get => this._audioBitsPerSample; set => this._audioBitsPerSample = value; }

        /// <summary>Backing field for <see cref="AudioChannel" /> property.</summary>
        private int? _audioChannel;

        /// <summary>Number of audio channels.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public int? AudioChannel { get => this._audioChannel; set => this._audioChannel = value; }

        /// <summary>Backing field for <see cref="AudioFormat" /> property.</summary>
        private string _audioFormat;

        /// <summary>Name of the audio format (AAC, MP3, etc.).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public string AudioFormat { get => this._audioFormat; set => this._audioFormat = value; }

        /// <summary>Backing field for <see cref="AudioSamplesPerSecond" /> property.</summary>
        private int? _audioSamplesPerSecond;

        /// <summary>Number of audio samples per second.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public int? AudioSamplesPerSecond { get => this._audioSamplesPerSecond; set => this._audioSamplesPerSecond = value; }

        /// <summary>Backing field for <see cref="Bitrate" /> property.</summary>
        private int? _bitrate;

        /// <summary>Bit rate of the video in bits per second.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public int? Bitrate { get => this._bitrate; set => this._bitrate = value; }

        /// <summary>Backing field for <see cref="Duration" /> property.</summary>
        private long? _duration;

        /// <summary>Duration of the file in milliseconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public long? Duration { get => this._duration; set => this._duration = value; }

        /// <summary>Backing field for <see cref="FourCc" /> property.</summary>
        private string _fourCc;

        /// <summary>'Four character code' name of the video format.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public string FourCc { get => this._fourCc; set => this._fourCc = value; }

        /// <summary>Backing field for <see cref="FrameRate" /> property.</summary>
        private double? _frameRate;

        /// <summary>Frame rate of the video.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public double? FrameRate { get => this._frameRate; set => this._frameRate = value; }

        /// <summary>Backing field for <see cref="Height" /> property.</summary>
        private int? _height;

        /// <summary>Height of the video, in pixels.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public int? Height { get => this._height; set => this._height = value; }

        /// <summary>Backing field for <see cref="Width" /> property.</summary>
        private int? _width;

        /// <summary>Width of the video, in pixels.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public int? Width { get => this._width; set => this._width = value; }

        /// <summary>Creates an new <see cref="MicrosoftGraphVideo" /> instance.</summary>
        public MicrosoftGraphVideo()
        {

        }
    }
    /// video
    public partial interface IMicrosoftGraphVideo :
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IAssociativeArray<global::System.Object>
    {
        /// <summary>Number of audio bits per sample.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of audio bits per sample.",
        SerializedName = @"audioBitsPerSample",
        PossibleTypes = new [] { typeof(int) })]
        int? AudioBitsPerSample { get; set; }
        /// <summary>Number of audio channels.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of audio channels.",
        SerializedName = @"audioChannels",
        PossibleTypes = new [] { typeof(int) })]
        int? AudioChannel { get; set; }
        /// <summary>Name of the audio format (AAC, MP3, etc.).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the audio format (AAC, MP3, etc.).",
        SerializedName = @"audioFormat",
        PossibleTypes = new [] { typeof(string) })]
        string AudioFormat { get; set; }
        /// <summary>Number of audio samples per second.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of audio samples per second.",
        SerializedName = @"audioSamplesPerSecond",
        PossibleTypes = new [] { typeof(int) })]
        int? AudioSamplesPerSecond { get; set; }
        /// <summary>Bit rate of the video in bits per second.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Bit rate of the video in bits per second.",
        SerializedName = @"bitrate",
        PossibleTypes = new [] { typeof(int) })]
        int? Bitrate { get; set; }
        /// <summary>Duration of the file in milliseconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Duration of the file in milliseconds.",
        SerializedName = @"duration",
        PossibleTypes = new [] { typeof(long) })]
        long? Duration { get; set; }
        /// <summary>'Four character code' name of the video format.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"'Four character code' name of the video format.",
        SerializedName = @"fourCC",
        PossibleTypes = new [] { typeof(string) })]
        string FourCc { get; set; }
        /// <summary>Frame rate of the video.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Frame rate of the video.",
        SerializedName = @"frameRate",
        PossibleTypes = new [] { typeof(double) })]
        double? FrameRate { get; set; }
        /// <summary>Height of the video, in pixels.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Height of the video, in pixels.",
        SerializedName = @"height",
        PossibleTypes = new [] { typeof(int) })]
        int? Height { get; set; }
        /// <summary>Width of the video, in pixels.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Width of the video, in pixels.",
        SerializedName = @"width",
        PossibleTypes = new [] { typeof(int) })]
        int? Width { get; set; }

    }
    /// video
    internal partial interface IMicrosoftGraphVideoInternal

    {
        /// <summary>Number of audio bits per sample.</summary>
        int? AudioBitsPerSample { get; set; }
        /// <summary>Number of audio channels.</summary>
        int? AudioChannel { get; set; }
        /// <summary>Name of the audio format (AAC, MP3, etc.).</summary>
        string AudioFormat { get; set; }
        /// <summary>Number of audio samples per second.</summary>
        int? AudioSamplesPerSecond { get; set; }
        /// <summary>Bit rate of the video in bits per second.</summary>
        int? Bitrate { get; set; }
        /// <summary>Duration of the file in milliseconds.</summary>
        long? Duration { get; set; }
        /// <summary>'Four character code' name of the video format.</summary>
        string FourCc { get; set; }
        /// <summary>Frame rate of the video.</summary>
        double? FrameRate { get; set; }
        /// <summary>Height of the video, in pixels.</summary>
        int? Height { get; set; }
        /// <summary>Width of the video, in pixels.</summary>
        int? Width { get; set; }

    }
}