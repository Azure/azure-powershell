// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Extensions;

    /// <summary>
    /// Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity
    /// types.
    /// </summary>
    public partial class MicrosoftGraphGroup :
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroup,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroupInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject __microsoftGraphDirectoryObject = new Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.MicrosoftGraphDirectoryObject();

        /// <summary>Backing field for <see cref="AppRoleAssignment" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphAppRoleAssignmentAutoGenerated[] _appRoleAssignment;

        /// <summary>
        /// Represents the app roles a group has been granted for an application. Supports $expand.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphAppRoleAssignmentAutoGenerated[] AppRoleAssignment { get => this._appRoleAssignment; set => this._appRoleAssignment = value; }

        /// <summary>Backing field for <see cref="Classification" /> property.</summary>
        private string _classification;

        /// <summary>
        /// Describes a classification for the group (such as low, medium or high business impact). Valid values for this property
        /// are defined by creating a ClassificationList setting value, based on the template definition.Returned by default. Supports
        /// $filter (eq, ne, NOT, ge, le, startsWith).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public string Classification { get => this._classification; set => this._classification = value; }

        /// <summary>Backing field for <see cref="CreatedDateTime" /> property.</summary>
        private global::System.DateTime? _createdDateTime;

        /// <summary>
        /// Timestamp of when the group was created. The value cannot be modified and is automatically populated when the group is
        /// created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For
        /// example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, NOT, ge,
        /// le, in). Read-only.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public global::System.DateTime? CreatedDateTime { get => this._createdDateTime; }

        /// <summary>Backing field for <see cref="CreatedOnBehalfOf" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject _createdOnBehalfOf;

        /// <summary>
        /// Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity
        /// types.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject CreatedOnBehalfOf { get => (this._createdOnBehalfOf = this._createdOnBehalfOf ?? new Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.MicrosoftGraphDirectoryObject()); set => this._createdOnBehalfOf = value; }

        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public global::System.DateTime? DeletedDateTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObjectInternal)__microsoftGraphDirectoryObject).DeletedDateTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObjectInternal)__microsoftGraphDirectoryObject).DeletedDateTime = value ?? default(global::System.DateTime); }

        /// <summary>Backing field for <see cref="Description" /> property.</summary>
        private string _description;

        /// <summary>
        /// An optional description for the group. Returned by default. Supports $filter (eq, ne, NOT, ge, le, startsWith) and $search.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.FormatTable(Index = 3)]
        public string Description { get => this._description; set => this._description = value; }

        /// <summary>The name displayed in directory</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.FormatTable(Index = 0)]
        public string DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObjectInternal)__microsoftGraphDirectoryObject).DisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObjectInternal)__microsoftGraphDirectoryObject).DisplayName = value ?? null; }

        /// <summary>Backing field for <see cref="ExpirationDateTime" /> property.</summary>
        private global::System.DateTime? _expirationDateTime;

        /// <summary>
        /// Timestamp of when the group is set to expire. The value cannot be modified and is automatically populated when the group
        /// is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For
        /// example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, NOT, ge,
        /// le, in). Read-only.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public global::System.DateTime? ExpirationDateTime { get => this._expirationDateTime; }

        /// <summary>Backing field for <see cref="GroupLifecyclePolicy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroupLifecyclePolicy[] _groupLifecyclePolicy;

        /// <summary>The collection of lifecycle policies for this group. Read-only. Nullable.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroupLifecyclePolicy[] GroupLifecyclePolicy { get => this._groupLifecyclePolicy; }

        /// <summary>Backing field for <see cref="GroupType" /> property.</summary>
        private string[] _groupType;

        /// <summary>
        /// Specifies the group type and its membership. If the collection contains Unified, the group is a Microsoft 365 group; otherwise,
        /// it's either a security group or distribution group. For details, see groups overview.If the collection includes DynamicMembership,
        /// the group has dynamic membership; otherwise, membership is static. Returned by default. Supports $filter (eq, NOT).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public string[] GroupType { get => this._groupType; set => this._groupType = value; }

        /// <summary>Backing field for <see cref="HasMembersWithLicenseError" /> property.</summary>
        private bool? _hasMembersWithLicenseError;

        /// <summary>
        /// Indicates whether there are members in this group that have license errors from its group-based license assignment. This
        /// property is never returned on a GET operation. You can use it as a $filter argument to get groups that have members with
        /// license errors (that is, filter for this property being true). Supports $filter (eq).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public bool? HasMembersWithLicenseError { get => this._hasMembersWithLicenseError; set => this._hasMembersWithLicenseError = value; }

        /// <summary>Read-only.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.FormatTable(Index = 1)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntityInternal)__microsoftGraphDirectoryObject).Id; }

        /// <summary>Backing field for <see cref="IsArchived" /> property.</summary>
        private bool? _isArchived;

        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public bool? IsArchived { get => this._isArchived; set => this._isArchived = value; }

        /// <summary>Backing field for <see cref="IsAssignableToRole" /> property.</summary>
        private bool? _isAssignableToRole;

        /// <summary>
        /// Indicates whether this group can be assigned to an Azure Active Directory role.This property can only be set while creating
        /// the group and is immutable. If set to true, the securityEnabled property must also be set to true and the group cannot
        /// be a dynamic group (that is, groupTypes cannot contain DynamicMembership). Only callers in Global administrator and Privileged
        /// role administrator roles can set this property. The caller must also be assigned the Directory.AccessAsUser.All permission
        /// to set this property. For more, see Using a group to manage Azure AD role assignmentsReturned by default. Supports $filter
        /// (eq, ne, NOT).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public bool? IsAssignableToRole { get => this._isAssignableToRole; set => this._isAssignableToRole = value; }

        /// <summary>Backing field for <see cref="Mail" /> property.</summary>
        private string _mail;

        /// <summary>
        /// The SMTP address for the group, for example, 'serviceadmins@contoso.onmicrosoft.com'. Returned by default. Read-only.
        /// Supports $filter (eq, ne, NOT, ge, le, in, startsWith).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public string Mail { get => this._mail; }

        /// <summary>Backing field for <see cref="MailEnabled" /> property.</summary>
        private bool? _mailEnabled;

        /// <summary>
        /// Specifies whether the group is mail-enabled. Returned by default. Supports $filter (eq, ne, NOT).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public bool? MailEnabled { get => this._mailEnabled; set => this._mailEnabled = value; }

        /// <summary>Backing field for <see cref="MailNickname" /> property.</summary>
        private string _mailNickname;

        /// <summary>
        /// The mail alias for the group, unique in the organization. This property must be specified when a group is created. These
        /// characters cannot be used in the mailNickName: @()/[]';:.<>,SPACE. Returned by default. Supports $filter (eq, ne, NOT,
        /// ge, le, in, startsWith).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.FormatTable(Index = 2)]
        public string MailNickname { get => this._mailNickname; set => this._mailNickname = value; }

        /// <summary>Backing field for <see cref="Member" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] _member;

        /// <summary>
        /// Users, contacts, and groups that are members of this group. HTTP Methods: GET (supported for all groups), POST (supported
        /// for security groups and mail-enabled security groups), DELETE (supported only for security groups) Read-only. Nullable.
        /// Supports $expand.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] Member { get => this._member; }

        /// <summary>Backing field for <see cref="MemberOf" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] _memberOf;

        /// <summary>
        /// Groups and administrative units that this group is a member of. HTTP Methods: GET (supported for all groups). Read-only.
        /// Nullable. Supports $expand.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] MemberOf { get => this._memberOf; }

        /// <summary>Backing field for <see cref="MembersWithLicenseError" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] _membersWithLicenseError;

        /// <summary>
        /// A list of group members with license errors from this group-based license assignment. Read-only.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] MembersWithLicenseError { get => this._membersWithLicenseError; }

        /// <summary>Backing field for <see cref="MembershipRule" /> property.</summary>
        private string _membershipRule;

        /// <summary>
        /// The rule that determines members for this group if the group is a dynamic group (groupTypes contains DynamicMembership).
        /// For more information about the syntax of the membership rule, see Membership Rules syntax. Returned by default. Supports
        /// $filter (eq, ne, NOT, ge, le, startsWith).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public string MembershipRule { get => this._membershipRule; set => this._membershipRule = value; }

        /// <summary>Backing field for <see cref="MembershipRuleProcessingState" /> property.</summary>
        private string _membershipRuleProcessingState;

        /// <summary>
        /// Indicates whether the dynamic membership processing is on or paused. Possible values are On or Paused. Returned by default.
        /// Supports $filter (eq, ne, NOT, in).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public string MembershipRuleProcessingState { get => this._membershipRuleProcessingState; set => this._membershipRuleProcessingState = value; }

        /// <summary>Internal Acessors for OdataId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObjectInternal.OdataId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObjectInternal)__microsoftGraphDirectoryObject).OdataId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObjectInternal)__microsoftGraphDirectoryObject).OdataId = value; }

        /// <summary>Internal Acessors for OdataType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObjectInternal.OdataType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObjectInternal)__microsoftGraphDirectoryObject).OdataType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObjectInternal)__microsoftGraphDirectoryObject).OdataType = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntityInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntityInternal)__microsoftGraphDirectoryObject).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntityInternal)__microsoftGraphDirectoryObject).Id = value; }

        /// <summary>Internal Acessors for CreatedDateTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroupInternal.CreatedDateTime { get => this._createdDateTime; set { {_createdDateTime = value;} } }

        /// <summary>Internal Acessors for ExpirationDateTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroupInternal.ExpirationDateTime { get => this._expirationDateTime; set { {_expirationDateTime = value;} } }

        /// <summary>Internal Acessors for GroupLifecyclePolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroupLifecyclePolicy[] Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroupInternal.GroupLifecyclePolicy { get => this._groupLifecyclePolicy; set { {_groupLifecyclePolicy = value;} } }

        /// <summary>Internal Acessors for Mail</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroupInternal.Mail { get => this._mail; set { {_mail = value;} } }

        /// <summary>Internal Acessors for Member</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroupInternal.Member { get => this._member; set { {_member = value;} } }

        /// <summary>Internal Acessors for MemberOf</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroupInternal.MemberOf { get => this._memberOf; set { {_memberOf = value;} } }

        /// <summary>Internal Acessors for MembersWithLicenseError</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroupInternal.MembersWithLicenseError { get => this._membersWithLicenseError; set { {_membersWithLicenseError = value;} } }

        /// <summary>Internal Acessors for Owner</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroupInternal.Owner { get => this._owner; set { {_owner = value;} } }

        /// <summary>Internal Acessors for ProxyAddress</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroupInternal.ProxyAddress { get => this._proxyAddress; set { {_proxyAddress = value;} } }

        /// <summary>Internal Acessors for RenewedDateTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroupInternal.RenewedDateTime { get => this._renewedDateTime; set { {_renewedDateTime = value;} } }

        /// <summary>The full id of object in directory</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public string OdataId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObjectInternal)__microsoftGraphDirectoryObject).OdataId; }

        /// <summary>The type of object in directory</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public string OdataType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObjectInternal)__microsoftGraphDirectoryObject).OdataType; }

        /// <summary>Backing field for <see cref="Owner" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] _owner;

        /// <summary>
        /// The owners of the group. The owners are a set of non-admin users who are allowed to modify this object. HTTP Methods:
        /// GET (supported for all groups), POST (supported for security groups and mail-enabled security groups), DELETE (supported
        /// only for security groups) Read-only. Nullable. Supports $expand.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] Owner { get => this._owner; }

        /// <summary>Backing field for <see cref="PermissionGrant" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphResourceSpecificPermissionGrant[] _permissionGrant;

        /// <summary>
        /// The permissions that have been granted for a group to a specific application. Supports $expand.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphResourceSpecificPermissionGrant[] PermissionGrant { get => this._permissionGrant; set => this._permissionGrant = value; }

        /// <summary>Backing field for <see cref="PreferredDataLocation" /> property.</summary>
        private string _preferredDataLocation;

        /// <summary>
        /// The preferred data location for the group. For more information, see OneDrive Online Multi-Geo. Returned by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public string PreferredDataLocation { get => this._preferredDataLocation; set => this._preferredDataLocation = value; }

        /// <summary>Backing field for <see cref="PreferredLanguage" /> property.</summary>
        private string _preferredLanguage;

        /// <summary>
        /// The preferred language for a Microsoft 365 group. Should follow ISO 639-1 Code; for example 'en-US'. Returned by default.
        /// Supports $filter (eq, ne, NOT, ge, le, in, startsWith).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public string PreferredLanguage { get => this._preferredLanguage; set => this._preferredLanguage = value; }

        /// <summary>Backing field for <see cref="ProxyAddress" /> property.</summary>
        private string[] _proxyAddress;

        /// <summary>
        /// Email addresses for the group that direct to the same group mailbox. For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com'].
        /// The any operator is required for filter expressions on multi-valued properties. Returned by default. Read-only. Not nullable.
        /// Supports $filter (eq, NOT, ge, le, startsWith).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public string[] ProxyAddress { get => this._proxyAddress; }

        /// <summary>Backing field for <see cref="RenewedDateTime" /> property.</summary>
        private global::System.DateTime? _renewedDateTime;

        /// <summary>
        /// Timestamp of when the group was last renewed. This cannot be modified directly and is only updated via the renew service
        /// action. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example,
        /// midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, NOT, ge, le, in).
        /// Read-only.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public global::System.DateTime? RenewedDateTime { get => this._renewedDateTime; }

        /// <summary>Backing field for <see cref="SecurityEnabled" /> property.</summary>
        private bool? _securityEnabled;

        /// <summary>
        /// Specifies whether the group is a security group. Returned by default. Supports $filter (eq, ne, NOT, in).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public bool? SecurityEnabled { get => this._securityEnabled; set => this._securityEnabled = value; }

        /// <summary>Backing field for <see cref="SecurityIdentifier" /> property.</summary>
        private string _securityIdentifier;

        /// <summary>
        /// Security identifier of the group, used in Windows scenarios. Returned by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public string SecurityIdentifier { get => this._securityIdentifier; set => this._securityIdentifier = value; }

        /// <summary>Backing field for <see cref="Theme" /> property.</summary>
        private string _theme;

        /// <summary>
        /// Specifies a Microsoft 365 group's color theme. Possible values are Teal, Purple, Green, Blue, Pink, Orange or Red. Returned
        /// by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public string Theme { get => this._theme; set => this._theme = value; }

        /// <summary>Backing field for <see cref="Visibility" /> property.</summary>
        private string _visibility;

        /// <summary>
        /// Specifies the group join policy and group content visibility for groups. Possible values are: Private, Public, or Hiddenmembership.
        /// Hiddenmembership can be set only for Microsoft 365 groups, when the groups are created. It can't be updated later. Other
        /// values of visibility can be updated after group creation. If visibility value is not specified during group creation on
        /// Microsoft Graph, a security group is created as Private by default and Microsoft 365 group is Public. See group visibility
        /// options to learn more. Returned by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.DoNotFormat]
        public string Visibility { get => this._visibility; set => this._visibility = value; }

        /// <summary>Creates an new <see cref="MicrosoftGraphGroup" /> instance.</summary>
        public MicrosoftGraphGroup()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__microsoftGraphDirectoryObject), __microsoftGraphDirectoryObject);
            await eventListener.AssertObjectIsValid(nameof(__microsoftGraphDirectoryObject), __microsoftGraphDirectoryObject);
        }
    }
    /// Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity
    /// types.
    public partial interface IMicrosoftGraphGroup :
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IAssociativeArray<global::System.Object>
    {
        /// <summary>
        /// Represents the app roles a group has been granted for an application. Supports $expand.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Represents the app roles a group has been granted for an application. Supports $expand.",
        SerializedName = @"appRoleAssignments",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphAppRoleAssignmentAutoGenerated) })]
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphAppRoleAssignmentAutoGenerated[] AppRoleAssignment { get; set; }
        /// <summary>
        /// Describes a classification for the group (such as low, medium or high business impact). Valid values for this property
        /// are defined by creating a ClassificationList setting value, based on the template definition.Returned by default. Supports
        /// $filter (eq, ne, NOT, ge, le, startsWith).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Describes a classification for the group (such as low, medium or high business impact). Valid values for this property are defined by creating a ClassificationList setting value, based on the template definition.Returned by default. Supports $filter (eq, ne, NOT, ge, le, startsWith).",
        SerializedName = @"classification",
        PossibleTypes = new [] { typeof(string) })]
        string Classification { get; set; }
        /// <summary>
        /// Timestamp of when the group was created. The value cannot be modified and is automatically populated when the group is
        /// created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For
        /// example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, NOT, ge,
        /// le, in). Read-only.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Timestamp of when the group was created. The value cannot be modified and is automatically populated when the group is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, NOT, ge, le, in). Read-only.",
        SerializedName = @"createdDateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreatedDateTime { get;  }
        /// <summary>
        /// Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity
        /// types.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.",
        SerializedName = @"createdOnBehalfOf",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject) })]
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject CreatedOnBehalfOf { get; set; }
        /// <summary>
        /// An optional description for the group. Returned by default. Supports $filter (eq, ne, NOT, ge, le, startsWith) and $search.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An optional description for the group. Returned by default. Supports $filter (eq, ne, NOT, ge, le, startsWith) and $search.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>
        /// Timestamp of when the group is set to expire. The value cannot be modified and is automatically populated when the group
        /// is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For
        /// example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, NOT, ge,
        /// le, in). Read-only.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Timestamp of when the group is set to expire. The value cannot be modified and is automatically populated when the group is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, NOT, ge, le, in). Read-only.",
        SerializedName = @"expirationDateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExpirationDateTime { get;  }
        /// <summary>The collection of lifecycle policies for this group. Read-only. Nullable.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The collection of lifecycle policies for this group. Read-only. Nullable.",
        SerializedName = @"groupLifecyclePolicies",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroupLifecyclePolicy) })]
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroupLifecyclePolicy[] GroupLifecyclePolicy { get;  }
        /// <summary>
        /// Specifies the group type and its membership. If the collection contains Unified, the group is a Microsoft 365 group; otherwise,
        /// it's either a security group or distribution group. For details, see groups overview.If the collection includes DynamicMembership,
        /// the group has dynamic membership; otherwise, membership is static. Returned by default. Supports $filter (eq, NOT).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the group type and its membership.  If the collection contains Unified, the group is a Microsoft 365 group; otherwise, it's either a security group or distribution group. For details, see groups overview.If the collection includes DynamicMembership, the group has dynamic membership; otherwise, membership is static.  Returned by default. Supports $filter (eq, NOT).",
        SerializedName = @"groupTypes",
        PossibleTypes = new [] { typeof(string) })]
        string[] GroupType { get; set; }
        /// <summary>
        /// Indicates whether there are members in this group that have license errors from its group-based license assignment. This
        /// property is never returned on a GET operation. You can use it as a $filter argument to get groups that have members with
        /// license errors (that is, filter for this property being true). Supports $filter (eq).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether there are members in this group that have license errors from its group-based license assignment. This property is never returned on a GET operation. You can use it as a $filter argument to get groups that have members with license errors (that is, filter for this property being true).  Supports $filter (eq).",
        SerializedName = @"hasMembersWithLicenseErrors",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HasMembersWithLicenseError { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"isArchived",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsArchived { get; set; }
        /// <summary>
        /// Indicates whether this group can be assigned to an Azure Active Directory role.This property can only be set while creating
        /// the group and is immutable. If set to true, the securityEnabled property must also be set to true and the group cannot
        /// be a dynamic group (that is, groupTypes cannot contain DynamicMembership). Only callers in Global administrator and Privileged
        /// role administrator roles can set this property. The caller must also be assigned the Directory.AccessAsUser.All permission
        /// to set this property. For more, see Using a group to manage Azure AD role assignmentsReturned by default. Supports $filter
        /// (eq, ne, NOT).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether this group can be assigned to an Azure Active Directory role.This property can only be set while creating the group and is immutable. If set to true, the securityEnabled property must also be set to true and the group cannot be a dynamic group (that is, groupTypes cannot contain DynamicMembership). Only callers in Global administrator and Privileged role administrator roles can set this property. The caller must also be assigned the Directory.AccessAsUser.All permission to set this property. For more, see Using a group to manage Azure AD role assignmentsReturned by default. Supports $filter (eq, ne, NOT).",
        SerializedName = @"isAssignableToRole",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsAssignableToRole { get; set; }
        /// <summary>
        /// The SMTP address for the group, for example, 'serviceadmins@contoso.onmicrosoft.com'. Returned by default. Read-only.
        /// Supports $filter (eq, ne, NOT, ge, le, in, startsWith).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The SMTP address for the group, for example, 'serviceadmins@contoso.onmicrosoft.com'. Returned by default. Read-only. Supports $filter (eq, ne, NOT, ge, le, in, startsWith).",
        SerializedName = @"mail",
        PossibleTypes = new [] { typeof(string) })]
        string Mail { get;  }
        /// <summary>
        /// Specifies whether the group is mail-enabled. Returned by default. Supports $filter (eq, ne, NOT).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether the group is mail-enabled. Returned by default. Supports $filter (eq, ne, NOT).",
        SerializedName = @"mailEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? MailEnabled { get; set; }
        /// <summary>
        /// The mail alias for the group, unique in the organization. This property must be specified when a group is created. These
        /// characters cannot be used in the mailNickName: @()/[]';:.<>,SPACE. Returned by default. Supports $filter (eq, ne, NOT,
        /// ge, le, in, startsWith).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The mail alias for the group, unique in the organization. This property must be specified when a group is created. These characters cannot be used in the mailNickName: @()/[]';:.<>,SPACE. Returned by default. Supports $filter (eq, ne, NOT, ge, le, in, startsWith).",
        SerializedName = @"mailNickname",
        PossibleTypes = new [] { typeof(string) })]
        string MailNickname { get; set; }
        /// <summary>
        /// Users, contacts, and groups that are members of this group. HTTP Methods: GET (supported for all groups), POST (supported
        /// for security groups and mail-enabled security groups), DELETE (supported only for security groups) Read-only. Nullable.
        /// Supports $expand.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Users, contacts, and groups that are members of this group. HTTP Methods: GET (supported for all groups), POST (supported for security groups and mail-enabled security groups), DELETE (supported only for security groups) Read-only. Nullable. Supports $expand.",
        SerializedName = @"members",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject) })]
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] Member { get;  }
        /// <summary>
        /// Groups and administrative units that this group is a member of. HTTP Methods: GET (supported for all groups). Read-only.
        /// Nullable. Supports $expand.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Groups and administrative units that this group is a member of. HTTP Methods: GET (supported for all groups). Read-only. Nullable. Supports $expand.",
        SerializedName = @"memberOf",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject) })]
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] MemberOf { get;  }
        /// <summary>
        /// A list of group members with license errors from this group-based license assignment. Read-only.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"A list of group members with license errors from this group-based license assignment. Read-only.",
        SerializedName = @"membersWithLicenseErrors",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject) })]
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] MembersWithLicenseError { get;  }
        /// <summary>
        /// The rule that determines members for this group if the group is a dynamic group (groupTypes contains DynamicMembership).
        /// For more information about the syntax of the membership rule, see Membership Rules syntax. Returned by default. Supports
        /// $filter (eq, ne, NOT, ge, le, startsWith).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The rule that determines members for this group if the group is a dynamic group (groupTypes contains DynamicMembership). For more information about the syntax of the membership rule, see Membership Rules syntax. Returned by default. Supports $filter (eq, ne, NOT, ge, le, startsWith).",
        SerializedName = @"membershipRule",
        PossibleTypes = new [] { typeof(string) })]
        string MembershipRule { get; set; }
        /// <summary>
        /// Indicates whether the dynamic membership processing is on or paused. Possible values are On or Paused. Returned by default.
        /// Supports $filter (eq, ne, NOT, in).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether the dynamic membership processing is on or paused. Possible values are On or Paused. Returned by default. Supports $filter (eq, ne, NOT, in).",
        SerializedName = @"membershipRuleProcessingState",
        PossibleTypes = new [] { typeof(string) })]
        string MembershipRuleProcessingState { get; set; }
        /// <summary>
        /// The owners of the group. The owners are a set of non-admin users who are allowed to modify this object. HTTP Methods:
        /// GET (supported for all groups), POST (supported for security groups and mail-enabled security groups), DELETE (supported
        /// only for security groups) Read-only. Nullable. Supports $expand.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The owners of the group. The owners are a set of non-admin users who are allowed to modify this object. HTTP Methods: GET (supported for all groups), POST (supported for security groups and mail-enabled security groups), DELETE (supported only for security groups) Read-only. Nullable. Supports $expand.",
        SerializedName = @"owners",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject) })]
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] Owner { get;  }
        /// <summary>
        /// The permissions that have been granted for a group to a specific application. Supports $expand.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The permissions that have been granted for a group to a specific application. Supports $expand.",
        SerializedName = @"permissionGrants",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphResourceSpecificPermissionGrant) })]
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphResourceSpecificPermissionGrant[] PermissionGrant { get; set; }
        /// <summary>
        /// The preferred data location for the group. For more information, see OneDrive Online Multi-Geo. Returned by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The preferred data location for the group. For more information, see  OneDrive Online Multi-Geo. Returned by default.",
        SerializedName = @"preferredDataLocation",
        PossibleTypes = new [] { typeof(string) })]
        string PreferredDataLocation { get; set; }
        /// <summary>
        /// The preferred language for a Microsoft 365 group. Should follow ISO 639-1 Code; for example 'en-US'. Returned by default.
        /// Supports $filter (eq, ne, NOT, ge, le, in, startsWith).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The preferred language for a Microsoft 365 group. Should follow ISO 639-1 Code; for example 'en-US'. Returned by default. Supports $filter (eq, ne, NOT, ge, le, in, startsWith).",
        SerializedName = @"preferredLanguage",
        PossibleTypes = new [] { typeof(string) })]
        string PreferredLanguage { get; set; }
        /// <summary>
        /// Email addresses for the group that direct to the same group mailbox. For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com'].
        /// The any operator is required for filter expressions on multi-valued properties. Returned by default. Read-only. Not nullable.
        /// Supports $filter (eq, NOT, ge, le, startsWith).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Email addresses for the group that direct to the same group mailbox. For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']. The any operator is required for filter expressions on multi-valued properties. Returned by default. Read-only. Not nullable. Supports $filter (eq, NOT, ge, le, startsWith).",
        SerializedName = @"proxyAddresses",
        PossibleTypes = new [] { typeof(string) })]
        string[] ProxyAddress { get;  }
        /// <summary>
        /// Timestamp of when the group was last renewed. This cannot be modified directly and is only updated via the renew service
        /// action. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example,
        /// midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, NOT, ge, le, in).
        /// Read-only.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Timestamp of when the group was last renewed. This cannot be modified directly and is only updated via the renew service action. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, NOT, ge, le, in). Read-only.",
        SerializedName = @"renewedDateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? RenewedDateTime { get;  }
        /// <summary>
        /// Specifies whether the group is a security group. Returned by default. Supports $filter (eq, ne, NOT, in).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether the group is a security group. Returned by default. Supports $filter (eq, ne, NOT, in).",
        SerializedName = @"securityEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SecurityEnabled { get; set; }
        /// <summary>
        /// Security identifier of the group, used in Windows scenarios. Returned by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Security identifier of the group, used in Windows scenarios. Returned by default.",
        SerializedName = @"securityIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string SecurityIdentifier { get; set; }
        /// <summary>
        /// Specifies a Microsoft 365 group's color theme. Possible values are Teal, Purple, Green, Blue, Pink, Orange or Red. Returned
        /// by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies a Microsoft 365 group's color theme. Possible values are Teal, Purple, Green, Blue, Pink, Orange or Red. Returned by default.",
        SerializedName = @"theme",
        PossibleTypes = new [] { typeof(string) })]
        string Theme { get; set; }
        /// <summary>
        /// Specifies the group join policy and group content visibility for groups. Possible values are: Private, Public, or Hiddenmembership.
        /// Hiddenmembership can be set only for Microsoft 365 groups, when the groups are created. It can't be updated later. Other
        /// values of visibility can be updated after group creation. If visibility value is not specified during group creation on
        /// Microsoft Graph, a security group is created as Private by default and Microsoft 365 group is Public. See group visibility
        /// options to learn more. Returned by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the group join policy and group content visibility for groups. Possible values are: Private, Public, or Hiddenmembership. Hiddenmembership can be set only for Microsoft 365 groups, when the groups are created. It can't be updated later. Other values of visibility can be updated after group creation. If visibility value is not specified during group creation on Microsoft Graph, a security group is created as Private by default and Microsoft 365 group is Public. See group visibility options to learn more. Returned by default.",
        SerializedName = @"visibility",
        PossibleTypes = new [] { typeof(string) })]
        string Visibility { get; set; }

    }
    /// Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity
    /// types.
    internal partial interface IMicrosoftGraphGroupInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObjectInternal
    {
        /// <summary>
        /// Represents the app roles a group has been granted for an application. Supports $expand.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphAppRoleAssignmentAutoGenerated[] AppRoleAssignment { get; set; }
        /// <summary>
        /// Describes a classification for the group (such as low, medium or high business impact). Valid values for this property
        /// are defined by creating a ClassificationList setting value, based on the template definition.Returned by default. Supports
        /// $filter (eq, ne, NOT, ge, le, startsWith).
        /// </summary>
        string Classification { get; set; }
        /// <summary>
        /// Timestamp of when the group was created. The value cannot be modified and is automatically populated when the group is
        /// created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For
        /// example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, NOT, ge,
        /// le, in). Read-only.
        /// </summary>
        global::System.DateTime? CreatedDateTime { get; set; }
        /// <summary>
        /// Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity
        /// types.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject CreatedOnBehalfOf { get; set; }
        /// <summary>
        /// An optional description for the group. Returned by default. Supports $filter (eq, ne, NOT, ge, le, startsWith) and $search.
        /// </summary>
        string Description { get; set; }
        /// <summary>
        /// Timestamp of when the group is set to expire. The value cannot be modified and is automatically populated when the group
        /// is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For
        /// example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, NOT, ge,
        /// le, in). Read-only.
        /// </summary>
        global::System.DateTime? ExpirationDateTime { get; set; }
        /// <summary>The collection of lifecycle policies for this group. Read-only. Nullable.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroupLifecyclePolicy[] GroupLifecyclePolicy { get; set; }
        /// <summary>
        /// Specifies the group type and its membership. If the collection contains Unified, the group is a Microsoft 365 group; otherwise,
        /// it's either a security group or distribution group. For details, see groups overview.If the collection includes DynamicMembership,
        /// the group has dynamic membership; otherwise, membership is static. Returned by default. Supports $filter (eq, NOT).
        /// </summary>
        string[] GroupType { get; set; }
        /// <summary>
        /// Indicates whether there are members in this group that have license errors from its group-based license assignment. This
        /// property is never returned on a GET operation. You can use it as a $filter argument to get groups that have members with
        /// license errors (that is, filter for this property being true). Supports $filter (eq).
        /// </summary>
        bool? HasMembersWithLicenseError { get; set; }

        bool? IsArchived { get; set; }
        /// <summary>
        /// Indicates whether this group can be assigned to an Azure Active Directory role.This property can only be set while creating
        /// the group and is immutable. If set to true, the securityEnabled property must also be set to true and the group cannot
        /// be a dynamic group (that is, groupTypes cannot contain DynamicMembership). Only callers in Global administrator and Privileged
        /// role administrator roles can set this property. The caller must also be assigned the Directory.AccessAsUser.All permission
        /// to set this property. For more, see Using a group to manage Azure AD role assignmentsReturned by default. Supports $filter
        /// (eq, ne, NOT).
        /// </summary>
        bool? IsAssignableToRole { get; set; }
        /// <summary>
        /// The SMTP address for the group, for example, 'serviceadmins@contoso.onmicrosoft.com'. Returned by default. Read-only.
        /// Supports $filter (eq, ne, NOT, ge, le, in, startsWith).
        /// </summary>
        string Mail { get; set; }
        /// <summary>
        /// Specifies whether the group is mail-enabled. Returned by default. Supports $filter (eq, ne, NOT).
        /// </summary>
        bool? MailEnabled { get; set; }
        /// <summary>
        /// The mail alias for the group, unique in the organization. This property must be specified when a group is created. These
        /// characters cannot be used in the mailNickName: @()/[]';:.<>,SPACE. Returned by default. Supports $filter (eq, ne, NOT,
        /// ge, le, in, startsWith).
        /// </summary>
        string MailNickname { get; set; }
        /// <summary>
        /// Users, contacts, and groups that are members of this group. HTTP Methods: GET (supported for all groups), POST (supported
        /// for security groups and mail-enabled security groups), DELETE (supported only for security groups) Read-only. Nullable.
        /// Supports $expand.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] Member { get; set; }
        /// <summary>
        /// Groups and administrative units that this group is a member of. HTTP Methods: GET (supported for all groups). Read-only.
        /// Nullable. Supports $expand.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] MemberOf { get; set; }
        /// <summary>
        /// A list of group members with license errors from this group-based license assignment. Read-only.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] MembersWithLicenseError { get; set; }
        /// <summary>
        /// The rule that determines members for this group if the group is a dynamic group (groupTypes contains DynamicMembership).
        /// For more information about the syntax of the membership rule, see Membership Rules syntax. Returned by default. Supports
        /// $filter (eq, ne, NOT, ge, le, startsWith).
        /// </summary>
        string MembershipRule { get; set; }
        /// <summary>
        /// Indicates whether the dynamic membership processing is on or paused. Possible values are On or Paused. Returned by default.
        /// Supports $filter (eq, ne, NOT, in).
        /// </summary>
        string MembershipRuleProcessingState { get; set; }
        /// <summary>
        /// The owners of the group. The owners are a set of non-admin users who are allowed to modify this object. HTTP Methods:
        /// GET (supported for all groups), POST (supported for security groups and mail-enabled security groups), DELETE (supported
        /// only for security groups) Read-only. Nullable. Supports $expand.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject[] Owner { get; set; }
        /// <summary>
        /// The permissions that have been granted for a group to a specific application. Supports $expand.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphResourceSpecificPermissionGrant[] PermissionGrant { get; set; }
        /// <summary>
        /// The preferred data location for the group. For more information, see OneDrive Online Multi-Geo. Returned by default.
        /// </summary>
        string PreferredDataLocation { get; set; }
        /// <summary>
        /// The preferred language for a Microsoft 365 group. Should follow ISO 639-1 Code; for example 'en-US'. Returned by default.
        /// Supports $filter (eq, ne, NOT, ge, le, in, startsWith).
        /// </summary>
        string PreferredLanguage { get; set; }
        /// <summary>
        /// Email addresses for the group that direct to the same group mailbox. For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com'].
        /// The any operator is required for filter expressions on multi-valued properties. Returned by default. Read-only. Not nullable.
        /// Supports $filter (eq, NOT, ge, le, startsWith).
        /// </summary>
        string[] ProxyAddress { get; set; }
        /// <summary>
        /// Timestamp of when the group was last renewed. This cannot be modified directly and is only updated via the renew service
        /// action. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example,
        /// midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, NOT, ge, le, in).
        /// Read-only.
        /// </summary>
        global::System.DateTime? RenewedDateTime { get; set; }
        /// <summary>
        /// Specifies whether the group is a security group. Returned by default. Supports $filter (eq, ne, NOT, in).
        /// </summary>
        bool? SecurityEnabled { get; set; }
        /// <summary>
        /// Security identifier of the group, used in Windows scenarios. Returned by default.
        /// </summary>
        string SecurityIdentifier { get; set; }
        /// <summary>
        /// Specifies a Microsoft 365 group's color theme. Possible values are Teal, Purple, Green, Blue, Pink, Orange or Red. Returned
        /// by default.
        /// </summary>
        string Theme { get; set; }
        /// <summary>
        /// Specifies the group join policy and group content visibility for groups. Possible values are: Private, Public, or Hiddenmembership.
        /// Hiddenmembership can be set only for Microsoft 365 groups, when the groups are created. It can't be updated later. Other
        /// values of visibility can be updated after group creation. If visibility value is not specified during group creation on
        /// Microsoft Graph, a security group is created as Private by default and Microsoft 365 group is Public. See group visibility
        /// options to learn more. Returned by default.
        /// </summary>
        string Visibility { get; set; }

    }
}