// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Extensions;

    /// <summary>groupLifecyclePolicy</summary>
    public partial class MicrosoftGraphGroupLifecyclePolicy :
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroupLifecyclePolicy,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroupLifecyclePolicyInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntity"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntity __microsoftGraphEntity = new Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.MicrosoftGraphEntity();

        /// <summary>Backing field for <see cref="AlternateNotificationEmail" /> property.</summary>
        private string _alternateNotificationEmail;

        /// <summary>
        /// List of email address to send notifications for groups without owners. Multiple email address can be defined by separating
        /// email address with a semicolon.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public string AlternateNotificationEmail { get => this._alternateNotificationEmail; set => this._alternateNotificationEmail = value; }

        /// <summary>Backing field for <see cref="GroupLifetimeInDay" /> property.</summary>
        private int? _groupLifetimeInDay;

        /// <summary>
        /// Number of days before a group expires and needs to be renewed. Once renewed, the group expiration is extended by the number
        /// of days defined.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public int? GroupLifetimeInDay { get => this._groupLifetimeInDay; set => this._groupLifetimeInDay = value; }

        /// <summary>Read-only.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntityInternal)__microsoftGraphEntity).Id; }

        /// <summary>Backing field for <see cref="ManagedGroupType" /> property.</summary>
        private string _managedGroupType;

        /// <summary>
        /// The group type for which the expiration policy applies. Possible values are All, Selected or None.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public string ManagedGroupType { get => this._managedGroupType; set => this._managedGroupType = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntityInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntityInternal)__microsoftGraphEntity).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntityInternal)__microsoftGraphEntity).Id = value; }

        /// <summary>Creates an new <see cref="MicrosoftGraphGroupLifecyclePolicy" /> instance.</summary>
        public MicrosoftGraphGroupLifecyclePolicy()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A < see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__microsoftGraphEntity), __microsoftGraphEntity);
            await eventListener.AssertObjectIsValid(nameof(__microsoftGraphEntity), __microsoftGraphEntity);
        }
    }
    /// groupLifecyclePolicy
    public partial interface IMicrosoftGraphGroupLifecyclePolicy :
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntity,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IAssociativeArray<global::System.Object>
    {
        /// <summary>
        /// List of email address to send notifications for groups without owners. Multiple email address can be defined by separating
        /// email address with a semicolon.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of email address to send notifications for groups without owners. Multiple email address can be defined by separating email address with a semicolon.",
        SerializedName = @"alternateNotificationEmails",
        PossibleTypes = new [] { typeof(string) })]
        string AlternateNotificationEmail { get; set; }
        /// <summary>
        /// Number of days before a group expires and needs to be renewed. Once renewed, the group expiration is extended by the number
        /// of days defined.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of days before a group expires and needs to be renewed. Once renewed, the group expiration is extended by the number of days defined.",
        SerializedName = @"groupLifetimeInDays",
        PossibleTypes = new [] { typeof(int) })]
        int? GroupLifetimeInDay { get; set; }
        /// <summary>
        /// The group type for which the expiration policy applies. Possible values are All, Selected or None.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The group type for which the expiration policy applies. Possible values are All, Selected or None.",
        SerializedName = @"managedGroupTypes",
        PossibleTypes = new [] { typeof(string) })]
        string ManagedGroupType { get; set; }

    }
    /// groupLifecyclePolicy
    internal partial interface IMicrosoftGraphGroupLifecyclePolicyInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphEntityInternal
    {
        /// <summary>
        /// List of email address to send notifications for groups without owners. Multiple email address can be defined by separating
        /// email address with a semicolon.
        /// </summary>
        string AlternateNotificationEmail { get; set; }
        /// <summary>
        /// Number of days before a group expires and needs to be renewed. Once renewed, the group expiration is extended by the number
        /// of days defined.
        /// </summary>
        int? GroupLifetimeInDay { get; set; }
        /// <summary>
        /// The group type for which the expiration policy applies. Possible values are All, Selected or None.
        /// </summary>
        string ManagedGroupType { get; set; }

    }
}