// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Extensions;

    /// <summary>imageInfo</summary>
    public partial class MicrosoftGraphImageInfo :
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphImageInfo,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphImageInfoInternal
    {

        /// <summary>Backing field for <see cref="AddImageQuery" /> property.</summary>
        private bool? _addImageQuery;

        /// <summary>
        /// Optional; parameter used to indicate the server is able to render image dynamically in response to parameterization. For
        /// example – a high contrast image
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public bool? AddImageQuery { get => this._addImageQuery; set => this._addImageQuery = value; }

        /// <summary>Backing field for <see cref="AlternateText" /> property.</summary>
        private string _alternateText;

        /// <summary>Optional; alt-text accessible content for the image</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public string AlternateText { get => this._alternateText; set => this._alternateText = value; }

        /// <summary>Backing field for <see cref="AlternativeText" /> property.</summary>
        private string _alternativeText;

        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public string AlternativeText { get => this._alternativeText; set => this._alternativeText = value; }

        /// <summary>Backing field for <see cref="IconUrl" /> property.</summary>
        private string _iconUrl;

        /// <summary>
        /// Optional; URI that points to an icon which represents the application used to generate the activity
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Origin(Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.PropertyOrigin.Owned)]
        public string IconUrl { get => this._iconUrl; set => this._iconUrl = value; }

        /// <summary>Creates an new <see cref="MicrosoftGraphImageInfo" /> instance.</summary>
        public MicrosoftGraphImageInfo()
        {

        }
    }
    /// imageInfo
    public partial interface IMicrosoftGraphImageInfo :
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.IAssociativeArray<global::System.Object>
    {
        /// <summary>
        /// Optional; parameter used to indicate the server is able to render image dynamically in response to parameterization. For
        /// example – a high contrast image
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional; parameter used to indicate the server is able to render image dynamically in response to parameterization. For example – a high contrast image",
        SerializedName = @"addImageQuery",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AddImageQuery { get; set; }
        /// <summary>Optional; alt-text accessible content for the image</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional; alt-text accessible content for the image",
        SerializedName = @"alternateText",
        PossibleTypes = new [] { typeof(string) })]
        string AlternateText { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"alternativeText",
        PossibleTypes = new [] { typeof(string) })]
        string AlternativeText { get; set; }
        /// <summary>
        /// Optional; URI that points to an icon which represents the application used to generate the activity
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional; URI that points to an icon which represents the application used to generate the activity",
        SerializedName = @"iconUrl",
        PossibleTypes = new [] { typeof(string) })]
        string IconUrl { get; set; }

    }
    /// imageInfo
    internal partial interface IMicrosoftGraphImageInfoInternal

    {
        /// <summary>
        /// Optional; parameter used to indicate the server is able to render image dynamically in response to parameterization. For
        /// example – a high contrast image
        /// </summary>
        bool? AddImageQuery { get; set; }
        /// <summary>Optional; alt-text accessible content for the image</summary>
        string AlternateText { get; set; }

        string AlternativeText { get; set; }
        /// <summary>
        /// Optional; URI that points to an icon which represents the application used to generate the activity
        /// </summary>
        string IconUrl { get; set; }

    }
}