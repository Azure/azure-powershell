# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Lists members from group.
.Description
Lists members from group.
.Example
PS C:\> {{ Add code here }}

{{ Add output here }}
.Example
PS C:\> {{ Add code here }}

{{ Add output here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroup
.Outputs
System.Boolean
.Link
https://docs.microsoft.com/powershell/module/az.resources/get-azadgroupmember
#>

function Get-AzADGroupMember {
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphDirectoryObject])]
    [CmdletBinding(DefaultParameterSetName='ObjectIdParameterSet', PositionalBinding=$false)]
    param(
        [Parameter(ParameterSetName="ObjectIdParameterSet", Mandatory, HelpMessage = "The object Id of target group.")]
        [System.String]
        [Alias("Id", "ObjectId")]
        # key: id of group
        ${GroupObjectId},

        [Parameter(ParameterSetName="DisplayNameParameterSet", Mandatory, HelpMessage = "The display name of target group.")]
        [System.String]
        # The display name of the group.
        ${GroupDisplayName},

        [Parameter(ParameterSetName="GroupObjectParameterSet", Mandatory, ValueFromPipeline, HelpMessage = "The target group object, could be used as pipeline input.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Models.ApiV10.IMicrosoftGraphGroup]
        # The group object that you are listing members from.
        ${GroupObject},
    
        [Parameter()]
        [AllowEmptyCollection()]
        [System.String[]]
        # Expand related entities
        ${Expand},
    
        [Parameter()]
        [System.String]
        # Filter items by property values
        ${Filter},
    
        [Parameter()]
        [AllowEmptyCollection()]
        [System.String[]]
        # Order items by property values
        ${Orderby},
    
        [Parameter()]
        [System.String]
        # Search items by search phrases
        ${Search},
    
        [Parameter()]
        [AllowEmptyCollection()]
        [System.String[]]
        # Select properties to be returned
        ${Select},
    
        [Parameter()]
        [System.UInt64]
        # Gets only the first 'n' objects.
        ${First},
    
        [Parameter()]
        [System.UInt64]
        # Ignores the first 'n' objects and then gets the remaining objects.
        ${Skip},
    
        [Parameter()]
        [Alias("AzContext", "AzureRmContext", "AzureCredential")]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Category('Azure')]
        [System.Management.Automation.PSObject]
        # The credentials, account, tenant, and subscription used for communication with Azure.
        ${DefaultProfile},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Wait for .NET debugger to attach
        ${Break},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be appended to the front of the pipeline
        ${HttpPipelineAppend},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be prepended to the front of the pipeline
        ${HttpPipelinePrepend},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Category('Runtime')]
        [System.Uri]
        # The URI for the proxy server to use
        ${Proxy},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Category('Runtime')]
        [System.Management.Automation.PSCredential]
        # Credentials for a proxy server to use for the remote call
        ${ProxyCredential},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.Resources.MSGraph.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Use the default credentials for the proxy
        ${ProxyUseDefaultCredentials}
    )
    
    process {
        if ($PSBoundParameters['GroupObjectId']) {
            $PSBoundParameters['GroupId'] = $PSBoundParameters['GroupObjectId']
            $null = $PSBoundParameters.Remove('GroupObjectId')
        } elseif ($PSBoundParameters['GroupObject']) {
            $PSBoundParameters['GroupId'] = $PSBoundParameters['GroupObject'].Id
            $null = $PSBoundParameters.Remove('GroupObject')
        } else {
            $param = @{'DisplayName' = $PSBoundParameters['GroupDisplayName']}
            if ($PSBoundParameters['Debug']) {
                $param['Debug'] = $PSBoundParameters['Debug']
            }
            $PSBoundParameters['GroupId'] = (Get-AzADGroup @param).Id
            $null = $PSBoundParameters.Remove('GroupDisplayName')
        }

        $PSBOundParameters['ConsistencyLevel'] = 'eventual'

        Az.MSGraph.internal\Get-AzADGroupMember @PSBoundParameters
    }
    
}
    