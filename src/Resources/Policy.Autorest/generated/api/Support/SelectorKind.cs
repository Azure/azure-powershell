// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/powershell@3.0.498)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Sample.API.Support
{

    /// <summary>The selector kind.</summary>
    public partial struct SelectorKind :
        System.IEquatable<SelectorKind>
    {
        /// <summary>The selector kind to filter policies by the policy definition reference ID.</summary>
        public static Sample.API.Support.SelectorKind PolicyDefinitionReferenceId = @"policyDefinitionReferenceId";

        /// <summary>The selector kind to filter policies by the resource location.</summary>
        public static Sample.API.Support.SelectorKind ResourceLocation = @"resourceLocation";

        /// <summary>The selector kind to filter policies by the resource type.</summary>
        public static Sample.API.Support.SelectorKind ResourceType = @"resourceType";

        /// <summary>The selector kind to filter policies by the resource without location.</summary>
        public static Sample.API.Support.SelectorKind ResourceWithoutLocation = @"resourceWithoutLocation";

        /// <summary>the value for an instance of the <see cref="SelectorKind" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to SelectorKind</summary>
        /// <param name="value">the value to convert to an instance of <see cref="SelectorKind" />.</param>
        internal static object CreateFrom(object value)
        {
            return new SelectorKind(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type SelectorKind</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Sample.API.Support.SelectorKind e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type SelectorKind (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is SelectorKind && Equals((SelectorKind)obj);
        }

        /// <summary>Returns hashCode for enum SelectorKind</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Creates an instance of the <see cref="SelectorKind"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private SelectorKind(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Returns string representation for SelectorKind</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to SelectorKind</summary>
        /// <param name="value">the value to convert to an instance of <see cref="SelectorKind" />.</param>

        public static implicit operator SelectorKind(string value)
        {
            return new SelectorKind(value);
        }

        /// <summary>Implicit operator to convert SelectorKind to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="SelectorKind" />.</param>

        public static implicit operator string(Sample.API.Support.SelectorKind e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum SelectorKind</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Sample.API.Support.SelectorKind e1, Sample.API.Support.SelectorKind e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum SelectorKind</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Sample.API.Support.SelectorKind e1, Sample.API.Support.SelectorKind e2)
        {
            return e2.Equals(e1);
        }
    }
}