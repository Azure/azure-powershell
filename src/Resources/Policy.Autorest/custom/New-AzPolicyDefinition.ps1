
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
This operation creates or updates a policy definition in the given subscription or management group with the given name.
.Description
This operation creates or updates a policy definition in the given subscription or management group with the given name.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Policy.Models.IPolicyIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Policy.Models.Api20210601.IPolicyDefinition
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IPolicyIdentity>: Identity Parameter
  [Id <String>]: Resource identity path
  [ManagementGroupId <String>]: The ID of the management group.
  [ParentResourcePath <String>]: The parent resource path. Use empty string if there is none.
  [PolicyAssignmentId <String>]: The ID of the policy assignment to delete. Use the format '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
  [PolicyAssignmentName <String>]: The name of the policy assignment to delete.
  [PolicyDefinitionName <String>]: The name of the policy definition to create.
  [PolicyExemptionName <String>]: The name of the policy exemption to delete.
  [PolicySetDefinitionName <String>]: The name of the policy set definition to create.
  [ResourceGroupName <String>]: The name of the resource group that contains policy assignments.
  [ResourceName <String>]: The name of the resource.
  [ResourceProviderNamespace <String>]: The namespace of the resource provider. For example, the namespace of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
  [ResourceType <String>]: The resource type name. For example the type name of a web app is 'sites' (from Microsoft.Web/sites).
  [Scope <String>]: The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
  [SubscriptionId <String>]: The ID of the target subscription.
.Link
https://learn.microsoft.com/powershell/module/az.resources/new-azpolicydefinition
#>
function New-AzPolicyDefinition {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Policy.Models.Api20210601.IPolicyDefinition])]
[CmdletBinding(DefaultParameterSetName='SubscriptionId', PositionalBinding=$false, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory, ValueFromPipelineByPropertyName)]
    [ValidateNotNullOrEmpty()]
    [Alias('PolicyDefinitionName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Path')]
    [System.String]
    # The name of the policy definition to create.
    ${Name},

    [Parameter(ParameterSetName='SubscriptionId', ValueFromPipelineByPropertyName)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(ParameterSetName='ManagementGroupName', Mandatory, ValueFromPipelineByPropertyName)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Path')]
    [System.String]
    # The ID of the management group.
    ${ManagementGroupName},

    [Parameter(ValueFromPipelineByPropertyName)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Body')]
    [System.String]
    # The policy definition description.
    ${Description},

    [Parameter(ValueFromPipelineByPropertyName)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Body')]
    [System.String]
    # The display name of the policy definition.
    ${DisplayName},

    [Parameter(ValueFromPipelineByPropertyName)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Policy.Models.Api20210601.IPolicyDefinitionPropertiesMetadata]))]
    #[System.Collections.Hashtable]
    [System.String]
    # The policy definition metadata.
    # Metadata is an open ended object and is typically a collection of key value pairs.
    ${Metadata},

    [Parameter(ValueFromPipelineByPropertyName)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Body')]
    [System.String]
    # The policy definition mode.
    # Some examples are All, Indexed, Microsoft.KeyVault.Data.
    ${Mode},

    [Parameter(ValueFromPipelineByPropertyName)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Policy.Models.Api20210601.IParameterDefinitions]))]
    [System.String]
    # The parameter definitions for parameters used in the policy rule.
    # The keys are the parameter names.
    ${Parameter},

    [Parameter(ValueFromPipelineByPropertyName)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Body')]
    [System.String]
    # The policy rule.
    ${Policy},

    [Parameter()]
    [switch]
    # Causes cmdlet to return artifacts using legacy format placing policy-specific properties in a property bag object.
    ${BackwardCompatible} = $true,
#    ${BackwardCompatible} = $false,

    [Parameter(ParameterSetName='InputObject', Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName)]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Models.IPolicyIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $writeln = $true

        if ($writeln) {
            Write-Host -ForegroundColor Cyan "New-AzPolicyDefinition(" $PSBoundParameters ") - (Begin:ParameterSet: $($PSCmdlet.ParameterSetName))"
        }

        # load nested module containing common code
        Import-Module ((Get-Module -Name 'Az.Policy').NestedModules | Where-Object { $_.Name -eq 'Helpers' })

        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }

        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }

        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Policy.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}
process {
    try {
        if ($writeln) {
            Write-Host -ForegroundColor Cyan "New-AzPolicyDefinition(" $PSBoundParameters ") - (Process:ParameterSet: $($PSCmdlet.ParameterSetName))"
        }

<#
        # convert input/legacy policy parameter to correct set of parameters and remove
        if ($Policy) {
            $resolved = Helpers\resolvePolicyParameter $Policy
            if ($resolved.policyRule) {
                foreach ($key in $resolved.Keys) {

                    $value = $resolved.($key)

                    if ($key -eq 'parameters') {
                        $key = 'Parameter'
                    }

                    if (@('policyRule', 'metadata', 'parameter') -contains $key) {
                        $value = ConvertTo-Json $value -Depth 100
                    }

                    if (!$PSBoundParameters[$key]) {
                        $PSBoundParameters[$key] = $value
                    }
                }
            } else {
                $PSBoundParameters['PolicyRule'] = ConvertTo-Json $resolved -Depth 100
            }

            $null = $PSBoundParameters.Remove('Policy')
        }

        # Policy parameter is applied, now apply input object if there is one
        # Explicit parameter values override values from the input object (name/id is not taken from input object)
        if ($_) {
            $parsed = Helpers\parsePolicyDefinitionId $_.Id

            if (!$SubscriptionId) {
                $SubscriptionId = $parsed.SubscriptionId
            }

            if (!$ManagementGroupName) {
                $ManagementGroupName = $parsed.ManagementGroupName
            }

            if (!$Description) {
                $Description = $_.Description
            }

            if (!$DisplayName) {
                $DisplayName = $_.DisplayName
            }

            if (!$Metadata) {
                $Metadata = ConvertTo-Json -Depth 100 $_.Metadata -Depth 100
            }

            if (!$Mode) {
                $Mode = $_.Mode
            }

            if (!$Parameter) {
                $Parameter = ConvertTo-Json -Depth 100 $_.Parameter
            }

            if (!$Policy) {
                $Policy = ConvertTo-Json -Depth 100 $_.PolicyRule
            }
        }

        # convert metadata input parameter to internal metadatatable (hashtable) and remove
        if ($Metadata) {
            $PSBoundParameters['MetadataTable'] = convertJsonToHash (ConvertFrom-Json -Depth 100 $Metadata)
        } else {
            if ($PSBoundParameters['Metadata']) {
                $PSBoundParameters['MetadataTable'] = $PSBoundParameters['Metadata']
            }
        }

        $null = $PSBoundParameters.Remove('Metadata')

        # convert parameter input parameter to internal parametertable (hashtable) and remove
        if ($Parameter) {
            $PSBoundParameters['ParameterTable'] = convertJsonToHash (ConvertFrom-Json -Depth 100 $Parameter)
        } else {
            if ($PSBoundParameters['Parameter']) {
                $PSBoundParameters['ParameterTable'] = $PSBoundParameters['Parameter']
            }
        }

        $null = $PSBoundParameters.Remove('Parameter')

        # convert ManagementGropuName parameter to ManagementGropuId in generated cmdlet
        if ($_) {
            $calledParameterSet = 'CreateViaIdentityExpanded1'

        } else {
            $calledParameterSet = 'CreateExpanded'
            if ($ManagementGroupName) {
                $calledParameterSet = 'CreateExpanded1'
                $PSBoundParameters['ManagementGroupId'] = $PSBoundParameters['ManagementGroupName']
                $null = $PSBoundParameters.Remove('ManagementGroupName')
            }
        }
#>
        # parameters hash table for called cmdlet
        $calledParameters = $PSBoundParameters
        if ($InputObject) {
            $calledParameters = @{}
        }

        # convert input/legacy policy parameter to correct set of parameters and remove
        if ($Policy) {
            $resolved = Helpers\resolvePolicyParameter $Policy
            if ($resolved.policyRule) {
                foreach ($key in $resolved.Keys) {

                    $value = $resolved.($key)

                    if ($key -eq 'parameters') {
                        $key = 'Parameter'
                        $value = ConvertTo-Json -Depth 100 $value
                    }

                    $calledParameters.($key) = $value
                }
            } else {
                $calledParameters.PolicyRule = $resolved
            }

            $null = $calledParameters.Remove('Policy')
        }

        # resolve [string] 'metadata' input parameter to [hashtable]
        if ($Metadata) {
            $calledParameters.Metadata = Helpers\resolvePolicyParameter $Metadata
        }

        # rename [hashtable] 'metadata' parameter to [hashtable] 'metadatatable' parameter
        if ($calledParameters.Metadata) {
            $calledParameters.MetadataTable = $calledParameters.Metadata
            $null = $calledParameters.Remove('Metadata')
        }

        # resolve [string] 'parameter' input parameter (could be a path)
        if ($Parameter) {
            $calledParameters.Parameter = Helpers\getFileOrStringParameterValue $Parameter
        }

        # rename and [string] 'parameter' parameter to 'parametertable' (needs to be string to construct properly)
        if ($calledParameters.Parameter) {
            $calledParameters.ParameterTable = $calledParameters.Parameter
            $null = $calledParameters.Remove('Parameter')
        }

        # determine called parameterset and convert ManagementGropuName parameter to ManagementGropuId if needed
        if ($InputObject) {
            $calledParameterSet = 'CreateViaIdentityExpanded1'
            $calledParameters = @{ InputObject = $calledParameters }
        } else {
            if ($calledParameters.ManagementGroupName) {
                $calledParameterSet = 'CreateExpanded1'
                $calledParameters.ManagementGroupId = $calledParameters.ManagementGroupName
                $null = $calledParameters.Remove('ManagementGroupName')
            } else {
                $calledParameterSet = 'CreateExpanded'
            }
        }

        $mapping = @{
            CreateExpanded = 'Az.Policy.private\New-AzPolicyDefinition_CreateExpanded';
            CreateExpanded1 = 'Az.Policy.private\New-AzPolicyDefinition_CreateExpanded1';
            CreateViaIdentityExpanded1 = 'Az.Policy.private\New-AzPolicyDefinition_CreateViaIdentityExpanded1';
        }

        if ($writeln) {
#            Write-Host -ForegroundColor Blue -> $calledParameterSet - $PSBoundParameters
            Write-Host -ForegroundColor Blue -> $calledParameterSet - $calledParameters
        }

        # call internal generated cmdlet, convert generic JSON output properties to PSCustomObject
        $cmdInfo = Get-Command -Name $mapping[$calledParameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Policy.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $calledParameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$calledParameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
#        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $scriptCmd = {& $wrappedCmd @calledParameters}

        $item = Invoke-Command -ScriptBlock $scriptCmd
        if ($BackwardCompatible) {
            $propertyBag = @{
                Description = $item.Description;
                DisplayName = $item.DisplayName;
                Metadata = [PSCustomObject][hashtable]$item.Metadata.AdditionalProperties;
                Mode = $item.Mode;
                Parameter = (ConvertFrom-Json $item.Parameter.ToJsonString() -Depth 100);
                PolicyRule = [PSCustomObject][hashtable]$item.PolicyRule.AdditionalProperties;
                PolicyType = $item.PolicyType
            }

            $item | Add-Member -MemberType NoteProperty -Name 'Properties' -Value ([PSCustomObject]($propertyBag))
            $item | Add-Member -MemberType NoteProperty -Name 'ResourceId' -Value $item.Id
            $item | Add-Member -MemberType NoteProperty -Name 'PolicyDefinitionId' -Value $item.Id
        }

        $item | Add-Member -MemberType NoteProperty -Name 'Metadata' -Value ([PSCustomObject][hashtable]($item.Metadata.AdditionalProperties)) -Force
        $item | Add-Member -MemberType NoteProperty -Name 'Parameter' -Value (ConvertFrom-Json $item.Parameter.ToJsonString() -Depth 100) -Force
        $item | Add-Member -MemberType NoteProperty -Name 'PolicyRule' -Value ([PSCustomObject][hashtable]($item.PolicyRule.AdditionalProperties)) -Force
        $PSCmdlet.WriteObject($item)

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Policy.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}
}