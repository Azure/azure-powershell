
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
This cmdlet retrieves policy definitions.
.Description
This cmdlet retrieves policy definition matching the given management group, subscription, or name.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Policy.Models.IPolicyIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Policy.Models.Api20210601.IPolicyDefinition
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IPolicyIdentity>: Identity Parameter
  [Id <String>]: Resource identity path
  [ManagementGroupId <String>]: The ID of the management group.
  [ParentResourcePath <String>]: The parent resource path. Use empty string if there is none.
  [PolicyAssignmentId <String>]: The ID of the policy assignment to delete. Use the format '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
  [PolicyAssignmentName <String>]: The name of the policy assignment to delete.
  [PolicyDefinitionName <String>]: The name of the policy definition to create.
  [PolicyExemptionName <String>]: The name of the policy exemption to delete.
  [PolicySetDefinitionName <String>]: The name of the policy set definition to create.
  [ResourceGroupName <String>]: The name of the resource group that contains policy assignments.
  [ResourceName <String>]: The name of the resource.
  [ResourceProviderNamespace <String>]: The namespace of the resource provider. For example, the namespace of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
  [ResourceType <String>]: The resource type name. For example the type name of a web app is 'sites' (from Microsoft.Web/sites).
  [Scope <String>]: The scope of the policy assignment. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
  [SubscriptionId <String>]: The ID of the target subscription.
.Link
https://learn.microsoft.com/powershell/module/az.resources/get-azpolicydefinition
#>
function Get-AzPolicyDefinition {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Policy.Models.Api20210601.IPolicyDefinition])]
[CmdletBinding(DefaultParameterSetName='Name', PositionalBinding=$false)]
param(
    [Parameter(ParameterSetName='Name', ValueFromPipelineByPropertyName)]
    [Parameter(ParameterSetName='ManagementGroupName', ValueFromPipelineByPropertyName)]
    [Parameter(ParameterSetName='SubscriptionId', ValueFromPipelineByPropertyName)]
    [Alias('PolicyDefinitionName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Path')]
    [System.String]
    # The name of the policy definition to get.
    ${Name},

    [Parameter(ParameterSetName='Id', Mandatory, ValueFromPipelineByPropertyName)]
    [Alias('ResourceId')]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Path')]
    [System.String]
    # The full Id of the policy definition to get.
    ${Id},

    [Parameter(ParameterSetName='ManagementGroupName', Mandatory, ValueFromPipelineByPropertyName)]
    [Parameter(ParameterSetName='BuiltIn')]
    [Parameter(ParameterSetName='Custom')]
    [Parameter(ParameterSetName='Static')]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Path')]
    [System.String]
    # The name of the management group.
    ${ManagementGroupName},

    [Parameter(ParameterSetName='SubscriptionId', Mandatory, ValueFromPipelineByPropertyName)]
    [Parameter(ParameterSetName='BuiltIn')]
    [Parameter(ParameterSetName='Custom')]
    [Parameter(ParameterSetName='Static')]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Path')]
    #[Microsoft.Azure.PowerShell.Cmdlets.Policy.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(ParameterSetName='BuiltIn', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Query')]
    [switch]
    # Causes cmdlet to return only built-in policy definitions.
    ${BuiltIn},

    [Parameter(ParameterSetName='Custom', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Query')]
    [switch]
    # Causes cmdlet to return only custom policy definitions.
    ${Custom},

    [Parameter(ParameterSetName='Static', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Query')]
    [switch]
    # Causes cmdlet to return only static policy definitions.
    ${Static},

    [Parameter()]
    [switch]
    # Causes cmdlet to return artifacts using legacy format placing policy-specific properties in a property bag object.
    ${BackwardCompatible} = $true,
#    ${BackwardCompatible} = $false,

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Policy.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $writeln = $true

        if ($writeln) {
            Write-Host -ForegroundColor Cyan "Get-AzPolicyDefinition(" $PSBoundParameters ") - (Begin:ParameterSet: $($PSCmdlet.ParameterSetName))"
        }

        # load nested module containing common code
        Import-Module ((Get-Module -Name 'Az.Policy').NestedModules | ?{ $_.Name -eq 'Helpers' })

        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $Host.Version.ToString()
        }
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Policy.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {

        if ($writeln) {
            Write-Host -ForegroundColor Cyan "Get-AzPolicyDefinition(" $PSBoundParameters ") - (Process:ParameterSet: $($PSCmdlet.ParameterSetName))"
        }

        # helper dictionary indicating parameters present or not
        $has = @{
            Name = $PSBoundParameters.ContainsKey('Name');
            ManagementGroupName = $PSBoundParameters.ContainsKey('ManagementGroupName');
            SubscriptionId = $PSBoundParameters.ContainsKey('SubscriptionId');
            Id = $PSBoundParameters.ContainsKey('Id');
            BuiltIn = $PSBoundParameters.ContainsKey('BuiltIn');
            Custom = $PSBoundParameters.ContainsKey('Custom');
            Static = $PSBoundParameters.ContainsKey('Static');
            BackwardCompatible = $PSBoundParameters.ContainsKey('BackwardCompatible');
        }

        # handle specific parameter sets
        $calledParameterSet = 'List'

        $subscriptionId = ''
        switch ($parameterSet) {
            'BuiltIn' {
                $null = $PSBoundParameters.Remove('BuiltIn')
                $PSBoundParameters.Add('Filter', 'policyType eq ''BuiltIn''')
            }
            'Custom' {
                $null = $PSBoundParameters.Remove('Custom')
                $PSBoundParameters.Add('Filter', 'policyType eq ''Custom''')
            }
            'Static' {
                $null = $PSBoundParameters.Remove('Static')
                $PSBoundParameters.Add('Filter', 'policyType eq ''Static''')
            }
            'Id' {
                $parsed = Helpers\parsePolicyDefinitionId $Id   # function is imported from Helpers.psm1
                switch ($parsed.Type)
                {
                    'subid' {
                        $subscriptionId = @($parsed['SubscriptionId'])
                        $PSBoundParameters['Name'] = $parsed['Name']
                        $calledParameterSet = 'Get';
                    }
                    'mgname' {
                        $PSBoundParameters['ManagementGroupId'] = $parsed['ManagementGroupName']
                        $PSBoundParameters['Name'] = $parsed['Name']
                        $calledParameterSet = 'Get1';
                    }
                    'builtin' {
                        $calledParameterSet = 'GetViaIdentity'
                        $PSBoundParameters['InputObject'] = @{
                            'Id' = $PSBoundParameters['Id'];
                            'PolicyDefinitionName' = $parsed['Name'];
                            'ResourceName' = $parsed['Name'];
                            'ResourceType' = 'policyDefinitions';
                            'ResourceProviderNamespace' = 'Microsoft.Authorization';
                            'ParentResourcePath' = '';
                            'SubscriptionId' = ''
                        }
                    }
                }

                $null = $PSBoundParameters.Remove('Id')
            }
        }

        # remove custom parameters, add equivalent if needed
        $null = $PSBoundParameters.Remove('BackwardCompatible')

        # set default value and called parameter for SubscriptionId
#        if ($has['SubscriptionId']) {
#            $PSBoundParameters['SubscriptionIdInternal'] = $PSBoundParameters['SubscriptionId']
#        } else {
#            if (!$has['ManagementGroupName']) {
#                $PSBoundParameters['SubscriptionIdInternal'] = (Get-AzContext).Subscription.Id
#            }
#        }

#        $null = $PSBoundParameters.Remove('SubscriptionId')

        # determine parameter set for call to generated cmdlet
        if (('Name', 'SubscriptionId', 'ManagementGroupName', 'BuiltIn', 'Custom') -contains $parameterSet) {
            if ($has['SubscriptionId']) {
                if ($has['Name']) {
                    $calledParameterSet = 'Get';
                } else {
                    $calledParameterSet = 'List';
                }

                # rename subscription parameter to internal version
                $PSBoundParameters['SubscriptionIdInternal'] = $PSBoundParameters['SubscriptionId']

            } else {
                if ($has['ManagementGroupName']) {
                    if ($has['Name']) {
                        $calledParameterSet = 'Get1'
                    } else {
                        $calledParameterSet = 'List1'
                    }
                } else {
                    $PSBoundParameters['SubscriptionIdInternal'] = (Get-AzContext).Subscription.Id
                    if ($has['Name']) {
                        $calledParameterSet = 'Get'
                    }
                }
            }

            $null = $PSBoundParameters.Remove('SubscriptionId')
        }

        # alias ManagementGroupName to ManagementGroupId
        if ($has['ManagementGroupName']) {
            $PSBoundParameters['ManagementGroupId'] = $PSBoundParameters['ManagementGroupName']
            $null = $PSBoundParameters.Remove('ManagementGroupName')
        }

        $mapping=@{
            Get='Az.Policy.private\Get-AzPolicyDefinition_Get';
            Get1='Az.Policy.private\Get-AzPolicyDefinition_Get1';
            List='Az.Policy.private\Get-AzPolicyDefinition_List';
            List1='Az.Policy.private\Get-AzPolicyDefinition_List1';
            BuiltInGet='Az.Policy.private\Get-AzPolicyDefinitionBuilt_Get';
            GetViaIdentity='Az.Policy.private\Get-AzPolicyDefinition_GetViaIdentity';
        }

        if ($writeln) {
            Write-Host -ForegroundColor Blue -> $calledParameterSet - $PSBoundParameters
        }

        $cmdInfo = Get-Command -Name $mapping[$calledParameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Policy.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $calledParameterSet, $PSCmdlet)
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$calledParameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}

        # get output and fix up for backward compatibility
        $output = Invoke-Command -ScriptBlock $scriptCmd
        foreach ($item in $output) {
            if ($BackwardCompatible) {
                $propertyBag = @{
                    Description = $item.Description;
                    DisplayName = $item.DisplayName;
                    Metadata = [PSCustomObject][hashtable]$item.Metadata.AdditionalProperties;
                    Mode = $item.Mode;
                    Parameter = (ConvertFrom-Json $item.Parameter.ToJsonString() -Depth 100);
                    PolicyRule = [PSCustomObject][hashtable]$item.PolicyRule.AdditionalProperties;
                    PolicyType = $item.PolicyType
                }

                $item | Add-Member -MemberType NoteProperty -Name 'Properties' -Value ([PSCustomObject]($propertyBag))
                $item | Add-Member -MemberType NoteProperty -Name 'ResourceId' -Value $item.Id
                $item | Add-Member -MemberType NoteProperty -Name 'PolicyDefinitionId' -Value $item.Id
            }

            $item | Add-Member -MemberType NoteProperty -Name 'Metadata' -Value ([PSCustomObject][hashtable]($item.Metadata.AdditionalProperties)) -Force
            $item | Add-Member -MemberType NoteProperty -Name 'Parameter' -Value (ConvertFrom-Json $item.Parameter.ToJsonString() -Depth 100) -Force
            $item | Add-Member -MemberType NoteProperty -Name 'PolicyRule' -Value ([PSCustomObject][hashtable]($item.PolicyRule.AdditionalProperties)) -Force
            $PSCmdlet.WriteObject($item)
        }

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }
}

end {
    try {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Policy.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}
}