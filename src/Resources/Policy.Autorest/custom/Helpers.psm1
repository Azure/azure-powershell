
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

function parsePolicyDefinitionId {
    param(
        # The resource Id of a policy definition
        $resourceId
    )

    $mark = '/providers/microsoft.authorization/policydefinitions/'
    $parts = $resourceId -split $mark
    $name = $parts[1]
    $subId = ''
    $mgname = ''
    $type = 'none'

    if ($parts[0] -eq '') {
        $type = 'builtin'
    }
    else {
        if ($parts[0] -like '/providers/Microsoft.Management/managementGroups/*') {
            $type = 'mgname'
            $mgName = ($parts[0] -split '/providers/Microsoft.Management/managementGroups/')[1]
        }
        else {
            if ($parts[0] -like '/subscriptions/*') {
                $type = 'subid'
                $subId = ($parts[0] -split '/subscriptions/')[1]
            }
        }
    }

    return @{
        'Type' = $type
        'SubscriptionId' = $subId
        'ManagementGroupName' = $mgName
        'Name' = $name
    }
}

# derived from stackoverflow entry
# https://stackoverflow.com/questions/22002748/hashtables-from-convertfrom-json-have-different-type-from-powershells-built-in-h
function convertJsonToHash {
    param($root)

    $hash = $null

    if ($root) {
        $hash = [ordered]@{}

        $keys = $root | Get-Member -MemberType NoteProperty | Select-Object -exp Name

        $keys | ForEach-Object{
            $key = $_
            $obj = $root.$($_)
            if ($obj -match "@{")
            {
                $nesthash = convertJsonToHash $obj
                $hash.add($key,$nesthash)
            }
            else
            {
               $hash.add($key,$obj)
            }

        }
    }

    return $hash
}

# derived from blog article: https://powershellexplained.com/2016-11-06-powershell-hashtable-everything-you-wanted-to-know-about/#deep-copies
function New-HashtableDeepClone
{
    [cmdletbinding()]
    param(
        [hashtable]$InputObject
    )
    process
    {
        $clone = @{}
        foreach($key in $InputObject.keys)
        {
            $clone[$key] = Get-DeepClone $InputObject[$key]
        }

        return $clone
    }
}

function getFileOrStringParameterValue {
    param([string]$parameterValue)
    if (Test-Path $parameterValue) {
        Get-Content $parameterValue | Out-String
    }
    else {
        $parameterValue
    }
}

function resolvePolicyParameter {
    param([string]$parameterValue)

    $policy = getFileOrStringParameterValue $parameterValue
    Write-Host -ForegroundColor Cyan Policy: $policy
    #$policyParameter = convertJsonToHash ($policy | ConvertFrom-Json -Depth 100)  - Hashtable
    #$policyParameter = ConvertFrom-Json -Depth 100 $policy                        - PSCustomObject
    $policyParameter = ConvertFrom-Json -Depth 100 -AsHashtable $policy            # Hashtable
    if ($policyParameter.properties) {
        return $policyParameter.properties
    } else {
        return $policyParameter
    }
}

function resolvePolicyDefinition {
    param(
        [string]$name,
        [string]$subscriptionId,
        [string]$managementGroupName,
        [string]$id
    )

    $type = 'none'
    $scope = ''
    $scopeType = ''
    $scopeName = ''
    $resourceId = '<invalid>'

    if ($id -and !$subscriptionId -and !$managementGroupName) {
        $type = 'id'
        $resolved = parsePolicyDefinitionId($id)
        switch ($resolved.Type) {
            'subId' {
                $scope = $resolved.SubscriptionId
                $scopeType = 'subId'
                $scopeName = "subscription $($scope)"
            }
            'mgName' {
                $scope = $resolved.ManagementGroupName
                $scopeType = 'mgName'
                $scopeName = "management group $($scope)"
            }
        }

        $name = $resolved.Name
        $resourceId = $id
    } else {
        if ($name) {
            if ($managementGroupName) {
                $type = 'mgName'
                $scope = $managementGroupName
                $scopeType = 'mgName'
                $scopeName = "management group $($scope)"
                $resourceId = "/providers/Microsoft.Management/managementGroups/$($managementGroupName)/providers/Microsoft.Authorization/policyDefinitions/$($name)"
            } else {
                if (!$subscriptionId) {
                    $type = 'name'
                    $subscriptionId = (Get-AzContext).Subscription.Id
                } else {
                    $type = 'subId'
                }

                $scope = $subscriptionId
                $scopeType = 'subId'
                $scopeName = "subscription $($scope)"
                $resourceId = "/subscriptions/$($subscriptionId)/providers/Microsoft.Authorization/policyDefinitions/$($name)"
            }
        }
    }

    return @{
        Type = $type;
        Scope = $scope;
        ScopeType = $scopeType
        ScopeName = $scopeName;
        Name = $name;
        ResourceId = $resourceId
    }
}
