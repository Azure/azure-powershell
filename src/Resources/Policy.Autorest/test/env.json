{
  "updatedMetadataValue": "newTestValue",
  "someDisplayName": "Some display name",
  "parameterDisplayName": "List of locations",
  "parameterDescription": "An array of permitted locations for resources.",
  "undefinedPolicyParameter": "[UndefinedPolicyParameter] : The policy assignment",
  "Tenant": "72f988bf-86f1-41af-91ab-2d7cd011db47",
  "parameterNullError": ". The argument is null. Provide a valid value for the argument, and then try running the command again.",
  "policyDefinitionParameter": "One of -PolicyDefinition or -PolicySetDefinition must be provided.",
  "someJsonArray": "[{ 'someThing': 'someOtherThing' }]",
  "metadata": "{'testName':'testValue'}",
  "updatedMetadata": "{'testName':'testValue', 'newTestName': 'newTestValue'}",
  "parameterSetError": "Parameter set cannot be resolved using the specified named parameters.",
  "allSwitchNotSupported": "The -IncludeDescendent switch is not supported for management group scopes.",
  "httpMethodNotSupported": "HttpMethodNotSupported : The http method 'DELETE' is not supported for a resource collection.",
  "enforcementModeDoNotEnforce": "DoNotEnforce",
  "missingSubscription": "[MissingSubscription] : The request did not have a subscription or a valid tenant level resource provider.",
  "managementGroupScope": "/providers/Microsoft.Management/managementGroups/AzGovPerfTest",
  "managementGroup": "AzGovPerfTest",
  "policyAssignmentMissingIdentityId": "A user assigned identity id needs to be specified if the identity type is 'UserAssigned'.",
  "nonInteractiveMode": "PowerShell is in NonInteractive mode. Read and Prompt functionality is not available.",
  "metadataValue": "testValue",
  "onlyManagementGroupOrSubscription": "Only -ManagementGroupName or -SubscriptionId can be provided, not both.",
  "policyAssignmentNotFound": "[PolicyAssignmentNotFound] : ",
  "updatedMetadataName": "newTestName",
  "enforcementModeDefault": "Default",
  "policyExemptionNotFound": "[PolicyExemptionNotFound] : ",
  "SubscriptionId": "edb2c18a-04d6-49e9-bc72-e23852f507ad",
  "missingAnArgument": "Missing an argument for parameter ",
  "fullParameterDefinition": "{ 'listOfAllowedLocations': { 'type': 'array', 'metadata': { 'description': 'An array of permitted locations for resources.', 'strongType': 'location', 'displayName': 'List of locations' } }, 'effectParam': { 'type': 'string', 'defaultValue': 'deny' } }",
  "somePolicyParameter": "somePolicyParameter",
  "metadataName": "testName",
  "somePolicySetDefinition": "somePolicySetDefinition",
  "somePolicyDefinition": "somePolicyDefinition",
  "invalidPolicyRule": "[InvalidPolicyRule] : Failed to parse policy rule: ",
  "someScope": "someScope",
  "someParameterObject": "{'parm1': 'a', 'parm2': 'b' }",
  "someIdentityId": "someIdentityId",
  "someName": "someName",
  "someManagementGroup": "someManagementGroup",
  "policySetDefinitionNotFound": "[PolicySetDefinitionNotFound] : ",
  "invalidParameterValue": "Cannot validate argument on parameter",
  "updatedDescription": "Updated ",
  "invalidPolicySetDefinitionRequest": "[InvalidCreatePolicySetDefinitionRequest] : The policy set definition 'someName' create request is invalid. At least one policy definition must be referenced.",
  "policyDefinitionNotFound": "[PolicyDefinitionNotFound] : ",
  "invalidRequestContent": "[InvalidRequestContent] : The request content was invalid and could not be deserialized: ",
  "someId": "someId",
  "parameterNullOrEmpty": ". The argument is null or empty. Provide an argument that is not null or empty, and then try the command again.",
  "onlyDefinitionOrSetDefinition": "Only one of -PolicyDefinition or -PolicySetDefinition can be specified, not both.",
  "invalidPolicyDefinitionReference": "InvalidPolicyDefinitionReference",
  "missingParameters": "Cannot process command because of one or more missing mandatory parameters:",
  "authorizationFailed": "[AuthorizationFailed] : ",
  "someJsonSnippet": "{ 'someThing': 'someOtherThing' }",
  "description": "Unit test junk: sorry for littering. Please delete me!",
  "parameterDefinition": "{ 'listOfAllowedLocations': { 'type': 'array', 'metadata': { 'description': 'An array of permitted locations for resources.', 'strongType': 'location', 'displayName': 'List of locations' } } }",
  "policyAssignmentMissingLocation": "Location needs to be specified if a managed identity is to be assigned to the policy assignment."
}
