// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AD.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Extensions;

    /// <summary>Create a new application.</summary>
    /// <remarks>
    /// [OpenAPI] Applications_Create=>POST:"/{tenantID}/applications"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"AzADApplication_CreateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IApplication))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Description(@"Create a new application.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Generated]
    public partial class NewAzADApplication_CreateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>
        /// A property on the application to indicate if the application accepts other IDPs or not or partially accepts.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A property on the application to indicate if the application accepts other IDPs or not or partially accepts.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A property on the application to indicate if the application accepts other IDPs or not or partially accepts.",
        SerializedName = @"allowGuestsSignIn",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter AllowGuestsSignIn { get => ParametersBody.AllowGuestsSignIn ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.AllowGuestsSignIn = value; }

        /// <summary>
        /// Indicates that the application supports pass through users who have no presence in the resource tenant.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates that the application supports pass through users who have no presence in the resource tenant.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates that the application supports pass through users who have no presence in the resource tenant.",
        SerializedName = @"allowPassthroughUsers",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter AllowPassthroughUser { get => ParametersBody.AllowPassthroughUser ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.AllowPassthroughUser = value; }

        /// <summary>The url for the application logo image stored in a CDN.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The url for the application logo image stored in a CDN.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The url for the application logo image stored in a CDN.",
        SerializedName = @"appLogoUrl",
        PossibleTypes = new [] { typeof(string) })]
        public string AppLogoUrl { get => ParametersBody.AppLogoUrl ?? null; set => ParametersBody.AppLogoUrl = value; }

        /// <summary>The application permissions.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The application permissions.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The application permissions.",
        SerializedName = @"appPermissions",
        PossibleTypes = new [] { typeof(string) })]
        public string[] AppPermission { get => ParametersBody.AppPermission ?? null /* arrayOf */; set => ParametersBody.AppPermission = value; }

        /// <summary>
        /// The collection of application roles that an application may declare. These roles can be assigned to users, groups or service
        /// principals.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The collection of application roles that an application may declare. These roles can be assigned to users, groups or service principals.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The collection of application roles that an application may declare. These roles can be assigned to users, groups or service principals.",
        SerializedName = @"appRoles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IAppRole) })]
        public Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IAppRole[] AppRole { get => ParametersBody.AppRole ?? null /* arrayOf */; set => ParametersBody.AppRole = value; }

        /// <summary>Whether the application is available to other tenants.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether the application is available to other tenants.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether the application is available to other tenants.",
        SerializedName = @"availableToOtherTenants",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter AvailableToOtherTenant { get => ParametersBody.AvailableToOtherTenant ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.AvailableToOtherTenant = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.AD.Ad Client => Microsoft.Azure.PowerShell.Cmdlets.AD.Module.Instance.ClientAPI;

        /// <summary>
        /// The credentials, account, tenant, and subscription used for communication with Azure
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>The display name of the application.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The display name of the application.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The display name of the application.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        public string DisplayName { get => ParametersBody.DisplayName ?? null; set => ParametersBody.DisplayName = value; }

        /// <summary>
        /// A URL provided by the author of the application to report errors when using the application.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A URL provided by the author of the application to report errors when using the application.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A URL provided by the author of the application to report errors when using the application.",
        SerializedName = @"errorUrl",
        PossibleTypes = new [] { typeof(string) })]
        public string ErrorUrl { get => ParametersBody.ErrorUrl ?? null; set => ParametersBody.ErrorUrl = value; }

        /// <summary>
        /// Configures the groups claim issued in a user or OAuth 2.0 access token that the app expects.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Configures the groups claim issued in a user or OAuth 2.0 access token that the app expects.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Configures the groups claim issued in a user or OAuth 2.0 access token that the app expects.",
        SerializedName = @"groupMembershipClaims",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AD.Support.GroupMembershipClaimTypes) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.AD.Support.GroupMembershipClaimTypes))]
        public Microsoft.Azure.PowerShell.Cmdlets.AD.Support.GroupMembershipClaimTypes GroupMembershipClaim { get => ParametersBody.GroupMembershipClaim ?? ((Microsoft.Azure.PowerShell.Cmdlets.AD.Support.GroupMembershipClaimTypes)""); set => ParametersBody.GroupMembershipClaim = value; }

        /// <summary>The home page of the application.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The home page of the application.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The home page of the application.",
        SerializedName = @"homepage",
        PossibleTypes = new [] { typeof(string) })]
        public string Homepage { get => ParametersBody.Homepage ?? null; set => ParametersBody.Homepage = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>A collection of URIs for the application.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A collection of URIs for the application.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A collection of URIs for the application.",
        SerializedName = @"identifierUris",
        PossibleTypes = new [] { typeof(string) })]
        public string[] IdentifierUri { get => ParametersBody.IdentifierUri ?? null /* arrayOf */; set => ParametersBody.IdentifierUri = value; }

        /// <summary>The marketing URI</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The marketing URI")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The marketing URI",
        SerializedName = @"marketing",
        PossibleTypes = new [] { typeof(string) })]
        public string InformationalUrlMarketing { get => ParametersBody.InformationalUrlMarketing ?? null; set => ParametersBody.InformationalUrlMarketing = value; }

        /// <summary>The privacy policy URI</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The privacy policy URI")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The privacy policy URI",
        SerializedName = @"privacy",
        PossibleTypes = new [] { typeof(string) })]
        public string InformationalUrlPrivacy { get => ParametersBody.InformationalUrlPrivacy ?? null; set => ParametersBody.InformationalUrlPrivacy = value; }

        /// <summary>The support URI</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The support URI")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The support URI",
        SerializedName = @"support",
        PossibleTypes = new [] { typeof(string) })]
        public string InformationalUrlSupport { get => ParametersBody.InformationalUrlSupport ?? null; set => ParametersBody.InformationalUrlSupport = value; }

        /// <summary>The terms of service URI</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The terms of service URI")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The terms of service URI",
        SerializedName = @"termsOfService",
        PossibleTypes = new [] { typeof(string) })]
        public string InformationalUrlTermsOfService { get => ParametersBody.InformationalUrlTermsOfService ?? null; set => ParametersBody.InformationalUrlTermsOfService = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// Specifies whether this application supports device authentication without a user. The default is false.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Specifies whether this application supports device authentication without a user. The default is false.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether this application supports device authentication without a user. The default is false.",
        SerializedName = @"isDeviceOnlyAuthSupported",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter IsDeviceOnlyAuthSupported { get => ParametersBody.IsDeviceOnlyAuthSupported ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.IsDeviceOnlyAuthSupported = value; }

        /// <summary>A collection of KeyCredential objects.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A collection of KeyCredential objects.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A collection of KeyCredential objects.",
        SerializedName = @"keyCredentials",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IKeyCredential) })]
        public Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IKeyCredential[] KeyCredentials { get => ParametersBody.KeyCredentials ?? null /* arrayOf */; set => ParametersBody.KeyCredentials = value; }

        /// <summary>
        /// Client applications that are tied to this resource application. Consent to any of the known client applications will result
        /// in implicit consent to the resource application through a combined consent dialog (showing the OAuth permission scopes
        /// required by the client and the resource).
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Client applications that are tied to this resource application. Consent to any of the known client applications will result in implicit consent to the resource application through a combined consent dialog (showing the OAuth permission scopes required by the client and the resource).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Client applications that are tied to this resource application. Consent to any of the known client applications will result in implicit consent to the resource application through a combined consent dialog (showing the OAuth permission scopes required by the client and the resource).",
        SerializedName = @"knownClientApplications",
        PossibleTypes = new [] { typeof(string) })]
        public string[] KnownClientApplication { get => ParametersBody.KnownClientApplication ?? null /* arrayOf */; set => ParametersBody.KnownClientApplication = value; }

        /// <summary>the url of the logout page</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "the url of the logout page")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"the url of the logout page",
        SerializedName = @"logoutUrl",
        PossibleTypes = new [] { typeof(string) })]
        public string LogoutUrl { get => ParametersBody.LogoutUrl ?? null; set => ParametersBody.LogoutUrl = value; }

        /// <summary>
        /// <see cref="IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>Whether to allow implicit grant flow for OAuth2</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether to allow implicit grant flow for OAuth2")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to allow implicit grant flow for OAuth2",
        SerializedName = @"oauth2AllowImplicitFlow",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter Oauth2AllowImplicitFlow { get => ParametersBody.Oauth2AllowImplicitFlow ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.Oauth2AllowImplicitFlow = value; }

        /// <summary>
        /// Specifies whether during a token Request Azure AD will allow path matching of the redirect URI against the applications
        /// collection of replyURLs. The default is false.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Specifies whether during a token Request Azure AD will allow path matching of the redirect URI against the applications collection of replyURLs. The default is false.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether during a token Request Azure AD will allow path matching of the redirect URI against the applications collection of replyURLs. The default is false.",
        SerializedName = @"oauth2AllowUrlPathMatching",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter Oauth2AllowUrlPathMatching { get => ParametersBody.Oauth2AllowUrlPathMatching ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.Oauth2AllowUrlPathMatching = value; }

        /// <summary>
        /// The collection of OAuth 2.0 permission scopes that the web API (resource) application exposes to client applications.
        /// These permission scopes may be granted to client applications during consent.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The collection of OAuth 2.0 permission scopes that the web API (resource) application exposes to client applications. These permission scopes may be granted to client applications during consent.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The collection of OAuth 2.0 permission scopes that the web API (resource) application exposes to client applications. These permission scopes may be granted to client applications during consent.",
        SerializedName = @"oauth2Permissions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IOAuth2Permission) })]
        public Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IOAuth2Permission[] Oauth2Permission { get => ParametersBody.Oauth2Permission ?? null /* arrayOf */; set => ParametersBody.Oauth2Permission = value; }

        /// <summary>
        /// Specifies whether, as part of OAuth 2.0 token requests, Azure AD will allow POST requests, as opposed to GET requests.
        /// The default is false, which specifies that only GET requests will be allowed.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Specifies whether, as part of OAuth 2.0 token requests, Azure AD will allow POST requests, as opposed to GET requests. The default is false, which specifies that only GET requests will be allowed.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether, as part of OAuth 2.0 token requests, Azure AD will allow POST requests, as opposed to GET requests. The default is false, which specifies that only GET requests will be allowed.",
        SerializedName = @"oauth2RequirePostResponse",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter Oauth2RequirePostResponse { get => ParametersBody.Oauth2RequirePostResponse ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.Oauth2RequirePostResponse = value; }

        /// <summary>Optional claims requested to be included in the access token.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Optional claims requested to be included in the access token.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional claims requested to be included in the access token.",
        SerializedName = @"accessToken",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IOptionalClaim) })]
        public Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IOptionalClaim[] OptionalClaimAccessToken { get => ParametersBody.OptionalClaimAccessToken ?? null /* arrayOf */; set => ParametersBody.OptionalClaimAccessToken = value; }

        /// <summary>Optional claims requested to be included in the id token.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Optional claims requested to be included in the id token.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional claims requested to be included in the id token.",
        SerializedName = @"idToken",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IOptionalClaim) })]
        public Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IOptionalClaim[] OptionalClaimIdToken { get => ParametersBody.OptionalClaimIdToken ?? null /* arrayOf */; set => ParametersBody.OptionalClaimIdToken = value; }

        /// <summary>Optional claims requested to be included in the saml token.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Optional claims requested to be included in the saml token.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Optional claims requested to be included in the saml token.",
        SerializedName = @"samlToken",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IOptionalClaim) })]
        public Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IOptionalClaim[] OptionalClaimSamlToken { get => ParametersBody.OptionalClaimSamlToken ?? null /* arrayOf */; set => ParametersBody.OptionalClaimSamlToken = value; }

        /// <summary>A list of tenants allowed to access application.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A list of tenants allowed to access application.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of tenants allowed to access application.",
        SerializedName = @"orgRestrictions",
        PossibleTypes = new [] { typeof(string) })]
        public string[] OrgRestriction { get => ParametersBody.OrgRestriction ?? null /* arrayOf */; set => ParametersBody.OrgRestriction = value; }

        /// <summary>Backing field for <see cref="ParametersBody" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IApplicationCreateParameters _parametersBody= new Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.ApplicationCreateParameters();

        /// <summary>Request parameters for creating a new application.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IApplicationCreateParameters ParametersBody { get => this._parametersBody; set => this._parametersBody = value; }

        /// <summary>A collection of PasswordCredential objects</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A collection of PasswordCredential objects")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A collection of PasswordCredential objects",
        SerializedName = @"passwordCredentials",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IPasswordCredential) })]
        public Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IPasswordCredential[] PasswordCredentials { get => ParametersBody.PasswordCredentials ?? null /* arrayOf */; set => ParametersBody.PasswordCredentials = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>list of pre-authorized applications.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "list of pre-authorized applications.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"list of pre-authorized applications.",
        SerializedName = @"preAuthorizedApplications",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IPreAuthorizedApplication) })]
        public Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IPreAuthorizedApplication[] PreAuthorizedApplication { get => ParametersBody.PreAuthorizedApplication ?? null /* arrayOf */; set => ParametersBody.PreAuthorizedApplication = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>
        /// Specifies whether this application is a public client (such as an installed application running on a mobile device). Default
        /// is false.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Specifies whether this application is a public client (such as an installed application running on a mobile device). Default is false.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether this application is a public client (such as an installed application running on a mobile device). Default is false.",
        SerializedName = @"publicClient",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter PublicClient { get => ParametersBody.PublicClient ?? default(global::System.Management.Automation.SwitchParameter); set => ParametersBody.PublicClient = value; }

        /// <summary>Reliable domain which can be used to identify an application.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Reliable domain which can be used to identify an application.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Reliable domain which can be used to identify an application.",
        SerializedName = @"publisherDomain",
        PossibleTypes = new [] { typeof(string) })]
        public string PublisherDomain { get => ParametersBody.PublisherDomain ?? null; set => ParametersBody.PublisherDomain = value; }

        /// <summary>A collection of reply URLs for the application.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A collection of reply URLs for the application.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A collection of reply URLs for the application.",
        SerializedName = @"replyUrls",
        PossibleTypes = new [] { typeof(string) })]
        public string[] ReplyUrl { get => ParametersBody.ReplyUrl ?? null /* arrayOf */; set => ParametersBody.ReplyUrl = value; }

        /// <summary>
        /// Specifies resources that this application requires access to and the set of OAuth permission scopes and application roles
        /// that it needs under each of those resources. This pre-configuration of required resource access drives the consent experience.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Specifies resources that this application requires access to and the set of OAuth permission scopes and application roles that it needs under each of those resources. This pre-configuration of required resource access drives the consent experience.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies resources that this application requires access to and the set of OAuth permission scopes and application roles that it needs under each of those resources. This pre-configuration of required resource access drives the consent experience.",
        SerializedName = @"requiredResourceAccess",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IRequiredResourceAccess) })]
        public Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IRequiredResourceAccess[] RequiredResourceAccess { get => ParametersBody.RequiredResourceAccess ?? null /* arrayOf */; set => ParametersBody.RequiredResourceAccess = value; }

        /// <summary>The URL to the SAML metadata for the application.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The URL to the SAML metadata for the application.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URL to the SAML metadata for the application.",
        SerializedName = @"samlMetadataUrl",
        PossibleTypes = new [] { typeof(string) })]
        public string SamlMetadataUrl { get => ParametersBody.SamlMetadataUrl ?? null; set => ParametersBody.SamlMetadataUrl = value; }

        /// <summary>
        /// Audience for signing in to the application (AzureADMyOrganization, AzureADAllOrganizations, AzureADAndMicrosoftAccounts).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Audience for signing in to the application (AzureADMyOrganization, AzureADAllOrganizations, AzureADAndMicrosoftAccounts).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Audience for signing in to the application (AzureADMyOrganization, AzureADAllOrganizations, AzureADAndMicrosoftAccounts).",
        SerializedName = @"signInAudience",
        PossibleTypes = new [] { typeof(string) })]
        public string SignInAudience { get => ParametersBody.SignInAudience ?? null; set => ParametersBody.SignInAudience = value; }

        /// <summary>Backing field for <see cref="TenantId" /> property.</summary>
        private string _tenantId;

        /// <summary>The tenant ID.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The tenant ID.")]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The tenant ID.",
        SerializedName = @"tenantID",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Path)]
        public string TenantId { get => this._tenantId; set => this._tenantId = value; }

        /// <summary>The primary Web page.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The primary Web page.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AD.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AD.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The primary Web page.",
        SerializedName = @"wwwHomepage",
        PossibleTypes = new [] { typeof(string) })]
        public string WwwHomepage { get => ParametersBody.WwwHomepage ?? null; set => ParametersBody.WwwHomepage = value; }

        /// <summary>
        /// <c>overrideOnCreated</c> will be called before the regular onCreated has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IApplication"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onCreated method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IApplication> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IGraphError"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IGraphError> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Events.CmdletEndProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data, new[] { data.Message });
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.AD.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="NewAzADApplication_CreateExpanded" /> cmdlet class.
        /// </summary>
        public NewAzADApplication_CreateExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'ApplicationsCreate' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Events.CmdletProcessRecordAsyncStart); if( ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                await ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.AD.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.ApplicationsCreate(TenantId, ParametersBody, onCreated, onDefault, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  TenantId=TenantId,body=ParametersBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>a delegate that is called when the remote service returns 201 (Created).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IApplication"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IApplication> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnCreated(responseMessage, response, ref _returnNow);
                // if overrideOnCreated has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onCreated - response for 201 / application/json/text/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IApplication
                WriteObject((await response));
            }
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IGraphError"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IGraphError> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.OdataErrorCode;
                var message = (await response)?.MessageValue;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.AD.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.AD.Models.Api16.IGraphError>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { TenantId=TenantId, body=ParametersBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { TenantId=TenantId, body=ParametersBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }
    }
}