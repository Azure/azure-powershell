// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Resources.Models
{
    using System.Linq;

    /// <summary>
    /// Information about a single resource change predicted by What-If operation.
    /// </summary>
    public partial class WhatIfChange
    {
        /// <summary>
        /// Initializes a new instance of the WhatIfChange class.
        /// </summary>
        public WhatIfChange()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WhatIfChange class.
        /// </summary>

        /// <param name="resourceId">Resource ID
        /// </param>

        /// <param name="changeType">Type of change that will be made to the resource when the deployment is
        /// executed.
        /// Possible values include: &#39;Create&#39;, &#39;Delete&#39;, &#39;Ignore&#39;, &#39;Deploy&#39;,
        /// &#39;NoChange&#39;, &#39;Modify&#39;, &#39;Unsupported&#39;</param>

        /// <param name="unsupportedReason">The explanation about why the resource is unsupported by What-If.
        /// </param>

        /// <param name="before">The snapshot of the resource before the deployment is executed.
        /// </param>

        /// <param name="after">The predicted snapshot of the resource after the deployment is executed.
        /// </param>

        /// <param name="delta">The predicted changes to resource properties.
        /// </param>
        public WhatIfChange(string resourceId, ChangeType changeType, string unsupportedReason = default(string), object before = default(object), object after = default(object), System.Collections.Generic.IList<WhatIfPropertyChange> delta = default(System.Collections.Generic.IList<WhatIfPropertyChange>))

        {
            this.ResourceId = resourceId;
            this.ChangeType = changeType;
            this.UnsupportedReason = unsupportedReason;
            this.Before = before;
            this.After = after;
            this.Delta = delta;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets resource ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceId")]
        public string ResourceId {get; set; }

        /// <summary>
        /// Gets or sets type of change that will be made to the resource when the
        /// deployment is executed. Possible values include: &#39;Create&#39;, &#39;Delete&#39;, &#39;Ignore&#39;, &#39;Deploy&#39;, &#39;NoChange&#39;, &#39;Modify&#39;, &#39;Unsupported&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "changeType")]
        public ChangeType ChangeType {get; set; }

        /// <summary>
        /// Gets or sets the explanation about why the resource is unsupported by
        /// What-If.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "unsupportedReason")]
        public string UnsupportedReason {get; set; }

        /// <summary>
        /// Gets or sets the snapshot of the resource before the deployment is
        /// executed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "before")]
        public object Before {get; set; }

        /// <summary>
        /// Gets or sets the predicted snapshot of the resource after the deployment is
        /// executed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "after")]
        public object After {get; set; }

        /// <summary>
        /// Gets or sets the predicted changes to resource properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "delta")]
        public System.Collections.Generic.IList<WhatIfPropertyChange> Delta {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ResourceId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ResourceId");
            }





            if (this.Delta != null)
            {
                foreach (var element in this.Delta)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}