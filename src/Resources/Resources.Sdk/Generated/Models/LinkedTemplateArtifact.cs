// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Resources.Models
{
    using System.Linq;

    /// <summary>
    /// Represents a Template Spec artifact containing an embedded Azure Resource
    /// Manager template for use as a linked template.
    /// </summary>
    public partial class LinkedTemplateArtifact
    {
        /// <summary>
        /// Initializes a new instance of the LinkedTemplateArtifact class.
        /// </summary>
        public LinkedTemplateArtifact()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LinkedTemplateArtifact class.
        /// </summary>

        /// <param name="path">A filesystem safe relative path of the artifact.
        /// </param>

        /// <param name="template">The Azure Resource Manager template.
        /// </param>
        public LinkedTemplateArtifact(string path, object template)

        {
            this.Path = path;
            this.Template = template;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a filesystem safe relative path of the artifact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "path")]
        public string Path {get; set; }

        /// <summary>
        /// Gets or sets the Azure Resource Manager template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "template")]
        public object Template {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Path == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Path");
            }
            if (this.Template == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Template");
            }


        }
    }
}