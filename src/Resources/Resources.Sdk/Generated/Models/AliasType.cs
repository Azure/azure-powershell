// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Resources.Models
{

    /// <summary>
    /// Defines values for AliasType.
    /// </summary>


    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum AliasType
    {
        /// <summary>
        /// Alias type is unknown (same as not providing alias type).
        /// </summary>
        [System.Runtime.Serialization.EnumMember(Value = "NotSpecified")]
        NotSpecified,
        /// <summary>
        /// Alias value is not secret.
        /// </summary>
        [System.Runtime.Serialization.EnumMember(Value = "PlainText")]
        PlainText,
        /// <summary>
        /// Alias value is secret.
        /// </summary>
        [System.Runtime.Serialization.EnumMember(Value = "Mask")]
        Mask
    }
    internal static class AliasTypeEnumExtension
    {
        internal static string ToSerializedValue(this AliasType? value)
        {
            return value == null ? null : ((AliasType)value).ToSerializedValue();
        }
        internal static string ToSerializedValue(this AliasType value)
        {
            switch( value )
            {
                case AliasType.NotSpecified:
                    return "NotSpecified";
                case AliasType.PlainText:
                    return "PlainText";
                case AliasType.Mask:
                    return "Mask";
            }
            return null;
        }
        internal static AliasType? ParseAliasType(this string value)
        {
            switch( value )
            {
                case "NotSpecified":
                    return AliasType.NotSpecified;
                case "PlainText":
                    return AliasType.PlainText;
                case "Mask":
                    return AliasType.Mask;
            }
            return null;
        }
    }
}