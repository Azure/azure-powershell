// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Resources.Models
{
    using System.Linq;

    /// <summary>
    /// Template Spec object.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class TemplateSpec : AzureResourceBase
    {
        /// <summary>
        /// Initializes a new instance of the TemplateSpec class.
        /// </summary>
        public TemplateSpec()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TemplateSpec class.
        /// </summary>

        /// <param name="id">String Id used to locate any resource on Azure.
        /// </param>

        /// <param name="name">Name of this resource.
        /// </param>

        /// <param name="type">Type of this resource.
        /// </param>

        /// <param name="systemData">Azure Resource Manager metadata containing createdBy and modifiedBy
        /// information.
        /// </param>

        /// <param name="location">The location of the Template Spec. It cannot be changed after Template Spec
        /// creation. It must be one of the supported Azure locations.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="description">Template Spec description.
        /// </param>

        /// <param name="displayName">Template Spec display name.
        /// </param>

        /// <param name="metadata">The Template Spec metadata. Metadata is an open-ended object and is
        /// typically a collection of key-value pairs.
        /// </param>

        /// <param name="versions">High-level information about the versions within this Template Spec. The
        /// keys are the version names. Only populated if the $expand query parameter
        /// is set to &#39;versions&#39;.
        /// </param>
        public TemplateSpec(string location, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string description = default(string), string displayName = default(string), object metadata = default(object), System.Collections.Generic.IDictionary<string, TemplateSpecVersionInfo> versions = default(System.Collections.Generic.IDictionary<string, TemplateSpecVersionInfo>))

        : base(id, name, type, systemData)
        {
            this.Location = location;
            this.Tags = tags;
            this.Description = description;
            this.DisplayName = displayName;
            this.Metadata = metadata;
            this.Versions = versions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the location of the Template Spec. It cannot be changed after
        /// Template Spec creation. It must be one of the supported Azure locations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location {get; set; }

        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets or sets template Spec description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets template Spec display name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets the Template Spec metadata. Metadata is an open-ended object
        /// and is typically a collection of key-value pairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.metadata")]
        public object Metadata {get; set; }

        /// <summary>
        /// Gets high-level information about the versions within this Template Spec.
        /// The keys are the version names. Only populated if the $expand query
        /// parameter is set to &#39;versions&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.versions")]
        public System.Collections.Generic.IDictionary<string, TemplateSpecVersionInfo> Versions {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Location == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Location");
            }


            if (this.Description != null)
            {
                if (this.Description.Length > 4096)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Description", 4096);
                }
            }
            if (this.DisplayName != null)
            {
                if (this.DisplayName.Length > 64)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "DisplayName", 64);
                }
            }


        }
    }
}