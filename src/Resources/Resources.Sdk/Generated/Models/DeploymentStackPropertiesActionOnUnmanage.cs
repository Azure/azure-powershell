// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Resources.Models
{
    using System.Linq;

    /// <summary>
    /// Defines the behavior of resources that are not managed immediately after
    /// the stack is updated.
    /// </summary>
    public partial class DeploymentStackPropertiesActionOnUnmanage
    {
        /// <summary>
        /// Initializes a new instance of the DeploymentStackPropertiesActionOnUnmanage class.
        /// </summary>
        public DeploymentStackPropertiesActionOnUnmanage()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeploymentStackPropertiesActionOnUnmanage class.
        /// </summary>

        /// <param name="resources">Specifies the action that should be taken on the resource when the
        /// deployment stack is deleted. Delete will attempt to delete the resource
        /// from Azure. Detach will leave the resource in it&#39;s current state.
        /// Possible values include: &#39;delete&#39;, &#39;detach&#39;</param>

        /// <param name="resourceGroups">Specifies the action that should be taken on the resource when the
        /// deployment stack is deleted. Delete will attempt to delete the resource
        /// from Azure. Detach will leave the resource in it&#39;s current state.
        /// Possible values include: &#39;delete&#39;, &#39;detach&#39;</param>

        /// <param name="managementGroups">Specifies the action that should be taken on the resource when the
        /// deployment stack is deleted. Delete will attempt to delete the resource
        /// from Azure. Detach will leave the resource in it&#39;s current state.
        /// Possible values include: &#39;delete&#39;, &#39;detach&#39;</param>
        public DeploymentStackPropertiesActionOnUnmanage(string resources, string resourceGroups = default(string), string managementGroups = default(string))

        {
            this.Resources = resources;
            this.ResourceGroups = resourceGroups;
            this.ManagementGroups = managementGroups;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets specifies the action that should be taken on the resource when
        /// the deployment stack is deleted. Delete will attempt to delete the resource
        /// from Azure. Detach will leave the resource in it&#39;s current state. Possible values include: &#39;delete&#39;, &#39;detach&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resources")]
        public string Resources {get; set; }

        /// <summary>
        /// Gets or sets specifies the action that should be taken on the resource when
        /// the deployment stack is deleted. Delete will attempt to delete the resource
        /// from Azure. Detach will leave the resource in it&#39;s current state. Possible values include: &#39;delete&#39;, &#39;detach&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceGroups")]
        public string ResourceGroups {get; set; }

        /// <summary>
        /// Gets or sets specifies the action that should be taken on the resource when
        /// the deployment stack is deleted. Delete will attempt to delete the resource
        /// from Azure. Detach will leave the resource in it&#39;s current state. Possible values include: &#39;delete&#39;, &#39;detach&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "managementGroups")]
        public string ManagementGroups {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Resources == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Resources");
            }



        }
    }
}