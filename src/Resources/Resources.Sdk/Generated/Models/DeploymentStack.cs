// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Resources.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Deployment stack object.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DeploymentStack : AzureResourceBase
    {
        /// <summary>
        /// Initializes a new instance of the DeploymentStack class.
        /// </summary>
        public DeploymentStack()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeploymentStack class.
        /// </summary>
        /// <param name="actionOnUnmanage">Defines the behavior of resources
        /// that are not managed immediately after the stack is
        /// updated.</param>
        /// <param name="denySettings">Defines how resources deployed by the
        /// stack are locked.</param>
        /// <param name="id">String Id used to locate any resource on
        /// Azure.</param>
        /// <param name="name">Name of this resource.</param>
        /// <param name="type">Type of this resource.</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="location">The location of the deployment stack. It
        /// cannot be changed after creation. It must be one of the supported
        /// Azure locations.</param>
        /// <param name="tags">Deployment stack resource tags.</param>
        /// <param name="template">The template content. You use this element
        /// when you want to pass the template syntax directly in the request
        /// rather than link to an existing template. It can be a JObject or
        /// well-formed JSON string. Use either the templateLink property or
        /// the template property, but not both.</param>
        /// <param name="templateLink">The URI of the template. Use either the
        /// templateLink property or the template property, but not
        /// both.</param>
        /// <param name="parameters">Name and value pairs that define the
        /// deployment parameters for the template. Use this element when
        /// providing the parameter values directly in the request, rather than
        /// linking to an existing parameter file. Use either the
        /// parametersLink property or the parameters property, but not both.
        /// It can be a JObject or a well formed JSON string.</param>
        /// <param name="parametersLink">The URI of parameters file. Use this
        /// element to link to an existing parameters file. Use either the
        /// parametersLink property or the parameters property, but not
        /// both.</param>
        /// <param name="debugSetting">The debug setting of the
        /// deployment.</param>
        /// <param name="deploymentScope">The scope at which the initial
        /// deployment should be created. If a scope is not specified, it will
        /// default to the scope of the deployment stack. Valid scopes are:
        /// management group (format:
        /// '/providers/Microsoft.Management/managementGroups/{managementGroupId}'),
        /// subscription (format: '/subscriptions/{subscriptionId}'), resource
        /// group (format:
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}').</param>
        /// <param name="description">Deployment stack description.</param>
        /// <param name="provisioningState">State of the deployment stack.
        /// Possible values include: 'Creating', 'Validating', 'Waiting',
        /// 'Deploying', 'Canceling', 'Locking', 'DeletingResources',
        /// 'Succeeded', 'Failed', 'Canceled', 'Deleting'</param>
        /// <param name="detachedResources">An array of resources that were
        /// detached during the most recent update.</param>
        /// <param name="deletedResources">An array of resources that were
        /// deleted during the most recent update.</param>
        /// <param name="failedResources">An array of resources that failed to
        /// reach goal state during the most recent update.</param>
        /// <param name="resources">An array of resources currently managed by
        /// the deployment stack.</param>
        /// <param name="deploymentId">The resourceId of the deployment
        /// resource created by the deployment stack.</param>
        /// <param name="outputs">The outputs of the underlying
        /// deployment.</param>
        /// <param name="duration">The duration of the deployment stack
        /// update.</param>
        public DeploymentStack(DeploymentStackPropertiesActionOnUnmanage actionOnUnmanage, DenySettings denySettings, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), ErrorResponse error = default(ErrorResponse), object template = default(object), DeploymentStacksTemplateLink templateLink = default(DeploymentStacksTemplateLink), object parameters = default(object), DeploymentStacksParametersLink parametersLink = default(DeploymentStacksParametersLink), DeploymentStacksDebugSetting debugSetting = default(DeploymentStacksDebugSetting), string deploymentScope = default(string), string description = default(string), string provisioningState = default(string), IList<ResourceReference> detachedResources = default(IList<ResourceReference>), IList<ResourceReference> deletedResources = default(IList<ResourceReference>), IList<ResourceReferenceExtended> failedResources = default(IList<ResourceReferenceExtended>), IList<ManagedResourceReference> resources = default(IList<ManagedResourceReference>), string deploymentId = default(string), object outputs = default(object), string duration = default(string))
            : base(id, name, type, systemData)
        {
            Location = location;
            Tags = tags;
            Error = error;
            Template = template;
            TemplateLink = templateLink;
            Parameters = parameters;
            ParametersLink = parametersLink;
            ActionOnUnmanage = actionOnUnmanage;
            DebugSetting = debugSetting;
            DeploymentScope = deploymentScope;
            Description = description;
            DenySettings = denySettings;
            ProvisioningState = provisioningState;
            DetachedResources = detachedResources;
            DeletedResources = deletedResources;
            FailedResources = failedResources;
            Resources = resources;
            DeploymentId = deploymentId;
            Outputs = outputs;
            Duration = duration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the location of the deployment stack. It cannot be
        /// changed after creation. It must be one of the supported Azure
        /// locations.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets deployment stack resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.error")]
        public ErrorResponse Error { get; set; }

        /// <summary>
        /// Gets or sets the template content. You use this element when you
        /// want to pass the template syntax directly in the request rather
        /// than link to an existing template. It can be a JObject or
        /// well-formed JSON string. Use either the templateLink property or
        /// the template property, but not both.
        /// </summary>
        [JsonProperty(PropertyName = "properties.template")]
        public object Template { get; set; }

        /// <summary>
        /// Gets or sets the URI of the template. Use either the templateLink
        /// property or the template property, but not both.
        /// </summary>
        [JsonProperty(PropertyName = "properties.templateLink")]
        public DeploymentStacksTemplateLink TemplateLink { get; set; }

        /// <summary>
        /// Gets or sets name and value pairs that define the deployment
        /// parameters for the template. Use this element when providing the
        /// parameter values directly in the request, rather than linking to an
        /// existing parameter file. Use either the parametersLink property or
        /// the parameters property, but not both. It can be a JObject or a
        /// well formed JSON string.
        /// </summary>
        [JsonProperty(PropertyName = "properties.parameters")]
        public object Parameters { get; set; }

        /// <summary>
        /// Gets or sets the URI of parameters file. Use this element to link
        /// to an existing parameters file. Use either the parametersLink
        /// property or the parameters property, but not both.
        /// </summary>
        [JsonProperty(PropertyName = "properties.parametersLink")]
        public DeploymentStacksParametersLink ParametersLink { get; set; }

        /// <summary>
        /// Gets or sets defines the behavior of resources that are not managed
        /// immediately after the stack is updated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.actionOnUnmanage")]
        public DeploymentStackPropertiesActionOnUnmanage ActionOnUnmanage { get; set; }

        /// <summary>
        /// Gets or sets the debug setting of the deployment.
        /// </summary>
        [JsonProperty(PropertyName = "properties.debugSetting")]
        public DeploymentStacksDebugSetting DebugSetting { get; set; }

        /// <summary>
        /// Gets or sets the scope at which the initial deployment should be
        /// created. If a scope is not specified, it will default to the scope
        /// of the deployment stack. Valid scopes are: management group
        /// (format:
        /// '/providers/Microsoft.Management/managementGroups/{managementGroupId}'),
        /// subscription (format: '/subscriptions/{subscriptionId}'), resource
        /// group (format:
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}').
        /// </summary>
        [JsonProperty(PropertyName = "properties.deploymentScope")]
        public string DeploymentScope { get; set; }

        /// <summary>
        /// Gets or sets deployment stack description.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets defines how resources deployed by the stack are
        /// locked.
        /// </summary>
        [JsonProperty(PropertyName = "properties.denySettings")]
        public DenySettings DenySettings { get; set; }

        /// <summary>
        /// Gets state of the deployment stack. Possible values include:
        /// 'Creating', 'Validating', 'Waiting', 'Deploying', 'Canceling',
        /// 'Locking', 'DeletingResources', 'Succeeded', 'Failed', 'Canceled',
        /// 'Deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets an array of resources that were detached during the most
        /// recent update.
        /// </summary>
        [JsonProperty(PropertyName = "properties.detachedResources")]
        public IList<ResourceReference> DetachedResources { get; private set; }

        /// <summary>
        /// Gets an array of resources that were deleted during the most recent
        /// update.
        /// </summary>
        [JsonProperty(PropertyName = "properties.deletedResources")]
        public IList<ResourceReference> DeletedResources { get; private set; }

        /// <summary>
        /// Gets an array of resources that failed to reach goal state during
        /// the most recent update.
        /// </summary>
        [JsonProperty(PropertyName = "properties.failedResources")]
        public IList<ResourceReferenceExtended> FailedResources { get; private set; }

        /// <summary>
        /// Gets an array of resources currently managed by the deployment
        /// stack.
        /// </summary>
        [JsonProperty(PropertyName = "properties.resources")]
        public IList<ManagedResourceReference> Resources { get; private set; }

        /// <summary>
        /// Gets the resourceId of the deployment resource created by the
        /// deployment stack.
        /// </summary>
        [JsonProperty(PropertyName = "properties.deploymentId")]
        public string DeploymentId { get; private set; }

        /// <summary>
        /// Gets the outputs of the underlying deployment.
        /// </summary>
        [JsonProperty(PropertyName = "properties.outputs")]
        public object Outputs { get; private set; }

        /// <summary>
        /// Gets the duration of the deployment stack update.
        /// </summary>
        [JsonProperty(PropertyName = "properties.duration")]
        public string Duration { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ActionOnUnmanage == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ActionOnUnmanage");
            }
            if (DenySettings == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DenySettings");
            }
            if (ParametersLink != null)
            {
                ParametersLink.Validate();
            }
            if (ActionOnUnmanage != null)
            {
                ActionOnUnmanage.Validate();
            }
            if (Description != null)
            {
                if (Description.Length > 4096)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 4096);
                }
            }
        }
    }
}
