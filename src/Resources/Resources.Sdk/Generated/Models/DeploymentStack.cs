// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Resources.Models
{
    using System.Linq;

    /// <summary>
    /// Deployment stack object.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class DeploymentStack : AzureResourceBase
    {
        /// <summary>
        /// Initializes a new instance of the DeploymentStack class.
        /// </summary>
        public DeploymentStack()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeploymentStack class.
        /// </summary>

        /// <param name="id">String Id used to locate any resource on Azure.
        /// </param>

        /// <param name="name">Name of this resource.
        /// </param>

        /// <param name="type">Type of this resource.
        /// </param>

        /// <param name="systemData">Azure Resource Manager metadata containing createdBy and modifiedBy
        /// information.
        /// </param>

        /// <param name="location">The location of the deployment stack. It cannot be changed after creation.
        /// It must be one of the supported Azure locations.
        /// </param>

        /// <param name="tags">Deployment stack resource tags.
        /// </param>

        /// <param name="denySettings">Defines how resources deployed by the stack are locked.
        /// </param>

        /// <param name="error">Common error response for all Azure Resource Manager APIs to return error
        /// details for failed operations. (This also follows the OData error response
        /// format.).
        /// </param>

        /// <param name="template">The template content. You use this element when you want to pass the
        /// template syntax directly in the request rather than link to an existing
        /// template. It can be a JObject or well-formed JSON string. Use either the
        /// templateLink property or the template property, but not both.
        /// </param>

        /// <param name="templateLink">The URI of the template. Use either the templateLink property or the
        /// template property, but not both.
        /// </param>

        /// <param name="parameters">Name and value pairs that define the deployment parameters for the
        /// template. Use this element when providing the parameter values directly in
        /// the request, rather than linking to an existing parameter file. Use either
        /// the parametersLink property or the parameters property, but not both. It
        /// can be a JObject or a well formed JSON string.
        /// </param>

        /// <param name="parametersLink">The URI of parameters file. Use this element to link to an existing
        /// parameters file. Use either the parametersLink property or the parameters
        /// property, but not both.
        /// </param>

        /// <param name="actionOnUnmanage">Defines the behavior of resources that are not managed immediately after
        /// the stack is updated.
        /// </param>

        /// <param name="debugSetting">The debug setting of the deployment.
        /// </param>

        /// <param name="deploymentScope">The scope at which the initial deployment should be created. If a scope is
        /// not specified, it will default to the scope of the deployment stack. Valid
        /// scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroupId}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group
        /// (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;).
        /// </param>

        /// <param name="description">Deployment stack description.
        /// </param>

        /// <param name="provisioningState">State of the deployment stack.
        /// Possible values include: &#39;Creating&#39;, &#39;Validating&#39;, &#39;Waiting&#39;, &#39;Deploying&#39;,
        /// &#39;Canceling&#39;, &#39;Locking&#39;, &#39;DeletingResources&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;,
        /// &#39;Canceled&#39;, &#39;Deleting&#39;</param>

        /// <param name="detachedResources">An array of resources that were detached during the most recent update.
        /// </param>

        /// <param name="deletedResources">An array of resources that were deleted during the most recent update.
        /// </param>

        /// <param name="failedResources">An array of resources that failed to reach goal state during the most
        /// recent update.
        /// </param>

        /// <param name="resources">An array of resources currently managed by the deployment stack.
        /// </param>

        /// <param name="deploymentId">The resourceId of the deployment resource created by the deployment stack.
        /// </param>

        /// <param name="outputs">The outputs of the underlying deployment.
        /// </param>

        /// <param name="duration">The duration of the deployment stack update.
        /// </param>
        public DeploymentStack(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), DenySettings denySettings = default(DenySettings), ErrorResponse error = default(ErrorResponse), object template = default(object), DeploymentStacksTemplateLink templateLink = default(DeploymentStacksTemplateLink), object parameters = default(object), DeploymentStacksParametersLink parametersLink = default(DeploymentStacksParametersLink), DeploymentStackPropertiesActionOnUnmanage actionOnUnmanage = default(DeploymentStackPropertiesActionOnUnmanage), DeploymentStacksDebugSetting debugSetting = default(DeploymentStacksDebugSetting), string deploymentScope = default(string), string description = default(string), string provisioningState = default(string), System.Collections.Generic.IList<ResourceReference> detachedResources = default(System.Collections.Generic.IList<ResourceReference>), System.Collections.Generic.IList<ResourceReference> deletedResources = default(System.Collections.Generic.IList<ResourceReference>), System.Collections.Generic.IList<ResourceReferenceExtended> failedResources = default(System.Collections.Generic.IList<ResourceReferenceExtended>), System.Collections.Generic.IList<ManagedResourceReference> resources = default(System.Collections.Generic.IList<ManagedResourceReference>), string deploymentId = default(string), object outputs = default(object), string duration = default(string))

        : base(id, name, type, systemData)
        {
            this.Location = location;
            this.Tags = tags;
            this.DenySettings = denySettings;
            this.Error = error;
            this.Template = template;
            this.TemplateLink = templateLink;
            this.Parameters = parameters;
            this.ParametersLink = parametersLink;
            this.ActionOnUnmanage = actionOnUnmanage;
            this.DebugSetting = debugSetting;
            this.DeploymentScope = deploymentScope;
            this.Description = description;
            this.ProvisioningState = provisioningState;
            this.DetachedResources = detachedResources;
            this.DeletedResources = deletedResources;
            this.FailedResources = failedResources;
            this.Resources = resources;
            this.DeploymentId = deploymentId;
            this.Outputs = outputs;
            this.Duration = duration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the location of the deployment stack. It cannot be changed
        /// after creation. It must be one of the supported Azure locations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location {get; set; }

        /// <summary>
        /// Gets or sets deployment stack resource tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets or sets defines how resources deployed by the stack are locked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.denySettings")]
        public DenySettings DenySettings {get; set; }

        /// <summary>
        /// Gets or sets common error response for all Azure Resource Manager APIs to
        /// return error details for failed operations. (This also follows the OData
        /// error response format.).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.error")]
        public ErrorResponse Error {get; set; }

        /// <summary>
        /// Gets or sets the template content. You use this element when you want to
        /// pass the template syntax directly in the request rather than link to an
        /// existing template. It can be a JObject or well-formed JSON string. Use
        /// either the templateLink property or the template property, but not both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.template")]
        public object Template {get; set; }

        /// <summary>
        /// Gets or sets the URI of the template. Use either the templateLink property
        /// or the template property, but not both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.templateLink")]
        public DeploymentStacksTemplateLink TemplateLink {get; set; }

        /// <summary>
        /// Gets or sets name and value pairs that define the deployment parameters for
        /// the template. Use this element when providing the parameter values directly
        /// in the request, rather than linking to an existing parameter file. Use
        /// either the parametersLink property or the parameters property, but not
        /// both. It can be a JObject or a well formed JSON string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.parameters")]
        public object Parameters {get; set; }

        /// <summary>
        /// Gets or sets the URI of parameters file. Use this element to link to an
        /// existing parameters file. Use either the parametersLink property or the
        /// parameters property, but not both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.parametersLink")]
        public DeploymentStacksParametersLink ParametersLink {get; set; }

        /// <summary>
        /// Gets or sets defines the behavior of resources that are not managed
        /// immediately after the stack is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.actionOnUnmanage")]
        public DeploymentStackPropertiesActionOnUnmanage ActionOnUnmanage {get; set; }

        /// <summary>
        /// Gets or sets the debug setting of the deployment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.debugSetting")]
        public DeploymentStacksDebugSetting DebugSetting {get; set; }

        /// <summary>
        /// Gets or sets the scope at which the initial deployment should be created.
        /// If a scope is not specified, it will default to the scope of the deployment
        /// stack. Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroupId}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group
        /// (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.deploymentScope")]
        public string DeploymentScope {get; set; }

        /// <summary>
        /// Gets or sets deployment stack description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets state of the deployment stack. Possible values include: &#39;Creating&#39;, &#39;Validating&#39;, &#39;Waiting&#39;, &#39;Deploying&#39;, &#39;Canceling&#39;, &#39;Locking&#39;, &#39;DeletingResources&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;Deleting&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets an array of resources that were detached during the most recent
        /// update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.detachedResources")]
        public System.Collections.Generic.IList<ResourceReference> DetachedResources {get; private set; }

        /// <summary>
        /// Gets an array of resources that were deleted during the most recent update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.deletedResources")]
        public System.Collections.Generic.IList<ResourceReference> DeletedResources {get; private set; }

        /// <summary>
        /// Gets an array of resources that failed to reach goal state during the most
        /// recent update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.failedResources")]
        public System.Collections.Generic.IList<ResourceReferenceExtended> FailedResources {get; private set; }

        /// <summary>
        /// Gets an array of resources currently managed by the deployment stack.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resources")]
        public System.Collections.Generic.IList<ManagedResourceReference> Resources {get; private set; }

        /// <summary>
        /// Gets the resourceId of the deployment resource created by the deployment
        /// stack.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.deploymentId")]
        public string DeploymentId {get; private set; }

        /// <summary>
        /// Gets the outputs of the underlying deployment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.outputs")]
        public object Outputs {get; private set; }

        /// <summary>
        /// Gets the duration of the deployment stack update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.duration")]
        public string Duration {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.DenySettings != null)
            {
                this.DenySettings.Validate();
            }




            if (this.ParametersLink != null)
            {
                this.ParametersLink.Validate();
            }
            if (this.ActionOnUnmanage != null)
            {
                this.ActionOnUnmanage.Validate();
            }


            if (this.Description != null)
            {
                if (this.Description.Length > 4096)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Description", 4096);
                }
            }








        }
    }
}