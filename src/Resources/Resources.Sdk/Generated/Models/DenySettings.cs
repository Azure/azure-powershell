// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Resources.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines how resources deployed by the deployment stack are locked.
    /// </summary>
    public partial class DenySettings
    {
        /// <summary>
        /// Initializes a new instance of the DenySettings class.
        /// </summary>
        public DenySettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DenySettings class.
        /// </summary>
        /// <param name="mode">denySettings Mode. Possible values include:
        /// 'denyDelete', 'denyWriteAndDelete', 'none'</param>
        /// <param name="excludedPrincipals">List of AAD principal IDs excluded
        /// from the lock. Up to 5 principals are permitted.</param>
        /// <param name="excludedActions">List of role-based management
        /// operations that are excluded from the denySettings. Up to 200
        /// actions are permitted. If the denySetting mode is set to
        /// 'denyWriteAndDelete', then the following actions are automatically
        /// appended to 'excludedActions': '*/read' and
        /// 'Microsoft.Authorization/locks/delete'. If the denySetting mode is
        /// set to 'denyDelete', then the following actions are automatically
        /// appended to 'excludedActions':
        /// 'Microsoft.Authorization/locks/delete'. Duplicate actions will be
        /// removed.</param>
        /// <param name="applyToChildScopes">DenySettings will be applied to
        /// child scopes.</param>
        public DenySettings(string mode = default(string), IList<string> excludedPrincipals = default(IList<string>), IList<string> excludedActions = default(IList<string>), bool? applyToChildScopes = default(bool?))
        {
            Mode = mode;
            ExcludedPrincipals = excludedPrincipals;
            ExcludedActions = excludedActions;
            ApplyToChildScopes = applyToChildScopes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets denySettings Mode. Possible values include:
        /// 'denyDelete', 'denyWriteAndDelete', 'none'
        /// </summary>
        [JsonProperty(PropertyName = "mode")]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or sets list of AAD principal IDs excluded from the lock. Up
        /// to 5 principals are permitted.
        /// </summary>
        [JsonProperty(PropertyName = "excludedPrincipals")]
        public IList<string> ExcludedPrincipals { get; set; }

        /// <summary>
        /// Gets or sets list of role-based management operations that are
        /// excluded from the denySettings. Up to 200 actions are permitted. If
        /// the denySetting mode is set to 'denyWriteAndDelete', then the
        /// following actions are automatically appended to 'excludedActions':
        /// '*/read' and 'Microsoft.Authorization/locks/delete'. If the
        /// denySetting mode is set to 'denyDelete', then the following actions
        /// are automatically appended to 'excludedActions':
        /// 'Microsoft.Authorization/locks/delete'. Duplicate actions will be
        /// removed.
        /// </summary>
        [JsonProperty(PropertyName = "excludedActions")]
        public IList<string> ExcludedActions { get; set; }

        /// <summary>
        /// Gets or sets denySettings will be applied to child scopes.
        /// </summary>
        [JsonProperty(PropertyName = "applyToChildScopes")]
        public bool? ApplyToChildScopes { get; set; }

    }
}
