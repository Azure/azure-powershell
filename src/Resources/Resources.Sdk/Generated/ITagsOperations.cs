// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Resources
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// TagsOperations operations.
    /// </summary>
    public partial interface ITagsOperations
    {
        /// <summary>
        /// This operation allows deleting a value from the list of predefined values
        /// for an existing predefined tag name. The value being deleted must not be in
        /// use as a tag value for the given tag name for any resource.
        /// </summary>
        /// <remarks>
        /// This operation allows deleting a value from the list of predefined values
        /// for an existing predefined tag name. The value being deleted must not be in
        /// use as a tag value for the given tag name for any resource.
        /// </remarks>
        /// <param name='tagName'>
        /// The name of the tag.
        /// </param>
        /// <param name='tagValue'>
        /// The value of the tag to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> DeleteValueWithHttpMessagesAsync(string tagName, string tagValue, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation allows adding a value to the list of predefined values for
        /// an existing predefined tag name. A tag value can have a maximum of 256
        /// characters.
        /// </summary>
        /// <remarks>
        /// This operation allows adding a value to the list of predefined values for
        /// an existing predefined tag name. A tag value can have a maximum of 256
        /// characters.
        /// </remarks>
        /// <param name='tagName'>
        /// The name of the tag.
        /// </param>
        /// <param name='tagValue'>
        /// The value of the tag to create.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<TagValue>> CreateOrUpdateValueWithHttpMessagesAsync(string tagName, string tagValue, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation allows adding a name to the list of predefined tag names for
        /// the given subscription. A tag name can have a maximum of 512 characters and
        /// is case-insensitive. Tag names cannot have the following prefixes which are
        /// reserved for Azure use: &#39;microsoft&#39;, &#39;azure&#39;, &#39;windows&#39;.
        /// </summary>
        /// <remarks>
        /// This operation allows adding a name to the list of predefined tag names for
        /// the given subscription. A tag name can have a maximum of 512 characters and
        /// is case-insensitive. Tag names cannot have the following prefixes which are
        /// reserved for Azure use: &#39;microsoft&#39;, &#39;azure&#39;, &#39;windows&#39;.
        /// </remarks>
        /// <param name='tagName'>
        /// The name of the tag to create.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<TagDetails>> CreateOrUpdateWithHttpMessagesAsync(string tagName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation allows deleting a name from the list of predefined tag names
        /// for the given subscription. The name being deleted must not be in use as a
        /// tag name for any resource. All predefined values for the given name must
        /// have already been deleted.
        /// </summary>
        /// <remarks>
        /// This operation allows deleting a name from the list of predefined tag names
        /// for the given subscription. The name being deleted must not be in use as a
        /// tag name for any resource. All predefined values for the given name must
        /// have already been deleted.
        /// </remarks>
        /// <param name='tagName'>
        /// The name of the tag.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> DeleteWithHttpMessagesAsync(string tagName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation performs a union of predefined tags, resource tags, resource
        /// group tags and subscription tags, and returns a summary of usage for each
        /// tag name and value under the given subscription. In case of a large number
        /// of tags, this operation may return a previously cached result.
        /// </summary>
        /// <remarks>
        /// This operation performs a union of predefined tags, resource tags, resource
        /// group tags and subscription tags, and returns a summary of usage for each
        /// tag name and value under the given subscription. In case of a large number
        /// of tags, this operation may return a previously cached result.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<TagDetails>>> ListWithHttpMessagesAsync(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation allows adding or replacing the entire set of tags on the
        /// specified resource or subscription. The specified entity can have a maximum
        /// of 50 tags.
        /// </summary>
        /// <remarks>
        /// This operation allows adding or replacing the entire set of tags on the
        /// specified resource or subscription. The specified entity can have a maximum
        /// of 50 tags.
        /// </remarks>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='parameters'>
        /// 
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<TagsResource>> CreateOrUpdateAtScopeWithHttpMessagesAsync(string scope, TagsResource parameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation allows replacing, merging or selectively deleting tags on
        /// the specified resource or subscription. The specified entity can have a
        /// maximum of 50 tags at the end of the operation. The &#39;replace&#39; option
        /// replaces the entire set of existing tags with a new set. The &#39;merge&#39; option
        /// allows adding tags with new names and updating the values of tags with
        /// existing names. The &#39;delete&#39; option allows selectively deleting tags based
        /// on given names or name/value pairs.
        /// </summary>
        /// <remarks>
        /// This operation allows replacing, merging or selectively deleting tags on
        /// the specified resource or subscription. The specified entity can have a
        /// maximum of 50 tags at the end of the operation. The &#39;replace&#39; option
        /// replaces the entire set of existing tags with a new set. The &#39;merge&#39; option
        /// allows adding tags with new names and updating the values of tags with
        /// existing names. The &#39;delete&#39; option allows selectively deleting tags based
        /// on given names or name/value pairs.
        /// </remarks>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='parameters'>
        /// 
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<TagsResource>> UpdateAtScopeWithHttpMessagesAsync(string scope, TagsPatchResource parameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the entire set of tags on a resource or subscription.
        /// </summary>
        /// <remarks>
        /// Gets the entire set of tags on a resource or subscription.
        /// </remarks>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<TagsResource>> GetAtScopeWithHttpMessagesAsync(string scope, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes the entire set of tags on a resource or subscription.
        /// </summary>
        /// <remarks>
        /// Deletes the entire set of tags on a resource or subscription.
        /// </remarks>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> DeleteAtScopeWithHttpMessagesAsync(string scope, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation performs a union of predefined tags, resource tags, resource
        /// group tags and subscription tags, and returns a summary of usage for each
        /// tag name and value under the given subscription. In case of a large number
        /// of tags, this operation may return a previously cached result.
        /// </summary>
        /// <remarks>
        /// This operation performs a union of predefined tags, resource tags, resource
        /// group tags and subscription tags, and returns a summary of usage for each
        /// tag name and value under the given subscription. In case of a large number
        /// of tags, this operation may return a previously cached result.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<TagDetails>>> ListNextWithHttpMessagesAsync(string nextPageLink, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }
}