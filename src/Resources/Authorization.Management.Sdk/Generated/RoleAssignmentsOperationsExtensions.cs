// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Authorization
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for RoleAssignmentsOperations
    /// </summary>
    public static partial class RoleAssignmentsOperationsExtensions
    {
        /// <summary>
        /// List all role assignments that apply to a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='tenantId'>
        /// Tenant ID for cross-tenant request
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RoleAssignment> ListForSubscription(this IRoleAssignmentsOperations operations, Microsoft.Rest.Azure.OData.ODataQuery<RoleAssignmentFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<RoleAssignmentFilter>), string tenantId = default(string))
        {
                return ((IRoleAssignmentsOperations)operations).ListForSubscriptionAsync(odataQuery, tenantId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all role assignments that apply to a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='tenantId'>
        /// Tenant ID for cross-tenant request
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RoleAssignment>> ListForSubscriptionAsync(this IRoleAssignmentsOperations operations, Microsoft.Rest.Azure.OData.ODataQuery<RoleAssignmentFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<RoleAssignmentFilter>), string tenantId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForSubscriptionWithHttpMessagesAsync(odataQuery, tenantId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List all role assignments that apply to a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='tenantId'>
        /// Tenant ID for cross-tenant request
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RoleAssignment> ListForResourceGroup(this IRoleAssignmentsOperations operations, string resourceGroupName, Microsoft.Rest.Azure.OData.ODataQuery<RoleAssignmentFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<RoleAssignmentFilter>), string tenantId = default(string))
        {
                return ((IRoleAssignmentsOperations)operations).ListForResourceGroupAsync(resourceGroupName, odataQuery, tenantId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all role assignments that apply to a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='tenantId'>
        /// Tenant ID for cross-tenant request
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RoleAssignment>> ListForResourceGroupAsync(this IRoleAssignmentsOperations operations, string resourceGroupName, Microsoft.Rest.Azure.OData.ODataQuery<RoleAssignmentFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<RoleAssignmentFilter>), string tenantId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForResourceGroupWithHttpMessagesAsync(resourceGroupName, odataQuery, tenantId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List all role assignments that apply to a resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceProviderNamespace'>
        /// The namespace of the resource provider.
        /// </param>
        /// <param name='resourceType'>
        /// The resource type name. For example the type name of a web app is &#39;sites&#39;
        /// (from Microsoft.Web/sites).
        /// </param>
        /// <param name='resourceName'>
        /// The resource name.
        /// </param>
        /// <param name='tenantId'>
        /// Tenant ID for cross-tenant request
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RoleAssignment> ListForResource(this IRoleAssignmentsOperations operations, string resourceGroupName, string resourceProviderNamespace, string resourceType, string resourceName, Microsoft.Rest.Azure.OData.ODataQuery<RoleAssignmentFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<RoleAssignmentFilter>), string tenantId = default(string))
        {
                return ((IRoleAssignmentsOperations)operations).ListForResourceAsync(resourceGroupName, resourceProviderNamespace, resourceType, resourceName, odataQuery, tenantId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all role assignments that apply to a resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='resourceProviderNamespace'>
        /// The namespace of the resource provider.
        /// </param>
        /// <param name='resourceType'>
        /// The resource type name. For example the type name of a web app is &#39;sites&#39;
        /// (from Microsoft.Web/sites).
        /// </param>
        /// <param name='resourceName'>
        /// The resource name.
        /// </param>
        /// <param name='tenantId'>
        /// Tenant ID for cross-tenant request
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RoleAssignment>> ListForResourceAsync(this IRoleAssignmentsOperations operations, string resourceGroupName, string resourceProviderNamespace, string resourceType, string resourceName, Microsoft.Rest.Azure.OData.ODataQuery<RoleAssignmentFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<RoleAssignmentFilter>), string tenantId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForResourceWithHttpMessagesAsync(resourceGroupName, resourceProviderNamespace, resourceType, resourceName, odataQuery, tenantId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a role assignment by scope and name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='roleAssignmentName'>
        /// The name of the role assignment. It can be any valid GUID.
        /// </param>
        /// <param name='tenantId'>
        /// Tenant ID for cross-tenant request
        /// </param>
        public static RoleAssignment Get(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName, string tenantId = default(string))
        {
                return ((IRoleAssignmentsOperations)operations).GetAsync(scope, roleAssignmentName, tenantId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a role assignment by scope and name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='roleAssignmentName'>
        /// The name of the role assignment. It can be any valid GUID.
        /// </param>
        /// <param name='tenantId'>
        /// Tenant ID for cross-tenant request
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RoleAssignment> GetAsync(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName, string tenantId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(scope, roleAssignmentName, tenantId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update a role assignment by scope and name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='roleAssignmentName'>
        /// The name of the role assignment. It can be any valid GUID.
        /// </param>
        public static RoleAssignment Create(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName, RoleAssignmentCreateParameters parameters)
        {
                return ((IRoleAssignmentsOperations)operations).CreateAsync(scope, roleAssignmentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a role assignment by scope and name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='roleAssignmentName'>
        /// The name of the role assignment. It can be any valid GUID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RoleAssignment> CreateAsync(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName, RoleAssignmentCreateParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(scope, roleAssignmentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a role assignment by scope and name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='roleAssignmentName'>
        /// The name of the role assignment. It can be any valid GUID.
        /// </param>
        /// <param name='tenantId'>
        /// Tenant ID for cross-tenant request
        /// </param>
        public static RoleAssignment Delete(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName, string tenantId = default(string))
        {
                return ((IRoleAssignmentsOperations)operations).DeleteAsync(scope, roleAssignmentName, tenantId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a role assignment by scope and name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='roleAssignmentName'>
        /// The name of the role assignment. It can be any valid GUID.
        /// </param>
        /// <param name='tenantId'>
        /// Tenant ID for cross-tenant request
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RoleAssignment> DeleteAsync(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName, string tenantId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(scope, roleAssignmentName, tenantId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Validate a role assignment create or update operation by scope and name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='roleAssignmentName'>
        /// The name of the role assignment. It can be any valid GUID.
        /// </param>
        public static ValidationResponse Validate(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName, RoleAssignmentCreateParameters parameters)
        {
                return ((IRoleAssignmentsOperations)operations).ValidateAsync(scope, roleAssignmentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Validate a role assignment create or update operation by scope and name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='roleAssignmentName'>
        /// The name of the role assignment. It can be any valid GUID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ValidationResponse> ValidateAsync(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName, RoleAssignmentCreateParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ValidateWithHttpMessagesAsync(scope, roleAssignmentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List all role assignments that apply to a scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='tenantId'>
        /// Tenant ID for cross-tenant request
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RoleAssignment> ListForScope(this IRoleAssignmentsOperations operations, string scope, Microsoft.Rest.Azure.OData.ODataQuery<RoleAssignmentFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<RoleAssignmentFilter>), string tenantId = default(string))
        {
                return ((IRoleAssignmentsOperations)operations).ListForScopeAsync(scope, odataQuery, tenantId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all role assignments that apply to a scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='tenantId'>
        /// Tenant ID for cross-tenant request
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RoleAssignment>> ListForScopeAsync(this IRoleAssignmentsOperations operations, string scope, Microsoft.Rest.Azure.OData.ODataQuery<RoleAssignmentFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<RoleAssignmentFilter>), string tenantId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForScopeWithHttpMessagesAsync(scope, odataQuery, tenantId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a role assignment by ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleAssignmentId'>
        /// The fully qualified ID of the role assignment including scope, resource
        /// name, and resource type. Format:
        /// /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
        /// Example:
        /// /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;
        /// </param>
        /// <param name='tenantId'>
        /// Tenant ID for cross-tenant request
        /// </param>
        public static RoleAssignment GetById(this IRoleAssignmentsOperations operations, string roleAssignmentId, string tenantId = default(string))
        {
                return ((IRoleAssignmentsOperations)operations).GetByIdAsync(roleAssignmentId, tenantId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a role assignment by ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleAssignmentId'>
        /// The fully qualified ID of the role assignment including scope, resource
        /// name, and resource type. Format:
        /// /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
        /// Example:
        /// /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;
        /// </param>
        /// <param name='tenantId'>
        /// Tenant ID for cross-tenant request
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RoleAssignment> GetByIdAsync(this IRoleAssignmentsOperations operations, string roleAssignmentId, string tenantId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetByIdWithHttpMessagesAsync(roleAssignmentId, tenantId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update a role assignment by ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleAssignmentId'>
        /// The fully qualified ID of the role assignment including scope, resource
        /// name, and resource type. Format:
        /// /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
        /// Example:
        /// /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;
        /// </param>
        public static RoleAssignment CreateById(this IRoleAssignmentsOperations operations, string roleAssignmentId, RoleAssignmentCreateParameters parameters)
        {
                return ((IRoleAssignmentsOperations)operations).CreateByIdAsync(roleAssignmentId, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a role assignment by ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleAssignmentId'>
        /// The fully qualified ID of the role assignment including scope, resource
        /// name, and resource type. Format:
        /// /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
        /// Example:
        /// /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RoleAssignment> CreateByIdAsync(this IRoleAssignmentsOperations operations, string roleAssignmentId, RoleAssignmentCreateParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateByIdWithHttpMessagesAsync(roleAssignmentId, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a role assignment by ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleAssignmentId'>
        /// The fully qualified ID of the role assignment including scope, resource
        /// name, and resource type. Format:
        /// /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
        /// Example:
        /// /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;
        /// </param>
        /// <param name='tenantId'>
        /// Tenant ID for cross-tenant request
        /// </param>
        public static RoleAssignment DeleteById(this IRoleAssignmentsOperations operations, string roleAssignmentId, string tenantId = default(string))
        {
                return ((IRoleAssignmentsOperations)operations).DeleteByIdAsync(roleAssignmentId, tenantId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a role assignment by ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleAssignmentId'>
        /// The fully qualified ID of the role assignment including scope, resource
        /// name, and resource type. Format:
        /// /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
        /// Example:
        /// /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;
        /// </param>
        /// <param name='tenantId'>
        /// Tenant ID for cross-tenant request
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RoleAssignment> DeleteByIdAsync(this IRoleAssignmentsOperations operations, string roleAssignmentId, string tenantId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteByIdWithHttpMessagesAsync(roleAssignmentId, tenantId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Validate a role assignment create or update operation by ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleAssignmentId'>
        /// The fully qualified ID of the role assignment including scope, resource
        /// name, and resource type. Format:
        /// /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
        /// Example:
        /// /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;
        /// </param>
        public static ValidationResponse ValidateById(this IRoleAssignmentsOperations operations, string roleAssignmentId, RoleAssignmentCreateParameters parameters)
        {
                return ((IRoleAssignmentsOperations)operations).ValidateByIdAsync(roleAssignmentId, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Validate a role assignment create or update operation by ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleAssignmentId'>
        /// The fully qualified ID of the role assignment including scope, resource
        /// name, and resource type. Format:
        /// /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
        /// Example:
        /// /subscriptions/&lt;SUB_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP&gt;/providers/Microsoft.Authorization/roleAssignments/&lt;ROLE_ASSIGNMENT_NAME&gt;
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ValidationResponse> ValidateByIdAsync(this IRoleAssignmentsOperations operations, string roleAssignmentId, RoleAssignmentCreateParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ValidateByIdWithHttpMessagesAsync(roleAssignmentId, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List all role assignments that apply to a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RoleAssignment> ListForSubscriptionNext(this IRoleAssignmentsOperations operations, string nextPageLink)
        {
                return ((IRoleAssignmentsOperations)operations).ListForSubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all role assignments that apply to a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RoleAssignment>> ListForSubscriptionNextAsync(this IRoleAssignmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForSubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List all role assignments that apply to a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RoleAssignment> ListForResourceGroupNext(this IRoleAssignmentsOperations operations, string nextPageLink)
        {
                return ((IRoleAssignmentsOperations)operations).ListForResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all role assignments that apply to a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RoleAssignment>> ListForResourceGroupNextAsync(this IRoleAssignmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List all role assignments that apply to a resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RoleAssignment> ListForResourceNext(this IRoleAssignmentsOperations operations, string nextPageLink)
        {
                return ((IRoleAssignmentsOperations)operations).ListForResourceNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all role assignments that apply to a resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RoleAssignment>> ListForResourceNextAsync(this IRoleAssignmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForResourceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List all role assignments that apply to a scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RoleAssignment> ListForScopeNext(this IRoleAssignmentsOperations operations, string nextPageLink)
        {
                return ((IRoleAssignmentsOperations)operations).ListForScopeNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all role assignments that apply to a scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RoleAssignment>> ListForScopeNextAsync(this IRoleAssignmentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForScopeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
