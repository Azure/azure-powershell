// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Authorization
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for RoleDefinitionsOperations
    /// </summary>
    public static partial class RoleDefinitionsOperationsExtensions
    {
        /// <summary>
        /// Deletes a role definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The ID of the role definition to delete.
        /// </param>
        public static RoleDefinition Delete(this IRoleDefinitionsOperations operations, string scope, string roleDefinitionId)
        {
                return ((IRoleDefinitionsOperations)operations).DeleteAsync(scope, roleDefinitionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a role definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The ID of the role definition to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RoleDefinition> DeleteAsync(this IRoleDefinitionsOperations operations, string scope, string roleDefinitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(scope, roleDefinitionId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get role definition by ID (GUID).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The ID of the role definition.
        /// </param>
        public static RoleDefinition Get(this IRoleDefinitionsOperations operations, string scope, string roleDefinitionId)
        {
                return ((IRoleDefinitionsOperations)operations).GetAsync(scope, roleDefinitionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get role definition by ID (GUID).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The ID of the role definition.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RoleDefinition> GetAsync(this IRoleDefinitionsOperations operations, string scope, string roleDefinitionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(scope, roleDefinitionId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a role definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The ID of the role definition.
        /// </param>
        public static RoleDefinition CreateOrUpdate(this IRoleDefinitionsOperations operations, string scope, string roleDefinitionId, RoleDefinition roleDefinition)
        {
                return ((IRoleDefinitionsOperations)operations).CreateOrUpdateAsync(scope, roleDefinitionId, roleDefinition).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a role definition.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The ID of the role definition.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RoleDefinition> CreateOrUpdateAsync(this IRoleDefinitionsOperations operations, string scope, string roleDefinitionId, RoleDefinition roleDefinition, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(scope, roleDefinitionId, roleDefinition, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all role definitions that are applicable at scope and above.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RoleDefinition> List(this IRoleDefinitionsOperations operations, string scope, Microsoft.Rest.Azure.OData.ODataQuery<RoleDefinitionFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<RoleDefinitionFilter>))
        {
                return ((IRoleDefinitionsOperations)operations).ListAsync(scope, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all role definitions that are applicable at scope and above.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RoleDefinition>> ListAsync(this IRoleDefinitionsOperations operations, string scope, Microsoft.Rest.Azure.OData.ODataQuery<RoleDefinitionFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<RoleDefinitionFilter>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(scope, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a role definition by ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleId'>
        /// The fully qualified role definition ID. Use the format,
        /// /subscriptions/{guid}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}
        /// for subscription level role definitions, or
        /// /providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for
        /// tenant level role definitions.
        /// </param>
        public static RoleDefinition GetById(this IRoleDefinitionsOperations operations, string roleId)
        {
                return ((IRoleDefinitionsOperations)operations).GetByIdAsync(roleId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a role definition by ID.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='roleId'>
        /// The fully qualified role definition ID. Use the format,
        /// /subscriptions/{guid}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}
        /// for subscription level role definitions, or
        /// /providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for
        /// tenant level role definitions.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RoleDefinition> GetByIdAsync(this IRoleDefinitionsOperations operations, string roleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetByIdWithHttpMessagesAsync(roleId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all role definitions that are applicable at scope and above.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<RoleDefinition> ListNext(this IRoleDefinitionsOperations operations, string nextPageLink)
        {
                return ((IRoleDefinitionsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all role definitions that are applicable at scope and above.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<RoleDefinition>> ListNextAsync(this IRoleDefinitionsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
