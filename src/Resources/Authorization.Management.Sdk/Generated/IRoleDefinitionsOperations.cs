// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Authorization
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// RoleDefinitionsOperations operations.
    /// </summary>
    public partial interface IRoleDefinitionsOperations
    {
        /// <summary>
        /// Deletes a role definition.
        /// </summary>
        /// <remarks>
        /// Deletes a role definition.
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The ID of the role definition to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<RoleDefinition>> DeleteWithHttpMessagesAsync(string scope, string roleDefinitionId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get role definition by ID (GUID).
        /// </summary>
        /// <remarks>
        /// Get role definition by ID (GUID).
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The ID of the role definition.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<RoleDefinition>> GetWithHttpMessagesAsync(string scope, string roleDefinitionId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates or updates a role definition.
        /// </summary>
        /// <remarks>
        /// Creates or updates a role definition.
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='roleDefinitionId'>
        /// The ID of the role definition.
        /// </param>
        /// <param name='roleDefinition'>
        /// The values for the role definition.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<RoleDefinition>> CreateOrUpdateWithHttpMessagesAsync(string scope, string roleDefinitionId, RoleDefinition roleDefinition, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all role definitions that are applicable at scope and above.
        /// </summary>
        /// <remarks>
        /// Get all role definitions that are applicable at scope and above.
        /// </remarks>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='scope'>
        /// The scope of the operation or resource. Valid scopes are: subscription
        /// (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<RoleDefinition>>> ListWithHttpMessagesAsync(string scope, Microsoft.Rest.Azure.OData.ODataQuery<RoleDefinitionFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<RoleDefinitionFilter>), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a role definition by ID.
        /// </summary>
        /// <remarks>
        /// Gets a role definition by ID.
        /// </remarks>
        /// <param name='roleId'>
        /// The fully qualified role definition ID. Use the format,
        /// /subscriptions/{guid}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}
        /// for subscription level role definitions, or
        /// /providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for
        /// tenant level role definitions.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<RoleDefinition>> GetByIdWithHttpMessagesAsync(string roleId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all role definitions that are applicable at scope and above.
        /// </summary>
        /// <remarks>
        /// Get all role definitions that are applicable at scope and above.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<RoleDefinition>>> ListNextWithHttpMessagesAsync(string nextPageLink, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }
}