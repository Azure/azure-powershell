// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Authorization.Models
{
    using System.Linq;

    /// <summary>
    /// The role management policy notification rule.
    /// </summary>
    [Newtonsoft.Json.JsonObject("RoleManagementPolicyNotificationRule")]
    public partial class RoleManagementPolicyNotificationRule : RoleManagementPolicyRule
    {
        /// <summary>
        /// Initializes a new instance of the RoleManagementPolicyNotificationRule class.
        /// </summary>
        public RoleManagementPolicyNotificationRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RoleManagementPolicyNotificationRule class.
        /// </summary>

        /// <param name="id">The id of the rule.
        /// </param>

        /// <param name="target">The target of the current rule.
        /// </param>

        /// <param name="notificationType">The type of notification.
        /// Possible values include: &#39;Email&#39;</param>

        /// <param name="notificationLevel">The notification level.
        /// Possible values include: &#39;None&#39;, &#39;Critical&#39;, &#39;All&#39;</param>

        /// <param name="recipientType">The recipient type.
        /// Possible values include: &#39;Requestor&#39;, &#39;Approver&#39;, &#39;Admin&#39;</param>

        /// <param name="notificationRecipients">The list of notification recipients.
        /// </param>

        /// <param name="isDefaultRecipientsEnabled">Determines if the notification will be sent to the recipient type specified
        /// in the policy rule.
        /// </param>
        public RoleManagementPolicyNotificationRule(string id = default(string), RoleManagementPolicyRuleTarget target = default(RoleManagementPolicyRuleTarget), string notificationType = default(string), string notificationLevel = default(string), string recipientType = default(string), System.Collections.Generic.IList<string> notificationRecipients = default(System.Collections.Generic.IList<string>), bool? isDefaultRecipientsEnabled = default(bool?))

        : base(id, target)
        {
            this.NotificationType = notificationType;
            this.NotificationLevel = notificationLevel;
            this.RecipientType = recipientType;
            this.NotificationRecipients = notificationRecipients;
            this.IsDefaultRecipientsEnabled = isDefaultRecipientsEnabled;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the type of notification. Possible values include: &#39;Email&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "notificationType")]
        public string NotificationType {get; set; }

        /// <summary>
        /// Gets or sets the notification level. Possible values include: &#39;None&#39;, &#39;Critical&#39;, &#39;All&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "notificationLevel")]
        public string NotificationLevel {get; set; }

        /// <summary>
        /// Gets or sets the recipient type. Possible values include: &#39;Requestor&#39;, &#39;Approver&#39;, &#39;Admin&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recipientType")]
        public string RecipientType {get; set; }

        /// <summary>
        /// Gets or sets the list of notification recipients.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "notificationRecipients")]
        public System.Collections.Generic.IList<string> NotificationRecipients {get; set; }

        /// <summary>
        /// Gets or sets determines if the notification will be sent to the recipient
        /// type specified in the policy rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isDefaultRecipientsEnabled")]
        public bool? IsDefaultRecipientsEnabled {get; set; }
    }
}