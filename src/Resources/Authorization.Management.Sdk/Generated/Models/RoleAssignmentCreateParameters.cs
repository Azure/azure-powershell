// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Authorization.Models
{
    using System.Linq;

    /// <summary>
    /// Role assignment create parameters.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class RoleAssignmentCreateParameters
    {
        /// <summary>
        /// Initializes a new instance of the RoleAssignmentCreateParameters class.
        /// </summary>
        public RoleAssignmentCreateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RoleAssignmentCreateParameters class.
        /// </summary>

        /// <param name="principalType">The principal type of the assigned principal ID.
        /// Possible values include: &#39;User&#39;, &#39;Group&#39;, &#39;ServicePrincipal&#39;,
        /// &#39;ForeignGroup&#39;</param>

        /// <param name="scope">The role assignment scope.
        /// </param>

        /// <param name="roleDefinitionId">The role definition ID.
        /// </param>

        /// <param name="principalId">The principal ID.
        /// </param>

        /// <param name="description">Description of role assignment
        /// </param>

        /// <param name="condition">The conditions on the role assignment. This limits the resources it can be
        /// assigned to. e.g.:
        /// @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
        /// StringEqualsIgnoreCase &#39;foo_storage_container&#39;
        /// </param>

        /// <param name="conditionVersion">Version of the condition. Currently accepted value is &#39;2.0&#39;
        /// </param>

        /// <param name="createdOn">Time it was created
        /// </param>

        /// <param name="updatedOn">Time it was updated
        /// </param>

        /// <param name="createdBy">Id of the user who created the assignment
        /// </param>

        /// <param name="updatedBy">Id of the user who updated the assignment
        /// </param>

        /// <param name="delegatedManagedIdentityResourceId">Id of the delegated managed identity resource
        /// </param>
        public RoleAssignmentCreateParameters(string roleDefinitionId, string principalId, string principalType = default(string), string scope = default(string), string description = default(string), string condition = default(string), string conditionVersion = default(string), System.DateTime? createdOn = default(System.DateTime?), System.DateTime? updatedOn = default(System.DateTime?), string createdBy = default(string), string updatedBy = default(string), string delegatedManagedIdentityResourceId = default(string))

        {
            this.PrincipalType = principalType;
            this.Scope = scope;
            this.RoleDefinitionId = roleDefinitionId;
            this.PrincipalId = principalId;
            this.Description = description;
            this.Condition = condition;
            this.ConditionVersion = conditionVersion;
            this.CreatedOn = createdOn;
            this.UpdatedOn = updatedOn;
            this.CreatedBy = createdBy;
            this.UpdatedBy = updatedBy;
            this.DelegatedManagedIdentityResourceId = delegatedManagedIdentityResourceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the principal type of the assigned principal ID. Possible values include: &#39;User&#39;, &#39;Group&#39;, &#39;ServicePrincipal&#39;, &#39;ForeignGroup&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.principalType")]
        public string PrincipalType {get; set; }

        /// <summary>
        /// Gets the role assignment scope.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.scope")]
        public string Scope {get; private set; }

        /// <summary>
        /// Gets or sets the role definition ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.roleDefinitionId")]
        public string RoleDefinitionId {get; set; }

        /// <summary>
        /// Gets or sets the principal ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.principalId")]
        public string PrincipalId {get; set; }

        /// <summary>
        /// Gets or sets description of role assignment
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets the conditions on the role assignment. This limits the
        /// resources it can be assigned to. e.g.:
        /// @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
        /// StringEqualsIgnoreCase &#39;foo_storage_container&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.condition")]
        public string Condition {get; set; }

        /// <summary>
        /// Gets or sets version of the condition. Currently accepted value is &#39;2.0&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.conditionVersion")]
        public string ConditionVersion {get; set; }

        /// <summary>
        /// Gets time it was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.createdOn")]
        public System.DateTime? CreatedOn {get; private set; }

        /// <summary>
        /// Gets time it was updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.updatedOn")]
        public System.DateTime? UpdatedOn {get; private set; }

        /// <summary>
        /// Gets id of the user who created the assignment
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.createdBy")]
        public string CreatedBy {get; private set; }

        /// <summary>
        /// Gets id of the user who updated the assignment
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.updatedBy")]
        public string UpdatedBy {get; private set; }

        /// <summary>
        /// Gets or sets id of the delegated managed identity resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.delegatedManagedIdentityResourceId")]
        public string DelegatedManagedIdentityResourceId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.RoleDefinitionId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RoleDefinitionId");
            }
            if (this.PrincipalId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "PrincipalId");
            }










        }
    }
}