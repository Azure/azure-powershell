// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Authorization.Models
{
    using System.Linq;

    /// <summary>
    /// The approval settings.
    /// </summary>
    public partial class ApprovalSettings
    {
        /// <summary>
        /// Initializes a new instance of the ApprovalSettings class.
        /// </summary>
        public ApprovalSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApprovalSettings class.
        /// </summary>

        /// <param name="isApprovalRequired">Determines whether approval is required or not.
        /// </param>

        /// <param name="isApprovalRequiredForExtension">Determines whether approval is required for assignment extension.
        /// </param>

        /// <param name="isRequestorJustificationRequired">Determine whether requestor justification is required.
        /// </param>

        /// <param name="approvalMode">The type of rule
        /// Possible values include: &#39;SingleStage&#39;, &#39;Serial&#39;, &#39;Parallel&#39;, &#39;NoApproval&#39;</param>

        /// <param name="approvalStages">The approval stages of the request.
        /// </param>
        public ApprovalSettings(bool? isApprovalRequired = default(bool?), bool? isApprovalRequiredForExtension = default(bool?), bool? isRequestorJustificationRequired = default(bool?), string approvalMode = default(string), System.Collections.Generic.IList<ApprovalStage> approvalStages = default(System.Collections.Generic.IList<ApprovalStage>))

        {
            this.IsApprovalRequired = isApprovalRequired;
            this.IsApprovalRequiredForExtension = isApprovalRequiredForExtension;
            this.IsRequestorJustificationRequired = isRequestorJustificationRequired;
            this.ApprovalMode = approvalMode;
            this.ApprovalStages = approvalStages;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets determines whether approval is required or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isApprovalRequired")]
        public bool? IsApprovalRequired {get; set; }

        /// <summary>
        /// Gets or sets determines whether approval is required for assignment
        /// extension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isApprovalRequiredForExtension")]
        public bool? IsApprovalRequiredForExtension {get; set; }

        /// <summary>
        /// Gets or sets determine whether requestor justification is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isRequestorJustificationRequired")]
        public bool? IsRequestorJustificationRequired {get; set; }

        /// <summary>
        /// Gets or sets the type of rule Possible values include: &#39;SingleStage&#39;, &#39;Serial&#39;, &#39;Parallel&#39;, &#39;NoApproval&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "approvalMode")]
        public string ApprovalMode {get; set; }

        /// <summary>
        /// Gets or sets the approval stages of the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "approvalStages")]
        public System.Collections.Generic.IList<ApprovalStage> ApprovalStages {get; set; }
    }
}