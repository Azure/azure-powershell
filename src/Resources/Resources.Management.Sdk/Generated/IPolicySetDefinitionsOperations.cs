// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ResourceManager
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// PolicySetDefinitionsOperations operations.
    /// </summary>
    public partial interface IPolicySetDefinitionsOperations
    {
        /// <summary>
        /// This operation creates or updates a policy set definition in the given
        /// subscription with the given name.
        /// </summary>
        /// <remarks>
        /// This operation creates or updates a policy set definition in the given
        /// subscription with the given name.
        /// </remarks>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to create.
        /// </param>
        /// <param name='parameters'>
        /// The policy set definition properties.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<PolicySetDefinition>> CreateOrUpdateWithHttpMessagesAsync(string policySetDefinitionName, PolicySetDefinition parameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation deletes the policy set definition in the given subscription
        /// with the given name.
        /// </summary>
        /// <remarks>
        /// This operation deletes the policy set definition in the given subscription
        /// with the given name.
        /// </remarks>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> DeleteWithHttpMessagesAsync(string policySetDefinitionName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation retrieves the policy set definition in the given
        /// subscription with the given name.
        /// </summary>
        /// <remarks>
        /// This operation retrieves the policy set definition in the given
        /// subscription with the given name.
        /// </remarks>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to get.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<PolicySetDefinition>> GetWithHttpMessagesAsync(string policySetDefinitionName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation retrieves the built-in policy set definition with the given
        /// name.
        /// </summary>
        /// <remarks>
        /// This operation retrieves the built-in policy set definition with the given
        /// name.
        /// </remarks>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to get.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<PolicySetDefinition>> GetBuiltInWithHttpMessagesAsync(string policySetDefinitionName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation retrieves a list of all the policy set definitions in a
        /// given subscription that match the optional given $filter. Valid values for
        /// $filter are: &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy set definitions associated with the subscription, including those
        /// that apply directly or from management groups that contain the given
        /// subscription. If $filter=atExactScope() is provided, the returned list only
        /// includes all policy set definitions that at the given subscription. If
        /// $filter=&#39;policyType -eq {value}&#39; is provided, the returned list only
        /// includes all policy set definitions whose type match the {value}. Possible
        /// policyType values are NotSpecified, BuiltIn and Custom. If
        /// $filter=&#39;category -eq {value}&#39; is provided, the returned list only includes
        /// all policy set definitions whose category match the {value}.
        /// </summary>
        /// <remarks>
        /// This operation retrieves a list of all the policy set definitions in a
        /// given subscription that match the optional given $filter. Valid values for
        /// $filter are: &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy set definitions associated with the subscription, including those
        /// that apply directly or from management groups that contain the given
        /// subscription. If $filter=atExactScope() is provided, the returned list only
        /// includes all policy set definitions that at the given subscription. If
        /// $filter=&#39;policyType -eq {value}&#39; is provided, the returned list only
        /// includes all policy set definitions whose type match the {value}. Possible
        /// policyType values are NotSpecified, BuiltIn and Custom. If
        /// $filter=&#39;category -eq {value}&#39; is provided, the returned list only includes
        /// all policy set definitions whose category match the {value}.
        /// </remarks>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq &#39;{value}&#39;&#39;. If
        /// $filter is not provided, no filtering is performed. If
        /// $filter=atExactScope() is provided, the returned list only includes all
        /// policy set definitions that at the given scope. If $filter=&#39;policyType -eq
        /// {value}&#39; is provided, the returned list only includes all policy set
        /// definitions whose type match the {value}. Possible policyType values are
        /// NotSpecified, BuiltIn, Custom, and Static. If $filter=&#39;category -eq
        /// {value}&#39; is provided, the returned list only includes all policy set
        /// definitions whose category match the {value}.
        /// </param>
        /// <param name='top'>
        /// Maximum number of records to return. When the $top filter is not provided,
        /// it will return 500 records.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<PolicySetDefinition>>> ListWithHttpMessagesAsync(string filter = default(string), int? top = default(int?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation retrieves a list of all the built-in policy set definitions
        /// that match the optional given $filter. If $filter=&#39;category -eq {value}&#39; is
        /// provided, the returned list only includes all built-in policy set
        /// definitions whose category match the {value}.
        /// </summary>
        /// <remarks>
        /// This operation retrieves a list of all the built-in policy set definitions
        /// that match the optional given $filter. If $filter=&#39;category -eq {value}&#39; is
        /// provided, the returned list only includes all built-in policy set
        /// definitions whose category match the {value}.
        /// </remarks>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq &#39;{value}&#39;&#39;. If
        /// $filter is not provided, no filtering is performed. If
        /// $filter=atExactScope() is provided, the returned list only includes all
        /// policy set definitions that at the given scope. If $filter=&#39;policyType -eq
        /// {value}&#39; is provided, the returned list only includes all policy set
        /// definitions whose type match the {value}. Possible policyType values are
        /// NotSpecified, BuiltIn, Custom, and Static. If $filter=&#39;category -eq
        /// {value}&#39; is provided, the returned list only includes all policy set
        /// definitions whose category match the {value}.
        /// </param>
        /// <param name='top'>
        /// Maximum number of records to return. When the $top filter is not provided,
        /// it will return 500 records.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<PolicySetDefinition>>> ListBuiltInWithHttpMessagesAsync(string filter = default(string), int? top = default(int?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation creates or updates a policy set definition in the given
        /// management group with the given name.
        /// </summary>
        /// <remarks>
        /// This operation creates or updates a policy set definition in the given
        /// management group with the given name.
        /// </remarks>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to create.
        /// </param>
        /// <param name='managementGroupId'>
        /// The ID of the management group.
        /// </param>
        /// <param name='parameters'>
        /// The policy set definition properties.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<PolicySetDefinition>> CreateOrUpdateAtManagementGroupWithHttpMessagesAsync(string policySetDefinitionName, string managementGroupId, PolicySetDefinition parameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation deletes the policy set definition in the given management
        /// group with the given name.
        /// </summary>
        /// <remarks>
        /// This operation deletes the policy set definition in the given management
        /// group with the given name.
        /// </remarks>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to delete.
        /// </param>
        /// <param name='managementGroupId'>
        /// The ID of the management group.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse> DeleteAtManagementGroupWithHttpMessagesAsync(string policySetDefinitionName, string managementGroupId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation retrieves the policy set definition in the given management
        /// group with the given name.
        /// </summary>
        /// <remarks>
        /// This operation retrieves the policy set definition in the given management
        /// group with the given name.
        /// </remarks>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to get.
        /// </param>
        /// <param name='managementGroupId'>
        /// The ID of the management group.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<PolicySetDefinition>> GetAtManagementGroupWithHttpMessagesAsync(string policySetDefinitionName, string managementGroupId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation retrieves a list of all the policy set definitions in a
        /// given management group that match the optional given $filter. Valid values
        /// for $filter are: &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy set definitions associated with the management group, including
        /// those that apply directly or from management groups that contain the given
        /// management group. If $filter=atExactScope() is provided, the returned list
        /// only includes all policy set definitions that at the given management
        /// group. If $filter=&#39;policyType -eq {value}&#39; is provided, the returned list
        /// only includes all policy set definitions whose type match the {value}.
        /// Possible policyType values are NotSpecified, BuiltIn and Custom. If
        /// $filter=&#39;category -eq {value}&#39; is provided, the returned list only includes
        /// all policy set definitions whose category match the {value}.
        /// </summary>
        /// <remarks>
        /// This operation retrieves a list of all the policy set definitions in a
        /// given management group that match the optional given $filter. Valid values
        /// for $filter are: &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy set definitions associated with the management group, including
        /// those that apply directly or from management groups that contain the given
        /// management group. If $filter=atExactScope() is provided, the returned list
        /// only includes all policy set definitions that at the given management
        /// group. If $filter=&#39;policyType -eq {value}&#39; is provided, the returned list
        /// only includes all policy set definitions whose type match the {value}.
        /// Possible policyType values are NotSpecified, BuiltIn and Custom. If
        /// $filter=&#39;category -eq {value}&#39; is provided, the returned list only includes
        /// all policy set definitions whose category match the {value}.
        /// </remarks>
        /// <param name='managementGroupId'>
        /// The ID of the management group.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq &#39;{value}&#39;&#39;. If
        /// $filter is not provided, no filtering is performed. If
        /// $filter=atExactScope() is provided, the returned list only includes all
        /// policy set definitions that at the given scope. If $filter=&#39;policyType -eq
        /// {value}&#39; is provided, the returned list only includes all policy set
        /// definitions whose type match the {value}. Possible policyType values are
        /// NotSpecified, BuiltIn, Custom, and Static. If $filter=&#39;category -eq
        /// {value}&#39; is provided, the returned list only includes all policy set
        /// definitions whose category match the {value}.
        /// </param>
        /// <param name='top'>
        /// Maximum number of records to return. When the $top filter is not provided,
        /// it will return 500 records.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<PolicySetDefinition>>> ListByManagementGroupWithHttpMessagesAsync(string managementGroupId, string filter = default(string), int? top = default(int?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation retrieves a list of all the policy set definitions in a
        /// given subscription that match the optional given $filter. Valid values for
        /// $filter are: &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy set definitions associated with the subscription, including those
        /// that apply directly or from management groups that contain the given
        /// subscription. If $filter=atExactScope() is provided, the returned list only
        /// includes all policy set definitions that at the given subscription. If
        /// $filter=&#39;policyType -eq {value}&#39; is provided, the returned list only
        /// includes all policy set definitions whose type match the {value}. Possible
        /// policyType values are NotSpecified, BuiltIn and Custom. If
        /// $filter=&#39;category -eq {value}&#39; is provided, the returned list only includes
        /// all policy set definitions whose category match the {value}.
        /// </summary>
        /// <remarks>
        /// This operation retrieves a list of all the policy set definitions in a
        /// given subscription that match the optional given $filter. Valid values for
        /// $filter are: &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy set definitions associated with the subscription, including those
        /// that apply directly or from management groups that contain the given
        /// subscription. If $filter=atExactScope() is provided, the returned list only
        /// includes all policy set definitions that at the given subscription. If
        /// $filter=&#39;policyType -eq {value}&#39; is provided, the returned list only
        /// includes all policy set definitions whose type match the {value}. Possible
        /// policyType values are NotSpecified, BuiltIn and Custom. If
        /// $filter=&#39;category -eq {value}&#39; is provided, the returned list only includes
        /// all policy set definitions whose category match the {value}.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<PolicySetDefinition>>> ListNextWithHttpMessagesAsync(string nextPageLink, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation retrieves a list of all the built-in policy set definitions
        /// that match the optional given $filter. If $filter=&#39;category -eq {value}&#39; is
        /// provided, the returned list only includes all built-in policy set
        /// definitions whose category match the {value}.
        /// </summary>
        /// <remarks>
        /// This operation retrieves a list of all the built-in policy set definitions
        /// that match the optional given $filter. If $filter=&#39;category -eq {value}&#39; is
        /// provided, the returned list only includes all built-in policy set
        /// definitions whose category match the {value}.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<PolicySetDefinition>>> ListBuiltInNextWithHttpMessagesAsync(string nextPageLink, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation retrieves a list of all the policy set definitions in a
        /// given management group that match the optional given $filter. Valid values
        /// for $filter are: &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy set definitions associated with the management group, including
        /// those that apply directly or from management groups that contain the given
        /// management group. If $filter=atExactScope() is provided, the returned list
        /// only includes all policy set definitions that at the given management
        /// group. If $filter=&#39;policyType -eq {value}&#39; is provided, the returned list
        /// only includes all policy set definitions whose type match the {value}.
        /// Possible policyType values are NotSpecified, BuiltIn and Custom. If
        /// $filter=&#39;category -eq {value}&#39; is provided, the returned list only includes
        /// all policy set definitions whose category match the {value}.
        /// </summary>
        /// <remarks>
        /// This operation retrieves a list of all the policy set definitions in a
        /// given management group that match the optional given $filter. Valid values
        /// for $filter are: &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy set definitions associated with the management group, including
        /// those that apply directly or from management groups that contain the given
        /// management group. If $filter=atExactScope() is provided, the returned list
        /// only includes all policy set definitions that at the given management
        /// group. If $filter=&#39;policyType -eq {value}&#39; is provided, the returned list
        /// only includes all policy set definitions whose type match the {value}.
        /// Possible policyType values are NotSpecified, BuiltIn and Custom. If
        /// $filter=&#39;category -eq {value}&#39; is provided, the returned list only includes
        /// all policy set definitions whose category match the {value}.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<PolicySetDefinition>>> ListByManagementGroupNextWithHttpMessagesAsync(string nextPageLink, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }
}