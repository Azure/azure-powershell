// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.ResourceManager
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for PolicyExemptionsOperations
    /// </summary>
    public static partial class PolicyExemptionsOperationsExtensions
    {
        /// <summary>
        /// This operation deletes a policy exemption, given its name and the scope it
        /// was created in. The scope of a policy exemption is the part of its ID
        /// preceding
        /// &#39;/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}&#39;.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the policy exemption. Valid scopes are: management group
        /// (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group
        /// (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='policyExemptionName'>
        /// The name of the policy exemption to delete.
        /// </param>
        public static void Delete(this IPolicyExemptionsOperations operations, string scope, string policyExemptionName)
        {
                ((IPolicyExemptionsOperations)operations).DeleteAsync(scope, policyExemptionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation deletes a policy exemption, given its name and the scope it
        /// was created in. The scope of a policy exemption is the part of its ID
        /// preceding
        /// &#39;/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}&#39;.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the policy exemption. Valid scopes are: management group
        /// (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group
        /// (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='policyExemptionName'>
        /// The name of the policy exemption to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IPolicyExemptionsOperations operations, string scope, string policyExemptionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(scope, policyExemptionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// This operation creates or updates a policy exemption with the given scope
        /// and name. Policy exemptions apply to all resources contained within their
        /// scope. For example, when you create a policy exemption at resource group
        /// scope for a policy assignment at the same or above level, the exemption
        /// exempts to all applicable resources in the resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the policy exemption. Valid scopes are: management group
        /// (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group
        /// (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='policyExemptionName'>
        /// The name of the policy exemption to delete.
        /// </param>
        public static PolicyExemption CreateOrUpdate(this IPolicyExemptionsOperations operations, string scope, string policyExemptionName, PolicyExemption parameters)
        {
                return ((IPolicyExemptionsOperations)operations).CreateOrUpdateAsync(scope, policyExemptionName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation creates or updates a policy exemption with the given scope
        /// and name. Policy exemptions apply to all resources contained within their
        /// scope. For example, when you create a policy exemption at resource group
        /// scope for a policy assignment at the same or above level, the exemption
        /// exempts to all applicable resources in the resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the policy exemption. Valid scopes are: management group
        /// (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group
        /// (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='policyExemptionName'>
        /// The name of the policy exemption to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PolicyExemption> CreateOrUpdateAsync(this IPolicyExemptionsOperations operations, string scope, string policyExemptionName, PolicyExemption parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(scope, policyExemptionName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation retrieves a single policy exemption, given its name and the
        /// scope it was created at.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the policy exemption. Valid scopes are: management group
        /// (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group
        /// (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='policyExemptionName'>
        /// The name of the policy exemption to delete.
        /// </param>
        public static PolicyExemption Get(this IPolicyExemptionsOperations operations, string scope, string policyExemptionName)
        {
                return ((IPolicyExemptionsOperations)operations).GetAsync(scope, policyExemptionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves a single policy exemption, given its name and the
        /// scope it was created at.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The scope of the policy exemption. Valid scopes are: management group
        /// (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group
        /// (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='policyExemptionName'>
        /// The name of the policy exemption to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PolicyExemption> GetAsync(this IPolicyExemptionsOperations operations, string scope, string policyExemptionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(scope, policyExemptionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation retrieves the list of all policy exemptions associated with
        /// the given subscription that match the optional given $filter. Valid values
        /// for $filter are: &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or
        /// &#39;policyAssignmentId eq &#39;{value}&#39;&#39;. If $filter is not provided, the
        /// unfiltered list includes all policy exemptions associated with the
        /// subscription, including those that apply directly or from management groups
        /// that contain the given subscription, as well as any applied to objects
        /// contained within the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or &#39;policyAssignmentId eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, no filtering is performed. If
        /// $filter is not provided, the unfiltered list includes all policy exemptions
        /// associated with the scope, including those that apply directly or apply
        /// from containing scopes. If $filter=atScope() is provided, the returned list
        /// only includes all policy exemptions that apply to the scope, which is
        /// everything in the unfiltered list except those applied to sub scopes
        /// contained within the given scope. If $filter=atExactScope() is provided,
        /// the returned list only includes all policy exemptions that at the given
        /// scope. If $filter=excludeExpired() is provided, the returned list only
        /// includes all policy exemptions that either haven&#39;t expired or didn&#39;t set
        /// expiration date. If $filter=policyAssignmentId eq &#39;{value}&#39; is provided.
        /// the returned list only includes all policy exemptions that are associated
        /// with the give policyAssignmentId.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyExemption> List(this IPolicyExemptionsOperations operations, string filter = default(string))
        {
                return ((IPolicyExemptionsOperations)operations).ListAsync(filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves the list of all policy exemptions associated with
        /// the given subscription that match the optional given $filter. Valid values
        /// for $filter are: &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or
        /// &#39;policyAssignmentId eq &#39;{value}&#39;&#39;. If $filter is not provided, the
        /// unfiltered list includes all policy exemptions associated with the
        /// subscription, including those that apply directly or from management groups
        /// that contain the given subscription, as well as any applied to objects
        /// contained within the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or &#39;policyAssignmentId eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, no filtering is performed. If
        /// $filter is not provided, the unfiltered list includes all policy exemptions
        /// associated with the scope, including those that apply directly or apply
        /// from containing scopes. If $filter=atScope() is provided, the returned list
        /// only includes all policy exemptions that apply to the scope, which is
        /// everything in the unfiltered list except those applied to sub scopes
        /// contained within the given scope. If $filter=atExactScope() is provided,
        /// the returned list only includes all policy exemptions that at the given
        /// scope. If $filter=excludeExpired() is provided, the returned list only
        /// includes all policy exemptions that either haven&#39;t expired or didn&#39;t set
        /// expiration date. If $filter=policyAssignmentId eq &#39;{value}&#39; is provided.
        /// the returned list only includes all policy exemptions that are associated
        /// with the give policyAssignmentId.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyExemption>> ListAsync(this IPolicyExemptionsOperations operations, string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation retrieves the list of all policy exemptions associated with
        /// the given resource group in the given subscription that match the optional
        /// given $filter. Valid values for $filter are: &#39;atScope()&#39;, &#39;atExactScope()&#39;,
        /// &#39;excludeExpired()&#39; or &#39;policyAssignmentId eq &#39;{value}&#39;&#39;. If $filter is not
        /// provided, the unfiltered list includes all policy exemptions associated
        /// with the resource group, including those that apply directly or apply from
        /// containing scopes, as well as any applied to resources contained within the
        /// resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group containing the resource.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or &#39;policyAssignmentId eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, no filtering is performed. If
        /// $filter is not provided, the unfiltered list includes all policy exemptions
        /// associated with the scope, including those that apply directly or apply
        /// from containing scopes. If $filter=atScope() is provided, the returned list
        /// only includes all policy exemptions that apply to the scope, which is
        /// everything in the unfiltered list except those applied to sub scopes
        /// contained within the given scope. If $filter=atExactScope() is provided,
        /// the returned list only includes all policy exemptions that at the given
        /// scope. If $filter=excludeExpired() is provided, the returned list only
        /// includes all policy exemptions that either haven&#39;t expired or didn&#39;t set
        /// expiration date. If $filter=policyAssignmentId eq &#39;{value}&#39; is provided.
        /// the returned list only includes all policy exemptions that are associated
        /// with the give policyAssignmentId.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyExemption> ListForResourceGroup(this IPolicyExemptionsOperations operations, string resourceGroupName, string filter = default(string))
        {
                return ((IPolicyExemptionsOperations)operations).ListForResourceGroupAsync(resourceGroupName, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves the list of all policy exemptions associated with
        /// the given resource group in the given subscription that match the optional
        /// given $filter. Valid values for $filter are: &#39;atScope()&#39;, &#39;atExactScope()&#39;,
        /// &#39;excludeExpired()&#39; or &#39;policyAssignmentId eq &#39;{value}&#39;&#39;. If $filter is not
        /// provided, the unfiltered list includes all policy exemptions associated
        /// with the resource group, including those that apply directly or apply from
        /// containing scopes, as well as any applied to resources contained within the
        /// resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group containing the resource.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or &#39;policyAssignmentId eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, no filtering is performed. If
        /// $filter is not provided, the unfiltered list includes all policy exemptions
        /// associated with the scope, including those that apply directly or apply
        /// from containing scopes. If $filter=atScope() is provided, the returned list
        /// only includes all policy exemptions that apply to the scope, which is
        /// everything in the unfiltered list except those applied to sub scopes
        /// contained within the given scope. If $filter=atExactScope() is provided,
        /// the returned list only includes all policy exemptions that at the given
        /// scope. If $filter=excludeExpired() is provided, the returned list only
        /// includes all policy exemptions that either haven&#39;t expired or didn&#39;t set
        /// expiration date. If $filter=policyAssignmentId eq &#39;{value}&#39; is provided.
        /// the returned list only includes all policy exemptions that are associated
        /// with the give policyAssignmentId.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyExemption>> ListForResourceGroupAsync(this IPolicyExemptionsOperations operations, string resourceGroupName, string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForResourceGroupWithHttpMessagesAsync(resourceGroupName, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation retrieves the list of all policy exemptions associated with
        /// the specified resource in the given resource group and subscription that
        /// match the optional given $filter. Valid values for $filter are:
        /// &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or &#39;policyAssignmentId eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy exemptions associated with the resource, including those that apply
        /// directly or from all containing scopes, as well as any applied to resources
        /// contained within the resource. Three parameters plus the resource name are
        /// used to identify a specific resource. If the resource is not part of a
        /// parent resource (the more common case), the parent resource path should not
        /// be provided (or provided as &#39;&#39;). For example a web app could be specified
        /// as ({resourceProviderNamespace} == &#39;Microsoft.Web&#39;, {parentResourcePath} ==
        /// &#39;&#39;, {resourceType} == &#39;sites&#39;, {resourceName} == &#39;MyWebApp&#39;). If the
        /// resource is part of a parent resource, then all parameters should be
        /// provided. For example a virtual machine DNS name could be specified as
        /// ({resourceProviderNamespace} == &#39;Microsoft.Compute&#39;, {parentResourcePath}
        /// == &#39;virtualMachines/MyVirtualMachine&#39;, {resourceType} == &#39;domainNames&#39;,
        /// {resourceName} == &#39;MyComputerName&#39;). A convenient alternative to providing
        /// the namespace and type name separately is to provide both in the
        /// {resourceType} parameter, format: ({resourceProviderNamespace} == &#39;&#39;,
        /// {parentResourcePath} == &#39;&#39;, {resourceType} == &#39;Microsoft.Web/sites&#39;,
        /// {resourceName} == &#39;MyWebApp&#39;).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group containing the resource.
        /// </param>
        /// <param name='resourceProviderNamespace'>
        /// The namespace of the resource provider. For example, the namespace of a
        /// virtual machine is Microsoft.Compute (from
        /// Microsoft.Compute/virtualMachines)
        /// </param>
        /// <param name='parentResourcePath'>
        /// The parent resource path. Use empty string if there is none.
        /// </param>
        /// <param name='resourceType'>
        /// The resource type name. For example the type name of a web app is &#39;sites&#39;
        /// (from Microsoft.Web/sites).
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or &#39;policyAssignmentId eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, no filtering is performed. If
        /// $filter is not provided, the unfiltered list includes all policy exemptions
        /// associated with the scope, including those that apply directly or apply
        /// from containing scopes. If $filter=atScope() is provided, the returned list
        /// only includes all policy exemptions that apply to the scope, which is
        /// everything in the unfiltered list except those applied to sub scopes
        /// contained within the given scope. If $filter=atExactScope() is provided,
        /// the returned list only includes all policy exemptions that at the given
        /// scope. If $filter=excludeExpired() is provided, the returned list only
        /// includes all policy exemptions that either haven&#39;t expired or didn&#39;t set
        /// expiration date. If $filter=policyAssignmentId eq &#39;{value}&#39; is provided.
        /// the returned list only includes all policy exemptions that are associated
        /// with the give policyAssignmentId.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyExemption> ListForResource(this IPolicyExemptionsOperations operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string filter = default(string))
        {
                return ((IPolicyExemptionsOperations)operations).ListForResourceAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves the list of all policy exemptions associated with
        /// the specified resource in the given resource group and subscription that
        /// match the optional given $filter. Valid values for $filter are:
        /// &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or &#39;policyAssignmentId eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy exemptions associated with the resource, including those that apply
        /// directly or from all containing scopes, as well as any applied to resources
        /// contained within the resource. Three parameters plus the resource name are
        /// used to identify a specific resource. If the resource is not part of a
        /// parent resource (the more common case), the parent resource path should not
        /// be provided (or provided as &#39;&#39;). For example a web app could be specified
        /// as ({resourceProviderNamespace} == &#39;Microsoft.Web&#39;, {parentResourcePath} ==
        /// &#39;&#39;, {resourceType} == &#39;sites&#39;, {resourceName} == &#39;MyWebApp&#39;). If the
        /// resource is part of a parent resource, then all parameters should be
        /// provided. For example a virtual machine DNS name could be specified as
        /// ({resourceProviderNamespace} == &#39;Microsoft.Compute&#39;, {parentResourcePath}
        /// == &#39;virtualMachines/MyVirtualMachine&#39;, {resourceType} == &#39;domainNames&#39;,
        /// {resourceName} == &#39;MyComputerName&#39;). A convenient alternative to providing
        /// the namespace and type name separately is to provide both in the
        /// {resourceType} parameter, format: ({resourceProviderNamespace} == &#39;&#39;,
        /// {parentResourcePath} == &#39;&#39;, {resourceType} == &#39;Microsoft.Web/sites&#39;,
        /// {resourceName} == &#39;MyWebApp&#39;).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group containing the resource.
        /// </param>
        /// <param name='resourceProviderNamespace'>
        /// The namespace of the resource provider. For example, the namespace of a
        /// virtual machine is Microsoft.Compute (from
        /// Microsoft.Compute/virtualMachines)
        /// </param>
        /// <param name='parentResourcePath'>
        /// The parent resource path. Use empty string if there is none.
        /// </param>
        /// <param name='resourceType'>
        /// The resource type name. For example the type name of a web app is &#39;sites&#39;
        /// (from Microsoft.Web/sites).
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or &#39;policyAssignmentId eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, no filtering is performed. If
        /// $filter is not provided, the unfiltered list includes all policy exemptions
        /// associated with the scope, including those that apply directly or apply
        /// from containing scopes. If $filter=atScope() is provided, the returned list
        /// only includes all policy exemptions that apply to the scope, which is
        /// everything in the unfiltered list except those applied to sub scopes
        /// contained within the given scope. If $filter=atExactScope() is provided,
        /// the returned list only includes all policy exemptions that at the given
        /// scope. If $filter=excludeExpired() is provided, the returned list only
        /// includes all policy exemptions that either haven&#39;t expired or didn&#39;t set
        /// expiration date. If $filter=policyAssignmentId eq &#39;{value}&#39; is provided.
        /// the returned list only includes all policy exemptions that are associated
        /// with the give policyAssignmentId.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyExemption>> ListForResourceAsync(this IPolicyExemptionsOperations operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForResourceWithHttpMessagesAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation retrieves the list of all policy exemptions applicable to
        /// the management group that match the given $filter. Valid values for $filter
        /// are: &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or
        /// &#39;policyAssignmentId eq &#39;{value}&#39;&#39;. If $filter=atScope() is provided, the
        /// returned list includes all policy exemptions that are assigned to the
        /// management group or the management group&#39;s ancestors.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// The ID of the management group.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or &#39;policyAssignmentId eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, no filtering is performed. If
        /// $filter is not provided, the unfiltered list includes all policy exemptions
        /// associated with the scope, including those that apply directly or apply
        /// from containing scopes. If $filter=atScope() is provided, the returned list
        /// only includes all policy exemptions that apply to the scope, which is
        /// everything in the unfiltered list except those applied to sub scopes
        /// contained within the given scope. If $filter=atExactScope() is provided,
        /// the returned list only includes all policy exemptions that at the given
        /// scope. If $filter=excludeExpired() is provided, the returned list only
        /// includes all policy exemptions that either haven&#39;t expired or didn&#39;t set
        /// expiration date. If $filter=policyAssignmentId eq &#39;{value}&#39; is provided.
        /// the returned list only includes all policy exemptions that are associated
        /// with the give policyAssignmentId.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyExemption> ListForManagementGroup(this IPolicyExemptionsOperations operations, string managementGroupId, string filter = default(string))
        {
                return ((IPolicyExemptionsOperations)operations).ListForManagementGroupAsync(managementGroupId, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves the list of all policy exemptions applicable to
        /// the management group that match the given $filter. Valid values for $filter
        /// are: &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or
        /// &#39;policyAssignmentId eq &#39;{value}&#39;&#39;. If $filter=atScope() is provided, the
        /// returned list includes all policy exemptions that are assigned to the
        /// management group or the management group&#39;s ancestors.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// The ID of the management group.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or &#39;policyAssignmentId eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, no filtering is performed. If
        /// $filter is not provided, the unfiltered list includes all policy exemptions
        /// associated with the scope, including those that apply directly or apply
        /// from containing scopes. If $filter=atScope() is provided, the returned list
        /// only includes all policy exemptions that apply to the scope, which is
        /// everything in the unfiltered list except those applied to sub scopes
        /// contained within the given scope. If $filter=atExactScope() is provided,
        /// the returned list only includes all policy exemptions that at the given
        /// scope. If $filter=excludeExpired() is provided, the returned list only
        /// includes all policy exemptions that either haven&#39;t expired or didn&#39;t set
        /// expiration date. If $filter=policyAssignmentId eq &#39;{value}&#39; is provided.
        /// the returned list only includes all policy exemptions that are associated
        /// with the give policyAssignmentId.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyExemption>> ListForManagementGroupAsync(this IPolicyExemptionsOperations operations, string managementGroupId, string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForManagementGroupWithHttpMessagesAsync(managementGroupId, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation retrieves the list of all policy exemptions associated with
        /// the given subscription that match the optional given $filter. Valid values
        /// for $filter are: &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or
        /// &#39;policyAssignmentId eq &#39;{value}&#39;&#39;. If $filter is not provided, the
        /// unfiltered list includes all policy exemptions associated with the
        /// subscription, including those that apply directly or from management groups
        /// that contain the given subscription, as well as any applied to objects
        /// contained within the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyExemption> ListNext(this IPolicyExemptionsOperations operations, string nextPageLink)
        {
                return ((IPolicyExemptionsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves the list of all policy exemptions associated with
        /// the given subscription that match the optional given $filter. Valid values
        /// for $filter are: &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or
        /// &#39;policyAssignmentId eq &#39;{value}&#39;&#39;. If $filter is not provided, the
        /// unfiltered list includes all policy exemptions associated with the
        /// subscription, including those that apply directly or from management groups
        /// that contain the given subscription, as well as any applied to objects
        /// contained within the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyExemption>> ListNextAsync(this IPolicyExemptionsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation retrieves the list of all policy exemptions associated with
        /// the given resource group in the given subscription that match the optional
        /// given $filter. Valid values for $filter are: &#39;atScope()&#39;, &#39;atExactScope()&#39;,
        /// &#39;excludeExpired()&#39; or &#39;policyAssignmentId eq &#39;{value}&#39;&#39;. If $filter is not
        /// provided, the unfiltered list includes all policy exemptions associated
        /// with the resource group, including those that apply directly or apply from
        /// containing scopes, as well as any applied to resources contained within the
        /// resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyExemption> ListForResourceGroupNext(this IPolicyExemptionsOperations operations, string nextPageLink)
        {
                return ((IPolicyExemptionsOperations)operations).ListForResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves the list of all policy exemptions associated with
        /// the given resource group in the given subscription that match the optional
        /// given $filter. Valid values for $filter are: &#39;atScope()&#39;, &#39;atExactScope()&#39;,
        /// &#39;excludeExpired()&#39; or &#39;policyAssignmentId eq &#39;{value}&#39;&#39;. If $filter is not
        /// provided, the unfiltered list includes all policy exemptions associated
        /// with the resource group, including those that apply directly or apply from
        /// containing scopes, as well as any applied to resources contained within the
        /// resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyExemption>> ListForResourceGroupNextAsync(this IPolicyExemptionsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation retrieves the list of all policy exemptions associated with
        /// the specified resource in the given resource group and subscription that
        /// match the optional given $filter. Valid values for $filter are:
        /// &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or &#39;policyAssignmentId eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy exemptions associated with the resource, including those that apply
        /// directly or from all containing scopes, as well as any applied to resources
        /// contained within the resource. Three parameters plus the resource name are
        /// used to identify a specific resource. If the resource is not part of a
        /// parent resource (the more common case), the parent resource path should not
        /// be provided (or provided as &#39;&#39;). For example a web app could be specified
        /// as ({resourceProviderNamespace} == &#39;Microsoft.Web&#39;, {parentResourcePath} ==
        /// &#39;&#39;, {resourceType} == &#39;sites&#39;, {resourceName} == &#39;MyWebApp&#39;). If the
        /// resource is part of a parent resource, then all parameters should be
        /// provided. For example a virtual machine DNS name could be specified as
        /// ({resourceProviderNamespace} == &#39;Microsoft.Compute&#39;, {parentResourcePath}
        /// == &#39;virtualMachines/MyVirtualMachine&#39;, {resourceType} == &#39;domainNames&#39;,
        /// {resourceName} == &#39;MyComputerName&#39;). A convenient alternative to providing
        /// the namespace and type name separately is to provide both in the
        /// {resourceType} parameter, format: ({resourceProviderNamespace} == &#39;&#39;,
        /// {parentResourcePath} == &#39;&#39;, {resourceType} == &#39;Microsoft.Web/sites&#39;,
        /// {resourceName} == &#39;MyWebApp&#39;).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyExemption> ListForResourceNext(this IPolicyExemptionsOperations operations, string nextPageLink)
        {
                return ((IPolicyExemptionsOperations)operations).ListForResourceNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves the list of all policy exemptions associated with
        /// the specified resource in the given resource group and subscription that
        /// match the optional given $filter. Valid values for $filter are:
        /// &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or &#39;policyAssignmentId eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy exemptions associated with the resource, including those that apply
        /// directly or from all containing scopes, as well as any applied to resources
        /// contained within the resource. Three parameters plus the resource name are
        /// used to identify a specific resource. If the resource is not part of a
        /// parent resource (the more common case), the parent resource path should not
        /// be provided (or provided as &#39;&#39;). For example a web app could be specified
        /// as ({resourceProviderNamespace} == &#39;Microsoft.Web&#39;, {parentResourcePath} ==
        /// &#39;&#39;, {resourceType} == &#39;sites&#39;, {resourceName} == &#39;MyWebApp&#39;). If the
        /// resource is part of a parent resource, then all parameters should be
        /// provided. For example a virtual machine DNS name could be specified as
        /// ({resourceProviderNamespace} == &#39;Microsoft.Compute&#39;, {parentResourcePath}
        /// == &#39;virtualMachines/MyVirtualMachine&#39;, {resourceType} == &#39;domainNames&#39;,
        /// {resourceName} == &#39;MyComputerName&#39;). A convenient alternative to providing
        /// the namespace and type name separately is to provide both in the
        /// {resourceType} parameter, format: ({resourceProviderNamespace} == &#39;&#39;,
        /// {parentResourcePath} == &#39;&#39;, {resourceType} == &#39;Microsoft.Web/sites&#39;,
        /// {resourceName} == &#39;MyWebApp&#39;).
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyExemption>> ListForResourceNextAsync(this IPolicyExemptionsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForResourceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation retrieves the list of all policy exemptions applicable to
        /// the management group that match the given $filter. Valid values for $filter
        /// are: &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or
        /// &#39;policyAssignmentId eq &#39;{value}&#39;&#39;. If $filter=atScope() is provided, the
        /// returned list includes all policy exemptions that are assigned to the
        /// management group or the management group&#39;s ancestors.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicyExemption> ListForManagementGroupNext(this IPolicyExemptionsOperations operations, string nextPageLink)
        {
                return ((IPolicyExemptionsOperations)operations).ListForManagementGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves the list of all policy exemptions applicable to
        /// the management group that match the given $filter. Valid values for $filter
        /// are: &#39;atScope()&#39;, &#39;atExactScope()&#39;, &#39;excludeExpired()&#39; or
        /// &#39;policyAssignmentId eq &#39;{value}&#39;&#39;. If $filter=atScope() is provided, the
        /// returned list includes all policy exemptions that are assigned to the
        /// management group or the management group&#39;s ancestors.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicyExemption>> ListForManagementGroupNextAsync(this IPolicyExemptionsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListForManagementGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
