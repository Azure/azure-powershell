// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.ResourceManager
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DataPolicyManifestsOperations
    /// </summary>
    public static partial class DataPolicyManifestsOperationsExtensions
    {
        /// <summary>
        /// This operation retrieves the data policy manifest with the given policy
        /// mode.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='policyMode'>
        /// The policy mode of the data policy manifest to get.
        /// </param>
        public static DataPolicyManifest GetByPolicyMode(this IDataPolicyManifestsOperations operations, string policyMode)
        {
                return ((IDataPolicyManifestsOperations)operations).GetByPolicyModeAsync(policyMode).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves the data policy manifest with the given policy
        /// mode.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='policyMode'>
        /// The policy mode of the data policy manifest to get.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataPolicyManifest> GetByPolicyModeAsync(this IDataPolicyManifestsOperations operations, string policyMode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetByPolicyModeWithHttpMessagesAsync(policyMode, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation retrieves a list of all the data policy manifests that match
        /// the optional given $filter. Valid values for $filter are:
        /// &#34;$filter=namespace eq &#39;{0}&#39;&#34;. If $filter is not provided, the unfiltered
        /// list includes all data policy manifests for data resource types. If
        /// $filter=namespace is provided, the returned list only includes all data
        /// policy manifests that have a namespace matching the provided value.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#34;namespace eq &#39;{value}&#39;&#34;. If $filter is not provided, no filtering is
        /// performed. If $filter=namespace eq &#39;{value}&#39; is provided, the returned list
        /// only includes all data policy manifests that have a namespace matching the
        /// provided value.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DataPolicyManifest> List(this IDataPolicyManifestsOperations operations, string filter = default(string))
        {
                return ((IDataPolicyManifestsOperations)operations).ListAsync(filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves a list of all the data policy manifests that match
        /// the optional given $filter. Valid values for $filter are:
        /// &#34;$filter=namespace eq &#39;{0}&#39;&#34;. If $filter is not provided, the unfiltered
        /// list includes all data policy manifests for data resource types. If
        /// $filter=namespace is provided, the returned list only includes all data
        /// policy manifests that have a namespace matching the provided value.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#34;namespace eq &#39;{value}&#39;&#34;. If $filter is not provided, no filtering is
        /// performed. If $filter=namespace eq &#39;{value}&#39; is provided, the returned list
        /// only includes all data policy manifests that have a namespace matching the
        /// provided value.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DataPolicyManifest>> ListAsync(this IDataPolicyManifestsOperations operations, string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation retrieves a list of all the data policy manifests that match
        /// the optional given $filter. Valid values for $filter are:
        /// &#34;$filter=namespace eq &#39;{0}&#39;&#34;. If $filter is not provided, the unfiltered
        /// list includes all data policy manifests for data resource types. If
        /// $filter=namespace is provided, the returned list only includes all data
        /// policy manifests that have a namespace matching the provided value.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DataPolicyManifest> ListNext(this IDataPolicyManifestsOperations operations, string nextPageLink)
        {
                return ((IDataPolicyManifestsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves a list of all the data policy manifests that match
        /// the optional given $filter. Valid values for $filter are:
        /// &#34;$filter=namespace eq &#39;{0}&#39;&#34;. If $filter is not provided, the unfiltered
        /// list includes all data policy manifests for data resource types. If
        /// $filter=namespace is provided, the returned list only includes all data
        /// policy manifests that have a namespace matching the provided value.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DataPolicyManifest>> ListNextAsync(this IDataPolicyManifestsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
